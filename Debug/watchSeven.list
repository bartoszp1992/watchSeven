
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b48  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f44  08008f44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f4c  08008f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000000c  08008f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08008f60  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5c9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003114  00000000  00000000  0003b5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc57  00000000  00000000  00041090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d90  00000000  00000000  0005cce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2db0  00000000  00000000  00076a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005208  00000000  00000000  0012987c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008bec 	.word	0x08008bec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08008bec 	.word	0x08008bec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f81e 	bl	8000460 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_f2uiz>:
 8000430:	219e      	movs	r1, #158	; 0x9e
 8000432:	b510      	push	{r4, lr}
 8000434:	05c9      	lsls	r1, r1, #23
 8000436:	1c04      	adds	r4, r0, #0
 8000438:	f001 ff5c 	bl	80022f4 <__aeabi_fcmpge>
 800043c:	2800      	cmp	r0, #0
 800043e:	d103      	bne.n	8000448 <__aeabi_f2uiz+0x18>
 8000440:	1c20      	adds	r0, r4, #0
 8000442:	f000 fe63 	bl	800110c <__aeabi_f2iz>
 8000446:	bd10      	pop	{r4, pc}
 8000448:	219e      	movs	r1, #158	; 0x9e
 800044a:	1c20      	adds	r0, r4, #0
 800044c:	05c9      	lsls	r1, r1, #23
 800044e:	f000 fc95 	bl	8000d7c <__aeabi_fsub>
 8000452:	f000 fe5b 	bl	800110c <__aeabi_f2iz>
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	061b      	lsls	r3, r3, #24
 800045a:	469c      	mov	ip, r3
 800045c:	4460      	add	r0, ip
 800045e:	e7f2      	b.n	8000446 <__aeabi_f2uiz+0x16>

08000460 <__udivmoddi4>:
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	4657      	mov	r7, sl
 8000464:	464e      	mov	r6, r9
 8000466:	4645      	mov	r5, r8
 8000468:	46de      	mov	lr, fp
 800046a:	b5e0      	push	{r5, r6, r7, lr}
 800046c:	0004      	movs	r4, r0
 800046e:	000d      	movs	r5, r1
 8000470:	4692      	mov	sl, r2
 8000472:	4699      	mov	r9, r3
 8000474:	b083      	sub	sp, #12
 8000476:	428b      	cmp	r3, r1
 8000478:	d830      	bhi.n	80004dc <__udivmoddi4+0x7c>
 800047a:	d02d      	beq.n	80004d8 <__udivmoddi4+0x78>
 800047c:	4649      	mov	r1, r9
 800047e:	4650      	mov	r0, sl
 8000480:	f001 ff60 	bl	8002344 <__clzdi2>
 8000484:	0029      	movs	r1, r5
 8000486:	0006      	movs	r6, r0
 8000488:	0020      	movs	r0, r4
 800048a:	f001 ff5b 	bl	8002344 <__clzdi2>
 800048e:	1a33      	subs	r3, r6, r0
 8000490:	4698      	mov	r8, r3
 8000492:	3b20      	subs	r3, #32
 8000494:	469b      	mov	fp, r3
 8000496:	d433      	bmi.n	8000500 <__udivmoddi4+0xa0>
 8000498:	465a      	mov	r2, fp
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	4642      	mov	r2, r8
 80004a0:	001f      	movs	r7, r3
 80004a2:	4653      	mov	r3, sl
 80004a4:	4093      	lsls	r3, r2
 80004a6:	001e      	movs	r6, r3
 80004a8:	42af      	cmp	r7, r5
 80004aa:	d83a      	bhi.n	8000522 <__udivmoddi4+0xc2>
 80004ac:	42af      	cmp	r7, r5
 80004ae:	d100      	bne.n	80004b2 <__udivmoddi4+0x52>
 80004b0:	e078      	b.n	80005a4 <__udivmoddi4+0x144>
 80004b2:	465b      	mov	r3, fp
 80004b4:	1ba4      	subs	r4, r4, r6
 80004b6:	41bd      	sbcs	r5, r7
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	da00      	bge.n	80004be <__udivmoddi4+0x5e>
 80004bc:	e075      	b.n	80005aa <__udivmoddi4+0x14a>
 80004be:	2200      	movs	r2, #0
 80004c0:	2300      	movs	r3, #0
 80004c2:	9200      	str	r2, [sp, #0]
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	465a      	mov	r2, fp
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	4642      	mov	r2, r8
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	e028      	b.n	800052a <__udivmoddi4+0xca>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d9cf      	bls.n	800047c <__udivmoddi4+0x1c>
 80004dc:	2200      	movs	r2, #0
 80004de:	2300      	movs	r3, #0
 80004e0:	9200      	str	r2, [sp, #0]
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <__udivmoddi4+0x8e>
 80004ea:	601c      	str	r4, [r3, #0]
 80004ec:	605d      	str	r5, [r3, #4]
 80004ee:	9800      	ldr	r0, [sp, #0]
 80004f0:	9901      	ldr	r1, [sp, #4]
 80004f2:	b003      	add	sp, #12
 80004f4:	bcf0      	pop	{r4, r5, r6, r7}
 80004f6:	46bb      	mov	fp, r7
 80004f8:	46b2      	mov	sl, r6
 80004fa:	46a9      	mov	r9, r5
 80004fc:	46a0      	mov	r8, r4
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000500:	4642      	mov	r2, r8
 8000502:	2320      	movs	r3, #32
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	4652      	mov	r2, sl
 8000508:	40da      	lsrs	r2, r3
 800050a:	4641      	mov	r1, r8
 800050c:	0013      	movs	r3, r2
 800050e:	464a      	mov	r2, r9
 8000510:	408a      	lsls	r2, r1
 8000512:	0017      	movs	r7, r2
 8000514:	4642      	mov	r2, r8
 8000516:	431f      	orrs	r7, r3
 8000518:	4653      	mov	r3, sl
 800051a:	4093      	lsls	r3, r2
 800051c:	001e      	movs	r6, r3
 800051e:	42af      	cmp	r7, r5
 8000520:	d9c4      	bls.n	80004ac <__udivmoddi4+0x4c>
 8000522:	2200      	movs	r2, #0
 8000524:	2300      	movs	r3, #0
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	4643      	mov	r3, r8
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0d9      	beq.n	80004e4 <__udivmoddi4+0x84>
 8000530:	07fb      	lsls	r3, r7, #31
 8000532:	0872      	lsrs	r2, r6, #1
 8000534:	431a      	orrs	r2, r3
 8000536:	4646      	mov	r6, r8
 8000538:	087b      	lsrs	r3, r7, #1
 800053a:	e00e      	b.n	800055a <__udivmoddi4+0xfa>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d101      	bne.n	8000544 <__udivmoddi4+0xe4>
 8000540:	42a2      	cmp	r2, r4
 8000542:	d80c      	bhi.n	800055e <__udivmoddi4+0xfe>
 8000544:	1aa4      	subs	r4, r4, r2
 8000546:	419d      	sbcs	r5, r3
 8000548:	2001      	movs	r0, #1
 800054a:	1924      	adds	r4, r4, r4
 800054c:	416d      	adcs	r5, r5
 800054e:	2100      	movs	r1, #0
 8000550:	3e01      	subs	r6, #1
 8000552:	1824      	adds	r4, r4, r0
 8000554:	414d      	adcs	r5, r1
 8000556:	2e00      	cmp	r6, #0
 8000558:	d006      	beq.n	8000568 <__udivmoddi4+0x108>
 800055a:	42ab      	cmp	r3, r5
 800055c:	d9ee      	bls.n	800053c <__udivmoddi4+0xdc>
 800055e:	3e01      	subs	r6, #1
 8000560:	1924      	adds	r4, r4, r4
 8000562:	416d      	adcs	r5, r5
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1f8      	bne.n	800055a <__udivmoddi4+0xfa>
 8000568:	9800      	ldr	r0, [sp, #0]
 800056a:	9901      	ldr	r1, [sp, #4]
 800056c:	465b      	mov	r3, fp
 800056e:	1900      	adds	r0, r0, r4
 8000570:	4169      	adcs	r1, r5
 8000572:	2b00      	cmp	r3, #0
 8000574:	db24      	blt.n	80005c0 <__udivmoddi4+0x160>
 8000576:	002b      	movs	r3, r5
 8000578:	465a      	mov	r2, fp
 800057a:	4644      	mov	r4, r8
 800057c:	40d3      	lsrs	r3, r2
 800057e:	002a      	movs	r2, r5
 8000580:	40e2      	lsrs	r2, r4
 8000582:	001c      	movs	r4, r3
 8000584:	465b      	mov	r3, fp
 8000586:	0015      	movs	r5, r2
 8000588:	2b00      	cmp	r3, #0
 800058a:	db2a      	blt.n	80005e2 <__udivmoddi4+0x182>
 800058c:	0026      	movs	r6, r4
 800058e:	409e      	lsls	r6, r3
 8000590:	0033      	movs	r3, r6
 8000592:	0026      	movs	r6, r4
 8000594:	4647      	mov	r7, r8
 8000596:	40be      	lsls	r6, r7
 8000598:	0032      	movs	r2, r6
 800059a:	1a80      	subs	r0, r0, r2
 800059c:	4199      	sbcs	r1, r3
 800059e:	9000      	str	r0, [sp, #0]
 80005a0:	9101      	str	r1, [sp, #4]
 80005a2:	e79f      	b.n	80004e4 <__udivmoddi4+0x84>
 80005a4:	42a3      	cmp	r3, r4
 80005a6:	d8bc      	bhi.n	8000522 <__udivmoddi4+0xc2>
 80005a8:	e783      	b.n	80004b2 <__udivmoddi4+0x52>
 80005aa:	4642      	mov	r2, r8
 80005ac:	2320      	movs	r3, #32
 80005ae:	2100      	movs	r1, #0
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	2200      	movs	r2, #0
 80005b4:	9100      	str	r1, [sp, #0]
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	e786      	b.n	80004ce <__udivmoddi4+0x6e>
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	4646      	mov	r6, r8
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0023      	movs	r3, r4
 80005ce:	40f3      	lsrs	r3, r6
 80005d0:	4644      	mov	r4, r8
 80005d2:	4313      	orrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dad4      	bge.n	800058c <__udivmoddi4+0x12c>
 80005e2:	4642      	mov	r2, r8
 80005e4:	002f      	movs	r7, r5
 80005e6:	2320      	movs	r3, #32
 80005e8:	0026      	movs	r6, r4
 80005ea:	4097      	lsls	r7, r2
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	40de      	lsrs	r6, r3
 80005f0:	003b      	movs	r3, r7
 80005f2:	4333      	orrs	r3, r6
 80005f4:	e7cd      	b.n	8000592 <__udivmoddi4+0x132>
 80005f6:	46c0      	nop			; (mov r8, r8)

080005f8 <__aeabi_fadd>:
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	4646      	mov	r6, r8
 80005fc:	46d6      	mov	lr, sl
 80005fe:	464f      	mov	r7, r9
 8000600:	024d      	lsls	r5, r1, #9
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	b5c0      	push	{r6, r7, lr}
 8000606:	0a52      	lsrs	r2, r2, #9
 8000608:	0a6e      	lsrs	r6, r5, #9
 800060a:	0047      	lsls	r7, r0, #1
 800060c:	46b0      	mov	r8, r6
 800060e:	0e3f      	lsrs	r7, r7, #24
 8000610:	004e      	lsls	r6, r1, #1
 8000612:	0fc4      	lsrs	r4, r0, #31
 8000614:	00d0      	lsls	r0, r2, #3
 8000616:	4694      	mov	ip, r2
 8000618:	003b      	movs	r3, r7
 800061a:	4682      	mov	sl, r0
 800061c:	0e36      	lsrs	r6, r6, #24
 800061e:	0fc9      	lsrs	r1, r1, #31
 8000620:	09ad      	lsrs	r5, r5, #6
 8000622:	428c      	cmp	r4, r1
 8000624:	d06d      	beq.n	8000702 <__aeabi_fadd+0x10a>
 8000626:	1bb8      	subs	r0, r7, r6
 8000628:	4681      	mov	r9, r0
 800062a:	2800      	cmp	r0, #0
 800062c:	dd4d      	ble.n	80006ca <__aeabi_fadd+0xd2>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x3c>
 8000632:	e088      	b.n	8000746 <__aeabi_fadd+0x14e>
 8000634:	2fff      	cmp	r7, #255	; 0xff
 8000636:	d05a      	beq.n	80006ee <__aeabi_fadd+0xf6>
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	04db      	lsls	r3, r3, #19
 800063c:	431d      	orrs	r5, r3
 800063e:	464b      	mov	r3, r9
 8000640:	2201      	movs	r2, #1
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dc0a      	bgt.n	800065c <__aeabi_fadd+0x64>
 8000646:	002b      	movs	r3, r5
 8000648:	464a      	mov	r2, r9
 800064a:	4649      	mov	r1, r9
 800064c:	40d3      	lsrs	r3, r2
 800064e:	2220      	movs	r2, #32
 8000650:	1a52      	subs	r2, r2, r1
 8000652:	4095      	lsls	r5, r2
 8000654:	002a      	movs	r2, r5
 8000656:	1e55      	subs	r5, r2, #1
 8000658:	41aa      	sbcs	r2, r5
 800065a:	431a      	orrs	r2, r3
 800065c:	4653      	mov	r3, sl
 800065e:	1a9a      	subs	r2, r3, r2
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d400      	bmi.n	8000666 <__aeabi_fadd+0x6e>
 8000664:	e0b9      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000666:	0192      	lsls	r2, r2, #6
 8000668:	0996      	lsrs	r6, r2, #6
 800066a:	0030      	movs	r0, r6
 800066c:	f001 fe4c 	bl	8002308 <__clzsi2>
 8000670:	3805      	subs	r0, #5
 8000672:	4086      	lsls	r6, r0
 8000674:	4287      	cmp	r7, r0
 8000676:	dd00      	ble.n	800067a <__aeabi_fadd+0x82>
 8000678:	e0d4      	b.n	8000824 <__aeabi_fadd+0x22c>
 800067a:	0033      	movs	r3, r6
 800067c:	1bc7      	subs	r7, r0, r7
 800067e:	2020      	movs	r0, #32
 8000680:	3701      	adds	r7, #1
 8000682:	40fb      	lsrs	r3, r7
 8000684:	1bc7      	subs	r7, r0, r7
 8000686:	40be      	lsls	r6, r7
 8000688:	0032      	movs	r2, r6
 800068a:	1e56      	subs	r6, r2, #1
 800068c:	41b2      	sbcs	r2, r6
 800068e:	2700      	movs	r7, #0
 8000690:	431a      	orrs	r2, r3
 8000692:	0753      	lsls	r3, r2, #29
 8000694:	d004      	beq.n	80006a0 <__aeabi_fadd+0xa8>
 8000696:	230f      	movs	r3, #15
 8000698:	4013      	ands	r3, r2
 800069a:	2b04      	cmp	r3, #4
 800069c:	d000      	beq.n	80006a0 <__aeabi_fadd+0xa8>
 800069e:	3204      	adds	r2, #4
 80006a0:	0153      	lsls	r3, r2, #5
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_fadd+0xae>
 80006a4:	e09c      	b.n	80007e0 <__aeabi_fadd+0x1e8>
 80006a6:	1c7b      	adds	r3, r7, #1
 80006a8:	2ffe      	cmp	r7, #254	; 0xfe
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0xb6>
 80006ac:	e09a      	b.n	80007e4 <__aeabi_fadd+0x1ec>
 80006ae:	0192      	lsls	r2, r2, #6
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	4694      	mov	ip, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	05d8      	lsls	r0, r3, #23
 80006b8:	4663      	mov	r3, ip
 80006ba:	07e4      	lsls	r4, r4, #31
 80006bc:	4318      	orrs	r0, r3
 80006be:	4320      	orrs	r0, r4
 80006c0:	bce0      	pop	{r5, r6, r7}
 80006c2:	46ba      	mov	sl, r7
 80006c4:	46b1      	mov	r9, r6
 80006c6:	46a8      	mov	r8, r5
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d049      	beq.n	8000762 <__aeabi_fadd+0x16a>
 80006ce:	1bf3      	subs	r3, r6, r7
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0xde>
 80006d4:	e0b6      	b.n	8000844 <__aeabi_fadd+0x24c>
 80006d6:	4652      	mov	r2, sl
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d060      	beq.n	800079e <__aeabi_fadd+0x1a6>
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0xec>
 80006e2:	e0fc      	b.n	80008de <__aeabi_fadd+0x2e6>
 80006e4:	2eff      	cmp	r6, #255	; 0xff
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0xf2>
 80006e8:	e0b4      	b.n	8000854 <__aeabi_fadd+0x25c>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d078      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 80006f2:	2080      	movs	r0, #128	; 0x80
 80006f4:	03c0      	lsls	r0, r0, #15
 80006f6:	4310      	orrs	r0, r2
 80006f8:	0242      	lsls	r2, r0, #9
 80006fa:	0a53      	lsrs	r3, r2, #9
 80006fc:	469c      	mov	ip, r3
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	e7d9      	b.n	80006b6 <__aeabi_fadd+0xbe>
 8000702:	1bb9      	subs	r1, r7, r6
 8000704:	2900      	cmp	r1, #0
 8000706:	dd71      	ble.n	80007ec <__aeabi_fadd+0x1f4>
 8000708:	2e00      	cmp	r6, #0
 800070a:	d03f      	beq.n	800078c <__aeabi_fadd+0x194>
 800070c:	2fff      	cmp	r7, #255	; 0xff
 800070e:	d0ee      	beq.n	80006ee <__aeabi_fadd+0xf6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	431d      	orrs	r5, r3
 8000716:	2201      	movs	r2, #1
 8000718:	291b      	cmp	r1, #27
 800071a:	dc07      	bgt.n	800072c <__aeabi_fadd+0x134>
 800071c:	002a      	movs	r2, r5
 800071e:	2320      	movs	r3, #32
 8000720:	40ca      	lsrs	r2, r1
 8000722:	1a59      	subs	r1, r3, r1
 8000724:	408d      	lsls	r5, r1
 8000726:	1e6b      	subs	r3, r5, #1
 8000728:	419d      	sbcs	r5, r3
 800072a:	432a      	orrs	r2, r5
 800072c:	4452      	add	r2, sl
 800072e:	0153      	lsls	r3, r2, #5
 8000730:	d553      	bpl.n	80007da <__aeabi_fadd+0x1e2>
 8000732:	3701      	adds	r7, #1
 8000734:	2fff      	cmp	r7, #255	; 0xff
 8000736:	d055      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 8000738:	2301      	movs	r3, #1
 800073a:	497b      	ldr	r1, [pc, #492]	; (8000928 <__aeabi_fadd+0x330>)
 800073c:	4013      	ands	r3, r2
 800073e:	0852      	lsrs	r2, r2, #1
 8000740:	400a      	ands	r2, r1
 8000742:	431a      	orrs	r2, r3
 8000744:	e7a5      	b.n	8000692 <__aeabi_fadd+0x9a>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d02c      	beq.n	80007a4 <__aeabi_fadd+0x1ac>
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	469c      	mov	ip, r3
 8000750:	44e1      	add	r9, ip
 8000752:	464b      	mov	r3, r9
 8000754:	2b00      	cmp	r3, #0
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x162>
 8000758:	e0ad      	b.n	80008b6 <__aeabi_fadd+0x2be>
 800075a:	2fff      	cmp	r7, #255	; 0xff
 800075c:	d000      	beq.n	8000760 <__aeabi_fadd+0x168>
 800075e:	e76e      	b.n	800063e <__aeabi_fadd+0x46>
 8000760:	e7c5      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000762:	20fe      	movs	r0, #254	; 0xfe
 8000764:	1c7e      	adds	r6, r7, #1
 8000766:	4230      	tst	r0, r6
 8000768:	d160      	bne.n	800082c <__aeabi_fadd+0x234>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x178>
 800076e:	e093      	b.n	8000898 <__aeabi_fadd+0x2a0>
 8000770:	4652      	mov	r2, sl
 8000772:	2a00      	cmp	r2, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x180>
 8000776:	e0b6      	b.n	80008e6 <__aeabi_fadd+0x2ee>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d09c      	beq.n	80006b6 <__aeabi_fadd+0xbe>
 800077c:	1b52      	subs	r2, r2, r5
 800077e:	0150      	lsls	r0, r2, #5
 8000780:	d400      	bmi.n	8000784 <__aeabi_fadd+0x18c>
 8000782:	e0c3      	b.n	800090c <__aeabi_fadd+0x314>
 8000784:	4653      	mov	r3, sl
 8000786:	000c      	movs	r4, r1
 8000788:	1aea      	subs	r2, r5, r3
 800078a:	e782      	b.n	8000692 <__aeabi_fadd+0x9a>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d009      	beq.n	80007a4 <__aeabi_fadd+0x1ac>
 8000790:	3901      	subs	r1, #1
 8000792:	2900      	cmp	r1, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x1a0>
 8000796:	e08b      	b.n	80008b0 <__aeabi_fadd+0x2b8>
 8000798:	2fff      	cmp	r7, #255	; 0xff
 800079a:	d1bc      	bne.n	8000716 <__aeabi_fadd+0x11e>
 800079c:	e7a7      	b.n	80006ee <__aeabi_fadd+0xf6>
 800079e:	000c      	movs	r4, r1
 80007a0:	4642      	mov	r2, r8
 80007a2:	0037      	movs	r7, r6
 80007a4:	2fff      	cmp	r7, #255	; 0xff
 80007a6:	d0a2      	beq.n	80006ee <__aeabi_fadd+0xf6>
 80007a8:	0252      	lsls	r2, r2, #9
 80007aa:	0a53      	lsrs	r3, r2, #9
 80007ac:	469c      	mov	ip, r3
 80007ae:	b2fb      	uxtb	r3, r7
 80007b0:	e781      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007b2:	21fe      	movs	r1, #254	; 0xfe
 80007b4:	3701      	adds	r7, #1
 80007b6:	4239      	tst	r1, r7
 80007b8:	d165      	bne.n	8000886 <__aeabi_fadd+0x28e>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d17e      	bne.n	80008bc <__aeabi_fadd+0x2c4>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x1cc>
 80007c2:	e0aa      	b.n	800091a <__aeabi_fadd+0x322>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x1d2>
 80007c8:	e775      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007ca:	002a      	movs	r2, r5
 80007cc:	4452      	add	r2, sl
 80007ce:	2700      	movs	r7, #0
 80007d0:	0153      	lsls	r3, r2, #5
 80007d2:	d502      	bpl.n	80007da <__aeabi_fadd+0x1e2>
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <__aeabi_fadd+0x334>)
 80007d6:	3701      	adds	r7, #1
 80007d8:	401a      	ands	r2, r3
 80007da:	0753      	lsls	r3, r2, #29
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x1e8>
 80007de:	e75a      	b.n	8000696 <__aeabi_fadd+0x9e>
 80007e0:	08d2      	lsrs	r2, r2, #3
 80007e2:	e7df      	b.n	80007a4 <__aeabi_fadd+0x1ac>
 80007e4:	2200      	movs	r2, #0
 80007e6:	23ff      	movs	r3, #255	; 0xff
 80007e8:	4694      	mov	ip, r2
 80007ea:	e764      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d0e0      	beq.n	80007b2 <__aeabi_fadd+0x1ba>
 80007f0:	1bf3      	subs	r3, r6, r7
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d03e      	beq.n	8000874 <__aeabi_fadd+0x27c>
 80007f6:	2eff      	cmp	r6, #255	; 0xff
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x204>
 80007fa:	e777      	b.n	80006ec <__aeabi_fadd+0xf4>
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0001      	movs	r1, r0
 8000800:	04d2      	lsls	r2, r2, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	468a      	mov	sl, r1
 8000806:	2201      	movs	r2, #1
 8000808:	2b1b      	cmp	r3, #27
 800080a:	dc08      	bgt.n	800081e <__aeabi_fadd+0x226>
 800080c:	4652      	mov	r2, sl
 800080e:	2120      	movs	r1, #32
 8000810:	4650      	mov	r0, sl
 8000812:	40da      	lsrs	r2, r3
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	4098      	lsls	r0, r3
 8000818:	1e43      	subs	r3, r0, #1
 800081a:	4198      	sbcs	r0, r3
 800081c:	4302      	orrs	r2, r0
 800081e:	0037      	movs	r7, r6
 8000820:	1952      	adds	r2, r2, r5
 8000822:	e784      	b.n	800072e <__aeabi_fadd+0x136>
 8000824:	4a41      	ldr	r2, [pc, #260]	; (800092c <__aeabi_fadd+0x334>)
 8000826:	1a3f      	subs	r7, r7, r0
 8000828:	4032      	ands	r2, r6
 800082a:	e732      	b.n	8000692 <__aeabi_fadd+0x9a>
 800082c:	4653      	mov	r3, sl
 800082e:	1b5e      	subs	r6, r3, r5
 8000830:	0173      	lsls	r3, r6, #5
 8000832:	d42d      	bmi.n	8000890 <__aeabi_fadd+0x298>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d000      	beq.n	800083a <__aeabi_fadd+0x242>
 8000838:	e717      	b.n	800066a <__aeabi_fadd+0x72>
 800083a:	2200      	movs	r2, #0
 800083c:	2400      	movs	r4, #0
 800083e:	2300      	movs	r3, #0
 8000840:	4694      	mov	ip, r2
 8000842:	e738      	b.n	80006b6 <__aeabi_fadd+0xbe>
 8000844:	2eff      	cmp	r6, #255	; 0xff
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x252>
 8000848:	e74f      	b.n	80006ea <__aeabi_fadd+0xf2>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	4650      	mov	r0, sl
 800084e:	04d2      	lsls	r2, r2, #19
 8000850:	4310      	orrs	r0, r2
 8000852:	4682      	mov	sl, r0
 8000854:	2201      	movs	r2, #1
 8000856:	2b1b      	cmp	r3, #27
 8000858:	dc08      	bgt.n	800086c <__aeabi_fadd+0x274>
 800085a:	4652      	mov	r2, sl
 800085c:	2420      	movs	r4, #32
 800085e:	4650      	mov	r0, sl
 8000860:	40da      	lsrs	r2, r3
 8000862:	1ae3      	subs	r3, r4, r3
 8000864:	4098      	lsls	r0, r3
 8000866:	1e43      	subs	r3, r0, #1
 8000868:	4198      	sbcs	r0, r3
 800086a:	4302      	orrs	r2, r0
 800086c:	000c      	movs	r4, r1
 800086e:	0037      	movs	r7, r6
 8000870:	1aaa      	subs	r2, r5, r2
 8000872:	e6f5      	b.n	8000660 <__aeabi_fadd+0x68>
 8000874:	2800      	cmp	r0, #0
 8000876:	d093      	beq.n	80007a0 <__aeabi_fadd+0x1a8>
 8000878:	3b01      	subs	r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d04f      	beq.n	800091e <__aeabi_fadd+0x326>
 800087e:	2eff      	cmp	r6, #255	; 0xff
 8000880:	d1c1      	bne.n	8000806 <__aeabi_fadd+0x20e>
 8000882:	4642      	mov	r2, r8
 8000884:	e733      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000886:	2fff      	cmp	r7, #255	; 0xff
 8000888:	d0ac      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 800088a:	4455      	add	r5, sl
 800088c:	086a      	lsrs	r2, r5, #1
 800088e:	e7a4      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000890:	4653      	mov	r3, sl
 8000892:	000c      	movs	r4, r1
 8000894:	1aee      	subs	r6, r5, r3
 8000896:	e6e8      	b.n	800066a <__aeabi_fadd+0x72>
 8000898:	4653      	mov	r3, sl
 800089a:	2b00      	cmp	r3, #0
 800089c:	d128      	bne.n	80008f0 <__aeabi_fadd+0x2f8>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fadd+0x2ac>
 80008a2:	e722      	b.n	80006ea <__aeabi_fadd+0xf2>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	469c      	mov	ip, r3
 80008aa:	2400      	movs	r4, #0
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	e702      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80008b0:	002a      	movs	r2, r5
 80008b2:	4452      	add	r2, sl
 80008b4:	e73b      	b.n	800072e <__aeabi_fadd+0x136>
 80008b6:	4653      	mov	r3, sl
 80008b8:	1b5a      	subs	r2, r3, r5
 80008ba:	e6d1      	b.n	8000660 <__aeabi_fadd+0x68>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x2ca>
 80008c0:	e714      	b.n	80006ec <__aeabi_fadd+0xf4>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x2d0>
 80008c6:	e712      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	421a      	tst	r2, r3
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x2da>
 80008d0:	e70d      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008d2:	4641      	mov	r1, r8
 80008d4:	4219      	tst	r1, r3
 80008d6:	d000      	beq.n	80008da <__aeabi_fadd+0x2e2>
 80008d8:	e709      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008da:	4642      	mov	r2, r8
 80008dc:	e707      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008de:	000c      	movs	r4, r1
 80008e0:	0037      	movs	r7, r6
 80008e2:	1aaa      	subs	r2, r5, r2
 80008e4:	e6bc      	b.n	8000660 <__aeabi_fadd+0x68>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d013      	beq.n	8000912 <__aeabi_fadd+0x31a>
 80008ea:	000c      	movs	r4, r1
 80008ec:	46c4      	mov	ip, r8
 80008ee:	e6e2      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2fe>
 80008f4:	e6fb      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	03db      	lsls	r3, r3, #15
 80008fa:	421a      	tst	r2, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x308>
 80008fe:	e6f6      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000900:	4640      	mov	r0, r8
 8000902:	4218      	tst	r0, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_fadd+0x310>
 8000906:	e6f2      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000908:	000c      	movs	r4, r1
 800090a:	e6ef      	b.n	80006ec <__aeabi_fadd+0xf4>
 800090c:	2a00      	cmp	r2, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x31a>
 8000910:	e763      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000912:	2200      	movs	r2, #0
 8000914:	2400      	movs	r4, #0
 8000916:	4694      	mov	ip, r2
 8000918:	e6cd      	b.n	80006b6 <__aeabi_fadd+0xbe>
 800091a:	46c4      	mov	ip, r8
 800091c:	e6cb      	b.n	80006b6 <__aeabi_fadd+0xbe>
 800091e:	002a      	movs	r2, r5
 8000920:	0037      	movs	r7, r6
 8000922:	4452      	add	r2, sl
 8000924:	e703      	b.n	800072e <__aeabi_fadd+0x136>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	7dffffff 	.word	0x7dffffff
 800092c:	fbffffff 	.word	0xfbffffff

08000930 <__aeabi_fdiv>:
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	464f      	mov	r7, r9
 8000934:	4646      	mov	r6, r8
 8000936:	46d6      	mov	lr, sl
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	b5c0      	push	{r6, r7, lr}
 800093c:	0047      	lsls	r7, r0, #1
 800093e:	1c0c      	adds	r4, r1, #0
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0e3f      	lsrs	r7, r7, #24
 8000944:	0fc6      	lsrs	r6, r0, #31
 8000946:	2f00      	cmp	r7, #0
 8000948:	d066      	beq.n	8000a18 <__aeabi_fdiv+0xe8>
 800094a:	2fff      	cmp	r7, #255	; 0xff
 800094c:	d06c      	beq.n	8000a28 <__aeabi_fdiv+0xf8>
 800094e:	2300      	movs	r3, #0
 8000950:	00ea      	lsls	r2, r5, #3
 8000952:	2580      	movs	r5, #128	; 0x80
 8000954:	4699      	mov	r9, r3
 8000956:	469a      	mov	sl, r3
 8000958:	04ed      	lsls	r5, r5, #19
 800095a:	4315      	orrs	r5, r2
 800095c:	3f7f      	subs	r7, #127	; 0x7f
 800095e:	0260      	lsls	r0, r4, #9
 8000960:	0061      	lsls	r1, r4, #1
 8000962:	0a43      	lsrs	r3, r0, #9
 8000964:	4698      	mov	r8, r3
 8000966:	0e09      	lsrs	r1, r1, #24
 8000968:	0fe4      	lsrs	r4, r4, #31
 800096a:	2900      	cmp	r1, #0
 800096c:	d048      	beq.n	8000a00 <__aeabi_fdiv+0xd0>
 800096e:	29ff      	cmp	r1, #255	; 0xff
 8000970:	d010      	beq.n	8000994 <__aeabi_fdiv+0x64>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	00d8      	lsls	r0, r3, #3
 8000976:	04d2      	lsls	r2, r2, #19
 8000978:	4302      	orrs	r2, r0
 800097a:	4690      	mov	r8, r2
 800097c:	2000      	movs	r0, #0
 800097e:	397f      	subs	r1, #127	; 0x7f
 8000980:	464a      	mov	r2, r9
 8000982:	0033      	movs	r3, r6
 8000984:	1a7f      	subs	r7, r7, r1
 8000986:	4302      	orrs	r2, r0
 8000988:	496c      	ldr	r1, [pc, #432]	; (8000b3c <__aeabi_fdiv+0x20c>)
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	588a      	ldr	r2, [r1, r2]
 800098e:	4063      	eors	r3, r4
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4697      	mov	pc, r2
 8000994:	2b00      	cmp	r3, #0
 8000996:	d16d      	bne.n	8000a74 <__aeabi_fdiv+0x144>
 8000998:	2002      	movs	r0, #2
 800099a:	3fff      	subs	r7, #255	; 0xff
 800099c:	e033      	b.n	8000a06 <__aeabi_fdiv+0xd6>
 800099e:	2300      	movs	r3, #0
 80009a0:	4698      	mov	r8, r3
 80009a2:	0026      	movs	r6, r4
 80009a4:	4645      	mov	r5, r8
 80009a6:	4682      	mov	sl, r0
 80009a8:	4653      	mov	r3, sl
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fdiv+0x80>
 80009ae:	e07f      	b.n	8000ab0 <__aeabi_fdiv+0x180>
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fdiv+0x86>
 80009b4:	e094      	b.n	8000ae0 <__aeabi_fdiv+0x1b0>
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d017      	beq.n	80009ea <__aeabi_fdiv+0xba>
 80009ba:	0038      	movs	r0, r7
 80009bc:	307f      	adds	r0, #127	; 0x7f
 80009be:	2800      	cmp	r0, #0
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fdiv+0x152>
 80009c2:	076b      	lsls	r3, r5, #29
 80009c4:	d004      	beq.n	80009d0 <__aeabi_fdiv+0xa0>
 80009c6:	230f      	movs	r3, #15
 80009c8:	402b      	ands	r3, r5
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fdiv+0xa0>
 80009ce:	3504      	adds	r5, #4
 80009d0:	012b      	lsls	r3, r5, #4
 80009d2:	d503      	bpl.n	80009dc <__aeabi_fdiv+0xac>
 80009d4:	0038      	movs	r0, r7
 80009d6:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <__aeabi_fdiv+0x210>)
 80009d8:	3080      	adds	r0, #128	; 0x80
 80009da:	401d      	ands	r5, r3
 80009dc:	28fe      	cmp	r0, #254	; 0xfe
 80009de:	dc67      	bgt.n	8000ab0 <__aeabi_fdiv+0x180>
 80009e0:	01ad      	lsls	r5, r5, #6
 80009e2:	0a6d      	lsrs	r5, r5, #9
 80009e4:	b2c0      	uxtb	r0, r0
 80009e6:	e002      	b.n	80009ee <__aeabi_fdiv+0xbe>
 80009e8:	001e      	movs	r6, r3
 80009ea:	2000      	movs	r0, #0
 80009ec:	2500      	movs	r5, #0
 80009ee:	05c0      	lsls	r0, r0, #23
 80009f0:	4328      	orrs	r0, r5
 80009f2:	07f6      	lsls	r6, r6, #31
 80009f4:	4330      	orrs	r0, r6
 80009f6:	bce0      	pop	{r5, r6, r7}
 80009f8:	46ba      	mov	sl, r7
 80009fa:	46b1      	mov	r9, r6
 80009fc:	46a8      	mov	r8, r5
 80009fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12b      	bne.n	8000a5c <__aeabi_fdiv+0x12c>
 8000a04:	2001      	movs	r0, #1
 8000a06:	464a      	mov	r2, r9
 8000a08:	0033      	movs	r3, r6
 8000a0a:	494e      	ldr	r1, [pc, #312]	; (8000b44 <__aeabi_fdiv+0x214>)
 8000a0c:	4302      	orrs	r2, r0
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	588a      	ldr	r2, [r1, r2]
 8000a12:	4063      	eors	r3, r4
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4697      	mov	pc, r2
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d113      	bne.n	8000a44 <__aeabi_fdiv+0x114>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	4699      	mov	r9, r3
 8000a20:	3b03      	subs	r3, #3
 8000a22:	2700      	movs	r7, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	e79a      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d105      	bne.n	8000a38 <__aeabi_fdiv+0x108>
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	4699      	mov	r9, r3
 8000a30:	3b06      	subs	r3, #6
 8000a32:	27ff      	movs	r7, #255	; 0xff
 8000a34:	469a      	mov	sl, r3
 8000a36:	e792      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	3b09      	subs	r3, #9
 8000a3e:	27ff      	movs	r7, #255	; 0xff
 8000a40:	469a      	mov	sl, r3
 8000a42:	e78c      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a44:	0028      	movs	r0, r5
 8000a46:	f001 fc5f 	bl	8002308 <__clzsi2>
 8000a4a:	2776      	movs	r7, #118	; 0x76
 8000a4c:	1f43      	subs	r3, r0, #5
 8000a4e:	409d      	lsls	r5, r3
 8000a50:	2300      	movs	r3, #0
 8000a52:	427f      	negs	r7, r7
 8000a54:	4699      	mov	r9, r3
 8000a56:	469a      	mov	sl, r3
 8000a58:	1a3f      	subs	r7, r7, r0
 8000a5a:	e780      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fc53 	bl	8002308 <__clzsi2>
 8000a62:	4642      	mov	r2, r8
 8000a64:	1f43      	subs	r3, r0, #5
 8000a66:	2176      	movs	r1, #118	; 0x76
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	4690      	mov	r8, r2
 8000a70:	2000      	movs	r0, #0
 8000a72:	e785      	b.n	8000980 <__aeabi_fdiv+0x50>
 8000a74:	21ff      	movs	r1, #255	; 0xff
 8000a76:	2003      	movs	r0, #3
 8000a78:	e782      	b.n	8000980 <__aeabi_fdiv+0x50>
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	2500      	movs	r5, #0
 8000a80:	e7b5      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000a82:	2301      	movs	r3, #1
 8000a84:	1a1b      	subs	r3, r3, r0
 8000a86:	2b1b      	cmp	r3, #27
 8000a88:	dcaf      	bgt.n	80009ea <__aeabi_fdiv+0xba>
 8000a8a:	379e      	adds	r7, #158	; 0x9e
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	40bd      	lsls	r5, r7
 8000a90:	40d9      	lsrs	r1, r3
 8000a92:	1e6a      	subs	r2, r5, #1
 8000a94:	4195      	sbcs	r5, r2
 8000a96:	430d      	orrs	r5, r1
 8000a98:	076b      	lsls	r3, r5, #29
 8000a9a:	d004      	beq.n	8000aa6 <__aeabi_fdiv+0x176>
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	402b      	ands	r3, r5
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fdiv+0x176>
 8000aa4:	3504      	adds	r5, #4
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	d544      	bpl.n	8000b34 <__aeabi_fdiv+0x204>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	2500      	movs	r5, #0
 8000aae:	e79e      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	e79b      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ab6:	2580      	movs	r5, #128	; 0x80
 8000ab8:	2600      	movs	r6, #0
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	03ed      	lsls	r5, r5, #15
 8000abe:	e796      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	03c0      	lsls	r0, r0, #15
 8000ac8:	4205      	tst	r5, r0
 8000aca:	d009      	beq.n	8000ae0 <__aeabi_fdiv+0x1b0>
 8000acc:	4643      	mov	r3, r8
 8000ace:	4203      	tst	r3, r0
 8000ad0:	d106      	bne.n	8000ae0 <__aeabi_fdiv+0x1b0>
 8000ad2:	4645      	mov	r5, r8
 8000ad4:	4305      	orrs	r5, r0
 8000ad6:	026d      	lsls	r5, r5, #9
 8000ad8:	0026      	movs	r6, r4
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	e786      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	03c0      	lsls	r0, r0, #15
 8000ae4:	4305      	orrs	r5, r0
 8000ae6:	026d      	lsls	r5, r5, #9
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	0a6d      	lsrs	r5, r5, #9
 8000aec:	e77f      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000aee:	4641      	mov	r1, r8
 8000af0:	016a      	lsls	r2, r5, #5
 8000af2:	0148      	lsls	r0, r1, #5
 8000af4:	4282      	cmp	r2, r0
 8000af6:	d219      	bcs.n	8000b2c <__aeabi_fdiv+0x1fc>
 8000af8:	211b      	movs	r1, #27
 8000afa:	2500      	movs	r5, #0
 8000afc:	3f01      	subs	r7, #1
 8000afe:	2601      	movs	r6, #1
 8000b00:	0014      	movs	r4, r2
 8000b02:	006d      	lsls	r5, r5, #1
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	db01      	blt.n	8000b0e <__aeabi_fdiv+0x1de>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	d801      	bhi.n	8000b12 <__aeabi_fdiv+0x1e2>
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	4335      	orrs	r5, r6
 8000b12:	3901      	subs	r1, #1
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d1f3      	bne.n	8000b00 <__aeabi_fdiv+0x1d0>
 8000b18:	1e50      	subs	r0, r2, #1
 8000b1a:	4182      	sbcs	r2, r0
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	307f      	adds	r0, #127	; 0x7f
 8000b20:	001e      	movs	r6, r3
 8000b22:	4315      	orrs	r5, r2
 8000b24:	2800      	cmp	r0, #0
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_fdiv+0x1fa>
 8000b28:	e74b      	b.n	80009c2 <__aeabi_fdiv+0x92>
 8000b2a:	e7aa      	b.n	8000a82 <__aeabi_fdiv+0x152>
 8000b2c:	211a      	movs	r1, #26
 8000b2e:	2501      	movs	r5, #1
 8000b30:	1a12      	subs	r2, r2, r0
 8000b32:	e7e4      	b.n	8000afe <__aeabi_fdiv+0x1ce>
 8000b34:	01ad      	lsls	r5, r5, #6
 8000b36:	2000      	movs	r0, #0
 8000b38:	0a6d      	lsrs	r5, r5, #9
 8000b3a:	e758      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000b3c:	08008c8c 	.word	0x08008c8c
 8000b40:	f7ffffff 	.word	0xf7ffffff
 8000b44:	08008ccc 	.word	0x08008ccc

08000b48 <__aeabi_fmul>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	4657      	mov	r7, sl
 8000b4c:	464e      	mov	r6, r9
 8000b4e:	4645      	mov	r5, r8
 8000b50:	46de      	mov	lr, fp
 8000b52:	0244      	lsls	r4, r0, #9
 8000b54:	b5e0      	push	{r5, r6, r7, lr}
 8000b56:	0045      	lsls	r5, r0, #1
 8000b58:	1c0f      	adds	r7, r1, #0
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	0e2d      	lsrs	r5, r5, #24
 8000b5e:	0fc6      	lsrs	r6, r0, #31
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d047      	beq.n	8000bf4 <__aeabi_fmul+0xac>
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d04d      	beq.n	8000c04 <__aeabi_fmul+0xbc>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2080      	movs	r0, #128	; 0x80
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	469b      	mov	fp, r3
 8000b70:	00e4      	lsls	r4, r4, #3
 8000b72:	04c0      	lsls	r0, r0, #19
 8000b74:	4304      	orrs	r4, r0
 8000b76:	3d7f      	subs	r5, #127	; 0x7f
 8000b78:	0278      	lsls	r0, r7, #9
 8000b7a:	0a43      	lsrs	r3, r0, #9
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	007a      	lsls	r2, r7, #1
 8000b80:	0ffb      	lsrs	r3, r7, #31
 8000b82:	4698      	mov	r8, r3
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	464b      	mov	r3, r9
 8000b88:	d044      	beq.n	8000c14 <__aeabi_fmul+0xcc>
 8000b8a:	2aff      	cmp	r2, #255	; 0xff
 8000b8c:	d011      	beq.n	8000bb2 <__aeabi_fmul+0x6a>
 8000b8e:	00d8      	lsls	r0, r3, #3
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4303      	orrs	r3, r0
 8000b96:	4699      	mov	r9, r3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	3a7f      	subs	r2, #127	; 0x7f
 8000b9c:	18ad      	adds	r5, r5, r2
 8000b9e:	4647      	mov	r7, r8
 8000ba0:	4653      	mov	r3, sl
 8000ba2:	4077      	eors	r7, r6
 8000ba4:	1c69      	adds	r1, r5, #1
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d83f      	bhi.n	8000c2a <__aeabi_fmul+0xe2>
 8000baa:	4a72      	ldr	r2, [pc, #456]	; (8000d74 <__aeabi_fmul+0x22c>)
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	469f      	mov	pc, r3
 8000bb2:	35ff      	adds	r5, #255	; 0xff
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fmul+0x72>
 8000bb8:	e079      	b.n	8000cae <__aeabi_fmul+0x166>
 8000bba:	4652      	mov	r2, sl
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	4692      	mov	sl, r2
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	e7eb      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	464c      	mov	r4, r9
 8000bca:	4683      	mov	fp, r0
 8000bcc:	465b      	mov	r3, fp
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d028      	beq.n	8000c24 <__aeabi_fmul+0xdc>
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fmul+0x90>
 8000bd6:	e0c6      	b.n	8000d66 <__aeabi_fmul+0x21e>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d14f      	bne.n	8000c7c <__aeabi_fmul+0x134>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	07ff      	lsls	r7, r7, #31
 8000be4:	4320      	orrs	r0, r4
 8000be6:	4338      	orrs	r0, r7
 8000be8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bea:	46bb      	mov	fp, r7
 8000bec:	46b2      	mov	sl, r6
 8000bee:	46a9      	mov	r9, r5
 8000bf0:	46a0      	mov	r8, r4
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d171      	bne.n	8000cdc <__aeabi_fmul+0x194>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	2500      	movs	r5, #0
 8000c00:	469b      	mov	fp, r3
 8000c02:	e7b9      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d163      	bne.n	8000cd0 <__aeabi_fmul+0x188>
 8000c08:	2308      	movs	r3, #8
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	3b06      	subs	r3, #6
 8000c0e:	25ff      	movs	r5, #255	; 0xff
 8000c10:	469b      	mov	fp, r3
 8000c12:	e7b1      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d150      	bne.n	8000cba <__aeabi_fmul+0x172>
 8000c18:	4652      	mov	r2, sl
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	4692      	mov	sl, r2
 8000c20:	2001      	movs	r0, #1
 8000c22:	e7bc      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000c24:	20ff      	movs	r0, #255	; 0xff
 8000c26:	2400      	movs	r4, #0
 8000c28:	e7da      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	0c26      	lsrs	r6, r4, #16
 8000c2e:	0424      	lsls	r4, r4, #16
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	0404      	lsls	r4, r0, #16
 8000c34:	0c24      	lsrs	r4, r4, #16
 8000c36:	464b      	mov	r3, r9
 8000c38:	0020      	movs	r0, r4
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	4350      	muls	r0, r2
 8000c3e:	4374      	muls	r4, r6
 8000c40:	435a      	muls	r2, r3
 8000c42:	435e      	muls	r6, r3
 8000c44:	1912      	adds	r2, r2, r4
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	189b      	adds	r3, r3, r2
 8000c4a:	429c      	cmp	r4, r3
 8000c4c:	d903      	bls.n	8000c56 <__aeabi_fmul+0x10e>
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	4694      	mov	ip, r2
 8000c54:	4466      	add	r6, ip
 8000c56:	0400      	lsls	r0, r0, #16
 8000c58:	041a      	lsls	r2, r3, #16
 8000c5a:	0c00      	lsrs	r0, r0, #16
 8000c5c:	1812      	adds	r2, r2, r0
 8000c5e:	0194      	lsls	r4, r2, #6
 8000c60:	1e60      	subs	r0, r4, #1
 8000c62:	4184      	sbcs	r4, r0
 8000c64:	0c1b      	lsrs	r3, r3, #16
 8000c66:	0e92      	lsrs	r2, r2, #26
 8000c68:	199b      	adds	r3, r3, r6
 8000c6a:	4314      	orrs	r4, r2
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	d572      	bpl.n	8000d5a <__aeabi_fmul+0x212>
 8000c74:	2001      	movs	r0, #1
 8000c76:	0863      	lsrs	r3, r4, #1
 8000c78:	4004      	ands	r4, r0
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	0008      	movs	r0, r1
 8000c7e:	307f      	adds	r0, #127	; 0x7f
 8000c80:	2800      	cmp	r0, #0
 8000c82:	dd3c      	ble.n	8000cfe <__aeabi_fmul+0x1b6>
 8000c84:	0763      	lsls	r3, r4, #29
 8000c86:	d004      	beq.n	8000c92 <__aeabi_fmul+0x14a>
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x14a>
 8000c90:	3404      	adds	r4, #4
 8000c92:	0123      	lsls	r3, r4, #4
 8000c94:	d503      	bpl.n	8000c9e <__aeabi_fmul+0x156>
 8000c96:	3180      	adds	r1, #128	; 0x80
 8000c98:	0008      	movs	r0, r1
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <__aeabi_fmul+0x230>)
 8000c9c:	401c      	ands	r4, r3
 8000c9e:	28fe      	cmp	r0, #254	; 0xfe
 8000ca0:	dcc0      	bgt.n	8000c24 <__aeabi_fmul+0xdc>
 8000ca2:	01a4      	lsls	r4, r4, #6
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	b2c0      	uxtb	r0, r0
 8000ca8:	e79a      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000caa:	0037      	movs	r7, r6
 8000cac:	e78e      	b.n	8000bcc <__aeabi_fmul+0x84>
 8000cae:	4652      	mov	r2, sl
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e771      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000cba:	4648      	mov	r0, r9
 8000cbc:	f001 fb24 	bl	8002308 <__clzsi2>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1f43      	subs	r3, r0, #5
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	1a2d      	subs	r5, r5, r0
 8000cc8:	4691      	mov	r9, r2
 8000cca:	2000      	movs	r0, #0
 8000ccc:	3d76      	subs	r5, #118	; 0x76
 8000cce:	e766      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b09      	subs	r3, #9
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e74d      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f001 fb13 	bl	8002308 <__clzsi2>
 8000ce2:	2576      	movs	r5, #118	; 0x76
 8000ce4:	1f43      	subs	r3, r0, #5
 8000ce6:	409c      	lsls	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	426d      	negs	r5, r5
 8000cec:	469a      	mov	sl, r3
 8000cee:	469b      	mov	fp, r3
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	e741      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000cf4:	2480      	movs	r4, #128	; 0x80
 8000cf6:	2700      	movs	r7, #0
 8000cf8:	20ff      	movs	r0, #255	; 0xff
 8000cfa:	03e4      	lsls	r4, r4, #15
 8000cfc:	e770      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	2b1b      	cmp	r3, #27
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fmul+0x1c0>
 8000d06:	e769      	b.n	8000bdc <__aeabi_fmul+0x94>
 8000d08:	319e      	adds	r1, #158	; 0x9e
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	408c      	lsls	r4, r1
 8000d0e:	40d8      	lsrs	r0, r3
 8000d10:	1e63      	subs	r3, r4, #1
 8000d12:	419c      	sbcs	r4, r3
 8000d14:	4304      	orrs	r4, r0
 8000d16:	0763      	lsls	r3, r4, #29
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fmul+0x1dc>
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	4023      	ands	r3, r4
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d000      	beq.n	8000d24 <__aeabi_fmul+0x1dc>
 8000d22:	3404      	adds	r4, #4
 8000d24:	0163      	lsls	r3, r4, #5
 8000d26:	d51a      	bpl.n	8000d5e <__aeabi_fmul+0x216>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	e758      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	03c0      	lsls	r0, r0, #15
 8000d32:	4204      	tst	r4, r0
 8000d34:	d009      	beq.n	8000d4a <__aeabi_fmul+0x202>
 8000d36:	464b      	mov	r3, r9
 8000d38:	4203      	tst	r3, r0
 8000d3a:	d106      	bne.n	8000d4a <__aeabi_fmul+0x202>
 8000d3c:	464c      	mov	r4, r9
 8000d3e:	4304      	orrs	r4, r0
 8000d40:	0264      	lsls	r4, r4, #9
 8000d42:	4647      	mov	r7, r8
 8000d44:	20ff      	movs	r0, #255	; 0xff
 8000d46:	0a64      	lsrs	r4, r4, #9
 8000d48:	e74a      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d4a:	2080      	movs	r0, #128	; 0x80
 8000d4c:	03c0      	lsls	r0, r0, #15
 8000d4e:	4304      	orrs	r4, r0
 8000d50:	0264      	lsls	r4, r4, #9
 8000d52:	0037      	movs	r7, r6
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	0a64      	lsrs	r4, r4, #9
 8000d58:	e742      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d5a:	0029      	movs	r1, r5
 8000d5c:	e78e      	b.n	8000c7c <__aeabi_fmul+0x134>
 8000d5e:	01a4      	lsls	r4, r4, #6
 8000d60:	2000      	movs	r0, #0
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	e73c      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	03c0      	lsls	r0, r0, #15
 8000d6a:	4304      	orrs	r4, r0
 8000d6c:	0264      	lsls	r4, r4, #9
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	0a64      	lsrs	r4, r4, #9
 8000d72:	e735      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d74:	08008d0c 	.word	0x08008d0c
 8000d78:	f7ffffff 	.word	0xf7ffffff

08000d7c <__aeabi_fsub>:
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	4646      	mov	r6, r8
 8000d80:	46d6      	mov	lr, sl
 8000d82:	464f      	mov	r7, r9
 8000d84:	0243      	lsls	r3, r0, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	00da      	lsls	r2, r3, #3
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	024a      	lsls	r2, r1, #9
 8000d8e:	b5c0      	push	{r6, r7, lr}
 8000d90:	0044      	lsls	r4, r0, #1
 8000d92:	0a56      	lsrs	r6, r2, #9
 8000d94:	1c05      	adds	r5, r0, #0
 8000d96:	46b0      	mov	r8, r6
 8000d98:	0e24      	lsrs	r4, r4, #24
 8000d9a:	004e      	lsls	r6, r1, #1
 8000d9c:	0992      	lsrs	r2, r2, #6
 8000d9e:	001f      	movs	r7, r3
 8000da0:	0020      	movs	r0, r4
 8000da2:	4692      	mov	sl, r2
 8000da4:	0fed      	lsrs	r5, r5, #31
 8000da6:	0e36      	lsrs	r6, r6, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2eff      	cmp	r6, #255	; 0xff
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x34>
 8000dae:	e07f      	b.n	8000eb0 <__aeabi_fsub+0x134>
 8000db0:	2201      	movs	r2, #1
 8000db2:	4051      	eors	r1, r2
 8000db4:	428d      	cmp	r5, r1
 8000db6:	d051      	beq.n	8000e5c <__aeabi_fsub+0xe0>
 8000db8:	1ba2      	subs	r2, r4, r6
 8000dba:	4691      	mov	r9, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	dc00      	bgt.n	8000dc2 <__aeabi_fsub+0x46>
 8000dc0:	e07e      	b.n	8000ec0 <__aeabi_fsub+0x144>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x4c>
 8000dc6:	e099      	b.n	8000efc <__aeabi_fsub+0x180>
 8000dc8:	2cff      	cmp	r4, #255	; 0xff
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x52>
 8000dcc:	e08c      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	04db      	lsls	r3, r3, #19
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	464a      	mov	r2, r9
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2a1b      	cmp	r2, #27
 8000dde:	dc08      	bgt.n	8000df2 <__aeabi_fsub+0x76>
 8000de0:	4653      	mov	r3, sl
 8000de2:	2120      	movs	r1, #32
 8000de4:	40d3      	lsrs	r3, r2
 8000de6:	1a89      	subs	r1, r1, r2
 8000de8:	4652      	mov	r2, sl
 8000dea:	408a      	lsls	r2, r1
 8000dec:	1e51      	subs	r1, r2, #1
 8000dee:	418a      	sbcs	r2, r1
 8000df0:	4313      	orrs	r3, r2
 8000df2:	4662      	mov	r2, ip
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	015a      	lsls	r2, r3, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0x80>
 8000dfa:	e0f3      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8000dfc:	019b      	lsls	r3, r3, #6
 8000dfe:	099e      	lsrs	r6, r3, #6
 8000e00:	0030      	movs	r0, r6
 8000e02:	f001 fa81 	bl	8002308 <__clzsi2>
 8000e06:	3805      	subs	r0, #5
 8000e08:	4086      	lsls	r6, r0
 8000e0a:	4284      	cmp	r4, r0
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_fsub+0x94>
 8000e0e:	e0f7      	b.n	8001000 <__aeabi_fsub+0x284>
 8000e10:	0032      	movs	r2, r6
 8000e12:	1b04      	subs	r4, r0, r4
 8000e14:	2020      	movs	r0, #32
 8000e16:	3401      	adds	r4, #1
 8000e18:	40e2      	lsrs	r2, r4
 8000e1a:	1b04      	subs	r4, r0, r4
 8000e1c:	40a6      	lsls	r6, r4
 8000e1e:	0033      	movs	r3, r6
 8000e20:	1e5e      	subs	r6, r3, #1
 8000e22:	41b3      	sbcs	r3, r6
 8000e24:	2400      	movs	r4, #0
 8000e26:	4313      	orrs	r3, r2
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	d004      	beq.n	8000e36 <__aeabi_fsub+0xba>
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2a04      	cmp	r2, #4
 8000e32:	d000      	beq.n	8000e36 <__aeabi_fsub+0xba>
 8000e34:	3304      	adds	r3, #4
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0xc0>
 8000e3a:	e0d6      	b.n	8000fea <__aeabi_fsub+0x26e>
 8000e3c:	1c62      	adds	r2, r4, #1
 8000e3e:	2cfe      	cmp	r4, #254	; 0xfe
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0xc8>
 8000e42:	e0da      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	0a5f      	lsrs	r7, r3, #9
 8000e48:	b2d0      	uxtb	r0, r2
 8000e4a:	05c0      	lsls	r0, r0, #23
 8000e4c:	4338      	orrs	r0, r7
 8000e4e:	07ed      	lsls	r5, r5, #31
 8000e50:	4328      	orrs	r0, r5
 8000e52:	bce0      	pop	{r5, r6, r7}
 8000e54:	46ba      	mov	sl, r7
 8000e56:	46b1      	mov	r9, r6
 8000e58:	46a8      	mov	r8, r5
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5c:	1ba2      	subs	r2, r4, r6
 8000e5e:	4691      	mov	r9, r2
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dd63      	ble.n	8000f2c <__aeabi_fsub+0x1b0>
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0xee>
 8000e68:	e099      	b.n	8000f9e <__aeabi_fsub+0x222>
 8000e6a:	2cff      	cmp	r4, #255	; 0xff
 8000e6c:	d03c      	beq.n	8000ee8 <__aeabi_fsub+0x16c>
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	4652      	mov	r2, sl
 8000e72:	04db      	lsls	r3, r3, #19
 8000e74:	431a      	orrs	r2, r3
 8000e76:	4692      	mov	sl, r2
 8000e78:	464a      	mov	r2, r9
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2a1b      	cmp	r2, #27
 8000e7e:	dc08      	bgt.n	8000e92 <__aeabi_fsub+0x116>
 8000e80:	4653      	mov	r3, sl
 8000e82:	2120      	movs	r1, #32
 8000e84:	40d3      	lsrs	r3, r2
 8000e86:	1a89      	subs	r1, r1, r2
 8000e88:	4652      	mov	r2, sl
 8000e8a:	408a      	lsls	r2, r1
 8000e8c:	1e51      	subs	r1, r2, #1
 8000e8e:	418a      	sbcs	r2, r1
 8000e90:	4313      	orrs	r3, r2
 8000e92:	4463      	add	r3, ip
 8000e94:	015a      	lsls	r2, r3, #5
 8000e96:	d400      	bmi.n	8000e9a <__aeabi_fsub+0x11e>
 8000e98:	e0a4      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	2cff      	cmp	r4, #255	; 0xff
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x126>
 8000ea0:	e0ab      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4997      	ldr	r1, [pc, #604]	; (8001104 <__aeabi_fsub+0x388>)
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	400b      	ands	r3, r1
 8000eac:	4313      	orrs	r3, r2
 8000eae:	e7bb      	b.n	8000e28 <__aeabi_fsub+0xac>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d032      	beq.n	8000f1a <__aeabi_fsub+0x19e>
 8000eb4:	428d      	cmp	r5, r1
 8000eb6:	d035      	beq.n	8000f24 <__aeabi_fsub+0x1a8>
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	4252      	negs	r2, r2
 8000ebc:	4691      	mov	r9, r2
 8000ebe:	44a1      	add	r9, r4
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	d051      	beq.n	8000f6a <__aeabi_fsub+0x1ee>
 8000ec6:	1b30      	subs	r0, r6, r4
 8000ec8:	2c00      	cmp	r4, #0
 8000eca:	d000      	beq.n	8000ece <__aeabi_fsub+0x152>
 8000ecc:	e09c      	b.n	8001008 <__aeabi_fsub+0x28c>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x15a>
 8000ed4:	e0df      	b.n	8001096 <__aeabi_fsub+0x31a>
 8000ed6:	3801      	subs	r0, #1
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x162>
 8000edc:	e0f7      	b.n	80010ce <__aeabi_fsub+0x352>
 8000ede:	2eff      	cmp	r6, #255	; 0xff
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x168>
 8000ee2:	e099      	b.n	8001018 <__aeabi_fsub+0x29c>
 8000ee4:	000d      	movs	r5, r1
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x172>
 8000eec:	e085      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000eee:	2780      	movs	r7, #128	; 0x80
 8000ef0:	03ff      	lsls	r7, r7, #15
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	027f      	lsls	r7, r7, #9
 8000ef6:	20ff      	movs	r0, #255	; 0xff
 8000ef8:	0a7f      	lsrs	r7, r7, #9
 8000efa:	e7a6      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000efc:	4652      	mov	r2, sl
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d074      	beq.n	8000fec <__aeabi_fsub+0x270>
 8000f02:	2201      	movs	r2, #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	4690      	mov	r8, r2
 8000f08:	44c1      	add	r9, r8
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x196>
 8000f10:	e0c8      	b.n	80010a4 <__aeabi_fsub+0x328>
 8000f12:	2cff      	cmp	r4, #255	; 0xff
 8000f14:	d000      	beq.n	8000f18 <__aeabi_fsub+0x19c>
 8000f16:	e75f      	b.n	8000dd8 <__aeabi_fsub+0x5c>
 8000f18:	e7e6      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4051      	eors	r1, r2
 8000f1e:	42a9      	cmp	r1, r5
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x1a8>
 8000f22:	e749      	b.n	8000db8 <__aeabi_fsub+0x3c>
 8000f24:	22ff      	movs	r2, #255	; 0xff
 8000f26:	4252      	negs	r2, r2
 8000f28:	4691      	mov	r9, r2
 8000f2a:	44a1      	add	r9, r4
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d043      	beq.n	8000fba <__aeabi_fsub+0x23e>
 8000f32:	1b31      	subs	r1, r6, r4
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x1be>
 8000f38:	e08c      	b.n	8001054 <__aeabi_fsub+0x2d8>
 8000f3a:	2eff      	cmp	r6, #255	; 0xff
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x1c4>
 8000f3e:	e092      	b.n	8001066 <__aeabi_fsub+0x2ea>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4662      	mov	r2, ip
 8000f44:	04db      	lsls	r3, r3, #19
 8000f46:	431a      	orrs	r2, r3
 8000f48:	4694      	mov	ip, r2
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	291b      	cmp	r1, #27
 8000f4e:	dc09      	bgt.n	8000f64 <__aeabi_fsub+0x1e8>
 8000f50:	2020      	movs	r0, #32
 8000f52:	4663      	mov	r3, ip
 8000f54:	4662      	mov	r2, ip
 8000f56:	40cb      	lsrs	r3, r1
 8000f58:	1a41      	subs	r1, r0, r1
 8000f5a:	408a      	lsls	r2, r1
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	1e48      	subs	r0, r1, #1
 8000f60:	4181      	sbcs	r1, r0
 8000f62:	430b      	orrs	r3, r1
 8000f64:	0034      	movs	r4, r6
 8000f66:	4453      	add	r3, sl
 8000f68:	e794      	b.n	8000e94 <__aeabi_fsub+0x118>
 8000f6a:	22fe      	movs	r2, #254	; 0xfe
 8000f6c:	1c66      	adds	r6, r4, #1
 8000f6e:	4232      	tst	r2, r6
 8000f70:	d164      	bne.n	800103c <__aeabi_fsub+0x2c0>
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0x1fc>
 8000f76:	e082      	b.n	800107e <__aeabi_fsub+0x302>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x204>
 8000f7e:	e0ab      	b.n	80010d8 <__aeabi_fsub+0x35c>
 8000f80:	4653      	mov	r3, sl
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x20c>
 8000f86:	e760      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000f88:	4663      	mov	r3, ip
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_fsub+0x218>
 8000f92:	e0aa      	b.n	80010ea <__aeabi_fsub+0x36e>
 8000f94:	4663      	mov	r3, ip
 8000f96:	4652      	mov	r2, sl
 8000f98:	000d      	movs	r5, r1
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	e744      	b.n	8000e28 <__aeabi_fsub+0xac>
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d023      	beq.n	8000fec <__aeabi_fsub+0x270>
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4252      	negs	r2, r2
 8000fa8:	4690      	mov	r8, r2
 8000faa:	44c1      	add	r9, r8
 8000fac:	464a      	mov	r2, r9
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d075      	beq.n	800109e <__aeabi_fsub+0x322>
 8000fb2:	2cff      	cmp	r4, #255	; 0xff
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x23c>
 8000fb6:	e75f      	b.n	8000e78 <__aeabi_fsub+0xfc>
 8000fb8:	e796      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000fba:	26fe      	movs	r6, #254	; 0xfe
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	4226      	tst	r6, r4
 8000fc0:	d153      	bne.n	800106a <__aeabi_fsub+0x2ee>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d172      	bne.n	80010ac <__aeabi_fsub+0x330>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x252>
 8000fcc:	e093      	b.n	80010f6 <__aeabi_fsub+0x37a>
 8000fce:	4653      	mov	r3, sl
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x25a>
 8000fd4:	e739      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000fd6:	4463      	add	r3, ip
 8000fd8:	2400      	movs	r4, #0
 8000fda:	015a      	lsls	r2, r3, #5
 8000fdc:	d502      	bpl.n	8000fe4 <__aeabi_fsub+0x268>
 8000fde:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <__aeabi_fsub+0x38c>)
 8000fe0:	3401      	adds	r4, #1
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	075a      	lsls	r2, r3, #29
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x26e>
 8000fe8:	e720      	b.n	8000e2c <__aeabi_fsub+0xb0>
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	2cff      	cmp	r4, #255	; 0xff
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x276>
 8000ff0:	e77a      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	0a5f      	lsrs	r7, r3, #9
 8000ff6:	b2e0      	uxtb	r0, r4
 8000ff8:	e727      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	2700      	movs	r7, #0
 8000ffe:	e724      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <__aeabi_fsub+0x38c>)
 8001002:	1a24      	subs	r4, r4, r0
 8001004:	4033      	ands	r3, r6
 8001006:	e70f      	b.n	8000e28 <__aeabi_fsub+0xac>
 8001008:	2eff      	cmp	r6, #255	; 0xff
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x292>
 800100c:	e76a      	b.n	8000ee4 <__aeabi_fsub+0x168>
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	4662      	mov	r2, ip
 8001012:	04db      	lsls	r3, r3, #19
 8001014:	431a      	orrs	r2, r3
 8001016:	4694      	mov	ip, r2
 8001018:	2301      	movs	r3, #1
 800101a:	281b      	cmp	r0, #27
 800101c:	dc09      	bgt.n	8001032 <__aeabi_fsub+0x2b6>
 800101e:	2420      	movs	r4, #32
 8001020:	4663      	mov	r3, ip
 8001022:	4662      	mov	r2, ip
 8001024:	40c3      	lsrs	r3, r0
 8001026:	1a20      	subs	r0, r4, r0
 8001028:	4082      	lsls	r2, r0
 800102a:	0010      	movs	r0, r2
 800102c:	1e44      	subs	r4, r0, #1
 800102e:	41a0      	sbcs	r0, r4
 8001030:	4303      	orrs	r3, r0
 8001032:	4652      	mov	r2, sl
 8001034:	000d      	movs	r5, r1
 8001036:	0034      	movs	r4, r6
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	e6dc      	b.n	8000df6 <__aeabi_fsub+0x7a>
 800103c:	4663      	mov	r3, ip
 800103e:	4652      	mov	r2, sl
 8001040:	1a9e      	subs	r6, r3, r2
 8001042:	0173      	lsls	r3, r6, #5
 8001044:	d417      	bmi.n	8001076 <__aeabi_fsub+0x2fa>
 8001046:	2e00      	cmp	r6, #0
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x2d0>
 800104a:	e6d9      	b.n	8000e00 <__aeabi_fsub+0x84>
 800104c:	2500      	movs	r5, #0
 800104e:	2000      	movs	r0, #0
 8001050:	2700      	movs	r7, #0
 8001052:	e6fa      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001054:	4663      	mov	r3, ip
 8001056:	2b00      	cmp	r3, #0
 8001058:	d044      	beq.n	80010e4 <__aeabi_fsub+0x368>
 800105a:	3901      	subs	r1, #1
 800105c:	2900      	cmp	r1, #0
 800105e:	d04c      	beq.n	80010fa <__aeabi_fsub+0x37e>
 8001060:	2eff      	cmp	r6, #255	; 0xff
 8001062:	d000      	beq.n	8001066 <__aeabi_fsub+0x2ea>
 8001064:	e771      	b.n	8000f4a <__aeabi_fsub+0x1ce>
 8001066:	4643      	mov	r3, r8
 8001068:	e73e      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 800106a:	2cff      	cmp	r4, #255	; 0xff
 800106c:	d0c5      	beq.n	8000ffa <__aeabi_fsub+0x27e>
 800106e:	4652      	mov	r2, sl
 8001070:	4462      	add	r2, ip
 8001072:	0853      	lsrs	r3, r2, #1
 8001074:	e7b6      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8001076:	4663      	mov	r3, ip
 8001078:	000d      	movs	r5, r1
 800107a:	1ad6      	subs	r6, r2, r3
 800107c:	e6c0      	b.n	8000e00 <__aeabi_fsub+0x84>
 800107e:	4662      	mov	r2, ip
 8001080:	2a00      	cmp	r2, #0
 8001082:	d116      	bne.n	80010b2 <__aeabi_fsub+0x336>
 8001084:	4653      	mov	r3, sl
 8001086:	2b00      	cmp	r3, #0
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x310>
 800108a:	e72b      	b.n	8000ee4 <__aeabi_fsub+0x168>
 800108c:	2780      	movs	r7, #128	; 0x80
 800108e:	2500      	movs	r5, #0
 8001090:	20ff      	movs	r0, #255	; 0xff
 8001092:	03ff      	lsls	r7, r7, #15
 8001094:	e6d9      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001096:	000d      	movs	r5, r1
 8001098:	4643      	mov	r3, r8
 800109a:	0034      	movs	r4, r6
 800109c:	e7a6      	b.n	8000fec <__aeabi_fsub+0x270>
 800109e:	4653      	mov	r3, sl
 80010a0:	4463      	add	r3, ip
 80010a2:	e6f7      	b.n	8000e94 <__aeabi_fsub+0x118>
 80010a4:	4663      	mov	r3, ip
 80010a6:	4652      	mov	r2, sl
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	e6a4      	b.n	8000df6 <__aeabi_fsub+0x7a>
 80010ac:	4662      	mov	r2, ip
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d0d9      	beq.n	8001066 <__aeabi_fsub+0x2ea>
 80010b2:	4652      	mov	r2, sl
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x33e>
 80010b8:	e716      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	03d2      	lsls	r2, r2, #15
 80010be:	4213      	tst	r3, r2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x348>
 80010c2:	e711      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010c4:	4640      	mov	r0, r8
 80010c6:	4210      	tst	r0, r2
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x350>
 80010ca:	e70d      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010cc:	e70a      	b.n	8000ee4 <__aeabi_fsub+0x168>
 80010ce:	4652      	mov	r2, sl
 80010d0:	000d      	movs	r5, r1
 80010d2:	0034      	movs	r4, r6
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	e68e      	b.n	8000df6 <__aeabi_fsub+0x7a>
 80010d8:	4653      	mov	r3, sl
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d008      	beq.n	80010f0 <__aeabi_fsub+0x374>
 80010de:	000d      	movs	r5, r1
 80010e0:	4647      	mov	r7, r8
 80010e2:	e6b2      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010e4:	4643      	mov	r3, r8
 80010e6:	0034      	movs	r4, r6
 80010e8:	e780      	b.n	8000fec <__aeabi_fsub+0x270>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d000      	beq.n	80010f0 <__aeabi_fsub+0x374>
 80010ee:	e779      	b.n	8000fe4 <__aeabi_fsub+0x268>
 80010f0:	2500      	movs	r5, #0
 80010f2:	2700      	movs	r7, #0
 80010f4:	e6a9      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010f6:	4647      	mov	r7, r8
 80010f8:	e6a7      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010fa:	4653      	mov	r3, sl
 80010fc:	0034      	movs	r4, r6
 80010fe:	4463      	add	r3, ip
 8001100:	e6c8      	b.n	8000e94 <__aeabi_fsub+0x118>
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	7dffffff 	.word	0x7dffffff
 8001108:	fbffffff 	.word	0xfbffffff

0800110c <__aeabi_f2iz>:
 800110c:	0241      	lsls	r1, r0, #9
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0fc3      	lsrs	r3, r0, #31
 8001112:	0a49      	lsrs	r1, r1, #9
 8001114:	2000      	movs	r0, #0
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	2a7e      	cmp	r2, #126	; 0x7e
 800111a:	d903      	bls.n	8001124 <__aeabi_f2iz+0x18>
 800111c:	2a9d      	cmp	r2, #157	; 0x9d
 800111e:	d902      	bls.n	8001126 <__aeabi_f2iz+0x1a>
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <__aeabi_f2iz+0x3c>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	2080      	movs	r0, #128	; 0x80
 8001128:	0400      	lsls	r0, r0, #16
 800112a:	4301      	orrs	r1, r0
 800112c:	2a95      	cmp	r2, #149	; 0x95
 800112e:	dc07      	bgt.n	8001140 <__aeabi_f2iz+0x34>
 8001130:	2096      	movs	r0, #150	; 0x96
 8001132:	1a82      	subs	r2, r0, r2
 8001134:	40d1      	lsrs	r1, r2
 8001136:	4248      	negs	r0, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <__aeabi_f2iz+0x18>
 800113c:	0008      	movs	r0, r1
 800113e:	e7f1      	b.n	8001124 <__aeabi_f2iz+0x18>
 8001140:	3a96      	subs	r2, #150	; 0x96
 8001142:	4091      	lsls	r1, r2
 8001144:	e7f7      	b.n	8001136 <__aeabi_f2iz+0x2a>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	7fffffff 	.word	0x7fffffff

0800114c <__aeabi_i2f>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	2800      	cmp	r0, #0
 8001150:	d013      	beq.n	800117a <__aeabi_i2f+0x2e>
 8001152:	17c3      	asrs	r3, r0, #31
 8001154:	18c5      	adds	r5, r0, r3
 8001156:	405d      	eors	r5, r3
 8001158:	0fc4      	lsrs	r4, r0, #31
 800115a:	0028      	movs	r0, r5
 800115c:	f001 f8d4 	bl	8002308 <__clzsi2>
 8001160:	239e      	movs	r3, #158	; 0x9e
 8001162:	0001      	movs	r1, r0
 8001164:	1a1b      	subs	r3, r3, r0
 8001166:	2b96      	cmp	r3, #150	; 0x96
 8001168:	dc0f      	bgt.n	800118a <__aeabi_i2f+0x3e>
 800116a:	2808      	cmp	r0, #8
 800116c:	dd01      	ble.n	8001172 <__aeabi_i2f+0x26>
 800116e:	3908      	subs	r1, #8
 8001170:	408d      	lsls	r5, r1
 8001172:	026d      	lsls	r5, r5, #9
 8001174:	0a6d      	lsrs	r5, r5, #9
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	e002      	b.n	8001180 <__aeabi_i2f+0x34>
 800117a:	2400      	movs	r4, #0
 800117c:	2000      	movs	r0, #0
 800117e:	2500      	movs	r5, #0
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	4328      	orrs	r0, r5
 8001184:	07e4      	lsls	r4, r4, #31
 8001186:	4320      	orrs	r0, r4
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	2b99      	cmp	r3, #153	; 0x99
 800118c:	dd0b      	ble.n	80011a6 <__aeabi_i2f+0x5a>
 800118e:	2205      	movs	r2, #5
 8001190:	002e      	movs	r6, r5
 8001192:	1a12      	subs	r2, r2, r0
 8001194:	40d6      	lsrs	r6, r2
 8001196:	0002      	movs	r2, r0
 8001198:	321b      	adds	r2, #27
 800119a:	4095      	lsls	r5, r2
 800119c:	0028      	movs	r0, r5
 800119e:	1e45      	subs	r5, r0, #1
 80011a0:	41a8      	sbcs	r0, r5
 80011a2:	0035      	movs	r5, r6
 80011a4:	4305      	orrs	r5, r0
 80011a6:	2905      	cmp	r1, #5
 80011a8:	dd01      	ble.n	80011ae <__aeabi_i2f+0x62>
 80011aa:	1f4a      	subs	r2, r1, #5
 80011ac:	4095      	lsls	r5, r2
 80011ae:	002a      	movs	r2, r5
 80011b0:	4e08      	ldr	r6, [pc, #32]	; (80011d4 <__aeabi_i2f+0x88>)
 80011b2:	4032      	ands	r2, r6
 80011b4:	0768      	lsls	r0, r5, #29
 80011b6:	d009      	beq.n	80011cc <__aeabi_i2f+0x80>
 80011b8:	200f      	movs	r0, #15
 80011ba:	4028      	ands	r0, r5
 80011bc:	2804      	cmp	r0, #4
 80011be:	d005      	beq.n	80011cc <__aeabi_i2f+0x80>
 80011c0:	3204      	adds	r2, #4
 80011c2:	0150      	lsls	r0, r2, #5
 80011c4:	d502      	bpl.n	80011cc <__aeabi_i2f+0x80>
 80011c6:	239f      	movs	r3, #159	; 0x9f
 80011c8:	4032      	ands	r2, r6
 80011ca:	1a5b      	subs	r3, r3, r1
 80011cc:	0192      	lsls	r2, r2, #6
 80011ce:	0a55      	lsrs	r5, r2, #9
 80011d0:	b2d8      	uxtb	r0, r3
 80011d2:	e7d5      	b.n	8001180 <__aeabi_i2f+0x34>
 80011d4:	fbffffff 	.word	0xfbffffff

080011d8 <__aeabi_ui2f>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	1e05      	subs	r5, r0, #0
 80011dc:	d00e      	beq.n	80011fc <__aeabi_ui2f+0x24>
 80011de:	f001 f893 	bl	8002308 <__clzsi2>
 80011e2:	239e      	movs	r3, #158	; 0x9e
 80011e4:	0004      	movs	r4, r0
 80011e6:	1a1b      	subs	r3, r3, r0
 80011e8:	2b96      	cmp	r3, #150	; 0x96
 80011ea:	dc0c      	bgt.n	8001206 <__aeabi_ui2f+0x2e>
 80011ec:	2808      	cmp	r0, #8
 80011ee:	dd01      	ble.n	80011f4 <__aeabi_ui2f+0x1c>
 80011f0:	3c08      	subs	r4, #8
 80011f2:	40a5      	lsls	r5, r4
 80011f4:	026d      	lsls	r5, r5, #9
 80011f6:	0a6d      	lsrs	r5, r5, #9
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	e001      	b.n	8001200 <__aeabi_ui2f+0x28>
 80011fc:	2000      	movs	r0, #0
 80011fe:	2500      	movs	r5, #0
 8001200:	05c0      	lsls	r0, r0, #23
 8001202:	4328      	orrs	r0, r5
 8001204:	bd70      	pop	{r4, r5, r6, pc}
 8001206:	2b99      	cmp	r3, #153	; 0x99
 8001208:	dd09      	ble.n	800121e <__aeabi_ui2f+0x46>
 800120a:	0002      	movs	r2, r0
 800120c:	0029      	movs	r1, r5
 800120e:	321b      	adds	r2, #27
 8001210:	4091      	lsls	r1, r2
 8001212:	1e4a      	subs	r2, r1, #1
 8001214:	4191      	sbcs	r1, r2
 8001216:	2205      	movs	r2, #5
 8001218:	1a12      	subs	r2, r2, r0
 800121a:	40d5      	lsrs	r5, r2
 800121c:	430d      	orrs	r5, r1
 800121e:	2c05      	cmp	r4, #5
 8001220:	dd01      	ble.n	8001226 <__aeabi_ui2f+0x4e>
 8001222:	1f62      	subs	r2, r4, #5
 8001224:	4095      	lsls	r5, r2
 8001226:	0029      	movs	r1, r5
 8001228:	4e08      	ldr	r6, [pc, #32]	; (800124c <__aeabi_ui2f+0x74>)
 800122a:	4031      	ands	r1, r6
 800122c:	076a      	lsls	r2, r5, #29
 800122e:	d009      	beq.n	8001244 <__aeabi_ui2f+0x6c>
 8001230:	200f      	movs	r0, #15
 8001232:	4028      	ands	r0, r5
 8001234:	2804      	cmp	r0, #4
 8001236:	d005      	beq.n	8001244 <__aeabi_ui2f+0x6c>
 8001238:	3104      	adds	r1, #4
 800123a:	014a      	lsls	r2, r1, #5
 800123c:	d502      	bpl.n	8001244 <__aeabi_ui2f+0x6c>
 800123e:	239f      	movs	r3, #159	; 0x9f
 8001240:	4031      	ands	r1, r6
 8001242:	1b1b      	subs	r3, r3, r4
 8001244:	0189      	lsls	r1, r1, #6
 8001246:	0a4d      	lsrs	r5, r1, #9
 8001248:	b2d8      	uxtb	r0, r3
 800124a:	e7d9      	b.n	8001200 <__aeabi_ui2f+0x28>
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_dadd>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	464f      	mov	r7, r9
 8001254:	46d6      	mov	lr, sl
 8001256:	4646      	mov	r6, r8
 8001258:	000d      	movs	r5, r1
 800125a:	0001      	movs	r1, r0
 800125c:	0018      	movs	r0, r3
 800125e:	b5c0      	push	{r6, r7, lr}
 8001260:	0017      	movs	r7, r2
 8001262:	032b      	lsls	r3, r5, #12
 8001264:	0a5a      	lsrs	r2, r3, #9
 8001266:	0f4b      	lsrs	r3, r1, #29
 8001268:	4313      	orrs	r3, r2
 800126a:	00ca      	lsls	r2, r1, #3
 800126c:	4691      	mov	r9, r2
 800126e:	0302      	lsls	r2, r0, #12
 8001270:	006e      	lsls	r6, r5, #1
 8001272:	0041      	lsls	r1, r0, #1
 8001274:	0a52      	lsrs	r2, r2, #9
 8001276:	0fec      	lsrs	r4, r5, #31
 8001278:	0f7d      	lsrs	r5, r7, #29
 800127a:	4315      	orrs	r5, r2
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	0d49      	lsrs	r1, r1, #21
 8001280:	0fc0      	lsrs	r0, r0, #31
 8001282:	4682      	mov	sl, r0
 8001284:	46ac      	mov	ip, r5
 8001286:	00ff      	lsls	r7, r7, #3
 8001288:	1a72      	subs	r2, r6, r1
 800128a:	4284      	cmp	r4, r0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x40>
 800128e:	e098      	b.n	80013c2 <__aeabi_dadd+0x172>
 8001290:	2a00      	cmp	r2, #0
 8001292:	dc00      	bgt.n	8001296 <__aeabi_dadd+0x46>
 8001294:	e081      	b.n	800139a <__aeabi_dadd+0x14a>
 8001296:	2900      	cmp	r1, #0
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x4c>
 800129a:	e0b6      	b.n	800140a <__aeabi_dadd+0x1ba>
 800129c:	49c9      	ldr	r1, [pc, #804]	; (80015c4 <__aeabi_dadd+0x374>)
 800129e:	428e      	cmp	r6, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x54>
 80012a2:	e172      	b.n	800158a <__aeabi_dadd+0x33a>
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0028      	movs	r0, r5
 80012a8:	0409      	lsls	r1, r1, #16
 80012aa:	4308      	orrs	r0, r1
 80012ac:	4684      	mov	ip, r0
 80012ae:	2a38      	cmp	r2, #56	; 0x38
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dadd+0x64>
 80012b2:	e15e      	b.n	8001572 <__aeabi_dadd+0x322>
 80012b4:	2a1f      	cmp	r2, #31
 80012b6:	dd00      	ble.n	80012ba <__aeabi_dadd+0x6a>
 80012b8:	e1ee      	b.n	8001698 <__aeabi_dadd+0x448>
 80012ba:	2020      	movs	r0, #32
 80012bc:	0039      	movs	r1, r7
 80012be:	4665      	mov	r5, ip
 80012c0:	1a80      	subs	r0, r0, r2
 80012c2:	4087      	lsls	r7, r0
 80012c4:	40d1      	lsrs	r1, r2
 80012c6:	4085      	lsls	r5, r0
 80012c8:	430d      	orrs	r5, r1
 80012ca:	0039      	movs	r1, r7
 80012cc:	1e4f      	subs	r7, r1, #1
 80012ce:	41b9      	sbcs	r1, r7
 80012d0:	4667      	mov	r7, ip
 80012d2:	40d7      	lsrs	r7, r2
 80012d4:	4329      	orrs	r1, r5
 80012d6:	1bdb      	subs	r3, r3, r7
 80012d8:	464a      	mov	r2, r9
 80012da:	1a55      	subs	r5, r2, r1
 80012dc:	45a9      	cmp	r9, r5
 80012de:	4189      	sbcs	r1, r1
 80012e0:	4249      	negs	r1, r1
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	4698      	mov	r8, r3
 80012e6:	4643      	mov	r3, r8
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	d400      	bmi.n	80012ee <__aeabi_dadd+0x9e>
 80012ec:	e0cc      	b.n	8001488 <__aeabi_dadd+0x238>
 80012ee:	4643      	mov	r3, r8
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	0a5b      	lsrs	r3, r3, #9
 80012f4:	4698      	mov	r8, r3
 80012f6:	4643      	mov	r3, r8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0xae>
 80012fc:	e12c      	b.n	8001558 <__aeabi_dadd+0x308>
 80012fe:	4640      	mov	r0, r8
 8001300:	f001 f802 	bl	8002308 <__clzsi2>
 8001304:	0001      	movs	r1, r0
 8001306:	3908      	subs	r1, #8
 8001308:	2220      	movs	r2, #32
 800130a:	0028      	movs	r0, r5
 800130c:	4643      	mov	r3, r8
 800130e:	1a52      	subs	r2, r2, r1
 8001310:	408b      	lsls	r3, r1
 8001312:	40d0      	lsrs	r0, r2
 8001314:	408d      	lsls	r5, r1
 8001316:	4303      	orrs	r3, r0
 8001318:	428e      	cmp	r6, r1
 800131a:	dd00      	ble.n	800131e <__aeabi_dadd+0xce>
 800131c:	e117      	b.n	800154e <__aeabi_dadd+0x2fe>
 800131e:	1b8e      	subs	r6, r1, r6
 8001320:	1c72      	adds	r2, r6, #1
 8001322:	2a1f      	cmp	r2, #31
 8001324:	dd00      	ble.n	8001328 <__aeabi_dadd+0xd8>
 8001326:	e1a7      	b.n	8001678 <__aeabi_dadd+0x428>
 8001328:	2120      	movs	r1, #32
 800132a:	0018      	movs	r0, r3
 800132c:	002e      	movs	r6, r5
 800132e:	1a89      	subs	r1, r1, r2
 8001330:	408d      	lsls	r5, r1
 8001332:	4088      	lsls	r0, r1
 8001334:	40d6      	lsrs	r6, r2
 8001336:	40d3      	lsrs	r3, r2
 8001338:	1e69      	subs	r1, r5, #1
 800133a:	418d      	sbcs	r5, r1
 800133c:	4330      	orrs	r0, r6
 800133e:	4698      	mov	r8, r3
 8001340:	2600      	movs	r6, #0
 8001342:	4305      	orrs	r5, r0
 8001344:	076b      	lsls	r3, r5, #29
 8001346:	d009      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001348:	230f      	movs	r3, #15
 800134a:	402b      	ands	r3, r5
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001350:	1d2b      	adds	r3, r5, #4
 8001352:	42ab      	cmp	r3, r5
 8001354:	41ad      	sbcs	r5, r5
 8001356:	426d      	negs	r5, r5
 8001358:	44a8      	add	r8, r5
 800135a:	001d      	movs	r5, r3
 800135c:	4643      	mov	r3, r8
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	d400      	bmi.n	8001364 <__aeabi_dadd+0x114>
 8001362:	e094      	b.n	800148e <__aeabi_dadd+0x23e>
 8001364:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <__aeabi_dadd+0x374>)
 8001366:	1c72      	adds	r2, r6, #1
 8001368:	429a      	cmp	r2, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x11e>
 800136c:	e09d      	b.n	80014aa <__aeabi_dadd+0x25a>
 800136e:	4641      	mov	r1, r8
 8001370:	4b95      	ldr	r3, [pc, #596]	; (80015c8 <__aeabi_dadd+0x378>)
 8001372:	08ed      	lsrs	r5, r5, #3
 8001374:	4019      	ands	r1, r3
 8001376:	000b      	movs	r3, r1
 8001378:	0552      	lsls	r2, r2, #21
 800137a:	0749      	lsls	r1, r1, #29
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	4329      	orrs	r1, r5
 8001380:	0b1b      	lsrs	r3, r3, #12
 8001382:	0d52      	lsrs	r2, r2, #21
 8001384:	0512      	lsls	r2, r2, #20
 8001386:	4313      	orrs	r3, r2
 8001388:	07e4      	lsls	r4, r4, #31
 800138a:	4323      	orrs	r3, r4
 800138c:	0008      	movs	r0, r1
 800138e:	0019      	movs	r1, r3
 8001390:	bce0      	pop	{r5, r6, r7}
 8001392:	46ba      	mov	sl, r7
 8001394:	46b1      	mov	r9, r6
 8001396:	46a8      	mov	r8, r5
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2a00      	cmp	r2, #0
 800139c:	d043      	beq.n	8001426 <__aeabi_dadd+0x1d6>
 800139e:	1b8a      	subs	r2, r1, r6
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dadd+0x156>
 80013a4:	e12a      	b.n	80015fc <__aeabi_dadd+0x3ac>
 80013a6:	464c      	mov	r4, r9
 80013a8:	431c      	orrs	r4, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x15e>
 80013ac:	e1d1      	b.n	8001752 <__aeabi_dadd+0x502>
 80013ae:	1e54      	subs	r4, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x166>
 80013b4:	e21f      	b.n	80017f6 <__aeabi_dadd+0x5a6>
 80013b6:	4d83      	ldr	r5, [pc, #524]	; (80015c4 <__aeabi_dadd+0x374>)
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x16e>
 80013bc:	e272      	b.n	80018a4 <__aeabi_dadd+0x654>
 80013be:	0022      	movs	r2, r4
 80013c0:	e123      	b.n	800160a <__aeabi_dadd+0x3ba>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dadd+0x178>
 80013c6:	e098      	b.n	80014fa <__aeabi_dadd+0x2aa>
 80013c8:	2900      	cmp	r1, #0
 80013ca:	d042      	beq.n	8001452 <__aeabi_dadd+0x202>
 80013cc:	497d      	ldr	r1, [pc, #500]	; (80015c4 <__aeabi_dadd+0x374>)
 80013ce:	428e      	cmp	r6, r1
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x184>
 80013d2:	e0da      	b.n	800158a <__aeabi_dadd+0x33a>
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0028      	movs	r0, r5
 80013d8:	0409      	lsls	r1, r1, #16
 80013da:	4308      	orrs	r0, r1
 80013dc:	4684      	mov	ip, r0
 80013de:	2a38      	cmp	r2, #56	; 0x38
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dadd+0x194>
 80013e2:	e129      	b.n	8001638 <__aeabi_dadd+0x3e8>
 80013e4:	2a1f      	cmp	r2, #31
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_dadd+0x19a>
 80013e8:	e187      	b.n	80016fa <__aeabi_dadd+0x4aa>
 80013ea:	0011      	movs	r1, r2
 80013ec:	4665      	mov	r5, ip
 80013ee:	3920      	subs	r1, #32
 80013f0:	40cd      	lsrs	r5, r1
 80013f2:	2a20      	cmp	r2, #32
 80013f4:	d004      	beq.n	8001400 <__aeabi_dadd+0x1b0>
 80013f6:	2040      	movs	r0, #64	; 0x40
 80013f8:	4661      	mov	r1, ip
 80013fa:	1a82      	subs	r2, r0, r2
 80013fc:	4091      	lsls	r1, r2
 80013fe:	430f      	orrs	r7, r1
 8001400:	0039      	movs	r1, r7
 8001402:	1e4f      	subs	r7, r1, #1
 8001404:	41b9      	sbcs	r1, r7
 8001406:	430d      	orrs	r5, r1
 8001408:	e11b      	b.n	8001642 <__aeabi_dadd+0x3f2>
 800140a:	0029      	movs	r1, r5
 800140c:	4339      	orrs	r1, r7
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x1c2>
 8001410:	e0b5      	b.n	800157e <__aeabi_dadd+0x32e>
 8001412:	1e51      	subs	r1, r2, #1
 8001414:	2a01      	cmp	r2, #1
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x1ca>
 8001418:	e1ab      	b.n	8001772 <__aeabi_dadd+0x522>
 800141a:	486a      	ldr	r0, [pc, #424]	; (80015c4 <__aeabi_dadd+0x374>)
 800141c:	4282      	cmp	r2, r0
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x1d2>
 8001420:	e1b2      	b.n	8001788 <__aeabi_dadd+0x538>
 8001422:	000a      	movs	r2, r1
 8001424:	e743      	b.n	80012ae <__aeabi_dadd+0x5e>
 8001426:	4969      	ldr	r1, [pc, #420]	; (80015cc <__aeabi_dadd+0x37c>)
 8001428:	1c75      	adds	r5, r6, #1
 800142a:	420d      	tst	r5, r1
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x1e0>
 800142e:	e0cf      	b.n	80015d0 <__aeabi_dadd+0x380>
 8001430:	2e00      	cmp	r6, #0
 8001432:	d000      	beq.n	8001436 <__aeabi_dadd+0x1e6>
 8001434:	e193      	b.n	800175e <__aeabi_dadd+0x50e>
 8001436:	4649      	mov	r1, r9
 8001438:	4319      	orrs	r1, r3
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x1ee>
 800143c:	e1d1      	b.n	80017e2 <__aeabi_dadd+0x592>
 800143e:	4661      	mov	r1, ip
 8001440:	4339      	orrs	r1, r7
 8001442:	d000      	beq.n	8001446 <__aeabi_dadd+0x1f6>
 8001444:	e1e3      	b.n	800180e <__aeabi_dadd+0x5be>
 8001446:	4649      	mov	r1, r9
 8001448:	0758      	lsls	r0, r3, #29
 800144a:	08c9      	lsrs	r1, r1, #3
 800144c:	4301      	orrs	r1, r0
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	e026      	b.n	80014a0 <__aeabi_dadd+0x250>
 8001452:	0029      	movs	r1, r5
 8001454:	4339      	orrs	r1, r7
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x20a>
 8001458:	e091      	b.n	800157e <__aeabi_dadd+0x32e>
 800145a:	1e51      	subs	r1, r2, #1
 800145c:	2a01      	cmp	r2, #1
 800145e:	d005      	beq.n	800146c <__aeabi_dadd+0x21c>
 8001460:	4858      	ldr	r0, [pc, #352]	; (80015c4 <__aeabi_dadd+0x374>)
 8001462:	4282      	cmp	r2, r0
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x218>
 8001466:	e18f      	b.n	8001788 <__aeabi_dadd+0x538>
 8001468:	000a      	movs	r2, r1
 800146a:	e7b8      	b.n	80013de <__aeabi_dadd+0x18e>
 800146c:	003d      	movs	r5, r7
 800146e:	444d      	add	r5, r9
 8001470:	454d      	cmp	r5, r9
 8001472:	4189      	sbcs	r1, r1
 8001474:	4463      	add	r3, ip
 8001476:	4698      	mov	r8, r3
 8001478:	4249      	negs	r1, r1
 800147a:	4488      	add	r8, r1
 800147c:	4643      	mov	r3, r8
 800147e:	2602      	movs	r6, #2
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	d500      	bpl.n	8001486 <__aeabi_dadd+0x236>
 8001484:	e0eb      	b.n	800165e <__aeabi_dadd+0x40e>
 8001486:	3e01      	subs	r6, #1
 8001488:	076b      	lsls	r3, r5, #29
 800148a:	d000      	beq.n	800148e <__aeabi_dadd+0x23e>
 800148c:	e75c      	b.n	8001348 <__aeabi_dadd+0xf8>
 800148e:	4643      	mov	r3, r8
 8001490:	08e9      	lsrs	r1, r5, #3
 8001492:	075a      	lsls	r2, r3, #29
 8001494:	4311      	orrs	r1, r2
 8001496:	0032      	movs	r2, r6
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	484a      	ldr	r0, [pc, #296]	; (80015c4 <__aeabi_dadd+0x374>)
 800149c:	4282      	cmp	r2, r0
 800149e:	d021      	beq.n	80014e4 <__aeabi_dadd+0x294>
 80014a0:	031b      	lsls	r3, r3, #12
 80014a2:	0552      	lsls	r2, r2, #21
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	0d52      	lsrs	r2, r2, #21
 80014a8:	e76c      	b.n	8001384 <__aeabi_dadd+0x134>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	e769      	b.n	8001384 <__aeabi_dadd+0x134>
 80014b0:	002a      	movs	r2, r5
 80014b2:	433a      	orrs	r2, r7
 80014b4:	d069      	beq.n	800158a <__aeabi_dadd+0x33a>
 80014b6:	464a      	mov	r2, r9
 80014b8:	0758      	lsls	r0, r3, #29
 80014ba:	08d1      	lsrs	r1, r2, #3
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	031b      	lsls	r3, r3, #12
 80014c2:	4308      	orrs	r0, r1
 80014c4:	421a      	tst	r2, r3
 80014c6:	d007      	beq.n	80014d8 <__aeabi_dadd+0x288>
 80014c8:	0029      	movs	r1, r5
 80014ca:	08ed      	lsrs	r5, r5, #3
 80014cc:	421d      	tst	r5, r3
 80014ce:	d103      	bne.n	80014d8 <__aeabi_dadd+0x288>
 80014d0:	002a      	movs	r2, r5
 80014d2:	08ff      	lsrs	r7, r7, #3
 80014d4:	0748      	lsls	r0, r1, #29
 80014d6:	4338      	orrs	r0, r7
 80014d8:	0f43      	lsrs	r3, r0, #29
 80014da:	00c1      	lsls	r1, r0, #3
 80014dc:	075b      	lsls	r3, r3, #29
 80014de:	08c9      	lsrs	r1, r1, #3
 80014e0:	4319      	orrs	r1, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x29c>
 80014ea:	e213      	b.n	8001914 <__aeabi_dadd+0x6c4>
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0312      	lsls	r2, r2, #12
 80014f0:	4313      	orrs	r3, r2
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <__aeabi_dadd+0x374>)
 80014f6:	0b1b      	lsrs	r3, r3, #12
 80014f8:	e744      	b.n	8001384 <__aeabi_dadd+0x134>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d04b      	beq.n	8001596 <__aeabi_dadd+0x346>
 80014fe:	1b8a      	subs	r2, r1, r6
 8001500:	2e00      	cmp	r6, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x2b6>
 8001504:	e0e7      	b.n	80016d6 <__aeabi_dadd+0x486>
 8001506:	482f      	ldr	r0, [pc, #188]	; (80015c4 <__aeabi_dadd+0x374>)
 8001508:	4281      	cmp	r1, r0
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x2be>
 800150c:	e195      	b.n	800183a <__aeabi_dadd+0x5ea>
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	0400      	lsls	r0, r0, #16
 8001512:	4303      	orrs	r3, r0
 8001514:	2a38      	cmp	r2, #56	; 0x38
 8001516:	dd00      	ble.n	800151a <__aeabi_dadd+0x2ca>
 8001518:	e143      	b.n	80017a2 <__aeabi_dadd+0x552>
 800151a:	2a1f      	cmp	r2, #31
 800151c:	dd00      	ble.n	8001520 <__aeabi_dadd+0x2d0>
 800151e:	e1db      	b.n	80018d8 <__aeabi_dadd+0x688>
 8001520:	2020      	movs	r0, #32
 8001522:	001d      	movs	r5, r3
 8001524:	464e      	mov	r6, r9
 8001526:	1a80      	subs	r0, r0, r2
 8001528:	4085      	lsls	r5, r0
 800152a:	40d6      	lsrs	r6, r2
 800152c:	4335      	orrs	r5, r6
 800152e:	464e      	mov	r6, r9
 8001530:	4086      	lsls	r6, r0
 8001532:	0030      	movs	r0, r6
 8001534:	40d3      	lsrs	r3, r2
 8001536:	1e46      	subs	r6, r0, #1
 8001538:	41b0      	sbcs	r0, r6
 800153a:	449c      	add	ip, r3
 800153c:	4305      	orrs	r5, r0
 800153e:	19ed      	adds	r5, r5, r7
 8001540:	42bd      	cmp	r5, r7
 8001542:	419b      	sbcs	r3, r3
 8001544:	425b      	negs	r3, r3
 8001546:	4463      	add	r3, ip
 8001548:	4698      	mov	r8, r3
 800154a:	000e      	movs	r6, r1
 800154c:	e07f      	b.n	800164e <__aeabi_dadd+0x3fe>
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <__aeabi_dadd+0x378>)
 8001550:	1a76      	subs	r6, r6, r1
 8001552:	4013      	ands	r3, r2
 8001554:	4698      	mov	r8, r3
 8001556:	e6f5      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001558:	0028      	movs	r0, r5
 800155a:	f000 fed5 	bl	8002308 <__clzsi2>
 800155e:	0001      	movs	r1, r0
 8001560:	3118      	adds	r1, #24
 8001562:	291f      	cmp	r1, #31
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x318>
 8001566:	e6cf      	b.n	8001308 <__aeabi_dadd+0xb8>
 8001568:	002b      	movs	r3, r5
 800156a:	3808      	subs	r0, #8
 800156c:	4083      	lsls	r3, r0
 800156e:	2500      	movs	r5, #0
 8001570:	e6d2      	b.n	8001318 <__aeabi_dadd+0xc8>
 8001572:	4662      	mov	r2, ip
 8001574:	433a      	orrs	r2, r7
 8001576:	0011      	movs	r1, r2
 8001578:	1e4f      	subs	r7, r1, #1
 800157a:	41b9      	sbcs	r1, r7
 800157c:	e6ac      	b.n	80012d8 <__aeabi_dadd+0x88>
 800157e:	4649      	mov	r1, r9
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	4301      	orrs	r1, r0
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	e787      	b.n	800149a <__aeabi_dadd+0x24a>
 800158a:	4649      	mov	r1, r9
 800158c:	075a      	lsls	r2, r3, #29
 800158e:	08c9      	lsrs	r1, r1, #3
 8001590:	4311      	orrs	r1, r2
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	e7a6      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <__aeabi_dadd+0x37c>)
 8001598:	1c70      	adds	r0, r6, #1
 800159a:	4208      	tst	r0, r1
 800159c:	d000      	beq.n	80015a0 <__aeabi_dadd+0x350>
 800159e:	e0bb      	b.n	8001718 <__aeabi_dadd+0x4c8>
 80015a0:	2e00      	cmp	r6, #0
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dadd+0x356>
 80015a4:	e114      	b.n	80017d0 <__aeabi_dadd+0x580>
 80015a6:	4649      	mov	r1, r9
 80015a8:	4319      	orrs	r1, r3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x35e>
 80015ac:	e175      	b.n	800189a <__aeabi_dadd+0x64a>
 80015ae:	0029      	movs	r1, r5
 80015b0:	4339      	orrs	r1, r7
 80015b2:	d000      	beq.n	80015b6 <__aeabi_dadd+0x366>
 80015b4:	e17e      	b.n	80018b4 <__aeabi_dadd+0x664>
 80015b6:	4649      	mov	r1, r9
 80015b8:	0758      	lsls	r0, r3, #29
 80015ba:	08c9      	lsrs	r1, r1, #3
 80015bc:	4301      	orrs	r1, r0
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	e76e      	b.n	80014a0 <__aeabi_dadd+0x250>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	000007ff 	.word	0x000007ff
 80015c8:	ff7fffff 	.word	0xff7fffff
 80015cc:	000007fe 	.word	0x000007fe
 80015d0:	4649      	mov	r1, r9
 80015d2:	1bcd      	subs	r5, r1, r7
 80015d4:	4661      	mov	r1, ip
 80015d6:	1a58      	subs	r0, r3, r1
 80015d8:	45a9      	cmp	r9, r5
 80015da:	4189      	sbcs	r1, r1
 80015dc:	4249      	negs	r1, r1
 80015de:	4688      	mov	r8, r1
 80015e0:	0001      	movs	r1, r0
 80015e2:	4640      	mov	r0, r8
 80015e4:	1a09      	subs	r1, r1, r0
 80015e6:	4688      	mov	r8, r1
 80015e8:	0209      	lsls	r1, r1, #8
 80015ea:	d500      	bpl.n	80015ee <__aeabi_dadd+0x39e>
 80015ec:	e0a6      	b.n	800173c <__aeabi_dadd+0x4ec>
 80015ee:	4641      	mov	r1, r8
 80015f0:	4329      	orrs	r1, r5
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x3a6>
 80015f4:	e67f      	b.n	80012f6 <__aeabi_dadd+0xa6>
 80015f6:	2300      	movs	r3, #0
 80015f8:	2400      	movs	r4, #0
 80015fa:	e751      	b.n	80014a0 <__aeabi_dadd+0x250>
 80015fc:	4cc7      	ldr	r4, [pc, #796]	; (800191c <__aeabi_dadd+0x6cc>)
 80015fe:	42a1      	cmp	r1, r4
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x3b4>
 8001602:	e0c7      	b.n	8001794 <__aeabi_dadd+0x544>
 8001604:	2480      	movs	r4, #128	; 0x80
 8001606:	0424      	lsls	r4, r4, #16
 8001608:	4323      	orrs	r3, r4
 800160a:	2a38      	cmp	r2, #56	; 0x38
 800160c:	dc54      	bgt.n	80016b8 <__aeabi_dadd+0x468>
 800160e:	2a1f      	cmp	r2, #31
 8001610:	dd00      	ble.n	8001614 <__aeabi_dadd+0x3c4>
 8001612:	e0cc      	b.n	80017ae <__aeabi_dadd+0x55e>
 8001614:	2420      	movs	r4, #32
 8001616:	4648      	mov	r0, r9
 8001618:	1aa4      	subs	r4, r4, r2
 800161a:	001d      	movs	r5, r3
 800161c:	464e      	mov	r6, r9
 800161e:	40a0      	lsls	r0, r4
 8001620:	40d6      	lsrs	r6, r2
 8001622:	40a5      	lsls	r5, r4
 8001624:	0004      	movs	r4, r0
 8001626:	40d3      	lsrs	r3, r2
 8001628:	4662      	mov	r2, ip
 800162a:	4335      	orrs	r5, r6
 800162c:	1e66      	subs	r6, r4, #1
 800162e:	41b4      	sbcs	r4, r6
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	469c      	mov	ip, r3
 8001634:	4325      	orrs	r5, r4
 8001636:	e044      	b.n	80016c2 <__aeabi_dadd+0x472>
 8001638:	4662      	mov	r2, ip
 800163a:	433a      	orrs	r2, r7
 800163c:	0015      	movs	r5, r2
 800163e:	1e6f      	subs	r7, r5, #1
 8001640:	41bd      	sbcs	r5, r7
 8001642:	444d      	add	r5, r9
 8001644:	454d      	cmp	r5, r9
 8001646:	4189      	sbcs	r1, r1
 8001648:	4249      	negs	r1, r1
 800164a:	4688      	mov	r8, r1
 800164c:	4498      	add	r8, r3
 800164e:	4643      	mov	r3, r8
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	d400      	bmi.n	8001656 <__aeabi_dadd+0x406>
 8001654:	e718      	b.n	8001488 <__aeabi_dadd+0x238>
 8001656:	4bb1      	ldr	r3, [pc, #708]	; (800191c <__aeabi_dadd+0x6cc>)
 8001658:	3601      	adds	r6, #1
 800165a:	429e      	cmp	r6, r3
 800165c:	d049      	beq.n	80016f2 <__aeabi_dadd+0x4a2>
 800165e:	4642      	mov	r2, r8
 8001660:	4baf      	ldr	r3, [pc, #700]	; (8001920 <__aeabi_dadd+0x6d0>)
 8001662:	2101      	movs	r1, #1
 8001664:	401a      	ands	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	086a      	lsrs	r2, r5, #1
 800166a:	400d      	ands	r5, r1
 800166c:	4315      	orrs	r5, r2
 800166e:	07d9      	lsls	r1, r3, #31
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	4698      	mov	r8, r3
 8001674:	430d      	orrs	r5, r1
 8001676:	e665      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001678:	0018      	movs	r0, r3
 800167a:	3e1f      	subs	r6, #31
 800167c:	40f0      	lsrs	r0, r6
 800167e:	2a20      	cmp	r2, #32
 8001680:	d003      	beq.n	800168a <__aeabi_dadd+0x43a>
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	1a8a      	subs	r2, r1, r2
 8001686:	4093      	lsls	r3, r2
 8001688:	431d      	orrs	r5, r3
 800168a:	1e69      	subs	r1, r5, #1
 800168c:	418d      	sbcs	r5, r1
 800168e:	2300      	movs	r3, #0
 8001690:	2600      	movs	r6, #0
 8001692:	4698      	mov	r8, r3
 8001694:	4305      	orrs	r5, r0
 8001696:	e6f7      	b.n	8001488 <__aeabi_dadd+0x238>
 8001698:	0011      	movs	r1, r2
 800169a:	4665      	mov	r5, ip
 800169c:	3920      	subs	r1, #32
 800169e:	40cd      	lsrs	r5, r1
 80016a0:	2a20      	cmp	r2, #32
 80016a2:	d004      	beq.n	80016ae <__aeabi_dadd+0x45e>
 80016a4:	2040      	movs	r0, #64	; 0x40
 80016a6:	4661      	mov	r1, ip
 80016a8:	1a82      	subs	r2, r0, r2
 80016aa:	4091      	lsls	r1, r2
 80016ac:	430f      	orrs	r7, r1
 80016ae:	0039      	movs	r1, r7
 80016b0:	1e4f      	subs	r7, r1, #1
 80016b2:	41b9      	sbcs	r1, r7
 80016b4:	4329      	orrs	r1, r5
 80016b6:	e60f      	b.n	80012d8 <__aeabi_dadd+0x88>
 80016b8:	464a      	mov	r2, r9
 80016ba:	4313      	orrs	r3, r2
 80016bc:	001d      	movs	r5, r3
 80016be:	1e6b      	subs	r3, r5, #1
 80016c0:	419d      	sbcs	r5, r3
 80016c2:	1b7d      	subs	r5, r7, r5
 80016c4:	42af      	cmp	r7, r5
 80016c6:	419b      	sbcs	r3, r3
 80016c8:	4662      	mov	r2, ip
 80016ca:	425b      	negs	r3, r3
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	4698      	mov	r8, r3
 80016d0:	4654      	mov	r4, sl
 80016d2:	000e      	movs	r6, r1
 80016d4:	e607      	b.n	80012e6 <__aeabi_dadd+0x96>
 80016d6:	4648      	mov	r0, r9
 80016d8:	4318      	orrs	r0, r3
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x48e>
 80016dc:	e0b3      	b.n	8001846 <__aeabi_dadd+0x5f6>
 80016de:	1e50      	subs	r0, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x496>
 80016e4:	e10d      	b.n	8001902 <__aeabi_dadd+0x6b2>
 80016e6:	4d8d      	ldr	r5, [pc, #564]	; (800191c <__aeabi_dadd+0x6cc>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x49e>
 80016ec:	e0a5      	b.n	800183a <__aeabi_dadd+0x5ea>
 80016ee:	0002      	movs	r2, r0
 80016f0:	e710      	b.n	8001514 <__aeabi_dadd+0x2c4>
 80016f2:	0032      	movs	r2, r6
 80016f4:	2300      	movs	r3, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	e644      	b.n	8001384 <__aeabi_dadd+0x134>
 80016fa:	2120      	movs	r1, #32
 80016fc:	0038      	movs	r0, r7
 80016fe:	1a89      	subs	r1, r1, r2
 8001700:	4665      	mov	r5, ip
 8001702:	408f      	lsls	r7, r1
 8001704:	408d      	lsls	r5, r1
 8001706:	40d0      	lsrs	r0, r2
 8001708:	1e79      	subs	r1, r7, #1
 800170a:	418f      	sbcs	r7, r1
 800170c:	4305      	orrs	r5, r0
 800170e:	433d      	orrs	r5, r7
 8001710:	4667      	mov	r7, ip
 8001712:	40d7      	lsrs	r7, r2
 8001714:	19db      	adds	r3, r3, r7
 8001716:	e794      	b.n	8001642 <__aeabi_dadd+0x3f2>
 8001718:	4a80      	ldr	r2, [pc, #512]	; (800191c <__aeabi_dadd+0x6cc>)
 800171a:	4290      	cmp	r0, r2
 800171c:	d100      	bne.n	8001720 <__aeabi_dadd+0x4d0>
 800171e:	e0ec      	b.n	80018fa <__aeabi_dadd+0x6aa>
 8001720:	0039      	movs	r1, r7
 8001722:	4449      	add	r1, r9
 8001724:	4549      	cmp	r1, r9
 8001726:	4192      	sbcs	r2, r2
 8001728:	4463      	add	r3, ip
 800172a:	4252      	negs	r2, r2
 800172c:	189b      	adds	r3, r3, r2
 800172e:	07dd      	lsls	r5, r3, #31
 8001730:	0849      	lsrs	r1, r1, #1
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	4698      	mov	r8, r3
 8001736:	0006      	movs	r6, r0
 8001738:	430d      	orrs	r5, r1
 800173a:	e6a5      	b.n	8001488 <__aeabi_dadd+0x238>
 800173c:	464a      	mov	r2, r9
 800173e:	1abd      	subs	r5, r7, r2
 8001740:	42af      	cmp	r7, r5
 8001742:	4189      	sbcs	r1, r1
 8001744:	4662      	mov	r2, ip
 8001746:	4249      	negs	r1, r1
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	1a5b      	subs	r3, r3, r1
 800174c:	4698      	mov	r8, r3
 800174e:	4654      	mov	r4, sl
 8001750:	e5d1      	b.n	80012f6 <__aeabi_dadd+0xa6>
 8001752:	076c      	lsls	r4, r5, #29
 8001754:	08f9      	lsrs	r1, r7, #3
 8001756:	4321      	orrs	r1, r4
 8001758:	08eb      	lsrs	r3, r5, #3
 800175a:	0004      	movs	r4, r0
 800175c:	e69d      	b.n	800149a <__aeabi_dadd+0x24a>
 800175e:	464a      	mov	r2, r9
 8001760:	431a      	orrs	r2, r3
 8001762:	d175      	bne.n	8001850 <__aeabi_dadd+0x600>
 8001764:	4661      	mov	r1, ip
 8001766:	4339      	orrs	r1, r7
 8001768:	d114      	bne.n	8001794 <__aeabi_dadd+0x544>
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	2400      	movs	r4, #0
 800176e:	031b      	lsls	r3, r3, #12
 8001770:	e6bc      	b.n	80014ec <__aeabi_dadd+0x29c>
 8001772:	464a      	mov	r2, r9
 8001774:	1bd5      	subs	r5, r2, r7
 8001776:	45a9      	cmp	r9, r5
 8001778:	4189      	sbcs	r1, r1
 800177a:	4662      	mov	r2, ip
 800177c:	4249      	negs	r1, r1
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	4698      	mov	r8, r3
 8001784:	2601      	movs	r6, #1
 8001786:	e5ae      	b.n	80012e6 <__aeabi_dadd+0x96>
 8001788:	464a      	mov	r2, r9
 800178a:	08d1      	lsrs	r1, r2, #3
 800178c:	075a      	lsls	r2, r3, #29
 800178e:	4311      	orrs	r1, r2
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	e6a7      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001794:	4663      	mov	r3, ip
 8001796:	08f9      	lsrs	r1, r7, #3
 8001798:	075a      	lsls	r2, r3, #29
 800179a:	4654      	mov	r4, sl
 800179c:	4311      	orrs	r1, r2
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	e6a0      	b.n	80014e4 <__aeabi_dadd+0x294>
 80017a2:	464a      	mov	r2, r9
 80017a4:	4313      	orrs	r3, r2
 80017a6:	001d      	movs	r5, r3
 80017a8:	1e6b      	subs	r3, r5, #1
 80017aa:	419d      	sbcs	r5, r3
 80017ac:	e6c7      	b.n	800153e <__aeabi_dadd+0x2ee>
 80017ae:	0014      	movs	r4, r2
 80017b0:	001e      	movs	r6, r3
 80017b2:	3c20      	subs	r4, #32
 80017b4:	40e6      	lsrs	r6, r4
 80017b6:	2a20      	cmp	r2, #32
 80017b8:	d005      	beq.n	80017c6 <__aeabi_dadd+0x576>
 80017ba:	2440      	movs	r4, #64	; 0x40
 80017bc:	1aa2      	subs	r2, r4, r2
 80017be:	4093      	lsls	r3, r2
 80017c0:	464a      	mov	r2, r9
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4691      	mov	r9, r2
 80017c6:	464d      	mov	r5, r9
 80017c8:	1e6b      	subs	r3, r5, #1
 80017ca:	419d      	sbcs	r5, r3
 80017cc:	4335      	orrs	r5, r6
 80017ce:	e778      	b.n	80016c2 <__aeabi_dadd+0x472>
 80017d0:	464a      	mov	r2, r9
 80017d2:	431a      	orrs	r2, r3
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dadd+0x588>
 80017d6:	e66b      	b.n	80014b0 <__aeabi_dadd+0x260>
 80017d8:	076b      	lsls	r3, r5, #29
 80017da:	08f9      	lsrs	r1, r7, #3
 80017dc:	4319      	orrs	r1, r3
 80017de:	08eb      	lsrs	r3, r5, #3
 80017e0:	e680      	b.n	80014e4 <__aeabi_dadd+0x294>
 80017e2:	4661      	mov	r1, ip
 80017e4:	4339      	orrs	r1, r7
 80017e6:	d054      	beq.n	8001892 <__aeabi_dadd+0x642>
 80017e8:	4663      	mov	r3, ip
 80017ea:	08f9      	lsrs	r1, r7, #3
 80017ec:	075c      	lsls	r4, r3, #29
 80017ee:	4321      	orrs	r1, r4
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	0004      	movs	r4, r0
 80017f4:	e654      	b.n	80014a0 <__aeabi_dadd+0x250>
 80017f6:	464a      	mov	r2, r9
 80017f8:	1abd      	subs	r5, r7, r2
 80017fa:	42af      	cmp	r7, r5
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4662      	mov	r2, ip
 8001800:	4249      	negs	r1, r1
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	4698      	mov	r8, r3
 8001808:	0004      	movs	r4, r0
 800180a:	2601      	movs	r6, #1
 800180c:	e56b      	b.n	80012e6 <__aeabi_dadd+0x96>
 800180e:	464a      	mov	r2, r9
 8001810:	1bd5      	subs	r5, r2, r7
 8001812:	45a9      	cmp	r9, r5
 8001814:	4189      	sbcs	r1, r1
 8001816:	4662      	mov	r2, ip
 8001818:	4249      	negs	r1, r1
 800181a:	1a9a      	subs	r2, r3, r2
 800181c:	1a52      	subs	r2, r2, r1
 800181e:	4690      	mov	r8, r2
 8001820:	0212      	lsls	r2, r2, #8
 8001822:	d532      	bpl.n	800188a <__aeabi_dadd+0x63a>
 8001824:	464a      	mov	r2, r9
 8001826:	1abd      	subs	r5, r7, r2
 8001828:	42af      	cmp	r7, r5
 800182a:	4189      	sbcs	r1, r1
 800182c:	4662      	mov	r2, ip
 800182e:	4249      	negs	r1, r1
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	1a5b      	subs	r3, r3, r1
 8001834:	4698      	mov	r8, r3
 8001836:	0004      	movs	r4, r0
 8001838:	e584      	b.n	8001344 <__aeabi_dadd+0xf4>
 800183a:	4663      	mov	r3, ip
 800183c:	08f9      	lsrs	r1, r7, #3
 800183e:	075a      	lsls	r2, r3, #29
 8001840:	4311      	orrs	r1, r2
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	e64e      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001846:	08f9      	lsrs	r1, r7, #3
 8001848:	0768      	lsls	r0, r5, #29
 800184a:	4301      	orrs	r1, r0
 800184c:	08eb      	lsrs	r3, r5, #3
 800184e:	e624      	b.n	800149a <__aeabi_dadd+0x24a>
 8001850:	4662      	mov	r2, ip
 8001852:	433a      	orrs	r2, r7
 8001854:	d100      	bne.n	8001858 <__aeabi_dadd+0x608>
 8001856:	e698      	b.n	800158a <__aeabi_dadd+0x33a>
 8001858:	464a      	mov	r2, r9
 800185a:	08d1      	lsrs	r1, r2, #3
 800185c:	075a      	lsls	r2, r3, #29
 800185e:	4311      	orrs	r1, r2
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	031b      	lsls	r3, r3, #12
 8001866:	421a      	tst	r2, r3
 8001868:	d008      	beq.n	800187c <__aeabi_dadd+0x62c>
 800186a:	4660      	mov	r0, ip
 800186c:	08c5      	lsrs	r5, r0, #3
 800186e:	421d      	tst	r5, r3
 8001870:	d104      	bne.n	800187c <__aeabi_dadd+0x62c>
 8001872:	4654      	mov	r4, sl
 8001874:	002a      	movs	r2, r5
 8001876:	08f9      	lsrs	r1, r7, #3
 8001878:	0743      	lsls	r3, r0, #29
 800187a:	4319      	orrs	r1, r3
 800187c:	0f4b      	lsrs	r3, r1, #29
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	075b      	lsls	r3, r3, #29
 8001882:	08c9      	lsrs	r1, r1, #3
 8001884:	4319      	orrs	r1, r3
 8001886:	0013      	movs	r3, r2
 8001888:	e62c      	b.n	80014e4 <__aeabi_dadd+0x294>
 800188a:	4641      	mov	r1, r8
 800188c:	4329      	orrs	r1, r5
 800188e:	d000      	beq.n	8001892 <__aeabi_dadd+0x642>
 8001890:	e5fa      	b.n	8001488 <__aeabi_dadd+0x238>
 8001892:	2300      	movs	r3, #0
 8001894:	000a      	movs	r2, r1
 8001896:	2400      	movs	r4, #0
 8001898:	e602      	b.n	80014a0 <__aeabi_dadd+0x250>
 800189a:	076b      	lsls	r3, r5, #29
 800189c:	08f9      	lsrs	r1, r7, #3
 800189e:	4319      	orrs	r1, r3
 80018a0:	08eb      	lsrs	r3, r5, #3
 80018a2:	e5fd      	b.n	80014a0 <__aeabi_dadd+0x250>
 80018a4:	4663      	mov	r3, ip
 80018a6:	08f9      	lsrs	r1, r7, #3
 80018a8:	075b      	lsls	r3, r3, #29
 80018aa:	4319      	orrs	r1, r3
 80018ac:	4663      	mov	r3, ip
 80018ae:	0004      	movs	r4, r0
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	e617      	b.n	80014e4 <__aeabi_dadd+0x294>
 80018b4:	003d      	movs	r5, r7
 80018b6:	444d      	add	r5, r9
 80018b8:	4463      	add	r3, ip
 80018ba:	454d      	cmp	r5, r9
 80018bc:	4189      	sbcs	r1, r1
 80018be:	4698      	mov	r8, r3
 80018c0:	4249      	negs	r1, r1
 80018c2:	4488      	add	r8, r1
 80018c4:	4643      	mov	r3, r8
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	d400      	bmi.n	80018cc <__aeabi_dadd+0x67c>
 80018ca:	e5dd      	b.n	8001488 <__aeabi_dadd+0x238>
 80018cc:	4642      	mov	r2, r8
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <__aeabi_dadd+0x6d0>)
 80018d0:	2601      	movs	r6, #1
 80018d2:	401a      	ands	r2, r3
 80018d4:	4690      	mov	r8, r2
 80018d6:	e5d7      	b.n	8001488 <__aeabi_dadd+0x238>
 80018d8:	0010      	movs	r0, r2
 80018da:	001e      	movs	r6, r3
 80018dc:	3820      	subs	r0, #32
 80018de:	40c6      	lsrs	r6, r0
 80018e0:	2a20      	cmp	r2, #32
 80018e2:	d005      	beq.n	80018f0 <__aeabi_dadd+0x6a0>
 80018e4:	2040      	movs	r0, #64	; 0x40
 80018e6:	1a82      	subs	r2, r0, r2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	464a      	mov	r2, r9
 80018ec:	431a      	orrs	r2, r3
 80018ee:	4691      	mov	r9, r2
 80018f0:	464d      	mov	r5, r9
 80018f2:	1e6b      	subs	r3, r5, #1
 80018f4:	419d      	sbcs	r5, r3
 80018f6:	4335      	orrs	r5, r6
 80018f8:	e621      	b.n	800153e <__aeabi_dadd+0x2ee>
 80018fa:	0002      	movs	r2, r0
 80018fc:	2300      	movs	r3, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	e540      	b.n	8001384 <__aeabi_dadd+0x134>
 8001902:	464a      	mov	r2, r9
 8001904:	19d5      	adds	r5, r2, r7
 8001906:	42bd      	cmp	r5, r7
 8001908:	4189      	sbcs	r1, r1
 800190a:	4463      	add	r3, ip
 800190c:	4698      	mov	r8, r3
 800190e:	4249      	negs	r1, r1
 8001910:	4488      	add	r8, r1
 8001912:	e5b3      	b.n	800147c <__aeabi_dadd+0x22c>
 8001914:	2100      	movs	r1, #0
 8001916:	4a01      	ldr	r2, [pc, #4]	; (800191c <__aeabi_dadd+0x6cc>)
 8001918:	000b      	movs	r3, r1
 800191a:	e533      	b.n	8001384 <__aeabi_dadd+0x134>
 800191c:	000007ff 	.word	0x000007ff
 8001920:	ff7fffff 	.word	0xff7fffff

08001924 <__aeabi_dsub>:
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	4657      	mov	r7, sl
 8001928:	464e      	mov	r6, r9
 800192a:	4645      	mov	r5, r8
 800192c:	46de      	mov	lr, fp
 800192e:	0004      	movs	r4, r0
 8001930:	b5e0      	push	{r5, r6, r7, lr}
 8001932:	001f      	movs	r7, r3
 8001934:	0010      	movs	r0, r2
 8001936:	030b      	lsls	r3, r1, #12
 8001938:	0f62      	lsrs	r2, r4, #29
 800193a:	004e      	lsls	r6, r1, #1
 800193c:	0fcd      	lsrs	r5, r1, #31
 800193e:	0a5b      	lsrs	r3, r3, #9
 8001940:	0339      	lsls	r1, r7, #12
 8001942:	4313      	orrs	r3, r2
 8001944:	0a49      	lsrs	r1, r1, #9
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	0f44      	lsrs	r4, r0, #29
 800194a:	4321      	orrs	r1, r4
 800194c:	4cc2      	ldr	r4, [pc, #776]	; (8001c58 <__aeabi_dsub+0x334>)
 800194e:	4691      	mov	r9, r2
 8001950:	4692      	mov	sl, r2
 8001952:	00c0      	lsls	r0, r0, #3
 8001954:	007a      	lsls	r2, r7, #1
 8001956:	4680      	mov	r8, r0
 8001958:	0d76      	lsrs	r6, r6, #21
 800195a:	0d52      	lsrs	r2, r2, #21
 800195c:	0fff      	lsrs	r7, r7, #31
 800195e:	42a2      	cmp	r2, r4
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x40>
 8001962:	e0b4      	b.n	8001ace <__aeabi_dsub+0x1aa>
 8001964:	2401      	movs	r4, #1
 8001966:	4067      	eors	r7, r4
 8001968:	46bb      	mov	fp, r7
 800196a:	42bd      	cmp	r5, r7
 800196c:	d100      	bne.n	8001970 <__aeabi_dsub+0x4c>
 800196e:	e088      	b.n	8001a82 <__aeabi_dsub+0x15e>
 8001970:	1ab4      	subs	r4, r6, r2
 8001972:	46a4      	mov	ip, r4
 8001974:	2c00      	cmp	r4, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x56>
 8001978:	e0b2      	b.n	8001ae0 <__aeabi_dsub+0x1bc>
 800197a:	2a00      	cmp	r2, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x5c>
 800197e:	e0c5      	b.n	8001b0c <__aeabi_dsub+0x1e8>
 8001980:	4ab5      	ldr	r2, [pc, #724]	; (8001c58 <__aeabi_dsub+0x334>)
 8001982:	4296      	cmp	r6, r2
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x64>
 8001986:	e28b      	b.n	8001ea0 <__aeabi_dsub+0x57c>
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0412      	lsls	r2, r2, #16
 800198c:	4311      	orrs	r1, r2
 800198e:	4662      	mov	r2, ip
 8001990:	2a38      	cmp	r2, #56	; 0x38
 8001992:	dd00      	ble.n	8001996 <__aeabi_dsub+0x72>
 8001994:	e1a1      	b.n	8001cda <__aeabi_dsub+0x3b6>
 8001996:	2a1f      	cmp	r2, #31
 8001998:	dd00      	ble.n	800199c <__aeabi_dsub+0x78>
 800199a:	e216      	b.n	8001dca <__aeabi_dsub+0x4a6>
 800199c:	2720      	movs	r7, #32
 800199e:	000c      	movs	r4, r1
 80019a0:	1abf      	subs	r7, r7, r2
 80019a2:	40bc      	lsls	r4, r7
 80019a4:	0002      	movs	r2, r0
 80019a6:	46a0      	mov	r8, r4
 80019a8:	4664      	mov	r4, ip
 80019aa:	40b8      	lsls	r0, r7
 80019ac:	40e2      	lsrs	r2, r4
 80019ae:	4644      	mov	r4, r8
 80019b0:	4314      	orrs	r4, r2
 80019b2:	0002      	movs	r2, r0
 80019b4:	1e50      	subs	r0, r2, #1
 80019b6:	4182      	sbcs	r2, r0
 80019b8:	4660      	mov	r0, ip
 80019ba:	40c1      	lsrs	r1, r0
 80019bc:	4322      	orrs	r2, r4
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	4649      	mov	r1, r9
 80019c2:	1a8c      	subs	r4, r1, r2
 80019c4:	45a1      	cmp	r9, r4
 80019c6:	4192      	sbcs	r2, r2
 80019c8:	4252      	negs	r2, r2
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	4698      	mov	r8, r3
 80019ce:	4643      	mov	r3, r8
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	d400      	bmi.n	80019d6 <__aeabi_dsub+0xb2>
 80019d4:	e117      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 80019d6:	4643      	mov	r3, r8
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	4698      	mov	r8, r3
 80019de:	4643      	mov	r3, r8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0xc2>
 80019e4:	e16c      	b.n	8001cc0 <__aeabi_dsub+0x39c>
 80019e6:	4640      	mov	r0, r8
 80019e8:	f000 fc8e 	bl	8002308 <__clzsi2>
 80019ec:	0002      	movs	r2, r0
 80019ee:	3a08      	subs	r2, #8
 80019f0:	2120      	movs	r1, #32
 80019f2:	0020      	movs	r0, r4
 80019f4:	4643      	mov	r3, r8
 80019f6:	1a89      	subs	r1, r1, r2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	40c8      	lsrs	r0, r1
 80019fc:	4094      	lsls	r4, r2
 80019fe:	4303      	orrs	r3, r0
 8001a00:	4296      	cmp	r6, r2
 8001a02:	dd00      	ble.n	8001a06 <__aeabi_dsub+0xe2>
 8001a04:	e157      	b.n	8001cb6 <__aeabi_dsub+0x392>
 8001a06:	1b96      	subs	r6, r2, r6
 8001a08:	1c71      	adds	r1, r6, #1
 8001a0a:	291f      	cmp	r1, #31
 8001a0c:	dd00      	ble.n	8001a10 <__aeabi_dsub+0xec>
 8001a0e:	e1cb      	b.n	8001da8 <__aeabi_dsub+0x484>
 8001a10:	2220      	movs	r2, #32
 8001a12:	0018      	movs	r0, r3
 8001a14:	0026      	movs	r6, r4
 8001a16:	1a52      	subs	r2, r2, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4090      	lsls	r0, r2
 8001a1c:	40ce      	lsrs	r6, r1
 8001a1e:	40cb      	lsrs	r3, r1
 8001a20:	1e62      	subs	r2, r4, #1
 8001a22:	4194      	sbcs	r4, r2
 8001a24:	4330      	orrs	r0, r6
 8001a26:	4698      	mov	r8, r3
 8001a28:	2600      	movs	r6, #0
 8001a2a:	4304      	orrs	r4, r0
 8001a2c:	0763      	lsls	r3, r4, #29
 8001a2e:	d009      	beq.n	8001a44 <__aeabi_dsub+0x120>
 8001a30:	230f      	movs	r3, #15
 8001a32:	4023      	ands	r3, r4
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <__aeabi_dsub+0x120>
 8001a38:	1d23      	adds	r3, r4, #4
 8001a3a:	42a3      	cmp	r3, r4
 8001a3c:	41a4      	sbcs	r4, r4
 8001a3e:	4264      	negs	r4, r4
 8001a40:	44a0      	add	r8, r4
 8001a42:	001c      	movs	r4, r3
 8001a44:	4643      	mov	r3, r8
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	d400      	bmi.n	8001a4c <__aeabi_dsub+0x128>
 8001a4a:	e0df      	b.n	8001c0c <__aeabi_dsub+0x2e8>
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <__aeabi_dsub+0x334>)
 8001a4e:	3601      	adds	r6, #1
 8001a50:	429e      	cmp	r6, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x132>
 8001a54:	e0fb      	b.n	8001c4e <__aeabi_dsub+0x32a>
 8001a56:	4642      	mov	r2, r8
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <__aeabi_dsub+0x338>)
 8001a5a:	08e4      	lsrs	r4, r4, #3
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	0571      	lsls	r1, r6, #21
 8001a62:	0752      	lsls	r2, r2, #29
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4322      	orrs	r2, r4
 8001a68:	0b1b      	lsrs	r3, r3, #12
 8001a6a:	0d49      	lsrs	r1, r1, #21
 8001a6c:	0509      	lsls	r1, r1, #20
 8001a6e:	07ed      	lsls	r5, r5, #31
 8001a70:	4319      	orrs	r1, r3
 8001a72:	4329      	orrs	r1, r5
 8001a74:	0010      	movs	r0, r2
 8001a76:	bcf0      	pop	{r4, r5, r6, r7}
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	46b2      	mov	sl, r6
 8001a7c:	46a9      	mov	r9, r5
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a82:	1ab4      	subs	r4, r6, r2
 8001a84:	46a4      	mov	ip, r4
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	dd58      	ble.n	8001b3c <__aeabi_dsub+0x218>
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x16c>
 8001a8e:	e09e      	b.n	8001bce <__aeabi_dsub+0x2aa>
 8001a90:	4a71      	ldr	r2, [pc, #452]	; (8001c58 <__aeabi_dsub+0x334>)
 8001a92:	4296      	cmp	r6, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x174>
 8001a96:	e13b      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2a38      	cmp	r2, #56	; 0x38
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x182>
 8001aa4:	e0c1      	b.n	8001c2a <__aeabi_dsub+0x306>
 8001aa6:	2a1f      	cmp	r2, #31
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_dsub+0x188>
 8001aaa:	e1bb      	b.n	8001e24 <__aeabi_dsub+0x500>
 8001aac:	000c      	movs	r4, r1
 8001aae:	3a20      	subs	r2, #32
 8001ab0:	40d4      	lsrs	r4, r2
 8001ab2:	0022      	movs	r2, r4
 8001ab4:	4664      	mov	r4, ip
 8001ab6:	2c20      	cmp	r4, #32
 8001ab8:	d004      	beq.n	8001ac4 <__aeabi_dsub+0x1a0>
 8001aba:	2740      	movs	r7, #64	; 0x40
 8001abc:	1b3f      	subs	r7, r7, r4
 8001abe:	40b9      	lsls	r1, r7
 8001ac0:	4308      	orrs	r0, r1
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4644      	mov	r4, r8
 8001ac6:	1e61      	subs	r1, r4, #1
 8001ac8:	418c      	sbcs	r4, r1
 8001aca:	4314      	orrs	r4, r2
 8001acc:	e0b1      	b.n	8001c32 <__aeabi_dsub+0x30e>
 8001ace:	000c      	movs	r4, r1
 8001ad0:	4304      	orrs	r4, r0
 8001ad2:	d02a      	beq.n	8001b2a <__aeabi_dsub+0x206>
 8001ad4:	46bb      	mov	fp, r7
 8001ad6:	42bd      	cmp	r5, r7
 8001ad8:	d02d      	beq.n	8001b36 <__aeabi_dsub+0x212>
 8001ada:	4c61      	ldr	r4, [pc, #388]	; (8001c60 <__aeabi_dsub+0x33c>)
 8001adc:	46a4      	mov	ip, r4
 8001ade:	44b4      	add	ip, r6
 8001ae0:	4664      	mov	r4, ip
 8001ae2:	2c00      	cmp	r4, #0
 8001ae4:	d05c      	beq.n	8001ba0 <__aeabi_dsub+0x27c>
 8001ae6:	1b94      	subs	r4, r2, r6
 8001ae8:	46a4      	mov	ip, r4
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x1cc>
 8001aee:	e115      	b.n	8001d1c <__aeabi_dsub+0x3f8>
 8001af0:	464d      	mov	r5, r9
 8001af2:	431d      	orrs	r5, r3
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x1d4>
 8001af6:	e1c3      	b.n	8001e80 <__aeabi_dsub+0x55c>
 8001af8:	1e65      	subs	r5, r4, #1
 8001afa:	2c01      	cmp	r4, #1
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x1dc>
 8001afe:	e20c      	b.n	8001f1a <__aeabi_dsub+0x5f6>
 8001b00:	4e55      	ldr	r6, [pc, #340]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b02:	42b4      	cmp	r4, r6
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x1e4>
 8001b06:	e1f8      	b.n	8001efa <__aeabi_dsub+0x5d6>
 8001b08:	46ac      	mov	ip, r5
 8001b0a:	e10e      	b.n	8001d2a <__aeabi_dsub+0x406>
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	4302      	orrs	r2, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1f0>
 8001b12:	e136      	b.n	8001d82 <__aeabi_dsub+0x45e>
 8001b14:	0022      	movs	r2, r4
 8001b16:	3a01      	subs	r2, #1
 8001b18:	2c01      	cmp	r4, #1
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x1fa>
 8001b1c:	e1c6      	b.n	8001eac <__aeabi_dsub+0x588>
 8001b1e:	4c4e      	ldr	r4, [pc, #312]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b20:	45a4      	cmp	ip, r4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x202>
 8001b24:	e0f4      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001b26:	4694      	mov	ip, r2
 8001b28:	e731      	b.n	800198e <__aeabi_dsub+0x6a>
 8001b2a:	2401      	movs	r4, #1
 8001b2c:	4067      	eors	r7, r4
 8001b2e:	46bb      	mov	fp, r7
 8001b30:	42bd      	cmp	r5, r7
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x212>
 8001b34:	e71c      	b.n	8001970 <__aeabi_dsub+0x4c>
 8001b36:	4c4a      	ldr	r4, [pc, #296]	; (8001c60 <__aeabi_dsub+0x33c>)
 8001b38:	46a4      	mov	ip, r4
 8001b3a:	44b4      	add	ip, r6
 8001b3c:	4664      	mov	r4, ip
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x220>
 8001b42:	e0cf      	b.n	8001ce4 <__aeabi_dsub+0x3c0>
 8001b44:	1b94      	subs	r4, r2, r6
 8001b46:	46a4      	mov	ip, r4
 8001b48:	2e00      	cmp	r6, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x22a>
 8001b4c:	e15c      	b.n	8001e08 <__aeabi_dsub+0x4e4>
 8001b4e:	4e42      	ldr	r6, [pc, #264]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b50:	42b2      	cmp	r2, r6
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x232>
 8001b54:	e1ec      	b.n	8001f30 <__aeabi_dsub+0x60c>
 8001b56:	2680      	movs	r6, #128	; 0x80
 8001b58:	0436      	lsls	r6, r6, #16
 8001b5a:	4333      	orrs	r3, r6
 8001b5c:	4664      	mov	r4, ip
 8001b5e:	2c38      	cmp	r4, #56	; 0x38
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dsub+0x240>
 8001b62:	e1b3      	b.n	8001ecc <__aeabi_dsub+0x5a8>
 8001b64:	2c1f      	cmp	r4, #31
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0x246>
 8001b68:	e238      	b.n	8001fdc <__aeabi_dsub+0x6b8>
 8001b6a:	2620      	movs	r6, #32
 8001b6c:	1b36      	subs	r6, r6, r4
 8001b6e:	001c      	movs	r4, r3
 8001b70:	40b4      	lsls	r4, r6
 8001b72:	464f      	mov	r7, r9
 8001b74:	46a0      	mov	r8, r4
 8001b76:	4664      	mov	r4, ip
 8001b78:	40e7      	lsrs	r7, r4
 8001b7a:	4644      	mov	r4, r8
 8001b7c:	433c      	orrs	r4, r7
 8001b7e:	464f      	mov	r7, r9
 8001b80:	40b7      	lsls	r7, r6
 8001b82:	003e      	movs	r6, r7
 8001b84:	1e77      	subs	r7, r6, #1
 8001b86:	41be      	sbcs	r6, r7
 8001b88:	4334      	orrs	r4, r6
 8001b8a:	4666      	mov	r6, ip
 8001b8c:	40f3      	lsrs	r3, r6
 8001b8e:	18c9      	adds	r1, r1, r3
 8001b90:	1824      	adds	r4, r4, r0
 8001b92:	4284      	cmp	r4, r0
 8001b94:	419b      	sbcs	r3, r3
 8001b96:	425b      	negs	r3, r3
 8001b98:	4698      	mov	r8, r3
 8001b9a:	0016      	movs	r6, r2
 8001b9c:	4488      	add	r8, r1
 8001b9e:	e04e      	b.n	8001c3e <__aeabi_dsub+0x31a>
 8001ba0:	4a30      	ldr	r2, [pc, #192]	; (8001c64 <__aeabi_dsub+0x340>)
 8001ba2:	1c74      	adds	r4, r6, #1
 8001ba4:	4214      	tst	r4, r2
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x286>
 8001ba8:	e0d6      	b.n	8001d58 <__aeabi_dsub+0x434>
 8001baa:	464a      	mov	r2, r9
 8001bac:	431a      	orrs	r2, r3
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	d000      	beq.n	8001bb4 <__aeabi_dsub+0x290>
 8001bb2:	e15b      	b.n	8001e6c <__aeabi_dsub+0x548>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x296>
 8001bb8:	e1a5      	b.n	8001f06 <__aeabi_dsub+0x5e2>
 8001bba:	000a      	movs	r2, r1
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x29e>
 8001bc0:	e1bb      	b.n	8001f3a <__aeabi_dsub+0x616>
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	0759      	lsls	r1, r3, #29
 8001bc6:	08d2      	lsrs	r2, r2, #3
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	e027      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001bce:	000a      	movs	r2, r1
 8001bd0:	4302      	orrs	r2, r0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x2b2>
 8001bd4:	e174      	b.n	8001ec0 <__aeabi_dsub+0x59c>
 8001bd6:	0022      	movs	r2, r4
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	2c01      	cmp	r4, #1
 8001bdc:	d005      	beq.n	8001bea <__aeabi_dsub+0x2c6>
 8001bde:	4c1e      	ldr	r4, [pc, #120]	; (8001c58 <__aeabi_dsub+0x334>)
 8001be0:	45a4      	cmp	ip, r4
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x2c2>
 8001be4:	e094      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001be6:	4694      	mov	ip, r2
 8001be8:	e759      	b.n	8001a9e <__aeabi_dsub+0x17a>
 8001bea:	4448      	add	r0, r9
 8001bec:	4548      	cmp	r0, r9
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	185b      	adds	r3, r3, r1
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	4252      	negs	r2, r2
 8001bf8:	4490      	add	r8, r2
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	2602      	movs	r6, #2
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	d500      	bpl.n	8001c04 <__aeabi_dsub+0x2e0>
 8001c02:	e0c4      	b.n	8001d8e <__aeabi_dsub+0x46a>
 8001c04:	3e01      	subs	r6, #1
 8001c06:	0763      	lsls	r3, r4, #29
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x2e8>
 8001c0a:	e711      	b.n	8001a30 <__aeabi_dsub+0x10c>
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	46b4      	mov	ip, r6
 8001c10:	0759      	lsls	r1, r3, #29
 8001c12:	08e2      	lsrs	r2, r4, #3
 8001c14:	430a      	orrs	r2, r1
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	490f      	ldr	r1, [pc, #60]	; (8001c58 <__aeabi_dsub+0x334>)
 8001c1a:	458c      	cmp	ip, r1
 8001c1c:	d040      	beq.n	8001ca0 <__aeabi_dsub+0x37c>
 8001c1e:	4661      	mov	r1, ip
 8001c20:	031b      	lsls	r3, r3, #12
 8001c22:	0549      	lsls	r1, r1, #21
 8001c24:	0b1b      	lsrs	r3, r3, #12
 8001c26:	0d49      	lsrs	r1, r1, #21
 8001c28:	e720      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001c2a:	4301      	orrs	r1, r0
 8001c2c:	000c      	movs	r4, r1
 8001c2e:	1e61      	subs	r1, r4, #1
 8001c30:	418c      	sbcs	r4, r1
 8001c32:	444c      	add	r4, r9
 8001c34:	454c      	cmp	r4, r9
 8001c36:	4192      	sbcs	r2, r2
 8001c38:	4252      	negs	r2, r2
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4498      	add	r8, r3
 8001c3e:	4643      	mov	r3, r8
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	d5e0      	bpl.n	8001c06 <__aeabi_dsub+0x2e2>
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__aeabi_dsub+0x334>)
 8001c46:	3601      	adds	r6, #1
 8001c48:	429e      	cmp	r6, r3
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x32a>
 8001c4c:	e09f      	b.n	8001d8e <__aeabi_dsub+0x46a>
 8001c4e:	0031      	movs	r1, r6
 8001c50:	2300      	movs	r3, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	e70a      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	ff7fffff 	.word	0xff7fffff
 8001c60:	fffff801 	.word	0xfffff801
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x34a>
 8001c6c:	e160      	b.n	8001f30 <__aeabi_dsub+0x60c>
 8001c6e:	000a      	movs	r2, r1
 8001c70:	4302      	orrs	r2, r0
 8001c72:	d04d      	beq.n	8001d10 <__aeabi_dsub+0x3ec>
 8001c74:	464a      	mov	r2, r9
 8001c76:	075c      	lsls	r4, r3, #29
 8001c78:	08d2      	lsrs	r2, r2, #3
 8001c7a:	4322      	orrs	r2, r4
 8001c7c:	2480      	movs	r4, #128	; 0x80
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	0324      	lsls	r4, r4, #12
 8001c82:	4223      	tst	r3, r4
 8001c84:	d007      	beq.n	8001c96 <__aeabi_dsub+0x372>
 8001c86:	08ce      	lsrs	r6, r1, #3
 8001c88:	4226      	tst	r6, r4
 8001c8a:	d104      	bne.n	8001c96 <__aeabi_dsub+0x372>
 8001c8c:	465d      	mov	r5, fp
 8001c8e:	0033      	movs	r3, r6
 8001c90:	08c2      	lsrs	r2, r0, #3
 8001c92:	0749      	lsls	r1, r1, #29
 8001c94:	430a      	orrs	r2, r1
 8001c96:	0f51      	lsrs	r1, r2, #29
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	08d2      	lsrs	r2, r2, #3
 8001c9c:	0749      	lsls	r1, r1, #29
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x384>
 8001ca6:	e1c8      	b.n	800203a <__aeabi_dsub+0x716>
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0309      	lsls	r1, r1, #12
 8001cac:	430b      	orrs	r3, r1
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	49d5      	ldr	r1, [pc, #852]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001cb2:	0b1b      	lsrs	r3, r3, #12
 8001cb4:	e6da      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001cb6:	49d5      	ldr	r1, [pc, #852]	; (800200c <__aeabi_dsub+0x6e8>)
 8001cb8:	1ab6      	subs	r6, r6, r2
 8001cba:	400b      	ands	r3, r1
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	e6b5      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	f000 fb21 	bl	8002308 <__clzsi2>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	3218      	adds	r2, #24
 8001cca:	2a1f      	cmp	r2, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_dsub+0x3ac>
 8001cce:	e68f      	b.n	80019f0 <__aeabi_dsub+0xcc>
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	3808      	subs	r0, #8
 8001cd4:	4083      	lsls	r3, r0
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	e692      	b.n	8001a00 <__aeabi_dsub+0xdc>
 8001cda:	4308      	orrs	r0, r1
 8001cdc:	0002      	movs	r2, r0
 8001cde:	1e50      	subs	r0, r2, #1
 8001ce0:	4182      	sbcs	r2, r0
 8001ce2:	e66d      	b.n	80019c0 <__aeabi_dsub+0x9c>
 8001ce4:	4cca      	ldr	r4, [pc, #808]	; (8002010 <__aeabi_dsub+0x6ec>)
 8001ce6:	1c72      	adds	r2, r6, #1
 8001ce8:	4222      	tst	r2, r4
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x3ca>
 8001cec:	e0ad      	b.n	8001e4a <__aeabi_dsub+0x526>
 8001cee:	464a      	mov	r2, r9
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	2e00      	cmp	r6, #0
 8001cf4:	d1b8      	bne.n	8001c68 <__aeabi_dsub+0x344>
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x3d8>
 8001cfa:	e158      	b.n	8001fae <__aeabi_dsub+0x68a>
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	4302      	orrs	r2, r0
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dsub+0x3e0>
 8001d02:	e159      	b.n	8001fb8 <__aeabi_dsub+0x694>
 8001d04:	464a      	mov	r2, r9
 8001d06:	0759      	lsls	r1, r3, #29
 8001d08:	08d2      	lsrs	r2, r2, #3
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	e786      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001d10:	464a      	mov	r2, r9
 8001d12:	0759      	lsls	r1, r3, #29
 8001d14:	08d2      	lsrs	r2, r2, #3
 8001d16:	430a      	orrs	r2, r1
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	e7c1      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001d1c:	4dba      	ldr	r5, [pc, #744]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001d1e:	42aa      	cmp	r2, r5
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x400>
 8001d22:	e11e      	b.n	8001f62 <__aeabi_dsub+0x63e>
 8001d24:	2580      	movs	r5, #128	; 0x80
 8001d26:	042d      	lsls	r5, r5, #16
 8001d28:	432b      	orrs	r3, r5
 8001d2a:	4664      	mov	r4, ip
 8001d2c:	2c38      	cmp	r4, #56	; 0x38
 8001d2e:	dc5d      	bgt.n	8001dec <__aeabi_dsub+0x4c8>
 8001d30:	2c1f      	cmp	r4, #31
 8001d32:	dd00      	ble.n	8001d36 <__aeabi_dsub+0x412>
 8001d34:	e0d0      	b.n	8001ed8 <__aeabi_dsub+0x5b4>
 8001d36:	2520      	movs	r5, #32
 8001d38:	4667      	mov	r7, ip
 8001d3a:	1b2d      	subs	r5, r5, r4
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	001c      	movs	r4, r3
 8001d40:	40fe      	lsrs	r6, r7
 8001d42:	40ac      	lsls	r4, r5
 8001d44:	4334      	orrs	r4, r6
 8001d46:	464e      	mov	r6, r9
 8001d48:	40ae      	lsls	r6, r5
 8001d4a:	0035      	movs	r5, r6
 8001d4c:	40fb      	lsrs	r3, r7
 8001d4e:	1e6e      	subs	r6, r5, #1
 8001d50:	41b5      	sbcs	r5, r6
 8001d52:	1ac9      	subs	r1, r1, r3
 8001d54:	432c      	orrs	r4, r5
 8001d56:	e04e      	b.n	8001df6 <__aeabi_dsub+0x4d2>
 8001d58:	464a      	mov	r2, r9
 8001d5a:	1a14      	subs	r4, r2, r0
 8001d5c:	45a1      	cmp	r9, r4
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4252      	negs	r2, r2
 8001d62:	4690      	mov	r8, r2
 8001d64:	1a5f      	subs	r7, r3, r1
 8001d66:	003a      	movs	r2, r7
 8001d68:	4647      	mov	r7, r8
 8001d6a:	1bd2      	subs	r2, r2, r7
 8001d6c:	4690      	mov	r8, r2
 8001d6e:	0212      	lsls	r2, r2, #8
 8001d70:	d500      	bpl.n	8001d74 <__aeabi_dsub+0x450>
 8001d72:	e08b      	b.n	8001e8c <__aeabi_dsub+0x568>
 8001d74:	4642      	mov	r2, r8
 8001d76:	4322      	orrs	r2, r4
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x458>
 8001d7a:	e630      	b.n	80019de <__aeabi_dsub+0xba>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2500      	movs	r5, #0
 8001d80:	e74d      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001d82:	464a      	mov	r2, r9
 8001d84:	0759      	lsls	r1, r3, #29
 8001d86:	08d2      	lsrs	r2, r2, #3
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	e744      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001d8e:	4642      	mov	r2, r8
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <__aeabi_dsub+0x6e8>)
 8001d92:	0861      	lsrs	r1, r4, #1
 8001d94:	401a      	ands	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4014      	ands	r4, r2
 8001d9c:	430c      	orrs	r4, r1
 8001d9e:	07da      	lsls	r2, r3, #31
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	4698      	mov	r8, r3
 8001da4:	4314      	orrs	r4, r2
 8001da6:	e641      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001da8:	001a      	movs	r2, r3
 8001daa:	3e1f      	subs	r6, #31
 8001dac:	40f2      	lsrs	r2, r6
 8001dae:	0016      	movs	r6, r2
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x498>
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	1a51      	subs	r1, r2, r1
 8001db8:	408b      	lsls	r3, r1
 8001dba:	431c      	orrs	r4, r3
 8001dbc:	1e62      	subs	r2, r4, #1
 8001dbe:	4194      	sbcs	r4, r2
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4334      	orrs	r4, r6
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	e71d      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001dca:	000c      	movs	r4, r1
 8001dcc:	3a20      	subs	r2, #32
 8001dce:	40d4      	lsrs	r4, r2
 8001dd0:	0022      	movs	r2, r4
 8001dd2:	4664      	mov	r4, ip
 8001dd4:	2c20      	cmp	r4, #32
 8001dd6:	d004      	beq.n	8001de2 <__aeabi_dsub+0x4be>
 8001dd8:	2740      	movs	r7, #64	; 0x40
 8001dda:	1b3f      	subs	r7, r7, r4
 8001ddc:	40b9      	lsls	r1, r7
 8001dde:	4308      	orrs	r0, r1
 8001de0:	4680      	mov	r8, r0
 8001de2:	4644      	mov	r4, r8
 8001de4:	1e61      	subs	r1, r4, #1
 8001de6:	418c      	sbcs	r4, r1
 8001de8:	4322      	orrs	r2, r4
 8001dea:	e5e9      	b.n	80019c0 <__aeabi_dsub+0x9c>
 8001dec:	464c      	mov	r4, r9
 8001dee:	4323      	orrs	r3, r4
 8001df0:	001c      	movs	r4, r3
 8001df2:	1e63      	subs	r3, r4, #1
 8001df4:	419c      	sbcs	r4, r3
 8001df6:	1b04      	subs	r4, r0, r4
 8001df8:	42a0      	cmp	r0, r4
 8001dfa:	419b      	sbcs	r3, r3
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	4698      	mov	r8, r3
 8001e02:	465d      	mov	r5, fp
 8001e04:	0016      	movs	r6, r2
 8001e06:	e5e2      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001e08:	464e      	mov	r6, r9
 8001e0a:	431e      	orrs	r6, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x4ec>
 8001e0e:	e0ae      	b.n	8001f6e <__aeabi_dsub+0x64a>
 8001e10:	1e66      	subs	r6, r4, #1
 8001e12:	2c01      	cmp	r4, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x4f4>
 8001e16:	e0fd      	b.n	8002014 <__aeabi_dsub+0x6f0>
 8001e18:	4f7b      	ldr	r7, [pc, #492]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001e1a:	42bc      	cmp	r4, r7
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x4fc>
 8001e1e:	e107      	b.n	8002030 <__aeabi_dsub+0x70c>
 8001e20:	46b4      	mov	ip, r6
 8001e22:	e69b      	b.n	8001b5c <__aeabi_dsub+0x238>
 8001e24:	4664      	mov	r4, ip
 8001e26:	2220      	movs	r2, #32
 8001e28:	1b12      	subs	r2, r2, r4
 8001e2a:	000c      	movs	r4, r1
 8001e2c:	4094      	lsls	r4, r2
 8001e2e:	0007      	movs	r7, r0
 8001e30:	4090      	lsls	r0, r2
 8001e32:	46a0      	mov	r8, r4
 8001e34:	4664      	mov	r4, ip
 8001e36:	1e42      	subs	r2, r0, #1
 8001e38:	4190      	sbcs	r0, r2
 8001e3a:	4662      	mov	r2, ip
 8001e3c:	40e7      	lsrs	r7, r4
 8001e3e:	4644      	mov	r4, r8
 8001e40:	40d1      	lsrs	r1, r2
 8001e42:	433c      	orrs	r4, r7
 8001e44:	4304      	orrs	r4, r0
 8001e46:	185b      	adds	r3, r3, r1
 8001e48:	e6f3      	b.n	8001c32 <__aeabi_dsub+0x30e>
 8001e4a:	4c6f      	ldr	r4, [pc, #444]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001e4c:	42a2      	cmp	r2, r4
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x52e>
 8001e50:	e0d5      	b.n	8001ffe <__aeabi_dsub+0x6da>
 8001e52:	4448      	add	r0, r9
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	4548      	cmp	r0, r9
 8001e58:	4189      	sbcs	r1, r1
 8001e5a:	4249      	negs	r1, r1
 8001e5c:	185b      	adds	r3, r3, r1
 8001e5e:	07dc      	lsls	r4, r3, #31
 8001e60:	0840      	lsrs	r0, r0, #1
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	4698      	mov	r8, r3
 8001e66:	0016      	movs	r6, r2
 8001e68:	4304      	orrs	r4, r0
 8001e6a:	e6cc      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x54e>
 8001e70:	e082      	b.n	8001f78 <__aeabi_dsub+0x654>
 8001e72:	000a      	movs	r2, r1
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d140      	bne.n	8001efa <__aeabi_dsub+0x5d6>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	e713      	b.n	8001ca8 <__aeabi_dsub+0x384>
 8001e80:	074b      	lsls	r3, r1, #29
 8001e82:	08c2      	lsrs	r2, r0, #3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	465d      	mov	r5, fp
 8001e88:	08cb      	lsrs	r3, r1, #3
 8001e8a:	e6c5      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	1a84      	subs	r4, r0, r2
 8001e90:	42a0      	cmp	r0, r4
 8001e92:	4192      	sbcs	r2, r2
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	4252      	negs	r2, r2
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	465d      	mov	r5, fp
 8001e9e:	e59e      	b.n	80019de <__aeabi_dsub+0xba>
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	0759      	lsls	r1, r3, #29
 8001ea4:	08d2      	lsrs	r2, r2, #3
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	e6f9      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001eac:	464a      	mov	r2, r9
 8001eae:	1a14      	subs	r4, r2, r0
 8001eb0:	45a1      	cmp	r9, r4
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	1a5b      	subs	r3, r3, r1
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	4698      	mov	r8, r3
 8001ebc:	2601      	movs	r6, #1
 8001ebe:	e586      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001ec0:	464a      	mov	r2, r9
 8001ec2:	0759      	lsls	r1, r3, #29
 8001ec4:	08d2      	lsrs	r2, r2, #3
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	e6a5      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001ecc:	464c      	mov	r4, r9
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	001c      	movs	r4, r3
 8001ed2:	1e63      	subs	r3, r4, #1
 8001ed4:	419c      	sbcs	r4, r3
 8001ed6:	e65b      	b.n	8001b90 <__aeabi_dsub+0x26c>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	001e      	movs	r6, r3
 8001edc:	3d20      	subs	r5, #32
 8001ede:	40ee      	lsrs	r6, r5
 8001ee0:	2c20      	cmp	r4, #32
 8001ee2:	d005      	beq.n	8001ef0 <__aeabi_dsub+0x5cc>
 8001ee4:	2540      	movs	r5, #64	; 0x40
 8001ee6:	1b2d      	subs	r5, r5, r4
 8001ee8:	40ab      	lsls	r3, r5
 8001eea:	464c      	mov	r4, r9
 8001eec:	431c      	orrs	r4, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	4654      	mov	r4, sl
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	4334      	orrs	r4, r6
 8001ef8:	e77d      	b.n	8001df6 <__aeabi_dsub+0x4d2>
 8001efa:	074b      	lsls	r3, r1, #29
 8001efc:	08c2      	lsrs	r2, r0, #3
 8001efe:	431a      	orrs	r2, r3
 8001f00:	465d      	mov	r5, fp
 8001f02:	08cb      	lsrs	r3, r1, #3
 8001f04:	e6cc      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f06:	000a      	movs	r2, r1
 8001f08:	4302      	orrs	r2, r0
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x5ea>
 8001f0c:	e736      	b.n	8001d7c <__aeabi_dsub+0x458>
 8001f0e:	074b      	lsls	r3, r1, #29
 8001f10:	08c2      	lsrs	r2, r0, #3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	465d      	mov	r5, fp
 8001f16:	08cb      	lsrs	r3, r1, #3
 8001f18:	e681      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001f1a:	464a      	mov	r2, r9
 8001f1c:	1a84      	subs	r4, r0, r2
 8001f1e:	42a0      	cmp	r0, r4
 8001f20:	4192      	sbcs	r2, r2
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	4252      	negs	r2, r2
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	4698      	mov	r8, r3
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	2601      	movs	r6, #1
 8001f2e:	e54e      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001f30:	074b      	lsls	r3, r1, #29
 8001f32:	08c2      	lsrs	r2, r0, #3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	08cb      	lsrs	r3, r1, #3
 8001f38:	e6b2      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f3a:	464a      	mov	r2, r9
 8001f3c:	1a14      	subs	r4, r2, r0
 8001f3e:	45a1      	cmp	r9, r4
 8001f40:	4192      	sbcs	r2, r2
 8001f42:	1a5f      	subs	r7, r3, r1
 8001f44:	4252      	negs	r2, r2
 8001f46:	1aba      	subs	r2, r7, r2
 8001f48:	4690      	mov	r8, r2
 8001f4a:	0212      	lsls	r2, r2, #8
 8001f4c:	d56b      	bpl.n	8002026 <__aeabi_dsub+0x702>
 8001f4e:	464a      	mov	r2, r9
 8001f50:	1a84      	subs	r4, r0, r2
 8001f52:	42a0      	cmp	r0, r4
 8001f54:	4192      	sbcs	r2, r2
 8001f56:	1acb      	subs	r3, r1, r3
 8001f58:	4252      	negs	r2, r2
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	465d      	mov	r5, fp
 8001f60:	e564      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001f62:	074b      	lsls	r3, r1, #29
 8001f64:	08c2      	lsrs	r2, r0, #3
 8001f66:	431a      	orrs	r2, r3
 8001f68:	465d      	mov	r5, fp
 8001f6a:	08cb      	lsrs	r3, r1, #3
 8001f6c:	e698      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f6e:	074b      	lsls	r3, r1, #29
 8001f70:	08c2      	lsrs	r2, r0, #3
 8001f72:	431a      	orrs	r2, r3
 8001f74:	08cb      	lsrs	r3, r1, #3
 8001f76:	e64f      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001f78:	000a      	movs	r2, r1
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	d090      	beq.n	8001ea0 <__aeabi_dsub+0x57c>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	075c      	lsls	r4, r3, #29
 8001f82:	08d2      	lsrs	r2, r2, #3
 8001f84:	4314      	orrs	r4, r2
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	0312      	lsls	r2, r2, #12
 8001f8c:	4213      	tst	r3, r2
 8001f8e:	d008      	beq.n	8001fa2 <__aeabi_dsub+0x67e>
 8001f90:	08ce      	lsrs	r6, r1, #3
 8001f92:	4216      	tst	r6, r2
 8001f94:	d105      	bne.n	8001fa2 <__aeabi_dsub+0x67e>
 8001f96:	08c0      	lsrs	r0, r0, #3
 8001f98:	0749      	lsls	r1, r1, #29
 8001f9a:	4308      	orrs	r0, r1
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	465d      	mov	r5, fp
 8001fa0:	0033      	movs	r3, r6
 8001fa2:	0f61      	lsrs	r1, r4, #29
 8001fa4:	00e2      	lsls	r2, r4, #3
 8001fa6:	0749      	lsls	r1, r1, #29
 8001fa8:	08d2      	lsrs	r2, r2, #3
 8001faa:	430a      	orrs	r2, r1
 8001fac:	e678      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001fae:	074b      	lsls	r3, r1, #29
 8001fb0:	08c2      	lsrs	r2, r0, #3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	08cb      	lsrs	r3, r1, #3
 8001fb6:	e632      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001fb8:	4448      	add	r0, r9
 8001fba:	185b      	adds	r3, r3, r1
 8001fbc:	4548      	cmp	r0, r9
 8001fbe:	4192      	sbcs	r2, r2
 8001fc0:	4698      	mov	r8, r3
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	4490      	add	r8, r2
 8001fc6:	4643      	mov	r3, r8
 8001fc8:	0004      	movs	r4, r0
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	d400      	bmi.n	8001fd0 <__aeabi_dsub+0x6ac>
 8001fce:	e61a      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001fd0:	4642      	mov	r2, r8
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <__aeabi_dsub+0x6e8>)
 8001fd4:	2601      	movs	r6, #1
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4690      	mov	r8, r2
 8001fda:	e614      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001fdc:	4666      	mov	r6, ip
 8001fde:	001f      	movs	r7, r3
 8001fe0:	3e20      	subs	r6, #32
 8001fe2:	40f7      	lsrs	r7, r6
 8001fe4:	2c20      	cmp	r4, #32
 8001fe6:	d005      	beq.n	8001ff4 <__aeabi_dsub+0x6d0>
 8001fe8:	2640      	movs	r6, #64	; 0x40
 8001fea:	1b36      	subs	r6, r6, r4
 8001fec:	40b3      	lsls	r3, r6
 8001fee:	464c      	mov	r4, r9
 8001ff0:	431c      	orrs	r4, r3
 8001ff2:	46a2      	mov	sl, r4
 8001ff4:	4654      	mov	r4, sl
 8001ff6:	1e63      	subs	r3, r4, #1
 8001ff8:	419c      	sbcs	r4, r3
 8001ffa:	433c      	orrs	r4, r7
 8001ffc:	e5c8      	b.n	8001b90 <__aeabi_dsub+0x26c>
 8001ffe:	0011      	movs	r1, r2
 8002000:	2300      	movs	r3, #0
 8002002:	2200      	movs	r2, #0
 8002004:	e532      	b.n	8001a6c <__aeabi_dsub+0x148>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	ff7fffff 	.word	0xff7fffff
 8002010:	000007fe 	.word	0x000007fe
 8002014:	464a      	mov	r2, r9
 8002016:	1814      	adds	r4, r2, r0
 8002018:	4284      	cmp	r4, r0
 800201a:	4192      	sbcs	r2, r2
 800201c:	185b      	adds	r3, r3, r1
 800201e:	4698      	mov	r8, r3
 8002020:	4252      	negs	r2, r2
 8002022:	4490      	add	r8, r2
 8002024:	e5e9      	b.n	8001bfa <__aeabi_dsub+0x2d6>
 8002026:	4642      	mov	r2, r8
 8002028:	4322      	orrs	r2, r4
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x70a>
 800202c:	e6a6      	b.n	8001d7c <__aeabi_dsub+0x458>
 800202e:	e5ea      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8002030:	074b      	lsls	r3, r1, #29
 8002032:	08c2      	lsrs	r2, r0, #3
 8002034:	431a      	orrs	r2, r3
 8002036:	08cb      	lsrs	r3, r1, #3
 8002038:	e632      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 800203a:	2200      	movs	r2, #0
 800203c:	4901      	ldr	r1, [pc, #4]	; (8002044 <__aeabi_dsub+0x720>)
 800203e:	0013      	movs	r3, r2
 8002040:	e514      	b.n	8001a6c <__aeabi_dsub+0x148>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	000007ff 	.word	0x000007ff

08002048 <__aeabi_i2d>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	2800      	cmp	r0, #0
 800204c:	d016      	beq.n	800207c <__aeabi_i2d+0x34>
 800204e:	17c3      	asrs	r3, r0, #31
 8002050:	18c5      	adds	r5, r0, r3
 8002052:	405d      	eors	r5, r3
 8002054:	0fc4      	lsrs	r4, r0, #31
 8002056:	0028      	movs	r0, r5
 8002058:	f000 f956 	bl	8002308 <__clzsi2>
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <__aeabi_i2d+0x5c>)
 800205e:	1a12      	subs	r2, r2, r0
 8002060:	280a      	cmp	r0, #10
 8002062:	dc16      	bgt.n	8002092 <__aeabi_i2d+0x4a>
 8002064:	0003      	movs	r3, r0
 8002066:	002e      	movs	r6, r5
 8002068:	3315      	adds	r3, #21
 800206a:	409e      	lsls	r6, r3
 800206c:	230b      	movs	r3, #11
 800206e:	1a18      	subs	r0, r3, r0
 8002070:	40c5      	lsrs	r5, r0
 8002072:	0553      	lsls	r3, r2, #21
 8002074:	032d      	lsls	r5, r5, #12
 8002076:	0b2d      	lsrs	r5, r5, #12
 8002078:	0d5b      	lsrs	r3, r3, #21
 800207a:	e003      	b.n	8002084 <__aeabi_i2d+0x3c>
 800207c:	2400      	movs	r4, #0
 800207e:	2300      	movs	r3, #0
 8002080:	2500      	movs	r5, #0
 8002082:	2600      	movs	r6, #0
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	432b      	orrs	r3, r5
 8002088:	07e4      	lsls	r4, r4, #31
 800208a:	4323      	orrs	r3, r4
 800208c:	0030      	movs	r0, r6
 800208e:	0019      	movs	r1, r3
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	380b      	subs	r0, #11
 8002094:	4085      	lsls	r5, r0
 8002096:	0553      	lsls	r3, r2, #21
 8002098:	032d      	lsls	r5, r5, #12
 800209a:	2600      	movs	r6, #0
 800209c:	0b2d      	lsrs	r5, r5, #12
 800209e:	0d5b      	lsrs	r3, r3, #21
 80020a0:	e7f0      	b.n	8002084 <__aeabi_i2d+0x3c>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	0000041e 	.word	0x0000041e

080020a8 <__aeabi_ui2d>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	1e04      	subs	r4, r0, #0
 80020ac:	d010      	beq.n	80020d0 <__aeabi_ui2d+0x28>
 80020ae:	f000 f92b 	bl	8002308 <__clzsi2>
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <__aeabi_ui2d+0x48>)
 80020b4:	1a1b      	subs	r3, r3, r0
 80020b6:	280a      	cmp	r0, #10
 80020b8:	dc11      	bgt.n	80020de <__aeabi_ui2d+0x36>
 80020ba:	220b      	movs	r2, #11
 80020bc:	0021      	movs	r1, r4
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	40d1      	lsrs	r1, r2
 80020c2:	3015      	adds	r0, #21
 80020c4:	030a      	lsls	r2, r1, #12
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	4084      	lsls	r4, r0
 80020ca:	0b12      	lsrs	r2, r2, #12
 80020cc:	0d5b      	lsrs	r3, r3, #21
 80020ce:	e001      	b.n	80020d4 <__aeabi_ui2d+0x2c>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2200      	movs	r2, #0
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	4313      	orrs	r3, r2
 80020d8:	0020      	movs	r0, r4
 80020da:	0019      	movs	r1, r3
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	0022      	movs	r2, r4
 80020e0:	380b      	subs	r0, #11
 80020e2:	4082      	lsls	r2, r0
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	2400      	movs	r4, #0
 80020ea:	0b12      	lsrs	r2, r2, #12
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	e7f1      	b.n	80020d4 <__aeabi_ui2d+0x2c>
 80020f0:	0000041e 	.word	0x0000041e

080020f4 <__aeabi_f2d>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0043      	lsls	r3, r0, #1
 80020f8:	0246      	lsls	r6, r0, #9
 80020fa:	0fc4      	lsrs	r4, r0, #31
 80020fc:	20fe      	movs	r0, #254	; 0xfe
 80020fe:	0e1b      	lsrs	r3, r3, #24
 8002100:	1c59      	adds	r1, r3, #1
 8002102:	0a75      	lsrs	r5, r6, #9
 8002104:	4208      	tst	r0, r1
 8002106:	d00c      	beq.n	8002122 <__aeabi_f2d+0x2e>
 8002108:	22e0      	movs	r2, #224	; 0xe0
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4694      	mov	ip, r2
 800210e:	076d      	lsls	r5, r5, #29
 8002110:	0b36      	lsrs	r6, r6, #12
 8002112:	4463      	add	r3, ip
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	4333      	orrs	r3, r6
 8002118:	07e4      	lsls	r4, r4, #31
 800211a:	4323      	orrs	r3, r4
 800211c:	0028      	movs	r0, r5
 800211e:	0019      	movs	r1, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <__aeabi_f2d+0x5c>
 8002126:	2d00      	cmp	r5, #0
 8002128:	d01b      	beq.n	8002162 <__aeabi_f2d+0x6e>
 800212a:	0028      	movs	r0, r5
 800212c:	f000 f8ec 	bl	8002308 <__clzsi2>
 8002130:	280a      	cmp	r0, #10
 8002132:	dc1c      	bgt.n	800216e <__aeabi_f2d+0x7a>
 8002134:	230b      	movs	r3, #11
 8002136:	002a      	movs	r2, r5
 8002138:	1a1b      	subs	r3, r3, r0
 800213a:	40da      	lsrs	r2, r3
 800213c:	0003      	movs	r3, r0
 800213e:	3315      	adds	r3, #21
 8002140:	409d      	lsls	r5, r3
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <__aeabi_f2d+0x88>)
 8002144:	0312      	lsls	r2, r2, #12
 8002146:	1a1b      	subs	r3, r3, r0
 8002148:	055b      	lsls	r3, r3, #21
 800214a:	0b16      	lsrs	r6, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7e1      	b.n	8002114 <__aeabi_f2d+0x20>
 8002150:	2d00      	cmp	r5, #0
 8002152:	d009      	beq.n	8002168 <__aeabi_f2d+0x74>
 8002154:	0b32      	lsrs	r2, r6, #12
 8002156:	2680      	movs	r6, #128	; 0x80
 8002158:	0336      	lsls	r6, r6, #12
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <__aeabi_f2d+0x8c>)
 800215c:	076d      	lsls	r5, r5, #29
 800215e:	4316      	orrs	r6, r2
 8002160:	e7d8      	b.n	8002114 <__aeabi_f2d+0x20>
 8002162:	2300      	movs	r3, #0
 8002164:	2600      	movs	r6, #0
 8002166:	e7d5      	b.n	8002114 <__aeabi_f2d+0x20>
 8002168:	2600      	movs	r6, #0
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <__aeabi_f2d+0x8c>)
 800216c:	e7d2      	b.n	8002114 <__aeabi_f2d+0x20>
 800216e:	0003      	movs	r3, r0
 8002170:	002a      	movs	r2, r5
 8002172:	3b0b      	subs	r3, #11
 8002174:	409a      	lsls	r2, r3
 8002176:	2500      	movs	r5, #0
 8002178:	e7e3      	b.n	8002142 <__aeabi_f2d+0x4e>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	00000389 	.word	0x00000389
 8002180:	000007ff 	.word	0x000007ff

08002184 <__aeabi_d2f>:
 8002184:	0002      	movs	r2, r0
 8002186:	004b      	lsls	r3, r1, #1
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	0308      	lsls	r0, r1, #12
 800218c:	0d5b      	lsrs	r3, r3, #21
 800218e:	4e3d      	ldr	r6, [pc, #244]	; (8002284 <__aeabi_d2f+0x100>)
 8002190:	0fcc      	lsrs	r4, r1, #31
 8002192:	0a40      	lsrs	r0, r0, #9
 8002194:	0f51      	lsrs	r1, r2, #29
 8002196:	1c5f      	adds	r7, r3, #1
 8002198:	4308      	orrs	r0, r1
 800219a:	00d5      	lsls	r5, r2, #3
 800219c:	4237      	tst	r7, r6
 800219e:	d00a      	beq.n	80021b6 <__aeabi_d2f+0x32>
 80021a0:	4939      	ldr	r1, [pc, #228]	; (8002288 <__aeabi_d2f+0x104>)
 80021a2:	185e      	adds	r6, r3, r1
 80021a4:	2efe      	cmp	r6, #254	; 0xfe
 80021a6:	dd16      	ble.n	80021d6 <__aeabi_d2f+0x52>
 80021a8:	23ff      	movs	r3, #255	; 0xff
 80021aa:	2100      	movs	r1, #0
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	430b      	orrs	r3, r1
 80021b0:	07e0      	lsls	r0, r4, #31
 80021b2:	4318      	orrs	r0, r3
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <__aeabi_d2f+0x44>
 80021ba:	4328      	orrs	r0, r5
 80021bc:	d027      	beq.n	800220e <__aeabi_d2f+0x8a>
 80021be:	2105      	movs	r1, #5
 80021c0:	0189      	lsls	r1, r1, #6
 80021c2:	0a49      	lsrs	r1, r1, #9
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e7f1      	b.n	80021ac <__aeabi_d2f+0x28>
 80021c8:	4305      	orrs	r5, r0
 80021ca:	d0ed      	beq.n	80021a8 <__aeabi_d2f+0x24>
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	03c9      	lsls	r1, r1, #15
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	4301      	orrs	r1, r0
 80021d4:	e7ea      	b.n	80021ac <__aeabi_d2f+0x28>
 80021d6:	2e00      	cmp	r6, #0
 80021d8:	dd1c      	ble.n	8002214 <__aeabi_d2f+0x90>
 80021da:	0192      	lsls	r2, r2, #6
 80021dc:	0011      	movs	r1, r2
 80021de:	1e4a      	subs	r2, r1, #1
 80021e0:	4191      	sbcs	r1, r2
 80021e2:	00c0      	lsls	r0, r0, #3
 80021e4:	0f6d      	lsrs	r5, r5, #29
 80021e6:	4301      	orrs	r1, r0
 80021e8:	4329      	orrs	r1, r5
 80021ea:	074b      	lsls	r3, r1, #29
 80021ec:	d048      	beq.n	8002280 <__aeabi_d2f+0xfc>
 80021ee:	230f      	movs	r3, #15
 80021f0:	400b      	ands	r3, r1
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d000      	beq.n	80021f8 <__aeabi_d2f+0x74>
 80021f6:	3104      	adds	r1, #4
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	04db      	lsls	r3, r3, #19
 80021fc:	400b      	ands	r3, r1
 80021fe:	d03f      	beq.n	8002280 <__aeabi_d2f+0xfc>
 8002200:	1c72      	adds	r2, r6, #1
 8002202:	2efe      	cmp	r6, #254	; 0xfe
 8002204:	d0d0      	beq.n	80021a8 <__aeabi_d2f+0x24>
 8002206:	0189      	lsls	r1, r1, #6
 8002208:	0a49      	lsrs	r1, r1, #9
 800220a:	b2d3      	uxtb	r3, r2
 800220c:	e7ce      	b.n	80021ac <__aeabi_d2f+0x28>
 800220e:	2300      	movs	r3, #0
 8002210:	2100      	movs	r1, #0
 8002212:	e7cb      	b.n	80021ac <__aeabi_d2f+0x28>
 8002214:	0032      	movs	r2, r6
 8002216:	3217      	adds	r2, #23
 8002218:	db22      	blt.n	8002260 <__aeabi_d2f+0xdc>
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	221e      	movs	r2, #30
 800221e:	0409      	lsls	r1, r1, #16
 8002220:	4308      	orrs	r0, r1
 8002222:	1b92      	subs	r2, r2, r6
 8002224:	2a1f      	cmp	r2, #31
 8002226:	dd1d      	ble.n	8002264 <__aeabi_d2f+0xe0>
 8002228:	2102      	movs	r1, #2
 800222a:	4249      	negs	r1, r1
 800222c:	1b8e      	subs	r6, r1, r6
 800222e:	0001      	movs	r1, r0
 8002230:	40f1      	lsrs	r1, r6
 8002232:	000e      	movs	r6, r1
 8002234:	2a20      	cmp	r2, #32
 8002236:	d004      	beq.n	8002242 <__aeabi_d2f+0xbe>
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <__aeabi_d2f+0x108>)
 800223a:	4694      	mov	ip, r2
 800223c:	4463      	add	r3, ip
 800223e:	4098      	lsls	r0, r3
 8002240:	4305      	orrs	r5, r0
 8002242:	0029      	movs	r1, r5
 8002244:	1e4d      	subs	r5, r1, #1
 8002246:	41a9      	sbcs	r1, r5
 8002248:	4331      	orrs	r1, r6
 800224a:	2600      	movs	r6, #0
 800224c:	074b      	lsls	r3, r1, #29
 800224e:	d1ce      	bne.n	80021ee <__aeabi_d2f+0x6a>
 8002250:	2080      	movs	r0, #128	; 0x80
 8002252:	000b      	movs	r3, r1
 8002254:	04c0      	lsls	r0, r0, #19
 8002256:	2201      	movs	r2, #1
 8002258:	4003      	ands	r3, r0
 800225a:	4201      	tst	r1, r0
 800225c:	d1d3      	bne.n	8002206 <__aeabi_d2f+0x82>
 800225e:	e7af      	b.n	80021c0 <__aeabi_d2f+0x3c>
 8002260:	2300      	movs	r3, #0
 8002262:	e7ac      	b.n	80021be <__aeabi_d2f+0x3a>
 8002264:	490a      	ldr	r1, [pc, #40]	; (8002290 <__aeabi_d2f+0x10c>)
 8002266:	468c      	mov	ip, r1
 8002268:	0029      	movs	r1, r5
 800226a:	4463      	add	r3, ip
 800226c:	40d1      	lsrs	r1, r2
 800226e:	409d      	lsls	r5, r3
 8002270:	000a      	movs	r2, r1
 8002272:	0029      	movs	r1, r5
 8002274:	4098      	lsls	r0, r3
 8002276:	1e4d      	subs	r5, r1, #1
 8002278:	41a9      	sbcs	r1, r5
 800227a:	4301      	orrs	r1, r0
 800227c:	4311      	orrs	r1, r2
 800227e:	e7e4      	b.n	800224a <__aeabi_d2f+0xc6>
 8002280:	0033      	movs	r3, r6
 8002282:	e79d      	b.n	80021c0 <__aeabi_d2f+0x3c>
 8002284:	000007fe 	.word	0x000007fe
 8002288:	fffffc80 	.word	0xfffffc80
 800228c:	fffffca2 	.word	0xfffffca2
 8002290:	fffffc82 	.word	0xfffffc82

08002294 <__aeabi_cfrcmple>:
 8002294:	4684      	mov	ip, r0
 8002296:	1c08      	adds	r0, r1, #0
 8002298:	4661      	mov	r1, ip
 800229a:	e7ff      	b.n	800229c <__aeabi_cfcmpeq>

0800229c <__aeabi_cfcmpeq>:
 800229c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800229e:	f000 f8d1 	bl	8002444 <__lesf2>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d401      	bmi.n	80022aa <__aeabi_cfcmpeq+0xe>
 80022a6:	2100      	movs	r1, #0
 80022a8:	42c8      	cmn	r0, r1
 80022aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080022ac <__aeabi_fcmpeq>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	f000 f855 	bl	800235c <__eqsf2>
 80022b2:	4240      	negs	r0, r0
 80022b4:	3001      	adds	r0, #1
 80022b6:	bd10      	pop	{r4, pc}

080022b8 <__aeabi_fcmplt>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	f000 f8c3 	bl	8002444 <__lesf2>
 80022be:	2800      	cmp	r0, #0
 80022c0:	db01      	blt.n	80022c6 <__aeabi_fcmplt+0xe>
 80022c2:	2000      	movs	r0, #0
 80022c4:	bd10      	pop	{r4, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	bd10      	pop	{r4, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)

080022cc <__aeabi_fcmple>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	f000 f8b9 	bl	8002444 <__lesf2>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	dd01      	ble.n	80022da <__aeabi_fcmple+0xe>
 80022d6:	2000      	movs	r0, #0
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	2001      	movs	r0, #1
 80022dc:	bd10      	pop	{r4, pc}
 80022de:	46c0      	nop			; (mov r8, r8)

080022e0 <__aeabi_fcmpgt>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	f000 f863 	bl	80023ac <__gesf2>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	dc01      	bgt.n	80022ee <__aeabi_fcmpgt+0xe>
 80022ea:	2000      	movs	r0, #0
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	2001      	movs	r0, #1
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)

080022f4 <__aeabi_fcmpge>:
 80022f4:	b510      	push	{r4, lr}
 80022f6:	f000 f859 	bl	80023ac <__gesf2>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	da01      	bge.n	8002302 <__aeabi_fcmpge+0xe>
 80022fe:	2000      	movs	r0, #0
 8002300:	bd10      	pop	{r4, pc}
 8002302:	2001      	movs	r0, #1
 8002304:	bd10      	pop	{r4, pc}
 8002306:	46c0      	nop			; (mov r8, r8)

08002308 <__clzsi2>:
 8002308:	211c      	movs	r1, #28
 800230a:	2301      	movs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4298      	cmp	r0, r3
 8002310:	d301      	bcc.n	8002316 <__clzsi2+0xe>
 8002312:	0c00      	lsrs	r0, r0, #16
 8002314:	3910      	subs	r1, #16
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	4298      	cmp	r0, r3
 800231a:	d301      	bcc.n	8002320 <__clzsi2+0x18>
 800231c:	0a00      	lsrs	r0, r0, #8
 800231e:	3908      	subs	r1, #8
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	4298      	cmp	r0, r3
 8002324:	d301      	bcc.n	800232a <__clzsi2+0x22>
 8002326:	0900      	lsrs	r0, r0, #4
 8002328:	3904      	subs	r1, #4
 800232a:	a202      	add	r2, pc, #8	; (adr r2, 8002334 <__clzsi2+0x2c>)
 800232c:	5c10      	ldrb	r0, [r2, r0]
 800232e:	1840      	adds	r0, r0, r1
 8002330:	4770      	bx	lr
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	02020304 	.word	0x02020304
 8002338:	01010101 	.word	0x01010101
	...

08002344 <__clzdi2>:
 8002344:	b510      	push	{r4, lr}
 8002346:	2900      	cmp	r1, #0
 8002348:	d103      	bne.n	8002352 <__clzdi2+0xe>
 800234a:	f7ff ffdd 	bl	8002308 <__clzsi2>
 800234e:	3020      	adds	r0, #32
 8002350:	e002      	b.n	8002358 <__clzdi2+0x14>
 8002352:	1c08      	adds	r0, r1, #0
 8002354:	f7ff ffd8 	bl	8002308 <__clzsi2>
 8002358:	bd10      	pop	{r4, pc}
 800235a:	46c0      	nop			; (mov r8, r8)

0800235c <__eqsf2>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0042      	lsls	r2, r0, #1
 8002360:	024e      	lsls	r6, r1, #9
 8002362:	004c      	lsls	r4, r1, #1
 8002364:	0245      	lsls	r5, r0, #9
 8002366:	0a6d      	lsrs	r5, r5, #9
 8002368:	0e12      	lsrs	r2, r2, #24
 800236a:	0fc3      	lsrs	r3, r0, #31
 800236c:	0a76      	lsrs	r6, r6, #9
 800236e:	0e24      	lsrs	r4, r4, #24
 8002370:	0fc9      	lsrs	r1, r1, #31
 8002372:	2aff      	cmp	r2, #255	; 0xff
 8002374:	d00f      	beq.n	8002396 <__eqsf2+0x3a>
 8002376:	2cff      	cmp	r4, #255	; 0xff
 8002378:	d011      	beq.n	800239e <__eqsf2+0x42>
 800237a:	2001      	movs	r0, #1
 800237c:	42a2      	cmp	r2, r4
 800237e:	d000      	beq.n	8002382 <__eqsf2+0x26>
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	42b5      	cmp	r5, r6
 8002384:	d1fc      	bne.n	8002380 <__eqsf2+0x24>
 8002386:	428b      	cmp	r3, r1
 8002388:	d00d      	beq.n	80023a6 <__eqsf2+0x4a>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d1f8      	bne.n	8002380 <__eqsf2+0x24>
 800238e:	0028      	movs	r0, r5
 8002390:	1e45      	subs	r5, r0, #1
 8002392:	41a8      	sbcs	r0, r5
 8002394:	e7f4      	b.n	8002380 <__eqsf2+0x24>
 8002396:	2001      	movs	r0, #1
 8002398:	2d00      	cmp	r5, #0
 800239a:	d1f1      	bne.n	8002380 <__eqsf2+0x24>
 800239c:	e7eb      	b.n	8002376 <__eqsf2+0x1a>
 800239e:	2001      	movs	r0, #1
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	d1ed      	bne.n	8002380 <__eqsf2+0x24>
 80023a4:	e7e9      	b.n	800237a <__eqsf2+0x1e>
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7ea      	b.n	8002380 <__eqsf2+0x24>
 80023aa:	46c0      	nop			; (mov r8, r8)

080023ac <__gesf2>:
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	0042      	lsls	r2, r0, #1
 80023b0:	0246      	lsls	r6, r0, #9
 80023b2:	024d      	lsls	r5, r1, #9
 80023b4:	004c      	lsls	r4, r1, #1
 80023b6:	0fc3      	lsrs	r3, r0, #31
 80023b8:	0a76      	lsrs	r6, r6, #9
 80023ba:	0e12      	lsrs	r2, r2, #24
 80023bc:	0a6d      	lsrs	r5, r5, #9
 80023be:	0e24      	lsrs	r4, r4, #24
 80023c0:	0fc8      	lsrs	r0, r1, #31
 80023c2:	2aff      	cmp	r2, #255	; 0xff
 80023c4:	d01f      	beq.n	8002406 <__gesf2+0x5a>
 80023c6:	2cff      	cmp	r4, #255	; 0xff
 80023c8:	d010      	beq.n	80023ec <__gesf2+0x40>
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d11f      	bne.n	800240e <__gesf2+0x62>
 80023ce:	4271      	negs	r1, r6
 80023d0:	4171      	adcs	r1, r6
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	d101      	bne.n	80023da <__gesf2+0x2e>
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d01e      	beq.n	8002418 <__gesf2+0x6c>
 80023da:	2900      	cmp	r1, #0
 80023dc:	d10e      	bne.n	80023fc <__gesf2+0x50>
 80023de:	4283      	cmp	r3, r0
 80023e0:	d01e      	beq.n	8002420 <__gesf2+0x74>
 80023e2:	2102      	movs	r1, #2
 80023e4:	1e58      	subs	r0, r3, #1
 80023e6:	4008      	ands	r0, r1
 80023e8:	3801      	subs	r0, #1
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ec:	2d00      	cmp	r5, #0
 80023ee:	d126      	bne.n	800243e <__gesf2+0x92>
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	d1f4      	bne.n	80023de <__gesf2+0x32>
 80023f4:	4271      	negs	r1, r6
 80023f6:	4171      	adcs	r1, r6
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d0f0      	beq.n	80023de <__gesf2+0x32>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1f4      	bne.n	80023ea <__gesf2+0x3e>
 8002400:	2001      	movs	r0, #1
 8002402:	4240      	negs	r0, r0
 8002404:	e7f1      	b.n	80023ea <__gesf2+0x3e>
 8002406:	2e00      	cmp	r6, #0
 8002408:	d119      	bne.n	800243e <__gesf2+0x92>
 800240a:	2cff      	cmp	r4, #255	; 0xff
 800240c:	d0ee      	beq.n	80023ec <__gesf2+0x40>
 800240e:	2c00      	cmp	r4, #0
 8002410:	d1e5      	bne.n	80023de <__gesf2+0x32>
 8002412:	2d00      	cmp	r5, #0
 8002414:	d1e3      	bne.n	80023de <__gesf2+0x32>
 8002416:	e7e4      	b.n	80023e2 <__gesf2+0x36>
 8002418:	2000      	movs	r0, #0
 800241a:	2e00      	cmp	r6, #0
 800241c:	d0e5      	beq.n	80023ea <__gesf2+0x3e>
 800241e:	e7e0      	b.n	80023e2 <__gesf2+0x36>
 8002420:	42a2      	cmp	r2, r4
 8002422:	dc05      	bgt.n	8002430 <__gesf2+0x84>
 8002424:	dbea      	blt.n	80023fc <__gesf2+0x50>
 8002426:	42ae      	cmp	r6, r5
 8002428:	d802      	bhi.n	8002430 <__gesf2+0x84>
 800242a:	d3e7      	bcc.n	80023fc <__gesf2+0x50>
 800242c:	2000      	movs	r0, #0
 800242e:	e7dc      	b.n	80023ea <__gesf2+0x3e>
 8002430:	4241      	negs	r1, r0
 8002432:	4141      	adcs	r1, r0
 8002434:	4248      	negs	r0, r1
 8002436:	2102      	movs	r1, #2
 8002438:	4008      	ands	r0, r1
 800243a:	3801      	subs	r0, #1
 800243c:	e7d5      	b.n	80023ea <__gesf2+0x3e>
 800243e:	2002      	movs	r0, #2
 8002440:	4240      	negs	r0, r0
 8002442:	e7d2      	b.n	80023ea <__gesf2+0x3e>

08002444 <__lesf2>:
 8002444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002446:	0042      	lsls	r2, r0, #1
 8002448:	0246      	lsls	r6, r0, #9
 800244a:	024d      	lsls	r5, r1, #9
 800244c:	004c      	lsls	r4, r1, #1
 800244e:	0fc3      	lsrs	r3, r0, #31
 8002450:	0a76      	lsrs	r6, r6, #9
 8002452:	0e12      	lsrs	r2, r2, #24
 8002454:	0a6d      	lsrs	r5, r5, #9
 8002456:	0e24      	lsrs	r4, r4, #24
 8002458:	0fc8      	lsrs	r0, r1, #31
 800245a:	2aff      	cmp	r2, #255	; 0xff
 800245c:	d00d      	beq.n	800247a <__lesf2+0x36>
 800245e:	2cff      	cmp	r4, #255	; 0xff
 8002460:	d00f      	beq.n	8002482 <__lesf2+0x3e>
 8002462:	2a00      	cmp	r2, #0
 8002464:	d123      	bne.n	80024ae <__lesf2+0x6a>
 8002466:	4271      	negs	r1, r6
 8002468:	4171      	adcs	r1, r6
 800246a:	2c00      	cmp	r4, #0
 800246c:	d10f      	bne.n	800248e <__lesf2+0x4a>
 800246e:	2d00      	cmp	r5, #0
 8002470:	d10d      	bne.n	800248e <__lesf2+0x4a>
 8002472:	2000      	movs	r0, #0
 8002474:	2e00      	cmp	r6, #0
 8002476:	d014      	beq.n	80024a2 <__lesf2+0x5e>
 8002478:	e00d      	b.n	8002496 <__lesf2+0x52>
 800247a:	2e00      	cmp	r6, #0
 800247c:	d110      	bne.n	80024a0 <__lesf2+0x5c>
 800247e:	2cff      	cmp	r4, #255	; 0xff
 8002480:	d115      	bne.n	80024ae <__lesf2+0x6a>
 8002482:	2d00      	cmp	r5, #0
 8002484:	d10c      	bne.n	80024a0 <__lesf2+0x5c>
 8002486:	2a00      	cmp	r2, #0
 8002488:	d103      	bne.n	8002492 <__lesf2+0x4e>
 800248a:	4271      	negs	r1, r6
 800248c:	4171      	adcs	r1, r6
 800248e:	2900      	cmp	r1, #0
 8002490:	d108      	bne.n	80024a4 <__lesf2+0x60>
 8002492:	4283      	cmp	r3, r0
 8002494:	d010      	beq.n	80024b8 <__lesf2+0x74>
 8002496:	2102      	movs	r1, #2
 8002498:	1e58      	subs	r0, r3, #1
 800249a:	4008      	ands	r0, r1
 800249c:	3801      	subs	r0, #1
 800249e:	e000      	b.n	80024a2 <__lesf2+0x5e>
 80024a0:	2002      	movs	r0, #2
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d1fc      	bne.n	80024a2 <__lesf2+0x5e>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e7f9      	b.n	80024a2 <__lesf2+0x5e>
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	d1ef      	bne.n	8002492 <__lesf2+0x4e>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d1ed      	bne.n	8002492 <__lesf2+0x4e>
 80024b6:	e7ee      	b.n	8002496 <__lesf2+0x52>
 80024b8:	42a2      	cmp	r2, r4
 80024ba:	dc05      	bgt.n	80024c8 <__lesf2+0x84>
 80024bc:	dbf2      	blt.n	80024a4 <__lesf2+0x60>
 80024be:	42ae      	cmp	r6, r5
 80024c0:	d802      	bhi.n	80024c8 <__lesf2+0x84>
 80024c2:	d3ef      	bcc.n	80024a4 <__lesf2+0x60>
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7ec      	b.n	80024a2 <__lesf2+0x5e>
 80024c8:	4241      	negs	r1, r0
 80024ca:	4141      	adcs	r1, r0
 80024cc:	4248      	negs	r0, r1
 80024ce:	2102      	movs	r1, #2
 80024d0:	4008      	ands	r0, r1
 80024d2:	3801      	subs	r0, #1
 80024d4:	e7e5      	b.n	80024a2 <__lesf2+0x5e>
 80024d6:	46c0      	nop			; (mov r8, r8)

080024d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_Init+0x3c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Init+0x3c>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	0049      	lsls	r1, r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f2:	2003      	movs	r0, #3
 80024f4:	f000 f810 	bl	8002518 <HAL_InitTick>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d003      	beq.n	8002504 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e001      	b.n	8002508 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f006 f8a8 	bl	8008658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	781b      	ldrb	r3, [r3, #0]
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_InitTick+0x88>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02b      	beq.n	8002588 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_InitTick+0x8c>)
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_InitTick+0x88>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	0019      	movs	r1, r3
 800253a:	23fa      	movs	r3, #250	; 0xfa
 800253c:	0098      	lsls	r0, r3, #2
 800253e:	f7fd fde1 	bl	8000104 <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	0019      	movs	r1, r3
 8002546:	0020      	movs	r0, r4
 8002548:	f7fd fddc 	bl	8000104 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fdcd 	bl	80030ee <HAL_SYSTICK_Config>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d112      	bne.n	800257e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d80a      	bhi.n	8002574 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	2200      	movs	r2, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f000 fd9c 	bl	80030a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_InitTick+0x90>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00d      	b.n	8002590 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002574:	230f      	movs	r3, #15
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e008      	b.n	8002590 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e003      	b.n	8002590 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002590:	230f      	movs	r3, #15
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b005      	add	sp, #20
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	001a      	movs	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	18d2      	adds	r2, r2, r3
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_IncTick+0x20>)
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	20000004 	.word	0x20000004
 80025cc:	20000028 	.word	0x20000028

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	20000028 	.word	0x20000028

080025e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	40010000 	.word	0x40010000
 800260c:	fffff9ff 	.word	0xfffff9ff

08002610 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002620:	401a      	ands	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	fe3fffff 	.word	0xfe3fffff

08002638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	23e0      	movs	r3, #224	; 0xe0
 8002646:	045b      	lsls	r3, r3, #17
 8002648:	4013      	ands	r3, r2
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}

08002652 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	2104      	movs	r1, #4
 8002666:	400a      	ands	r2, r1
 8002668:	2107      	movs	r1, #7
 800266a:	4091      	lsls	r1, r2
 800266c:	000a      	movs	r2, r1
 800266e:	43d2      	mvns	r2, r2
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2104      	movs	r1, #4
 8002676:	400b      	ands	r3, r1
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4099      	lsls	r1, r3
 800267c:	000b      	movs	r3, r1
 800267e:	431a      	orrs	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}

0800268c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	211f      	movs	r1, #31
 80026a0:	400a      	ands	r2, r1
 80026a2:	210f      	movs	r1, #15
 80026a4:	4091      	lsls	r1, r2
 80026a6:	000a      	movs	r2, r1
 80026a8:	43d2      	mvns	r2, r2
 80026aa:	401a      	ands	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	210f      	movs	r1, #15
 80026b2:	4019      	ands	r1, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	201f      	movs	r0, #31
 80026b8:	4003      	ands	r3, r0
 80026ba:	4099      	lsls	r1, r3
 80026bc:	000b      	movs	r3, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}

080026cc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	035b      	lsls	r3, r3, #13
 80026de:	0b5b      	lsrs	r3, r3, #13
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	0352      	lsls	r2, r2, #13
 8002700:	0b52      	lsrs	r2, r2, #13
 8002702:	43d2      	mvns	r2, r2
 8002704:	401a      	ands	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	0212      	lsls	r2, r2, #8
 8002728:	43d2      	mvns	r2, r2
 800272a:	401a      	ands	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	400b      	ands	r3, r1
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002736:	400b      	ands	r3, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	07ffff00 	.word	0x07ffff00

0800274c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a05      	ldr	r2, [pc, #20]	; (8002770 <LL_ADC_EnableInternalRegulator+0x24>)
 800275a:	4013      	ands	r3, r2
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	0552      	lsls	r2, r2, #21
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b002      	add	sp, #8
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	6fffffe8 	.word	0x6fffffe8

08002774 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	401a      	ands	r2, r3
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	055b      	lsls	r3, r3, #21
 800278a:	429a      	cmp	r2, r3
 800278c:	d101      	bne.n	8002792 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002792:	2300      	movs	r3, #0
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}

0800279c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <LL_ADC_IsEnabled+0x18>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <LL_ADC_IsEnabled+0x1a>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}

080027be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e8:	231f      	movs	r3, #31
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1b1      	b.n	8002b6a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f005 ff49 	bl	80086a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2254      	movs	r2, #84	; 0x54
 8002820:	2100      	movs	r1, #0
 8002822:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff ffa3 	bl	8002774 <LL_ADC_IsInternalRegulatorEnabled>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d115      	bne.n	800285e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff ff88 	bl	800274c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800283c:	4bcd      	ldr	r3, [pc, #820]	; (8002b74 <HAL_ADC_Init+0x394>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	49cd      	ldr	r1, [pc, #820]	; (8002b78 <HAL_ADC_Init+0x398>)
 8002842:	0018      	movs	r0, r3
 8002844:	f7fd fc5e 	bl	8000104 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002850:	e002      	b.n	8002858 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3b01      	subs	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ff86 	bl	8002774 <LL_ADC_IsInternalRegulatorEnabled>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d10f      	bne.n	800288c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	2210      	movs	r2, #16
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2201      	movs	r2, #1
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002884:	231f      	movs	r3, #31
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff ff94 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 8002896:	0003      	movs	r3, r0
 8002898:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	2210      	movs	r2, #16
 80028a0:	4013      	ands	r3, r2
 80028a2:	d000      	beq.n	80028a6 <HAL_ADC_Init+0xc6>
 80028a4:	e154      	b.n	8002b50 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d000      	beq.n	80028ae <HAL_ADC_Init+0xce>
 80028ac:	e150      	b.n	8002b50 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	4ab2      	ldr	r2, [pc, #712]	; (8002b7c <HAL_ADC_Init+0x39c>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	2202      	movs	r2, #2
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff ff6a 	bl	800279c <LL_ADC_IsEnabled>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d156      	bne.n	800297a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2218      	movs	r2, #24
 80028d4:	4393      	bics	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0f9b      	lsrs	r3, r3, #30
 80028ea:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	223c      	movs	r2, #60	; 0x3c
 80028fc:	5c9b      	ldrb	r3, [r3, r2]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d111      	bne.n	8002926 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0f9b      	lsrs	r3, r3, #30
 8002908:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800290e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002914:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800291a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	2201      	movs	r2, #1
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a94      	ldr	r2, [pc, #592]	; (8002b80 <HAL_ADC_Init+0x3a0>)
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	430a      	orrs	r2, r1
 800293a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	23c0      	movs	r3, #192	; 0xc0
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	429a      	cmp	r2, r3
 8002946:	d018      	beq.n	800297a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	05db      	lsls	r3, r3, #23
 8002950:	429a      	cmp	r2, r3
 8002952:	d012      	beq.n	800297a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	429a      	cmp	r2, r3
 800295e:	d00c      	beq.n	800297a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002960:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_ADC_Init+0x3a4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a88      	ldr	r2, [pc, #544]	; (8002b88 <HAL_ADC_Init+0x3a8>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	23f0      	movs	r3, #240	; 0xf0
 8002970:	039b      	lsls	r3, r3, #14
 8002972:	401a      	ands	r2, r3
 8002974:	4b83      	ldr	r3, [pc, #524]	; (8002b84 <HAL_ADC_Init+0x3a4>)
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7e1b      	ldrb	r3, [r3, #24]
 800297e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e5b      	ldrb	r3, [r3, #25]
 8002984:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002986:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e9b      	ldrb	r3, [r3, #26]
 800298c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800298e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_ADC_Init+0x1be>
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	e000      	b.n	80029a0 <HAL_ADC_Init+0x1c0>
 800299e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029a6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da04      	bge.n	80029ba <HAL_ADC_Init+0x1da>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	e001      	b.n	80029be <HAL_ADC_Init+0x1de>
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80029be:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	5c5b      	ldrb	r3, [r3, r1]
 80029c6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029c8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	5c9b      	ldrb	r3, [r3, r2]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d115      	bne.n	8002a06 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7e9b      	ldrb	r3, [r3, #26]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	0252      	lsls	r2, r2, #9
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e00b      	b.n	8002a06 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	2220      	movs	r2, #32
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2201      	movs	r2, #1
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a12:	23e0      	movs	r3, #224	; 0xe0
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_ADC_Init+0x3ac>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <HAL_ADC_Init+0x3b0>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f7ff fdf9 	bl	8002652 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	494a      	ldr	r1, [pc, #296]	; (8002b94 <HAL_ADC_Init+0x3b4>)
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	f7ff fdf1 	bl	8002652 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2110      	movs	r1, #16
 8002a84:	4249      	negs	r1, r1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
 8002a8a:	e03a      	b.n	8002b02 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	039b      	lsls	r3, r3, #14
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d134      	bne.n	8002b02 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	e00c      	b.n	8002ab8 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	40da      	lsrs	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b0f      	cmp	r3, #15
 8002ab0:	d006      	beq.n	8002ac0 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b07      	cmp	r3, #7
 8002abc:	d9ef      	bls.n	8002a9e <HAL_ADC_Init+0x2be>
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002ac0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d109      	bne.n	8002adc <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	4249      	negs	r1, r1
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8002ada:	e012      	b.n	8002b02 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	221c      	movs	r2, #28
 8002aec:	4013      	ands	r3, r2
 8002aee:	2210      	movs	r2, #16
 8002af0:	4252      	negs	r2, r2
 8002af2:	409a      	lsls	r2, r3
 8002af4:	0011      	movs	r1, r2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_ADC_Init+0x3b8>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d10b      	bne.n	8002b2a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4393      	bics	r3, r2
 8002b20:	2201      	movs	r2, #1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b28:	e01c      	b.n	8002b64 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	2212      	movs	r2, #18
 8002b30:	4393      	bics	r3, r2
 8002b32:	2210      	movs	r2, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	2201      	movs	r2, #1
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b4e:	e009      	b.n	8002b64 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	2210      	movs	r2, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b5c:	231f      	movs	r3, #31
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b64:	231f      	movs	r3, #31
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b008      	add	sp, #32
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	20000008 	.word	0x20000008
 8002b78:	00030d40 	.word	0x00030d40
 8002b7c:	fffffefd 	.word	0xfffffefd
 8002b80:	1ffffc02 	.word	0x1ffffc02
 8002b84:	40012708 	.word	0x40012708
 8002b88:	ffc3ffff 	.word	0xffc3ffff
 8002b8c:	fffe0219 	.word	0xfffe0219
 8002b90:	dffffc02 	.word	0xdffffc02
 8002b94:	07ffff04 	.word	0x07ffff04
 8002b98:	833fffe7 	.word	0x833fffe7

08002b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba6:	2317      	movs	r3, #23
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2254      	movs	r2, #84	; 0x54
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x24>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e1c0      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x3a6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2254      	movs	r2, #84	; 0x54
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff fdf6 	bl	80027be <LL_ADC_REG_IsConversionOngoing>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d000      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x3c>
 8002bd6:	e1a3      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d100      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x46>
 8002be0:	e143      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d004      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bf2:	4ac1      	ldr	r2, [pc, #772]	; (8002ef8 <HAL_ADC_ConfigChannel+0x35c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d108      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0019      	movs	r1, r3
 8002c02:	0010      	movs	r0, r2
 8002c04:	f7ff fd62 	bl	80026cc <LL_ADC_REG_SetSequencerChAdd>
 8002c08:	e0c9      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	211f      	movs	r1, #31
 8002c14:	400b      	ands	r3, r1
 8002c16:	210f      	movs	r1, #15
 8002c18:	4099      	lsls	r1, r3
 8002c1a:	000b      	movs	r3, r1
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	035b      	lsls	r3, r3, #13
 8002c28:	0b5b      	lsrs	r3, r3, #13
 8002c2a:	d105      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x9c>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	221f      	movs	r2, #31
 8002c34:	4013      	ands	r3, r2
 8002c36:	e098      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d000      	beq.n	8002c44 <HAL_ADC_ConfigChannel+0xa8>
 8002c42:	e091      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x1cc>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d000      	beq.n	8002c50 <HAL_ADC_ConfigChannel+0xb4>
 8002c4e:	e089      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x1c8>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	d000      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0xc0>
 8002c5a:	e081      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x1c4>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2208      	movs	r2, #8
 8002c62:	4013      	ands	r3, r2
 8002c64:	d000      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xcc>
 8002c66:	e079      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x1c0>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d000      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0xd8>
 8002c72:	e071      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x1bc>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d000      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0xe4>
 8002c7e:	e069      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1b8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2240      	movs	r2, #64	; 0x40
 8002c86:	4013      	ands	r3, r2
 8002c88:	d000      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0xf0>
 8002c8a:	e061      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x1b4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	4013      	ands	r3, r2
 8002c94:	d000      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0xfc>
 8002c96:	e059      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x1b0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d151      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x1ac>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d149      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1a8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d141      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x1a4>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d139      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1a0>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	015b      	lsls	r3, r3, #5
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d131      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x19c>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	019b      	lsls	r3, r3, #6
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d129      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x198>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d121      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x194>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d119      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x190>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	4013      	ands	r3, r2
 8002d02:	d111      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x18c>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d109      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x188>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	02db      	lsls	r3, r3, #11
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d001      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x184>
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	e024      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d20:	2300      	movs	r3, #0
 8002d22:	e022      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d24:	2311      	movs	r3, #17
 8002d26:	e020      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	e01e      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	e01c      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d30:	230e      	movs	r3, #14
 8002d32:	e01a      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d34:	230d      	movs	r3, #13
 8002d36:	e018      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d38:	230c      	movs	r3, #12
 8002d3a:	e016      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d3c:	230b      	movs	r3, #11
 8002d3e:	e014      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d40:	230a      	movs	r3, #10
 8002d42:	e012      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d44:	2309      	movs	r3, #9
 8002d46:	e010      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d48:	2308      	movs	r3, #8
 8002d4a:	e00e      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	e00c      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d50:	2306      	movs	r3, #6
 8002d52:	e00a      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d54:	2305      	movs	r3, #5
 8002d56:	e008      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e006      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e004      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e002      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x1ce>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	6852      	ldr	r2, [r2, #4]
 8002d6e:	201f      	movs	r0, #31
 8002d70:	4002      	ands	r2, r0
 8002d72:	4093      	lsls	r3, r2
 8002d74:	000a      	movs	r2, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d808      	bhi.n	8002d9e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	001a      	movs	r2, r3
 8002d9a:	f7ff fc77 	bl	800268c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6819      	ldr	r1, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	001a      	movs	r2, r3
 8002dac:	f7ff fcb2 	bl	8002714 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db00      	blt.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
 8002db8:	e0bc      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dba:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7ff fc3b 	bl	8002638 <LL_ADC_GetCommonPathInternalCh>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4d      	ldr	r2, [pc, #308]	; (8002f00 <HAL_ADC_ConfigChannel+0x364>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d122      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd8:	d11d      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	0412      	lsls	r2, r2, #16
 8002de0:	4313      	orrs	r3, r2
 8002de2:	4a46      	ldr	r2, [pc, #280]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002de4:	0019      	movs	r1, r3
 8002de6:	0010      	movs	r0, r2
 8002de8:	f7ff fc12 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <HAL_ADC_ConfigChannel+0x368>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4945      	ldr	r1, [pc, #276]	; (8002f08 <HAL_ADC_ConfigChannel+0x36c>)
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7fd f986 	bl	8000104 <__udivsi3>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e06:	e002      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e14:	e08e      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a3c      	ldr	r2, [pc, #240]	; (8002f0c <HAL_ADC_ConfigChannel+0x370>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10e      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2a2>
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	045b      	lsls	r3, r3, #17
 8002e26:	4013      	ands	r3, r2
 8002e28:	d109      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	0452      	lsls	r2, r2, #17
 8002e30:	4313      	orrs	r3, r2
 8002e32:	4a32      	ldr	r2, [pc, #200]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f7ff fbea 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002e3c:	e07a      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <HAL_ADC_ConfigChannel+0x374>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d000      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0x2ae>
 8002e48:	e074      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	03db      	lsls	r3, r3, #15
 8002e50:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e52:	d000      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x2ba>
 8002e54:	e06e      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	03d2      	lsls	r2, r2, #15
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002e60:	0019      	movs	r1, r3
 8002e62:	0010      	movs	r0, r2
 8002e64:	f7ff fbd4 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002e68:	e064      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <HAL_ADC_ConfigChannel+0x35c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d107      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0019      	movs	r1, r3
 8002e8a:	0010      	movs	r0, r2
 8002e8c:	f7ff fc2f 	bl	80026ee <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da4d      	bge.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7ff fbcc 	bl	8002638 <LL_ADC_GetCommonPathInternalCh>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a15      	ldr	r2, [pc, #84]	; (8002f00 <HAL_ADC_ConfigChannel+0x364>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d108      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_ADC_ConfigChannel+0x378>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	0010      	movs	r0, r2
 8002eba:	f7ff fba9 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002ebe:	e039      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_ADC_ConfigChannel+0x370>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_ADC_ConfigChannel+0x37c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	f7ff fb9b 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002eda:	e02b      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <HAL_ADC_ConfigChannel+0x374>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d126      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <HAL_ADC_ConfigChannel+0x380>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_ADC_ConfigChannel+0x360>)
 8002eee:	0019      	movs	r1, r3
 8002ef0:	0010      	movs	r0, r2
 8002ef2:	f7ff fb8d 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002ef6:	e01d      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x398>
 8002ef8:	80000004 	.word	0x80000004
 8002efc:	40012708 	.word	0x40012708
 8002f00:	b0001000 	.word	0xb0001000
 8002f04:	20000008 	.word	0x20000008
 8002f08:	00030d40 	.word	0x00030d40
 8002f0c:	b8004000 	.word	0xb8004000
 8002f10:	b4002000 	.word	0xb4002000
 8002f14:	ff7fffff 	.word	0xff7fffff
 8002f18:	feffffff 	.word	0xfeffffff
 8002f1c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	2220      	movs	r2, #32
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f2c:	2317      	movs	r3, #23
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2254      	movs	r2, #84	; 0x54
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f3c:	2317      	movs	r3, #23
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b006      	add	sp, #24
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	0002      	movs	r2, r0
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f5e:	d809      	bhi.n	8002f74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	001a      	movs	r2, r3
 8002f66:	231f      	movs	r3, #31
 8002f68:	401a      	ands	r2, r3
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <__NVIC_EnableIRQ+0x30>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4091      	lsls	r1, r2
 8002f70:	000a      	movs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	0002      	movs	r2, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b7f      	cmp	r3, #127	; 0x7f
 8002f94:	d828      	bhi.n	8002fe8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f96:	4a2f      	ldr	r2, [pc, #188]	; (8003054 <__NVIC_SetPriority+0xd4>)
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	33c0      	adds	r3, #192	; 0xc0
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	589b      	ldr	r3, [r3, r2]
 8002fa6:	1dfa      	adds	r2, r7, #7
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	0011      	movs	r1, r2
 8002fac:	2203      	movs	r2, #3
 8002fae:	400a      	ands	r2, r1
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	21ff      	movs	r1, #255	; 0xff
 8002fb4:	4091      	lsls	r1, r2
 8002fb6:	000a      	movs	r2, r1
 8002fb8:	43d2      	mvns	r2, r2
 8002fba:	401a      	ands	r2, r3
 8002fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	2303      	movs	r3, #3
 8002fce:	4003      	ands	r3, r0
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd4:	481f      	ldr	r0, [pc, #124]	; (8003054 <__NVIC_SetPriority+0xd4>)
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b25b      	sxtb	r3, r3
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	33c0      	adds	r3, #192	; 0xc0
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fe6:	e031      	b.n	800304c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <__NVIC_SetPriority+0xd8>)
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	0019      	movs	r1, r3
 8002ff0:	230f      	movs	r3, #15
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	3b08      	subs	r3, #8
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3306      	adds	r3, #6
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	18d3      	adds	r3, r2, r3
 8002ffe:	3304      	adds	r3, #4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	1dfa      	adds	r2, r7, #7
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	0011      	movs	r1, r2
 8003008:	2203      	movs	r2, #3
 800300a:	400a      	ands	r2, r1
 800300c:	00d2      	lsls	r2, r2, #3
 800300e:	21ff      	movs	r1, #255	; 0xff
 8003010:	4091      	lsls	r1, r2
 8003012:	000a      	movs	r2, r1
 8003014:	43d2      	mvns	r2, r2
 8003016:	401a      	ands	r2, r3
 8003018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	22ff      	movs	r2, #255	; 0xff
 8003020:	401a      	ands	r2, r3
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	0018      	movs	r0, r3
 8003028:	2303      	movs	r3, #3
 800302a:	4003      	ands	r3, r0
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003030:	4809      	ldr	r0, [pc, #36]	; (8003058 <__NVIC_SetPriority+0xd8>)
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	001c      	movs	r4, r3
 8003038:	230f      	movs	r3, #15
 800303a:	4023      	ands	r3, r4
 800303c:	3b08      	subs	r3, #8
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	430a      	orrs	r2, r1
 8003042:	3306      	adds	r3, #6
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	18c3      	adds	r3, r0, r3
 8003048:	3304      	adds	r3, #4
 800304a:	601a      	str	r2, [r3, #0]
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b003      	add	sp, #12
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	045b      	lsls	r3, r3, #17
 800306c:	429a      	cmp	r2, r3
 800306e:	d301      	bcc.n	8003074 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003070:	2301      	movs	r3, #1
 8003072:	e010      	b.n	8003096 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <SysTick_Config+0x44>)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	3a01      	subs	r2, #1
 800307a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307c:	2301      	movs	r3, #1
 800307e:	425b      	negs	r3, r3
 8003080:	2103      	movs	r1, #3
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff ff7c 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SysTick_Config+0x44>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SysTick_Config+0x44>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b002      	add	sp, #8
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	210f      	movs	r1, #15
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	1c02      	adds	r2, r0, #0
 80030b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	0011      	movs	r1, r2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff ff5d 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	0002      	movs	r2, r0
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030da:	1dfb      	adds	r3, r7, #7
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff ff33 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff ffaf 	bl	800305c <SysTick_Config>
 80030fe:	0003      	movs	r3, r0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003116:	e147      	b.n	80033a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4091      	lsls	r1, r2
 8003122:	000a      	movs	r2, r1
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d100      	bne.n	8003130 <HAL_GPIO_Init+0x28>
 800312e:	e138      	b.n	80033a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2203      	movs	r2, #3
 8003136:	4013      	ands	r3, r2
 8003138:	2b01      	cmp	r3, #1
 800313a:	d005      	beq.n	8003148 <HAL_GPIO_Init+0x40>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	4013      	ands	r3, r2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d130      	bne.n	80031aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	409a      	lsls	r2, r3
 8003156:	0013      	movs	r3, r2
 8003158:	43da      	mvns	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	409a      	lsls	r2, r3
 800316a:	0013      	movs	r3, r2
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800317e:	2201      	movs	r2, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
 8003184:	0013      	movs	r3, r2
 8003186:	43da      	mvns	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	2201      	movs	r2, #1
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d017      	beq.n	80031e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	43da      	mvns	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	0013      	movs	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2203      	movs	r2, #3
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d123      	bne.n	800323a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3208      	adds	r2, #8
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	58d3      	ldr	r3, [r2, r3]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2207      	movs	r2, #7
 8003204:	4013      	ands	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	43da      	mvns	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2107      	movs	r1, #7
 800321e:	400b      	ands	r3, r1
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	409a      	lsls	r2, r3
 8003224:	0013      	movs	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	0092      	lsls	r2, r2, #2
 8003236:	6939      	ldr	r1, [r7, #16]
 8003238:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	409a      	lsls	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	43da      	mvns	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2203      	movs	r2, #3
 8003258:	401a      	ands	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	409a      	lsls	r2, r3
 8003260:	0013      	movs	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	23c0      	movs	r3, #192	; 0xc0
 8003274:	029b      	lsls	r3, r3, #10
 8003276:	4013      	ands	r3, r2
 8003278:	d100      	bne.n	800327c <HAL_GPIO_Init+0x174>
 800327a:	e092      	b.n	80033a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800327c:	4a50      	ldr	r2, [pc, #320]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3318      	adds	r3, #24
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	589b      	ldr	r3, [r3, r2]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2203      	movs	r2, #3
 800328e:	4013      	ands	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	220f      	movs	r2, #15
 8003294:	409a      	lsls	r2, r3
 8003296:	0013      	movs	r3, r2
 8003298:	43da      	mvns	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	23a0      	movs	r3, #160	; 0xa0
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x1ca>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a45      	ldr	r2, [pc, #276]	; (80033c4 <HAL_GPIO_Init+0x2bc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x1c6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <HAL_GPIO_Init+0x2c0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x1c2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a43      	ldr	r2, [pc, #268]	; (80033cc <HAL_GPIO_Init+0x2c4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x1be>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x1cc>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x1cc>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x1cc>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x1cc>
 80032d2:	2300      	movs	r3, #0
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	2103      	movs	r1, #3
 80032d8:	400a      	ands	r2, r1
 80032da:	00d2      	lsls	r2, r2, #3
 80032dc:	4093      	lsls	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80032e4:	4936      	ldr	r1, [pc, #216]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3318      	adds	r3, #24
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032f2:	4a33      	ldr	r2, [pc, #204]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	58d3      	ldr	r3, [r2, r3]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	025b      	lsls	r3, r3, #9
 800330c:	4013      	ands	r3, r2
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003318:	4929      	ldr	r1, [pc, #164]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 8003322:	2384      	movs	r3, #132	; 0x84
 8003324:	58d3      	ldr	r3, [r2, r3]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43da      	mvns	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	029b      	lsls	r3, r3, #10
 800333a:	4013      	ands	r3, r2
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003346:	491e      	ldr	r1, [pc, #120]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 8003348:	2284      	movs	r2, #132	; 0x84
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334e:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43da      	mvns	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	035b      	lsls	r3, r3, #13
 8003366:	4013      	ands	r3, r2
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43da      	mvns	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	039b      	lsls	r3, r3, #14
 8003390:	4013      	ands	r3, r2
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	40da      	lsrs	r2, r3
 80033b0:	1e13      	subs	r3, r2, #0
 80033b2:	d000      	beq.n	80033b6 <HAL_GPIO_Init+0x2ae>
 80033b4:	e6b0      	b.n	8003118 <HAL_GPIO_Init+0x10>
  }
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b006      	add	sp, #24
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021800 	.word	0x40021800
 80033c4:	50000400 	.word	0x50000400
 80033c8:	50000800 	.word	0x50000800
 80033cc:	50000c00 	.word	0x50000c00

080033d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	000a      	movs	r2, r1
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	1cba      	adds	r2, r7, #2
 80033e4:	8812      	ldrh	r2, [r2, #0]
 80033e6:	4013      	ands	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80033ea:	230f      	movs	r3, #15
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e003      	b.n	80033fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f4:	230f      	movs	r3, #15
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033fc:	230f      	movs	r3, #15
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	781b      	ldrb	r3, [r3, #0]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	0008      	movs	r0, r1
 8003414:	0011      	movs	r1, r2
 8003416:	1cbb      	adds	r3, r7, #2
 8003418:	1c02      	adds	r2, r0, #0
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	1c7b      	adds	r3, r7, #1
 800341e:	1c0a      	adds	r2, r1, #0
 8003420:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003422:	1c7b      	adds	r3, r7, #1
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800342a:	1cbb      	adds	r3, r7, #2
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003432:	e003      	b.n	800343c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003434:	1cbb      	adds	r3, r7, #2
 8003436:	881a      	ldrh	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	0002      	movs	r2, r0
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	1dba      	adds	r2, r7, #6
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	4013      	ands	r3, r2
 800345a:	d008      	beq.n	800346e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800345e:	1dba      	adds	r2, r7, #6
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003464:	1dbb      	adds	r3, r7, #6
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	0018      	movs	r0, r3
 800346a:	f004 f9cb 	bl	8007804 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	1dba      	adds	r2, r7, #6
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	4013      	ands	r3, r2
 8003478:	d008      	beq.n	800348c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800347c:	1dba      	adds	r2, r7, #6
 800347e:	8812      	ldrh	r2, [r2, #0]
 8003480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003482:	1dbb      	adds	r3, r7, #6
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	0018      	movs	r0, r3
 8003488:	f004 f976 	bl	8007778 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021800 	.word	0x40021800

08003498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e082      	b.n	80035b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2241      	movs	r2, #65	; 0x41
 80034ae:	5c9b      	ldrb	r3, [r3, r2]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f005 f94d 	bl	8008760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2241      	movs	r2, #65	; 0x41
 80034ca:	2124      	movs	r1, #36	; 0x24
 80034cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	438a      	bics	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4934      	ldr	r1, [pc, #208]	; (80035b8 <HAL_I2C_Init+0x120>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4931      	ldr	r1, [pc, #196]	; (80035bc <HAL_I2C_Init+0x124>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	0209      	lsls	r1, r1, #8
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	e007      	b.n	8003526 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2184      	movs	r1, #132	; 0x84
 8003520:	0209      	lsls	r1, r1, #8
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d104      	bne.n	8003538 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	491f      	ldr	r1, [pc, #124]	; (80035c0 <HAL_I2C_Init+0x128>)
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	491a      	ldr	r1, [pc, #104]	; (80035bc <HAL_I2C_Init+0x124>)
 8003554:	400a      	ands	r2, r1
 8003556:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	431a      	orrs	r2, r3
 8003562:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69d9      	ldr	r1, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2241      	movs	r2, #65	; 0x41
 800359c:	2120      	movs	r1, #32
 800359e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2242      	movs	r2, #66	; 0x42
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	f0ffffff 	.word	0xf0ffffff
 80035bc:	ffff7fff 	.word	0xffff7fff
 80035c0:	02008000 	.word	0x02008000

080035c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	5c9b      	ldrb	r3, [r3, r2]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d138      	bne.n	800364c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	5c9b      	ldrb	r3, [r3, r2]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e032      	b.n	800364e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	2101      	movs	r1, #1
 80035ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2241      	movs	r2, #65	; 0x41
 80035f4:	2124      	movs	r1, #36	; 0x24
 80035f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4911      	ldr	r1, [pc, #68]	; (8003658 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003614:	400a      	ands	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	2120      	movs	r1, #32
 800363e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	ffffefff 	.word	0xffffefff

0800365c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2241      	movs	r2, #65	; 0x41
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b20      	cmp	r3, #32
 8003670:	d139      	bne.n	80036e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2240      	movs	r2, #64	; 0x40
 8003676:	5c9b      	ldrb	r3, [r3, r2]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800367c:	2302      	movs	r3, #2
 800367e:	e033      	b.n	80036e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2241      	movs	r2, #65	; 0x41
 800368c:	2124      	movs	r1, #36	; 0x24
 800368e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2101      	movs	r1, #1
 800369c:	438a      	bics	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2241      	movs	r2, #65	; 0x41
 80036d6:	2120      	movs	r1, #32
 80036d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	2100      	movs	r1, #0
 80036e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	fffff0ff 	.word	0xfffff0ff

080036f4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_PWR_EnableBkUpAccess+0x18>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_PWR_EnableBkUpAccess+0x18>)
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	0049      	lsls	r1, r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40007000 	.word	0x40007000

08003710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800371e:	4013      	ands	r3, r2
 8003720:	0019      	movs	r1, r3
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d11f      	bne.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	0013      	movs	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	189b      	adds	r3, r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4912      	ldr	r1, [pc, #72]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003742:	0018      	movs	r0, r3
 8003744:	f7fc fcde 	bl	8000104 <__udivsi3>
 8003748:	0003      	movs	r3, r0
 800374a:	3301      	adds	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800374e:	e008      	b.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e001      	b.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e009      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	401a      	ands	r2, r3
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	429a      	cmp	r2, r3
 8003772:	d0ed      	beq.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	40007000 	.word	0x40007000
 8003784:	fffff9ff 	.word	0xfffff9ff
 8003788:	20000008 	.word	0x20000008
 800378c:	000f4240 	.word	0x000f4240

08003790 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	23e0      	movs	r3, #224	; 0xe0
 800379a:	01db      	lsls	r3, r3, #7
 800379c:	4013      	ands	r3, r2
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e304      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2201      	movs	r2, #1
 80037c0:	4013      	ands	r3, r2
 80037c2:	d100      	bne.n	80037c6 <HAL_RCC_OscConfig+0x1e>
 80037c4:	e07c      	b.n	80038c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c6:	4bc3      	ldr	r3, [pc, #780]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2238      	movs	r2, #56	; 0x38
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d0:	4bc0      	ldr	r3, [pc, #768]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2203      	movs	r2, #3
 80037d6:	4013      	ands	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3e>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4bb9      	ldr	r3, [pc, #740]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	4013      	ands	r3, r2
 80037f6:	d062      	beq.n	80038be <HAL_RCC_OscConfig+0x116>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d15e      	bne.n	80038be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e2df      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	025b      	lsls	r3, r3, #9
 800380c:	429a      	cmp	r2, r3
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x78>
 8003810:	4bb0      	ldr	r3, [pc, #704]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4baf      	ldr	r3, [pc, #700]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	0249      	lsls	r1, r1, #9
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e020      	b.n	8003862 <HAL_RCC_OscConfig+0xba>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	23a0      	movs	r3, #160	; 0xa0
 8003826:	02db      	lsls	r3, r3, #11
 8003828:	429a      	cmp	r2, r3
 800382a:	d10e      	bne.n	800384a <HAL_RCC_OscConfig+0xa2>
 800382c:	4ba9      	ldr	r3, [pc, #676]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4ba8      	ldr	r3, [pc, #672]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	02c9      	lsls	r1, r1, #11
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	4ba6      	ldr	r3, [pc, #664]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4ba5      	ldr	r3, [pc, #660]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	0249      	lsls	r1, r1, #9
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e00b      	b.n	8003862 <HAL_RCC_OscConfig+0xba>
 800384a:	4ba2      	ldr	r3, [pc, #648]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4ba1      	ldr	r3, [pc, #644]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003850:	49a1      	ldr	r1, [pc, #644]	; (8003ad8 <HAL_RCC_OscConfig+0x330>)
 8003852:	400a      	ands	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	4b9f      	ldr	r3, [pc, #636]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b9e      	ldr	r3, [pc, #632]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800385c:	499f      	ldr	r1, [pc, #636]	; (8003adc <HAL_RCC_OscConfig+0x334>)
 800385e:	400a      	ands	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d014      	beq.n	8003894 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fe feb1 	bl	80025d0 <HAL_GetTick>
 800386e:	0003      	movs	r3, r0
 8003870:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe feac 	bl	80025d0 <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e29e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003886:	4b93      	ldr	r3, [pc, #588]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	029b      	lsls	r3, r3, #10
 800388e:	4013      	ands	r3, r2
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0xcc>
 8003892:	e015      	b.n	80038c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fe9c 	bl	80025d0 <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389e:	f7fe fe97 	bl	80025d0 <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e289      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b0:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	4013      	ands	r3, r2
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0xf6>
 80038bc:	e000      	b.n	80038c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_RCC_OscConfig+0x124>
 80038ca:	e099      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038cc:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2238      	movs	r2, #56	; 0x38
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d6:	4b7f      	ldr	r3, [pc, #508]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x144>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d002      	beq.n	80038f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d135      	bne.n	800395e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x162>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e25c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b72      	ldr	r3, [pc, #456]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a74      	ldr	r2, [pc, #464]	; (8003ae0 <HAL_RCC_OscConfig+0x338>)
 8003910:	4013      	ands	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	021a      	lsls	r2, r3, #8
 800391a:	4b6e      	ldr	r3, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d112      	bne.n	800394c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003926:	4b6b      	ldr	r3, [pc, #428]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6e      	ldr	r2, [pc, #440]	; (8003ae4 <HAL_RCC_OscConfig+0x33c>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	4b67      	ldr	r3, [pc, #412]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800393a:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0adb      	lsrs	r3, r3, #11
 8003940:	2207      	movs	r2, #7
 8003942:	4013      	ands	r3, r2
 8003944:	4a68      	ldr	r2, [pc, #416]	; (8003ae8 <HAL_RCC_OscConfig+0x340>)
 8003946:	40da      	lsrs	r2, r3
 8003948:	4b68      	ldr	r3, [pc, #416]	; (8003aec <HAL_RCC_OscConfig+0x344>)
 800394a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_OscConfig+0x348>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0018      	movs	r0, r3
 8003952:	f7fe fde1 	bl	8002518 <HAL_InitTick>
 8003956:	1e03      	subs	r3, r0, #0
 8003958:	d051      	beq.n	80039fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e232      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003966:	4b5b      	ldr	r3, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x33c>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800397a:	4b56      	ldr	r3, [pc, #344]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0049      	lsls	r1, r1, #1
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fe22 	bl	80025d0 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe fe1d 	bl	80025d0 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e20f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4013      	ands	r3, r2
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a4a      	ldr	r2, [pc, #296]	; (8003ae0 <HAL_RCC_OscConfig+0x338>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e01b      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	4949      	ldr	r1, [pc, #292]	; (8003af4 <HAL_RCC_OscConfig+0x34c>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fdfc 	bl	80025d0 <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7fe fdf7 	bl	80025d0 <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1e9      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f0:	4b38      	ldr	r3, [pc, #224]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4013      	ands	r3, r2
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x236>
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	4013      	ands	r3, r2
 8003a08:	d047      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a0a:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2238      	movs	r2, #56	; 0x38
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b18      	cmp	r3, #24
 8003a14:	d10a      	bne.n	8003a2c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d03c      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2f2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d138      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e1cb      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d019      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fdc6 	bl	80025d0 <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fdc1 	bl	80025d0 <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1b3      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	2202      	movs	r2, #2
 8003a62:	4013      	ands	r3, r2
 8003a64:	d0f1      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2a2>
 8003a66:	e018      	b.n	8003a9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a6e:	2101      	movs	r1, #1
 8003a70:	438a      	bics	r2, r1
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe fdac 	bl	80025d0 <HAL_GetTick>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7e:	f7fe fda7 	bl	80025d0 <HAL_GetTick>
 8003a82:	0002      	movs	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e199      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	d1f1      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2fe>
 8003aa4:	e0c6      	b.n	8003c34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	231f      	movs	r3, #31
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2238      	movs	r2, #56	; 0x38
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d11e      	bne.n	8003af8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_OscConfig+0x32c>)
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2202      	movs	r2, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x31e>
 8003ac4:	e0b6      	b.n	8003c34 <HAL_RCC_OscConfig+0x48c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d000      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x328>
 8003ace:	e0b1      	b.n	8003c34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e177      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	fffeffff 	.word	0xfffeffff
 8003adc:	fffbffff 	.word	0xfffbffff
 8003ae0:	ffff80ff 	.word	0xffff80ff
 8003ae4:	ffffc7ff 	.word	0xffffc7ff
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	20000008 	.word	0x20000008
 8003af0:	20000000 	.word	0x20000000
 8003af4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003af8:	4bb4      	ldr	r3, [pc, #720]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	055b      	lsls	r3, r3, #21
 8003b00:	4013      	ands	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x360>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x362>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4baf      	ldr	r3, [pc, #700]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b12:	4bae      	ldr	r3, [pc, #696]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	0549      	lsls	r1, r1, #21
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b1c:	4bab      	ldr	r3, [pc, #684]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	055b      	lsls	r3, r3, #21
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b32:	4ba7      	ldr	r3, [pc, #668]	; (8003dd0 <HAL_RCC_OscConfig+0x628>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d11a      	bne.n	8003b74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3e:	4ba4      	ldr	r3, [pc, #656]	; (8003dd0 <HAL_RCC_OscConfig+0x628>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4ba3      	ldr	r3, [pc, #652]	; (8003dd0 <HAL_RCC_OscConfig+0x628>)
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	0049      	lsls	r1, r1, #1
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fd40 	bl	80025d0 <HAL_GetTick>
 8003b50:	0003      	movs	r3, r0
 8003b52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b56:	f7fe fd3b 	bl	80025d0 <HAL_GetTick>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e12d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	4b99      	ldr	r3, [pc, #612]	; (8003dd0 <HAL_RCC_OscConfig+0x628>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4013      	ands	r3, r2
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3e2>
 8003b7c:	4b93      	ldr	r3, [pc, #588]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b80:	4b92      	ldr	r3, [pc, #584]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b82:	2101      	movs	r1, #1
 8003b84:	430a      	orrs	r2, r1
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x41c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x404>
 8003b92:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b96:	4b8d      	ldr	r3, [pc, #564]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003b98:	2104      	movs	r1, #4
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003ba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ba2:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x41c>
 8003bac:	4b87      	ldr	r3, [pc, #540]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003bae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bb0:	4b86      	ldr	r3, [pc, #536]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	438a      	bics	r2, r1
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bb8:	4b84      	ldr	r3, [pc, #528]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003bba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bbc:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	438a      	bics	r2, r1
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d014      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fd00 	bl	80025d0 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd4:	e009      	b.n	8003bea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fe fcfb 	bl	80025d0 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	4a7c      	ldr	r2, [pc, #496]	; (8003dd4 <HAL_RCC_OscConfig+0x62c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0ec      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bea:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x42e>
 8003bf4:	e013      	b.n	8003c1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fe fceb 	bl	80025d0 <HAL_GetTick>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfe:	e009      	b.n	8003c14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fe fce6 	bl	80025d0 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_RCC_OscConfig+0x62c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0d7      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c14:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	2202      	movs	r2, #2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c1e:	231f      	movs	r3, #31
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c2e:	496a      	ldr	r1, [pc, #424]	; (8003dd8 <HAL_RCC_OscConfig+0x630>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d100      	bne.n	8003c3e <HAL_RCC_OscConfig+0x496>
 8003c3c:	e0c1      	b.n	8003dc2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2238      	movs	r2, #56	; 0x38
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d100      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4a4>
 8003c4a:	e081      	b.n	8003d50 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d156      	bne.n	8003d02 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c5a:	4960      	ldr	r1, [pc, #384]	; (8003ddc <HAL_RCC_OscConfig+0x634>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe fcb6 	bl	80025d0 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fe fcb1 	bl	80025d0 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0a3      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	049b      	lsls	r3, r3, #18
 8003c84:	4013      	ands	r3, r2
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a54      	ldr	r2, [pc, #336]	; (8003de0 <HAL_RCC_OscConfig+0x638>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b42      	ldr	r3, [pc, #264]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0449      	lsls	r1, r1, #17
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0549      	lsls	r1, r1, #21
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fc7a 	bl	80025d0 <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fe fc75 	bl	80025d0 <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e067      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf4:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	049b      	lsls	r3, r3, #18
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x53a>
 8003d00:	e05f      	b.n	8003dc2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d08:	4934      	ldr	r1, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x634>)
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d0e:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d14:	2103      	movs	r1, #3
 8003d16:	438a      	bics	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d20:	4930      	ldr	r1, [pc, #192]	; (8003de4 <HAL_RCC_OscConfig+0x63c>)
 8003d22:	400a      	ands	r2, r1
 8003d24:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe fc53 	bl	80025d0 <HAL_GetTick>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fc4e 	bl	80025d0 <HAL_GetTick>
 8003d34:	0002      	movs	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e040      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	049b      	lsls	r3, r3, #18
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x588>
 8003d4e:	e038      	b.n	8003dc2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e033      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x624>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2203      	movs	r2, #3
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d126      	bne.n	8003dbe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2270      	movs	r2, #112	; 0x70
 8003d74:	401a      	ands	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d11f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	23fe      	movs	r3, #254	; 0xfe
 8003d82:	01db      	lsls	r3, r3, #7
 8003d84:	401a      	ands	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d116      	bne.n	8003dbe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	23f8      	movs	r3, #248	; 0xf8
 8003d94:	039b      	lsls	r3, r3, #14
 8003d96:	401a      	ands	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d10e      	bne.n	8003dbe <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	23e0      	movs	r3, #224	; 0xe0
 8003da4:	051b      	lsls	r3, r3, #20
 8003da6:	401a      	ands	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	0f5b      	lsrs	r3, r3, #29
 8003db4:	075a      	lsls	r2, r3, #29
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b008      	add	sp, #32
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	00001388 	.word	0x00001388
 8003dd8:	efffffff 	.word	0xefffffff
 8003ddc:	feffffff 	.word	0xfeffffff
 8003de0:	11c1808c 	.word	0x11c1808c
 8003de4:	eefeffff 	.word	0xeefeffff

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0e9      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2207      	movs	r2, #7
 8003e02:	4013      	ands	r3, r2
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d91e      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2207      	movs	r2, #7
 8003e10:	4393      	bics	r3, r2
 8003e12:	0019      	movs	r1, r3
 8003e14:	4b70      	ldr	r3, [pc, #448]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e1c:	f7fe fbd8 	bl	80025d0 <HAL_GetTick>
 8003e20:	0003      	movs	r3, r0
 8003e22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e24:	e009      	b.n	8003e3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e26:	f7fe fbd3 	bl	80025d0 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4a6a      	ldr	r2, [pc, #424]	; (8003fdc <HAL_RCC_ClockConfig+0x1f4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0ca      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e3a:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2207      	movs	r2, #7
 8003e40:	4013      	ands	r3, r2
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d1ee      	bne.n	8003e26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d015      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2204      	movs	r2, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d006      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e5c:	4b60      	ldr	r3, [pc, #384]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e62:	21e0      	movs	r1, #224	; 0xe0
 8003e64:	01c9      	lsls	r1, r1, #7
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4a5d      	ldr	r2, [pc, #372]	; (8003fe4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2201      	movs	r2, #1
 8003e84:	4013      	ands	r3, r2
 8003e86:	d057      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e90:	4b53      	ldr	r3, [pc, #332]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	029b      	lsls	r3, r3, #10
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d12b      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e097      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea8:	4b4d      	ldr	r3, [pc, #308]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	049b      	lsls	r3, r3, #18
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d11f      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e08b      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d113      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e07f      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed8:	4b41      	ldr	r3, [pc, #260]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	2202      	movs	r2, #2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e074      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e06d      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2207      	movs	r2, #7
 8003efa:	4393      	bics	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fe fb62 	bl	80025d0 <HAL_GetTick>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f10:	e009      	b.n	8003f26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f12:	f7fe fb5d 	bl	80025d0 <HAL_GetTick>
 8003f16:	0002      	movs	r2, r0
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <HAL_RCC_ClockConfig+0x1f4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e054      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2238      	movs	r2, #56	; 0x38
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1ec      	bne.n	8003f12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	4013      	ands	r3, r2
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d21e      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	4393      	bics	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f58:	f7fe fb3a 	bl	80025d0 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f60:	e009      	b.n	8003f76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f62:	f7fe fb35 	bl	80025d0 <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_RCC_ClockConfig+0x1f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e02c      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8e:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_RCC_ClockConfig+0x200>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fa2:	f000 f829 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	0001      	movs	r1, r0
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	220f      	movs	r2, #15
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_RCC_ClockConfig+0x204>)
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	58d3      	ldr	r3, [r2, r3]
 8003fb8:	221f      	movs	r2, #31
 8003fba:	4013      	ands	r3, r2
 8003fbc:	000a      	movs	r2, r1
 8003fbe:	40da      	lsrs	r2, r3
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_ClockConfig+0x208>)
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_ClockConfig+0x20c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7fe faa5 	bl	8002518 <HAL_InitTick>
 8003fce:	0003      	movs	r3, r0
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	00001388 	.word	0x00001388
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	fffff0ff 	.word	0xfffff0ff
 8003fe8:	ffff8fff 	.word	0xffff8fff
 8003fec:	08008ebc 	.word	0x08008ebc
 8003ff0:	20000008 	.word	0x20000008
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2238      	movs	r2, #56	; 0x38
 8004004:	4013      	ands	r3, r2
 8004006:	d10f      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0adb      	lsrs	r3, r3, #11
 800400e:	2207      	movs	r2, #7
 8004010:	4013      	ands	r3, r2
 8004012:	2201      	movs	r2, #1
 8004014:	409a      	lsls	r2, r3
 8004016:	0013      	movs	r3, r2
 8004018:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	4835      	ldr	r0, [pc, #212]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800401e:	f7fc f871 	bl	8000104 <__udivsi3>
 8004022:	0003      	movs	r3, r0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e05d      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004028:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2238      	movs	r2, #56	; 0x38
 800402e:	4013      	ands	r3, r2
 8004030:	2b08      	cmp	r3, #8
 8004032:	d102      	bne.n	800403a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004034:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e054      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403a:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2238      	movs	r2, #56	; 0x38
 8004040:	4013      	ands	r3, r2
 8004042:	2b10      	cmp	r3, #16
 8004044:	d138      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2203      	movs	r2, #3
 800404c:	4013      	ands	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	2207      	movs	r2, #7
 8004058:	4013      	ands	r3, r2
 800405a:	3301      	adds	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d10d      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4824      	ldr	r0, [pc, #144]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004068:	f7fc f84c 	bl	8000104 <__udivsi3>
 800406c:	0003      	movs	r3, r0
 800406e:	0019      	movs	r1, r3
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	227f      	movs	r2, #127	; 0x7f
 8004078:	4013      	ands	r3, r2
 800407a:	434b      	muls	r3, r1
 800407c:	617b      	str	r3, [r7, #20]
        break;
 800407e:	e00d      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	481c      	ldr	r0, [pc, #112]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004084:	f7fc f83e 	bl	8000104 <__udivsi3>
 8004088:	0003      	movs	r3, r0
 800408a:	0019      	movs	r1, r3
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	227f      	movs	r2, #127	; 0x7f
 8004094:	4013      	ands	r3, r2
 8004096:	434b      	muls	r3, r1
 8004098:	617b      	str	r3, [r7, #20]
        break;
 800409a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0f5b      	lsrs	r3, r3, #29
 80040a2:	2207      	movs	r2, #7
 80040a4:	4013      	ands	r3, r2
 80040a6:	3301      	adds	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	f7fc f829 	bl	8000104 <__udivsi3>
 80040b2:	0003      	movs	r3, r0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e015      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2238      	movs	r2, #56	; 0x38
 80040be:	4013      	ands	r3, r2
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d103      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2238      	movs	r2, #56	; 0x38
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	d103      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040d8:	23fa      	movs	r3, #250	; 0xfa
 80040da:	01db      	lsls	r3, r3, #7
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e001      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040e4:	693b      	ldr	r3, [r7, #16]
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b006      	add	sp, #24
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	40021000 	.word	0x40021000
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	007a1200 	.word	0x007a1200

080040fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004100:	4b02      	ldr	r3, [pc, #8]	; (800410c <HAL_RCC_GetHCLKFreq+0x10>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	20000008 	.word	0x20000008

08004110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004114:	f7ff fff2 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 8004118:	0004      	movs	r4, r0
 800411a:	f7ff fb39 	bl	8003790 <LL_RCC_GetAPB1Prescaler>
 800411e:	0003      	movs	r3, r0
 8004120:	0b1a      	lsrs	r2, r3, #12
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	58d3      	ldr	r3, [r2, r3]
 8004128:	221f      	movs	r2, #31
 800412a:	4013      	ands	r3, r2
 800412c:	40dc      	lsrs	r4, r3
 800412e:	0023      	movs	r3, r4
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	bdb0      	pop	{r4, r5, r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	08008efc 	.word	0x08008efc

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004144:	2313      	movs	r3, #19
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800414c:	2312      	movs	r3, #18
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	029b      	lsls	r3, r3, #10
 800415c:	4013      	ands	r3, r2
 800415e:	d100      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004160:	e0a3      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004162:	2011      	movs	r0, #17
 8004164:	183b      	adds	r3, r7, r0
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416a:	4bc3      	ldr	r3, [pc, #780]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800416c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	055b      	lsls	r3, r3, #21
 8004172:	4013      	ands	r3, r2
 8004174:	d110      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	4bc0      	ldr	r3, [pc, #768]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417a:	4bbf      	ldr	r3, [pc, #764]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800417c:	2180      	movs	r1, #128	; 0x80
 800417e:	0549      	lsls	r1, r1, #21
 8004180:	430a      	orrs	r2, r1
 8004182:	63da      	str	r2, [r3, #60]	; 0x3c
 8004184:	4bbc      	ldr	r3, [pc, #752]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	055b      	lsls	r3, r3, #21
 800418c:	4013      	ands	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	183b      	adds	r3, r7, r0
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004198:	4bb8      	ldr	r3, [pc, #736]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4bb7      	ldr	r3, [pc, #732]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	0049      	lsls	r1, r1, #1
 80041a2:	430a      	orrs	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a6:	f7fe fa13 	bl	80025d0 <HAL_GetTick>
 80041aa:	0003      	movs	r3, r0
 80041ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ae:	e00b      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fe fa0e 	bl	80025d0 <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d904      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80041be:	2313      	movs	r3, #19
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2203      	movs	r2, #3
 80041c4:	701a      	strb	r2, [r3, #0]
        break;
 80041c6:	e005      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c8:	4bac      	ldr	r3, [pc, #688]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	d0ed      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80041d4:	2313      	movs	r3, #19
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d154      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041de:	4ba6      	ldr	r3, [pc, #664]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041e2:	23c0      	movs	r3, #192	; 0xc0
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4013      	ands	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d014      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041fa:	4b9f      	ldr	r3, [pc, #636]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	4aa0      	ldr	r2, [pc, #640]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004200:	4013      	ands	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004204:	4b9c      	ldr	r3, [pc, #624]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004208:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	0249      	lsls	r1, r1, #9
 800420e:	430a      	orrs	r2, r1
 8004210:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004212:	4b99      	ldr	r3, [pc, #612]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004216:	4b98      	ldr	r3, [pc, #608]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004218:	499a      	ldr	r1, [pc, #616]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800421a:	400a      	ands	r2, r1
 800421c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800421e:	4b96      	ldr	r3, [pc, #600]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2201      	movs	r2, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d016      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe f9d0 	bl	80025d0 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004234:	e00c      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe f9cb 	bl	80025d0 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	4a91      	ldr	r2, [pc, #580]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d904      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004246:	2313      	movs	r3, #19
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	2203      	movs	r2, #3
 800424c:	701a      	strb	r2, [r3, #0]
            break;
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	4b89      	ldr	r3, [pc, #548]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2202      	movs	r2, #2
 8004256:	4013      	ands	r3, r2
 8004258:	d0ed      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800425a:	2313      	movs	r3, #19
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004264:	4b84      	ldr	r3, [pc, #528]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	4a85      	ldr	r2, [pc, #532]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004272:	4b81      	ldr	r3, [pc, #516]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004274:	430a      	orrs	r2, r1
 8004276:	65da      	str	r2, [r3, #92]	; 0x5c
 8004278:	e00c      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800427a:	2312      	movs	r3, #18
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2213      	movs	r2, #19
 8004280:	18ba      	adds	r2, r7, r2
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e005      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	2312      	movs	r3, #18
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2213      	movs	r2, #19
 800428e:	18ba      	adds	r2, r7, r2
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004294:	2311      	movs	r3, #17
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b76      	ldr	r3, [pc, #472]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a2:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042a4:	4979      	ldr	r1, [pc, #484]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	4013      	ands	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b4:	4b70      	ldr	r3, [pc, #448]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2203      	movs	r2, #3
 80042ba:	4393      	bics	r3, r2
 80042bc:	0019      	movs	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2202      	movs	r2, #2
 80042ce:	4013      	ands	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d2:	4b69      	ldr	r3, [pc, #420]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	220c      	movs	r2, #12
 80042d8:	4393      	bics	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2210      	movs	r2, #16
 80042ec:	4013      	ands	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042f0:	4b61      	ldr	r3, [pc, #388]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	4a66      	ldr	r2, [pc, #408]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b5e      	ldr	r3, [pc, #376]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004300:	430a      	orrs	r2, r1
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	4a5f      	ldr	r2, [pc, #380]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	4b56      	ldr	r3, [pc, #344]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004320:	430a      	orrs	r2, r1
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4013      	ands	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004330:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	4a58      	ldr	r2, [pc, #352]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004340:	430a      	orrs	r2, r1
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2220      	movs	r2, #32
 800434a:	4013      	ands	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800434e:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	4a52      	ldr	r2, [pc, #328]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	4b46      	ldr	r3, [pc, #280]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800435e:	430a      	orrs	r2, r1
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	01db      	lsls	r3, r3, #7
 800436a:	4013      	ands	r3, r2
 800436c:	d015      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800436e:	4b42      	ldr	r3, [pc, #264]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	0899      	lsrs	r1, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800437c:	430a      	orrs	r2, r1
 800437e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	05db      	lsls	r3, r3, #23
 8004388:	429a      	cmp	r2, r3
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0249      	lsls	r1, r1, #9
 8004396:	430a      	orrs	r2, r1
 8004398:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	031b      	lsls	r3, r3, #12
 80043a2:	4013      	ands	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043a6:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	4393      	bics	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b4:	4b30      	ldr	r3, [pc, #192]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043b6:	430a      	orrs	r2, r1
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	039b      	lsls	r3, r3, #14
 80043c2:	4013      	ands	r3, r2
 80043c4:	d016      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043c6:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d4:	4b28      	ldr	r3, [pc, #160]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043d6:	430a      	orrs	r2, r1
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	03db      	lsls	r3, r3, #15
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d106      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	0449      	lsls	r1, r1, #17
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	03db      	lsls	r3, r3, #15
 80043fc:	4013      	ands	r3, r2
 80043fe:	d016      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004410:	430a      	orrs	r2, r1
 8004412:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	045b      	lsls	r3, r3, #17
 800441c:	429a      	cmp	r2, r3
 800441e:	d106      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	0449      	lsls	r1, r1, #17
 800442a:	430a      	orrs	r2, r1
 800442c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4013      	ands	r3, r2
 8004438:	d016      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444a:	430a      	orrs	r2, r1
 800444c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	01db      	lsls	r3, r3, #7
 8004456:	429a      	cmp	r2, r3
 8004458:	d106      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	0249      	lsls	r1, r1, #9
 8004464:	430a      	orrs	r2, r1
 8004466:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004468:	2312      	movs	r3, #18
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	781b      	ldrb	r3, [r3, #0]
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b006      	add	sp, #24
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	40021000 	.word	0x40021000
 800447c:	40007000 	.word	0x40007000
 8004480:	fffffcff 	.word	0xfffffcff
 8004484:	fffeffff 	.word	0xfffeffff
 8004488:	00001388 	.word	0x00001388
 800448c:	efffffff 	.word	0xefffffff
 8004490:	fffff3ff 	.word	0xfffff3ff
 8004494:	fff3ffff 	.word	0xfff3ffff
 8004498:	ffcfffff 	.word	0xffcfffff
 800449c:	ffffcfff 	.word	0xffffcfff
 80044a0:	ffbfffff 	.word	0xffbfffff
 80044a4:	feffffff 	.word	0xfeffffff
 80044a8:	ffff3fff 	.word	0xffff3fff

080044ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044ac:	b5b0      	push	{r4, r5, r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044b4:	230f      	movs	r3, #15
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d100      	bne.n	80044c4 <HAL_RTC_Init+0x18>
 80044c2:	e080      	b.n	80045c6 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2229      	movs	r2, #41	; 0x29
 80044c8:	5c9b      	ldrb	r3, [r3, r2]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2228      	movs	r2, #40	; 0x28
 80044d4:	2100      	movs	r1, #0
 80044d6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2288      	movs	r2, #136	; 0x88
 80044dc:	0212      	lsls	r2, r2, #8
 80044de:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f004 f99e 	bl	8008824 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2229      	movs	r2, #41	; 0x29
 80044ec:	2102      	movs	r1, #2
 80044ee:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	22ca      	movs	r2, #202	; 0xca
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2253      	movs	r2, #83	; 0x53
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004500:	250f      	movs	r5, #15
 8004502:	197c      	adds	r4, r7, r5
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fa71 	bl	80049ee <RTC_EnterInitMode>
 800450c:	0003      	movs	r3, r0
 800450e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8004510:	0028      	movs	r0, r5
 8004512:	183b      	adds	r3, r7, r0
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d148      	bne.n	80045ac <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	492b      	ldr	r1, [pc, #172]	; (80045d4 <HAL_RTC_Init+0x128>)
 8004526:	400a      	ands	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6999      	ldr	r1, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6912      	ldr	r2, [r2, #16]
 8004550:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6919      	ldr	r1, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	041a      	lsls	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004566:	0005      	movs	r5, r0
 8004568:	183c      	adds	r4, r7, r0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f000 fa81 	bl	8004a74 <RTC_ExitInitMode>
 8004572:	0003      	movs	r3, r0
 8004574:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8004576:	197b      	adds	r3, r7, r5
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d116      	bne.n	80045ac <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	00d2      	lsls	r2, r2, #3
 800458a:	08d2      	lsrs	r2, r2, #3
 800458c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6999      	ldr	r1, [r3, #24]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80045b4:	230f      	movs	r3, #15
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2229      	movs	r2, #41	; 0x29
 80045c2:	2101      	movs	r1, #1
 80045c4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bdb0      	pop	{r4, r5, r7, pc}
 80045d4:	fb8fffbf 	.word	0xfb8fffbf

080045d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2228      	movs	r2, #40	; 0x28
 80045e8:	5c9b      	ldrb	r3, [r3, r2]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_RTC_SetTime+0x1a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e092      	b.n	8004718 <HAL_RTC_SetTime+0x140>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2228      	movs	r2, #40	; 0x28
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2229      	movs	r2, #41	; 0x29
 80045fe:	2102      	movs	r1, #2
 8004600:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	22ca      	movs	r2, #202	; 0xca
 8004608:	625a      	str	r2, [r3, #36]	; 0x24
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2253      	movs	r2, #83	; 0x53
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004612:	2513      	movs	r5, #19
 8004614:	197c      	adds	r4, r7, r5
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	0018      	movs	r0, r3
 800461a:	f000 f9e8 	bl	80049ee <RTC_EnterInitMode>
 800461e:	0003      	movs	r3, r0
 8004620:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004622:	197b      	adds	r3, r7, r5
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d162      	bne.n	80046f0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d125      	bne.n	800467c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	4013      	ands	r3, r2
 800463a:	d102      	bne.n	8004642 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fa58 	bl	8004afc <RTC_ByteToBcd2>
 800464c:	0003      	movs	r3, r0
 800464e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 fa51 	bl	8004afc <RTC_ByteToBcd2>
 800465a:	0003      	movs	r3, r0
 800465c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800465e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	789b      	ldrb	r3, [r3, #2]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 fa49 	bl	8004afc <RTC_ByteToBcd2>
 800466a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800466c:	0022      	movs	r2, r4
 800466e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	78db      	ldrb	r3, [r3, #3]
 8004674:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e017      	b.n	80046ac <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2240      	movs	r2, #64	; 0x40
 8004684:	4013      	ands	r3, r2
 8004686:	d102      	bne.n	800468e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800469a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	491b      	ldr	r1, [pc, #108]	; (8004720 <HAL_RTC_SetTime+0x148>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4918      	ldr	r1, [pc, #96]	; (8004724 <HAL_RTC_SetTime+0x14c>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046e0:	2313      	movs	r3, #19
 80046e2:	18fc      	adds	r4, r7, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 f9c4 	bl	8004a74 <RTC_ExitInitMode>
 80046ec:	0003      	movs	r3, r0
 80046ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80046f8:	2313      	movs	r3, #19
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2229      	movs	r2, #41	; 0x29
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2228      	movs	r2, #40	; 0x28
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

  return status;
 8004712:	2313      	movs	r3, #19
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b006      	add	sp, #24
 800471e:	bdb0      	pop	{r4, r5, r7, pc}
 8004720:	007f7f7f 	.word	0x007f7f7f
 8004724:	fffbffff 	.word	0xfffbffff

08004728 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	045b      	lsls	r3, r3, #17
 8004746:	0c5a      	lsrs	r2, r3, #17
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a22      	ldr	r2, [pc, #136]	; (80047dc <HAL_RTC_GetTime+0xb4>)
 8004754:	4013      	ands	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	b2db      	uxtb	r3, r3
 800475e:	223f      	movs	r2, #63	; 0x3f
 8004760:	4013      	ands	r3, r2
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b2db      	uxtb	r3, r3
 800476e:	227f      	movs	r2, #127	; 0x7f
 8004770:	4013      	ands	r3, r2
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	227f      	movs	r2, #127	; 0x7f
 800477e:	4013      	ands	r3, r2
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0d9b      	lsrs	r3, r3, #22
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11a      	bne.n	80047d2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 f9d3 	bl	8004b4c <RTC_Bcd2ToByte>
 80047a6:	0003      	movs	r3, r0
 80047a8:	001a      	movs	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 f9ca 	bl	8004b4c <RTC_Bcd2ToByte>
 80047b8:	0003      	movs	r3, r0
 80047ba:	001a      	movs	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	789b      	ldrb	r3, [r3, #2]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 f9c1 	bl	8004b4c <RTC_Bcd2ToByte>
 80047ca:	0003      	movs	r3, r0
 80047cc:	001a      	movs	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b006      	add	sp, #24
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	007f7f7f 	.word	0x007f7f7f

080047e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047e0:	b5b0      	push	{r4, r5, r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2228      	movs	r2, #40	; 0x28
 80047f0:	5c9b      	ldrb	r3, [r3, r2]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_RTC_SetDate+0x1a>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e07e      	b.n	80048f8 <HAL_RTC_SetDate+0x118>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2228      	movs	r2, #40	; 0x28
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2229      	movs	r2, #41	; 0x29
 8004806:	2102      	movs	r1, #2
 8004808:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10e      	bne.n	800482e <HAL_RTC_SetDate+0x4e>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	001a      	movs	r2, r3
 8004816:	2310      	movs	r3, #16
 8004818:	4013      	ands	r3, r2
 800481a:	d008      	beq.n	800482e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2210      	movs	r2, #16
 8004822:	4393      	bics	r3, r2
 8004824:	b2db      	uxtb	r3, r3
 8004826:	330a      	adds	r3, #10
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11c      	bne.n	800486e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	78db      	ldrb	r3, [r3, #3]
 8004838:	0018      	movs	r0, r3
 800483a:	f000 f95f 	bl	8004afc <RTC_ByteToBcd2>
 800483e:	0003      	movs	r3, r0
 8004840:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 f958 	bl	8004afc <RTC_ByteToBcd2>
 800484c:	0003      	movs	r3, r0
 800484e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004850:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	789b      	ldrb	r3, [r3, #2]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f950 	bl	8004afc <RTC_ByteToBcd2>
 800485c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800485e:	0022      	movs	r2, r4
 8004860:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	e00e      	b.n	800488c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	78db      	ldrb	r3, [r3, #3]
 8004872:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800487a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004880:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	22ca      	movs	r2, #202	; 0xca
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2253      	movs	r2, #83	; 0x53
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800489c:	2513      	movs	r5, #19
 800489e:	197c      	adds	r4, r7, r5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 f8a3 	bl	80049ee <RTC_EnterInitMode>
 80048a8:	0003      	movs	r3, r0
 80048aa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80048ac:	0028      	movs	r0, r5
 80048ae:	183b      	adds	r3, r7, r0
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4910      	ldr	r1, [pc, #64]	; (8004900 <HAL_RTC_SetDate+0x120>)
 80048be:	400a      	ands	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048c2:	183c      	adds	r4, r7, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 f8d4 	bl	8004a74 <RTC_ExitInitMode>
 80048cc:	0003      	movs	r3, r0
 80048ce:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	22ff      	movs	r2, #255	; 0xff
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80048d8:	2313      	movs	r3, #19
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2229      	movs	r2, #41	; 0x29
 80048e6:	2101      	movs	r1, #1
 80048e8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2228      	movs	r2, #40	; 0x28
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]

  return status;
 80048f2:	2313      	movs	r3, #19
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	781b      	ldrb	r3, [r3, #0]
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004900:	00ffff3f 	.word	0x00ffff3f

08004904 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4a21      	ldr	r2, [pc, #132]	; (800499c <HAL_RTC_GetDate+0x98>)
 8004918:	4013      	ands	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	b2db      	uxtb	r3, r3
 800492c:	221f      	movs	r2, #31
 800492e:	4013      	ands	r3, r2
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	223f      	movs	r2, #63	; 0x3f
 800493c:	4013      	ands	r3, r2
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	0b5b      	lsrs	r3, r3, #13
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2207      	movs	r2, #7
 800494c:	4013      	ands	r3, r2
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11a      	bne.n	8004990 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	78db      	ldrb	r3, [r3, #3]
 800495e:	0018      	movs	r0, r3
 8004960:	f000 f8f4 	bl	8004b4c <RTC_Bcd2ToByte>
 8004964:	0003      	movs	r3, r0
 8004966:	001a      	movs	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 f8eb 	bl	8004b4c <RTC_Bcd2ToByte>
 8004976:	0003      	movs	r3, r0
 8004978:	001a      	movs	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	789b      	ldrb	r3, [r3, #2]
 8004982:	0018      	movs	r0, r3
 8004984:	f000 f8e2 	bl	8004b4c <RTC_Bcd2ToByte>
 8004988:	0003      	movs	r3, r0
 800498a:	001a      	movs	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b006      	add	sp, #24
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	00ffff3f 	.word	0x00ffff3f

080049a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	21a0      	movs	r1, #160	; 0xa0
 80049b4:	438a      	bics	r2, r1
 80049b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80049b8:	f7fd fe0a 	bl	80025d0 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80049c0:	e00a      	b.n	80049d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049c2:	f7fd fe05 	bl	80025d0 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad2      	subs	r2, r2, r3
 80049cc:	23fa      	movs	r3, #250	; 0xfa
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d901      	bls.n	80049d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e006      	b.n	80049e6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	4013      	ands	r3, r2
 80049e2:	d0ee      	beq.n	80049c2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b004      	add	sp, #16
 80049ec:	bd80      	pop	{r7, pc}

080049ee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80049f6:	230f      	movs	r3, #15
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	4013      	ands	r3, r2
 8004a08:	d12c      	bne.n	8004a64 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	430a      	orrs	r2, r1
 8004a18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a1a:	f7fd fdd9 	bl	80025d0 <HAL_GetTick>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a22:	e014      	b.n	8004a4e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a24:	f7fd fdd4 	bl	80025d0 <HAL_GetTick>
 8004a28:	0002      	movs	r2, r0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	200f      	movs	r0, #15
 8004a30:	183b      	adds	r3, r7, r0
 8004a32:	1839      	adds	r1, r7, r0
 8004a34:	7809      	ldrb	r1, [r1, #0]
 8004a36:	7019      	strb	r1, [r3, #0]
 8004a38:	23fa      	movs	r3, #250	; 0xfa
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d906      	bls.n	8004a4e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004a40:	183b      	adds	r3, r7, r0
 8004a42:	2203      	movs	r2, #3
 8004a44:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2229      	movs	r2, #41	; 0x29
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2240      	movs	r2, #64	; 0x40
 8004a56:	4013      	ands	r3, r2
 8004a58:	d104      	bne.n	8004a64 <RTC_EnterInitMode+0x76>
 8004a5a:	230f      	movs	r3, #15
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d1df      	bne.n	8004a24 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a64:	230f      	movs	r3, #15
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	781b      	ldrb	r3, [r3, #0]
}
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	240f      	movs	r4, #15
 8004a7e:	193b      	adds	r3, r7, r4
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004a84:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2220      	movs	r2, #32
 8004a96:	4013      	ands	r3, r2
 8004a98:	d10d      	bne.n	8004ab6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff ff7f 	bl	80049a0 <HAL_RTC_WaitForSynchro>
 8004aa2:	1e03      	subs	r3, r0, #0
 8004aa4:	d021      	beq.n	8004aea <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2229      	movs	r2, #41	; 0x29
 8004aaa:	2103      	movs	r1, #3
 8004aac:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e019      	b.n	8004aea <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004abc:	2120      	movs	r1, #32
 8004abe:	438a      	bics	r2, r1
 8004ac0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7ff ff6b 	bl	80049a0 <HAL_RTC_WaitForSynchro>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d007      	beq.n	8004ade <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2229      	movs	r2, #41	; 0x29
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2203      	movs	r2, #3
 8004adc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <RTC_ExitInitMode+0x84>)
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004aea:	230f      	movs	r3, #15
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b005      	add	sp, #20
 8004af6:	bd90      	pop	{r4, r7, pc}
 8004af8:	40002800 	.word	0x40002800

08004afc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	0002      	movs	r2, r0
 8004b04:	1dfb      	adds	r3, r7, #7
 8004b06:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004b0c:	230b      	movs	r3, #11
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	1dfa      	adds	r2, r7, #7
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004b16:	e008      	b.n	8004b2a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004b1e:	220b      	movs	r2, #11
 8004b20:	18bb      	adds	r3, r7, r2
 8004b22:	18ba      	adds	r2, r7, r2
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	3a0a      	subs	r2, #10
 8004b28:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004b2a:	210b      	movs	r1, #11
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d8f1      	bhi.n	8004b18 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b2db      	uxtb	r3, r3
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b004      	add	sp, #16
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	0002      	movs	r2, r0
 8004b54:	1dfb      	adds	r3, r7, #7
 8004b56:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004b58:	1dfb      	adds	r3, r7, #7
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	001a      	movs	r2, r3
 8004b62:	0013      	movs	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	1dfb      	adds	r3, r7, #7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	210f      	movs	r1, #15
 8004b76:	400b      	ands	r3, r1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	18d3      	adds	r3, r2, r3
 8004b7c:	b2db      	uxtb	r3, r3
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b004      	add	sp, #16
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e04a      	b.n	8004c2e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	223d      	movs	r2, #61	; 0x3d
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	223c      	movs	r2, #60	; 0x3c
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f003 fe76 	bl	80088a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	223d      	movs	r2, #61	; 0x3d
 8004bb8:	2102      	movs	r1, #2
 8004bba:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	0010      	movs	r0, r2
 8004bc8:	f000 fab0 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2248      	movs	r2, #72	; 0x48
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	223e      	movs	r2, #62	; 0x3e
 8004bd8:	2101      	movs	r1, #1
 8004bda:	5499      	strb	r1, [r3, r2]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	223f      	movs	r2, #63	; 0x3f
 8004be0:	2101      	movs	r1, #1
 8004be2:	5499      	strb	r1, [r3, r2]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2240      	movs	r2, #64	; 0x40
 8004be8:	2101      	movs	r1, #1
 8004bea:	5499      	strb	r1, [r3, r2]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2241      	movs	r2, #65	; 0x41
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	5499      	strb	r1, [r3, r2]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2242      	movs	r2, #66	; 0x42
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2243      	movs	r2, #67	; 0x43
 8004c00:	2101      	movs	r1, #1
 8004c02:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2244      	movs	r2, #68	; 0x44
 8004c08:	2101      	movs	r1, #1
 8004c0a:	5499      	strb	r1, [r3, r2]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2245      	movs	r2, #69	; 0x45
 8004c10:	2101      	movs	r1, #1
 8004c12:	5499      	strb	r1, [r3, r2]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2246      	movs	r2, #70	; 0x46
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5499      	strb	r1, [r3, r2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2247      	movs	r2, #71	; 0x47
 8004c20:	2101      	movs	r1, #1
 8004c22:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	223d      	movs	r2, #61	; 0x3d
 8004c28:	2101      	movs	r1, #1
 8004c2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b002      	add	sp, #8
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	223d      	movs	r2, #61	; 0x3d
 8004c44:	5c9b      	ldrb	r3, [r3, r2]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d001      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e042      	b.n	8004cd6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	223d      	movs	r2, #61	; 0x3d
 8004c54:	2102      	movs	r1, #2
 8004c56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2101      	movs	r1, #1
 8004c64:	430a      	orrs	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xa8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00f      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x5a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	05db      	lsls	r3, r3, #23
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x5a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xac>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x5a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d116      	bne.n	8004cc0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIM_Base_Start_IT+0xb4>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d016      	beq.n	8004cd2 <HAL_TIM_Base_Start_IT+0x9a>
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	025b      	lsls	r3, r3, #9
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d011      	beq.n	8004cd2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	e008      	b.n	8004cd2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e000      	b.n	8004cd4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d124      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d11d      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	4252      	negs	r2, r2
 8004d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f9e2 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004d38:	e007      	b.n	8004d4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 f9d5 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f000 f9e1 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2204      	movs	r2, #4
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d125      	bne.n	8004daa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2204      	movs	r2, #4
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d11e      	bne.n	8004daa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2205      	movs	r2, #5
 8004d72:	4252      	negs	r2, r2
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	23c0      	movs	r3, #192	; 0xc0
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4013      	ands	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f9b5 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004d92:	e007      	b.n	8004da4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f9a8 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 f9b4 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2208      	movs	r2, #8
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d124      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d11d      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2209      	movs	r2, #9
 8004dcc:	4252      	negs	r2, r2
 8004dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	4013      	ands	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 f989 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004dea:	e007      	b.n	8004dfc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 f97c 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 f988 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2210      	movs	r2, #16
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d125      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2210      	movs	r2, #16
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d11e      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2211      	movs	r2, #17
 8004e24:	4252      	negs	r2, r2
 8004e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	23c0      	movs	r3, #192	; 0xc0
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 f95c 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004e44:	e007      	b.n	8004e56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 f94f 	bl	80050ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 f95b 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2201      	movs	r2, #1
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10f      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d108      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	4252      	negs	r2, r2
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f002 fc61 	bl	800774c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	d10f      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d108      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2281      	movs	r2, #129	; 0x81
 8004eac:	4252      	negs	r2, r2
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 facc 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10e      	bne.n	8004eea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <HAL_TIM_IRQHandler+0x260>)
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 fabb 	bl	8005460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2240      	movs	r2, #64	; 0x40
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d10f      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d108      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2241      	movs	r2, #65	; 0x41
 8004f0c:	4252      	negs	r2, r2
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 f902 	bl	800511c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d10f      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d108      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2221      	movs	r2, #33	; 0x21
 8004f3a:	4252      	negs	r2, r2
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f000 fa7d 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	fffffeff 	.word	0xfffffeff

08004f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	223c      	movs	r2, #60	; 0x3c
 8004f62:	5c9b      	ldrb	r3, [r3, r2]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_ConfigClockSource+0x18>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e0b7      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x188>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	223c      	movs	r2, #60	; 0x3c
 8004f70:	2101      	movs	r1, #1
 8004f72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	223d      	movs	r2, #61	; 0x3d
 8004f78:	2102      	movs	r1, #2
 8004f7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a57      	ldr	r2, [pc, #348]	; (80050e4 <HAL_TIM_ConfigClockSource+0x190>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a56      	ldr	r2, [pc, #344]	; (80050e8 <HAL_TIM_ConfigClockSource+0x194>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2280      	movs	r2, #128	; 0x80
 8004fa2:	0192      	lsls	r2, r2, #6
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xd6>
 8004fa8:	2280      	movs	r2, #128	; 0x80
 8004faa:	0192      	lsls	r2, r2, #6
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d900      	bls.n	8004fb2 <HAL_TIM_ConfigClockSource+0x5e>
 8004fb0:	e088      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	0152      	lsls	r2, r2, #5
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d100      	bne.n	8004fbc <HAL_TIM_ConfigClockSource+0x68>
 8004fba:	e085      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x174>
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	0152      	lsls	r2, r2, #5
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d900      	bls.n	8004fc6 <HAL_TIM_ConfigClockSource+0x72>
 8004fc4:	e07e      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fc6:	2b70      	cmp	r3, #112	; 0x70
 8004fc8:	d018      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0xa8>
 8004fca:	d900      	bls.n	8004fce <HAL_TIM_ConfigClockSource+0x7a>
 8004fcc:	e07a      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fce:	2b60      	cmp	r3, #96	; 0x60
 8004fd0:	d04f      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x11e>
 8004fd2:	d900      	bls.n	8004fd6 <HAL_TIM_ConfigClockSource+0x82>
 8004fd4:	e076      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fd6:	2b50      	cmp	r3, #80	; 0x50
 8004fd8:	d03b      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0xfe>
 8004fda:	d900      	bls.n	8004fde <HAL_TIM_ConfigClockSource+0x8a>
 8004fdc:	e072      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d057      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x13e>
 8004fe2:	d900      	bls.n	8004fe6 <HAL_TIM_ConfigClockSource+0x92>
 8004fe4:	e06e      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fe6:	2b30      	cmp	r3, #48	; 0x30
 8004fe8:	d063      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004fea:	d86b      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d060      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ff0:	d868      	bhi.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d05d      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d05b      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ffa:	e063      	b.n	80050c4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6899      	ldr	r1, [r3, #8]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f000 f98a 	bl	8005324 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2277      	movs	r2, #119	; 0x77
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	609a      	str	r2, [r3, #8]
      break;
 8005028:	e04f      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f000 f973 	bl	8005324 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2180      	movs	r1, #128	; 0x80
 800504a:	01c9      	lsls	r1, r1, #7
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
      break;
 8005050:	e03b      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	001a      	movs	r2, r3
 8005060:	f000 f8e4 	bl	800522c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2150      	movs	r1, #80	; 0x50
 800506a:	0018      	movs	r0, r3
 800506c:	f000 f93e 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 8005070:	e02b      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	001a      	movs	r2, r3
 8005080:	f000 f902 	bl	8005288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2160      	movs	r1, #96	; 0x60
 800508a:	0018      	movs	r0, r3
 800508c:	f000 f92e 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 8005090:	e01b      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	001a      	movs	r2, r3
 80050a0:	f000 f8c4 	bl	800522c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2140      	movs	r1, #64	; 0x40
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 f91e 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 80050b0:	e00b      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	0019      	movs	r1, r3
 80050bc:	0010      	movs	r0, r2
 80050be:	f000 f915 	bl	80052ec <TIM_ITRx_SetConfig>
        break;
 80050c2:	e002      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
      break;
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	e000      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x176>
      break;
 80050c8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	223d      	movs	r2, #61	; 0x3d
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223c      	movs	r2, #60	; 0x3c
 80050d6:	2100      	movs	r1, #0
 80050d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	ffceff88 	.word	0xffceff88
 80050e8:	ffff00ff 	.word	0xffff00ff

080050ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f4:	46c0      	nop			; (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}

0800512c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a34      	ldr	r2, [pc, #208]	; (8005210 <TIM_Base_SetConfig+0xe4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d008      	beq.n	8005156 <TIM_Base_SetConfig+0x2a>
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	05db      	lsls	r3, r3, #23
 800514a:	429a      	cmp	r2, r3
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x2a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a30      	ldr	r2, [pc, #192]	; (8005214 <TIM_Base_SetConfig+0xe8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2270      	movs	r2, #112	; 0x70
 800515a:	4393      	bics	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a29      	ldr	r2, [pc, #164]	; (8005210 <TIM_Base_SetConfig+0xe4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	05db      	lsls	r3, r3, #23
 8005176:	429a      	cmp	r2, r3
 8005178:	d013      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a25      	ldr	r2, [pc, #148]	; (8005214 <TIM_Base_SetConfig+0xe8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a24      	ldr	r2, [pc, #144]	; (8005218 <TIM_Base_SetConfig+0xec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a23      	ldr	r2, [pc, #140]	; (800521c <TIM_Base_SetConfig+0xf0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a22      	ldr	r2, [pc, #136]	; (8005220 <TIM_Base_SetConfig+0xf4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_Base_SetConfig+0x76>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a21      	ldr	r2, [pc, #132]	; (8005224 <TIM_Base_SetConfig+0xf8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a20      	ldr	r2, [pc, #128]	; (8005228 <TIM_Base_SetConfig+0xfc>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	4393      	bics	r3, r2
 80051ba:	001a      	movs	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <TIM_Base_SetConfig+0xe4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_Base_SetConfig+0xce>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <TIM_Base_SetConfig+0xf0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_Base_SetConfig+0xce>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a0c      	ldr	r2, [pc, #48]	; (8005220 <TIM_Base_SetConfig+0xf4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_Base_SetConfig+0xce>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <TIM_Base_SetConfig+0xf8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d103      	bne.n	8005202 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	615a      	str	r2, [r3, #20]
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b004      	add	sp, #16
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40002000 	.word	0x40002000
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800
 8005228:	fffffcff 	.word	0xfffffcff

0800522c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	2201      	movs	r2, #1
 8005244:	4393      	bics	r3, r2
 8005246:	001a      	movs	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	22f0      	movs	r2, #240	; 0xf0
 8005256:	4393      	bics	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	220a      	movs	r2, #10
 8005268:	4393      	bics	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b006      	add	sp, #24
 8005286:	bd80      	pop	{r7, pc}

08005288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	2210      	movs	r2, #16
 800529a:	4393      	bics	r3, r2
 800529c:	001a      	movs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4a0d      	ldr	r2, [pc, #52]	; (80052e8 <TIM_TI2_ConfigInputStage+0x60>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	031b      	lsls	r3, r3, #12
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	22a0      	movs	r2, #160	; 0xa0
 80052c4:	4393      	bics	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b006      	add	sp, #24
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	ffff0fff 	.word	0xffff0fff

080052ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a08      	ldr	r2, [pc, #32]	; (8005320 <TIM_ITRx_SetConfig+0x34>)
 8005300:	4013      	ands	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	2207      	movs	r2, #7
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	b004      	add	sp, #16
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	ffcfff8f 	.word	0xffcfff8f

08005324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4a09      	ldr	r2, [pc, #36]	; (8005360 <TIM_ETR_SetConfig+0x3c>)
 800533c:	4013      	ands	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	431a      	orrs	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4313      	orrs	r3, r2
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	46c0      	nop			; (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b006      	add	sp, #24
 800535e:	bd80      	pop	{r7, pc}
 8005360:	ffff00ff 	.word	0xffff00ff

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	223c      	movs	r2, #60	; 0x3c
 8005372:	5c9b      	ldrb	r3, [r3, r2]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e055      	b.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	223c      	movs	r2, #60	; 0x3c
 8005380:	2101      	movs	r1, #1
 8005382:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223d      	movs	r2, #61	; 0x3d
 8005388:	2102      	movs	r1, #2
 800538a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a23      	ldr	r2, [pc, #140]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2270      	movs	r2, #112	; 0x70
 80053bc:	4393      	bics	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00f      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	05db      	lsls	r3, r3, #23
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d009      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a12      	ldr	r2, [pc, #72]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d10c      	bne.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	4393      	bics	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	223d      	movs	r2, #61	; 0x3d
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	223c      	movs	r2, #60	; 0x3c
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40012c00 	.word	0x40012c00
 8005434:	ff0fffff 	.word	0xff0fffff
 8005438:	40000400 	.word	0x40000400
 800543c:	40014000 	.word	0x40014000

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e046      	b.n	8005510 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2284      	movs	r2, #132	; 0x84
 8005486:	589b      	ldr	r3, [r3, r2]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	2100      	movs	r1, #0
 8005492:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0018      	movs	r0, r3
 8005498:	f003 fa48 	bl	800892c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2284      	movs	r2, #132	; 0x84
 80054a0:	2124      	movs	r1, #36	; 0x24
 80054a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	438a      	bics	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	0018      	movs	r0, r3
 80054b8:	f000 f830 	bl	800551c <UART_SetConfig>
 80054bc:	0003      	movs	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e024      	b.n	8005510 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 fb01 	bl	8005ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	490d      	ldr	r1, [pc, #52]	; (8005518 <HAL_UART_Init+0xa8>)
 80054e2:	400a      	ands	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	212a      	movs	r1, #42	; 0x2a
 80054f2:	438a      	bics	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2101      	movs	r1, #1
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f000 fb99 	bl	8005c40 <UART_CheckIdleState>
 800550e:	0003      	movs	r3, r0
}
 8005510:	0018      	movs	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}
 8005518:	ffffb7ff 	.word	0xffffb7ff

0800551c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800551c:	b5b0      	push	{r4, r5, r7, lr}
 800551e:	b090      	sub	sp, #64	; 0x40
 8005520:	af00      	add	r7, sp, #0
 8005522:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005524:	231a      	movs	r3, #26
 8005526:	2220      	movs	r2, #32
 8005528:	4694      	mov	ip, r2
 800552a:	44bc      	add	ip, r7
 800552c:	4463      	add	r3, ip
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	431a      	orrs	r2, r3
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	431a      	orrs	r2, r3
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	4313      	orrs	r3, r2
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4ab9      	ldr	r2, [pc, #740]	; (8005838 <UART_SetConfig+0x31c>)
 8005552:	4013      	ands	r3, r2
 8005554:	0019      	movs	r1, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555c:	430b      	orrs	r3, r1
 800555e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4ab5      	ldr	r2, [pc, #724]	; (800583c <UART_SetConfig+0x320>)
 8005568:	4013      	ands	r3, r2
 800556a:	0018      	movs	r0, r3
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	68d9      	ldr	r1, [r3, #12]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	0003      	movs	r3, r0
 8005576:	430b      	orrs	r3, r1
 8005578:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4aae      	ldr	r2, [pc, #696]	; (8005840 <UART_SetConfig+0x324>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005590:	4313      	orrs	r3, r2
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4aaa      	ldr	r2, [pc, #680]	; (8005844 <UART_SetConfig+0x328>)
 800559c:	4013      	ands	r3, r2
 800559e:	0019      	movs	r1, r3
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	430b      	orrs	r3, r1
 80055a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	220f      	movs	r2, #15
 80055b2:	4393      	bics	r3, r2
 80055b4:	0018      	movs	r0, r3
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	0003      	movs	r3, r0
 80055c0:	430b      	orrs	r3, r1
 80055c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a9f      	ldr	r2, [pc, #636]	; (8005848 <UART_SetConfig+0x32c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d136      	bne.n	800563c <UART_SetConfig+0x120>
 80055ce:	4b9f      	ldr	r3, [pc, #636]	; (800584c <UART_SetConfig+0x330>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	2203      	movs	r2, #3
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d020      	beq.n	800561c <UART_SetConfig+0x100>
 80055da:	d827      	bhi.n	800562c <UART_SetConfig+0x110>
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d00d      	beq.n	80055fc <UART_SetConfig+0xe0>
 80055e0:	d824      	bhi.n	800562c <UART_SetConfig+0x110>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <UART_SetConfig+0xd0>
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d010      	beq.n	800560c <UART_SetConfig+0xf0>
 80055ea:	e01f      	b.n	800562c <UART_SetConfig+0x110>
 80055ec:	231b      	movs	r3, #27
 80055ee:	2220      	movs	r2, #32
 80055f0:	4694      	mov	ip, r2
 80055f2:	44bc      	add	ip, r7
 80055f4:	4463      	add	r3, ip
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	e0c5      	b.n	8005788 <UART_SetConfig+0x26c>
 80055fc:	231b      	movs	r3, #27
 80055fe:	2220      	movs	r2, #32
 8005600:	4694      	mov	ip, r2
 8005602:	44bc      	add	ip, r7
 8005604:	4463      	add	r3, ip
 8005606:	2202      	movs	r2, #2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e0bd      	b.n	8005788 <UART_SetConfig+0x26c>
 800560c:	231b      	movs	r3, #27
 800560e:	2220      	movs	r2, #32
 8005610:	4694      	mov	ip, r2
 8005612:	44bc      	add	ip, r7
 8005614:	4463      	add	r3, ip
 8005616:	2204      	movs	r2, #4
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e0b5      	b.n	8005788 <UART_SetConfig+0x26c>
 800561c:	231b      	movs	r3, #27
 800561e:	2220      	movs	r2, #32
 8005620:	4694      	mov	ip, r2
 8005622:	44bc      	add	ip, r7
 8005624:	4463      	add	r3, ip
 8005626:	2208      	movs	r2, #8
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e0ad      	b.n	8005788 <UART_SetConfig+0x26c>
 800562c:	231b      	movs	r3, #27
 800562e:	2220      	movs	r2, #32
 8005630:	4694      	mov	ip, r2
 8005632:	44bc      	add	ip, r7
 8005634:	4463      	add	r3, ip
 8005636:	2210      	movs	r2, #16
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e0a5      	b.n	8005788 <UART_SetConfig+0x26c>
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a83      	ldr	r2, [pc, #524]	; (8005850 <UART_SetConfig+0x334>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d136      	bne.n	80056b4 <UART_SetConfig+0x198>
 8005646:	4b81      	ldr	r3, [pc, #516]	; (800584c <UART_SetConfig+0x330>)
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	220c      	movs	r2, #12
 800564c:	4013      	ands	r3, r2
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d020      	beq.n	8005694 <UART_SetConfig+0x178>
 8005652:	d827      	bhi.n	80056a4 <UART_SetConfig+0x188>
 8005654:	2b08      	cmp	r3, #8
 8005656:	d00d      	beq.n	8005674 <UART_SetConfig+0x158>
 8005658:	d824      	bhi.n	80056a4 <UART_SetConfig+0x188>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <UART_SetConfig+0x148>
 800565e:	2b04      	cmp	r3, #4
 8005660:	d010      	beq.n	8005684 <UART_SetConfig+0x168>
 8005662:	e01f      	b.n	80056a4 <UART_SetConfig+0x188>
 8005664:	231b      	movs	r3, #27
 8005666:	2220      	movs	r2, #32
 8005668:	4694      	mov	ip, r2
 800566a:	44bc      	add	ip, r7
 800566c:	4463      	add	r3, ip
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e089      	b.n	8005788 <UART_SetConfig+0x26c>
 8005674:	231b      	movs	r3, #27
 8005676:	2220      	movs	r2, #32
 8005678:	4694      	mov	ip, r2
 800567a:	44bc      	add	ip, r7
 800567c:	4463      	add	r3, ip
 800567e:	2202      	movs	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e081      	b.n	8005788 <UART_SetConfig+0x26c>
 8005684:	231b      	movs	r3, #27
 8005686:	2220      	movs	r2, #32
 8005688:	4694      	mov	ip, r2
 800568a:	44bc      	add	ip, r7
 800568c:	4463      	add	r3, ip
 800568e:	2204      	movs	r2, #4
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e079      	b.n	8005788 <UART_SetConfig+0x26c>
 8005694:	231b      	movs	r3, #27
 8005696:	2220      	movs	r2, #32
 8005698:	4694      	mov	ip, r2
 800569a:	44bc      	add	ip, r7
 800569c:	4463      	add	r3, ip
 800569e:	2208      	movs	r2, #8
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e071      	b.n	8005788 <UART_SetConfig+0x26c>
 80056a4:	231b      	movs	r3, #27
 80056a6:	2220      	movs	r2, #32
 80056a8:	4694      	mov	ip, r2
 80056aa:	44bc      	add	ip, r7
 80056ac:	4463      	add	r3, ip
 80056ae:	2210      	movs	r2, #16
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e069      	b.n	8005788 <UART_SetConfig+0x26c>
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a66      	ldr	r2, [pc, #408]	; (8005854 <UART_SetConfig+0x338>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d107      	bne.n	80056ce <UART_SetConfig+0x1b2>
 80056be:	231b      	movs	r3, #27
 80056c0:	2220      	movs	r2, #32
 80056c2:	4694      	mov	ip, r2
 80056c4:	44bc      	add	ip, r7
 80056c6:	4463      	add	r3, ip
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e05c      	b.n	8005788 <UART_SetConfig+0x26c>
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a61      	ldr	r2, [pc, #388]	; (8005858 <UART_SetConfig+0x33c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d107      	bne.n	80056e8 <UART_SetConfig+0x1cc>
 80056d8:	231b      	movs	r3, #27
 80056da:	2220      	movs	r2, #32
 80056dc:	4694      	mov	ip, r2
 80056de:	44bc      	add	ip, r7
 80056e0:	4463      	add	r3, ip
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e04f      	b.n	8005788 <UART_SetConfig+0x26c>
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a54      	ldr	r2, [pc, #336]	; (8005840 <UART_SetConfig+0x324>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d143      	bne.n	800577a <UART_SetConfig+0x25e>
 80056f2:	4b56      	ldr	r3, [pc, #344]	; (800584c <UART_SetConfig+0x330>)
 80056f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f6:	23c0      	movs	r3, #192	; 0xc0
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	4013      	ands	r3, r2
 80056fc:	22c0      	movs	r2, #192	; 0xc0
 80056fe:	0112      	lsls	r2, r2, #4
 8005700:	4293      	cmp	r3, r2
 8005702:	d02a      	beq.n	800575a <UART_SetConfig+0x23e>
 8005704:	22c0      	movs	r2, #192	; 0xc0
 8005706:	0112      	lsls	r2, r2, #4
 8005708:	4293      	cmp	r3, r2
 800570a:	d82e      	bhi.n	800576a <UART_SetConfig+0x24e>
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	0112      	lsls	r2, r2, #4
 8005710:	4293      	cmp	r3, r2
 8005712:	d012      	beq.n	800573a <UART_SetConfig+0x21e>
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	0112      	lsls	r2, r2, #4
 8005718:	4293      	cmp	r3, r2
 800571a:	d826      	bhi.n	800576a <UART_SetConfig+0x24e>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <UART_SetConfig+0x20e>
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	00d2      	lsls	r2, r2, #3
 8005724:	4293      	cmp	r3, r2
 8005726:	d010      	beq.n	800574a <UART_SetConfig+0x22e>
 8005728:	e01f      	b.n	800576a <UART_SetConfig+0x24e>
 800572a:	231b      	movs	r3, #27
 800572c:	2220      	movs	r2, #32
 800572e:	4694      	mov	ip, r2
 8005730:	44bc      	add	ip, r7
 8005732:	4463      	add	r3, ip
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e026      	b.n	8005788 <UART_SetConfig+0x26c>
 800573a:	231b      	movs	r3, #27
 800573c:	2220      	movs	r2, #32
 800573e:	4694      	mov	ip, r2
 8005740:	44bc      	add	ip, r7
 8005742:	4463      	add	r3, ip
 8005744:	2202      	movs	r2, #2
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	e01e      	b.n	8005788 <UART_SetConfig+0x26c>
 800574a:	231b      	movs	r3, #27
 800574c:	2220      	movs	r2, #32
 800574e:	4694      	mov	ip, r2
 8005750:	44bc      	add	ip, r7
 8005752:	4463      	add	r3, ip
 8005754:	2204      	movs	r2, #4
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e016      	b.n	8005788 <UART_SetConfig+0x26c>
 800575a:	231b      	movs	r3, #27
 800575c:	2220      	movs	r2, #32
 800575e:	4694      	mov	ip, r2
 8005760:	44bc      	add	ip, r7
 8005762:	4463      	add	r3, ip
 8005764:	2208      	movs	r2, #8
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e00e      	b.n	8005788 <UART_SetConfig+0x26c>
 800576a:	231b      	movs	r3, #27
 800576c:	2220      	movs	r2, #32
 800576e:	4694      	mov	ip, r2
 8005770:	44bc      	add	ip, r7
 8005772:	4463      	add	r3, ip
 8005774:	2210      	movs	r2, #16
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e006      	b.n	8005788 <UART_SetConfig+0x26c>
 800577a:	231b      	movs	r3, #27
 800577c:	2220      	movs	r2, #32
 800577e:	4694      	mov	ip, r2
 8005780:	44bc      	add	ip, r7
 8005782:	4463      	add	r3, ip
 8005784:	2210      	movs	r2, #16
 8005786:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <UART_SetConfig+0x324>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d000      	beq.n	8005794 <UART_SetConfig+0x278>
 8005792:	e0ad      	b.n	80058f0 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005794:	231b      	movs	r3, #27
 8005796:	2220      	movs	r2, #32
 8005798:	4694      	mov	ip, r2
 800579a:	44bc      	add	ip, r7
 800579c:	4463      	add	r3, ip
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d015      	beq.n	80057d0 <UART_SetConfig+0x2b4>
 80057a4:	dc18      	bgt.n	80057d8 <UART_SetConfig+0x2bc>
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00d      	beq.n	80057c6 <UART_SetConfig+0x2aa>
 80057aa:	dc15      	bgt.n	80057d8 <UART_SetConfig+0x2bc>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <UART_SetConfig+0x29a>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d005      	beq.n	80057c0 <UART_SetConfig+0x2a4>
 80057b4:	e010      	b.n	80057d8 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b6:	f7fe fcab 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 80057ba:	0003      	movs	r3, r0
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057be:	e015      	b.n	80057ec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c0:	4b26      	ldr	r3, [pc, #152]	; (800585c <UART_SetConfig+0x340>)
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057c4:	e012      	b.n	80057ec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c6:	f7fe fc17 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 80057ca:	0003      	movs	r3, r0
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057ce:	e00d      	b.n	80057ec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057d6:	e009      	b.n	80057ec <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80057dc:	231a      	movs	r3, #26
 80057de:	2220      	movs	r2, #32
 80057e0:	4694      	mov	ip, r2
 80057e2:	44bc      	add	ip, r7
 80057e4:	4463      	add	r3, ip
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
        break;
 80057ea:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d100      	bne.n	80057f4 <UART_SetConfig+0x2d8>
 80057f2:	e154      	b.n	8005a9e <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <UART_SetConfig+0x344>)
 80057fa:	0052      	lsls	r2, r2, #1
 80057fc:	5ad3      	ldrh	r3, [r2, r3]
 80057fe:	0019      	movs	r1, r3
 8005800:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005802:	f7fa fc7f 	bl	8000104 <__udivsi3>
 8005806:	0003      	movs	r3, r0
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	0013      	movs	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	189b      	adds	r3, r3, r2
 8005814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005816:	429a      	cmp	r2, r3
 8005818:	d305      	bcc.n	8005826 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	429a      	cmp	r2, r3
 8005824:	d91e      	bls.n	8005864 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005826:	231a      	movs	r3, #26
 8005828:	2220      	movs	r2, #32
 800582a:	4694      	mov	ip, r2
 800582c:	44bc      	add	ip, r7
 800582e:	4463      	add	r3, ip
 8005830:	2201      	movs	r2, #1
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e133      	b.n	8005a9e <UART_SetConfig+0x582>
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	cfff69f3 	.word	0xcfff69f3
 800583c:	ffffcfff 	.word	0xffffcfff
 8005840:	40008000 	.word	0x40008000
 8005844:	11fff4ff 	.word	0x11fff4ff
 8005848:	40013800 	.word	0x40013800
 800584c:	40021000 	.word	0x40021000
 8005850:	40004400 	.word	0x40004400
 8005854:	40004800 	.word	0x40004800
 8005858:	40004c00 	.word	0x40004c00
 800585c:	00f42400 	.word	0x00f42400
 8005860:	08008d4c 	.word	0x08008d4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	2300      	movs	r3, #0
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005870:	4b97      	ldr	r3, [pc, #604]	; (8005ad0 <UART_SetConfig+0x5b4>)
 8005872:	0052      	lsls	r2, r2, #1
 8005874:	5ad3      	ldrh	r3, [r2, r3]
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	69b8      	ldr	r0, [r7, #24]
 8005882:	69f9      	ldr	r1, [r7, #28]
 8005884:	f7fa fdb4 	bl	80003f0 <__aeabi_uldivmod>
 8005888:	0002      	movs	r2, r0
 800588a:	000b      	movs	r3, r1
 800588c:	0e11      	lsrs	r1, r2, #24
 800588e:	021d      	lsls	r5, r3, #8
 8005890:	430d      	orrs	r5, r1
 8005892:	0214      	lsls	r4, r2, #8
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68b8      	ldr	r0, [r7, #8]
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	1900      	adds	r0, r0, r4
 80058a6:	4169      	adcs	r1, r5
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f7fa fd9b 	bl	80003f0 <__aeabi_uldivmod>
 80058ba:	0002      	movs	r2, r0
 80058bc:	000b      	movs	r3, r1
 80058be:	0013      	movs	r3, r2
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c4:	23c0      	movs	r3, #192	; 0xc0
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d309      	bcc.n	80058e0 <UART_SetConfig+0x3c4>
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	035b      	lsls	r3, r3, #13
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d204      	bcs.n	80058e0 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e0de      	b.n	8005a9e <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 80058e0:	231a      	movs	r3, #26
 80058e2:	2220      	movs	r2, #32
 80058e4:	4694      	mov	ip, r2
 80058e6:	44bc      	add	ip, r7
 80058e8:	4463      	add	r3, ip
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e0d6      	b.n	8005a9e <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d000      	beq.n	80058fe <UART_SetConfig+0x3e2>
 80058fc:	e074      	b.n	80059e8 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80058fe:	231b      	movs	r3, #27
 8005900:	2220      	movs	r2, #32
 8005902:	4694      	mov	ip, r2
 8005904:	44bc      	add	ip, r7
 8005906:	4463      	add	r3, ip
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d015      	beq.n	800593a <UART_SetConfig+0x41e>
 800590e:	dc18      	bgt.n	8005942 <UART_SetConfig+0x426>
 8005910:	2b04      	cmp	r3, #4
 8005912:	d00d      	beq.n	8005930 <UART_SetConfig+0x414>
 8005914:	dc15      	bgt.n	8005942 <UART_SetConfig+0x426>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <UART_SetConfig+0x404>
 800591a:	2b02      	cmp	r3, #2
 800591c:	d005      	beq.n	800592a <UART_SetConfig+0x40e>
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe fbf6 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8005924:	0003      	movs	r3, r0
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005928:	e015      	b.n	8005956 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592a:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <UART_SetConfig+0x5b8>)
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800592e:	e012      	b.n	8005956 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005930:	f7fe fb62 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8005934:	0003      	movs	r3, r0
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005938:	e00d      	b.n	8005956 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005940:	e009      	b.n	8005956 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005946:	231a      	movs	r3, #26
 8005948:	2220      	movs	r2, #32
 800594a:	4694      	mov	ip, r2
 800594c:	44bc      	add	ip, r7
 800594e:	4463      	add	r3, ip
 8005950:	2201      	movs	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]
        break;
 8005954:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	2b00      	cmp	r3, #0
 800595a:	d100      	bne.n	800595e <UART_SetConfig+0x442>
 800595c:	e09f      	b.n	8005a9e <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005962:	4b5b      	ldr	r3, [pc, #364]	; (8005ad0 <UART_SetConfig+0x5b4>)
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	5ad3      	ldrh	r3, [r2, r3]
 8005968:	0019      	movs	r1, r3
 800596a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800596c:	f7fa fbca 	bl	8000104 <__udivsi3>
 8005970:	0003      	movs	r3, r0
 8005972:	005a      	lsls	r2, r3, #1
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	18d2      	adds	r2, r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	0019      	movs	r1, r3
 8005982:	0010      	movs	r0, r2
 8005984:	f7fa fbbe 	bl	8000104 <__udivsi3>
 8005988:	0003      	movs	r3, r0
 800598a:	b29b      	uxth	r3, r3
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d921      	bls.n	80059d8 <UART_SetConfig+0x4bc>
 8005994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	429a      	cmp	r2, r3
 800599c:	d21c      	bcs.n	80059d8 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	200e      	movs	r0, #14
 80059a4:	2420      	movs	r4, #32
 80059a6:	193b      	adds	r3, r7, r4
 80059a8:	181b      	adds	r3, r3, r0
 80059aa:	210f      	movs	r1, #15
 80059ac:	438a      	bics	r2, r1
 80059ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2207      	movs	r2, #7
 80059b8:	4013      	ands	r3, r2
 80059ba:	b299      	uxth	r1, r3
 80059bc:	193b      	adds	r3, r7, r4
 80059be:	181b      	adds	r3, r3, r0
 80059c0:	193a      	adds	r2, r7, r4
 80059c2:	1812      	adds	r2, r2, r0
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	193a      	adds	r2, r7, r4
 80059d0:	1812      	adds	r2, r2, r0
 80059d2:	8812      	ldrh	r2, [r2, #0]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	e062      	b.n	8005a9e <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80059d8:	231a      	movs	r3, #26
 80059da:	2220      	movs	r2, #32
 80059dc:	4694      	mov	ip, r2
 80059de:	44bc      	add	ip, r7
 80059e0:	4463      	add	r3, ip
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e05a      	b.n	8005a9e <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e8:	231b      	movs	r3, #27
 80059ea:	2220      	movs	r2, #32
 80059ec:	4694      	mov	ip, r2
 80059ee:	44bc      	add	ip, r7
 80059f0:	4463      	add	r3, ip
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d015      	beq.n	8005a24 <UART_SetConfig+0x508>
 80059f8:	dc18      	bgt.n	8005a2c <UART_SetConfig+0x510>
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d00d      	beq.n	8005a1a <UART_SetConfig+0x4fe>
 80059fe:	dc15      	bgt.n	8005a2c <UART_SetConfig+0x510>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <UART_SetConfig+0x4ee>
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d005      	beq.n	8005a14 <UART_SetConfig+0x4f8>
 8005a08:	e010      	b.n	8005a2c <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0a:	f7fe fb81 	bl	8004110 <HAL_RCC_GetPCLK1Freq>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a12:	e015      	b.n	8005a40 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a14:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <UART_SetConfig+0x5b8>)
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a18:	e012      	b.n	8005a40 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1a:	f7fe faed 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a22:	e00d      	b.n	8005a40 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a2a:	e009      	b.n	8005a40 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a30:	231a      	movs	r3, #26
 8005a32:	2220      	movs	r2, #32
 8005a34:	4694      	mov	ip, r2
 8005a36:	44bc      	add	ip, r7
 8005a38:	4463      	add	r3, ip
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
        break;
 8005a3e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d02b      	beq.n	8005a9e <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a4a:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <UART_SetConfig+0x5b4>)
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	5ad3      	ldrh	r3, [r2, r3]
 8005a50:	0019      	movs	r1, r3
 8005a52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a54:	f7fa fb56 	bl	8000104 <__udivsi3>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	18d2      	adds	r2, r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	0019      	movs	r1, r3
 8005a6a:	0010      	movs	r0, r2
 8005a6c:	f7fa fb4a 	bl	8000104 <__udivsi3>
 8005a70:	0003      	movs	r3, r0
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b0f      	cmp	r3, #15
 8005a7a:	d909      	bls.n	8005a90 <UART_SetConfig+0x574>
 8005a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	025b      	lsls	r3, r3, #9
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d204      	bcs.n	8005a90 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e006      	b.n	8005a9e <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	231a      	movs	r3, #26
 8005a92:	2220      	movs	r2, #32
 8005a94:	4694      	mov	ip, r2
 8005a96:	44bc      	add	ip, r7
 8005a98:	4463      	add	r3, ip
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	226a      	movs	r2, #106	; 0x6a
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2268      	movs	r2, #104	; 0x68
 8005aaa:	2101      	movs	r1, #1
 8005aac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005aba:	231a      	movs	r3, #26
 8005abc:	2220      	movs	r2, #32
 8005abe:	4694      	mov	ip, r2
 8005ac0:	44bc      	add	ip, r7
 8005ac2:	4463      	add	r3, ip
 8005ac4:	781b      	ldrb	r3, [r3, #0]
}
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b010      	add	sp, #64	; 0x40
 8005acc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	08008d4c 	.word	0x08008d4c
 8005ad4:	00f42400 	.word	0x00f42400

08005ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a4a      	ldr	r2, [pc, #296]	; (8005c1c <UART_AdvFeatureConfig+0x144>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	0019      	movs	r1, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2202      	movs	r2, #2
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d00b      	beq.n	8005b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a43      	ldr	r2, [pc, #268]	; (8005c20 <UART_AdvFeatureConfig+0x148>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	2204      	movs	r2, #4
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a3b      	ldr	r2, [pc, #236]	; (8005c24 <UART_AdvFeatureConfig+0x14c>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4a34      	ldr	r2, [pc, #208]	; (8005c28 <UART_AdvFeatureConfig+0x150>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <UART_AdvFeatureConfig+0x154>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2220      	movs	r2, #32
 8005b90:	4013      	ands	r3, r2
 8005b92:	d00b      	beq.n	8005bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4a25      	ldr	r2, [pc, #148]	; (8005c30 <UART_AdvFeatureConfig+0x158>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	2240      	movs	r2, #64	; 0x40
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d01d      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <UART_AdvFeatureConfig+0x15c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	035b      	lsls	r3, r3, #13
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d10b      	bne.n	8005bf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <UART_AdvFeatureConfig+0x160>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4a0e      	ldr	r2, [pc, #56]	; (8005c3c <UART_AdvFeatureConfig+0x164>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	fffdffff 	.word	0xfffdffff
 8005c20:	fffeffff 	.word	0xfffeffff
 8005c24:	fffbffff 	.word	0xfffbffff
 8005c28:	ffff7fff 	.word	0xffff7fff
 8005c2c:	ffffefff 	.word	0xffffefff
 8005c30:	ffffdfff 	.word	0xffffdfff
 8005c34:	ffefffff 	.word	0xffefffff
 8005c38:	ff9fffff 	.word	0xff9fffff
 8005c3c:	fff7ffff 	.word	0xfff7ffff

08005c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	228c      	movs	r2, #140	; 0x8c
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c50:	f7fc fcbe 	bl	80025d0 <HAL_GetTick>
 8005c54:	0003      	movs	r3, r0
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2208      	movs	r2, #8
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d10c      	bne.n	8005c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	0391      	lsls	r1, r2, #14
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <UART_CheckIdleState+0x90>)
 8005c70:	9200      	str	r2, [sp, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f000 f82e 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005c78:	1e03      	subs	r3, r0, #0
 8005c7a:	d001      	beq.n	8005c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e023      	b.n	8005cc8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2204      	movs	r2, #4
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d10c      	bne.n	8005ca8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	03d1      	lsls	r1, r2, #15
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <UART_CheckIdleState+0x90>)
 8005c98:	9200      	str	r2, [sp, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f000 f81a 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	1e03      	subs	r3, r0, #0
 8005ca2:	d001      	beq.n	8005ca8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e00f      	b.n	8005cc8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2284      	movs	r2, #132	; 0x84
 8005cac:	2120      	movs	r1, #32
 8005cae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2288      	movs	r2, #136	; 0x88
 8005cb4:	2120      	movs	r1, #32
 8005cb6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	0018      	movs	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b004      	add	sp, #16
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	01ffffff 	.word	0x01ffffff

08005cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b094      	sub	sp, #80	; 0x50
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	1dfb      	adds	r3, r7, #7
 8005ce2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce4:	e0a7      	b.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce8:	3301      	adds	r3, #1
 8005cea:	d100      	bne.n	8005cee <UART_WaitOnFlagUntilTimeout+0x1a>
 8005cec:	e0a3      	b.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fc fc6f 	bl	80025d0 <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d13f      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d04:	f3ef 8310 	mrs	r3, PRIMASK
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0e:	2301      	movs	r3, #1
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	494e      	ldr	r1, [pc, #312]	; (8005e60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005d26:	400a      	ands	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d36:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d40:	2301      	movs	r3, #1
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	f383 8810 	msr	PRIMASK, r3
}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2101      	movs	r1, #1
 8005d58:	438a      	bics	r2, r1
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	f383 8810 	msr	PRIMASK, r3
}
 8005d66:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2284      	movs	r2, #132	; 0x84
 8005d6c:	2120      	movs	r1, #32
 8005d6e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2288      	movs	r2, #136	; 0x88
 8005d74:	2120      	movs	r1, #32
 8005d76:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e069      	b.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d052      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d148      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2280      	movs	r2, #128	; 0x80
 8005daa:	0112      	lsls	r2, r2, #4
 8005dac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dae:	f3ef 8310 	mrs	r3, PRIMASK
 8005db2:	613b      	str	r3, [r7, #16]
  return(result);
 8005db4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f383 8810 	msr	PRIMASK, r3
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4924      	ldr	r1, [pc, #144]	; (8005e60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de0:	f3ef 8310 	mrs	r3, PRIMASK
 8005de4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005de6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dea:	2301      	movs	r3, #1
 8005dec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f383 8810 	msr	PRIMASK, r3
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2101      	movs	r1, #1
 8005e02:	438a      	bics	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
 8005e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2284      	movs	r2, #132	; 0x84
 8005e16:	2120      	movs	r1, #32
 8005e18:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2288      	movs	r2, #136	; 0x88
 8005e1e:	2120      	movs	r1, #32
 8005e20:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	228c      	movs	r2, #140	; 0x8c
 8005e26:	2120      	movs	r1, #32
 8005e28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	2100      	movs	r1, #0
 8005e30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e010      	b.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	425a      	negs	r2, r3
 8005e46:	4153      	adcs	r3, r2
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	001a      	movs	r2, r3
 8005e4c:	1dfb      	adds	r3, r7, #7
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d100      	bne.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x182>
 8005e54:	e747      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	0018      	movs	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b014      	add	sp, #80	; 0x50
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	fffffe5f 	.word	0xfffffe5f

08005e64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2280      	movs	r2, #128	; 0x80
 8005e70:	5c9b      	ldrb	r3, [r3, r2]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e027      	b.n	8005eca <HAL_UARTEx_DisableFifoMode+0x66>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2280      	movs	r2, #128	; 0x80
 8005e7e:	2101      	movs	r1, #1
 8005e80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2284      	movs	r2, #132	; 0x84
 8005e86:	2124      	movs	r1, #36	; 0x24
 8005e88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	438a      	bics	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a0b      	ldr	r2, [pc, #44]	; (8005ed4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2284      	movs	r2, #132	; 0x84
 8005ebc:	2120      	movs	r1, #32
 8005ebe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b004      	add	sp, #16
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	dfffffff 	.word	0xdfffffff

08005ed8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	5c9b      	ldrb	r3, [r3, r2]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e02e      	b.n	8005f4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2280      	movs	r2, #128	; 0x80
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2284      	movs	r2, #132	; 0x84
 8005efc:	2124      	movs	r1, #36	; 0x24
 8005efe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2101      	movs	r1, #1
 8005f14:	438a      	bics	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	08d9      	lsrs	r1, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 f854 	bl	8005fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2284      	movs	r2, #132	; 0x84
 8005f40:	2120      	movs	r1, #32
 8005f42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	2100      	movs	r1, #0
 8005f4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	0018      	movs	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b004      	add	sp, #16
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2280      	movs	r2, #128	; 0x80
 8005f66:	5c9b      	ldrb	r3, [r3, r2]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e02f      	b.n	8005fd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	2101      	movs	r1, #1
 8005f76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2284      	movs	r2, #132	; 0x84
 8005f7c:	2124      	movs	r1, #36	; 0x24
 8005f7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2101      	movs	r1, #1
 8005f94:	438a      	bics	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4a0e      	ldr	r2, [pc, #56]	; (8005fd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f000 f813 	bl	8005fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2284      	movs	r2, #132	; 0x84
 8005fc2:	2120      	movs	r1, #32
 8005fc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2280      	movs	r2, #128	; 0x80
 8005fca:	2100      	movs	r1, #0
 8005fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	f1ffffff 	.word	0xf1ffffff

08005fdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d108      	bne.n	8005ffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	226a      	movs	r2, #106	; 0x6a
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2268      	movs	r2, #104	; 0x68
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ffc:	e043      	b.n	8006086 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ffe:	260f      	movs	r6, #15
 8006000:	19bb      	adds	r3, r7, r6
 8006002:	2208      	movs	r2, #8
 8006004:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006006:	200e      	movs	r0, #14
 8006008:	183b      	adds	r3, r7, r0
 800600a:	2208      	movs	r2, #8
 800600c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	0e5b      	lsrs	r3, r3, #25
 8006016:	b2da      	uxtb	r2, r3
 8006018:	240d      	movs	r4, #13
 800601a:	193b      	adds	r3, r7, r4
 800601c:	2107      	movs	r1, #7
 800601e:	400a      	ands	r2, r1
 8006020:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	0f5b      	lsrs	r3, r3, #29
 800602a:	b2da      	uxtb	r2, r3
 800602c:	250c      	movs	r5, #12
 800602e:	197b      	adds	r3, r7, r5
 8006030:	2107      	movs	r1, #7
 8006032:	400a      	ands	r2, r1
 8006034:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006036:	183b      	adds	r3, r7, r0
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	197a      	adds	r2, r7, r5
 800603c:	7812      	ldrb	r2, [r2, #0]
 800603e:	4914      	ldr	r1, [pc, #80]	; (8006090 <UARTEx_SetNbDataToProcess+0xb4>)
 8006040:	5c8a      	ldrb	r2, [r1, r2]
 8006042:	435a      	muls	r2, r3
 8006044:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006046:	197b      	adds	r3, r7, r5
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <UARTEx_SetNbDataToProcess+0xb8>)
 800604c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800604e:	0019      	movs	r1, r3
 8006050:	f7fa f8e2 	bl	8000218 <__divsi3>
 8006054:	0003      	movs	r3, r0
 8006056:	b299      	uxth	r1, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	226a      	movs	r2, #106	; 0x6a
 800605c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800605e:	19bb      	adds	r3, r7, r6
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	193a      	adds	r2, r7, r4
 8006064:	7812      	ldrb	r2, [r2, #0]
 8006066:	490a      	ldr	r1, [pc, #40]	; (8006090 <UARTEx_SetNbDataToProcess+0xb4>)
 8006068:	5c8a      	ldrb	r2, [r1, r2]
 800606a:	435a      	muls	r2, r3
 800606c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800606e:	193b      	adds	r3, r7, r4
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <UARTEx_SetNbDataToProcess+0xb8>)
 8006074:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006076:	0019      	movs	r1, r3
 8006078:	f7fa f8ce 	bl	8000218 <__divsi3>
 800607c:	0003      	movs	r3, r0
 800607e:	b299      	uxth	r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2268      	movs	r2, #104	; 0x68
 8006084:	5299      	strh	r1, [r3, r2]
}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	46bd      	mov	sp, r7
 800608a:	b005      	add	sp, #20
 800608c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	08008d64 	.word	0x08008d64
 8006094:	08008d6c 	.word	0x08008d6c

08006098 <LEDmultiplexing>:
static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay);
static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character);
void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition);


void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	0018      	movs	r0, r3
 80060a4:	f000 f9ba 	bl	800641c <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2265      	movs	r2, #101	; 0x65
 80060ac:	5c9a      	ldrb	r2, [r3, r2]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0011      	movs	r1, r2
 80060b2:	0018      	movs	r0, r3
 80060b4:	f000 f970 	bl	8006398 <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2265      	movs	r2, #101	; 0x65
 80060bc:	5c9b      	ldrb	r3, [r3, r2]
 80060be:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2260      	movs	r2, #96	; 0x60
 80060c4:	185b      	adds	r3, r3, r1
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	0011      	movs	r1, r2
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 fa10 	bl	80064f4 <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2264      	movs	r2, #100	; 0x64
 80060d8:	5c9a      	ldrb	r2, [r3, r2]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2165      	movs	r1, #101	; 0x65
 80060de:	5c5b      	ldrb	r3, [r3, r1]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d107      	bne.n	80060f4 <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80060ec:	2200      	movs	r2, #0
 80060ee:	0019      	movs	r1, r3
 80060f0:	f7fd f98b 	bl	800340a <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2265      	movs	r2, #101	; 0x65
 80060f8:	5c9b      	ldrb	r3, [r3, r2]
 80060fa:	3301      	adds	r3, #1
 80060fc:	b2d9      	uxtb	r1, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2265      	movs	r2, #101	; 0x65
 8006102:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2265      	movs	r2, #101	; 0x65
 8006108:	5c9b      	ldrb	r3, [r3, r2]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d903      	bls.n	8006116 <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2265      	movs	r2, #101	; 0x65
 8006112:	2100      	movs	r1, #0
 8006114:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	226a      	movs	r2, #106	; 0x6a
 800611a:	5a9b      	ldrh	r3, [r3, r2]
 800611c:	3301      	adds	r3, #1
 800611e:	b299      	uxth	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	226a      	movs	r2, #106	; 0x6a
 8006124:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	226a      	movs	r2, #106	; 0x6a
 800612a:	5a9b      	ldrh	r3, [r3, r2]
 800612c:	2132      	movs	r1, #50	; 0x32
 800612e:	0018      	movs	r0, r3
 8006130:	f7fa f86e 	bl	8000210 <__aeabi_uidivmod>
 8006134:	000b      	movs	r3, r1
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d000      	beq.n	800613e <LEDmultiplexing+0xa6>
 800613c:	e0a2      	b.n	8006284 <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2267      	movs	r2, #103	; 0x67
 8006142:	5c9b      	ldrb	r3, [r3, r2]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d100      	bne.n	800614a <LEDmultiplexing+0xb2>
 8006148:	e09c      	b.n	8006284 <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2267      	movs	r2, #103	; 0x67
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d13f      	bne.n	80061d4 <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8006154:	230f      	movs	r3, #15
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2203      	movs	r2, #3
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e015      	b.n	800618a <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 800615e:	240f      	movs	r4, #15
 8006160:	193b      	adds	r3, r7, r4
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	1e5a      	subs	r2, r3, #1
 8006166:	193b      	adds	r3, r7, r4
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	2060      	movs	r0, #96	; 0x60
 800616e:	188a      	adds	r2, r1, r2
 8006170:	1812      	adds	r2, r2, r0
 8006172:	7810      	ldrb	r0, [r2, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	2160      	movs	r1, #96	; 0x60
 8006178:	18d3      	adds	r3, r2, r3
 800617a:	185b      	adds	r3, r3, r1
 800617c:	1c02      	adds	r2, r0, #0
 800617e:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8006180:	193b      	adds	r3, r7, r4
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	193b      	adds	r3, r7, r4
 8006186:	3a01      	subs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	230f      	movs	r3, #15
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e4      	bne.n	800615e <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2266      	movs	r2, #102	; 0x66
 8006198:	5c9b      	ldrb	r3, [r3, r2]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d80c      	bhi.n	80061b8 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2266      	movs	r2, #102	; 0x66
 80061a2:	5c9b      	ldrb	r3, [r3, r2]
 80061a4:	0019      	movs	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2268      	movs	r2, #104	; 0x68
 80061aa:	185b      	adds	r3, r3, r1
 80061ac:	189b      	adds	r3, r3, r2
 80061ae:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2260      	movs	r2, #96	; 0x60
 80061b4:	5499      	strb	r1, [r3, r2]
 80061b6:	e00d      	b.n	80061d4 <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2266      	movs	r2, #102	; 0x66
 80061bc:	5c9b      	ldrb	r3, [r3, r2]
 80061be:	001a      	movs	r2, r3
 80061c0:	2305      	movs	r3, #5
 80061c2:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	216c      	movs	r1, #108	; 0x6c
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	185b      	adds	r3, r3, r1
 80061cc:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2260      	movs	r2, #96	; 0x60
 80061d2:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2267      	movs	r2, #103	; 0x67
 80061d8:	5c9b      	ldrb	r3, [r3, r2]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d13d      	bne.n	800625a <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 80061de:	230e      	movs	r3, #14
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e015      	b.n	8006214 <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 80061e8:	240e      	movs	r4, #14
 80061ea:	193b      	adds	r3, r7, r4
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	193b      	adds	r3, r7, r4
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	2060      	movs	r0, #96	; 0x60
 80061f8:	188a      	adds	r2, r1, r2
 80061fa:	1812      	adds	r2, r2, r0
 80061fc:	7810      	ldrb	r0, [r2, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	2160      	movs	r1, #96	; 0x60
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	185b      	adds	r3, r3, r1
 8006206:	1c02      	adds	r2, r0, #0
 8006208:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 800620a:	193b      	adds	r3, r7, r4
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	193b      	adds	r3, r7, r4
 8006210:	3201      	adds	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	230e      	movs	r3, #14
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d9e4      	bls.n	80061e8 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2266      	movs	r2, #102	; 0x66
 8006222:	5c9b      	ldrb	r3, [r3, r2]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d80c      	bhi.n	8006242 <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2266      	movs	r2, #102	; 0x66
 800622c:	5c9b      	ldrb	r3, [r3, r2]
 800622e:	0019      	movs	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2268      	movs	r2, #104	; 0x68
 8006234:	185b      	adds	r3, r3, r1
 8006236:	189b      	adds	r3, r3, r2
 8006238:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2263      	movs	r2, #99	; 0x63
 800623e:	5499      	strb	r1, [r3, r2]
 8006240:	e00b      	b.n	800625a <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2266      	movs	r2, #102	; 0x66
 8006246:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 8006248:	3b02      	subs	r3, #2
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	216c      	movs	r1, #108	; 0x6c
 800624e:	18d3      	adds	r3, r2, r3
 8006250:	185b      	adds	r3, r3, r1
 8006252:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2263      	movs	r2, #99	; 0x63
 8006258:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2266      	movs	r2, #102	; 0x66
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	3301      	adds	r3, #1
 8006262:	b2d9      	uxtb	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2266      	movs	r2, #102	; 0x66
 8006268:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2266      	movs	r2, #102	; 0x66
 800626e:	5c9b      	ldrb	r3, [r3, r2]
 8006270:	2b05      	cmp	r3, #5
 8006272:	d907      	bls.n	8006284 <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2266      	movs	r2, #102	; 0x66
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2267      	movs	r2, #103	; 0x67
 8006280:	2100      	movs	r1, #0
 8006282:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b005      	add	sp, #20
 800628a:	bd90      	pop	{r4, r7, pc}

0800628c <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	000a      	movs	r2, r1
 8006296:	1cfb      	adds	r3, r7, #3
 8006298:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	1cfa      	adds	r2, r7, #3
 800629e:	2167      	movs	r1, #103	; 0x67
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2266      	movs	r2, #102	; 0x66
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]

}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	000a      	movs	r2, r1
 80062be:	1cfb      	adds	r3, r7, #3
 80062c0:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 80062c2:	1cfb      	adds	r3, r7, #3
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d108      	bne.n	80062dc <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6858      	ldr	r0, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	0019      	movs	r1, r3
 80062d6:	f7fd f898 	bl	800340a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 80062da:	e059      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 80062dc:	1cfb      	adds	r3, r7, #3
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d108      	bne.n	80062f6 <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68d8      	ldr	r0, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	891b      	ldrh	r3, [r3, #8]
 80062ec:	2200      	movs	r2, #0
 80062ee:	0019      	movs	r1, r3
 80062f0:	f7fd f88b 	bl	800340a <HAL_GPIO_WritePin>
}
 80062f4:	e04c      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 80062f6:	1cfb      	adds	r3, r7, #3
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d108      	bne.n	8006310 <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6958      	ldr	r0, [r3, #20]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8a1b      	ldrh	r3, [r3, #16]
 8006306:	2200      	movs	r2, #0
 8006308:	0019      	movs	r1, r3
 800630a:	f7fd f87e 	bl	800340a <HAL_GPIO_WritePin>
}
 800630e:	e03f      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 8006310:	1cfb      	adds	r3, r7, #3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b04      	cmp	r3, #4
 8006316:	d108      	bne.n	800632a <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69d8      	ldr	r0, [r3, #28]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8b1b      	ldrh	r3, [r3, #24]
 8006320:	2200      	movs	r2, #0
 8006322:	0019      	movs	r1, r3
 8006324:	f7fd f871 	bl	800340a <HAL_GPIO_WritePin>
}
 8006328:	e032      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 800632a:	1cfb      	adds	r3, r7, #3
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b05      	cmp	r3, #5
 8006330:	d108      	bne.n	8006344 <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8c1b      	ldrh	r3, [r3, #32]
 800633a:	2200      	movs	r2, #0
 800633c:	0019      	movs	r1, r3
 800633e:	f7fd f864 	bl	800340a <HAL_GPIO_WritePin>
}
 8006342:	e025      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 8006344:	1cfb      	adds	r3, r7, #3
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b06      	cmp	r3, #6
 800634a:	d108      	bne.n	800635e <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	2200      	movs	r2, #0
 8006356:	0019      	movs	r1, r3
 8006358:	f7fd f857 	bl	800340a <HAL_GPIO_WritePin>
}
 800635c:	e018      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 800635e:	1cfb      	adds	r3, r7, #3
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b07      	cmp	r3, #7
 8006364:	d108      	bne.n	8006378 <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800636e:	2200      	movs	r2, #0
 8006370:	0019      	movs	r1, r3
 8006372:	f7fd f84a 	bl	800340a <HAL_GPIO_WritePin>
}
 8006376:	e00b      	b.n	8006390 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 8006378:	1cfb      	adds	r3, r7, #3
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d107      	bne.n	8006390 <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006388:	2200      	movs	r2, #0
 800638a:	0019      	movs	r1, r3
 800638c:	f7fd f83d 	bl	800340a <HAL_GPIO_WritePin>
}
 8006390:	46c0      	nop			; (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b002      	add	sp, #8
 8006396:	bd80      	pop	{r7, pc}

08006398 <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	000a      	movs	r2, r1
 80063a2:	1cfb      	adds	r3, r7, #3
 80063a4:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 80063a6:	1cfb      	adds	r3, r7, #3
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2240      	movs	r2, #64	; 0x40
 80063b6:	5a9b      	ldrh	r3, [r3, r2]
 80063b8:	2201      	movs	r2, #1
 80063ba:	0019      	movs	r1, r3
 80063bc:	f7fd f825 	bl	800340a <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 80063c0:	e028      	b.n	8006414 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 80063c2:	1cfb      	adds	r3, r7, #3
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d109      	bne.n	80063de <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2248      	movs	r2, #72	; 0x48
 80063d2:	5a9b      	ldrh	r3, [r3, r2]
 80063d4:	2201      	movs	r2, #1
 80063d6:	0019      	movs	r1, r3
 80063d8:	f7fd f817 	bl	800340a <HAL_GPIO_WritePin>
}
 80063dc:	e01a      	b.n	8006414 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 80063de:	1cfb      	adds	r3, r7, #3
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d109      	bne.n	80063fa <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2250      	movs	r2, #80	; 0x50
 80063ee:	5a9b      	ldrh	r3, [r3, r2]
 80063f0:	2201      	movs	r2, #1
 80063f2:	0019      	movs	r1, r3
 80063f4:	f7fd f809 	bl	800340a <HAL_GPIO_WritePin>
}
 80063f8:	e00c      	b.n	8006414 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 80063fa:	1cfb      	adds	r3, r7, #3
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d108      	bne.n	8006414 <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2258      	movs	r2, #88	; 0x58
 800640a:	5a9b      	ldrh	r3, [r3, r2]
 800640c:	2201      	movs	r2, #1
 800640e:	0019      	movs	r1, r3
 8006410:	f7fc fffb 	bl	800340a <HAL_GPIO_WritePin>
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b002      	add	sp, #8
 800641a:	bd80      	pop	{r7, pc}

0800641c <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, LED_FIELD_OFF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2240      	movs	r2, #64	; 0x40
 800642c:	5a9b      	ldrh	r3, [r3, r2]
 800642e:	2200      	movs	r2, #0
 8006430:	0019      	movs	r1, r3
 8006432:	f7fc ffea 	bl	800340a <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, LED_FIELD_OFF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2248      	movs	r2, #72	; 0x48
 800643e:	5a9b      	ldrh	r3, [r3, r2]
 8006440:	2200      	movs	r2, #0
 8006442:	0019      	movs	r1, r3
 8006444:	f7fc ffe1 	bl	800340a <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, LED_FIELD_OFF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2250      	movs	r2, #80	; 0x50
 8006450:	5a9b      	ldrh	r3, [r3, r2]
 8006452:	2200      	movs	r2, #0
 8006454:	0019      	movs	r1, r3
 8006456:	f7fc ffd8 	bl	800340a <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, LED_FIELD_OFF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2258      	movs	r2, #88	; 0x58
 8006462:	5a9b      	ldrh	r3, [r3, r2]
 8006464:	2200      	movs	r2, #0
 8006466:	0019      	movs	r1, r3
 8006468:	f7fc ffcf 	bl	800340a <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, LED_SEGMENT_OFF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6858      	ldr	r0, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	2201      	movs	r2, #1
 8006476:	0019      	movs	r1, r3
 8006478:	f7fc ffc7 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, LED_SEGMENT_OFF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68d8      	ldr	r0, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	891b      	ldrh	r3, [r3, #8]
 8006484:	2201      	movs	r2, #1
 8006486:	0019      	movs	r1, r3
 8006488:	f7fc ffbf 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, LED_SEGMENT_OFF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6958      	ldr	r0, [r3, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8a1b      	ldrh	r3, [r3, #16]
 8006494:	2201      	movs	r2, #1
 8006496:	0019      	movs	r1, r3
 8006498:	f7fc ffb7 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, LED_SEGMENT_OFF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69d8      	ldr	r0, [r3, #28]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8b1b      	ldrh	r3, [r3, #24]
 80064a4:	2201      	movs	r2, #1
 80064a6:	0019      	movs	r1, r3
 80064a8:	f7fc ffaf 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, LED_SEGMENT_OFF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8c1b      	ldrh	r3, [r3, #32]
 80064b4:	2201      	movs	r2, #1
 80064b6:	0019      	movs	r1, r3
 80064b8:	f7fc ffa7 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, LED_SEGMENT_OFF);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c4:	2201      	movs	r2, #1
 80064c6:	0019      	movs	r1, r3
 80064c8:	f7fc ff9f 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, LED_SEGMENT_OFF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80064d4:	2201      	movs	r2, #1
 80064d6:	0019      	movs	r1, r3
 80064d8:	f7fc ff97 	bl	800340a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80064e4:	2201      	movs	r2, #1
 80064e6:	0019      	movs	r1, r3
 80064e8:	f7fc ff8f 	bl	800340a <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 80064ec:	46c0      	nop			; (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b002      	add	sp, #8
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	000a      	movs	r2, r1
 80064fe:	1cfb      	adds	r3, r7, #3
 8006500:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 8006502:	1cfb      	adds	r3, r7, #3
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b2f      	cmp	r3, #47	; 0x2f
 8006508:	d800      	bhi.n	800650c <_LEDwriteCharacter+0x18>
 800650a:	e10f      	b.n	800672c <_LEDwriteCharacter+0x238>
 800650c:	1cfb      	adds	r3, r7, #3
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b39      	cmp	r3, #57	; 0x39
 8006512:	d900      	bls.n	8006516 <_LEDwriteCharacter+0x22>
 8006514:	e10a      	b.n	800672c <_LEDwriteCharacter+0x238>
		switch (character) {
 8006516:	1cfb      	adds	r3, r7, #3
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	3b30      	subs	r3, #48	; 0x30
 800651c:	2b09      	cmp	r3, #9
 800651e:	d900      	bls.n	8006522 <_LEDwriteCharacter+0x2e>
 8006520:	e2e7      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
 8006522:	009a      	lsls	r2, r3, #2
 8006524:	4bea      	ldr	r3, [pc, #936]	; (80068d0 <_LEDwriteCharacter+0x3dc>)
 8006526:	18d3      	adds	r3, r2, r3
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2102      	movs	r1, #2
 8006530:	0018      	movs	r0, r3
 8006532:	f7ff febf 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2103      	movs	r1, #3
 800653a:	0018      	movs	r0, r3
 800653c:	f7ff feba 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006540:	e0f3      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2101      	movs	r1, #1
 8006546:	0018      	movs	r0, r3
 8006548:	f7ff feb4 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2102      	movs	r1, #2
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff feaf 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2107      	movs	r1, #7
 800655a:	0018      	movs	r0, r3
 800655c:	f7ff feaa 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2105      	movs	r1, #5
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff fea5 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2104      	movs	r1, #4
 800656e:	0018      	movs	r0, r3
 8006570:	f7ff fea0 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006574:	e0d9      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2101      	movs	r1, #1
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff fe9a 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2102      	movs	r1, #2
 8006584:	0018      	movs	r0, r3
 8006586:	f7ff fe95 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2107      	movs	r1, #7
 800658e:	0018      	movs	r0, r3
 8006590:	f7ff fe90 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2103      	movs	r1, #3
 8006598:	0018      	movs	r0, r3
 800659a:	f7ff fe8b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2104      	movs	r1, #4
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7ff fe86 	bl	80062b4 <_LEDsegmentOn>
			break;
 80065a8:	e0bf      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2106      	movs	r1, #6
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7ff fe80 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2107      	movs	r1, #7
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff fe7b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2102      	movs	r1, #2
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7ff fe76 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2103      	movs	r1, #3
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7ff fe71 	bl	80062b4 <_LEDsegmentOn>
			break;
 80065d2:	e0aa      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2101      	movs	r1, #1
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff fe6b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2106      	movs	r1, #6
 80065e2:	0018      	movs	r0, r3
 80065e4:	f7ff fe66 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2107      	movs	r1, #7
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7ff fe61 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2103      	movs	r1, #3
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7ff fe5c 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2104      	movs	r1, #4
 8006600:	0018      	movs	r0, r3
 8006602:	f7ff fe57 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006606:	e090      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2101      	movs	r1, #1
 800660c:	0018      	movs	r0, r3
 800660e:	f7ff fe51 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2103      	movs	r1, #3
 8006616:	0018      	movs	r0, r3
 8006618:	f7ff fe4c 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2104      	movs	r1, #4
 8006620:	0018      	movs	r0, r3
 8006622:	f7ff fe47 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2105      	movs	r1, #5
 800662a:	0018      	movs	r0, r3
 800662c:	f7ff fe42 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2106      	movs	r1, #6
 8006634:	0018      	movs	r0, r3
 8006636:	f7ff fe3d 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2107      	movs	r1, #7
 800663e:	0018      	movs	r0, r3
 8006640:	f7ff fe38 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006644:	e071      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2101      	movs	r1, #1
 800664a:	0018      	movs	r0, r3
 800664c:	f7ff fe32 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2102      	movs	r1, #2
 8006654:	0018      	movs	r0, r3
 8006656:	f7ff fe2d 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2103      	movs	r1, #3
 800665e:	0018      	movs	r0, r3
 8006660:	f7ff fe28 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006664:	e061      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2101      	movs	r1, #1
 800666a:	0018      	movs	r0, r3
 800666c:	f7ff fe22 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2102      	movs	r1, #2
 8006674:	0018      	movs	r0, r3
 8006676:	f7ff fe1d 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2103      	movs	r1, #3
 800667e:	0018      	movs	r0, r3
 8006680:	f7ff fe18 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2104      	movs	r1, #4
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff fe13 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2105      	movs	r1, #5
 8006692:	0018      	movs	r0, r3
 8006694:	f7ff fe0e 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2106      	movs	r1, #6
 800669c:	0018      	movs	r0, r3
 800669e:	f7ff fe09 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2107      	movs	r1, #7
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7ff fe04 	bl	80062b4 <_LEDsegmentOn>
			break;
 80066ac:	e03d      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2101      	movs	r1, #1
 80066b2:	0018      	movs	r0, r3
 80066b4:	f7ff fdfe 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2102      	movs	r1, #2
 80066bc:	0018      	movs	r0, r3
 80066be:	f7ff fdf9 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2103      	movs	r1, #3
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7ff fdf4 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2104      	movs	r1, #4
 80066d0:	0018      	movs	r0, r3
 80066d2:	f7ff fdef 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2106      	movs	r1, #6
 80066da:	0018      	movs	r0, r3
 80066dc:	f7ff fdea 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2107      	movs	r1, #7
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7ff fde5 	bl	80062b4 <_LEDsegmentOn>
			break;
 80066ea:	e01e      	b.n	800672a <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2101      	movs	r1, #1
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff fddf 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2102      	movs	r1, #2
 80066fa:	0018      	movs	r0, r3
 80066fc:	f7ff fdda 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2103      	movs	r1, #3
 8006704:	0018      	movs	r0, r3
 8006706:	f7ff fdd5 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2104      	movs	r1, #4
 800670e:	0018      	movs	r0, r3
 8006710:	f7ff fdd0 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2105      	movs	r1, #5
 8006718:	0018      	movs	r0, r3
 800671a:	f7ff fdcb 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2106      	movs	r1, #6
 8006722:	0018      	movs	r0, r3
 8006724:	f7ff fdc6 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006728:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 800672a:	e1e2      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		}
	} else {
		switch (character) {
 800672c:	1cfb      	adds	r3, r7, #3
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	3b2d      	subs	r3, #45	; 0x2d
 8006732:	2b47      	cmp	r3, #71	; 0x47
 8006734:	d900      	bls.n	8006738 <_LEDwriteCharacter+0x244>
 8006736:	e1dc      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
 8006738:	009a      	lsls	r2, r3, #2
 800673a:	4b66      	ldr	r3, [pc, #408]	; (80068d4 <_LEDwriteCharacter+0x3e0>)
 800673c:	18d3      	adds	r3, r2, r3
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2101      	movs	r1, #1
 8006746:	0018      	movs	r0, r3
 8006748:	f7ff fdb4 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2102      	movs	r1, #2
 8006750:	0018      	movs	r0, r3
 8006752:	f7ff fdaf 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2103      	movs	r1, #3
 800675a:	0018      	movs	r0, r3
 800675c:	f7ff fdaa 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2105      	movs	r1, #5
 8006764:	0018      	movs	r0, r3
 8006766:	f7ff fda5 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2106      	movs	r1, #6
 800676e:	0018      	movs	r0, r3
 8006770:	f7ff fda0 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2107      	movs	r1, #7
 8006778:	0018      	movs	r0, r3
 800677a:	f7ff fd9b 	bl	80062b4 <_LEDsegmentOn>
			break;
 800677e:	e1b8      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2103      	movs	r1, #3
 8006784:	0018      	movs	r0, r3
 8006786:	f7ff fd95 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2104      	movs	r1, #4
 800678e:	0018      	movs	r0, r3
 8006790:	f7ff fd90 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2105      	movs	r1, #5
 8006798:	0018      	movs	r0, r3
 800679a:	f7ff fd8b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2106      	movs	r1, #6
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7ff fd86 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2107      	movs	r1, #7
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7ff fd81 	bl	80062b4 <_LEDsegmentOn>
			break;
 80067b2:	e19e      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2101      	movs	r1, #1
 80067b8:	0018      	movs	r0, r3
 80067ba:	f7ff fd7b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2104      	movs	r1, #4
 80067c2:	0018      	movs	r0, r3
 80067c4:	f7ff fd76 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2105      	movs	r1, #5
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7ff fd71 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2106      	movs	r1, #6
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7ff fd6c 	bl	80062b4 <_LEDsegmentOn>
			break;
 80067dc:	e189      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2104      	movs	r1, #4
 80067e2:	0018      	movs	r0, r3
 80067e4:	f7ff fd66 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2105      	movs	r1, #5
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7ff fd61 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2107      	movs	r1, #7
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7ff fd5c 	bl	80062b4 <_LEDsegmentOn>
			break;
 80067fc:	e179      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2101      	movs	r1, #1
 8006802:	0018      	movs	r0, r3
 8006804:	f7ff fd56 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2102      	movs	r1, #2
 800680c:	0018      	movs	r0, r3
 800680e:	f7ff fd51 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2103      	movs	r1, #3
 8006816:	0018      	movs	r0, r3
 8006818:	f7ff fd4c 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2104      	movs	r1, #4
 8006820:	0018      	movs	r0, r3
 8006822:	f7ff fd47 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2105      	movs	r1, #5
 800682a:	0018      	movs	r0, r3
 800682c:	f7ff fd42 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2106      	movs	r1, #6
 8006834:	0018      	movs	r0, r3
 8006836:	f7ff fd3d 	bl	80062b4 <_LEDsegmentOn>
			break;
 800683a:	e15a      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2102      	movs	r1, #2
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff fd37 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2103      	movs	r1, #3
 800684a:	0018      	movs	r0, r3
 800684c:	f7ff fd32 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2104      	movs	r1, #4
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff fd2d 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2105      	movs	r1, #5
 800685e:	0018      	movs	r0, r3
 8006860:	f7ff fd28 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2107      	movs	r1, #7
 8006868:	0018      	movs	r0, r3
 800686a:	f7ff fd23 	bl	80062b4 <_LEDsegmentOn>
			break;
 800686e:	e140      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2101      	movs	r1, #1
 8006874:	0018      	movs	r0, r3
 8006876:	f7ff fd1d 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2104      	movs	r1, #4
 800687e:	0018      	movs	r0, r3
 8006880:	f7ff fd18 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2105      	movs	r1, #5
 8006888:	0018      	movs	r0, r3
 800688a:	f7ff fd13 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2106      	movs	r1, #6
 8006892:	0018      	movs	r0, r3
 8006894:	f7ff fd0e 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2107      	movs	r1, #7
 800689c:	0018      	movs	r0, r3
 800689e:	f7ff fd09 	bl	80062b4 <_LEDsegmentOn>
			break;
 80068a2:	e126      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2101      	movs	r1, #1
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7ff fd03 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2105      	movs	r1, #5
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7ff fcfe 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2106      	movs	r1, #6
 80068bc:	0018      	movs	r0, r3
 80068be:	f7ff fcf9 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2107      	movs	r1, #7
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7ff fcf4 	bl	80062b4 <_LEDsegmentOn>
			break;
 80068cc:	e111      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	08008d74 	.word	0x08008d74
 80068d4:	08008d9c 	.word	0x08008d9c
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2102      	movs	r1, #2
 80068dc:	0018      	movs	r0, r3
 80068de:	f7ff fce9 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2103      	movs	r1, #3
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7ff fce4 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2105      	movs	r1, #5
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7ff fcdf 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2106      	movs	r1, #6
 80068fa:	0018      	movs	r0, r3
 80068fc:	f7ff fcda 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2107      	movs	r1, #7
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff fcd5 	bl	80062b4 <_LEDsegmentOn>
			break;
 800690a:	e0f2      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2103      	movs	r1, #3
 8006910:	0018      	movs	r0, r3
 8006912:	f7ff fccf 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2105      	movs	r1, #5
 800691a:	0018      	movs	r0, r3
 800691c:	f7ff fcca 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2106      	movs	r1, #6
 8006924:	0018      	movs	r0, r3
 8006926:	f7ff fcc5 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2107      	movs	r1, #7
 800692e:	0018      	movs	r0, r3
 8006930:	f7ff fcc0 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006934:	e0dd      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2102      	movs	r1, #2
 800693a:	0018      	movs	r0, r3
 800693c:	f7ff fcba 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2103      	movs	r1, #3
 8006944:	0018      	movs	r0, r3
 8006946:	f7ff fcb5 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2104      	movs	r1, #4
 800694e:	0018      	movs	r0, r3
 8006950:	f7ff fcb0 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006954:	e0cd      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2104      	movs	r1, #4
 800695a:	0018      	movs	r0, r3
 800695c:	f7ff fcaa 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2105      	movs	r1, #5
 8006964:	0018      	movs	r0, r3
 8006966:	f7ff fca5 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2106      	movs	r1, #6
 800696e:	0018      	movs	r0, r3
 8006970:	f7ff fca0 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006974:	e0bd      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2101      	movs	r1, #1
 800697a:	0018      	movs	r0, r3
 800697c:	f7ff fc9a 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2102      	movs	r1, #2
 8006984:	0018      	movs	r0, r3
 8006986:	f7ff fc95 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2103      	movs	r1, #3
 800698e:	0018      	movs	r0, r3
 8006990:	f7ff fc90 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2104      	movs	r1, #4
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff fc8b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2105      	movs	r1, #5
 80069a2:	0018      	movs	r0, r3
 80069a4:	f7ff fc86 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2106      	movs	r1, #6
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff fc81 	bl	80062b4 <_LEDsegmentOn>
			break;
 80069b2:	e09e      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2103      	movs	r1, #3
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7ff fc7b 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2104      	movs	r1, #4
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7ff fc76 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2105      	movs	r1, #5
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7ff fc71 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2107      	movs	r1, #7
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7ff fc6c 	bl	80062b4 <_LEDsegmentOn>
			break;
 80069dc:	e089      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2101      	movs	r1, #1
 80069e2:	0018      	movs	r0, r3
 80069e4:	f7ff fc66 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2102      	movs	r1, #2
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7ff fc61 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2105      	movs	r1, #5
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7ff fc5c 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2106      	movs	r1, #6
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7ff fc57 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2107      	movs	r1, #7
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7ff fc52 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006a10:	e06f      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2105      	movs	r1, #5
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7ff fc4c 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2107      	movs	r1, #7
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff fc47 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006a26:	e064      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f7ff fc41 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2106      	movs	r1, #6
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7ff fc3c 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2107      	movs	r1, #7
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7ff fc37 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2103      	movs	r1, #3
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff fc32 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2104      	movs	r1, #4
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7ff fc2d 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006a5a:	e04a      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2105      	movs	r1, #5
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7ff fc27 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2106      	movs	r1, #6
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7ff fc22 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2107      	movs	r1, #7
 8006a74:	0018      	movs	r0, r3
 8006a76:	f7ff fc1d 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006a7a:	e03a      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2102      	movs	r1, #2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7ff fc17 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2103      	movs	r1, #3
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7ff fc12 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2104      	movs	r1, #4
 8006a94:	0018      	movs	r0, r3
 8006a96:	f7ff fc0d 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2105      	movs	r1, #5
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f7ff fc08 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2106      	movs	r1, #6
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7ff fc03 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006aae:	e020      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2107      	movs	r1, #7
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f7ff fbfd 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006aba:	e01a      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2104      	movs	r1, #4
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7ff fbf7 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006ac6:	e014      	b.n	8006af2 <_LEDwriteCharacter+0x5fe>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2101      	movs	r1, #1
 8006acc:	0018      	movs	r0, r3
 8006ace:	f7ff fbf1 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f7ff fbec 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2106      	movs	r1, #6
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7ff fbe7 	bl	80062b4 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2107      	movs	r1, #7
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7ff fbe2 	bl	80062b4 <_LEDsegmentOn>
			break;
 8006af0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b002      	add	sp, #8
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	46c0      	nop			; (mov r8, r8)

08006afc <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	1dbb      	adds	r3, r7, #6
 8006b0a:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1dba      	adds	r2, r7, #6
 8006b16:	2140      	movs	r1, #64	; 0x40
 8006b18:	8812      	ldrh	r2, [r2, #0]
 8006b1a:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	2318      	movs	r3, #24
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	2148      	movs	r1, #72	; 0x48
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	18ba      	adds	r2, r7, r2
 8006b3a:	2150      	movs	r1, #80	; 0x50
 8006b3c:	8812      	ldrh	r2, [r2, #0]
 8006b3e:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b44:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2228      	movs	r2, #40	; 0x28
 8006b4a:	18ba      	adds	r2, r7, r2
 8006b4c:	2158      	movs	r1, #88	; 0x58
 8006b4e:	8812      	ldrh	r2, [r2, #0]
 8006b50:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b56:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2230      	movs	r2, #48	; 0x30
 8006b5c:	18ba      	adds	r2, r7, r2
 8006b5e:	8812      	ldrh	r2, [r2, #0]
 8006b60:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b66:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2238      	movs	r2, #56	; 0x38
 8006b6c:	18ba      	adds	r2, r7, r2
 8006b6e:	8812      	ldrh	r2, [r2, #0]
 8006b70:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b76:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2240      	movs	r2, #64	; 0x40
 8006b7c:	18ba      	adds	r2, r7, r2
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b86:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2248      	movs	r2, #72	; 0x48
 8006b8c:	18ba      	adds	r2, r7, r2
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2250      	movs	r2, #80	; 0x50
 8006b9c:	18ba      	adds	r2, r7, r2
 8006b9e:	8812      	ldrh	r2, [r2, #0]
 8006ba0:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	2118      	movs	r1, #24
 8006bae:	468c      	mov	ip, r1
 8006bb0:	44bc      	add	ip, r7
 8006bb2:	4462      	add	r2, ip
 8006bb4:	8812      	ldrh	r2, [r2, #0]
 8006bb6:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2248      	movs	r2, #72	; 0x48
 8006bc2:	2118      	movs	r1, #24
 8006bc4:	468c      	mov	ip, r1
 8006bc6:	44bc      	add	ip, r7
 8006bc8:	4462      	add	r2, ip
 8006bca:	8812      	ldrh	r2, [r2, #0]
 8006bcc:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bd2:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2250      	movs	r2, #80	; 0x50
 8006bd8:	2118      	movs	r1, #24
 8006bda:	468c      	mov	ip, r1
 8006bdc:	44bc      	add	ip, r7
 8006bde:	4462      	add	r2, ip
 8006be0:	8812      	ldrh	r2, [r2, #0]
 8006be2:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f000 f82f 	bl	8006c4a <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2265      	movs	r2, #101	; 0x65
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	5499      	strb	r1, [r3, r2]
}
 8006bf4:	46c0      	nop			; (mov r8, r8)
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	b004      	add	sp, #16
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char* separator){
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8006c06:	230f      	movs	r3, #15
 8006c08:	18fb      	adds	r3, r7, r3
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e012      	b.n	8006c36 <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 8006c10:	240f      	movs	r4, #15
 8006c12:	193b      	adds	r3, r7, r4
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	18d2      	adds	r2, r2, r3
 8006c1a:	193b      	adds	r3, r7, r4
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	7810      	ldrb	r0, [r2, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	2168      	movs	r1, #104	; 0x68
 8006c24:	18d3      	adds	r3, r2, r3
 8006c26:	185b      	adds	r3, r3, r1
 8006c28:	1c02      	adds	r2, r0, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8006c2c:	193b      	adds	r3, r7, r4
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	3201      	adds	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	230f      	movs	r3, #15
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d9e7      	bls.n	8006c10 <LEDseparator+0x14>
	}
}
 8006c40:	46c0      	nop			; (mov r8, r8)
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	46bd      	mov	sp, r7
 8006c46:	b005      	add	sp, #20
 8006c48:	bd90      	pop	{r4, r7, pc}

08006c4a <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3360      	adds	r3, #96	; 0x60
 8006c56:	2204      	movs	r2, #4
 8006c58:	2120      	movs	r1, #32
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f001 ff87 	bl	8008b6e <memset>
//	memset(LEDdisplay->dotBuffer, 0, LED_FIELDS);
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2264      	movs	r2, #100	; 0x64
 8006c64:	2104      	movs	r1, #4
 8006c66:	5499      	strb	r1, [r3, r2]
}
 8006c68:	46c0      	nop			; (mov r8, r8)
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	0008      	movs	r0, r1
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	230b      	movs	r3, #11
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	1c02      	adds	r2, r0, #0
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	230a      	movs	r3, #10
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	1c0a      	adds	r2, r1, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8006c8e:	2317      	movs	r3, #23
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e02f      	b.n	8006cf8 <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 8006c98:	230a      	movs	r3, #10
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10e      	bne.n	8006cc0 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 8006ca2:	2117      	movs	r1, #23
 8006ca4:	187b      	adds	r3, r7, r1
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	18d2      	adds	r2, r2, r3
 8006cac:	187b      	adds	r3, r7, r1
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	7810      	ldrb	r0, [r2, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	2160      	movs	r1, #96	; 0x60
 8006cb6:	18d3      	adds	r3, r2, r3
 8006cb8:	185b      	adds	r3, r3, r1
 8006cba:	1c02      	adds	r2, r0, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e015      	b.n	8006cec <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8006cc0:	2117      	movs	r1, #23
 8006cc2:	187b      	adds	r3, r7, r1
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	18d2      	adds	r2, r2, r3
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	7810      	ldrb	r0, [r2, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	216c      	movs	r1, #108	; 0x6c
 8006cd4:	18d3      	adds	r3, r2, r3
 8006cd6:	185b      	adds	r3, r3, r1
 8006cd8:	1c02      	adds	r2, r0, #0
 8006cda:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8006cdc:	230a      	movs	r3, #10
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	0011      	movs	r1, r2
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f7ff fad0 	bl	800628c <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8006cec:	2117      	movs	r1, #23
 8006cee:	187b      	adds	r3, r7, r1
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	187b      	adds	r3, r7, r1
 8006cf4:	3201      	adds	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	2317      	movs	r3, #23
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d9ca      	bls.n	8006c98 <LEDstr+0x28>
		}

	}
}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46c0      	nop			; (mov r8, r8)
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b006      	add	sp, #24
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	000a      	movs	r2, r1
 8006d16:	1cfb      	adds	r3, r7, #3
 8006d18:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	1cfa      	adds	r2, r7, #3
 8006d1e:	2164      	movs	r1, #100	; 0x64
 8006d20:	7812      	ldrb	r2, [r2, #0]
 8006d22:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8006d24:	46c0      	nop			; (mov r8, r8)
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b096      	sub	sp, #88	; 0x58
 8006d30:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d32:	f7fb fbd1 	bl	80024d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d36:	f000 fa3f 	bl	80071b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d3a:	f000 fc4f 	bl	80075dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8006d3e:	f000 fba3 	bl	8007488 <MX_TIM1_Init>
  MX_ADC1_Init();
 8006d42:	f000 fa8f 	bl	8007264 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8006d46:	f000 fbfb 	bl	8007540 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006d4a:	f000 faf1 	bl	8007330 <MX_I2C1_Init>
  MX_RTC_Init();
 8006d4e:	f000 fb2f 	bl	80073b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8006d52:	4bfb      	ldr	r3, [pc, #1004]	; (8007140 <main+0x414>)
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7fd ff6f 	bl	8004c38 <HAL_TIM_Base_Start_IT>

	//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 8006d5a:	23a0      	movs	r3, #160	; 0xa0
 8006d5c:	05da      	lsls	r2, r3, #23
 8006d5e:	49f9      	ldr	r1, [pc, #996]	; (8007144 <main+0x418>)
 8006d60:	48f9      	ldr	r0, [pc, #996]	; (8007148 <main+0x41c>)
 8006d62:	2380      	movs	r3, #128	; 0x80
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	9314      	str	r3, [sp, #80]	; 0x50
 8006d68:	23a0      	movs	r3, #160	; 0xa0
 8006d6a:	05db      	lsls	r3, r3, #23
 8006d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d6e:	2301      	movs	r3, #1
 8006d70:	9312      	str	r3, [sp, #72]	; 0x48
 8006d72:	4bf6      	ldr	r3, [pc, #984]	; (800714c <main+0x420>)
 8006d74:	9311      	str	r3, [sp, #68]	; 0x44
 8006d76:	2380      	movs	r3, #128	; 0x80
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	9310      	str	r3, [sp, #64]	; 0x40
 8006d7c:	23a0      	movs	r3, #160	; 0xa0
 8006d7e:	05db      	lsls	r3, r3, #23
 8006d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d82:	2304      	movs	r3, #4
 8006d84:	930e      	str	r3, [sp, #56]	; 0x38
 8006d86:	4bf1      	ldr	r3, [pc, #964]	; (800714c <main+0x420>)
 8006d88:	930d      	str	r3, [sp, #52]	; 0x34
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d90:	23a0      	movs	r3, #160	; 0xa0
 8006d92:	05db      	lsls	r3, r3, #23
 8006d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d96:	2302      	movs	r3, #2
 8006d98:	930a      	str	r3, [sp, #40]	; 0x28
 8006d9a:	4bec      	ldr	r3, [pc, #944]	; (800714c <main+0x420>)
 8006d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	23a0      	movs	r3, #160	; 0xa0
 8006da4:	05db      	lsls	r3, r3, #23
 8006da6:	9307      	str	r3, [sp, #28]
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	9306      	str	r3, [sp, #24]
 8006dae:	23a0      	movs	r3, #160	; 0xa0
 8006db0:	05db      	lsls	r3, r3, #23
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	23a0      	movs	r3, #160	; 0xa0
 8006dba:	05db      	lsls	r3, r3, #23
 8006dbc:	9303      	str	r3, [sp, #12]
 8006dbe:	2380      	movs	r3, #128	; 0x80
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	9302      	str	r3, [sp, #8]
 8006dc4:	23a0      	movs	r3, #160	; 0xa0
 8006dc6:	05db      	lsls	r3, r3, #23
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	015b      	lsls	r3, r3, #5
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	0013      	movs	r3, r2
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	f7ff fe92 	bl	8006afc <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "  ");
 8006dd8:	4add      	ldr	r2, [pc, #884]	; (8007150 <main+0x424>)
 8006dda:	4bdb      	ldr	r3, [pc, #876]	; (8007148 <main+0x41c>)
 8006ddc:	0011      	movs	r1, r2
 8006dde:	0018      	movs	r0, r3
 8006de0:	f7ff ff0c 	bl	8006bfc <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 8006de4:	48db      	ldr	r0, [pc, #876]	; (8007154 <main+0x428>)
 8006de6:	2301      	movs	r3, #1
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	23ff      	movs	r3, #255	; 0xff
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	f000 fef4 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8006df8:	48d6      	ldr	r0, [pc, #856]	; (8007154 <main+0x428>)
 8006dfa:	23ff      	movs	r3, #255	; 0xff
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	23ff      	movs	r3, #255	; 0xff
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	23ff      	movs	r3, #255	; 0xff
 8006e04:	2200      	movs	r2, #0
 8006e06:	2101      	movs	r1, #1
 8006e08:	f000 feea 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8006e0c:	48d1      	ldr	r0, [pc, #836]	; (8007154 <main+0x428>)
 8006e0e:	23ff      	movs	r3, #255	; 0xff
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	23ff      	movs	r3, #255	; 0xff
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	23ff      	movs	r3, #255	; 0xff
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	f000 fee0 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8006e20:	48cc      	ldr	r0, [pc, #816]	; (8007154 <main+0x428>)
 8006e22:	23ff      	movs	r3, #255	; 0xff
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	23ff      	movs	r3, #255	; 0xff
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	23ff      	movs	r3, #255	; 0xff
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2103      	movs	r1, #3
 8006e30:	f000 fed6 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8006e34:	48c7      	ldr	r0, [pc, #796]	; (8007154 <main+0x428>)
 8006e36:	23ff      	movs	r3, #255	; 0xff
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	23ff      	movs	r3, #255	; 0xff
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	23ff      	movs	r3, #255	; 0xff
 8006e40:	2200      	movs	r2, #0
 8006e42:	2104      	movs	r1, #4
 8006e44:	f000 fecc 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, AZIMUTH, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8006e48:	48c2      	ldr	r0, [pc, #776]	; (8007154 <main+0x428>)
 8006e4a:	23ff      	movs	r3, #255	; 0xff
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	23ff      	movs	r3, #255	; 0xff
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	2200      	movs	r2, #0
 8006e56:	2105      	movs	r1, #5
 8006e58:	f000 fec2 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, 2, 3);
 8006e5c:	48bd      	ldr	r0, [pc, #756]	; (8007154 <main+0x428>)
 8006e5e:	2303      	movs	r3, #3
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	2302      	movs	r3, #2
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	23ff      	movs	r3, #255	; 0xff
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2106      	movs	r1, #6
 8006e6c:	f000 feb8 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, 4, 7);
 8006e70:	48b8      	ldr	r0, [pc, #736]	; (8007154 <main+0x428>)
 8006e72:	2307      	movs	r3, #7
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	2304      	movs	r3, #4
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	23ff      	movs	r3, #255	; 0xff
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2107      	movs	r1, #7
 8006e80:	f000 feae 	bl	8007be0 <menuItemInit>

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 8006e84:	48b3      	ldr	r0, [pc, #716]	; (8007154 <main+0x428>)
 8006e86:	23ff      	movs	r3, #255	; 0xff
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	23ff      	movs	r3, #255	; 0xff
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2201      	movs	r2, #1
 8006e92:	2100      	movs	r1, #0
 8006e94:	f000 fea4 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 8006e98:	48ae      	ldr	r0, [pc, #696]	; (8007154 <main+0x428>)
 8006e9a:	23ff      	movs	r3, #255	; 0xff
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	23ff      	movs	r3, #255	; 0xff
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	f000 fe9a 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 8006eac:	48a9      	ldr	r0, [pc, #676]	; (8007154 <main+0x428>)
 8006eae:	23ff      	movs	r3, #255	; 0xff
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	23ff      	movs	r3, #255	; 0xff
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2306      	movs	r3, #6
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2102      	movs	r1, #2
 8006ebc:	f000 fe90 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 8006ec0:	48a4      	ldr	r0, [pc, #656]	; (8007154 <main+0x428>)
 8006ec2:	23ff      	movs	r3, #255	; 0xff
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	23ff      	movs	r3, #255	; 0xff
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2306      	movs	r3, #6
 8006ecc:	2201      	movs	r2, #1
 8006ece:	2103      	movs	r1, #3
 8006ed0:	f000 fe86 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, 0, 1);
 8006ed4:	489f      	ldr	r0, [pc, #636]	; (8007154 <main+0x428>)
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	2300      	movs	r3, #0
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2307      	movs	r3, #7
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	2104      	movs	r1, #4
 8006ee4:	f000 fe7c 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS, 2, 3);
 8006ee8:	489a      	ldr	r0, [pc, #616]	; (8007154 <main+0x428>)
 8006eea:	2303      	movs	r3, #3
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	2302      	movs	r3, #2
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	2307      	movs	r3, #7
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	2105      	movs	r1, #5
 8006ef8:	f000 fe72 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS, MENU_NONE, MENU_NONE);
 8006efc:	4895      	ldr	r0, [pc, #596]	; (8007154 <main+0x428>)
 8006efe:	23ff      	movs	r3, #255	; 0xff
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	23ff      	movs	r3, #255	; 0xff
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2307      	movs	r3, #7
 8006f08:	2201      	movs	r2, #1
 8006f0a:	2106      	movs	r1, #6
 8006f0c:	f000 fe68 	bl	8007be0 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS, MENU_NONE, MENU_NONE);
 8006f10:	4890      	ldr	r0, [pc, #576]	; (8007154 <main+0x428>)
 8006f12:	23ff      	movs	r3, #255	; 0xff
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	23ff      	movs	r3, #255	; 0xff
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	2307      	movs	r3, #7
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	2107      	movs	r1, #7
 8006f20:	f000 fe5e 	bl	8007be0 <menuItemInit>

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOURMINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 8006f24:	488b      	ldr	r0, [pc, #556]	; (8007154 <main+0x428>)
 8006f26:	23ff      	movs	r3, #255	; 0xff
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	23ff      	movs	r3, #255	; 0xff
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	2304      	movs	r3, #4
 8006f30:	2202      	movs	r2, #2
 8006f32:	2100      	movs	r1, #0
 8006f34:	f000 fe54 	bl	8007be0 <menuItemInit>
			MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK, MENU_NONE,
 8006f38:	4886      	ldr	r0, [pc, #536]	; (8007154 <main+0x428>)
 8006f3a:	23ff      	movs	r3, #255	; 0xff
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	23ff      	movs	r3, #255	; 0xff
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	2304      	movs	r3, #4
 8006f44:	2202      	movs	r2, #2
 8006f46:	2101      	movs	r1, #1
 8006f48:	f000 fe4a 	bl	8007be0 <menuItemInit>
			MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAYMONTH, 2, SETTINGS_CALENDAR,
 8006f4c:	4881      	ldr	r0, [pc, #516]	; (8007154 <main+0x428>)
 8006f4e:	23ff      	movs	r3, #255	; 0xff
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	23ff      	movs	r3, #255	; 0xff
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2305      	movs	r3, #5
 8006f58:	2202      	movs	r2, #2
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	f000 fe40 	bl	8007be0 <menuItemInit>
			MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR, MENU_NONE,
 8006f60:	487c      	ldr	r0, [pc, #496]	; (8007154 <main+0x428>)
 8006f62:	23ff      	movs	r3, #255	; 0xff
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	23ff      	movs	r3, #255	; 0xff
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	2305      	movs	r3, #5
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	2103      	movs	r1, #3
 8006f70:	f000 fe36 	bl	8007be0 <menuItemInit>
			MENU_NONE);

	//												MENU ITEMS VALUES
	//level 1
//	menuItemChangeValue(&menu, CLOCK, 0, "2114", 1);
	menuItemChangeValue(&menu, BAROMETER, 0, "1024", LED_DOT_DISABLED);
 8006f74:	4b78      	ldr	r3, [pc, #480]	; (8007158 <main+0x42c>)
 8006f76:	4877      	ldr	r0, [pc, #476]	; (8007154 <main+0x428>)
 8006f78:	2204      	movs	r2, #4
 8006f7a:	9200      	str	r2, [sp, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2101      	movs	r1, #1
 8006f80:	f000 fd96 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, HIGROMETER, 0, "42 H", LED_DOT_DISABLED);
 8006f84:	4b75      	ldr	r3, [pc, #468]	; (800715c <main+0x430>)
 8006f86:	4873      	ldr	r0, [pc, #460]	; (8007154 <main+0x428>)
 8006f88:	2204      	movs	r2, #4
 8006f8a:	9200      	str	r2, [sp, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2102      	movs	r1, #2
 8006f90:	f000 fd8e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, TEMPERATURE, 0, "20 ^", LED_DOT_DISABLED);
 8006f94:	4b72      	ldr	r3, [pc, #456]	; (8007160 <main+0x434>)
 8006f96:	486f      	ldr	r0, [pc, #444]	; (8007154 <main+0x428>)
 8006f98:	2204      	movs	r2, #4
 8006f9a:	9200      	str	r2, [sp, #0]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2103      	movs	r1, #3
 8006fa0:	f000 fd86 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, ALTITUDE, 0, " 102", LED_DOT_DISABLED);
 8006fa4:	4b6f      	ldr	r3, [pc, #444]	; (8007164 <main+0x438>)
 8006fa6:	486b      	ldr	r0, [pc, #428]	; (8007154 <main+0x428>)
 8006fa8:	2204      	movs	r2, #4
 8006faa:	9200      	str	r2, [sp, #0]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2104      	movs	r1, #4
 8006fb0:	f000 fd7e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, AZIMUTH, 0, "350^", LED_DOT_DISABLED);
 8006fb4:	4b6c      	ldr	r3, [pc, #432]	; (8007168 <main+0x43c>)
 8006fb6:	4867      	ldr	r0, [pc, #412]	; (8007154 <main+0x428>)
 8006fb8:	2204      	movs	r2, #4
 8006fba:	9200      	str	r2, [sp, #0]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2105      	movs	r1, #5
 8006fc0:	f000 fd76 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, CHRONO, 0, "0000", 1);
 8006fc4:	4b69      	ldr	r3, [pc, #420]	; (800716c <main+0x440>)
 8006fc6:	4863      	ldr	r0, [pc, #396]	; (8007154 <main+0x428>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	9200      	str	r2, [sp, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2106      	movs	r1, #6
 8006fd0:	f000 fd6e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", LED_DOT_DISABLED);
 8006fd4:	4b66      	ldr	r3, [pc, #408]	; (8007170 <main+0x444>)
 8006fd6:	485f      	ldr	r0, [pc, #380]	; (8007154 <main+0x428>)
 8006fd8:	2204      	movs	r2, #4
 8006fda:	9200      	str	r2, [sp, #0]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2107      	movs	r1, #7
 8006fe0:	f000 fd66 	bl	8007ab0 <menuItemChangeValue>

	//level 2
//	menuItemChangeValue(&menu, CLOCK_DATE, 1, "1604", 0);
//	menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, " :45", 0);
	menuItemChangeValue(&menu, CHRONO_HOURS, 1, "02 h", LED_DOT_DISABLED);
 8006fe4:	4b63      	ldr	r3, [pc, #396]	; (8007174 <main+0x448>)
 8006fe6:	485b      	ldr	r0, [pc, #364]	; (8007154 <main+0x428>)
 8006fe8:	2204      	movs	r2, #4
 8006fea:	9200      	str	r2, [sp, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	2102      	movs	r1, #2
 8006ff0:	f000 fd5e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", 1);
 8006ff4:	4b60      	ldr	r3, [pc, #384]	; (8007178 <main+0x44c>)
 8006ff6:	4857      	ldr	r0, [pc, #348]	; (8007154 <main+0x428>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	9200      	str	r2, [sp, #0]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	2103      	movs	r1, #3
 8007000:	f000 fd56 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", LED_DOT_DISABLED);
 8007004:	4b5d      	ldr	r3, [pc, #372]	; (800717c <main+0x450>)
 8007006:	4853      	ldr	r0, [pc, #332]	; (8007154 <main+0x428>)
 8007008:	2204      	movs	r2, #4
 800700a:	9200      	str	r2, [sp, #0]
 800700c:	2201      	movs	r2, #1
 800700e:	2104      	movs	r1, #4
 8007010:	f000 fd4e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", LED_DOT_DISABLED);
 8007014:	4b5a      	ldr	r3, [pc, #360]	; (8007180 <main+0x454>)
 8007016:	484f      	ldr	r0, [pc, #316]	; (8007154 <main+0x428>)
 8007018:	2204      	movs	r2, #4
 800701a:	9200      	str	r2, [sp, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	2105      	movs	r1, #5
 8007020:	f000 fd46 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ", LED_DOT_DISABLED);
 8007024:	4b57      	ldr	r3, [pc, #348]	; (8007184 <main+0x458>)
 8007026:	484b      	ldr	r0, [pc, #300]	; (8007154 <main+0x428>)
 8007028:	2204      	movs	r2, #4
 800702a:	9200      	str	r2, [sp, #0]
 800702c:	2201      	movs	r2, #1
 800702e:	2106      	movs	r1, #6
 8007030:	f000 fd3e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ",
 8007034:	4b54      	ldr	r3, [pc, #336]	; (8007188 <main+0x45c>)
 8007036:	4847      	ldr	r0, [pc, #284]	; (8007154 <main+0x428>)
 8007038:	2204      	movs	r2, #4
 800703a:	9200      	str	r2, [sp, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	2107      	movs	r1, #7
 8007040:	f000 fd36 	bl	8007ab0 <menuItemChangeValue>
			LED_DOT_DISABLED);

	//level 3
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOURMINUTE, 2, "2114", 1);
 8007044:	4b51      	ldr	r3, [pc, #324]	; (800718c <main+0x460>)
 8007046:	4843      	ldr	r0, [pc, #268]	; (8007154 <main+0x428>)
 8007048:	2201      	movs	r2, #1
 800704a:	9200      	str	r2, [sp, #0]
 800704c:	2202      	movs	r2, #2
 800704e:	2100      	movs	r1, #0
 8007050:	f000 fd2e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, "  45", 0);
 8007054:	4b4e      	ldr	r3, [pc, #312]	; (8007190 <main+0x464>)
 8007056:	483f      	ldr	r0, [pc, #252]	; (8007154 <main+0x428>)
 8007058:	2200      	movs	r2, #0
 800705a:	9200      	str	r2, [sp, #0]
 800705c:	2202      	movs	r2, #2
 800705e:	2101      	movs	r1, #1
 8007060:	f000 fd26 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAYMONTH, 2, "1604", 0);
 8007064:	4b4b      	ldr	r3, [pc, #300]	; (8007194 <main+0x468>)
 8007066:	483b      	ldr	r0, [pc, #236]	; (8007154 <main+0x428>)
 8007068:	2200      	movs	r2, #0
 800706a:	9200      	str	r2, [sp, #0]
 800706c:	2202      	movs	r2, #2
 800706e:	2102      	movs	r1, #2
 8007070:	f000 fd1e 	bl	8007ab0 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, "2022",
 8007074:	4b48      	ldr	r3, [pc, #288]	; (8007198 <main+0x46c>)
 8007076:	4837      	ldr	r0, [pc, #220]	; (8007154 <main+0x428>)
 8007078:	2204      	movs	r2, #4
 800707a:	9200      	str	r2, [sp, #0]
 800707c:	2202      	movs	r2, #2
 800707e:	2103      	movs	r1, #3
 8007080:	f000 fd16 	bl	8007ab0 <menuItemChangeValue>
			LED_DOT_DISABLED);

	menuInit(&menu);
 8007084:	4b33      	ldr	r3, [pc, #204]	; (8007154 <main+0x428>)
 8007086:	0018      	movs	r0, r3
 8007088:	f000 fd02 	bl	8007a90 <menuInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//read RTC time
		rtcGetTime(&chronograph);
 800708c:	4b43      	ldr	r3, [pc, #268]	; (800719c <main+0x470>)
 800708e:	0018      	movs	r0, r3
 8007090:	f001 f8a0 	bl	80081d4 <rtcGetTime>

		//write time to CLOCK item
		memset(buffer, 0, sizeof(buffer));
 8007094:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <main+0x474>)
 8007096:	2204      	movs	r2, #4
 8007098:	2100      	movs	r1, #0
 800709a:	0018      	movs	r0, r3
 800709c:	f001 fd67 	bl	8008b6e <memset>
		twoIntsToArray(buffer, chronograph.actual.hour, chronograph.actual.minute);
 80070a0:	4b3e      	ldr	r3, [pc, #248]	; (800719c <main+0x470>)
 80070a2:	2103      	movs	r1, #3
 80070a4:	5659      	ldrsb	r1, [r3, r1]
 80070a6:	4b3d      	ldr	r3, [pc, #244]	; (800719c <main+0x470>)
 80070a8:	2204      	movs	r2, #4
 80070aa:	569a      	ldrsb	r2, [r3, r2]
 80070ac:	4b3c      	ldr	r3, [pc, #240]	; (80071a0 <main+0x474>)
 80070ae:	0018      	movs	r0, r3
 80070b0:	f000 fc64 	bl	800797c <twoIntsToArray>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON);
 80070b4:	4b3a      	ldr	r3, [pc, #232]	; (80071a0 <main+0x474>)
 80070b6:	4827      	ldr	r0, [pc, #156]	; (8007154 <main+0x428>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	9200      	str	r2, [sp, #0]
 80070bc:	2200      	movs	r2, #0
 80070be:	2100      	movs	r1, #0
 80070c0:	f000 fcf6 	bl	8007ab0 <menuItemChangeValue>

		//write seconds to CLOCK_SECONDHAND
		memset(buffer, 0, sizeof(buffer));
 80070c4:	4b36      	ldr	r3, [pc, #216]	; (80071a0 <main+0x474>)
 80070c6:	2204      	movs	r2, #4
 80070c8:	2100      	movs	r1, #0
 80070ca:	0018      	movs	r0, r3
 80070cc:	f001 fd4f 	bl	8008b6e <memset>
		oneIntToArray(buffer, 2, chronograph.actual.second);
 80070d0:	4b32      	ldr	r3, [pc, #200]	; (800719c <main+0x470>)
 80070d2:	2205      	movs	r2, #5
 80070d4:	569a      	ldrsb	r2, [r3, r2]
 80070d6:	4b32      	ldr	r3, [pc, #200]	; (80071a0 <main+0x474>)
 80070d8:	2102      	movs	r1, #2
 80070da:	0018      	movs	r0, r3
 80070dc:	f000 fc9f 	bl	8007a1e <oneIntToArray>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON);
 80070e0:	4b2f      	ldr	r3, [pc, #188]	; (80071a0 <main+0x474>)
 80070e2:	481c      	ldr	r0, [pc, #112]	; (8007154 <main+0x428>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	9200      	str	r2, [sp, #0]
 80070e8:	2201      	movs	r2, #1
 80070ea:	2101      	movs	r1, #1
 80070ec:	f000 fce0 	bl	8007ab0 <menuItemChangeValue>

		//write date to CLOCK_DATE
		memset(buffer, 0, sizeof(buffer));
 80070f0:	4b2b      	ldr	r3, [pc, #172]	; (80071a0 <main+0x474>)
 80070f2:	2204      	movs	r2, #4
 80070f4:	2100      	movs	r1, #0
 80070f6:	0018      	movs	r0, r3
 80070f8:	f001 fd39 	bl	8008b6e <memset>
		twoIntsToArray(buffer, chronograph.actual.day, chronograph.actual.month);
 80070fc:	4b27      	ldr	r3, [pc, #156]	; (800719c <main+0x470>)
 80070fe:	2102      	movs	r1, #2
 8007100:	5659      	ldrsb	r1, [r3, r1]
 8007102:	4b26      	ldr	r3, [pc, #152]	; (800719c <main+0x470>)
 8007104:	2201      	movs	r2, #1
 8007106:	569a      	ldrsb	r2, [r3, r2]
 8007108:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <main+0x474>)
 800710a:	0018      	movs	r0, r3
 800710c:	f000 fc36 	bl	800797c <twoIntsToArray>
		menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT);
 8007110:	4b23      	ldr	r3, [pc, #140]	; (80071a0 <main+0x474>)
 8007112:	4810      	ldr	r0, [pc, #64]	; (8007154 <main+0x428>)
 8007114:	2200      	movs	r2, #0
 8007116:	9200      	str	r2, [sp, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	2100      	movs	r1, #0
 800711c:	f000 fcc8 	bl	8007ab0 <menuItemChangeValue>


		//display current item
		if(display.transitionStatus == LED_TRANSITION_DISABLED){
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <main+0x41c>)
 8007122:	2267      	movs	r2, #103	; 0x67
 8007124:	5c9b      	ldrb	r3, [r3, r2]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1b0      	bne.n	800708c <main+0x360>
			LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 800712a:	4a1e      	ldr	r2, [pc, #120]	; (80071a4 <main+0x478>)
 800712c:	4806      	ldr	r0, [pc, #24]	; (8007148 <main+0x41c>)
 800712e:	2300      	movs	r3, #0
 8007130:	2100      	movs	r1, #0
 8007132:	f7ff fd9d 	bl	8006c70 <LEDstr>
			LEDdot(&display, menu.current.value2);
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <main+0x428>)
 8007138:	22f4      	movs	r2, #244	; 0xf4
 800713a:	5c9a      	ldrb	r2, [r3, r2]
 800713c:	e034      	b.n	80071a8 <main+0x47c>
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	200002a4 	.word	0x200002a4
 8007144:	50000800 	.word	0x50000800
 8007148:	2000019c 	.word	0x2000019c
 800714c:	50000400 	.word	0x50000400
 8007150:	08008c04 	.word	0x08008c04
 8007154:	2000002c 	.word	0x2000002c
 8007158:	08008c08 	.word	0x08008c08
 800715c:	08008c10 	.word	0x08008c10
 8007160:	08008c18 	.word	0x08008c18
 8007164:	08008c20 	.word	0x08008c20
 8007168:	08008c28 	.word	0x08008c28
 800716c:	08008c30 	.word	0x08008c30
 8007170:	08008c38 	.word	0x08008c38
 8007174:	08008c3c 	.word	0x08008c3c
 8007178:	08008c44 	.word	0x08008c44
 800717c:	08008c4c 	.word	0x08008c4c
 8007180:	08008c54 	.word	0x08008c54
 8007184:	08008c5c 	.word	0x08008c5c
 8007188:	08008c64 	.word	0x08008c64
 800718c:	08008c6c 	.word	0x08008c6c
 8007190:	08008c74 	.word	0x08008c74
 8007194:	08008c7c 	.word	0x08008c7c
 8007198:	08008c84 	.word	0x08008c84
 800719c:	20000174 	.word	0x20000174
 80071a0:	20000274 	.word	0x20000274
 80071a4:	2000011c 	.word	0x2000011c
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <main+0x488>)
 80071aa:	0011      	movs	r1, r2
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7ff fdad 	bl	8006d0c <LEDdot>
		rtcGetTime(&chronograph);
 80071b2:	e76b      	b.n	800708c <main+0x360>
 80071b4:	2000019c 	.word	0x2000019c

080071b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b093      	sub	sp, #76	; 0x4c
 80071bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071be:	2410      	movs	r4, #16
 80071c0:	193b      	adds	r3, r7, r4
 80071c2:	0018      	movs	r0, r3
 80071c4:	2338      	movs	r3, #56	; 0x38
 80071c6:	001a      	movs	r2, r3
 80071c8:	2100      	movs	r1, #0
 80071ca:	f001 fcd0 	bl	8008b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071ce:	003b      	movs	r3, r7
 80071d0:	0018      	movs	r0, r3
 80071d2:	2310      	movs	r3, #16
 80071d4:	001a      	movs	r2, r3
 80071d6:	2100      	movs	r1, #0
 80071d8:	f001 fcc9 	bl	8008b6e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7fc fa95 	bl	8003710 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80071e6:	f7fc fa85 	bl	80036f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <SystemClock_Config+0xa8>)
 80071ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071ee:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <SystemClock_Config+0xa8>)
 80071f0:	2118      	movs	r1, #24
 80071f2:	438a      	bics	r2, r1
 80071f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80071f6:	193b      	adds	r3, r7, r4
 80071f8:	2206      	movs	r2, #6
 80071fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80071fc:	193b      	adds	r3, r7, r4
 80071fe:	2201      	movs	r2, #1
 8007200:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007202:	193b      	adds	r3, r7, r4
 8007204:	2280      	movs	r2, #128	; 0x80
 8007206:	0052      	lsls	r2, r2, #1
 8007208:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800720a:	193b      	adds	r3, r7, r4
 800720c:	2200      	movs	r2, #0
 800720e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007210:	193b      	adds	r3, r7, r4
 8007212:	2240      	movs	r2, #64	; 0x40
 8007214:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007216:	193b      	adds	r3, r7, r4
 8007218:	2200      	movs	r2, #0
 800721a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800721c:	193b      	adds	r3, r7, r4
 800721e:	0018      	movs	r0, r3
 8007220:	f7fc fac2 	bl	80037a8 <HAL_RCC_OscConfig>
 8007224:	1e03      	subs	r3, r0, #0
 8007226:	d001      	beq.n	800722c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8007228:	f000 fc2d 	bl	8007a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800722c:	003b      	movs	r3, r7
 800722e:	2207      	movs	r2, #7
 8007230:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007232:	003b      	movs	r3, r7
 8007234:	2200      	movs	r2, #0
 8007236:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007238:	003b      	movs	r3, r7
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800723e:	003b      	movs	r3, r7
 8007240:	2200      	movs	r2, #0
 8007242:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007244:	003b      	movs	r3, r7
 8007246:	2100      	movs	r1, #0
 8007248:	0018      	movs	r0, r3
 800724a:	f7fc fdcd 	bl	8003de8 <HAL_RCC_ClockConfig>
 800724e:	1e03      	subs	r3, r0, #0
 8007250:	d001      	beq.n	8007256 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8007252:	f000 fc18 	bl	8007a86 <Error_Handler>
  }
}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	46bd      	mov	sp, r7
 800725a:	b013      	add	sp, #76	; 0x4c
 800725c:	bd90      	pop	{r4, r7, pc}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	40021000 	.word	0x40021000

08007264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	0018      	movs	r0, r3
 800726e:	230c      	movs	r3, #12
 8007270:	001a      	movs	r2, r3
 8007272:	2100      	movs	r1, #0
 8007274:	f001 fc7b 	bl	8008b6e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007278:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <MX_ADC1_Init+0xc4>)
 800727a:	4a2c      	ldr	r2, [pc, #176]	; (800732c <MX_ADC1_Init+0xc8>)
 800727c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800727e:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <MX_ADC1_Init+0xc4>)
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	05d2      	lsls	r2, r2, #23
 8007284:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007286:	4b28      	ldr	r3, [pc, #160]	; (8007328 <MX_ADC1_Init+0xc4>)
 8007288:	2200      	movs	r2, #0
 800728a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800728c:	4b26      	ldr	r3, [pc, #152]	; (8007328 <MX_ADC1_Init+0xc4>)
 800728e:	2200      	movs	r2, #0
 8007290:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007292:	4b25      	ldr	r3, [pc, #148]	; (8007328 <MX_ADC1_Init+0xc4>)
 8007294:	2200      	movs	r2, #0
 8007296:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007298:	4b23      	ldr	r3, [pc, #140]	; (8007328 <MX_ADC1_Init+0xc4>)
 800729a:	2204      	movs	r2, #4
 800729c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800729e:	4b22      	ldr	r3, [pc, #136]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80072a4:	4b20      	ldr	r3, [pc, #128]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80072aa:	4b1f      	ldr	r3, [pc, #124]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80072b6:	4b1c      	ldr	r3, [pc, #112]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072be:	2200      	movs	r2, #0
 80072c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80072c2:	4b19      	ldr	r3, [pc, #100]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072c4:	222c      	movs	r2, #44	; 0x2c
 80072c6:	2100      	movs	r1, #0
 80072c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80072d0:	4b15      	ldr	r3, [pc, #84]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072d8:	2200      	movs	r2, #0
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80072dc:	4b12      	ldr	r3, [pc, #72]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072de:	223c      	movs	r2, #60	; 0x3c
 80072e0:	2100      	movs	r1, #0
 80072e2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80072e4:	4b10      	ldr	r3, [pc, #64]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80072ea:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <MX_ADC1_Init+0xc4>)
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7fb fa77 	bl	80027e0 <HAL_ADC_Init>
 80072f2:	1e03      	subs	r3, r0, #0
 80072f4:	d001      	beq.n	80072fa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80072f6:	f000 fbc6 	bl	8007a86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80072fa:	1d3b      	adds	r3, r7, #4
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	2200      	movs	r2, #0
 8007304:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8007306:	1d3b      	adds	r3, r7, #4
 8007308:	2200      	movs	r2, #0
 800730a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800730c:	1d3a      	adds	r2, r7, #4
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <MX_ADC1_Init+0xc4>)
 8007310:	0011      	movs	r1, r2
 8007312:	0018      	movs	r0, r3
 8007314:	f7fb fc42 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8007318:	1e03      	subs	r3, r0, #0
 800731a:	d001      	beq.n	8007320 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800731c:	f000 fbb3 	bl	8007a86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	b004      	add	sp, #16
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000210 	.word	0x20000210
 800732c:	40012400 	.word	0x40012400

08007330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <MX_I2C1_Init+0x74>)
 8007336:	4a1c      	ldr	r2, [pc, #112]	; (80073a8 <MX_I2C1_Init+0x78>)
 8007338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800733a:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <MX_I2C1_Init+0x74>)
 800733c:	4a1b      	ldr	r2, [pc, #108]	; (80073ac <MX_I2C1_Init+0x7c>)
 800733e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007340:	4b18      	ldr	r3, [pc, #96]	; (80073a4 <MX_I2C1_Init+0x74>)
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007346:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <MX_I2C1_Init+0x74>)
 8007348:	2201      	movs	r2, #1
 800734a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800734c:	4b15      	ldr	r3, [pc, #84]	; (80073a4 <MX_I2C1_Init+0x74>)
 800734e:	2200      	movs	r2, #0
 8007350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <MX_I2C1_Init+0x74>)
 8007354:	2200      	movs	r2, #0
 8007356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <MX_I2C1_Init+0x74>)
 800735a:	2200      	movs	r2, #0
 800735c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <MX_I2C1_Init+0x74>)
 8007360:	2200      	movs	r2, #0
 8007362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <MX_I2C1_Init+0x74>)
 8007366:	2200      	movs	r2, #0
 8007368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <MX_I2C1_Init+0x74>)
 800736c:	0018      	movs	r0, r3
 800736e:	f7fc f893 	bl	8003498 <HAL_I2C_Init>
 8007372:	1e03      	subs	r3, r0, #0
 8007374:	d001      	beq.n	800737a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007376:	f000 fb86 	bl	8007a86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800737a:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <MX_I2C1_Init+0x74>)
 800737c:	2100      	movs	r1, #0
 800737e:	0018      	movs	r0, r3
 8007380:	f7fc f920 	bl	80035c4 <HAL_I2CEx_ConfigAnalogFilter>
 8007384:	1e03      	subs	r3, r0, #0
 8007386:	d001      	beq.n	800738c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007388:	f000 fb7d 	bl	8007a86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <MX_I2C1_Init+0x74>)
 800738e:	2100      	movs	r1, #0
 8007390:	0018      	movs	r0, r3
 8007392:	f7fc f963 	bl	800365c <HAL_I2CEx_ConfigDigitalFilter>
 8007396:	1e03      	subs	r3, r0, #0
 8007398:	d001      	beq.n	800739e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800739a:	f000 fb74 	bl	8007a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000128 	.word	0x20000128
 80073a8:	40005400 	.word	0x40005400
 80073ac:	00303d5b 	.word	0x00303d5b

080073b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	0018      	movs	r0, r3
 80073ba:	2314      	movs	r3, #20
 80073bc:	001a      	movs	r2, r3
 80073be:	2100      	movs	r1, #0
 80073c0:	f001 fbd5 	bl	8008b6e <memset>
  RTC_DateTypeDef sDate = {0};
 80073c4:	003b      	movs	r3, r7
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80073ca:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <MX_RTC_Init+0xd0>)
 80073cc:	4a2d      	ldr	r2, [pc, #180]	; (8007484 <MX_RTC_Init+0xd4>)
 80073ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80073d0:	4b2b      	ldr	r3, [pc, #172]	; (8007480 <MX_RTC_Init+0xd0>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80073d6:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <MX_RTC_Init+0xd0>)
 80073d8:	227f      	movs	r2, #127	; 0x7f
 80073da:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80073dc:	4b28      	ldr	r3, [pc, #160]	; (8007480 <MX_RTC_Init+0xd0>)
 80073de:	22ff      	movs	r2, #255	; 0xff
 80073e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80073e2:	4b27      	ldr	r3, [pc, #156]	; (8007480 <MX_RTC_Init+0xd0>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80073e8:	4b25      	ldr	r3, [pc, #148]	; (8007480 <MX_RTC_Init+0xd0>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80073ee:	4b24      	ldr	r3, [pc, #144]	; (8007480 <MX_RTC_Init+0xd0>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80073f4:	4b22      	ldr	r3, [pc, #136]	; (8007480 <MX_RTC_Init+0xd0>)
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	05d2      	lsls	r2, r2, #23
 80073fa:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80073fc:	4b20      	ldr	r3, [pc, #128]	; (8007480 <MX_RTC_Init+0xd0>)
 80073fe:	2200      	movs	r2, #0
 8007400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007402:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <MX_RTC_Init+0xd0>)
 8007404:	0018      	movs	r0, r3
 8007406:	f7fd f851 	bl	80044ac <HAL_RTC_Init>
 800740a:	1e03      	subs	r3, r0, #0
 800740c:	d001      	beq.n	8007412 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800740e:	f000 fb3a 	bl	8007a86 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	220d      	movs	r2, #13
 8007416:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 2;
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	2202      	movs	r2, #2
 800741c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800741e:	1d3b      	adds	r3, r7, #4
 8007420:	2200      	movs	r2, #0
 8007422:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	2200      	movs	r2, #0
 8007428:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800742a:	1d3b      	adds	r3, r7, #4
 800742c:	2200      	movs	r2, #0
 800742e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	2200      	movs	r2, #0
 8007434:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007436:	1d39      	adds	r1, r7, #4
 8007438:	4b11      	ldr	r3, [pc, #68]	; (8007480 <MX_RTC_Init+0xd0>)
 800743a:	2200      	movs	r2, #0
 800743c:	0018      	movs	r0, r3
 800743e:	f7fd f8cb 	bl	80045d8 <HAL_RTC_SetTime>
 8007442:	1e03      	subs	r3, r0, #0
 8007444:	d001      	beq.n	800744a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8007446:	f000 fb1e 	bl	8007a86 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800744a:	003b      	movs	r3, r7
 800744c:	2201      	movs	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8007450:	003b      	movs	r3, r7
 8007452:	2204      	movs	r2, #4
 8007454:	705a      	strb	r2, [r3, #1]
  sDate.Date = 18;
 8007456:	003b      	movs	r3, r7
 8007458:	2212      	movs	r2, #18
 800745a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 22;
 800745c:	003b      	movs	r3, r7
 800745e:	2216      	movs	r2, #22
 8007460:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8007462:	0039      	movs	r1, r7
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <MX_RTC_Init+0xd0>)
 8007466:	2200      	movs	r2, #0
 8007468:	0018      	movs	r0, r3
 800746a:	f7fd f9b9 	bl	80047e0 <HAL_RTC_SetDate>
 800746e:	1e03      	subs	r3, r0, #0
 8007470:	d001      	beq.n	8007476 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8007472:	f000 fb08 	bl	8007a86 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	46bd      	mov	sp, r7
 800747a:	b006      	add	sp, #24
 800747c:	bd80      	pop	{r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	20000278 	.word	0x20000278
 8007484:	40002800 	.word	0x40002800

08007488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800748e:	2310      	movs	r3, #16
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	0018      	movs	r0, r3
 8007494:	2310      	movs	r3, #16
 8007496:	001a      	movs	r2, r3
 8007498:	2100      	movs	r1, #0
 800749a:	f001 fb68 	bl	8008b6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800749e:	1d3b      	adds	r3, r7, #4
 80074a0:	0018      	movs	r0, r3
 80074a2:	230c      	movs	r3, #12
 80074a4:	001a      	movs	r2, r3
 80074a6:	2100      	movs	r1, #0
 80074a8:	f001 fb61 	bl	8008b6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80074ac:	4b21      	ldr	r3, [pc, #132]	; (8007534 <MX_TIM1_Init+0xac>)
 80074ae:	4a22      	ldr	r2, [pc, #136]	; (8007538 <MX_TIM1_Init+0xb0>)
 80074b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80074b2:	4b20      	ldr	r3, [pc, #128]	; (8007534 <MX_TIM1_Init+0xac>)
 80074b4:	2204      	movs	r2, #4
 80074b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <MX_TIM1_Init+0xac>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80074be:	4b1d      	ldr	r3, [pc, #116]	; (8007534 <MX_TIM1_Init+0xac>)
 80074c0:	4a1e      	ldr	r2, [pc, #120]	; (800753c <MX_TIM1_Init+0xb4>)
 80074c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074c4:	4b1b      	ldr	r3, [pc, #108]	; (8007534 <MX_TIM1_Init+0xac>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80074ca:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <MX_TIM1_Init+0xac>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074d0:	4b18      	ldr	r3, [pc, #96]	; (8007534 <MX_TIM1_Init+0xac>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80074d6:	4b17      	ldr	r3, [pc, #92]	; (8007534 <MX_TIM1_Init+0xac>)
 80074d8:	0018      	movs	r0, r3
 80074da:	f7fd fb54 	bl	8004b86 <HAL_TIM_Base_Init>
 80074de:	1e03      	subs	r3, r0, #0
 80074e0:	d001      	beq.n	80074e6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80074e2:	f000 fad0 	bl	8007a86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074e6:	2110      	movs	r1, #16
 80074e8:	187b      	adds	r3, r7, r1
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	0152      	lsls	r2, r2, #5
 80074ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80074f0:	187a      	adds	r2, r7, r1
 80074f2:	4b10      	ldr	r3, [pc, #64]	; (8007534 <MX_TIM1_Init+0xac>)
 80074f4:	0011      	movs	r1, r2
 80074f6:	0018      	movs	r0, r3
 80074f8:	f7fd fd2c 	bl	8004f54 <HAL_TIM_ConfigClockSource>
 80074fc:	1e03      	subs	r3, r0, #0
 80074fe:	d001      	beq.n	8007504 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007500:	f000 fac1 	bl	8007a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007516:	1d3a      	adds	r2, r7, #4
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <MX_TIM1_Init+0xac>)
 800751a:	0011      	movs	r1, r2
 800751c:	0018      	movs	r0, r3
 800751e:	f7fd ff21 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8007522:	1e03      	subs	r3, r0, #0
 8007524:	d001      	beq.n	800752a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8007526:	f000 faae 	bl	8007a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	46bd      	mov	sp, r7
 800752e:	b008      	add	sp, #32
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	200002a4 	.word	0x200002a4
 8007538:	40012c00 	.word	0x40012c00
 800753c:	000007cf 	.word	0x000007cf

08007540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007544:	4b23      	ldr	r3, [pc, #140]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007546:	4a24      	ldr	r2, [pc, #144]	; (80075d8 <MX_USART2_UART_Init+0x98>)
 8007548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800754a:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 800754c:	2296      	movs	r2, #150	; 0x96
 800754e:	0192      	lsls	r2, r2, #6
 8007550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007552:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007554:	2200      	movs	r2, #0
 8007556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007558:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 800755a:	2200      	movs	r2, #0
 800755c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800755e:	4b1d      	ldr	r3, [pc, #116]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007560:	2200      	movs	r2, #0
 8007562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007564:	4b1b      	ldr	r3, [pc, #108]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007566:	220c      	movs	r2, #12
 8007568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800756a:	4b1a      	ldr	r3, [pc, #104]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 800756c:	2200      	movs	r2, #0
 800756e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007570:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007572:	2200      	movs	r2, #0
 8007574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007576:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007578:	2200      	movs	r2, #0
 800757a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800757c:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 800757e:	2200      	movs	r2, #0
 8007580:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 8007584:	2200      	movs	r2, #0
 8007586:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 800758a:	0018      	movs	r0, r3
 800758c:	f7fd ff70 	bl	8005470 <HAL_UART_Init>
 8007590:	1e03      	subs	r3, r0, #0
 8007592:	d001      	beq.n	8007598 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8007594:	f000 fa77 	bl	8007a86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007598:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 800759a:	2100      	movs	r1, #0
 800759c:	0018      	movs	r0, r3
 800759e:	f7fe fc9b 	bl	8005ed8 <HAL_UARTEx_SetTxFifoThreshold>
 80075a2:	1e03      	subs	r3, r0, #0
 80075a4:	d001      	beq.n	80075aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80075a6:	f000 fa6e 	bl	8007a86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 80075ac:	2100      	movs	r1, #0
 80075ae:	0018      	movs	r0, r3
 80075b0:	f7fe fcd2 	bl	8005f58 <HAL_UARTEx_SetRxFifoThreshold>
 80075b4:	1e03      	subs	r3, r0, #0
 80075b6:	d001      	beq.n	80075bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80075b8:	f000 fa65 	bl	8007a86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <MX_USART2_UART_Init+0x94>)
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fe fc50 	bl	8005e64 <HAL_UARTEx_DisableFifoMode>
 80075c4:	1e03      	subs	r3, r0, #0
 80075c6:	d001      	beq.n	80075cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80075c8:	f000 fa5d 	bl	8007a86 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	20000304 	.word	0x20000304
 80075d8:	40004400 	.word	0x40004400

080075dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075dc:	b590      	push	{r4, r7, lr}
 80075de:	b089      	sub	sp, #36	; 0x24
 80075e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e2:	240c      	movs	r4, #12
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	0018      	movs	r0, r3
 80075e8:	2314      	movs	r3, #20
 80075ea:	001a      	movs	r2, r3
 80075ec:	2100      	movs	r1, #0
 80075ee:	f001 fabe 	bl	8008b6e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f2:	4b52      	ldr	r3, [pc, #328]	; (800773c <MX_GPIO_Init+0x160>)
 80075f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f6:	4b51      	ldr	r3, [pc, #324]	; (800773c <MX_GPIO_Init+0x160>)
 80075f8:	2102      	movs	r1, #2
 80075fa:	430a      	orrs	r2, r1
 80075fc:	635a      	str	r2, [r3, #52]	; 0x34
 80075fe:	4b4f      	ldr	r3, [pc, #316]	; (800773c <MX_GPIO_Init+0x160>)
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	2202      	movs	r2, #2
 8007604:	4013      	ands	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
 8007608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800760a:	4b4c      	ldr	r3, [pc, #304]	; (800773c <MX_GPIO_Init+0x160>)
 800760c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760e:	4b4b      	ldr	r3, [pc, #300]	; (800773c <MX_GPIO_Init+0x160>)
 8007610:	2104      	movs	r1, #4
 8007612:	430a      	orrs	r2, r1
 8007614:	635a      	str	r2, [r3, #52]	; 0x34
 8007616:	4b49      	ldr	r3, [pc, #292]	; (800773c <MX_GPIO_Init+0x160>)
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	2204      	movs	r2, #4
 800761c:	4013      	ands	r3, r2
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007622:	4b46      	ldr	r3, [pc, #280]	; (800773c <MX_GPIO_Init+0x160>)
 8007624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007626:	4b45      	ldr	r3, [pc, #276]	; (800773c <MX_GPIO_Init+0x160>)
 8007628:	2101      	movs	r1, #1
 800762a:	430a      	orrs	r2, r1
 800762c:	635a      	str	r2, [r3, #52]	; 0x34
 800762e:	4b43      	ldr	r3, [pc, #268]	; (800773c <MX_GPIO_Init+0x160>)
 8007630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007632:	2201      	movs	r2, #1
 8007634:	4013      	ands	r3, r2
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin|DISP_B_Pin
 800763a:	4941      	ldr	r1, [pc, #260]	; (8007740 <MX_GPIO_Init+0x164>)
 800763c:	23a0      	movs	r3, #160	; 0xa0
 800763e:	05db      	lsls	r3, r3, #23
 8007640:	2200      	movs	r2, #0
 8007642:	0018      	movs	r0, r3
 8007644:	f7fb fee1 	bl	800340a <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin|DISP_DP_Pin|DISP_A_Pin
                          |DISP_F_Pin|DISP_1_Pin|DISP_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_G_Pin|DISP_C_Pin|DISP_E_Pin, GPIO_PIN_RESET);
 8007648:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <MX_GPIO_Init+0x168>)
 800764a:	2200      	movs	r2, #0
 800764c:	2107      	movs	r1, #7
 800764e:	0018      	movs	r0, r3
 8007650:	f7fb fedb 	bl	800340a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_0_GPIO_Port, DISP_0_Pin, GPIO_PIN_RESET);
 8007654:	4b3c      	ldr	r3, [pc, #240]	; (8007748 <MX_GPIO_Init+0x16c>)
 8007656:	2200      	movs	r2, #0
 8007658:	2140      	movs	r1, #64	; 0x40
 800765a:	0018      	movs	r0, r3
 800765c:	f7fb fed5 	bl	800340a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENCODER_ACTIVE_Pin LED1_Pin LED2_Pin DISP_B_Pin
                           DISP_3_Pin DISP_D_Pin DISP_DP_Pin DISP_A_Pin
                           DISP_F_Pin DISP_1_Pin DISP_2_Pin */
  GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin|DISP_B_Pin
 8007660:	193b      	adds	r3, r7, r4
 8007662:	4a37      	ldr	r2, [pc, #220]	; (8007740 <MX_GPIO_Init+0x164>)
 8007664:	601a      	str	r2, [r3, #0]
                          |DISP_3_Pin|DISP_D_Pin|DISP_DP_Pin|DISP_A_Pin
                          |DISP_F_Pin|DISP_1_Pin|DISP_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007666:	193b      	adds	r3, r7, r4
 8007668:	2201      	movs	r2, #1
 800766a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766c:	193b      	adds	r3, r7, r4
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007672:	193b      	adds	r3, r7, r4
 8007674:	2200      	movs	r2, #0
 8007676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007678:	193a      	adds	r2, r7, r4
 800767a:	23a0      	movs	r3, #160	; 0xa0
 800767c:	05db      	lsls	r3, r3, #23
 800767e:	0011      	movs	r1, r2
 8007680:	0018      	movs	r0, r3
 8007682:	f7fb fd41 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_G_Pin DISP_C_Pin DISP_E_Pin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_C_Pin|DISP_E_Pin;
 8007686:	193b      	adds	r3, r7, r4
 8007688:	2207      	movs	r2, #7
 800768a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800768c:	193b      	adds	r3, r7, r4
 800768e:	2201      	movs	r2, #1
 8007690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007692:	193b      	adds	r3, r7, r4
 8007694:	2200      	movs	r2, #0
 8007696:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007698:	193b      	adds	r3, r7, r4
 800769a:	2200      	movs	r2, #0
 800769c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800769e:	193b      	adds	r3, r7, r4
 80076a0:	4a28      	ldr	r2, [pc, #160]	; (8007744 <MX_GPIO_Init+0x168>)
 80076a2:	0019      	movs	r1, r3
 80076a4:	0010      	movs	r0, r2
 80076a6:	f7fb fd2f 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_0_Pin */
  GPIO_InitStruct.Pin = DISP_0_Pin;
 80076aa:	193b      	adds	r3, r7, r4
 80076ac:	2240      	movs	r2, #64	; 0x40
 80076ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076b0:	193b      	adds	r3, r7, r4
 80076b2:	2201      	movs	r2, #1
 80076b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b6:	193b      	adds	r3, r7, r4
 80076b8:	2200      	movs	r2, #0
 80076ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076bc:	193b      	adds	r3, r7, r4
 80076be:	2200      	movs	r2, #0
 80076c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_0_GPIO_Port, &GPIO_InitStruct);
 80076c2:	193b      	adds	r3, r7, r4
 80076c4:	4a20      	ldr	r2, [pc, #128]	; (8007748 <MX_GPIO_Init+0x16c>)
 80076c6:	0019      	movs	r1, r3
 80076c8:	0010      	movs	r0, r2
 80076ca:	f7fb fd1d 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80076ce:	0021      	movs	r1, r4
 80076d0:	187b      	adds	r3, r7, r1
 80076d2:	2238      	movs	r2, #56	; 0x38
 80076d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80076d6:	187b      	adds	r3, r7, r1
 80076d8:	2284      	movs	r2, #132	; 0x84
 80076da:	0392      	lsls	r2, r2, #14
 80076dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076de:	187b      	adds	r3, r7, r1
 80076e0:	2201      	movs	r2, #1
 80076e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076e4:	000c      	movs	r4, r1
 80076e6:	187b      	adds	r3, r7, r1
 80076e8:	4a16      	ldr	r2, [pc, #88]	; (8007744 <MX_GPIO_Init+0x168>)
 80076ea:	0019      	movs	r1, r3
 80076ec:	0010      	movs	r0, r2
 80076ee:	f7fb fd0b 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_Pin ENC1_Pin */
  GPIO_InitStruct.Pin = ENC2_Pin|ENC1_Pin;
 80076f2:	0021      	movs	r1, r4
 80076f4:	187b      	adds	r3, r7, r1
 80076f6:	22c0      	movs	r2, #192	; 0xc0
 80076f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	22c4      	movs	r2, #196	; 0xc4
 80076fe:	0392      	lsls	r2, r2, #14
 8007700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007702:	187b      	adds	r3, r7, r1
 8007704:	2200      	movs	r2, #0
 8007706:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007708:	187b      	adds	r3, r7, r1
 800770a:	4a0e      	ldr	r2, [pc, #56]	; (8007744 <MX_GPIO_Init+0x168>)
 800770c:	0019      	movs	r1, r3
 800770e:	0010      	movs	r0, r2
 8007710:	f7fb fcfa 	bl	8003108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8007714:	2200      	movs	r2, #0
 8007716:	2100      	movs	r1, #0
 8007718:	2006      	movs	r0, #6
 800771a:	f7fb fcc3 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800771e:	2006      	movs	r0, #6
 8007720:	f7fb fcd5 	bl	80030ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	2007      	movs	r0, #7
 800772a:	f7fb fcbb 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800772e:	2007      	movs	r0, #7
 8007730:	f7fb fccd 	bl	80030ce <HAL_NVIC_EnableIRQ>

}
 8007734:	46c0      	nop			; (mov r8, r8)
 8007736:	46bd      	mov	sp, r7
 8007738:	b009      	add	sp, #36	; 0x24
 800773a:	bd90      	pop	{r4, r7, pc}
 800773c:	40021000 	.word	0x40021000
 8007740:	00009ff2 	.word	0x00009ff2
 8007744:	50000400 	.word	0x50000400
 8007748:	50000800 	.word	0x50000800

0800774c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a05      	ldr	r2, [pc, #20]	; (8007770 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d103      	bne.n	8007766 <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8007760:	0018      	movs	r0, r3
 8007762:	f7fe fc99 	bl	8006098 <LEDmultiplexing>
	}
}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46bd      	mov	sp, r7
 800776a:	b002      	add	sp, #8
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	40012c00 	.word	0x40012c00
 8007774:	2000019c 	.word	0x2000019c

08007778 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8007778:	b590      	push	{r4, r7, lr}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	0002      	movs	r2, r0
 8007780:	1dbb      	adds	r3, r7, #6
 8007782:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == ENC1_Pin) {
 8007784:	1dbb      	adds	r3, r7, #6
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	2b80      	cmp	r3, #128	; 0x80
 800778a:	d111      	bne.n	80077b0 <HAL_GPIO_EXTI_Falling_Callback+0x38>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800778c:	4b1c      	ldr	r3, [pc, #112]	; (8007800 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 800778e:	2180      	movs	r1, #128	; 0x80
 8007790:	0018      	movs	r0, r3
 8007792:	f7fb fe1d 	bl	80033d0 <HAL_GPIO_ReadPin>
 8007796:	0003      	movs	r3, r0
 8007798:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800779a:	4b19      	ldr	r3, [pc, #100]	; (8007800 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 800779c:	2140      	movs	r1, #64	; 0x40
 800779e:	0018      	movs	r0, r3
 80077a0:	f7fb fe16 	bl	80033d0 <HAL_GPIO_ReadPin>
 80077a4:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 80077a6:	429c      	cmp	r4, r3
 80077a8:	d002      	beq.n	80077b0 <HAL_GPIO_EXTI_Falling_Callback+0x38>
			encoderAction(ENCODER_ACTION_LEFT);
 80077aa:	2000      	movs	r0, #0
 80077ac:	f000 f862 	bl	8007874 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 80077b0:	1dbb      	adds	r3, r7, #6
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	d111      	bne.n	80077dc <HAL_GPIO_EXTI_Falling_Callback+0x64>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 80077b8:	4b11      	ldr	r3, [pc, #68]	; (8007800 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80077ba:	2180      	movs	r1, #128	; 0x80
 80077bc:	0018      	movs	r0, r3
 80077be:	f7fb fe07 	bl	80033d0 <HAL_GPIO_ReadPin>
 80077c2:	0003      	movs	r3, r0
 80077c4:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 80077c6:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80077c8:	2140      	movs	r1, #64	; 0x40
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7fb fe00 	bl	80033d0 <HAL_GPIO_ReadPin>
 80077d0:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 80077d2:	429c      	cmp	r4, r3
 80077d4:	d002      	beq.n	80077dc <HAL_GPIO_EXTI_Falling_Callback+0x64>
			encoderAction(ENCODER_ACTION_RIGHT);
 80077d6:	2001      	movs	r0, #1
 80077d8:	f000 f84c 	bl	8007874 <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 80077dc:	1dbb      	adds	r3, r7, #6
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d102      	bne.n	80077ea <HAL_GPIO_EXTI_Falling_Callback+0x72>
		encoderAction(ENCODER_ACTION_ENTER);
 80077e4:	2002      	movs	r0, #2
 80077e6:	f000 f845 	bl	8007874 <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 80077ea:	1dbb      	adds	r3, r7, #6
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d102      	bne.n	80077f8 <HAL_GPIO_EXTI_Falling_Callback+0x80>
		encoderAction(ENCODER_ACTION_EXIT);
 80077f2:	2003      	movs	r0, #3
 80077f4:	f000 f83e 	bl	8007874 <encoderAction>
	}

	if (GPIO_Pin == MODE_Pin) {

	}
}
 80077f8:	46c0      	nop			; (mov r8, r8)
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b003      	add	sp, #12
 80077fe:	bd90      	pop	{r4, r7, pc}
 8007800:	50000400 	.word	0x50000400

08007804 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8007804:	b590      	push	{r4, r7, lr}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	0002      	movs	r2, r0
 800780c:	1dbb      	adds	r3, r7, #6
 800780e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == ENC1_Pin) {
 8007810:	1dbb      	adds	r3, r7, #6
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d111      	bne.n	800783c <HAL_GPIO_EXTI_Rising_Callback+0x38>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 800781a:	2180      	movs	r1, #128	; 0x80
 800781c:	0018      	movs	r0, r3
 800781e:	f7fb fdd7 	bl	80033d0 <HAL_GPIO_ReadPin>
 8007822:	0003      	movs	r3, r0
 8007824:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8007828:	2140      	movs	r1, #64	; 0x40
 800782a:	0018      	movs	r0, r3
 800782c:	f7fb fdd0 	bl	80033d0 <HAL_GPIO_ReadPin>
 8007830:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007832:	429c      	cmp	r4, r3
 8007834:	d002      	beq.n	800783c <HAL_GPIO_EXTI_Rising_Callback+0x38>
			encoderAction(ENCODER_ACTION_LEFT);
 8007836:	2000      	movs	r0, #0
 8007838:	f000 f81c 	bl	8007874 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 800783c:	1dbb      	adds	r3, r7, #6
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d111      	bne.n	8007868 <HAL_GPIO_EXTI_Rising_Callback+0x64>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8007846:	2180      	movs	r1, #128	; 0x80
 8007848:	0018      	movs	r0, r3
 800784a:	f7fb fdc1 	bl	80033d0 <HAL_GPIO_ReadPin>
 800784e:	0003      	movs	r3, r0
 8007850:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8007854:	2140      	movs	r1, #64	; 0x40
 8007856:	0018      	movs	r0, r3
 8007858:	f7fb fdba 	bl	80033d0 <HAL_GPIO_ReadPin>
 800785c:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800785e:	429c      	cmp	r4, r3
 8007860:	d002      	beq.n	8007868 <HAL_GPIO_EXTI_Rising_Callback+0x64>
			encoderAction(ENCODER_ACTION_RIGHT);
 8007862:	2001      	movs	r0, #1
 8007864:	f000 f806 	bl	8007874 <encoderAction>
		}
	}

}
 8007868:	46c0      	nop			; (mov r8, r8)
 800786a:	46bd      	mov	sp, r7
 800786c:	b003      	add	sp, #12
 800786e:	bd90      	pop	{r4, r7, pc}
 8007870:	50000400 	.word	0x50000400

08007874 <encoderAction>:

void encoderAction(uint8_t direction) {
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	0002      	movs	r2, r0
 800787c:	1dfb      	adds	r3, r7, #7
 800787e:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 8007880:	1dfb      	adds	r3, r7, #7
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d114      	bne.n	80078b2 <encoderAction+0x3e>
		if (menuSwitch(&menu, MENU_ENTER)) {
 8007888:	4b38      	ldr	r3, [pc, #224]	; (800796c <encoderAction+0xf8>)
 800788a:	2100      	movs	r1, #0
 800788c:	0018      	movs	r0, r3
 800788e:	f000 fa22 	bl	8007cd6 <menuSwitch>
 8007892:	1e03      	subs	r3, r0, #0
 8007894:	d00d      	beq.n	80078b2 <encoderAction+0x3e>
			LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DIR_LEFT);
 8007896:	4a36      	ldr	r2, [pc, #216]	; (8007970 <encoderAction+0xfc>)
 8007898:	4836      	ldr	r0, [pc, #216]	; (8007974 <encoderAction+0x100>)
 800789a:	2301      	movs	r3, #1
 800789c:	2100      	movs	r1, #0
 800789e:	f7ff f9e7 	bl	8006c70 <LEDstr>
			LEDdot(&display, menu.current.value2);
 80078a2:	4b32      	ldr	r3, [pc, #200]	; (800796c <encoderAction+0xf8>)
 80078a4:	22f4      	movs	r2, #244	; 0xf4
 80078a6:	5c9a      	ldrb	r2, [r3, r2]
 80078a8:	4b32      	ldr	r3, [pc, #200]	; (8007974 <encoderAction+0x100>)
 80078aa:	0011      	movs	r1, r2
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7ff fa2d 	bl	8006d0c <LEDdot>
		}
	}

	if (direction == ENCODER_ACTION_EXIT) {
 80078b2:	1dfb      	adds	r3, r7, #7
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d114      	bne.n	80078e4 <encoderAction+0x70>
		if (menuSwitch(&menu, MENU_EXIT)) {
 80078ba:	4b2c      	ldr	r3, [pc, #176]	; (800796c <encoderAction+0xf8>)
 80078bc:	2101      	movs	r1, #1
 80078be:	0018      	movs	r0, r3
 80078c0:	f000 fa09 	bl	8007cd6 <menuSwitch>
 80078c4:	1e03      	subs	r3, r0, #0
 80078c6:	d00d      	beq.n	80078e4 <encoderAction+0x70>
			LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DIR_RIGHT);
 80078c8:	4a29      	ldr	r2, [pc, #164]	; (8007970 <encoderAction+0xfc>)
 80078ca:	482a      	ldr	r0, [pc, #168]	; (8007974 <encoderAction+0x100>)
 80078cc:	2302      	movs	r3, #2
 80078ce:	2100      	movs	r1, #0
 80078d0:	f7ff f9ce 	bl	8006c70 <LEDstr>
			LEDdot(&display, menu.current.value2);
 80078d4:	4b25      	ldr	r3, [pc, #148]	; (800796c <encoderAction+0xf8>)
 80078d6:	22f4      	movs	r2, #244	; 0xf4
 80078d8:	5c9a      	ldrb	r2, [r3, r2]
 80078da:	4b26      	ldr	r3, [pc, #152]	; (8007974 <encoderAction+0x100>)
 80078dc:	0011      	movs	r1, r2
 80078de:	0018      	movs	r0, r3
 80078e0:	f7ff fa14 	bl	8006d0c <LEDdot>
		}
	}

	if (direction == ENCODER_ACTION_LEFT) {
 80078e4:	1dfb      	adds	r3, r7, #7
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11b      	bne.n	8007924 <encoderAction+0xb0>

		if (menuSwitch(&menu, MENU_UP)) {
 80078ec:	4b1f      	ldr	r3, [pc, #124]	; (800796c <encoderAction+0xf8>)
 80078ee:	2102      	movs	r1, #2
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 f9f0 	bl	8007cd6 <menuSwitch>
 80078f6:	1e03      	subs	r3, r0, #0
 80078f8:	d00d      	beq.n	8007916 <encoderAction+0xa2>
			LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DIR_LEFT);
 80078fa:	4a1d      	ldr	r2, [pc, #116]	; (8007970 <encoderAction+0xfc>)
 80078fc:	481d      	ldr	r0, [pc, #116]	; (8007974 <encoderAction+0x100>)
 80078fe:	2301      	movs	r3, #1
 8007900:	2100      	movs	r1, #0
 8007902:	f7ff f9b5 	bl	8006c70 <LEDstr>
			LEDdot(&display, menu.current.value2);
 8007906:	4b19      	ldr	r3, [pc, #100]	; (800796c <encoderAction+0xf8>)
 8007908:	22f4      	movs	r2, #244	; 0xf4
 800790a:	5c9a      	ldrb	r2, [r3, r2]
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <encoderAction+0x100>)
 800790e:	0011      	movs	r1, r2
 8007910:	0018      	movs	r0, r3
 8007912:	f7ff f9fb 	bl	8006d0c <LEDdot>
		}
		counter--;
 8007916:	4b18      	ldr	r3, [pc, #96]	; (8007978 <encoderAction+0x104>)
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	4b15      	ldr	r3, [pc, #84]	; (8007978 <encoderAction+0x104>)
 8007922:	801a      	strh	r2, [r3, #0]
	}
	if (direction == ENCODER_ACTION_RIGHT) {
 8007924:	1dfb      	adds	r3, r7, #7
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d11b      	bne.n	8007964 <encoderAction+0xf0>

		if (menuSwitch(&menu, MENU_DOWN)) {
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <encoderAction+0xf8>)
 800792e:	2103      	movs	r1, #3
 8007930:	0018      	movs	r0, r3
 8007932:	f000 f9d0 	bl	8007cd6 <menuSwitch>
 8007936:	1e03      	subs	r3, r0, #0
 8007938:	d00d      	beq.n	8007956 <encoderAction+0xe2>
			LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DIR_RIGHT);
 800793a:	4a0d      	ldr	r2, [pc, #52]	; (8007970 <encoderAction+0xfc>)
 800793c:	480d      	ldr	r0, [pc, #52]	; (8007974 <encoderAction+0x100>)
 800793e:	2302      	movs	r3, #2
 8007940:	2100      	movs	r1, #0
 8007942:	f7ff f995 	bl	8006c70 <LEDstr>
			LEDdot(&display, menu.current.value2);
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <encoderAction+0xf8>)
 8007948:	22f4      	movs	r2, #244	; 0xf4
 800794a:	5c9a      	ldrb	r2, [r3, r2]
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <encoderAction+0x100>)
 800794e:	0011      	movs	r1, r2
 8007950:	0018      	movs	r0, r3
 8007952:	f7ff f9db 	bl	8006d0c <LEDdot>
		}
		counter++;
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <encoderAction+0x104>)
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	3301      	adds	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <encoderAction+0x104>)
 8007962:	801a      	strh	r2, [r3, #0]
	}
}
 8007964:	46c0      	nop			; (mov r8, r8)
 8007966:	46bd      	mov	sp, r7
 8007968:	b002      	add	sp, #8
 800796a:	bd80      	pop	{r7, pc}
 800796c:	2000002c 	.word	0x2000002c
 8007970:	2000011c 	.word	0x2000011c
 8007974:	2000019c 	.word	0x2000019c
 8007978:	20000006 	.word	0x20000006

0800797c <twoIntsToArray>:

void twoIntsToArray(char *destination, int8_t int1, int8_t int2) {
 800797c:	b5b0      	push	{r4, r5, r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	0008      	movs	r0, r1
 8007986:	0011      	movs	r1, r2
 8007988:	1cfb      	adds	r3, r7, #3
 800798a:	1c02      	adds	r2, r0, #0
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	1cbb      	adds	r3, r7, #2
 8007990:	1c0a      	adds	r2, r1, #0
 8007992:	701a      	strb	r2, [r3, #0]
	char halfBuffer1[2];
	char halfBuffer2[2];

	itoa(int1, halfBuffer1, 10);
 8007994:	1cfb      	adds	r3, r7, #3
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b25b      	sxtb	r3, r3
 800799a:	240c      	movs	r4, #12
 800799c:	1939      	adds	r1, r7, r4
 800799e:	220a      	movs	r2, #10
 80079a0:	0018      	movs	r0, r3
 80079a2:	f001 f8d7 	bl	8008b54 <itoa>
	itoa(int2, halfBuffer2, 10);
 80079a6:	1cbb      	adds	r3, r7, #2
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	2508      	movs	r5, #8
 80079ae:	1979      	adds	r1, r7, r5
 80079b0:	220a      	movs	r2, #10
 80079b2:	0018      	movs	r0, r3
 80079b4:	f001 f8ce 	bl	8008b54 <itoa>

	destination[0] = halfBuffer1[0];
 80079b8:	0021      	movs	r1, r4
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	701a      	strb	r2, [r3, #0]
	destination[1] = halfBuffer1[1];
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3301      	adds	r3, #1
 80079c6:	187a      	adds	r2, r7, r1
 80079c8:	7852      	ldrb	r2, [r2, #1]
 80079ca:	701a      	strb	r2, [r3, #0]
	destination[2] = halfBuffer2[0];
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3302      	adds	r3, #2
 80079d0:	197a      	adds	r2, r7, r5
 80079d2:	7812      	ldrb	r2, [r2, #0]
 80079d4:	701a      	strb	r2, [r3, #0]
	destination[3] = halfBuffer2[1];
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3303      	adds	r3, #3
 80079da:	197a      	adds	r2, r7, r5
 80079dc:	7852      	ldrb	r2, [r2, #1]
 80079de:	701a      	strb	r2, [r3, #0]

	if (destination[1] == 0) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3301      	adds	r3, #1
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d107      	bne.n	80079fa <twoIntsToArray+0x7e>
		destination[1] = destination[0];
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3301      	adds	r3, #1
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	7812      	ldrb	r2, [r2, #0]
 80079f2:	701a      	strb	r2, [r3, #0]
		destination[0] = '0';
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2230      	movs	r2, #48	; 0x30
 80079f8:	701a      	strb	r2, [r3, #0]
	}
	if (destination[3] == 0) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3303      	adds	r3, #3
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <twoIntsToArray+0x9a>
		destination[3] = destination[2];
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3303      	adds	r3, #3
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	7892      	ldrb	r2, [r2, #2]
 8007a0c:	701a      	strb	r2, [r3, #0]
		destination[2] = '0';
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3302      	adds	r3, #2
 8007a12:	2230      	movs	r2, #48	; 0x30
 8007a14:	701a      	strb	r2, [r3, #0]
	}
}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b004      	add	sp, #16
 8007a1c:	bdb0      	pop	{r4, r5, r7, pc}

08007a1e <oneIntToArray>:

void oneIntToArray(char *destination, uint8_t offset, int8_t integer){
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	0008      	movs	r0, r1
 8007a28:	0011      	movs	r1, r2
 8007a2a:	1cfb      	adds	r3, r7, #3
 8007a2c:	1c02      	adds	r2, r0, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	1cbb      	adds	r3, r7, #2
 8007a32:	1c0a      	adds	r2, r1, #0
 8007a34:	701a      	strb	r2, [r3, #0]
	itoa(integer, &destination[offset], 10);
 8007a36:	1cbb      	adds	r3, r7, #2
 8007a38:	2000      	movs	r0, #0
 8007a3a:	5618      	ldrsb	r0, [r3, r0]
 8007a3c:	1cfb      	adds	r3, r7, #3
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	18d3      	adds	r3, r2, r3
 8007a44:	220a      	movs	r2, #10
 8007a46:	0019      	movs	r1, r3
 8007a48:	f001 f884 	bl	8008b54 <itoa>

	if(destination[offset+1] == 0){
 8007a4c:	1cfb      	adds	r3, r7, #3
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	18d3      	adds	r3, r2, r3
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d110      	bne.n	8007a7e <oneIntToArray+0x60>
		destination[offset + 1]  = destination[offset];
 8007a5c:	1cfb      	adds	r3, r7, #3
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	18d2      	adds	r2, r2, r3
 8007a64:	1cfb      	adds	r3, r7, #3
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	18cb      	adds	r3, r1, r3
 8007a6e:	7812      	ldrb	r2, [r2, #0]
 8007a70:	701a      	strb	r2, [r3, #0]
		destination[offset] = '0';
 8007a72:	1cfb      	adds	r3, r7, #3
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	18d3      	adds	r3, r2, r3
 8007a7a:	2230      	movs	r2, #48	; 0x30
 8007a7c:	701a      	strb	r2, [r3, #0]
	}
}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	46bd      	mov	sp, r7
 8007a82:	b002      	add	sp, #8
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007a8a:	b672      	cpsid	i
}
 8007a8c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007a8e:	e7fe      	b.n	8007a8e <Error_Handler+0x8>

08007a90 <menuInit>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuInit(MenuTypeDef *menu) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	22f0      	movs	r2, #240	; 0xf0
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f001 f85a 	bl	8008b5c <memcpy>
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2) {
 8007ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	0008      	movs	r0, r1
 8007aba:	0011      	movs	r1, r2
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	230b      	movs	r3, #11
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	1c02      	adds	r2, r0, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	230a      	movs	r3, #10
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	1c0a      	adds	r2, r1, #0
 8007acc:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 8007ace:	2317      	movs	r3, #23
 8007ad0:	18fb      	adds	r3, r7, r3
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e020      	b.n	8007b1a <menuItemChangeValue+0x6a>

		menu->items[entry][level].value[i] = value[i];
 8007ad8:	2617      	movs	r6, #23
 8007ada:	19bb      	adds	r3, r7, r6
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	18d2      	adds	r2, r2, r3
 8007ae2:	230b      	movs	r3, #11
 8007ae4:	18fb      	adds	r3, r7, r3
 8007ae6:	7819      	ldrb	r1, [r3, #0]
 8007ae8:	230a      	movs	r3, #10
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	19b8      	adds	r0, r7, r6
 8007af0:	7800      	ldrb	r0, [r0, #0]
 8007af2:	7815      	ldrb	r5, [r2, #0]
 8007af4:	68fc      	ldr	r4, [r7, #12]
 8007af6:	001a      	movs	r2, r3
 8007af8:	0092      	lsls	r2, r2, #2
 8007afa:	18d2      	adds	r2, r2, r3
 8007afc:	0053      	lsls	r3, r2, #1
 8007afe:	001a      	movs	r2, r3
 8007b00:	000b      	movs	r3, r1
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	1a5b      	subs	r3, r3, r1
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	18d3      	adds	r3, r2, r3
 8007b0a:	18e3      	adds	r3, r4, r3
 8007b0c:	1c2a      	adds	r2, r5, #0
 8007b0e:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 8007b10:	19bb      	adds	r3, r7, r6
 8007b12:	781a      	ldrb	r2, [r3, #0]
 8007b14:	19bb      	adds	r3, r7, r6
 8007b16:	3201      	adds	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	2317      	movs	r3, #23
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d9d9      	bls.n	8007ad8 <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 8007b24:	240b      	movs	r4, #11
 8007b26:	193b      	adds	r3, r7, r4
 8007b28:	7819      	ldrb	r1, [r3, #0]
 8007b2a:	250a      	movs	r5, #10
 8007b2c:	197b      	adds	r3, r7, r5
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	001a      	movs	r2, r3
 8007b34:	0092      	lsls	r2, r2, #2
 8007b36:	18d2      	adds	r2, r2, r3
 8007b38:	0053      	lsls	r3, r2, #1
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	000b      	movs	r3, r1
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	1a5b      	subs	r3, r3, r1
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	18d3      	adds	r3, r2, r3
 8007b46:	18c3      	adds	r3, r0, r3
 8007b48:	1d1a      	adds	r2, r3, #4
 8007b4a:	2328      	movs	r3, #40	; 0x28
 8007b4c:	2108      	movs	r1, #8
 8007b4e:	468c      	mov	ip, r1
 8007b50:	44bc      	add	ip, r7
 8007b52:	4463      	add	r3, ip
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	7013      	strb	r3, [r2, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	22f5      	movs	r2, #245	; 0xf5
 8007b5c:	5c9b      	ldrb	r3, [r3, r2]
 8007b5e:	193a      	adds	r2, r7, r4
 8007b60:	7812      	ldrb	r2, [r2, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d138      	bne.n	8007bd8 <menuItemChangeValue+0x128>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	22f6      	movs	r2, #246	; 0xf6
 8007b6a:	5c9b      	ldrb	r3, [r3, r2]
 8007b6c:	197a      	adds	r2, r7, r5
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d131      	bne.n	8007bd8 <menuItemChangeValue+0x128>
		memcpy(menu->current.value,
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	33f0      	adds	r3, #240	; 0xf0
 8007b78:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	22f5      	movs	r2, #245	; 0xf5
 8007b7e:	5c9b      	ldrb	r3, [r3, r2]
 8007b80:	0019      	movs	r1, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	22f6      	movs	r2, #246	; 0xf6
 8007b86:	5c9b      	ldrb	r3, [r3, r2]
 8007b88:	001a      	movs	r2, r3
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	18d2      	adds	r2, r2, r3
 8007b8e:	0053      	lsls	r3, r2, #1
 8007b90:	001a      	movs	r2, r3
 8007b92:	000b      	movs	r3, r1
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	1a5b      	subs	r3, r3, r1
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	18d3      	adds	r3, r2, r3
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	f000 ffda 	bl	8008b5c <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	22f5      	movs	r2, #245	; 0xf5
 8007bac:	5c9b      	ldrb	r3, [r3, r2]
 8007bae:	0018      	movs	r0, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	22f6      	movs	r2, #246	; 0xf6
 8007bb4:	5c9b      	ldrb	r3, [r3, r2]
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	001a      	movs	r2, r3
 8007bba:	0092      	lsls	r2, r2, #2
 8007bbc:	18d2      	adds	r2, r2, r3
 8007bbe:	0053      	lsls	r3, r2, #1
 8007bc0:	001a      	movs	r2, r3
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	1a1b      	subs	r3, r3, r0
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	18d3      	adds	r3, r2, r3
 8007bcc:	18cb      	adds	r3, r1, r3
 8007bce:	3304      	adds	r3, #4
 8007bd0:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	22f4      	movs	r2, #244	; 0xf4
 8007bd6:	5499      	strb	r1, [r3, r2]
	}

}
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b007      	add	sp, #28
 8007bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007be0 <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	000c      	movs	r4, r1
 8007bea:	0010      	movs	r0, r2
 8007bec:	0019      	movs	r1, r3
 8007bee:	1cfb      	adds	r3, r7, #3
 8007bf0:	1c22      	adds	r2, r4, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	1cbb      	adds	r3, r7, #2
 8007bf6:	1c02      	adds	r2, r0, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	1c7b      	adds	r3, r7, #1
 8007bfc:	1c0a      	adds	r2, r1, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 8007c00:	1cfb      	adds	r3, r7, #3
 8007c02:	7819      	ldrb	r1, [r3, #0]
 8007c04:	1cbb      	adds	r3, r7, #2
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	0092      	lsls	r2, r2, #2
 8007c0e:	18d2      	adds	r2, r2, r3
 8007c10:	0053      	lsls	r3, r2, #1
 8007c12:	001a      	movs	r2, r3
 8007c14:	000b      	movs	r3, r1
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	1a5b      	subs	r3, r3, r1
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	18c3      	adds	r3, r0, r3
 8007c20:	3305      	adds	r3, #5
 8007c22:	1cfa      	adds	r2, r7, #3
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 8007c28:	1cfb      	adds	r3, r7, #3
 8007c2a:	7819      	ldrb	r1, [r3, #0]
 8007c2c:	1cbb      	adds	r3, r7, #2
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	001a      	movs	r2, r3
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	18d2      	adds	r2, r2, r3
 8007c38:	0053      	lsls	r3, r2, #1
 8007c3a:	001a      	movs	r2, r3
 8007c3c:	000b      	movs	r3, r1
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	1a5b      	subs	r3, r3, r1
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	18d3      	adds	r3, r2, r3
 8007c46:	18c3      	adds	r3, r0, r3
 8007c48:	3306      	adds	r3, #6
 8007c4a:	1cba      	adds	r2, r7, #2
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 8007c50:	1cfb      	adds	r3, r7, #3
 8007c52:	7819      	ldrb	r1, [r3, #0]
 8007c54:	1cbb      	adds	r3, r7, #2
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	001a      	movs	r2, r3
 8007c5c:	0092      	lsls	r2, r2, #2
 8007c5e:	18d2      	adds	r2, r2, r3
 8007c60:	0053      	lsls	r3, r2, #1
 8007c62:	001a      	movs	r2, r3
 8007c64:	000b      	movs	r3, r1
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	1a5b      	subs	r3, r3, r1
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	18d3      	adds	r3, r2, r3
 8007c6e:	18c3      	adds	r3, r0, r3
 8007c70:	3307      	adds	r3, #7
 8007c72:	1c7a      	adds	r2, r7, #1
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 8007c78:	1cfb      	adds	r3, r7, #3
 8007c7a:	7819      	ldrb	r1, [r3, #0]
 8007c7c:	1cbb      	adds	r3, r7, #2
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	001a      	movs	r2, r3
 8007c84:	0092      	lsls	r2, r2, #2
 8007c86:	18d2      	adds	r2, r2, r3
 8007c88:	0053      	lsls	r3, r2, #1
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	000b      	movs	r3, r1
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	1a5b      	subs	r3, r3, r1
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	18d3      	adds	r3, r2, r3
 8007c96:	18c3      	adds	r3, r0, r3
 8007c98:	3308      	adds	r3, #8
 8007c9a:	001a      	movs	r2, r3
 8007c9c:	2318      	movs	r3, #24
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 8007ca4:	1cfb      	adds	r3, r7, #3
 8007ca6:	7819      	ldrb	r1, [r3, #0]
 8007ca8:	1cbb      	adds	r3, r7, #2
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	001a      	movs	r2, r3
 8007cb0:	0092      	lsls	r2, r2, #2
 8007cb2:	18d2      	adds	r2, r2, r3
 8007cb4:	0053      	lsls	r3, r2, #1
 8007cb6:	001a      	movs	r2, r3
 8007cb8:	000b      	movs	r3, r1
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	1a5b      	subs	r3, r3, r1
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	18d3      	adds	r3, r2, r3
 8007cc2:	18c3      	adds	r3, r0, r3
 8007cc4:	3309      	adds	r3, #9
 8007cc6:	221c      	movs	r2, #28
 8007cc8:	18ba      	adds	r2, r7, r2
 8007cca:	7812      	ldrb	r2, [r2, #0]
 8007ccc:	701a      	strb	r2, [r3, #0]

}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	b003      	add	sp, #12
 8007cd4:	bd90      	pop	{r4, r7, pc}

08007cd6 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 8007cd6:	b590      	push	{r4, r7, lr}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	000a      	movs	r2, r1
 8007ce0:	1cfb      	adds	r3, r7, #3
 8007ce2:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 8007ce4:	1cfb      	adds	r3, r7, #3
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d000      	beq.n	8007cee <menuSwitch+0x18>
 8007cec:	e0b1      	b.n	8007e52 <menuSwitch+0x17c>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	22f6      	movs	r2, #246	; 0xf6
 8007cf2:	5c9b      	ldrb	r3, [r3, r2]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <menuSwitch+0x2c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	22f5      	movs	r2, #245	; 0xf5
 8007cfc:	5c9b      	ldrb	r3, [r3, r2]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d121      	bne.n	8007d46 <menuSwitch+0x70>
				|| (menu->current.level != 0
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	22f6      	movs	r2, #246	; 0xf6
 8007d06:	5c9b      	ldrb	r3, [r3, r2]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d100      	bne.n	8007d0e <menuSwitch+0x38>
 8007d0c:	e09f      	b.n	8007e4e <menuSwitch+0x178>
						&& menu->current.entry
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	22f5      	movs	r2, #245	; 0xf5
 8007d12:	5c99      	ldrb	r1, [r3, r2]
								> menu->items[menu->current.parent][menu->current.level
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	22f7      	movs	r2, #247	; 0xf7
 8007d18:	5c9b      	ldrb	r3, [r3, r2]
 8007d1a:	001c      	movs	r4, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	22f6      	movs	r2, #246	; 0xf6
 8007d20:	5c9b      	ldrb	r3, [r3, r2]
										- 1].childFirst)) {
 8007d22:	3b01      	subs	r3, #1
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	001a      	movs	r2, r3
 8007d28:	0092      	lsls	r2, r2, #2
 8007d2a:	18d2      	adds	r2, r2, r3
 8007d2c:	0053      	lsls	r3, r2, #1
 8007d2e:	001a      	movs	r2, r3
 8007d30:	0023      	movs	r3, r4
 8007d32:	011b      	lsls	r3, r3, #4
 8007d34:	1b1b      	subs	r3, r3, r4
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	18d3      	adds	r3, r2, r3
 8007d3a:	18c3      	adds	r3, r0, r3
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 8007d40:	4299      	cmp	r1, r3
 8007d42:	d800      	bhi.n	8007d46 <menuSwitch+0x70>
 8007d44:	e083      	b.n	8007e4e <menuSwitch+0x178>

			menu->current.entry--;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	22f5      	movs	r2, #245	; 0xf5
 8007d4a:	5c9b      	ldrb	r3, [r3, r2]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b2d9      	uxtb	r1, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	22f5      	movs	r2, #245	; 0xf5
 8007d54:	5499      	strb	r1, [r3, r2]
			memcpy(menu->current.value,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	33f0      	adds	r3, #240	; 0xf0
 8007d5a:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	22f5      	movs	r2, #245	; 0xf5
 8007d60:	5c9b      	ldrb	r3, [r3, r2]
 8007d62:	0019      	movs	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	22f6      	movs	r2, #246	; 0xf6
 8007d68:	5c9b      	ldrb	r3, [r3, r2]
 8007d6a:	001a      	movs	r2, r3
 8007d6c:	0092      	lsls	r2, r2, #2
 8007d6e:	18d2      	adds	r2, r2, r3
 8007d70:	0053      	lsls	r3, r2, #1
 8007d72:	001a      	movs	r2, r3
 8007d74:	000b      	movs	r3, r1
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	1a5b      	subs	r3, r3, r1
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	18d3      	adds	r3, r2, r3
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 8007d82:	2204      	movs	r2, #4
 8007d84:	0019      	movs	r1, r3
 8007d86:	f000 fee9 	bl	8008b5c <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	22f5      	movs	r2, #245	; 0xf5
 8007d8e:	5c9b      	ldrb	r3, [r3, r2]
 8007d90:	0018      	movs	r0, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	22f6      	movs	r2, #246	; 0xf6
 8007d96:	5c9b      	ldrb	r3, [r3, r2]
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	001a      	movs	r2, r3
 8007d9c:	0092      	lsls	r2, r2, #2
 8007d9e:	18d2      	adds	r2, r2, r3
 8007da0:	0053      	lsls	r3, r2, #1
 8007da2:	001a      	movs	r2, r3
 8007da4:	0003      	movs	r3, r0
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	1a1b      	subs	r3, r3, r0
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	18d3      	adds	r3, r2, r3
 8007dae:	18cb      	adds	r3, r1, r3
 8007db0:	3304      	adds	r3, #4
 8007db2:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	22f4      	movs	r2, #244	; 0xf4
 8007db8:	5499      	strb	r1, [r3, r2]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	22f5      	movs	r2, #245	; 0xf5
 8007dbe:	5c9b      	ldrb	r3, [r3, r2]
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	22f6      	movs	r2, #246	; 0xf6
 8007dc6:	5c9b      	ldrb	r3, [r3, r2]
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	001a      	movs	r2, r3
 8007dcc:	0092      	lsls	r2, r2, #2
 8007dce:	18d2      	adds	r2, r2, r3
 8007dd0:	0053      	lsls	r3, r2, #1
 8007dd2:	001a      	movs	r2, r3
 8007dd4:	0003      	movs	r3, r0
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	1a1b      	subs	r3, r3, r0
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	18d3      	adds	r3, r2, r3
 8007dde:	18cb      	adds	r3, r1, r3
 8007de0:	3307      	adds	r3, #7
 8007de2:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	22f7      	movs	r2, #247	; 0xf7
 8007de8:	5499      	strb	r1, [r3, r2]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	22f5      	movs	r2, #245	; 0xf5
 8007dee:	5c9b      	ldrb	r3, [r3, r2]
 8007df0:	0018      	movs	r0, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	22f6      	movs	r2, #246	; 0xf6
 8007df6:	5c9b      	ldrb	r3, [r3, r2]
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	001a      	movs	r2, r3
 8007dfc:	0092      	lsls	r2, r2, #2
 8007dfe:	18d2      	adds	r2, r2, r3
 8007e00:	0053      	lsls	r3, r2, #1
 8007e02:	001a      	movs	r2, r3
 8007e04:	0003      	movs	r3, r0
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	1a1b      	subs	r3, r3, r0
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	18d3      	adds	r3, r2, r3
 8007e0e:	18cb      	adds	r3, r1, r3
 8007e10:	3308      	adds	r3, #8
 8007e12:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	22f8      	movs	r2, #248	; 0xf8
 8007e18:	5499      	strb	r1, [r3, r2]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	22f5      	movs	r2, #245	; 0xf5
 8007e1e:	5c9b      	ldrb	r3, [r3, r2]
 8007e20:	0018      	movs	r0, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22f6      	movs	r2, #246	; 0xf6
 8007e26:	5c9b      	ldrb	r3, [r3, r2]
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	0092      	lsls	r2, r2, #2
 8007e2e:	18d2      	adds	r2, r2, r3
 8007e30:	0053      	lsls	r3, r2, #1
 8007e32:	001a      	movs	r2, r3
 8007e34:	0003      	movs	r3, r0
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	1a1b      	subs	r3, r3, r0
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	18d3      	adds	r3, r2, r3
 8007e3e:	18cb      	adds	r3, r1, r3
 8007e40:	3309      	adds	r3, #9
 8007e42:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	22f9      	movs	r2, #249	; 0xf9
 8007e48:	5499      	strb	r1, [r3, r2]
			return MENU_OK;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e1be      	b.n	80081cc <menuSwitch+0x4f6>
		} else {
			return MENU_ERROR;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e1bc      	b.n	80081cc <menuSwitch+0x4f6>
		}

	} else if (direction == MENU_DOWN) {
 8007e52:	1cfb      	adds	r3, r7, #3
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d000      	beq.n	8007e5c <menuSwitch+0x186>
 8007e5a:	e0b1      	b.n	8007fc0 <menuSwitch+0x2ea>

		if ((menu->current.level == 0
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	22f6      	movs	r2, #246	; 0xf6
 8007e60:	5c9b      	ldrb	r3, [r3, r2]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d104      	bne.n	8007e70 <menuSwitch+0x19a>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	22f5      	movs	r2, #245	; 0xf5
 8007e6a:	5c9b      	ldrb	r3, [r3, r2]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d921      	bls.n	8007eb4 <menuSwitch+0x1de>
				|| (menu->current.level != 0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	22f6      	movs	r2, #246	; 0xf6
 8007e74:	5c9b      	ldrb	r3, [r3, r2]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d100      	bne.n	8007e7c <menuSwitch+0x1a6>
 8007e7a:	e09f      	b.n	8007fbc <menuSwitch+0x2e6>
						&& menu->current.entry
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	22f5      	movs	r2, #245	; 0xf5
 8007e80:	5c99      	ldrb	r1, [r3, r2]
								< menu->items[menu->current.parent][menu->current.level
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	22f7      	movs	r2, #247	; 0xf7
 8007e86:	5c9b      	ldrb	r3, [r3, r2]
 8007e88:	001c      	movs	r4, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	22f6      	movs	r2, #246	; 0xf6
 8007e8e:	5c9b      	ldrb	r3, [r3, r2]
										- 1].childLast)) {
 8007e90:	3b01      	subs	r3, #1
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	001a      	movs	r2, r3
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	18d2      	adds	r2, r2, r3
 8007e9a:	0053      	lsls	r3, r2, #1
 8007e9c:	001a      	movs	r2, r3
 8007e9e:	0023      	movs	r3, r4
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	1b1b      	subs	r3, r3, r4
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	18d3      	adds	r3, r2, r3
 8007ea8:	18c3      	adds	r3, r0, r3
 8007eaa:	3309      	adds	r3, #9
 8007eac:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	d300      	bcc.n	8007eb4 <menuSwitch+0x1de>
 8007eb2:	e083      	b.n	8007fbc <menuSwitch+0x2e6>

			menu->current.entry++;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	22f5      	movs	r2, #245	; 0xf5
 8007eb8:	5c9b      	ldrb	r3, [r3, r2]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	b2d9      	uxtb	r1, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	22f5      	movs	r2, #245	; 0xf5
 8007ec2:	5499      	strb	r1, [r3, r2]

			memcpy(menu->current.value,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	33f0      	adds	r3, #240	; 0xf0
 8007ec8:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	22f5      	movs	r2, #245	; 0xf5
 8007ece:	5c9b      	ldrb	r3, [r3, r2]
 8007ed0:	0019      	movs	r1, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	22f6      	movs	r2, #246	; 0xf6
 8007ed6:	5c9b      	ldrb	r3, [r3, r2]
 8007ed8:	001a      	movs	r2, r3
 8007eda:	0092      	lsls	r2, r2, #2
 8007edc:	18d2      	adds	r2, r2, r3
 8007ede:	0053      	lsls	r3, r2, #1
 8007ee0:	001a      	movs	r2, r3
 8007ee2:	000b      	movs	r3, r1
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	1a5b      	subs	r3, r3, r1
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	18d3      	adds	r3, r2, r3
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	0019      	movs	r1, r3
 8007ef4:	f000 fe32 	bl	8008b5c <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	22f5      	movs	r2, #245	; 0xf5
 8007efc:	5c9b      	ldrb	r3, [r3, r2]
 8007efe:	0018      	movs	r0, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	22f6      	movs	r2, #246	; 0xf6
 8007f04:	5c9b      	ldrb	r3, [r3, r2]
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	001a      	movs	r2, r3
 8007f0a:	0092      	lsls	r2, r2, #2
 8007f0c:	18d2      	adds	r2, r2, r3
 8007f0e:	0053      	lsls	r3, r2, #1
 8007f10:	001a      	movs	r2, r3
 8007f12:	0003      	movs	r3, r0
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	1a1b      	subs	r3, r3, r0
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	18cb      	adds	r3, r1, r3
 8007f1e:	3304      	adds	r3, #4
 8007f20:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	22f4      	movs	r2, #244	; 0xf4
 8007f26:	5499      	strb	r1, [r3, r2]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	22f5      	movs	r2, #245	; 0xf5
 8007f2c:	5c9b      	ldrb	r3, [r3, r2]
 8007f2e:	0018      	movs	r0, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	22f6      	movs	r2, #246	; 0xf6
 8007f34:	5c9b      	ldrb	r3, [r3, r2]
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	001a      	movs	r2, r3
 8007f3a:	0092      	lsls	r2, r2, #2
 8007f3c:	18d2      	adds	r2, r2, r3
 8007f3e:	0053      	lsls	r3, r2, #1
 8007f40:	001a      	movs	r2, r3
 8007f42:	0003      	movs	r3, r0
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	1a1b      	subs	r3, r3, r0
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	18d3      	adds	r3, r2, r3
 8007f4c:	18cb      	adds	r3, r1, r3
 8007f4e:	3307      	adds	r3, #7
 8007f50:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	22f7      	movs	r2, #247	; 0xf7
 8007f56:	5499      	strb	r1, [r3, r2]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	22f5      	movs	r2, #245	; 0xf5
 8007f5c:	5c9b      	ldrb	r3, [r3, r2]
 8007f5e:	0018      	movs	r0, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	22f6      	movs	r2, #246	; 0xf6
 8007f64:	5c9b      	ldrb	r3, [r3, r2]
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	001a      	movs	r2, r3
 8007f6a:	0092      	lsls	r2, r2, #2
 8007f6c:	18d2      	adds	r2, r2, r3
 8007f6e:	0053      	lsls	r3, r2, #1
 8007f70:	001a      	movs	r2, r3
 8007f72:	0003      	movs	r3, r0
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	1a1b      	subs	r3, r3, r0
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	18d3      	adds	r3, r2, r3
 8007f7c:	18cb      	adds	r3, r1, r3
 8007f7e:	3308      	adds	r3, #8
 8007f80:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	22f8      	movs	r2, #248	; 0xf8
 8007f86:	5499      	strb	r1, [r3, r2]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	22f5      	movs	r2, #245	; 0xf5
 8007f8c:	5c9b      	ldrb	r3, [r3, r2]
 8007f8e:	0018      	movs	r0, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	22f6      	movs	r2, #246	; 0xf6
 8007f94:	5c9b      	ldrb	r3, [r3, r2]
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	001a      	movs	r2, r3
 8007f9a:	0092      	lsls	r2, r2, #2
 8007f9c:	18d2      	adds	r2, r2, r3
 8007f9e:	0053      	lsls	r3, r2, #1
 8007fa0:	001a      	movs	r2, r3
 8007fa2:	0003      	movs	r3, r0
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	1a1b      	subs	r3, r3, r0
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	18d3      	adds	r3, r2, r3
 8007fac:	18cb      	adds	r3, r1, r3
 8007fae:	3309      	adds	r3, #9
 8007fb0:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	22f9      	movs	r2, #249	; 0xf9
 8007fb6:	5499      	strb	r1, [r3, r2]
			return MENU_OK;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e107      	b.n	80081cc <menuSwitch+0x4f6>

		} else {
			return MENU_ERROR;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e105      	b.n	80081cc <menuSwitch+0x4f6>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 8007fc0:	1cfb      	adds	r3, r7, #3
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d17c      	bne.n	80080c2 <menuSwitch+0x3ec>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	22f8      	movs	r2, #248	; 0xf8
 8007fcc:	5c9b      	ldrb	r3, [r3, r2]
 8007fce:	2bff      	cmp	r3, #255	; 0xff
 8007fd0:	d077      	beq.n	80080c2 <menuSwitch+0x3ec>

		menu->current.parent = menu->current.entry;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	22f5      	movs	r2, #245	; 0xf5
 8007fd6:	5c99      	ldrb	r1, [r3, r2]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	22f7      	movs	r2, #247	; 0xf7
 8007fdc:	5499      	strb	r1, [r3, r2]
		menu->current.entry = menu->current.childFirst;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	22f8      	movs	r2, #248	; 0xf8
 8007fe2:	5c99      	ldrb	r1, [r3, r2]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	22f5      	movs	r2, #245	; 0xf5
 8007fe8:	5499      	strb	r1, [r3, r2]
		menu->current.level++;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	22f6      	movs	r2, #246	; 0xf6
 8007fee:	5c9b      	ldrb	r3, [r3, r2]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	b2d9      	uxtb	r1, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	22f6      	movs	r2, #246	; 0xf6
 8007ff8:	5499      	strb	r1, [r3, r2]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	22f5      	movs	r2, #245	; 0xf5
 8007ffe:	5c9b      	ldrb	r3, [r3, r2]
 8008000:	0018      	movs	r0, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	22f6      	movs	r2, #246	; 0xf6
 8008006:	5c9b      	ldrb	r3, [r3, r2]
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	001a      	movs	r2, r3
 800800c:	0092      	lsls	r2, r2, #2
 800800e:	18d2      	adds	r2, r2, r3
 8008010:	0053      	lsls	r3, r2, #1
 8008012:	001a      	movs	r2, r3
 8008014:	0003      	movs	r3, r0
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	1a1b      	subs	r3, r3, r0
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	18cb      	adds	r3, r1, r3
 8008020:	3308      	adds	r3, #8
 8008022:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	22f8      	movs	r2, #248	; 0xf8
 8008028:	5499      	strb	r1, [r3, r2]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	22f5      	movs	r2, #245	; 0xf5
 800802e:	5c9b      	ldrb	r3, [r3, r2]
 8008030:	0018      	movs	r0, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	22f6      	movs	r2, #246	; 0xf6
 8008036:	5c9b      	ldrb	r3, [r3, r2]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	001a      	movs	r2, r3
 800803c:	0092      	lsls	r2, r2, #2
 800803e:	18d2      	adds	r2, r2, r3
 8008040:	0053      	lsls	r3, r2, #1
 8008042:	001a      	movs	r2, r3
 8008044:	0003      	movs	r3, r0
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	1a1b      	subs	r3, r3, r0
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	18d3      	adds	r3, r2, r3
 800804e:	18cb      	adds	r3, r1, r3
 8008050:	3309      	adds	r3, #9
 8008052:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	22f9      	movs	r2, #249	; 0xf9
 8008058:	5499      	strb	r1, [r3, r2]
		memcpy(menu->current.value,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	33f0      	adds	r3, #240	; 0xf0
 800805e:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	22f5      	movs	r2, #245	; 0xf5
 8008064:	5c9b      	ldrb	r3, [r3, r2]
 8008066:	0019      	movs	r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	22f6      	movs	r2, #246	; 0xf6
 800806c:	5c9b      	ldrb	r3, [r3, r2]
 800806e:	001a      	movs	r2, r3
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	18d2      	adds	r2, r2, r3
 8008074:	0053      	lsls	r3, r2, #1
 8008076:	001a      	movs	r2, r3
 8008078:	000b      	movs	r3, r1
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	1a5b      	subs	r3, r3, r1
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	18d3      	adds	r3, r2, r3
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8008086:	2204      	movs	r2, #4
 8008088:	0019      	movs	r1, r3
 800808a:	f000 fd67 	bl	8008b5c <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	22f5      	movs	r2, #245	; 0xf5
 8008092:	5c9b      	ldrb	r3, [r3, r2]
 8008094:	0018      	movs	r0, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	22f6      	movs	r2, #246	; 0xf6
 800809a:	5c9b      	ldrb	r3, [r3, r2]
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	001a      	movs	r2, r3
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	18d2      	adds	r2, r2, r3
 80080a4:	0053      	lsls	r3, r2, #1
 80080a6:	001a      	movs	r2, r3
 80080a8:	0003      	movs	r3, r0
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	1a1b      	subs	r3, r3, r0
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	18d3      	adds	r3, r2, r3
 80080b2:	18cb      	adds	r3, r1, r3
 80080b4:	3304      	adds	r3, #4
 80080b6:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	22f4      	movs	r2, #244	; 0xf4
 80080bc:	5499      	strb	r1, [r3, r2]
		return MENU_OK;
 80080be:	2301      	movs	r3, #1
 80080c0:	e084      	b.n	80081cc <menuSwitch+0x4f6>
	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 80080c2:	1cfb      	adds	r3, r7, #3
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d000      	beq.n	80080cc <menuSwitch+0x3f6>
 80080ca:	e07e      	b.n	80081ca <menuSwitch+0x4f4>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	22f7      	movs	r2, #247	; 0xf7
 80080d0:	5c9b      	ldrb	r3, [r3, r2]
 80080d2:	2bff      	cmp	r3, #255	; 0xff
 80080d4:	d079      	beq.n	80081ca <menuSwitch+0x4f4>

		menu->current.entry = menu->current.parent;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	22f7      	movs	r2, #247	; 0xf7
 80080da:	5c99      	ldrb	r1, [r3, r2]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	22f5      	movs	r2, #245	; 0xf5
 80080e0:	5499      	strb	r1, [r3, r2]
		menu->current.parent--; //automaticalli set to 255(MENU_NONE) if was zero
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	22f7      	movs	r2, #247	; 0xf7
 80080e6:	5c9b      	ldrb	r3, [r3, r2]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b2d9      	uxtb	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	22f7      	movs	r2, #247	; 0xf7
 80080f0:	5499      	strb	r1, [r3, r2]
		menu->current.level--;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	22f6      	movs	r2, #246	; 0xf6
 80080f6:	5c9b      	ldrb	r3, [r3, r2]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b2d9      	uxtb	r1, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	22f6      	movs	r2, #246	; 0xf6
 8008100:	5499      	strb	r1, [r3, r2]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	22f5      	movs	r2, #245	; 0xf5
 8008106:	5c9b      	ldrb	r3, [r3, r2]
 8008108:	0018      	movs	r0, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	22f6      	movs	r2, #246	; 0xf6
 800810e:	5c9b      	ldrb	r3, [r3, r2]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	001a      	movs	r2, r3
 8008114:	0092      	lsls	r2, r2, #2
 8008116:	18d2      	adds	r2, r2, r3
 8008118:	0053      	lsls	r3, r2, #1
 800811a:	001a      	movs	r2, r3
 800811c:	0003      	movs	r3, r0
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	1a1b      	subs	r3, r3, r0
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	18d3      	adds	r3, r2, r3
 8008126:	18cb      	adds	r3, r1, r3
 8008128:	3308      	adds	r3, #8
 800812a:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	22f8      	movs	r2, #248	; 0xf8
 8008130:	5499      	strb	r1, [r3, r2]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	22f5      	movs	r2, #245	; 0xf5
 8008136:	5c9b      	ldrb	r3, [r3, r2]
 8008138:	0018      	movs	r0, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	22f6      	movs	r2, #246	; 0xf6
 800813e:	5c9b      	ldrb	r3, [r3, r2]
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	001a      	movs	r2, r3
 8008144:	0092      	lsls	r2, r2, #2
 8008146:	18d2      	adds	r2, r2, r3
 8008148:	0053      	lsls	r3, r2, #1
 800814a:	001a      	movs	r2, r3
 800814c:	0003      	movs	r3, r0
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	1a1b      	subs	r3, r3, r0
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	18d3      	adds	r3, r2, r3
 8008156:	18cb      	adds	r3, r1, r3
 8008158:	3309      	adds	r3, #9
 800815a:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	22f9      	movs	r2, #249	; 0xf9
 8008160:	5499      	strb	r1, [r3, r2]

		memcpy(menu->current.value,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	33f0      	adds	r3, #240	; 0xf0
 8008166:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	22f5      	movs	r2, #245	; 0xf5
 800816c:	5c9b      	ldrb	r3, [r3, r2]
 800816e:	0019      	movs	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	22f6      	movs	r2, #246	; 0xf6
 8008174:	5c9b      	ldrb	r3, [r3, r2]
 8008176:	001a      	movs	r2, r3
 8008178:	0092      	lsls	r2, r2, #2
 800817a:	18d2      	adds	r2, r2, r3
 800817c:	0053      	lsls	r3, r2, #1
 800817e:	001a      	movs	r2, r3
 8008180:	000b      	movs	r3, r1
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	1a5b      	subs	r3, r3, r1
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	18d3      	adds	r3, r2, r3
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800818e:	2204      	movs	r2, #4
 8008190:	0019      	movs	r1, r3
 8008192:	f000 fce3 	bl	8008b5c <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	22f5      	movs	r2, #245	; 0xf5
 800819a:	5c9b      	ldrb	r3, [r3, r2]
 800819c:	0018      	movs	r0, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	22f6      	movs	r2, #246	; 0xf6
 80081a2:	5c9b      	ldrb	r3, [r3, r2]
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	001a      	movs	r2, r3
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	18d2      	adds	r2, r2, r3
 80081ac:	0053      	lsls	r3, r2, #1
 80081ae:	001a      	movs	r2, r3
 80081b0:	0003      	movs	r3, r0
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	1a1b      	subs	r3, r3, r0
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	18d3      	adds	r3, r2, r3
 80081ba:	18cb      	adds	r3, r1, r3
 80081bc:	3304      	adds	r3, #4
 80081be:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	22f4      	movs	r2, #244	; 0xf4
 80081c4:	5499      	strb	r1, [r3, r2]
		return MENU_OK;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <menuSwitch+0x4f6>
	} else {
		return MENU_ERROR;
 80081ca:	2300      	movs	r3, #0
	}
}
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b003      	add	sp, #12
 80081d2:	bd90      	pop	{r4, r7, pc}

080081d4 <rtcGetTime>:
	HAL_RTC_Init(&hrtc);
	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;

}

void rtcGetTime(RTCChronoTypeDef *chrono) {
 80081d4:	b5b0      	push	{r4, r5, r7, lr}
 80081d6:	b090      	sub	sp, #64	; 0x40
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80081dc:	49f4      	ldr	r1, [pc, #976]	; (80085b0 <rtcGetTime+0x3dc>)
 80081de:	4bf5      	ldr	r3, [pc, #980]	; (80085b4 <rtcGetTime+0x3e0>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	0018      	movs	r0, r3
 80081e4:	f7fc faa0 	bl	8004728 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80081e8:	49f3      	ldr	r1, [pc, #972]	; (80085b8 <rtcGetTime+0x3e4>)
 80081ea:	4bf2      	ldr	r3, [pc, #968]	; (80085b4 <rtcGetTime+0x3e0>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7fc fb88 	bl	8004904 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 80081f4:	4bee      	ldr	r3, [pc, #952]	; (80085b0 <rtcGetTime+0x3dc>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b25a      	sxtb	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 80081fe:	4bec      	ldr	r3, [pc, #944]	; (80085b0 <rtcGetTime+0x3dc>)
 8008200:	785b      	ldrb	r3, [r3, #1]
 8008202:	b25a      	sxtb	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 8008208:	4be9      	ldr	r3, [pc, #932]	; (80085b0 <rtcGetTime+0x3dc>)
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	b25a      	sxtb	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	715a      	strb	r2, [r3, #5]

	chrono->actual.decimal = (((255 - Time.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 8008212:	4be7      	ldr	r3, [pc, #924]	; (80085b0 <rtcGetTime+0x3dc>)
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	0013      	movs	r3, r2
 8008218:	065b      	lsls	r3, r3, #25
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	189b      	adds	r3, r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4ae5      	ldr	r2, [pc, #916]	; (80085bc <rtcGetTime+0x3e8>)
 8008228:	4694      	mov	ip, r2
 800822a:	4463      	add	r3, ip
 800822c:	49e4      	ldr	r1, [pc, #912]	; (80085c0 <rtcGetTime+0x3ec>)
 800822e:	0018      	movs	r0, r3
 8008230:	f7f7 ff68 	bl	8000104 <__udivsi3>
 8008234:	0003      	movs	r3, r0
 8008236:	b25a      	sxtb	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800823c:	4bde      	ldr	r3, [pc, #888]	; (80085b8 <rtcGetTime+0x3e4>)
 800823e:	789b      	ldrb	r3, [r3, #2]
 8008240:	b25a      	sxtb	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 8008246:	4bdc      	ldr	r3, [pc, #880]	; (80085b8 <rtcGetTime+0x3e4>)
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	b25a      	sxtb	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 8008250:	4bd9      	ldr	r3, [pc, #868]	; (80085b8 <rtcGetTime+0x3e4>)
 8008252:	78db      	ldrb	r3, [r3, #3]
 8008254:	b25a      	sxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	b25b      	sxtb	r3, r3
 8008260:	3309      	adds	r3, #9
 8008262:	210c      	movs	r1, #12
 8008264:	0018      	movs	r0, r3
 8008266:	f7f7 ffd7 	bl	8000218 <__divsi3>
 800826a:	0003      	movs	r3, r0
 800826c:	0018      	movs	r0, r3
 800826e:	f7f8 ff6d 	bl	800114c <__aeabi_i2f>
 8008272:	1c03      	adds	r3, r0, #0
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b25b      	sxtb	r3, r3
 800827c:	001c      	movs	r4, r3
 800827e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008280:	f7f8 f8d6 	bl	8000430 <__aeabi_f2uiz>
 8008284:	0003      	movs	r3, r0
 8008286:	18e3      	adds	r3, r4, r3
 8008288:	4ace      	ldr	r2, [pc, #824]	; (80085c4 <rtcGetTime+0x3f0>)
 800828a:	4694      	mov	ip, r2
 800828c:	4463      	add	r3, ip
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	b25b      	sxtb	r3, r3
 8008296:	001a      	movs	r2, r3
 8008298:	0013      	movs	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	009a      	lsls	r2, r3, #2
 80082a4:	189b      	adds	r3, r3, r2
 80082a6:	2109      	movs	r1, #9
 80082a8:	0018      	movs	r0, r3
 80082aa:	f7f7 ffb5 	bl	8000218 <__divsi3>
 80082ae:	0003      	movs	r3, r0
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7f8 ff4b 	bl	800114c <__aeabi_i2f>
 80082b6:	1c03      	adds	r3, r0, #0
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 80082ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082bc:	0013      	movs	r3, r2
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	1a9b      	subs	r3, r3, r2
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	0018      	movs	r0, r3
 80082c6:	f7f8 ff87 	bl	80011d8 <__aeabi_ui2f>
 80082ca:	1c03      	adds	r3, r0, #0
 80082cc:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	22fa      	movs	r2, #250	; 0xfa
 80082d6:	00d2      	lsls	r2, r2, #3
 80082d8:	189a      	adds	r2, r3, r2
 80082da:	0013      	movs	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	189b      	adds	r3, r3, r2
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	1a9b      	subs	r3, r3, r2
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	0018      	movs	r0, r3
 80082ea:	f7f9 fead 	bl	8002048 <__aeabi_i2d>
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	0612      	lsls	r2, r2, #24
 80082f2:	4bb5      	ldr	r3, [pc, #724]	; (80085c8 <rtcGetTime+0x3f4>)
 80082f4:	f7f8 ffac 	bl	8001250 <__aeabi_dadd>
 80082f8:	0002      	movs	r2, r0
 80082fa:	000b      	movs	r3, r1
 80082fc:	0014      	movs	r4, r2
 80082fe:	001d      	movs	r5, r3
 8008300:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008302:	f7f8 f895 	bl	8000430 <__aeabi_f2uiz>
 8008306:	0003      	movs	r3, r0
 8008308:	0018      	movs	r0, r3
 800830a:	f7f9 fecd 	bl	80020a8 <__aeabi_ui2d>
 800830e:	0002      	movs	r2, r0
 8008310:	000b      	movs	r3, r1
 8008312:	0020      	movs	r0, r4
 8008314:	0029      	movs	r1, r5
 8008316:	f7f8 ff9b 	bl	8001250 <__aeabi_dadd>
 800831a:	0002      	movs	r2, r0
 800831c:	000b      	movs	r3, r1
 800831e:	0014      	movs	r4, r2
 8008320:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 8008322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008324:	f7f8 f884 	bl	8000430 <__aeabi_f2uiz>
 8008328:	0003      	movs	r3, r0
 800832a:	0018      	movs	r0, r3
 800832c:	f7f9 febc 	bl	80020a8 <__aeabi_ui2d>
 8008330:	0002      	movs	r2, r0
 8008332:	000b      	movs	r3, r1
 8008334:	0020      	movs	r0, r4
 8008336:	0029      	movs	r1, r5
 8008338:	f7f9 faf4 	bl	8001924 <__aeabi_dsub>
 800833c:	0002      	movs	r2, r0
 800833e:	000b      	movs	r3, r1
 8008340:	0014      	movs	r4, r2
 8008342:	001d      	movs	r5, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	789b      	ldrb	r3, [r3, #2]
 8008348:	b25b      	sxtb	r3, r3
 800834a:	0018      	movs	r0, r3
 800834c:	f7f9 fe7c 	bl	8002048 <__aeabi_i2d>
 8008350:	0002      	movs	r2, r0
 8008352:	000b      	movs	r3, r1
 8008354:	0020      	movs	r0, r4
 8008356:	0029      	movs	r1, r5
 8008358:	f7f8 ff7a 	bl	8001250 <__aeabi_dadd>
 800835c:	0002      	movs	r2, r0
 800835e:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 8008360:	0010      	movs	r0, r2
 8008362:	0019      	movs	r1, r3
 8008364:	f7f9 ff0e 	bl	8002184 <__aeabi_d2f>
 8008368:	1c03      	adds	r3, r0, #0
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	3353      	adds	r3, #83	; 0x53
 8008370:	2164      	movs	r1, #100	; 0x64
 8008372:	0018      	movs	r0, r3
 8008374:	f7f7 fec6 	bl	8000104 <__udivsi3>
 8008378:	0003      	movs	r3, r0
 800837a:	0018      	movs	r0, r3
 800837c:	f7f8 ff2c 	bl	80011d8 <__aeabi_ui2f>
 8008380:	1c03      	adds	r3, r0, #0
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 8008384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008386:	f7f8 f853 	bl	8000430 <__aeabi_f2uiz>
 800838a:	0003      	movs	r3, r0
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	0013      	movs	r3, r2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	189b      	adds	r3, r3, r2
 8008398:	089b      	lsrs	r3, r3, #2
 800839a:	0018      	movs	r0, r3
 800839c:	f7f8 ff1c 	bl	80011d8 <__aeabi_ui2f>
 80083a0:	1c03      	adds	r3, r0, #0
 80083a2:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 80083a4:	6a38      	ldr	r0, [r7, #32]
 80083a6:	f7f8 f843 	bl	8000430 <__aeabi_f2uiz>
 80083aa:	0003      	movs	r3, r0
 80083ac:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 80083ae:	4987      	ldr	r1, [pc, #540]	; (80085cc <rtcGetTime+0x3f8>)
 80083b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b2:	f7f8 f921 	bl	80005f8 <__aeabi_fadd>
 80083b6:	1c03      	adds	r3, r0, #0
 80083b8:	1c1c      	adds	r4, r3, #0
 80083ba:	69f8      	ldr	r0, [r7, #28]
 80083bc:	f7f8 ff0c 	bl	80011d8 <__aeabi_ui2f>
 80083c0:	1c03      	adds	r3, r0, #0
 80083c2:	1c19      	adds	r1, r3, #0
 80083c4:	1c20      	adds	r0, r4, #0
 80083c6:	f7f8 fcd9 	bl	8000d7c <__aeabi_fsub>
 80083ca:	1c03      	adds	r3, r0, #0
 80083cc:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 80083ce:	4b80      	ldr	r3, [pc, #512]	; (80085d0 <rtcGetTime+0x3fc>)
 80083d0:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 80083d2:	6979      	ldr	r1, [r7, #20]
 80083d4:	69b8      	ldr	r0, [r7, #24]
 80083d6:	f7f8 faab 	bl	8000930 <__aeabi_fdiv>
 80083da:	1c03      	adds	r3, r0, #0
 80083dc:	1c18      	adds	r0, r3, #0
 80083de:	f7f9 fe89 	bl	80020f4 <__aeabi_f2d>
 80083e2:	4a7c      	ldr	r2, [pc, #496]	; (80085d4 <rtcGetTime+0x400>)
 80083e4:	4b7c      	ldr	r3, [pc, #496]	; (80085d8 <rtcGetTime+0x404>)
 80083e6:	f7f9 fa9d 	bl	8001924 <__aeabi_dsub>
 80083ea:	0002      	movs	r2, r0
 80083ec:	000b      	movs	r3, r1
 80083ee:	0010      	movs	r0, r2
 80083f0:	0019      	movs	r1, r3
 80083f2:	f7f9 fec7 	bl	8002184 <__aeabi_d2f>
 80083f6:	1c03      	adds	r3, r0, #0
 80083f8:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 80083fa:	6938      	ldr	r0, [r7, #16]
 80083fc:	f7f8 f818 	bl	8000430 <__aeabi_f2uiz>
 8008400:	0003      	movs	r3, r0
 8008402:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7f8 fee7 	bl	80011d8 <__aeabi_ui2f>
 800840a:	1c03      	adds	r3, r0, #0
 800840c:	1c19      	adds	r1, r3, #0
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f7f8 fcb4 	bl	8000d7c <__aeabi_fsub>
 8008414:	1c03      	adds	r3, r0, #0
 8008416:	4971      	ldr	r1, [pc, #452]	; (80085dc <rtcGetTime+0x408>)
 8008418:	1c18      	adds	r0, r3, #0
 800841a:	f7f8 fb95 	bl	8000b48 <__aeabi_fmul>
 800841e:	1c03      	adds	r3, r0, #0
 8008420:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 8008422:	68b8      	ldr	r0, [r7, #8]
 8008424:	f7f8 f804 	bl	8000430 <__aeabi_f2uiz>
 8008428:	0002      	movs	r2, r0
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2224      	movs	r2, #36	; 0x24
 8008432:	5c9b      	ldrb	r3, [r3, r2]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d114      	bne.n	8008462 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	775a      	strb	r2, [r3, #29]
		chrono->chrono.decimal = 0;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2224      	movs	r2, #36	; 0x24
 8008466:	5c9b      	ldrb	r3, [r3, r2]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d000      	beq.n	800846e <rtcGetTime+0x29a>
 800846c:	e0ef      	b.n	800864e <rtcGetTime+0x47a>

		chrono->chrono.decimal = 0;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	779a      	strb	r2, [r3, #30]
		chrono->chrono.second = chrono->actual.second
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	795b      	ldrb	r3, [r3, #5]
 8008478:	b25b      	sxtb	r3, r3
 800847a:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7c5b      	ldrb	r3, [r3, #17]
 8008480:	b25b      	sxtb	r3, r3
 8008482:	b2db      	uxtb	r3, r3
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	b2db      	uxtb	r3, r3
 8008488:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	791b      	ldrb	r3, [r3, #4]
 8008492:	b25b      	sxtb	r3, r3
 8008494:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7c1b      	ldrb	r3, [r3, #16]
 800849a:	b25b      	sxtb	r3, r3
 800849c:	b2db      	uxtb	r3, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	78db      	ldrb	r3, [r3, #3]
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7bdb      	ldrb	r3, [r3, #15]
 80084b4:	b25b      	sxtb	r3, r3
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	b25a      	sxtb	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	789b      	ldrb	r3, [r3, #2]
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7b9b      	ldrb	r3, [r3, #14]
 80084ce:	b25b      	sxtb	r3, r3
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	b25a      	sxtb	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	b25b      	sxtb	r3, r3
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7b5b      	ldrb	r3, [r3, #13]
 80084e8:	b25b      	sxtb	r3, r3
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	b25a      	sxtb	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.decimal < 0) {
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	7f9b      	ldrb	r3, [r3, #30]
 80084fa:	b25b      	sxtb	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da11      	bge.n	8008524 <rtcGetTime+0x350>
			chrono->chrono.second--;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7f5b      	ldrb	r3, [r3, #29]
 8008504:	b25b      	sxtb	r3, r3
 8008506:	b2db      	uxtb	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	b25a      	sxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	775a      	strb	r2, [r3, #29]
			chrono->chrono.decimal = chrono->chrono.decimal + 10;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7f9b      	ldrb	r3, [r3, #30]
 8008516:	b25b      	sxtb	r3, r3
 8008518:	b2db      	uxtb	r3, r3
 800851a:	330a      	adds	r3, #10
 800851c:	b2db      	uxtb	r3, r3
 800851e:	b25a      	sxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7f5b      	ldrb	r3, [r3, #29]
 8008528:	b25b      	sxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	da11      	bge.n	8008552 <rtcGetTime+0x37e>
			chrono->chrono.minute--;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7f1b      	ldrb	r3, [r3, #28]
 8008532:	b25b      	sxtb	r3, r3
 8008534:	b2db      	uxtb	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b2db      	uxtb	r3, r3
 800853a:	b25a      	sxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7f5b      	ldrb	r3, [r3, #29]
 8008544:	b25b      	sxtb	r3, r3
 8008546:	b2db      	uxtb	r3, r3
 8008548:	333c      	adds	r3, #60	; 0x3c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	b25a      	sxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7f1b      	ldrb	r3, [r3, #28]
 8008556:	b25b      	sxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	da11      	bge.n	8008580 <rtcGetTime+0x3ac>
			chrono->chrono.hour--;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7edb      	ldrb	r3, [r3, #27]
 8008560:	b25b      	sxtb	r3, r3
 8008562:	b2db      	uxtb	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b2db      	uxtb	r3, r3
 8008568:	b25a      	sxtb	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7f1b      	ldrb	r3, [r3, #28]
 8008572:	b25b      	sxtb	r3, r3
 8008574:	b2db      	uxtb	r3, r3
 8008576:	333c      	adds	r3, #60	; 0x3c
 8008578:	b2db      	uxtb	r3, r3
 800857a:	b25a      	sxtb	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	771a      	strb	r2, [r3, #28]
		}

		if (chrono->chrono.hour < 0) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7edb      	ldrb	r3, [r3, #27]
 8008584:	b25b      	sxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	da2a      	bge.n	80085e0 <rtcGetTime+0x40c>
			chrono->chrono.day--;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7e9b      	ldrb	r3, [r3, #26]
 800858e:	b25b      	sxtb	r3, r3
 8008590:	b2db      	uxtb	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b2db      	uxtb	r3, r3
 8008596:	b25a      	sxtb	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7edb      	ldrb	r3, [r3, #27]
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	3318      	adds	r3, #24
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	b25a      	sxtb	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	76da      	strb	r2, [r3, #27]
 80085ae:	e017      	b.n	80085e0 <rtcGetTime+0x40c>
 80085b0:	200002f0 	.word	0x200002f0
 80085b4:	20000278 	.word	0x20000278
 80085b8:	2000020c 	.word	0x2000020c
 80085bc:	0000639c 	.word	0x0000639c
 80085c0:	000009f6 	.word	0x000009f6
 80085c4:	00001a3c 	.word	0x00001a3c
 80085c8:	413a62ff 	.word	0x413a62ff
 80085cc:	42180000 	.word	0x42180000
 80085d0:	41ec3ea6 	.word	0x41ec3ea6
 80085d4:	67381d7e 	.word	0x67381d7e
 80085d8:	3fd36944 	.word	0x3fd36944
 80085dc:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.day < 0) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7e9b      	ldrb	r3, [r3, #26]
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	da11      	bge.n	800860e <rtcGetTime+0x43a>
			chrono->chrono.month--;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	7e5b      	ldrb	r3, [r3, #25]
 80085ee:	b25b      	sxtb	r3, r3
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	b25a      	sxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7e9b      	ldrb	r3, [r3, #26]
 8008600:	b25b      	sxtb	r3, r3
 8008602:	b2db      	uxtb	r3, r3
 8008604:	331e      	adds	r3, #30
 8008606:	b2db      	uxtb	r3, r3
 8008608:	b25a      	sxtb	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7e5b      	ldrb	r3, [r3, #25]
 8008612:	b25b      	sxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	da11      	bge.n	800863c <rtcGetTime+0x468>
			chrono->chrono.year--;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	7e1b      	ldrb	r3, [r3, #24]
 800861c:	b25b      	sxtb	r3, r3
 800861e:	b2db      	uxtb	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	b25a      	sxtb	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7e5b      	ldrb	r3, [r3, #25]
 800862e:	b25b      	sxtb	r3, r3
 8008630:	b2db      	uxtb	r3, r3
 8008632:	330c      	adds	r3, #12
 8008634:	b2db      	uxtb	r3, r3
 8008636:	b25a      	sxtb	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	765a      	strb	r2, [r3, #25]
		}

		//max chrono count
		if (chrono->chrono.hour >= 5) {
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7edb      	ldrb	r3, [r3, #27]
 8008640:	b25b      	sxtb	r3, r3
 8008642:	2b04      	cmp	r3, #4
 8008644:	dd03      	ble.n	800864e <rtcGetTime+0x47a>
			chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2224      	movs	r2, #36	; 0x24
 800864a:	2102      	movs	r1, #2
 800864c:	5499      	strb	r1, [r3, r2]
		}
	}

}
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	46bd      	mov	sp, r7
 8008652:	b010      	add	sp, #64	; 0x40
 8008654:	bdb0      	pop	{r4, r5, r7, pc}
 8008656:	46c0      	nop			; (mov r8, r8)

08008658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <HAL_MspInit+0x4c>)
 8008660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <HAL_MspInit+0x4c>)
 8008664:	2101      	movs	r1, #1
 8008666:	430a      	orrs	r2, r1
 8008668:	641a      	str	r2, [r3, #64]	; 0x40
 800866a:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <HAL_MspInit+0x4c>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2201      	movs	r2, #1
 8008670:	4013      	ands	r3, r2
 8008672:	607b      	str	r3, [r7, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <HAL_MspInit+0x4c>)
 8008678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800867a:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <HAL_MspInit+0x4c>)
 800867c:	2180      	movs	r1, #128	; 0x80
 800867e:	0549      	lsls	r1, r1, #21
 8008680:	430a      	orrs	r2, r1
 8008682:	63da      	str	r2, [r3, #60]	; 0x3c
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <HAL_MspInit+0x4c>)
 8008686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	055b      	lsls	r3, r3, #21
 800868c:	4013      	ands	r3, r2
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8008692:	2380      	movs	r3, #128	; 0x80
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	0018      	movs	r0, r3
 8008698:	f7f9 ffa4 	bl	80025e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800869c:	46c0      	nop			; (mov r8, r8)
 800869e:	46bd      	mov	sp, r7
 80086a0:	b002      	add	sp, #8
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	40021000 	.word	0x40021000

080086a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b097      	sub	sp, #92	; 0x5c
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b0:	2344      	movs	r3, #68	; 0x44
 80086b2:	18fb      	adds	r3, r7, r3
 80086b4:	0018      	movs	r0, r3
 80086b6:	2314      	movs	r3, #20
 80086b8:	001a      	movs	r2, r3
 80086ba:	2100      	movs	r1, #0
 80086bc:	f000 fa57 	bl	8008b6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80086c0:	2410      	movs	r4, #16
 80086c2:	193b      	adds	r3, r7, r4
 80086c4:	0018      	movs	r0, r3
 80086c6:	2334      	movs	r3, #52	; 0x34
 80086c8:	001a      	movs	r2, r3
 80086ca:	2100      	movs	r1, #0
 80086cc:	f000 fa4f 	bl	8008b6e <memset>
  if(hadc->Instance==ADC1)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a20      	ldr	r2, [pc, #128]	; (8008758 <HAL_ADC_MspInit+0xb0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d139      	bne.n	800874e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80086da:	193b      	adds	r3, r7, r4
 80086dc:	2280      	movs	r2, #128	; 0x80
 80086de:	01d2      	lsls	r2, r2, #7
 80086e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80086e2:	193b      	adds	r3, r7, r4
 80086e4:	2200      	movs	r2, #0
 80086e6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086e8:	193b      	adds	r3, r7, r4
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7fb fd26 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 80086f0:	1e03      	subs	r3, r0, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80086f4:	f7ff f9c7 	bl	8007a86 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80086f8:	4b18      	ldr	r3, [pc, #96]	; (800875c <HAL_ADC_MspInit+0xb4>)
 80086fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086fc:	4b17      	ldr	r3, [pc, #92]	; (800875c <HAL_ADC_MspInit+0xb4>)
 80086fe:	2180      	movs	r1, #128	; 0x80
 8008700:	0349      	lsls	r1, r1, #13
 8008702:	430a      	orrs	r2, r1
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
 8008706:	4b15      	ldr	r3, [pc, #84]	; (800875c <HAL_ADC_MspInit+0xb4>)
 8008708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800870a:	2380      	movs	r3, #128	; 0x80
 800870c:	035b      	lsls	r3, r3, #13
 800870e:	4013      	ands	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008714:	4b11      	ldr	r3, [pc, #68]	; (800875c <HAL_ADC_MspInit+0xb4>)
 8008716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008718:	4b10      	ldr	r3, [pc, #64]	; (800875c <HAL_ADC_MspInit+0xb4>)
 800871a:	2101      	movs	r1, #1
 800871c:	430a      	orrs	r2, r1
 800871e:	635a      	str	r2, [r3, #52]	; 0x34
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <HAL_ADC_MspInit+0xb4>)
 8008722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008724:	2201      	movs	r2, #1
 8008726:	4013      	ands	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_Pin;
 800872c:	2144      	movs	r1, #68	; 0x44
 800872e:	187b      	adds	r3, r7, r1
 8008730:	2201      	movs	r2, #1
 8008732:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008734:	187b      	adds	r3, r7, r1
 8008736:	2203      	movs	r2, #3
 8008738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873a:	187b      	adds	r3, r7, r1
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8008740:	187a      	adds	r2, r7, r1
 8008742:	23a0      	movs	r3, #160	; 0xa0
 8008744:	05db      	lsls	r3, r3, #23
 8008746:	0011      	movs	r1, r2
 8008748:	0018      	movs	r0, r3
 800874a:	f7fa fcdd 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	46bd      	mov	sp, r7
 8008752:	b017      	add	sp, #92	; 0x5c
 8008754:	bd90      	pop	{r4, r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	40012400 	.word	0x40012400
 800875c:	40021000 	.word	0x40021000

08008760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b097      	sub	sp, #92	; 0x5c
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008768:	2344      	movs	r3, #68	; 0x44
 800876a:	18fb      	adds	r3, r7, r3
 800876c:	0018      	movs	r0, r3
 800876e:	2314      	movs	r3, #20
 8008770:	001a      	movs	r2, r3
 8008772:	2100      	movs	r1, #0
 8008774:	f000 f9fb 	bl	8008b6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008778:	2410      	movs	r4, #16
 800877a:	193b      	adds	r3, r7, r4
 800877c:	0018      	movs	r0, r3
 800877e:	2334      	movs	r3, #52	; 0x34
 8008780:	001a      	movs	r2, r3
 8008782:	2100      	movs	r1, #0
 8008784:	f000 f9f3 	bl	8008b6e <memset>
  if(hi2c->Instance==I2C1)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <HAL_I2C_MspInit+0xb8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d13e      	bne.n	8008810 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008792:	193b      	adds	r3, r7, r4
 8008794:	2220      	movs	r2, #32
 8008796:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008798:	193b      	adds	r3, r7, r4
 800879a:	2200      	movs	r2, #0
 800879c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800879e:	193b      	adds	r3, r7, r4
 80087a0:	0018      	movs	r0, r3
 80087a2:	f7fb fccb 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 80087a6:	1e03      	subs	r3, r0, #0
 80087a8:	d001      	beq.n	80087ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80087aa:	f7ff f96c 	bl	8007a86 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087ae:	4b1b      	ldr	r3, [pc, #108]	; (800881c <HAL_I2C_MspInit+0xbc>)
 80087b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b2:	4b1a      	ldr	r3, [pc, #104]	; (800881c <HAL_I2C_MspInit+0xbc>)
 80087b4:	2102      	movs	r1, #2
 80087b6:	430a      	orrs	r2, r1
 80087b8:	635a      	str	r2, [r3, #52]	; 0x34
 80087ba:	4b18      	ldr	r3, [pc, #96]	; (800881c <HAL_I2C_MspInit+0xbc>)
 80087bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087be:	2202      	movs	r2, #2
 80087c0:	4013      	ands	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80087c6:	2144      	movs	r1, #68	; 0x44
 80087c8:	187b      	adds	r3, r7, r1
 80087ca:	22c0      	movs	r2, #192	; 0xc0
 80087cc:	0092      	lsls	r2, r2, #2
 80087ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80087d0:	187b      	adds	r3, r7, r1
 80087d2:	2212      	movs	r2, #18
 80087d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d6:	187b      	adds	r3, r7, r1
 80087d8:	2200      	movs	r2, #0
 80087da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	2200      	movs	r2, #0
 80087e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80087e2:	187b      	adds	r3, r7, r1
 80087e4:	2206      	movs	r2, #6
 80087e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	4a0d      	ldr	r2, [pc, #52]	; (8008820 <HAL_I2C_MspInit+0xc0>)
 80087ec:	0019      	movs	r1, r3
 80087ee:	0010      	movs	r0, r2
 80087f0:	f7fa fc8a 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <HAL_I2C_MspInit+0xbc>)
 80087f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087f8:	4b08      	ldr	r3, [pc, #32]	; (800881c <HAL_I2C_MspInit+0xbc>)
 80087fa:	2180      	movs	r1, #128	; 0x80
 80087fc:	0389      	lsls	r1, r1, #14
 80087fe:	430a      	orrs	r2, r1
 8008800:	63da      	str	r2, [r3, #60]	; 0x3c
 8008802:	4b06      	ldr	r3, [pc, #24]	; (800881c <HAL_I2C_MspInit+0xbc>)
 8008804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008806:	2380      	movs	r3, #128	; 0x80
 8008808:	039b      	lsls	r3, r3, #14
 800880a:	4013      	ands	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	46bd      	mov	sp, r7
 8008814:	b017      	add	sp, #92	; 0x5c
 8008816:	bd90      	pop	{r4, r7, pc}
 8008818:	40005400 	.word	0x40005400
 800881c:	40021000 	.word	0x40021000
 8008820:	50000400 	.word	0x50000400

08008824 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b091      	sub	sp, #68	; 0x44
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800882c:	240c      	movs	r4, #12
 800882e:	193b      	adds	r3, r7, r4
 8008830:	0018      	movs	r0, r3
 8008832:	2334      	movs	r3, #52	; 0x34
 8008834:	001a      	movs	r2, r3
 8008836:	2100      	movs	r1, #0
 8008838:	f000 f999 	bl	8008b6e <memset>
  if(hrtc->Instance==RTC)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a15      	ldr	r2, [pc, #84]	; (8008898 <HAL_RTC_MspInit+0x74>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d124      	bne.n	8008890 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008846:	193b      	adds	r3, r7, r4
 8008848:	2280      	movs	r2, #128	; 0x80
 800884a:	0292      	lsls	r2, r2, #10
 800884c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800884e:	193b      	adds	r3, r7, r4
 8008850:	2280      	movs	r2, #128	; 0x80
 8008852:	0052      	lsls	r2, r2, #1
 8008854:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008856:	193b      	adds	r3, r7, r4
 8008858:	0018      	movs	r0, r3
 800885a:	f7fb fc6f 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 800885e:	1e03      	subs	r3, r0, #0
 8008860:	d001      	beq.n	8008866 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008862:	f7ff f910 	bl	8007a86 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008866:	4b0d      	ldr	r3, [pc, #52]	; (800889c <HAL_RTC_MspInit+0x78>)
 8008868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <HAL_RTC_MspInit+0x78>)
 800886c:	2180      	movs	r1, #128	; 0x80
 800886e:	0209      	lsls	r1, r1, #8
 8008870:	430a      	orrs	r2, r1
 8008872:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008874:	4b09      	ldr	r3, [pc, #36]	; (800889c <HAL_RTC_MspInit+0x78>)
 8008876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <HAL_RTC_MspInit+0x78>)
 800887a:	2180      	movs	r1, #128	; 0x80
 800887c:	00c9      	lsls	r1, r1, #3
 800887e:	430a      	orrs	r2, r1
 8008880:	63da      	str	r2, [r3, #60]	; 0x3c
 8008882:	4b06      	ldr	r3, [pc, #24]	; (800889c <HAL_RTC_MspInit+0x78>)
 8008884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008886:	2380      	movs	r3, #128	; 0x80
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4013      	ands	r3, r2
 800888c:	60bb      	str	r3, [r7, #8]
 800888e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008890:	46c0      	nop			; (mov r8, r8)
 8008892:	46bd      	mov	sp, r7
 8008894:	b011      	add	sp, #68	; 0x44
 8008896:	bd90      	pop	{r4, r7, pc}
 8008898:	40002800 	.word	0x40002800
 800889c:	40021000 	.word	0x40021000

080088a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b091      	sub	sp, #68	; 0x44
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088a8:	240c      	movs	r4, #12
 80088aa:	193b      	adds	r3, r7, r4
 80088ac:	0018      	movs	r0, r3
 80088ae:	2334      	movs	r3, #52	; 0x34
 80088b0:	001a      	movs	r2, r3
 80088b2:	2100      	movs	r1, #0
 80088b4:	f000 f95b 	bl	8008b6e <memset>
  if(htim_base->Instance==TIM1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a19      	ldr	r2, [pc, #100]	; (8008924 <HAL_TIM_Base_MspInit+0x84>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d12c      	bne.n	800891c <HAL_TIM_Base_MspInit+0x7c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80088c2:	193b      	adds	r3, r7, r4
 80088c4:	2280      	movs	r2, #128	; 0x80
 80088c6:	0392      	lsls	r2, r2, #14
 80088c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80088ca:	193b      	adds	r3, r7, r4
 80088cc:	2200      	movs	r2, #0
 80088ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088d0:	193b      	adds	r3, r7, r4
 80088d2:	0018      	movs	r0, r3
 80088d4:	f7fb fc32 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 80088d8:	1e03      	subs	r3, r0, #0
 80088da:	d001      	beq.n	80088e0 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80088dc:	f7ff f8d3 	bl	8007a86 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80088e0:	4b11      	ldr	r3, [pc, #68]	; (8008928 <HAL_TIM_Base_MspInit+0x88>)
 80088e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088e4:	4b10      	ldr	r3, [pc, #64]	; (8008928 <HAL_TIM_Base_MspInit+0x88>)
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	0109      	lsls	r1, r1, #4
 80088ea:	430a      	orrs	r2, r1
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
 80088ee:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <HAL_TIM_Base_MspInit+0x88>)
 80088f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088f2:	2380      	movs	r3, #128	; 0x80
 80088f4:	011b      	lsls	r3, r3, #4
 80088f6:	4013      	ands	r3, r2
 80088f8:	60bb      	str	r3, [r7, #8]
 80088fa:	68bb      	ldr	r3, [r7, #8]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80088fc:	2200      	movs	r2, #0
 80088fe:	2100      	movs	r1, #0
 8008900:	200d      	movs	r0, #13
 8008902:	f7fa fbcf 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8008906:	200d      	movs	r0, #13
 8008908:	f7fa fbe1 	bl	80030ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	200e      	movs	r0, #14
 8008912:	f7fa fbc7 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8008916:	200e      	movs	r0, #14
 8008918:	f7fa fbd9 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800891c:	46c0      	nop			; (mov r8, r8)
 800891e:	46bd      	mov	sp, r7
 8008920:	b011      	add	sp, #68	; 0x44
 8008922:	bd90      	pop	{r4, r7, pc}
 8008924:	40012c00 	.word	0x40012c00
 8008928:	40021000 	.word	0x40021000

0800892c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b097      	sub	sp, #92	; 0x5c
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008934:	2344      	movs	r3, #68	; 0x44
 8008936:	18fb      	adds	r3, r7, r3
 8008938:	0018      	movs	r0, r3
 800893a:	2314      	movs	r3, #20
 800893c:	001a      	movs	r2, r3
 800893e:	2100      	movs	r1, #0
 8008940:	f000 f915 	bl	8008b6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008944:	2410      	movs	r4, #16
 8008946:	193b      	adds	r3, r7, r4
 8008948:	0018      	movs	r0, r3
 800894a:	2334      	movs	r3, #52	; 0x34
 800894c:	001a      	movs	r2, r3
 800894e:	2100      	movs	r1, #0
 8008950:	f000 f90d 	bl	8008b6e <memset>
  if(huart->Instance==USART2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a22      	ldr	r2, [pc, #136]	; (80089e4 <HAL_UART_MspInit+0xb8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d13e      	bne.n	80089dc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800895e:	193b      	adds	r3, r7, r4
 8008960:	2202      	movs	r2, #2
 8008962:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008964:	193b      	adds	r3, r7, r4
 8008966:	2200      	movs	r2, #0
 8008968:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800896a:	193b      	adds	r3, r7, r4
 800896c:	0018      	movs	r0, r3
 800896e:	f7fb fbe5 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 8008972:	1e03      	subs	r3, r0, #0
 8008974:	d001      	beq.n	800897a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008976:	f7ff f886 	bl	8007a86 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800897a:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <HAL_UART_MspInit+0xbc>)
 800897c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <HAL_UART_MspInit+0xbc>)
 8008980:	2180      	movs	r1, #128	; 0x80
 8008982:	0289      	lsls	r1, r1, #10
 8008984:	430a      	orrs	r2, r1
 8008986:	63da      	str	r2, [r3, #60]	; 0x3c
 8008988:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <HAL_UART_MspInit+0xbc>)
 800898a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	029b      	lsls	r3, r3, #10
 8008990:	4013      	ands	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <HAL_UART_MspInit+0xbc>)
 8008998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <HAL_UART_MspInit+0xbc>)
 800899c:	2101      	movs	r1, #1
 800899e:	430a      	orrs	r2, r1
 80089a0:	635a      	str	r2, [r3, #52]	; 0x34
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_UART_MspInit+0xbc>)
 80089a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a6:	2201      	movs	r2, #1
 80089a8:	4013      	ands	r3, r2
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80089ae:	2144      	movs	r1, #68	; 0x44
 80089b0:	187b      	adds	r3, r7, r1
 80089b2:	220c      	movs	r2, #12
 80089b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	2202      	movs	r2, #2
 80089ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	2200      	movs	r2, #0
 80089c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089c2:	187b      	adds	r3, r7, r1
 80089c4:	2200      	movs	r2, #0
 80089c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80089c8:	187b      	adds	r3, r7, r1
 80089ca:	2201      	movs	r2, #1
 80089cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ce:	187a      	adds	r2, r7, r1
 80089d0:	23a0      	movs	r3, #160	; 0xa0
 80089d2:	05db      	lsls	r3, r3, #23
 80089d4:	0011      	movs	r1, r2
 80089d6:	0018      	movs	r0, r3
 80089d8:	f7fa fb96 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80089dc:	46c0      	nop			; (mov r8, r8)
 80089de:	46bd      	mov	sp, r7
 80089e0:	b017      	add	sp, #92	; 0x5c
 80089e2:	bd90      	pop	{r4, r7, pc}
 80089e4:	40004400 	.word	0x40004400
 80089e8:	40021000 	.word	0x40021000

080089ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089f0:	e7fe      	b.n	80089f0 <NMI_Handler+0x4>

080089f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089f6:	e7fe      	b.n	80089f6 <HardFault_Handler+0x4>

080089f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80089fc:	46c0      	nop			; (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a10:	f7f9 fdcc 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 8008a1e:	2008      	movs	r0, #8
 8008a20:	f7fa fd10 	bl	8003444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8008a24:	46c0      	nop			; (mov r8, r8)
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8008a2e:	2010      	movs	r0, #16
 8008a30:	f7fa fd08 	bl	8003444 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8008a34:	2020      	movs	r0, #32
 8008a36:	f7fa fd05 	bl	8003444 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 8008a3a:	2040      	movs	r0, #64	; 0x40
 8008a3c:	f7fa fd02 	bl	8003444 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 8008a40:	2080      	movs	r0, #128	; 0x80
 8008a42:	f7fa fcff 	bl	8003444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008a50:	4b03      	ldr	r3, [pc, #12]	; (8008a60 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8008a52:	0018      	movs	r0, r3
 8008a54:	f7fc f94c 	bl	8004cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8008a58:	46c0      	nop			; (mov r8, r8)
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	200002a4 	.word	0x200002a4

08008a64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008a68:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <TIM1_CC_IRQHandler+0x14>)
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f7fc f940 	bl	8004cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8008a70:	46c0      	nop			; (mov r8, r8)
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	46c0      	nop			; (mov r8, r8)
 8008a78:	200002a4 	.word	0x200002a4

08008a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008a80:	46c0      	nop			; (mov r8, r8)
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008a88:	480d      	ldr	r0, [pc, #52]	; (8008ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008a8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008a8c:	f7ff fff6 	bl	8008a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a90:	480c      	ldr	r0, [pc, #48]	; (8008ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008a92:	490d      	ldr	r1, [pc, #52]	; (8008ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008a94:	4a0d      	ldr	r2, [pc, #52]	; (8008acc <LoopForever+0xe>)
  movs r3, #0
 8008a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a98:	e002      	b.n	8008aa0 <LoopCopyDataInit>

08008a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a9e:	3304      	adds	r3, #4

08008aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008aa4:	d3f9      	bcc.n	8008a9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008aa6:	4a0a      	ldr	r2, [pc, #40]	; (8008ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008aa8:	4c0a      	ldr	r4, [pc, #40]	; (8008ad4 <LoopForever+0x16>)
  movs r3, #0
 8008aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008aac:	e001      	b.n	8008ab2 <LoopFillZerobss>

08008aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ab0:	3204      	adds	r2, #4

08008ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ab4:	d3fb      	bcc.n	8008aae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008ab6:	f000 f811 	bl	8008adc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008aba:	f7fe f937 	bl	8006d2c <main>

08008abe <LoopForever>:

LoopForever:
  b LoopForever
 8008abe:	e7fe      	b.n	8008abe <LoopForever>
  ldr   r0, =_estack
 8008ac0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ac8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008acc:	08008f54 	.word	0x08008f54
  ldr r2, =_sbss
 8008ad0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008ad4:	20000394 	.word	0x20000394

08008ad8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008ad8:	e7fe      	b.n	8008ad8 <ADC1_COMP_IRQHandler>
	...

08008adc <__libc_init_array>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	2600      	movs	r6, #0
 8008ae0:	4d0c      	ldr	r5, [pc, #48]	; (8008b14 <__libc_init_array+0x38>)
 8008ae2:	4c0d      	ldr	r4, [pc, #52]	; (8008b18 <__libc_init_array+0x3c>)
 8008ae4:	1b64      	subs	r4, r4, r5
 8008ae6:	10a4      	asrs	r4, r4, #2
 8008ae8:	42a6      	cmp	r6, r4
 8008aea:	d109      	bne.n	8008b00 <__libc_init_array+0x24>
 8008aec:	2600      	movs	r6, #0
 8008aee:	f000 f87d 	bl	8008bec <_init>
 8008af2:	4d0a      	ldr	r5, [pc, #40]	; (8008b1c <__libc_init_array+0x40>)
 8008af4:	4c0a      	ldr	r4, [pc, #40]	; (8008b20 <__libc_init_array+0x44>)
 8008af6:	1b64      	subs	r4, r4, r5
 8008af8:	10a4      	asrs	r4, r4, #2
 8008afa:	42a6      	cmp	r6, r4
 8008afc:	d105      	bne.n	8008b0a <__libc_init_array+0x2e>
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	00b3      	lsls	r3, r6, #2
 8008b02:	58eb      	ldr	r3, [r5, r3]
 8008b04:	4798      	blx	r3
 8008b06:	3601      	adds	r6, #1
 8008b08:	e7ee      	b.n	8008ae8 <__libc_init_array+0xc>
 8008b0a:	00b3      	lsls	r3, r6, #2
 8008b0c:	58eb      	ldr	r3, [r5, r3]
 8008b0e:	4798      	blx	r3
 8008b10:	3601      	adds	r6, #1
 8008b12:	e7f2      	b.n	8008afa <__libc_init_array+0x1e>
 8008b14:	08008f4c 	.word	0x08008f4c
 8008b18:	08008f4c 	.word	0x08008f4c
 8008b1c:	08008f4c 	.word	0x08008f4c
 8008b20:	08008f50 	.word	0x08008f50

08008b24 <__itoa>:
 8008b24:	1e93      	subs	r3, r2, #2
 8008b26:	b510      	push	{r4, lr}
 8008b28:	000c      	movs	r4, r1
 8008b2a:	2b22      	cmp	r3, #34	; 0x22
 8008b2c:	d904      	bls.n	8008b38 <__itoa+0x14>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	001c      	movs	r4, r3
 8008b32:	700b      	strb	r3, [r1, #0]
 8008b34:	0020      	movs	r0, r4
 8008b36:	bd10      	pop	{r4, pc}
 8008b38:	2a0a      	cmp	r2, #10
 8008b3a:	d109      	bne.n	8008b50 <__itoa+0x2c>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	da07      	bge.n	8008b50 <__itoa+0x2c>
 8008b40:	232d      	movs	r3, #45	; 0x2d
 8008b42:	700b      	strb	r3, [r1, #0]
 8008b44:	2101      	movs	r1, #1
 8008b46:	4240      	negs	r0, r0
 8008b48:	1861      	adds	r1, r4, r1
 8008b4a:	f000 f819 	bl	8008b80 <__utoa>
 8008b4e:	e7f1      	b.n	8008b34 <__itoa+0x10>
 8008b50:	2100      	movs	r1, #0
 8008b52:	e7f9      	b.n	8008b48 <__itoa+0x24>

08008b54 <itoa>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	f7ff ffe5 	bl	8008b24 <__itoa>
 8008b5a:	bd10      	pop	{r4, pc}

08008b5c <memcpy>:
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d100      	bne.n	8008b66 <memcpy+0xa>
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	5ccc      	ldrb	r4, [r1, r3]
 8008b68:	54c4      	strb	r4, [r0, r3]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	e7f8      	b.n	8008b60 <memcpy+0x4>

08008b6e <memset>:
 8008b6e:	0003      	movs	r3, r0
 8008b70:	1882      	adds	r2, r0, r2
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d100      	bne.n	8008b78 <memset+0xa>
 8008b76:	4770      	bx	lr
 8008b78:	7019      	strb	r1, [r3, #0]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	e7f9      	b.n	8008b72 <memset+0x4>
	...

08008b80 <__utoa>:
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	0016      	movs	r6, r2
 8008b84:	b08d      	sub	sp, #52	; 0x34
 8008b86:	0007      	movs	r7, r0
 8008b88:	000c      	movs	r4, r1
 8008b8a:	2225      	movs	r2, #37	; 0x25
 8008b8c:	4916      	ldr	r1, [pc, #88]	; (8008be8 <__utoa+0x68>)
 8008b8e:	a802      	add	r0, sp, #8
 8008b90:	f7ff ffe4 	bl	8008b5c <memcpy>
 8008b94:	1eb3      	subs	r3, r6, #2
 8008b96:	2500      	movs	r5, #0
 8008b98:	2b22      	cmp	r3, #34	; 0x22
 8008b9a:	d820      	bhi.n	8008bde <__utoa+0x5e>
 8008b9c:	1e63      	subs	r3, r4, #1
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	ab02      	add	r3, sp, #8
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	0038      	movs	r0, r7
 8008ba6:	0031      	movs	r1, r6
 8008ba8:	f7f7 fb32 	bl	8000210 <__aeabi_uidivmod>
 8008bac:	000b      	movs	r3, r1
 8008bae:	9a01      	ldr	r2, [sp, #4]
 8008bb0:	0029      	movs	r1, r5
 8008bb2:	5cd3      	ldrb	r3, [r2, r3]
 8008bb4:	9a00      	ldr	r2, [sp, #0]
 8008bb6:	3501      	adds	r5, #1
 8008bb8:	5553      	strb	r3, [r2, r5]
 8008bba:	003b      	movs	r3, r7
 8008bbc:	0007      	movs	r7, r0
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	d9f0      	bls.n	8008ba4 <__utoa+0x24>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	0022      	movs	r2, r4
 8008bc6:	5563      	strb	r3, [r4, r5]
 8008bc8:	000b      	movs	r3, r1
 8008bca:	1ac8      	subs	r0, r1, r3
 8008bcc:	4283      	cmp	r3, r0
 8008bce:	dd08      	ble.n	8008be2 <__utoa+0x62>
 8008bd0:	7810      	ldrb	r0, [r2, #0]
 8008bd2:	5ce5      	ldrb	r5, [r4, r3]
 8008bd4:	7015      	strb	r5, [r2, #0]
 8008bd6:	54e0      	strb	r0, [r4, r3]
 8008bd8:	3201      	adds	r2, #1
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	e7f5      	b.n	8008bca <__utoa+0x4a>
 8008bde:	7025      	strb	r5, [r4, #0]
 8008be0:	002c      	movs	r4, r5
 8008be2:	0020      	movs	r0, r4
 8008be4:	b00d      	add	sp, #52	; 0x34
 8008be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be8:	08008f1c 	.word	0x08008f1c

08008bec <_init>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	46c0      	nop			; (mov r8, r8)
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr

08008bf8 <_fini>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr
