
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010158  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08010218  08010218  00020218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010688  08010688  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  08010688  08010688  00020688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010690  08010690  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010690  08010690  00020690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010694  08010694  00020694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08010698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000007d0  20000100  08010798  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  08010798  000308d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d8b0  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005145  00000000  00000000  0005d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00062b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c8  00000000  00000000  000646f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020086  00000000  00000000  000660b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000248a5  00000000  00000000  0008613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb4f2  00000000  00000000  000aa9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165ed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e28  00000000  00000000  00165f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080101f0 	.word	0x080101f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	080101f0 	.word	0x080101f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fecd 	bl	80021b8 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fe17 	bl	800205c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 febf 	bl	80021b8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 feb5 	bl	80021b8 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fe39 	bl	80020d4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fe2f 	bl	80020d4 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_ldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d115      	bne.n	80004b4 <__aeabi_ldivmod+0x30>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d113      	bne.n	80004b4 <__aeabi_ldivmod+0x30>
 800048c:	2900      	cmp	r1, #0
 800048e:	db06      	blt.n	800049e <__aeabi_ldivmod+0x1a>
 8000490:	dc01      	bgt.n	8000496 <__aeabi_ldivmod+0x12>
 8000492:	2800      	cmp	r0, #0
 8000494:	d006      	beq.n	80004a4 <__aeabi_ldivmod+0x20>
 8000496:	2000      	movs	r0, #0
 8000498:	43c0      	mvns	r0, r0
 800049a:	0841      	lsrs	r1, r0, #1
 800049c:	e002      	b.n	80004a4 <__aeabi_ldivmod+0x20>
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	0609      	lsls	r1, r1, #24
 80004a2:	2000      	movs	r0, #0
 80004a4:	b407      	push	{r0, r1, r2}
 80004a6:	4802      	ldr	r0, [pc, #8]	; (80004b0 <__aeabi_ldivmod+0x2c>)
 80004a8:	a101      	add	r1, pc, #4	; (adr r1, 80004b0 <__aeabi_ldivmod+0x2c>)
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	9002      	str	r0, [sp, #8]
 80004ae:	bd03      	pop	{r0, r1, pc}
 80004b0:	ffffff55 	.word	0xffffff55
 80004b4:	b403      	push	{r0, r1}
 80004b6:	4668      	mov	r0, sp
 80004b8:	b501      	push	{r0, lr}
 80004ba:	9802      	ldr	r0, [sp, #8]
 80004bc:	f000 f932 	bl	8000724 <__gnu_ldivmod_helper>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	469e      	mov	lr, r3
 80004c4:	b002      	add	sp, #8
 80004c6:	bc0c      	pop	{r2, r3}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_uldivmod>:
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d111      	bne.n	80004f4 <__aeabi_uldivmod+0x28>
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d10f      	bne.n	80004f4 <__aeabi_uldivmod+0x28>
 80004d4:	2900      	cmp	r1, #0
 80004d6:	d100      	bne.n	80004da <__aeabi_uldivmod+0xe>
 80004d8:	2800      	cmp	r0, #0
 80004da:	d002      	beq.n	80004e2 <__aeabi_uldivmod+0x16>
 80004dc:	2100      	movs	r1, #0
 80004de:	43c9      	mvns	r1, r1
 80004e0:	1c08      	adds	r0, r1, #0
 80004e2:	b407      	push	{r0, r1, r2}
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <__aeabi_uldivmod+0x24>)
 80004e6:	a102      	add	r1, pc, #8	; (adr r1, 80004f0 <__aeabi_uldivmod+0x24>)
 80004e8:	1840      	adds	r0, r0, r1
 80004ea:	9002      	str	r0, [sp, #8]
 80004ec:	bd03      	pop	{r0, r1, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	ffffff15 	.word	0xffffff15
 80004f4:	b403      	push	{r0, r1}
 80004f6:	4668      	mov	r0, sp
 80004f8:	b501      	push	{r0, lr}
 80004fa:	9802      	ldr	r0, [sp, #8]
 80004fc:	f000 f846 	bl	800058c <__udivmoddi4>
 8000500:	9b01      	ldr	r3, [sp, #4]
 8000502:	469e      	mov	lr, r3
 8000504:	b002      	add	sp, #8
 8000506:	bc0c      	pop	{r2, r3}
 8000508:	4770      	bx	lr
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_lmul>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	000f      	movs	r7, r1
 8000514:	0001      	movs	r1, r0
 8000516:	002e      	movs	r6, r5
 8000518:	46c6      	mov	lr, r8
 800051a:	4684      	mov	ip, r0
 800051c:	0400      	lsls	r0, r0, #16
 800051e:	0c14      	lsrs	r4, r2, #16
 8000520:	0c00      	lsrs	r0, r0, #16
 8000522:	0c09      	lsrs	r1, r1, #16
 8000524:	4346      	muls	r6, r0
 8000526:	434d      	muls	r5, r1
 8000528:	4360      	muls	r0, r4
 800052a:	4361      	muls	r1, r4
 800052c:	1940      	adds	r0, r0, r5
 800052e:	0c34      	lsrs	r4, r6, #16
 8000530:	1824      	adds	r4, r4, r0
 8000532:	b500      	push	{lr}
 8000534:	42a5      	cmp	r5, r4
 8000536:	d903      	bls.n	8000540 <__aeabi_lmul+0x34>
 8000538:	2080      	movs	r0, #128	; 0x80
 800053a:	0240      	lsls	r0, r0, #9
 800053c:	4680      	mov	r8, r0
 800053e:	4441      	add	r1, r8
 8000540:	0c25      	lsrs	r5, r4, #16
 8000542:	186d      	adds	r5, r5, r1
 8000544:	4661      	mov	r1, ip
 8000546:	4359      	muls	r1, r3
 8000548:	437a      	muls	r2, r7
 800054a:	0430      	lsls	r0, r6, #16
 800054c:	1949      	adds	r1, r1, r5
 800054e:	0424      	lsls	r4, r4, #16
 8000550:	0c00      	lsrs	r0, r0, #16
 8000552:	1820      	adds	r0, r4, r0
 8000554:	1889      	adds	r1, r1, r2
 8000556:	bc80      	pop	{r7}
 8000558:	46b8      	mov	r8, r7
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f002 fe40 	bl	80031e8 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 fe81 	bl	8001274 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	; 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fcb3 	bl	8000ee4 <__aeabi_fsub>
 800057e:	f000 fe79 	bl	8001274 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4657      	mov	r7, sl
 8000590:	464e      	mov	r6, r9
 8000592:	4645      	mov	r5, r8
 8000594:	46de      	mov	lr, fp
 8000596:	b5e0      	push	{r5, r6, r7, lr}
 8000598:	0004      	movs	r4, r0
 800059a:	000d      	movs	r5, r1
 800059c:	4692      	mov	sl, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	b083      	sub	sp, #12
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d830      	bhi.n	8000608 <__udivmoddi4+0x7c>
 80005a6:	d02d      	beq.n	8000604 <__udivmoddi4+0x78>
 80005a8:	4649      	mov	r1, r9
 80005aa:	4650      	mov	r0, sl
 80005ac:	f002 fe44 	bl	8003238 <__clzdi2>
 80005b0:	0029      	movs	r1, r5
 80005b2:	0006      	movs	r6, r0
 80005b4:	0020      	movs	r0, r4
 80005b6:	f002 fe3f 	bl	8003238 <__clzdi2>
 80005ba:	1a33      	subs	r3, r6, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	3b20      	subs	r3, #32
 80005c0:	469b      	mov	fp, r3
 80005c2:	d433      	bmi.n	800062c <__udivmoddi4+0xa0>
 80005c4:	465a      	mov	r2, fp
 80005c6:	4653      	mov	r3, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	001f      	movs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d83a      	bhi.n	800064e <__udivmoddi4+0xc2>
 80005d8:	42af      	cmp	r7, r5
 80005da:	d100      	bne.n	80005de <__udivmoddi4+0x52>
 80005dc:	e078      	b.n	80006d0 <__udivmoddi4+0x144>
 80005de:	465b      	mov	r3, fp
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5e>
 80005e8:	e075      	b.n	80006d6 <__udivmoddi4+0x14a>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	465a      	mov	r2, fp
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4642      	mov	r2, r8
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e028      	b.n	8000656 <__udivmoddi4+0xca>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9cf      	bls.n	80005a8 <__udivmoddi4+0x1c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8e>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b003      	add	sp, #12
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
 8000622:	46bb      	mov	fp, r7
 8000624:	46b2      	mov	sl, r6
 8000626:	46a9      	mov	r9, r5
 8000628:	46a0      	mov	r8, r4
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	4652      	mov	r2, sl
 8000634:	40da      	lsrs	r2, r3
 8000636:	4641      	mov	r1, r8
 8000638:	0013      	movs	r3, r2
 800063a:	464a      	mov	r2, r9
 800063c:	408a      	lsls	r2, r1
 800063e:	0017      	movs	r7, r2
 8000640:	4642      	mov	r2, r8
 8000642:	431f      	orrs	r7, r3
 8000644:	4653      	mov	r3, sl
 8000646:	4093      	lsls	r3, r2
 8000648:	001e      	movs	r6, r3
 800064a:	42af      	cmp	r7, r5
 800064c:	d9c4      	bls.n	80005d8 <__udivmoddi4+0x4c>
 800064e:	2200      	movs	r2, #0
 8000650:	2300      	movs	r3, #0
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	4643      	mov	r3, r8
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0d9      	beq.n	8000610 <__udivmoddi4+0x84>
 800065c:	07fb      	lsls	r3, r7, #31
 800065e:	0872      	lsrs	r2, r6, #1
 8000660:	431a      	orrs	r2, r3
 8000662:	4646      	mov	r6, r8
 8000664:	087b      	lsrs	r3, r7, #1
 8000666:	e00e      	b.n	8000686 <__udivmoddi4+0xfa>
 8000668:	42ab      	cmp	r3, r5
 800066a:	d101      	bne.n	8000670 <__udivmoddi4+0xe4>
 800066c:	42a2      	cmp	r2, r4
 800066e:	d80c      	bhi.n	800068a <__udivmoddi4+0xfe>
 8000670:	1aa4      	subs	r4, r4, r2
 8000672:	419d      	sbcs	r5, r3
 8000674:	2001      	movs	r0, #1
 8000676:	1924      	adds	r4, r4, r4
 8000678:	416d      	adcs	r5, r5
 800067a:	2100      	movs	r1, #0
 800067c:	3e01      	subs	r6, #1
 800067e:	1824      	adds	r4, r4, r0
 8000680:	414d      	adcs	r5, r1
 8000682:	2e00      	cmp	r6, #0
 8000684:	d006      	beq.n	8000694 <__udivmoddi4+0x108>
 8000686:	42ab      	cmp	r3, r5
 8000688:	d9ee      	bls.n	8000668 <__udivmoddi4+0xdc>
 800068a:	3e01      	subs	r6, #1
 800068c:	1924      	adds	r4, r4, r4
 800068e:	416d      	adcs	r5, r5
 8000690:	2e00      	cmp	r6, #0
 8000692:	d1f8      	bne.n	8000686 <__udivmoddi4+0xfa>
 8000694:	9800      	ldr	r0, [sp, #0]
 8000696:	9901      	ldr	r1, [sp, #4]
 8000698:	465b      	mov	r3, fp
 800069a:	1900      	adds	r0, r0, r4
 800069c:	4169      	adcs	r1, r5
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db24      	blt.n	80006ec <__udivmoddi4+0x160>
 80006a2:	002b      	movs	r3, r5
 80006a4:	465a      	mov	r2, fp
 80006a6:	4644      	mov	r4, r8
 80006a8:	40d3      	lsrs	r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	40e2      	lsrs	r2, r4
 80006ae:	001c      	movs	r4, r3
 80006b0:	465b      	mov	r3, fp
 80006b2:	0015      	movs	r5, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db2a      	blt.n	800070e <__udivmoddi4+0x182>
 80006b8:	0026      	movs	r6, r4
 80006ba:	409e      	lsls	r6, r3
 80006bc:	0033      	movs	r3, r6
 80006be:	0026      	movs	r6, r4
 80006c0:	4647      	mov	r7, r8
 80006c2:	40be      	lsls	r6, r7
 80006c4:	0032      	movs	r2, r6
 80006c6:	1a80      	subs	r0, r0, r2
 80006c8:	4199      	sbcs	r1, r3
 80006ca:	9000      	str	r0, [sp, #0]
 80006cc:	9101      	str	r1, [sp, #4]
 80006ce:	e79f      	b.n	8000610 <__udivmoddi4+0x84>
 80006d0:	42a3      	cmp	r3, r4
 80006d2:	d8bc      	bhi.n	800064e <__udivmoddi4+0xc2>
 80006d4:	e783      	b.n	80005de <__udivmoddi4+0x52>
 80006d6:	4642      	mov	r2, r8
 80006d8:	2320      	movs	r3, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	9100      	str	r1, [sp, #0]
 80006e2:	9201      	str	r2, [sp, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	e786      	b.n	80005fa <__udivmoddi4+0x6e>
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	002a      	movs	r2, r5
 80006f4:	4646      	mov	r6, r8
 80006f6:	409a      	lsls	r2, r3
 80006f8:	0023      	movs	r3, r4
 80006fa:	40f3      	lsrs	r3, r6
 80006fc:	4644      	mov	r4, r8
 80006fe:	4313      	orrs	r3, r2
 8000700:	002a      	movs	r2, r5
 8000702:	40e2      	lsrs	r2, r4
 8000704:	001c      	movs	r4, r3
 8000706:	465b      	mov	r3, fp
 8000708:	0015      	movs	r5, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	dad4      	bge.n	80006b8 <__udivmoddi4+0x12c>
 800070e:	4642      	mov	r2, r8
 8000710:	002f      	movs	r7, r5
 8000712:	2320      	movs	r3, #32
 8000714:	0026      	movs	r6, r4
 8000716:	4097      	lsls	r7, r2
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	40de      	lsrs	r6, r3
 800071c:	003b      	movs	r3, r7
 800071e:	4333      	orrs	r3, r6
 8000720:	e7cd      	b.n	80006be <__udivmoddi4+0x132>
 8000722:	46c0      	nop			; (mov r8, r8)

08000724 <__gnu_ldivmod_helper>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	46ce      	mov	lr, r9
 8000728:	4647      	mov	r7, r8
 800072a:	b580      	push	{r7, lr}
 800072c:	4691      	mov	r9, r2
 800072e:	4698      	mov	r8, r3
 8000730:	0004      	movs	r4, r0
 8000732:	000d      	movs	r5, r1
 8000734:	f002 fd8c 	bl	8003250 <__divdi3>
 8000738:	0007      	movs	r7, r0
 800073a:	000e      	movs	r6, r1
 800073c:	0002      	movs	r2, r0
 800073e:	000b      	movs	r3, r1
 8000740:	4648      	mov	r0, r9
 8000742:	4641      	mov	r1, r8
 8000744:	f7ff fee2 	bl	800050c <__aeabi_lmul>
 8000748:	1a24      	subs	r4, r4, r0
 800074a:	418d      	sbcs	r5, r1
 800074c:	9b08      	ldr	r3, [sp, #32]
 800074e:	0038      	movs	r0, r7
 8000750:	0031      	movs	r1, r6
 8000752:	601c      	str	r4, [r3, #0]
 8000754:	605d      	str	r5, [r3, #4]
 8000756:	bcc0      	pop	{r6, r7}
 8000758:	46b9      	mov	r9, r7
 800075a:	46b0      	mov	r8, r6
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)

08000760 <__aeabi_fadd>:
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	4646      	mov	r6, r8
 8000764:	46d6      	mov	lr, sl
 8000766:	464f      	mov	r7, r9
 8000768:	024d      	lsls	r5, r1, #9
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	b5c0      	push	{r6, r7, lr}
 800076e:	0a52      	lsrs	r2, r2, #9
 8000770:	0a6e      	lsrs	r6, r5, #9
 8000772:	0047      	lsls	r7, r0, #1
 8000774:	46b0      	mov	r8, r6
 8000776:	0e3f      	lsrs	r7, r7, #24
 8000778:	004e      	lsls	r6, r1, #1
 800077a:	0fc4      	lsrs	r4, r0, #31
 800077c:	00d0      	lsls	r0, r2, #3
 800077e:	4694      	mov	ip, r2
 8000780:	003b      	movs	r3, r7
 8000782:	4682      	mov	sl, r0
 8000784:	0e36      	lsrs	r6, r6, #24
 8000786:	0fc9      	lsrs	r1, r1, #31
 8000788:	09ad      	lsrs	r5, r5, #6
 800078a:	428c      	cmp	r4, r1
 800078c:	d06d      	beq.n	800086a <__aeabi_fadd+0x10a>
 800078e:	1bb8      	subs	r0, r7, r6
 8000790:	4681      	mov	r9, r0
 8000792:	2800      	cmp	r0, #0
 8000794:	dd4d      	ble.n	8000832 <__aeabi_fadd+0xd2>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x3c>
 800079a:	e088      	b.n	80008ae <__aeabi_fadd+0x14e>
 800079c:	2fff      	cmp	r7, #255	; 0xff
 800079e:	d05a      	beq.n	8000856 <__aeabi_fadd+0xf6>
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	431d      	orrs	r5, r3
 80007a6:	464b      	mov	r3, r9
 80007a8:	2201      	movs	r2, #1
 80007aa:	2b1b      	cmp	r3, #27
 80007ac:	dc0a      	bgt.n	80007c4 <__aeabi_fadd+0x64>
 80007ae:	002b      	movs	r3, r5
 80007b0:	464a      	mov	r2, r9
 80007b2:	4649      	mov	r1, r9
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	2220      	movs	r2, #32
 80007b8:	1a52      	subs	r2, r2, r1
 80007ba:	4095      	lsls	r5, r2
 80007bc:	002a      	movs	r2, r5
 80007be:	1e55      	subs	r5, r2, #1
 80007c0:	41aa      	sbcs	r2, r5
 80007c2:	431a      	orrs	r2, r3
 80007c4:	4653      	mov	r3, sl
 80007c6:	1a9a      	subs	r2, r3, r2
 80007c8:	0153      	lsls	r3, r2, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x6e>
 80007cc:	e0b9      	b.n	8000942 <__aeabi_fadd+0x1e2>
 80007ce:	0192      	lsls	r2, r2, #6
 80007d0:	0996      	lsrs	r6, r2, #6
 80007d2:	0030      	movs	r0, r6
 80007d4:	f002 fd12 	bl	80031fc <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4086      	lsls	r6, r0
 80007dc:	4287      	cmp	r7, r0
 80007de:	dd00      	ble.n	80007e2 <__aeabi_fadd+0x82>
 80007e0:	e0d4      	b.n	800098c <__aeabi_fadd+0x22c>
 80007e2:	0033      	movs	r3, r6
 80007e4:	1bc7      	subs	r7, r0, r7
 80007e6:	2020      	movs	r0, #32
 80007e8:	3701      	adds	r7, #1
 80007ea:	40fb      	lsrs	r3, r7
 80007ec:	1bc7      	subs	r7, r0, r7
 80007ee:	40be      	lsls	r6, r7
 80007f0:	0032      	movs	r2, r6
 80007f2:	1e56      	subs	r6, r2, #1
 80007f4:	41b2      	sbcs	r2, r6
 80007f6:	2700      	movs	r7, #0
 80007f8:	431a      	orrs	r2, r3
 80007fa:	0753      	lsls	r3, r2, #29
 80007fc:	d004      	beq.n	8000808 <__aeabi_fadd+0xa8>
 80007fe:	230f      	movs	r3, #15
 8000800:	4013      	ands	r3, r2
 8000802:	2b04      	cmp	r3, #4
 8000804:	d000      	beq.n	8000808 <__aeabi_fadd+0xa8>
 8000806:	3204      	adds	r2, #4
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d400      	bmi.n	800080e <__aeabi_fadd+0xae>
 800080c:	e09c      	b.n	8000948 <__aeabi_fadd+0x1e8>
 800080e:	1c7b      	adds	r3, r7, #1
 8000810:	2ffe      	cmp	r7, #254	; 0xfe
 8000812:	d100      	bne.n	8000816 <__aeabi_fadd+0xb6>
 8000814:	e09a      	b.n	800094c <__aeabi_fadd+0x1ec>
 8000816:	0192      	lsls	r2, r2, #6
 8000818:	0a52      	lsrs	r2, r2, #9
 800081a:	4694      	mov	ip, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	05d8      	lsls	r0, r3, #23
 8000820:	4663      	mov	r3, ip
 8000822:	07e4      	lsls	r4, r4, #31
 8000824:	4318      	orrs	r0, r3
 8000826:	4320      	orrs	r0, r4
 8000828:	bce0      	pop	{r5, r6, r7}
 800082a:	46ba      	mov	sl, r7
 800082c:	46b1      	mov	r9, r6
 800082e:	46a8      	mov	r8, r5
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	2800      	cmp	r0, #0
 8000834:	d049      	beq.n	80008ca <__aeabi_fadd+0x16a>
 8000836:	1bf3      	subs	r3, r6, r7
 8000838:	2f00      	cmp	r7, #0
 800083a:	d000      	beq.n	800083e <__aeabi_fadd+0xde>
 800083c:	e0b6      	b.n	80009ac <__aeabi_fadd+0x24c>
 800083e:	4652      	mov	r2, sl
 8000840:	2a00      	cmp	r2, #0
 8000842:	d060      	beq.n	8000906 <__aeabi_fadd+0x1a6>
 8000844:	3b01      	subs	r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0xec>
 800084a:	e0fc      	b.n	8000a46 <__aeabi_fadd+0x2e6>
 800084c:	2eff      	cmp	r6, #255	; 0xff
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0xf2>
 8000850:	e0b4      	b.n	80009bc <__aeabi_fadd+0x25c>
 8000852:	000c      	movs	r4, r1
 8000854:	4642      	mov	r2, r8
 8000856:	2a00      	cmp	r2, #0
 8000858:	d078      	beq.n	800094c <__aeabi_fadd+0x1ec>
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	03c0      	lsls	r0, r0, #15
 800085e:	4310      	orrs	r0, r2
 8000860:	0242      	lsls	r2, r0, #9
 8000862:	0a53      	lsrs	r3, r2, #9
 8000864:	469c      	mov	ip, r3
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	e7d9      	b.n	800081e <__aeabi_fadd+0xbe>
 800086a:	1bb9      	subs	r1, r7, r6
 800086c:	2900      	cmp	r1, #0
 800086e:	dd71      	ble.n	8000954 <__aeabi_fadd+0x1f4>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d03f      	beq.n	80008f4 <__aeabi_fadd+0x194>
 8000874:	2fff      	cmp	r7, #255	; 0xff
 8000876:	d0ee      	beq.n	8000856 <__aeabi_fadd+0xf6>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	04db      	lsls	r3, r3, #19
 800087c:	431d      	orrs	r5, r3
 800087e:	2201      	movs	r2, #1
 8000880:	291b      	cmp	r1, #27
 8000882:	dc07      	bgt.n	8000894 <__aeabi_fadd+0x134>
 8000884:	002a      	movs	r2, r5
 8000886:	2320      	movs	r3, #32
 8000888:	40ca      	lsrs	r2, r1
 800088a:	1a59      	subs	r1, r3, r1
 800088c:	408d      	lsls	r5, r1
 800088e:	1e6b      	subs	r3, r5, #1
 8000890:	419d      	sbcs	r5, r3
 8000892:	432a      	orrs	r2, r5
 8000894:	4452      	add	r2, sl
 8000896:	0153      	lsls	r3, r2, #5
 8000898:	d553      	bpl.n	8000942 <__aeabi_fadd+0x1e2>
 800089a:	3701      	adds	r7, #1
 800089c:	2fff      	cmp	r7, #255	; 0xff
 800089e:	d055      	beq.n	800094c <__aeabi_fadd+0x1ec>
 80008a0:	2301      	movs	r3, #1
 80008a2:	497b      	ldr	r1, [pc, #492]	; (8000a90 <__aeabi_fadd+0x330>)
 80008a4:	4013      	ands	r3, r2
 80008a6:	0852      	lsrs	r2, r2, #1
 80008a8:	400a      	ands	r2, r1
 80008aa:	431a      	orrs	r2, r3
 80008ac:	e7a5      	b.n	80007fa <__aeabi_fadd+0x9a>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d02c      	beq.n	800090c <__aeabi_fadd+0x1ac>
 80008b2:	2301      	movs	r3, #1
 80008b4:	425b      	negs	r3, r3
 80008b6:	469c      	mov	ip, r3
 80008b8:	44e1      	add	r9, ip
 80008ba:	464b      	mov	r3, r9
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x162>
 80008c0:	e0ad      	b.n	8000a1e <__aeabi_fadd+0x2be>
 80008c2:	2fff      	cmp	r7, #255	; 0xff
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x168>
 80008c6:	e76e      	b.n	80007a6 <__aeabi_fadd+0x46>
 80008c8:	e7c5      	b.n	8000856 <__aeabi_fadd+0xf6>
 80008ca:	20fe      	movs	r0, #254	; 0xfe
 80008cc:	1c7e      	adds	r6, r7, #1
 80008ce:	4230      	tst	r0, r6
 80008d0:	d160      	bne.n	8000994 <__aeabi_fadd+0x234>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fadd+0x178>
 80008d6:	e093      	b.n	8000a00 <__aeabi_fadd+0x2a0>
 80008d8:	4652      	mov	r2, sl
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x180>
 80008de:	e0b6      	b.n	8000a4e <__aeabi_fadd+0x2ee>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d09c      	beq.n	800081e <__aeabi_fadd+0xbe>
 80008e4:	1b52      	subs	r2, r2, r5
 80008e6:	0150      	lsls	r0, r2, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fadd+0x18c>
 80008ea:	e0c3      	b.n	8000a74 <__aeabi_fadd+0x314>
 80008ec:	4653      	mov	r3, sl
 80008ee:	000c      	movs	r4, r1
 80008f0:	1aea      	subs	r2, r5, r3
 80008f2:	e782      	b.n	80007fa <__aeabi_fadd+0x9a>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d009      	beq.n	800090c <__aeabi_fadd+0x1ac>
 80008f8:	3901      	subs	r1, #1
 80008fa:	2900      	cmp	r1, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x1a0>
 80008fe:	e08b      	b.n	8000a18 <__aeabi_fadd+0x2b8>
 8000900:	2fff      	cmp	r7, #255	; 0xff
 8000902:	d1bc      	bne.n	800087e <__aeabi_fadd+0x11e>
 8000904:	e7a7      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000906:	000c      	movs	r4, r1
 8000908:	4642      	mov	r2, r8
 800090a:	0037      	movs	r7, r6
 800090c:	2fff      	cmp	r7, #255	; 0xff
 800090e:	d0a2      	beq.n	8000856 <__aeabi_fadd+0xf6>
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0a53      	lsrs	r3, r2, #9
 8000914:	469c      	mov	ip, r3
 8000916:	b2fb      	uxtb	r3, r7
 8000918:	e781      	b.n	800081e <__aeabi_fadd+0xbe>
 800091a:	21fe      	movs	r1, #254	; 0xfe
 800091c:	3701      	adds	r7, #1
 800091e:	4239      	tst	r1, r7
 8000920:	d165      	bne.n	80009ee <__aeabi_fadd+0x28e>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d17e      	bne.n	8000a24 <__aeabi_fadd+0x2c4>
 8000926:	2800      	cmp	r0, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x1cc>
 800092a:	e0aa      	b.n	8000a82 <__aeabi_fadd+0x322>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x1d2>
 8000930:	e775      	b.n	800081e <__aeabi_fadd+0xbe>
 8000932:	002a      	movs	r2, r5
 8000934:	4452      	add	r2, sl
 8000936:	2700      	movs	r7, #0
 8000938:	0153      	lsls	r3, r2, #5
 800093a:	d502      	bpl.n	8000942 <__aeabi_fadd+0x1e2>
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <__aeabi_fadd+0x334>)
 800093e:	3701      	adds	r7, #1
 8000940:	401a      	ands	r2, r3
 8000942:	0753      	lsls	r3, r2, #29
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x1e8>
 8000946:	e75a      	b.n	80007fe <__aeabi_fadd+0x9e>
 8000948:	08d2      	lsrs	r2, r2, #3
 800094a:	e7df      	b.n	800090c <__aeabi_fadd+0x1ac>
 800094c:	2200      	movs	r2, #0
 800094e:	23ff      	movs	r3, #255	; 0xff
 8000950:	4694      	mov	ip, r2
 8000952:	e764      	b.n	800081e <__aeabi_fadd+0xbe>
 8000954:	2900      	cmp	r1, #0
 8000956:	d0e0      	beq.n	800091a <__aeabi_fadd+0x1ba>
 8000958:	1bf3      	subs	r3, r6, r7
 800095a:	2f00      	cmp	r7, #0
 800095c:	d03e      	beq.n	80009dc <__aeabi_fadd+0x27c>
 800095e:	2eff      	cmp	r6, #255	; 0xff
 8000960:	d100      	bne.n	8000964 <__aeabi_fadd+0x204>
 8000962:	e777      	b.n	8000854 <__aeabi_fadd+0xf4>
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	0001      	movs	r1, r0
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4311      	orrs	r1, r2
 800096c:	468a      	mov	sl, r1
 800096e:	2201      	movs	r2, #1
 8000970:	2b1b      	cmp	r3, #27
 8000972:	dc08      	bgt.n	8000986 <__aeabi_fadd+0x226>
 8000974:	4652      	mov	r2, sl
 8000976:	2120      	movs	r1, #32
 8000978:	4650      	mov	r0, sl
 800097a:	40da      	lsrs	r2, r3
 800097c:	1acb      	subs	r3, r1, r3
 800097e:	4098      	lsls	r0, r3
 8000980:	1e43      	subs	r3, r0, #1
 8000982:	4198      	sbcs	r0, r3
 8000984:	4302      	orrs	r2, r0
 8000986:	0037      	movs	r7, r6
 8000988:	1952      	adds	r2, r2, r5
 800098a:	e784      	b.n	8000896 <__aeabi_fadd+0x136>
 800098c:	4a41      	ldr	r2, [pc, #260]	; (8000a94 <__aeabi_fadd+0x334>)
 800098e:	1a3f      	subs	r7, r7, r0
 8000990:	4032      	ands	r2, r6
 8000992:	e732      	b.n	80007fa <__aeabi_fadd+0x9a>
 8000994:	4653      	mov	r3, sl
 8000996:	1b5e      	subs	r6, r3, r5
 8000998:	0173      	lsls	r3, r6, #5
 800099a:	d42d      	bmi.n	80009f8 <__aeabi_fadd+0x298>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d000      	beq.n	80009a2 <__aeabi_fadd+0x242>
 80009a0:	e717      	b.n	80007d2 <__aeabi_fadd+0x72>
 80009a2:	2200      	movs	r2, #0
 80009a4:	2400      	movs	r4, #0
 80009a6:	2300      	movs	r3, #0
 80009a8:	4694      	mov	ip, r2
 80009aa:	e738      	b.n	800081e <__aeabi_fadd+0xbe>
 80009ac:	2eff      	cmp	r6, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fadd+0x252>
 80009b0:	e74f      	b.n	8000852 <__aeabi_fadd+0xf2>
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	4650      	mov	r0, sl
 80009b6:	04d2      	lsls	r2, r2, #19
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4682      	mov	sl, r0
 80009bc:	2201      	movs	r2, #1
 80009be:	2b1b      	cmp	r3, #27
 80009c0:	dc08      	bgt.n	80009d4 <__aeabi_fadd+0x274>
 80009c2:	4652      	mov	r2, sl
 80009c4:	2420      	movs	r4, #32
 80009c6:	4650      	mov	r0, sl
 80009c8:	40da      	lsrs	r2, r3
 80009ca:	1ae3      	subs	r3, r4, r3
 80009cc:	4098      	lsls	r0, r3
 80009ce:	1e43      	subs	r3, r0, #1
 80009d0:	4198      	sbcs	r0, r3
 80009d2:	4302      	orrs	r2, r0
 80009d4:	000c      	movs	r4, r1
 80009d6:	0037      	movs	r7, r6
 80009d8:	1aaa      	subs	r2, r5, r2
 80009da:	e6f5      	b.n	80007c8 <__aeabi_fadd+0x68>
 80009dc:	2800      	cmp	r0, #0
 80009de:	d093      	beq.n	8000908 <__aeabi_fadd+0x1a8>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d04f      	beq.n	8000a86 <__aeabi_fadd+0x326>
 80009e6:	2eff      	cmp	r6, #255	; 0xff
 80009e8:	d1c1      	bne.n	800096e <__aeabi_fadd+0x20e>
 80009ea:	4642      	mov	r2, r8
 80009ec:	e733      	b.n	8000856 <__aeabi_fadd+0xf6>
 80009ee:	2fff      	cmp	r7, #255	; 0xff
 80009f0:	d0ac      	beq.n	800094c <__aeabi_fadd+0x1ec>
 80009f2:	4455      	add	r5, sl
 80009f4:	086a      	lsrs	r2, r5, #1
 80009f6:	e7a4      	b.n	8000942 <__aeabi_fadd+0x1e2>
 80009f8:	4653      	mov	r3, sl
 80009fa:	000c      	movs	r4, r1
 80009fc:	1aee      	subs	r6, r5, r3
 80009fe:	e6e8      	b.n	80007d2 <__aeabi_fadd+0x72>
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d128      	bne.n	8000a58 <__aeabi_fadd+0x2f8>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fadd+0x2ac>
 8000a0a:	e722      	b.n	8000852 <__aeabi_fadd+0xf2>
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	03db      	lsls	r3, r3, #15
 8000a10:	469c      	mov	ip, r3
 8000a12:	2400      	movs	r4, #0
 8000a14:	23ff      	movs	r3, #255	; 0xff
 8000a16:	e702      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a18:	002a      	movs	r2, r5
 8000a1a:	4452      	add	r2, sl
 8000a1c:	e73b      	b.n	8000896 <__aeabi_fadd+0x136>
 8000a1e:	4653      	mov	r3, sl
 8000a20:	1b5a      	subs	r2, r3, r5
 8000a22:	e6d1      	b.n	80007c8 <__aeabi_fadd+0x68>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fadd+0x2ca>
 8000a28:	e714      	b.n	8000854 <__aeabi_fadd+0xf4>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fadd+0x2d0>
 8000a2e:	e712      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	03db      	lsls	r3, r3, #15
 8000a34:	421a      	tst	r2, r3
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fadd+0x2da>
 8000a38:	e70d      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	4219      	tst	r1, r3
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fadd+0x2e2>
 8000a40:	e709      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a42:	4642      	mov	r2, r8
 8000a44:	e707      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a46:	000c      	movs	r4, r1
 8000a48:	0037      	movs	r7, r6
 8000a4a:	1aaa      	subs	r2, r5, r2
 8000a4c:	e6bc      	b.n	80007c8 <__aeabi_fadd+0x68>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d013      	beq.n	8000a7a <__aeabi_fadd+0x31a>
 8000a52:	000c      	movs	r4, r1
 8000a54:	46c4      	mov	ip, r8
 8000a56:	e6e2      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fadd+0x2fe>
 8000a5c:	e6fb      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	421a      	tst	r2, r3
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x308>
 8000a66:	e6f6      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	4218      	tst	r0, r3
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_fadd+0x310>
 8000a6e:	e6f2      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a70:	000c      	movs	r4, r1
 8000a72:	e6ef      	b.n	8000854 <__aeabi_fadd+0xf4>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fadd+0x31a>
 8000a78:	e763      	b.n	8000942 <__aeabi_fadd+0x1e2>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	4694      	mov	ip, r2
 8000a80:	e6cd      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a82:	46c4      	mov	ip, r8
 8000a84:	e6cb      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a86:	002a      	movs	r2, r5
 8000a88:	0037      	movs	r7, r6
 8000a8a:	4452      	add	r2, sl
 8000a8c:	e703      	b.n	8000896 <__aeabi_fadd+0x136>
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	7dffffff 	.word	0x7dffffff
 8000a94:	fbffffff 	.word	0xfbffffff

08000a98 <__aeabi_fdiv>:
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	464f      	mov	r7, r9
 8000a9c:	4646      	mov	r6, r8
 8000a9e:	46d6      	mov	lr, sl
 8000aa0:	0245      	lsls	r5, r0, #9
 8000aa2:	b5c0      	push	{r6, r7, lr}
 8000aa4:	0047      	lsls	r7, r0, #1
 8000aa6:	1c0c      	adds	r4, r1, #0
 8000aa8:	0a6d      	lsrs	r5, r5, #9
 8000aaa:	0e3f      	lsrs	r7, r7, #24
 8000aac:	0fc6      	lsrs	r6, r0, #31
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d066      	beq.n	8000b80 <__aeabi_fdiv+0xe8>
 8000ab2:	2fff      	cmp	r7, #255	; 0xff
 8000ab4:	d06c      	beq.n	8000b90 <__aeabi_fdiv+0xf8>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	00ea      	lsls	r2, r5, #3
 8000aba:	2580      	movs	r5, #128	; 0x80
 8000abc:	4699      	mov	r9, r3
 8000abe:	469a      	mov	sl, r3
 8000ac0:	04ed      	lsls	r5, r5, #19
 8000ac2:	4315      	orrs	r5, r2
 8000ac4:	3f7f      	subs	r7, #127	; 0x7f
 8000ac6:	0260      	lsls	r0, r4, #9
 8000ac8:	0061      	lsls	r1, r4, #1
 8000aca:	0a43      	lsrs	r3, r0, #9
 8000acc:	4698      	mov	r8, r3
 8000ace:	0e09      	lsrs	r1, r1, #24
 8000ad0:	0fe4      	lsrs	r4, r4, #31
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d048      	beq.n	8000b68 <__aeabi_fdiv+0xd0>
 8000ad6:	29ff      	cmp	r1, #255	; 0xff
 8000ad8:	d010      	beq.n	8000afc <__aeabi_fdiv+0x64>
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	00d8      	lsls	r0, r3, #3
 8000ade:	04d2      	lsls	r2, r2, #19
 8000ae0:	4302      	orrs	r2, r0
 8000ae2:	4690      	mov	r8, r2
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	397f      	subs	r1, #127	; 0x7f
 8000ae8:	464a      	mov	r2, r9
 8000aea:	0033      	movs	r3, r6
 8000aec:	1a7f      	subs	r7, r7, r1
 8000aee:	4302      	orrs	r2, r0
 8000af0:	496c      	ldr	r1, [pc, #432]	; (8000ca4 <__aeabi_fdiv+0x20c>)
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	588a      	ldr	r2, [r1, r2]
 8000af6:	4063      	eors	r3, r4
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4697      	mov	pc, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d16d      	bne.n	8000bdc <__aeabi_fdiv+0x144>
 8000b00:	2002      	movs	r0, #2
 8000b02:	3fff      	subs	r7, #255	; 0xff
 8000b04:	e033      	b.n	8000b6e <__aeabi_fdiv+0xd6>
 8000b06:	2300      	movs	r3, #0
 8000b08:	4698      	mov	r8, r3
 8000b0a:	0026      	movs	r6, r4
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	4682      	mov	sl, r0
 8000b10:	4653      	mov	r3, sl
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fdiv+0x80>
 8000b16:	e07f      	b.n	8000c18 <__aeabi_fdiv+0x180>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fdiv+0x86>
 8000b1c:	e094      	b.n	8000c48 <__aeabi_fdiv+0x1b0>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d017      	beq.n	8000b52 <__aeabi_fdiv+0xba>
 8000b22:	0038      	movs	r0, r7
 8000b24:	307f      	adds	r0, #127	; 0x7f
 8000b26:	2800      	cmp	r0, #0
 8000b28:	dd5f      	ble.n	8000bea <__aeabi_fdiv+0x152>
 8000b2a:	076b      	lsls	r3, r5, #29
 8000b2c:	d004      	beq.n	8000b38 <__aeabi_fdiv+0xa0>
 8000b2e:	230f      	movs	r3, #15
 8000b30:	402b      	ands	r3, r5
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d000      	beq.n	8000b38 <__aeabi_fdiv+0xa0>
 8000b36:	3504      	adds	r5, #4
 8000b38:	012b      	lsls	r3, r5, #4
 8000b3a:	d503      	bpl.n	8000b44 <__aeabi_fdiv+0xac>
 8000b3c:	0038      	movs	r0, r7
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ca8 <__aeabi_fdiv+0x210>)
 8000b40:	3080      	adds	r0, #128	; 0x80
 8000b42:	401d      	ands	r5, r3
 8000b44:	28fe      	cmp	r0, #254	; 0xfe
 8000b46:	dc67      	bgt.n	8000c18 <__aeabi_fdiv+0x180>
 8000b48:	01ad      	lsls	r5, r5, #6
 8000b4a:	0a6d      	lsrs	r5, r5, #9
 8000b4c:	b2c0      	uxtb	r0, r0
 8000b4e:	e002      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000b50:	001e      	movs	r6, r3
 8000b52:	2000      	movs	r0, #0
 8000b54:	2500      	movs	r5, #0
 8000b56:	05c0      	lsls	r0, r0, #23
 8000b58:	4328      	orrs	r0, r5
 8000b5a:	07f6      	lsls	r6, r6, #31
 8000b5c:	4330      	orrs	r0, r6
 8000b5e:	bce0      	pop	{r5, r6, r7}
 8000b60:	46ba      	mov	sl, r7
 8000b62:	46b1      	mov	r9, r6
 8000b64:	46a8      	mov	r8, r5
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d12b      	bne.n	8000bc4 <__aeabi_fdiv+0x12c>
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	464a      	mov	r2, r9
 8000b70:	0033      	movs	r3, r6
 8000b72:	494e      	ldr	r1, [pc, #312]	; (8000cac <__aeabi_fdiv+0x214>)
 8000b74:	4302      	orrs	r2, r0
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	588a      	ldr	r2, [r1, r2]
 8000b7a:	4063      	eors	r3, r4
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4697      	mov	pc, r2
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d113      	bne.n	8000bac <__aeabi_fdiv+0x114>
 8000b84:	2304      	movs	r3, #4
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e79a      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_fdiv+0x108>
 8000b94:	2308      	movs	r3, #8
 8000b96:	4699      	mov	r9, r3
 8000b98:	3b06      	subs	r3, #6
 8000b9a:	27ff      	movs	r7, #255	; 0xff
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	e792      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	3b09      	subs	r3, #9
 8000ba6:	27ff      	movs	r7, #255	; 0xff
 8000ba8:	469a      	mov	sl, r3
 8000baa:	e78c      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000bac:	0028      	movs	r0, r5
 8000bae:	f002 fb25 	bl	80031fc <__clzsi2>
 8000bb2:	2776      	movs	r7, #118	; 0x76
 8000bb4:	1f43      	subs	r3, r0, #5
 8000bb6:	409d      	lsls	r5, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	427f      	negs	r7, r7
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	1a3f      	subs	r7, r7, r0
 8000bc2:	e780      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f002 fb19 	bl	80031fc <__clzsi2>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	1f43      	subs	r3, r0, #5
 8000bce:	2176      	movs	r1, #118	; 0x76
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	4249      	negs	r1, r1
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	4690      	mov	r8, r2
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e785      	b.n	8000ae8 <__aeabi_fdiv+0x50>
 8000bdc:	21ff      	movs	r1, #255	; 0xff
 8000bde:	2003      	movs	r0, #3
 8000be0:	e782      	b.n	8000ae8 <__aeabi_fdiv+0x50>
 8000be2:	001e      	movs	r6, r3
 8000be4:	20ff      	movs	r0, #255	; 0xff
 8000be6:	2500      	movs	r5, #0
 8000be8:	e7b5      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000bea:	2301      	movs	r3, #1
 8000bec:	1a1b      	subs	r3, r3, r0
 8000bee:	2b1b      	cmp	r3, #27
 8000bf0:	dcaf      	bgt.n	8000b52 <__aeabi_fdiv+0xba>
 8000bf2:	379e      	adds	r7, #158	; 0x9e
 8000bf4:	0029      	movs	r1, r5
 8000bf6:	40bd      	lsls	r5, r7
 8000bf8:	40d9      	lsrs	r1, r3
 8000bfa:	1e6a      	subs	r2, r5, #1
 8000bfc:	4195      	sbcs	r5, r2
 8000bfe:	430d      	orrs	r5, r1
 8000c00:	076b      	lsls	r3, r5, #29
 8000c02:	d004      	beq.n	8000c0e <__aeabi_fdiv+0x176>
 8000c04:	230f      	movs	r3, #15
 8000c06:	402b      	ands	r3, r5
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fdiv+0x176>
 8000c0c:	3504      	adds	r5, #4
 8000c0e:	016b      	lsls	r3, r5, #5
 8000c10:	d544      	bpl.n	8000c9c <__aeabi_fdiv+0x204>
 8000c12:	2001      	movs	r0, #1
 8000c14:	2500      	movs	r5, #0
 8000c16:	e79e      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c18:	20ff      	movs	r0, #255	; 0xff
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	e79b      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c1e:	2580      	movs	r5, #128	; 0x80
 8000c20:	2600      	movs	r6, #0
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	03ed      	lsls	r5, r5, #15
 8000c26:	e796      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	2080      	movs	r0, #128	; 0x80
 8000c2e:	03c0      	lsls	r0, r0, #15
 8000c30:	4205      	tst	r5, r0
 8000c32:	d009      	beq.n	8000c48 <__aeabi_fdiv+0x1b0>
 8000c34:	4643      	mov	r3, r8
 8000c36:	4203      	tst	r3, r0
 8000c38:	d106      	bne.n	8000c48 <__aeabi_fdiv+0x1b0>
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	4305      	orrs	r5, r0
 8000c3e:	026d      	lsls	r5, r5, #9
 8000c40:	0026      	movs	r6, r4
 8000c42:	20ff      	movs	r0, #255	; 0xff
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	e786      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c48:	2080      	movs	r0, #128	; 0x80
 8000c4a:	03c0      	lsls	r0, r0, #15
 8000c4c:	4305      	orrs	r5, r0
 8000c4e:	026d      	lsls	r5, r5, #9
 8000c50:	20ff      	movs	r0, #255	; 0xff
 8000c52:	0a6d      	lsrs	r5, r5, #9
 8000c54:	e77f      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c56:	4641      	mov	r1, r8
 8000c58:	016a      	lsls	r2, r5, #5
 8000c5a:	0148      	lsls	r0, r1, #5
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	d219      	bcs.n	8000c94 <__aeabi_fdiv+0x1fc>
 8000c60:	211b      	movs	r1, #27
 8000c62:	2500      	movs	r5, #0
 8000c64:	3f01      	subs	r7, #1
 8000c66:	2601      	movs	r6, #1
 8000c68:	0014      	movs	r4, r2
 8000c6a:	006d      	lsls	r5, r5, #1
 8000c6c:	0052      	lsls	r2, r2, #1
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	db01      	blt.n	8000c76 <__aeabi_fdiv+0x1de>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	d801      	bhi.n	8000c7a <__aeabi_fdiv+0x1e2>
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	4335      	orrs	r5, r6
 8000c7a:	3901      	subs	r1, #1
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d1f3      	bne.n	8000c68 <__aeabi_fdiv+0x1d0>
 8000c80:	1e50      	subs	r0, r2, #1
 8000c82:	4182      	sbcs	r2, r0
 8000c84:	0038      	movs	r0, r7
 8000c86:	307f      	adds	r0, #127	; 0x7f
 8000c88:	001e      	movs	r6, r3
 8000c8a:	4315      	orrs	r5, r2
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	dd00      	ble.n	8000c92 <__aeabi_fdiv+0x1fa>
 8000c90:	e74b      	b.n	8000b2a <__aeabi_fdiv+0x92>
 8000c92:	e7aa      	b.n	8000bea <__aeabi_fdiv+0x152>
 8000c94:	211a      	movs	r1, #26
 8000c96:	2501      	movs	r5, #1
 8000c98:	1a12      	subs	r2, r2, r0
 8000c9a:	e7e4      	b.n	8000c66 <__aeabi_fdiv+0x1ce>
 8000c9c:	01ad      	lsls	r5, r5, #6
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	0a6d      	lsrs	r5, r5, #9
 8000ca2:	e758      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000ca4:	08010260 	.word	0x08010260
 8000ca8:	f7ffffff 	.word	0xf7ffffff
 8000cac:	080102a0 	.word	0x080102a0

08000cb0 <__aeabi_fmul>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	4657      	mov	r7, sl
 8000cb4:	464e      	mov	r6, r9
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	46de      	mov	lr, fp
 8000cba:	0244      	lsls	r4, r0, #9
 8000cbc:	b5e0      	push	{r5, r6, r7, lr}
 8000cbe:	0045      	lsls	r5, r0, #1
 8000cc0:	1c0f      	adds	r7, r1, #0
 8000cc2:	0a64      	lsrs	r4, r4, #9
 8000cc4:	0e2d      	lsrs	r5, r5, #24
 8000cc6:	0fc6      	lsrs	r6, r0, #31
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d047      	beq.n	8000d5c <__aeabi_fmul+0xac>
 8000ccc:	2dff      	cmp	r5, #255	; 0xff
 8000cce:	d04d      	beq.n	8000d6c <__aeabi_fmul+0xbc>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	469b      	mov	fp, r3
 8000cd8:	00e4      	lsls	r4, r4, #3
 8000cda:	04c0      	lsls	r0, r0, #19
 8000cdc:	4304      	orrs	r4, r0
 8000cde:	3d7f      	subs	r5, #127	; 0x7f
 8000ce0:	0278      	lsls	r0, r7, #9
 8000ce2:	0a43      	lsrs	r3, r0, #9
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	007a      	lsls	r2, r7, #1
 8000ce8:	0ffb      	lsrs	r3, r7, #31
 8000cea:	4698      	mov	r8, r3
 8000cec:	0e12      	lsrs	r2, r2, #24
 8000cee:	464b      	mov	r3, r9
 8000cf0:	d044      	beq.n	8000d7c <__aeabi_fmul+0xcc>
 8000cf2:	2aff      	cmp	r2, #255	; 0xff
 8000cf4:	d011      	beq.n	8000d1a <__aeabi_fmul+0x6a>
 8000cf6:	00d8      	lsls	r0, r3, #3
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	4303      	orrs	r3, r0
 8000cfe:	4699      	mov	r9, r3
 8000d00:	2000      	movs	r0, #0
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	18ad      	adds	r5, r5, r2
 8000d06:	4647      	mov	r7, r8
 8000d08:	4653      	mov	r3, sl
 8000d0a:	4077      	eors	r7, r6
 8000d0c:	1c69      	adds	r1, r5, #1
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d83f      	bhi.n	8000d92 <__aeabi_fmul+0xe2>
 8000d12:	4a72      	ldr	r2, [pc, #456]	; (8000edc <__aeabi_fmul+0x22c>)
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	58d3      	ldr	r3, [r2, r3]
 8000d18:	469f      	mov	pc, r3
 8000d1a:	35ff      	adds	r5, #255	; 0xff
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_fmul+0x72>
 8000d20:	e079      	b.n	8000e16 <__aeabi_fmul+0x166>
 8000d22:	4652      	mov	r2, sl
 8000d24:	2302      	movs	r3, #2
 8000d26:	431a      	orrs	r2, r3
 8000d28:	4692      	mov	sl, r2
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	e7eb      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000d2e:	4647      	mov	r7, r8
 8000d30:	464c      	mov	r4, r9
 8000d32:	4683      	mov	fp, r0
 8000d34:	465b      	mov	r3, fp
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d028      	beq.n	8000d8c <__aeabi_fmul+0xdc>
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fmul+0x90>
 8000d3e:	e0c6      	b.n	8000ece <__aeabi_fmul+0x21e>
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d14f      	bne.n	8000de4 <__aeabi_fmul+0x134>
 8000d44:	2000      	movs	r0, #0
 8000d46:	2400      	movs	r4, #0
 8000d48:	05c0      	lsls	r0, r0, #23
 8000d4a:	07ff      	lsls	r7, r7, #31
 8000d4c:	4320      	orrs	r0, r4
 8000d4e:	4338      	orrs	r0, r7
 8000d50:	bcf0      	pop	{r4, r5, r6, r7}
 8000d52:	46bb      	mov	fp, r7
 8000d54:	46b2      	mov	sl, r6
 8000d56:	46a9      	mov	r9, r5
 8000d58:	46a0      	mov	r8, r4
 8000d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d5c:	2c00      	cmp	r4, #0
 8000d5e:	d171      	bne.n	8000e44 <__aeabi_fmul+0x194>
 8000d60:	2304      	movs	r3, #4
 8000d62:	469a      	mov	sl, r3
 8000d64:	3b03      	subs	r3, #3
 8000d66:	2500      	movs	r5, #0
 8000d68:	469b      	mov	fp, r3
 8000d6a:	e7b9      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d163      	bne.n	8000e38 <__aeabi_fmul+0x188>
 8000d70:	2308      	movs	r3, #8
 8000d72:	469a      	mov	sl, r3
 8000d74:	3b06      	subs	r3, #6
 8000d76:	25ff      	movs	r5, #255	; 0xff
 8000d78:	469b      	mov	fp, r3
 8000d7a:	e7b1      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d150      	bne.n	8000e22 <__aeabi_fmul+0x172>
 8000d80:	4652      	mov	r2, sl
 8000d82:	3301      	adds	r3, #1
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4692      	mov	sl, r2
 8000d88:	2001      	movs	r0, #1
 8000d8a:	e7bc      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000d8c:	20ff      	movs	r0, #255	; 0xff
 8000d8e:	2400      	movs	r4, #0
 8000d90:	e7da      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000d92:	4648      	mov	r0, r9
 8000d94:	0c26      	lsrs	r6, r4, #16
 8000d96:	0424      	lsls	r4, r4, #16
 8000d98:	0c22      	lsrs	r2, r4, #16
 8000d9a:	0404      	lsls	r4, r0, #16
 8000d9c:	0c24      	lsrs	r4, r4, #16
 8000d9e:	464b      	mov	r3, r9
 8000da0:	0020      	movs	r0, r4
 8000da2:	0c1b      	lsrs	r3, r3, #16
 8000da4:	4350      	muls	r0, r2
 8000da6:	4374      	muls	r4, r6
 8000da8:	435a      	muls	r2, r3
 8000daa:	435e      	muls	r6, r3
 8000dac:	1912      	adds	r2, r2, r4
 8000dae:	0c03      	lsrs	r3, r0, #16
 8000db0:	189b      	adds	r3, r3, r2
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d903      	bls.n	8000dbe <__aeabi_fmul+0x10e>
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	0252      	lsls	r2, r2, #9
 8000dba:	4694      	mov	ip, r2
 8000dbc:	4466      	add	r6, ip
 8000dbe:	0400      	lsls	r0, r0, #16
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	0c00      	lsrs	r0, r0, #16
 8000dc4:	1812      	adds	r2, r2, r0
 8000dc6:	0194      	lsls	r4, r2, #6
 8000dc8:	1e60      	subs	r0, r4, #1
 8000dca:	4184      	sbcs	r4, r0
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	0e92      	lsrs	r2, r2, #26
 8000dd0:	199b      	adds	r3, r3, r6
 8000dd2:	4314      	orrs	r4, r2
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	d572      	bpl.n	8000ec2 <__aeabi_fmul+0x212>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	0863      	lsrs	r3, r4, #1
 8000de0:	4004      	ands	r4, r0
 8000de2:	431c      	orrs	r4, r3
 8000de4:	0008      	movs	r0, r1
 8000de6:	307f      	adds	r0, #127	; 0x7f
 8000de8:	2800      	cmp	r0, #0
 8000dea:	dd3c      	ble.n	8000e66 <__aeabi_fmul+0x1b6>
 8000dec:	0763      	lsls	r3, r4, #29
 8000dee:	d004      	beq.n	8000dfa <__aeabi_fmul+0x14a>
 8000df0:	230f      	movs	r3, #15
 8000df2:	4023      	ands	r3, r4
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fmul+0x14a>
 8000df8:	3404      	adds	r4, #4
 8000dfa:	0123      	lsls	r3, r4, #4
 8000dfc:	d503      	bpl.n	8000e06 <__aeabi_fmul+0x156>
 8000dfe:	3180      	adds	r1, #128	; 0x80
 8000e00:	0008      	movs	r0, r1
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <__aeabi_fmul+0x230>)
 8000e04:	401c      	ands	r4, r3
 8000e06:	28fe      	cmp	r0, #254	; 0xfe
 8000e08:	dcc0      	bgt.n	8000d8c <__aeabi_fmul+0xdc>
 8000e0a:	01a4      	lsls	r4, r4, #6
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	b2c0      	uxtb	r0, r0
 8000e10:	e79a      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000e12:	0037      	movs	r7, r6
 8000e14:	e78e      	b.n	8000d34 <__aeabi_fmul+0x84>
 8000e16:	4652      	mov	r2, sl
 8000e18:	2303      	movs	r3, #3
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	4692      	mov	sl, r2
 8000e1e:	2003      	movs	r0, #3
 8000e20:	e771      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000e22:	4648      	mov	r0, r9
 8000e24:	f002 f9ea 	bl	80031fc <__clzsi2>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	1f43      	subs	r3, r0, #5
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	1a2d      	subs	r5, r5, r0
 8000e30:	4691      	mov	r9, r2
 8000e32:	2000      	movs	r0, #0
 8000e34:	3d76      	subs	r5, #118	; 0x76
 8000e36:	e766      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000e38:	230c      	movs	r3, #12
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	3b09      	subs	r3, #9
 8000e3e:	25ff      	movs	r5, #255	; 0xff
 8000e40:	469b      	mov	fp, r3
 8000e42:	e74d      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000e44:	0020      	movs	r0, r4
 8000e46:	f002 f9d9 	bl	80031fc <__clzsi2>
 8000e4a:	2576      	movs	r5, #118	; 0x76
 8000e4c:	1f43      	subs	r3, r0, #5
 8000e4e:	409c      	lsls	r4, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	426d      	negs	r5, r5
 8000e54:	469a      	mov	sl, r3
 8000e56:	469b      	mov	fp, r3
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	e741      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000e5c:	2480      	movs	r4, #128	; 0x80
 8000e5e:	2700      	movs	r7, #0
 8000e60:	20ff      	movs	r0, #255	; 0xff
 8000e62:	03e4      	lsls	r4, r4, #15
 8000e64:	e770      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000e66:	2301      	movs	r3, #1
 8000e68:	1a1b      	subs	r3, r3, r0
 8000e6a:	2b1b      	cmp	r3, #27
 8000e6c:	dd00      	ble.n	8000e70 <__aeabi_fmul+0x1c0>
 8000e6e:	e769      	b.n	8000d44 <__aeabi_fmul+0x94>
 8000e70:	319e      	adds	r1, #158	; 0x9e
 8000e72:	0020      	movs	r0, r4
 8000e74:	408c      	lsls	r4, r1
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	1e63      	subs	r3, r4, #1
 8000e7a:	419c      	sbcs	r4, r3
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	0763      	lsls	r3, r4, #29
 8000e80:	d004      	beq.n	8000e8c <__aeabi_fmul+0x1dc>
 8000e82:	230f      	movs	r3, #15
 8000e84:	4023      	ands	r3, r4
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fmul+0x1dc>
 8000e8a:	3404      	adds	r4, #4
 8000e8c:	0163      	lsls	r3, r4, #5
 8000e8e:	d51a      	bpl.n	8000ec6 <__aeabi_fmul+0x216>
 8000e90:	2001      	movs	r0, #1
 8000e92:	2400      	movs	r4, #0
 8000e94:	e758      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000e96:	2080      	movs	r0, #128	; 0x80
 8000e98:	03c0      	lsls	r0, r0, #15
 8000e9a:	4204      	tst	r4, r0
 8000e9c:	d009      	beq.n	8000eb2 <__aeabi_fmul+0x202>
 8000e9e:	464b      	mov	r3, r9
 8000ea0:	4203      	tst	r3, r0
 8000ea2:	d106      	bne.n	8000eb2 <__aeabi_fmul+0x202>
 8000ea4:	464c      	mov	r4, r9
 8000ea6:	4304      	orrs	r4, r0
 8000ea8:	0264      	lsls	r4, r4, #9
 8000eaa:	4647      	mov	r7, r8
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	0a64      	lsrs	r4, r4, #9
 8000eb0:	e74a      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000eb2:	2080      	movs	r0, #128	; 0x80
 8000eb4:	03c0      	lsls	r0, r0, #15
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	0264      	lsls	r4, r4, #9
 8000eba:	0037      	movs	r7, r6
 8000ebc:	20ff      	movs	r0, #255	; 0xff
 8000ebe:	0a64      	lsrs	r4, r4, #9
 8000ec0:	e742      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000ec2:	0029      	movs	r1, r5
 8000ec4:	e78e      	b.n	8000de4 <__aeabi_fmul+0x134>
 8000ec6:	01a4      	lsls	r4, r4, #6
 8000ec8:	2000      	movs	r0, #0
 8000eca:	0a64      	lsrs	r4, r4, #9
 8000ecc:	e73c      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000ece:	2080      	movs	r0, #128	; 0x80
 8000ed0:	03c0      	lsls	r0, r0, #15
 8000ed2:	4304      	orrs	r4, r0
 8000ed4:	0264      	lsls	r4, r4, #9
 8000ed6:	20ff      	movs	r0, #255	; 0xff
 8000ed8:	0a64      	lsrs	r4, r4, #9
 8000eda:	e735      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000edc:	080102e0 	.word	0x080102e0
 8000ee0:	f7ffffff 	.word	0xf7ffffff

08000ee4 <__aeabi_fsub>:
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	4646      	mov	r6, r8
 8000ee8:	46d6      	mov	lr, sl
 8000eea:	464f      	mov	r7, r9
 8000eec:	0243      	lsls	r3, r0, #9
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	00da      	lsls	r2, r3, #3
 8000ef2:	4694      	mov	ip, r2
 8000ef4:	024a      	lsls	r2, r1, #9
 8000ef6:	b5c0      	push	{r6, r7, lr}
 8000ef8:	0044      	lsls	r4, r0, #1
 8000efa:	0a56      	lsrs	r6, r2, #9
 8000efc:	1c05      	adds	r5, r0, #0
 8000efe:	46b0      	mov	r8, r6
 8000f00:	0e24      	lsrs	r4, r4, #24
 8000f02:	004e      	lsls	r6, r1, #1
 8000f04:	0992      	lsrs	r2, r2, #6
 8000f06:	001f      	movs	r7, r3
 8000f08:	0020      	movs	r0, r4
 8000f0a:	4692      	mov	sl, r2
 8000f0c:	0fed      	lsrs	r5, r5, #31
 8000f0e:	0e36      	lsrs	r6, r6, #24
 8000f10:	0fc9      	lsrs	r1, r1, #31
 8000f12:	2eff      	cmp	r6, #255	; 0xff
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x34>
 8000f16:	e07f      	b.n	8001018 <__aeabi_fsub+0x134>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4051      	eors	r1, r2
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d051      	beq.n	8000fc4 <__aeabi_fsub+0xe0>
 8000f20:	1ba2      	subs	r2, r4, r6
 8000f22:	4691      	mov	r9, r2
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0x46>
 8000f28:	e07e      	b.n	8001028 <__aeabi_fsub+0x144>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x4c>
 8000f2e:	e099      	b.n	8001064 <__aeabi_fsub+0x180>
 8000f30:	2cff      	cmp	r4, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x52>
 8000f34:	e08c      	b.n	8001050 <__aeabi_fsub+0x16c>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4652      	mov	r2, sl
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4692      	mov	sl, r2
 8000f40:	464a      	mov	r2, r9
 8000f42:	2301      	movs	r3, #1
 8000f44:	2a1b      	cmp	r2, #27
 8000f46:	dc08      	bgt.n	8000f5a <__aeabi_fsub+0x76>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	40d3      	lsrs	r3, r2
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4652      	mov	r2, sl
 8000f52:	408a      	lsls	r2, r1
 8000f54:	1e51      	subs	r1, r2, #1
 8000f56:	418a      	sbcs	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	015a      	lsls	r2, r3, #5
 8000f60:	d400      	bmi.n	8000f64 <__aeabi_fsub+0x80>
 8000f62:	e0f3      	b.n	800114c <__aeabi_fsub+0x268>
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	099e      	lsrs	r6, r3, #6
 8000f68:	0030      	movs	r0, r6
 8000f6a:	f002 f947 	bl	80031fc <__clzsi2>
 8000f6e:	3805      	subs	r0, #5
 8000f70:	4086      	lsls	r6, r0
 8000f72:	4284      	cmp	r4, r0
 8000f74:	dd00      	ble.n	8000f78 <__aeabi_fsub+0x94>
 8000f76:	e0f7      	b.n	8001168 <__aeabi_fsub+0x284>
 8000f78:	0032      	movs	r2, r6
 8000f7a:	1b04      	subs	r4, r0, r4
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	3401      	adds	r4, #1
 8000f80:	40e2      	lsrs	r2, r4
 8000f82:	1b04      	subs	r4, r0, r4
 8000f84:	40a6      	lsls	r6, r4
 8000f86:	0033      	movs	r3, r6
 8000f88:	1e5e      	subs	r6, r3, #1
 8000f8a:	41b3      	sbcs	r3, r6
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	075a      	lsls	r2, r3, #29
 8000f92:	d004      	beq.n	8000f9e <__aeabi_fsub+0xba>
 8000f94:	220f      	movs	r2, #15
 8000f96:	401a      	ands	r2, r3
 8000f98:	2a04      	cmp	r2, #4
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fsub+0xba>
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	015a      	lsls	r2, r3, #5
 8000fa0:	d400      	bmi.n	8000fa4 <__aeabi_fsub+0xc0>
 8000fa2:	e0d6      	b.n	8001152 <__aeabi_fsub+0x26e>
 8000fa4:	1c62      	adds	r2, r4, #1
 8000fa6:	2cfe      	cmp	r4, #254	; 0xfe
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0xc8>
 8000faa:	e0da      	b.n	8001162 <__aeabi_fsub+0x27e>
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	0a5f      	lsrs	r7, r3, #9
 8000fb0:	b2d0      	uxtb	r0, r2
 8000fb2:	05c0      	lsls	r0, r0, #23
 8000fb4:	4338      	orrs	r0, r7
 8000fb6:	07ed      	lsls	r5, r5, #31
 8000fb8:	4328      	orrs	r0, r5
 8000fba:	bce0      	pop	{r5, r6, r7}
 8000fbc:	46ba      	mov	sl, r7
 8000fbe:	46b1      	mov	r9, r6
 8000fc0:	46a8      	mov	r8, r5
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc4:	1ba2      	subs	r2, r4, r6
 8000fc6:	4691      	mov	r9, r2
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	dd63      	ble.n	8001094 <__aeabi_fsub+0x1b0>
 8000fcc:	2e00      	cmp	r6, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0xee>
 8000fd0:	e099      	b.n	8001106 <__aeabi_fsub+0x222>
 8000fd2:	2cff      	cmp	r4, #255	; 0xff
 8000fd4:	d03c      	beq.n	8001050 <__aeabi_fsub+0x16c>
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	4652      	mov	r2, sl
 8000fda:	04db      	lsls	r3, r3, #19
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4692      	mov	sl, r2
 8000fe0:	464a      	mov	r2, r9
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2a1b      	cmp	r2, #27
 8000fe6:	dc08      	bgt.n	8000ffa <__aeabi_fsub+0x116>
 8000fe8:	4653      	mov	r3, sl
 8000fea:	2120      	movs	r1, #32
 8000fec:	40d3      	lsrs	r3, r2
 8000fee:	1a89      	subs	r1, r1, r2
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	408a      	lsls	r2, r1
 8000ff4:	1e51      	subs	r1, r2, #1
 8000ff6:	418a      	sbcs	r2, r1
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	015a      	lsls	r2, r3, #5
 8000ffe:	d400      	bmi.n	8001002 <__aeabi_fsub+0x11e>
 8001000:	e0a4      	b.n	800114c <__aeabi_fsub+0x268>
 8001002:	3401      	adds	r4, #1
 8001004:	2cff      	cmp	r4, #255	; 0xff
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x126>
 8001008:	e0ab      	b.n	8001162 <__aeabi_fsub+0x27e>
 800100a:	2201      	movs	r2, #1
 800100c:	4997      	ldr	r1, [pc, #604]	; (800126c <__aeabi_fsub+0x388>)
 800100e:	401a      	ands	r2, r3
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	400b      	ands	r3, r1
 8001014:	4313      	orrs	r3, r2
 8001016:	e7bb      	b.n	8000f90 <__aeabi_fsub+0xac>
 8001018:	2a00      	cmp	r2, #0
 800101a:	d032      	beq.n	8001082 <__aeabi_fsub+0x19e>
 800101c:	428d      	cmp	r5, r1
 800101e:	d035      	beq.n	800108c <__aeabi_fsub+0x1a8>
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	4252      	negs	r2, r2
 8001024:	4691      	mov	r9, r2
 8001026:	44a1      	add	r9, r4
 8001028:	464a      	mov	r2, r9
 800102a:	2a00      	cmp	r2, #0
 800102c:	d051      	beq.n	80010d2 <__aeabi_fsub+0x1ee>
 800102e:	1b30      	subs	r0, r6, r4
 8001030:	2c00      	cmp	r4, #0
 8001032:	d000      	beq.n	8001036 <__aeabi_fsub+0x152>
 8001034:	e09c      	b.n	8001170 <__aeabi_fsub+0x28c>
 8001036:	4663      	mov	r3, ip
 8001038:	2b00      	cmp	r3, #0
 800103a:	d100      	bne.n	800103e <__aeabi_fsub+0x15a>
 800103c:	e0df      	b.n	80011fe <__aeabi_fsub+0x31a>
 800103e:	3801      	subs	r0, #1
 8001040:	2800      	cmp	r0, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x162>
 8001044:	e0f7      	b.n	8001236 <__aeabi_fsub+0x352>
 8001046:	2eff      	cmp	r6, #255	; 0xff
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x168>
 800104a:	e099      	b.n	8001180 <__aeabi_fsub+0x29c>
 800104c:	000d      	movs	r5, r1
 800104e:	4643      	mov	r3, r8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x172>
 8001054:	e085      	b.n	8001162 <__aeabi_fsub+0x27e>
 8001056:	2780      	movs	r7, #128	; 0x80
 8001058:	03ff      	lsls	r7, r7, #15
 800105a:	431f      	orrs	r7, r3
 800105c:	027f      	lsls	r7, r7, #9
 800105e:	20ff      	movs	r0, #255	; 0xff
 8001060:	0a7f      	lsrs	r7, r7, #9
 8001062:	e7a6      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001064:	4652      	mov	r2, sl
 8001066:	2a00      	cmp	r2, #0
 8001068:	d074      	beq.n	8001154 <__aeabi_fsub+0x270>
 800106a:	2201      	movs	r2, #1
 800106c:	4252      	negs	r2, r2
 800106e:	4690      	mov	r8, r2
 8001070:	44c1      	add	r9, r8
 8001072:	464a      	mov	r2, r9
 8001074:	2a00      	cmp	r2, #0
 8001076:	d100      	bne.n	800107a <__aeabi_fsub+0x196>
 8001078:	e0c8      	b.n	800120c <__aeabi_fsub+0x328>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x19c>
 800107e:	e75f      	b.n	8000f40 <__aeabi_fsub+0x5c>
 8001080:	e7e6      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001082:	2201      	movs	r2, #1
 8001084:	4051      	eors	r1, r2
 8001086:	42a9      	cmp	r1, r5
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x1a8>
 800108a:	e749      	b.n	8000f20 <__aeabi_fsub+0x3c>
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	4252      	negs	r2, r2
 8001090:	4691      	mov	r9, r2
 8001092:	44a1      	add	r9, r4
 8001094:	464a      	mov	r2, r9
 8001096:	2a00      	cmp	r2, #0
 8001098:	d043      	beq.n	8001122 <__aeabi_fsub+0x23e>
 800109a:	1b31      	subs	r1, r6, r4
 800109c:	2c00      	cmp	r4, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x1be>
 80010a0:	e08c      	b.n	80011bc <__aeabi_fsub+0x2d8>
 80010a2:	2eff      	cmp	r6, #255	; 0xff
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x1c4>
 80010a6:	e092      	b.n	80011ce <__aeabi_fsub+0x2ea>
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	4662      	mov	r2, ip
 80010ac:	04db      	lsls	r3, r3, #19
 80010ae:	431a      	orrs	r2, r3
 80010b0:	4694      	mov	ip, r2
 80010b2:	2301      	movs	r3, #1
 80010b4:	291b      	cmp	r1, #27
 80010b6:	dc09      	bgt.n	80010cc <__aeabi_fsub+0x1e8>
 80010b8:	2020      	movs	r0, #32
 80010ba:	4663      	mov	r3, ip
 80010bc:	4662      	mov	r2, ip
 80010be:	40cb      	lsrs	r3, r1
 80010c0:	1a41      	subs	r1, r0, r1
 80010c2:	408a      	lsls	r2, r1
 80010c4:	0011      	movs	r1, r2
 80010c6:	1e48      	subs	r0, r1, #1
 80010c8:	4181      	sbcs	r1, r0
 80010ca:	430b      	orrs	r3, r1
 80010cc:	0034      	movs	r4, r6
 80010ce:	4453      	add	r3, sl
 80010d0:	e794      	b.n	8000ffc <__aeabi_fsub+0x118>
 80010d2:	22fe      	movs	r2, #254	; 0xfe
 80010d4:	1c66      	adds	r6, r4, #1
 80010d6:	4232      	tst	r2, r6
 80010d8:	d164      	bne.n	80011a4 <__aeabi_fsub+0x2c0>
 80010da:	2c00      	cmp	r4, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_fsub+0x1fc>
 80010de:	e082      	b.n	80011e6 <__aeabi_fsub+0x302>
 80010e0:	4663      	mov	r3, ip
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x204>
 80010e6:	e0ab      	b.n	8001240 <__aeabi_fsub+0x35c>
 80010e8:	4653      	mov	r3, sl
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x20c>
 80010ee:	e760      	b.n	8000fb2 <__aeabi_fsub+0xce>
 80010f0:	4663      	mov	r3, ip
 80010f2:	4652      	mov	r2, sl
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	015a      	lsls	r2, r3, #5
 80010f8:	d400      	bmi.n	80010fc <__aeabi_fsub+0x218>
 80010fa:	e0aa      	b.n	8001252 <__aeabi_fsub+0x36e>
 80010fc:	4663      	mov	r3, ip
 80010fe:	4652      	mov	r2, sl
 8001100:	000d      	movs	r5, r1
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	e744      	b.n	8000f90 <__aeabi_fsub+0xac>
 8001106:	4652      	mov	r2, sl
 8001108:	2a00      	cmp	r2, #0
 800110a:	d023      	beq.n	8001154 <__aeabi_fsub+0x270>
 800110c:	2201      	movs	r2, #1
 800110e:	4252      	negs	r2, r2
 8001110:	4690      	mov	r8, r2
 8001112:	44c1      	add	r9, r8
 8001114:	464a      	mov	r2, r9
 8001116:	2a00      	cmp	r2, #0
 8001118:	d075      	beq.n	8001206 <__aeabi_fsub+0x322>
 800111a:	2cff      	cmp	r4, #255	; 0xff
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x23c>
 800111e:	e75f      	b.n	8000fe0 <__aeabi_fsub+0xfc>
 8001120:	e796      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001122:	26fe      	movs	r6, #254	; 0xfe
 8001124:	3401      	adds	r4, #1
 8001126:	4226      	tst	r6, r4
 8001128:	d153      	bne.n	80011d2 <__aeabi_fsub+0x2ee>
 800112a:	2800      	cmp	r0, #0
 800112c:	d172      	bne.n	8001214 <__aeabi_fsub+0x330>
 800112e:	4663      	mov	r3, ip
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_fsub+0x252>
 8001134:	e093      	b.n	800125e <__aeabi_fsub+0x37a>
 8001136:	4653      	mov	r3, sl
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x25a>
 800113c:	e739      	b.n	8000fb2 <__aeabi_fsub+0xce>
 800113e:	4463      	add	r3, ip
 8001140:	2400      	movs	r4, #0
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	d502      	bpl.n	800114c <__aeabi_fsub+0x268>
 8001146:	4a4a      	ldr	r2, [pc, #296]	; (8001270 <__aeabi_fsub+0x38c>)
 8001148:	3401      	adds	r4, #1
 800114a:	4013      	ands	r3, r2
 800114c:	075a      	lsls	r2, r3, #29
 800114e:	d000      	beq.n	8001152 <__aeabi_fsub+0x26e>
 8001150:	e720      	b.n	8000f94 <__aeabi_fsub+0xb0>
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	2cff      	cmp	r4, #255	; 0xff
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x276>
 8001158:	e77a      	b.n	8001050 <__aeabi_fsub+0x16c>
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	0a5f      	lsrs	r7, r3, #9
 800115e:	b2e0      	uxtb	r0, r4
 8001160:	e727      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001162:	20ff      	movs	r0, #255	; 0xff
 8001164:	2700      	movs	r7, #0
 8001166:	e724      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <__aeabi_fsub+0x38c>)
 800116a:	1a24      	subs	r4, r4, r0
 800116c:	4033      	ands	r3, r6
 800116e:	e70f      	b.n	8000f90 <__aeabi_fsub+0xac>
 8001170:	2eff      	cmp	r6, #255	; 0xff
 8001172:	d100      	bne.n	8001176 <__aeabi_fsub+0x292>
 8001174:	e76a      	b.n	800104c <__aeabi_fsub+0x168>
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	4662      	mov	r2, ip
 800117a:	04db      	lsls	r3, r3, #19
 800117c:	431a      	orrs	r2, r3
 800117e:	4694      	mov	ip, r2
 8001180:	2301      	movs	r3, #1
 8001182:	281b      	cmp	r0, #27
 8001184:	dc09      	bgt.n	800119a <__aeabi_fsub+0x2b6>
 8001186:	2420      	movs	r4, #32
 8001188:	4663      	mov	r3, ip
 800118a:	4662      	mov	r2, ip
 800118c:	40c3      	lsrs	r3, r0
 800118e:	1a20      	subs	r0, r4, r0
 8001190:	4082      	lsls	r2, r0
 8001192:	0010      	movs	r0, r2
 8001194:	1e44      	subs	r4, r0, #1
 8001196:	41a0      	sbcs	r0, r4
 8001198:	4303      	orrs	r3, r0
 800119a:	4652      	mov	r2, sl
 800119c:	000d      	movs	r5, r1
 800119e:	0034      	movs	r4, r6
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	e6dc      	b.n	8000f5e <__aeabi_fsub+0x7a>
 80011a4:	4663      	mov	r3, ip
 80011a6:	4652      	mov	r2, sl
 80011a8:	1a9e      	subs	r6, r3, r2
 80011aa:	0173      	lsls	r3, r6, #5
 80011ac:	d417      	bmi.n	80011de <__aeabi_fsub+0x2fa>
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d000      	beq.n	80011b4 <__aeabi_fsub+0x2d0>
 80011b2:	e6d9      	b.n	8000f68 <__aeabi_fsub+0x84>
 80011b4:	2500      	movs	r5, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	2700      	movs	r7, #0
 80011ba:	e6fa      	b.n	8000fb2 <__aeabi_fsub+0xce>
 80011bc:	4663      	mov	r3, ip
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d044      	beq.n	800124c <__aeabi_fsub+0x368>
 80011c2:	3901      	subs	r1, #1
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d04c      	beq.n	8001262 <__aeabi_fsub+0x37e>
 80011c8:	2eff      	cmp	r6, #255	; 0xff
 80011ca:	d000      	beq.n	80011ce <__aeabi_fsub+0x2ea>
 80011cc:	e771      	b.n	80010b2 <__aeabi_fsub+0x1ce>
 80011ce:	4643      	mov	r3, r8
 80011d0:	e73e      	b.n	8001050 <__aeabi_fsub+0x16c>
 80011d2:	2cff      	cmp	r4, #255	; 0xff
 80011d4:	d0c5      	beq.n	8001162 <__aeabi_fsub+0x27e>
 80011d6:	4652      	mov	r2, sl
 80011d8:	4462      	add	r2, ip
 80011da:	0853      	lsrs	r3, r2, #1
 80011dc:	e7b6      	b.n	800114c <__aeabi_fsub+0x268>
 80011de:	4663      	mov	r3, ip
 80011e0:	000d      	movs	r5, r1
 80011e2:	1ad6      	subs	r6, r2, r3
 80011e4:	e6c0      	b.n	8000f68 <__aeabi_fsub+0x84>
 80011e6:	4662      	mov	r2, ip
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d116      	bne.n	800121a <__aeabi_fsub+0x336>
 80011ec:	4653      	mov	r3, sl
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d000      	beq.n	80011f4 <__aeabi_fsub+0x310>
 80011f2:	e72b      	b.n	800104c <__aeabi_fsub+0x168>
 80011f4:	2780      	movs	r7, #128	; 0x80
 80011f6:	2500      	movs	r5, #0
 80011f8:	20ff      	movs	r0, #255	; 0xff
 80011fa:	03ff      	lsls	r7, r7, #15
 80011fc:	e6d9      	b.n	8000fb2 <__aeabi_fsub+0xce>
 80011fe:	000d      	movs	r5, r1
 8001200:	4643      	mov	r3, r8
 8001202:	0034      	movs	r4, r6
 8001204:	e7a6      	b.n	8001154 <__aeabi_fsub+0x270>
 8001206:	4653      	mov	r3, sl
 8001208:	4463      	add	r3, ip
 800120a:	e6f7      	b.n	8000ffc <__aeabi_fsub+0x118>
 800120c:	4663      	mov	r3, ip
 800120e:	4652      	mov	r2, sl
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	e6a4      	b.n	8000f5e <__aeabi_fsub+0x7a>
 8001214:	4662      	mov	r2, ip
 8001216:	2a00      	cmp	r2, #0
 8001218:	d0d9      	beq.n	80011ce <__aeabi_fsub+0x2ea>
 800121a:	4652      	mov	r2, sl
 800121c:	2a00      	cmp	r2, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x33e>
 8001220:	e716      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	03d2      	lsls	r2, r2, #15
 8001226:	4213      	tst	r3, r2
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x348>
 800122a:	e711      	b.n	8001050 <__aeabi_fsub+0x16c>
 800122c:	4640      	mov	r0, r8
 800122e:	4210      	tst	r0, r2
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0x350>
 8001232:	e70d      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001234:	e70a      	b.n	800104c <__aeabi_fsub+0x168>
 8001236:	4652      	mov	r2, sl
 8001238:	000d      	movs	r5, r1
 800123a:	0034      	movs	r4, r6
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	e68e      	b.n	8000f5e <__aeabi_fsub+0x7a>
 8001240:	4653      	mov	r3, sl
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <__aeabi_fsub+0x374>
 8001246:	000d      	movs	r5, r1
 8001248:	4647      	mov	r7, r8
 800124a:	e6b2      	b.n	8000fb2 <__aeabi_fsub+0xce>
 800124c:	4643      	mov	r3, r8
 800124e:	0034      	movs	r4, r6
 8001250:	e780      	b.n	8001154 <__aeabi_fsub+0x270>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x374>
 8001256:	e779      	b.n	800114c <__aeabi_fsub+0x268>
 8001258:	2500      	movs	r5, #0
 800125a:	2700      	movs	r7, #0
 800125c:	e6a9      	b.n	8000fb2 <__aeabi_fsub+0xce>
 800125e:	4647      	mov	r7, r8
 8001260:	e6a7      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001262:	4653      	mov	r3, sl
 8001264:	0034      	movs	r4, r6
 8001266:	4463      	add	r3, ip
 8001268:	e6c8      	b.n	8000ffc <__aeabi_fsub+0x118>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	7dffffff 	.word	0x7dffffff
 8001270:	fbffffff 	.word	0xfbffffff

08001274 <__aeabi_f2iz>:
 8001274:	0241      	lsls	r1, r0, #9
 8001276:	0042      	lsls	r2, r0, #1
 8001278:	0fc3      	lsrs	r3, r0, #31
 800127a:	0a49      	lsrs	r1, r1, #9
 800127c:	2000      	movs	r0, #0
 800127e:	0e12      	lsrs	r2, r2, #24
 8001280:	2a7e      	cmp	r2, #126	; 0x7e
 8001282:	d903      	bls.n	800128c <__aeabi_f2iz+0x18>
 8001284:	2a9d      	cmp	r2, #157	; 0x9d
 8001286:	d902      	bls.n	800128e <__aeabi_f2iz+0x1a>
 8001288:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <__aeabi_f2iz+0x3c>)
 800128a:	1898      	adds	r0, r3, r2
 800128c:	4770      	bx	lr
 800128e:	2080      	movs	r0, #128	; 0x80
 8001290:	0400      	lsls	r0, r0, #16
 8001292:	4301      	orrs	r1, r0
 8001294:	2a95      	cmp	r2, #149	; 0x95
 8001296:	dc07      	bgt.n	80012a8 <__aeabi_f2iz+0x34>
 8001298:	2096      	movs	r0, #150	; 0x96
 800129a:	1a82      	subs	r2, r0, r2
 800129c:	40d1      	lsrs	r1, r2
 800129e:	4248      	negs	r0, r1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f3      	bne.n	800128c <__aeabi_f2iz+0x18>
 80012a4:	0008      	movs	r0, r1
 80012a6:	e7f1      	b.n	800128c <__aeabi_f2iz+0x18>
 80012a8:	3a96      	subs	r2, #150	; 0x96
 80012aa:	4091      	lsls	r1, r2
 80012ac:	e7f7      	b.n	800129e <__aeabi_f2iz+0x2a>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	7fffffff 	.word	0x7fffffff

080012b4 <__aeabi_i2f>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d013      	beq.n	80012e2 <__aeabi_i2f+0x2e>
 80012ba:	17c3      	asrs	r3, r0, #31
 80012bc:	18c5      	adds	r5, r0, r3
 80012be:	405d      	eors	r5, r3
 80012c0:	0fc4      	lsrs	r4, r0, #31
 80012c2:	0028      	movs	r0, r5
 80012c4:	f001 ff9a 	bl	80031fc <__clzsi2>
 80012c8:	239e      	movs	r3, #158	; 0x9e
 80012ca:	0001      	movs	r1, r0
 80012cc:	1a1b      	subs	r3, r3, r0
 80012ce:	2b96      	cmp	r3, #150	; 0x96
 80012d0:	dc0f      	bgt.n	80012f2 <__aeabi_i2f+0x3e>
 80012d2:	2808      	cmp	r0, #8
 80012d4:	dd01      	ble.n	80012da <__aeabi_i2f+0x26>
 80012d6:	3908      	subs	r1, #8
 80012d8:	408d      	lsls	r5, r1
 80012da:	026d      	lsls	r5, r5, #9
 80012dc:	0a6d      	lsrs	r5, r5, #9
 80012de:	b2d8      	uxtb	r0, r3
 80012e0:	e002      	b.n	80012e8 <__aeabi_i2f+0x34>
 80012e2:	2400      	movs	r4, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	2500      	movs	r5, #0
 80012e8:	05c0      	lsls	r0, r0, #23
 80012ea:	4328      	orrs	r0, r5
 80012ec:	07e4      	lsls	r4, r4, #31
 80012ee:	4320      	orrs	r0, r4
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
 80012f2:	2b99      	cmp	r3, #153	; 0x99
 80012f4:	dd0b      	ble.n	800130e <__aeabi_i2f+0x5a>
 80012f6:	2205      	movs	r2, #5
 80012f8:	002e      	movs	r6, r5
 80012fa:	1a12      	subs	r2, r2, r0
 80012fc:	40d6      	lsrs	r6, r2
 80012fe:	0002      	movs	r2, r0
 8001300:	321b      	adds	r2, #27
 8001302:	4095      	lsls	r5, r2
 8001304:	0028      	movs	r0, r5
 8001306:	1e45      	subs	r5, r0, #1
 8001308:	41a8      	sbcs	r0, r5
 800130a:	0035      	movs	r5, r6
 800130c:	4305      	orrs	r5, r0
 800130e:	2905      	cmp	r1, #5
 8001310:	dd01      	ble.n	8001316 <__aeabi_i2f+0x62>
 8001312:	1f4a      	subs	r2, r1, #5
 8001314:	4095      	lsls	r5, r2
 8001316:	002a      	movs	r2, r5
 8001318:	4e08      	ldr	r6, [pc, #32]	; (800133c <__aeabi_i2f+0x88>)
 800131a:	4032      	ands	r2, r6
 800131c:	0768      	lsls	r0, r5, #29
 800131e:	d009      	beq.n	8001334 <__aeabi_i2f+0x80>
 8001320:	200f      	movs	r0, #15
 8001322:	4028      	ands	r0, r5
 8001324:	2804      	cmp	r0, #4
 8001326:	d005      	beq.n	8001334 <__aeabi_i2f+0x80>
 8001328:	3204      	adds	r2, #4
 800132a:	0150      	lsls	r0, r2, #5
 800132c:	d502      	bpl.n	8001334 <__aeabi_i2f+0x80>
 800132e:	239f      	movs	r3, #159	; 0x9f
 8001330:	4032      	ands	r2, r6
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	0192      	lsls	r2, r2, #6
 8001336:	0a55      	lsrs	r5, r2, #9
 8001338:	b2d8      	uxtb	r0, r3
 800133a:	e7d5      	b.n	80012e8 <__aeabi_i2f+0x34>
 800133c:	fbffffff 	.word	0xfbffffff

08001340 <__aeabi_ui2f>:
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	1e05      	subs	r5, r0, #0
 8001344:	d00e      	beq.n	8001364 <__aeabi_ui2f+0x24>
 8001346:	f001 ff59 	bl	80031fc <__clzsi2>
 800134a:	239e      	movs	r3, #158	; 0x9e
 800134c:	0004      	movs	r4, r0
 800134e:	1a1b      	subs	r3, r3, r0
 8001350:	2b96      	cmp	r3, #150	; 0x96
 8001352:	dc0c      	bgt.n	800136e <__aeabi_ui2f+0x2e>
 8001354:	2808      	cmp	r0, #8
 8001356:	dd01      	ble.n	800135c <__aeabi_ui2f+0x1c>
 8001358:	3c08      	subs	r4, #8
 800135a:	40a5      	lsls	r5, r4
 800135c:	026d      	lsls	r5, r5, #9
 800135e:	0a6d      	lsrs	r5, r5, #9
 8001360:	b2d8      	uxtb	r0, r3
 8001362:	e001      	b.n	8001368 <__aeabi_ui2f+0x28>
 8001364:	2000      	movs	r0, #0
 8001366:	2500      	movs	r5, #0
 8001368:	05c0      	lsls	r0, r0, #23
 800136a:	4328      	orrs	r0, r5
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	2b99      	cmp	r3, #153	; 0x99
 8001370:	dd09      	ble.n	8001386 <__aeabi_ui2f+0x46>
 8001372:	0002      	movs	r2, r0
 8001374:	0029      	movs	r1, r5
 8001376:	321b      	adds	r2, #27
 8001378:	4091      	lsls	r1, r2
 800137a:	1e4a      	subs	r2, r1, #1
 800137c:	4191      	sbcs	r1, r2
 800137e:	2205      	movs	r2, #5
 8001380:	1a12      	subs	r2, r2, r0
 8001382:	40d5      	lsrs	r5, r2
 8001384:	430d      	orrs	r5, r1
 8001386:	2c05      	cmp	r4, #5
 8001388:	dd01      	ble.n	800138e <__aeabi_ui2f+0x4e>
 800138a:	1f62      	subs	r2, r4, #5
 800138c:	4095      	lsls	r5, r2
 800138e:	0029      	movs	r1, r5
 8001390:	4e08      	ldr	r6, [pc, #32]	; (80013b4 <__aeabi_ui2f+0x74>)
 8001392:	4031      	ands	r1, r6
 8001394:	076a      	lsls	r2, r5, #29
 8001396:	d009      	beq.n	80013ac <__aeabi_ui2f+0x6c>
 8001398:	200f      	movs	r0, #15
 800139a:	4028      	ands	r0, r5
 800139c:	2804      	cmp	r0, #4
 800139e:	d005      	beq.n	80013ac <__aeabi_ui2f+0x6c>
 80013a0:	3104      	adds	r1, #4
 80013a2:	014a      	lsls	r2, r1, #5
 80013a4:	d502      	bpl.n	80013ac <__aeabi_ui2f+0x6c>
 80013a6:	239f      	movs	r3, #159	; 0x9f
 80013a8:	4031      	ands	r1, r6
 80013aa:	1b1b      	subs	r3, r3, r4
 80013ac:	0189      	lsls	r1, r1, #6
 80013ae:	0a4d      	lsrs	r5, r1, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e7d9      	b.n	8001368 <__aeabi_ui2f+0x28>
 80013b4:	fbffffff 	.word	0xfbffffff

080013b8 <__aeabi_dadd>:
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	464f      	mov	r7, r9
 80013bc:	46d6      	mov	lr, sl
 80013be:	4646      	mov	r6, r8
 80013c0:	000d      	movs	r5, r1
 80013c2:	0001      	movs	r1, r0
 80013c4:	0018      	movs	r0, r3
 80013c6:	b5c0      	push	{r6, r7, lr}
 80013c8:	0017      	movs	r7, r2
 80013ca:	032b      	lsls	r3, r5, #12
 80013cc:	0a5a      	lsrs	r2, r3, #9
 80013ce:	0f4b      	lsrs	r3, r1, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	00ca      	lsls	r2, r1, #3
 80013d4:	4691      	mov	r9, r2
 80013d6:	0302      	lsls	r2, r0, #12
 80013d8:	006e      	lsls	r6, r5, #1
 80013da:	0041      	lsls	r1, r0, #1
 80013dc:	0a52      	lsrs	r2, r2, #9
 80013de:	0fec      	lsrs	r4, r5, #31
 80013e0:	0f7d      	lsrs	r5, r7, #29
 80013e2:	4315      	orrs	r5, r2
 80013e4:	0d76      	lsrs	r6, r6, #21
 80013e6:	0d49      	lsrs	r1, r1, #21
 80013e8:	0fc0      	lsrs	r0, r0, #31
 80013ea:	4682      	mov	sl, r0
 80013ec:	46ac      	mov	ip, r5
 80013ee:	00ff      	lsls	r7, r7, #3
 80013f0:	1a72      	subs	r2, r6, r1
 80013f2:	4284      	cmp	r4, r0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dadd+0x40>
 80013f6:	e098      	b.n	800152a <__aeabi_dadd+0x172>
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	dc00      	bgt.n	80013fe <__aeabi_dadd+0x46>
 80013fc:	e081      	b.n	8001502 <__aeabi_dadd+0x14a>
 80013fe:	2900      	cmp	r1, #0
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x4c>
 8001402:	e0b6      	b.n	8001572 <__aeabi_dadd+0x1ba>
 8001404:	49c9      	ldr	r1, [pc, #804]	; (800172c <__aeabi_dadd+0x374>)
 8001406:	428e      	cmp	r6, r1
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x54>
 800140a:	e172      	b.n	80016f2 <__aeabi_dadd+0x33a>
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0028      	movs	r0, r5
 8001410:	0409      	lsls	r1, r1, #16
 8001412:	4308      	orrs	r0, r1
 8001414:	4684      	mov	ip, r0
 8001416:	2a38      	cmp	r2, #56	; 0x38
 8001418:	dd00      	ble.n	800141c <__aeabi_dadd+0x64>
 800141a:	e15e      	b.n	80016da <__aeabi_dadd+0x322>
 800141c:	2a1f      	cmp	r2, #31
 800141e:	dd00      	ble.n	8001422 <__aeabi_dadd+0x6a>
 8001420:	e1ee      	b.n	8001800 <__aeabi_dadd+0x448>
 8001422:	2020      	movs	r0, #32
 8001424:	0039      	movs	r1, r7
 8001426:	4665      	mov	r5, ip
 8001428:	1a80      	subs	r0, r0, r2
 800142a:	4087      	lsls	r7, r0
 800142c:	40d1      	lsrs	r1, r2
 800142e:	4085      	lsls	r5, r0
 8001430:	430d      	orrs	r5, r1
 8001432:	0039      	movs	r1, r7
 8001434:	1e4f      	subs	r7, r1, #1
 8001436:	41b9      	sbcs	r1, r7
 8001438:	4667      	mov	r7, ip
 800143a:	40d7      	lsrs	r7, r2
 800143c:	4329      	orrs	r1, r5
 800143e:	1bdb      	subs	r3, r3, r7
 8001440:	464a      	mov	r2, r9
 8001442:	1a55      	subs	r5, r2, r1
 8001444:	45a9      	cmp	r9, r5
 8001446:	4189      	sbcs	r1, r1
 8001448:	4249      	negs	r1, r1
 800144a:	1a5b      	subs	r3, r3, r1
 800144c:	4698      	mov	r8, r3
 800144e:	4643      	mov	r3, r8
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x9e>
 8001454:	e0cc      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001456:	4643      	mov	r3, r8
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	0a5b      	lsrs	r3, r3, #9
 800145c:	4698      	mov	r8, r3
 800145e:	4643      	mov	r3, r8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0xae>
 8001464:	e12c      	b.n	80016c0 <__aeabi_dadd+0x308>
 8001466:	4640      	mov	r0, r8
 8001468:	f001 fec8 	bl	80031fc <__clzsi2>
 800146c:	0001      	movs	r1, r0
 800146e:	3908      	subs	r1, #8
 8001470:	2220      	movs	r2, #32
 8001472:	0028      	movs	r0, r5
 8001474:	4643      	mov	r3, r8
 8001476:	1a52      	subs	r2, r2, r1
 8001478:	408b      	lsls	r3, r1
 800147a:	40d0      	lsrs	r0, r2
 800147c:	408d      	lsls	r5, r1
 800147e:	4303      	orrs	r3, r0
 8001480:	428e      	cmp	r6, r1
 8001482:	dd00      	ble.n	8001486 <__aeabi_dadd+0xce>
 8001484:	e117      	b.n	80016b6 <__aeabi_dadd+0x2fe>
 8001486:	1b8e      	subs	r6, r1, r6
 8001488:	1c72      	adds	r2, r6, #1
 800148a:	2a1f      	cmp	r2, #31
 800148c:	dd00      	ble.n	8001490 <__aeabi_dadd+0xd8>
 800148e:	e1a7      	b.n	80017e0 <__aeabi_dadd+0x428>
 8001490:	2120      	movs	r1, #32
 8001492:	0018      	movs	r0, r3
 8001494:	002e      	movs	r6, r5
 8001496:	1a89      	subs	r1, r1, r2
 8001498:	408d      	lsls	r5, r1
 800149a:	4088      	lsls	r0, r1
 800149c:	40d6      	lsrs	r6, r2
 800149e:	40d3      	lsrs	r3, r2
 80014a0:	1e69      	subs	r1, r5, #1
 80014a2:	418d      	sbcs	r5, r1
 80014a4:	4330      	orrs	r0, r6
 80014a6:	4698      	mov	r8, r3
 80014a8:	2600      	movs	r6, #0
 80014aa:	4305      	orrs	r5, r0
 80014ac:	076b      	lsls	r3, r5, #29
 80014ae:	d009      	beq.n	80014c4 <__aeabi_dadd+0x10c>
 80014b0:	230f      	movs	r3, #15
 80014b2:	402b      	ands	r3, r5
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d005      	beq.n	80014c4 <__aeabi_dadd+0x10c>
 80014b8:	1d2b      	adds	r3, r5, #4
 80014ba:	42ab      	cmp	r3, r5
 80014bc:	41ad      	sbcs	r5, r5
 80014be:	426d      	negs	r5, r5
 80014c0:	44a8      	add	r8, r5
 80014c2:	001d      	movs	r5, r3
 80014c4:	4643      	mov	r3, r8
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	d400      	bmi.n	80014cc <__aeabi_dadd+0x114>
 80014ca:	e094      	b.n	80015f6 <__aeabi_dadd+0x23e>
 80014cc:	4b97      	ldr	r3, [pc, #604]	; (800172c <__aeabi_dadd+0x374>)
 80014ce:	1c72      	adds	r2, r6, #1
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x11e>
 80014d4:	e09d      	b.n	8001612 <__aeabi_dadd+0x25a>
 80014d6:	4641      	mov	r1, r8
 80014d8:	4b95      	ldr	r3, [pc, #596]	; (8001730 <__aeabi_dadd+0x378>)
 80014da:	08ed      	lsrs	r5, r5, #3
 80014dc:	4019      	ands	r1, r3
 80014de:	000b      	movs	r3, r1
 80014e0:	0552      	lsls	r2, r2, #21
 80014e2:	0749      	lsls	r1, r1, #29
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4329      	orrs	r1, r5
 80014e8:	0b1b      	lsrs	r3, r3, #12
 80014ea:	0d52      	lsrs	r2, r2, #21
 80014ec:	0512      	lsls	r2, r2, #20
 80014ee:	4313      	orrs	r3, r2
 80014f0:	07e4      	lsls	r4, r4, #31
 80014f2:	4323      	orrs	r3, r4
 80014f4:	0008      	movs	r0, r1
 80014f6:	0019      	movs	r1, r3
 80014f8:	bce0      	pop	{r5, r6, r7}
 80014fa:	46ba      	mov	sl, r7
 80014fc:	46b1      	mov	r9, r6
 80014fe:	46a8      	mov	r8, r5
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	2a00      	cmp	r2, #0
 8001504:	d043      	beq.n	800158e <__aeabi_dadd+0x1d6>
 8001506:	1b8a      	subs	r2, r1, r6
 8001508:	2e00      	cmp	r6, #0
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x156>
 800150c:	e12a      	b.n	8001764 <__aeabi_dadd+0x3ac>
 800150e:	464c      	mov	r4, r9
 8001510:	431c      	orrs	r4, r3
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x15e>
 8001514:	e1d1      	b.n	80018ba <__aeabi_dadd+0x502>
 8001516:	1e54      	subs	r4, r2, #1
 8001518:	2a01      	cmp	r2, #1
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x166>
 800151c:	e21f      	b.n	800195e <__aeabi_dadd+0x5a6>
 800151e:	4d83      	ldr	r5, [pc, #524]	; (800172c <__aeabi_dadd+0x374>)
 8001520:	42aa      	cmp	r2, r5
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x16e>
 8001524:	e272      	b.n	8001a0c <__aeabi_dadd+0x654>
 8001526:	0022      	movs	r2, r4
 8001528:	e123      	b.n	8001772 <__aeabi_dadd+0x3ba>
 800152a:	2a00      	cmp	r2, #0
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x178>
 800152e:	e098      	b.n	8001662 <__aeabi_dadd+0x2aa>
 8001530:	2900      	cmp	r1, #0
 8001532:	d042      	beq.n	80015ba <__aeabi_dadd+0x202>
 8001534:	497d      	ldr	r1, [pc, #500]	; (800172c <__aeabi_dadd+0x374>)
 8001536:	428e      	cmp	r6, r1
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x184>
 800153a:	e0da      	b.n	80016f2 <__aeabi_dadd+0x33a>
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0028      	movs	r0, r5
 8001540:	0409      	lsls	r1, r1, #16
 8001542:	4308      	orrs	r0, r1
 8001544:	4684      	mov	ip, r0
 8001546:	2a38      	cmp	r2, #56	; 0x38
 8001548:	dd00      	ble.n	800154c <__aeabi_dadd+0x194>
 800154a:	e129      	b.n	80017a0 <__aeabi_dadd+0x3e8>
 800154c:	2a1f      	cmp	r2, #31
 800154e:	dc00      	bgt.n	8001552 <__aeabi_dadd+0x19a>
 8001550:	e187      	b.n	8001862 <__aeabi_dadd+0x4aa>
 8001552:	0011      	movs	r1, r2
 8001554:	4665      	mov	r5, ip
 8001556:	3920      	subs	r1, #32
 8001558:	40cd      	lsrs	r5, r1
 800155a:	2a20      	cmp	r2, #32
 800155c:	d004      	beq.n	8001568 <__aeabi_dadd+0x1b0>
 800155e:	2040      	movs	r0, #64	; 0x40
 8001560:	4661      	mov	r1, ip
 8001562:	1a82      	subs	r2, r0, r2
 8001564:	4091      	lsls	r1, r2
 8001566:	430f      	orrs	r7, r1
 8001568:	0039      	movs	r1, r7
 800156a:	1e4f      	subs	r7, r1, #1
 800156c:	41b9      	sbcs	r1, r7
 800156e:	430d      	orrs	r5, r1
 8001570:	e11b      	b.n	80017aa <__aeabi_dadd+0x3f2>
 8001572:	0029      	movs	r1, r5
 8001574:	4339      	orrs	r1, r7
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x1c2>
 8001578:	e0b5      	b.n	80016e6 <__aeabi_dadd+0x32e>
 800157a:	1e51      	subs	r1, r2, #1
 800157c:	2a01      	cmp	r2, #1
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x1ca>
 8001580:	e1ab      	b.n	80018da <__aeabi_dadd+0x522>
 8001582:	486a      	ldr	r0, [pc, #424]	; (800172c <__aeabi_dadd+0x374>)
 8001584:	4282      	cmp	r2, r0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x1d2>
 8001588:	e1b2      	b.n	80018f0 <__aeabi_dadd+0x538>
 800158a:	000a      	movs	r2, r1
 800158c:	e743      	b.n	8001416 <__aeabi_dadd+0x5e>
 800158e:	4969      	ldr	r1, [pc, #420]	; (8001734 <__aeabi_dadd+0x37c>)
 8001590:	1c75      	adds	r5, r6, #1
 8001592:	420d      	tst	r5, r1
 8001594:	d000      	beq.n	8001598 <__aeabi_dadd+0x1e0>
 8001596:	e0cf      	b.n	8001738 <__aeabi_dadd+0x380>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x1e6>
 800159c:	e193      	b.n	80018c6 <__aeabi_dadd+0x50e>
 800159e:	4649      	mov	r1, r9
 80015a0:	4319      	orrs	r1, r3
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x1ee>
 80015a4:	e1d1      	b.n	800194a <__aeabi_dadd+0x592>
 80015a6:	4661      	mov	r1, ip
 80015a8:	4339      	orrs	r1, r7
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x1f6>
 80015ac:	e1e3      	b.n	8001976 <__aeabi_dadd+0x5be>
 80015ae:	4649      	mov	r1, r9
 80015b0:	0758      	lsls	r0, r3, #29
 80015b2:	08c9      	lsrs	r1, r1, #3
 80015b4:	4301      	orrs	r1, r0
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	e026      	b.n	8001608 <__aeabi_dadd+0x250>
 80015ba:	0029      	movs	r1, r5
 80015bc:	4339      	orrs	r1, r7
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x20a>
 80015c0:	e091      	b.n	80016e6 <__aeabi_dadd+0x32e>
 80015c2:	1e51      	subs	r1, r2, #1
 80015c4:	2a01      	cmp	r2, #1
 80015c6:	d005      	beq.n	80015d4 <__aeabi_dadd+0x21c>
 80015c8:	4858      	ldr	r0, [pc, #352]	; (800172c <__aeabi_dadd+0x374>)
 80015ca:	4282      	cmp	r2, r0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dadd+0x218>
 80015ce:	e18f      	b.n	80018f0 <__aeabi_dadd+0x538>
 80015d0:	000a      	movs	r2, r1
 80015d2:	e7b8      	b.n	8001546 <__aeabi_dadd+0x18e>
 80015d4:	003d      	movs	r5, r7
 80015d6:	444d      	add	r5, r9
 80015d8:	454d      	cmp	r5, r9
 80015da:	4189      	sbcs	r1, r1
 80015dc:	4463      	add	r3, ip
 80015de:	4698      	mov	r8, r3
 80015e0:	4249      	negs	r1, r1
 80015e2:	4488      	add	r8, r1
 80015e4:	4643      	mov	r3, r8
 80015e6:	2602      	movs	r6, #2
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	d500      	bpl.n	80015ee <__aeabi_dadd+0x236>
 80015ec:	e0eb      	b.n	80017c6 <__aeabi_dadd+0x40e>
 80015ee:	3e01      	subs	r6, #1
 80015f0:	076b      	lsls	r3, r5, #29
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x23e>
 80015f4:	e75c      	b.n	80014b0 <__aeabi_dadd+0xf8>
 80015f6:	4643      	mov	r3, r8
 80015f8:	08e9      	lsrs	r1, r5, #3
 80015fa:	075a      	lsls	r2, r3, #29
 80015fc:	4311      	orrs	r1, r2
 80015fe:	0032      	movs	r2, r6
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	484a      	ldr	r0, [pc, #296]	; (800172c <__aeabi_dadd+0x374>)
 8001604:	4282      	cmp	r2, r0
 8001606:	d021      	beq.n	800164c <__aeabi_dadd+0x294>
 8001608:	031b      	lsls	r3, r3, #12
 800160a:	0552      	lsls	r2, r2, #21
 800160c:	0b1b      	lsrs	r3, r3, #12
 800160e:	0d52      	lsrs	r2, r2, #21
 8001610:	e76c      	b.n	80014ec <__aeabi_dadd+0x134>
 8001612:	2300      	movs	r3, #0
 8001614:	2100      	movs	r1, #0
 8001616:	e769      	b.n	80014ec <__aeabi_dadd+0x134>
 8001618:	002a      	movs	r2, r5
 800161a:	433a      	orrs	r2, r7
 800161c:	d069      	beq.n	80016f2 <__aeabi_dadd+0x33a>
 800161e:	464a      	mov	r2, r9
 8001620:	0758      	lsls	r0, r3, #29
 8001622:	08d1      	lsrs	r1, r2, #3
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	031b      	lsls	r3, r3, #12
 800162a:	4308      	orrs	r0, r1
 800162c:	421a      	tst	r2, r3
 800162e:	d007      	beq.n	8001640 <__aeabi_dadd+0x288>
 8001630:	0029      	movs	r1, r5
 8001632:	08ed      	lsrs	r5, r5, #3
 8001634:	421d      	tst	r5, r3
 8001636:	d103      	bne.n	8001640 <__aeabi_dadd+0x288>
 8001638:	002a      	movs	r2, r5
 800163a:	08ff      	lsrs	r7, r7, #3
 800163c:	0748      	lsls	r0, r1, #29
 800163e:	4338      	orrs	r0, r7
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00c1      	lsls	r1, r0, #3
 8001644:	075b      	lsls	r3, r3, #29
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	4319      	orrs	r1, r3
 800164a:	0013      	movs	r3, r2
 800164c:	000a      	movs	r2, r1
 800164e:	431a      	orrs	r2, r3
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x29c>
 8001652:	e213      	b.n	8001a7c <__aeabi_dadd+0x6c4>
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	0312      	lsls	r2, r2, #12
 8001658:	4313      	orrs	r3, r2
 800165a:	031b      	lsls	r3, r3, #12
 800165c:	4a33      	ldr	r2, [pc, #204]	; (800172c <__aeabi_dadd+0x374>)
 800165e:	0b1b      	lsrs	r3, r3, #12
 8001660:	e744      	b.n	80014ec <__aeabi_dadd+0x134>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d04b      	beq.n	80016fe <__aeabi_dadd+0x346>
 8001666:	1b8a      	subs	r2, r1, r6
 8001668:	2e00      	cmp	r6, #0
 800166a:	d100      	bne.n	800166e <__aeabi_dadd+0x2b6>
 800166c:	e0e7      	b.n	800183e <__aeabi_dadd+0x486>
 800166e:	482f      	ldr	r0, [pc, #188]	; (800172c <__aeabi_dadd+0x374>)
 8001670:	4281      	cmp	r1, r0
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x2be>
 8001674:	e195      	b.n	80019a2 <__aeabi_dadd+0x5ea>
 8001676:	2080      	movs	r0, #128	; 0x80
 8001678:	0400      	lsls	r0, r0, #16
 800167a:	4303      	orrs	r3, r0
 800167c:	2a38      	cmp	r2, #56	; 0x38
 800167e:	dd00      	ble.n	8001682 <__aeabi_dadd+0x2ca>
 8001680:	e143      	b.n	800190a <__aeabi_dadd+0x552>
 8001682:	2a1f      	cmp	r2, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0x2d0>
 8001686:	e1db      	b.n	8001a40 <__aeabi_dadd+0x688>
 8001688:	2020      	movs	r0, #32
 800168a:	001d      	movs	r5, r3
 800168c:	464e      	mov	r6, r9
 800168e:	1a80      	subs	r0, r0, r2
 8001690:	4085      	lsls	r5, r0
 8001692:	40d6      	lsrs	r6, r2
 8001694:	4335      	orrs	r5, r6
 8001696:	464e      	mov	r6, r9
 8001698:	4086      	lsls	r6, r0
 800169a:	0030      	movs	r0, r6
 800169c:	40d3      	lsrs	r3, r2
 800169e:	1e46      	subs	r6, r0, #1
 80016a0:	41b0      	sbcs	r0, r6
 80016a2:	449c      	add	ip, r3
 80016a4:	4305      	orrs	r5, r0
 80016a6:	19ed      	adds	r5, r5, r7
 80016a8:	42bd      	cmp	r5, r7
 80016aa:	419b      	sbcs	r3, r3
 80016ac:	425b      	negs	r3, r3
 80016ae:	4463      	add	r3, ip
 80016b0:	4698      	mov	r8, r3
 80016b2:	000e      	movs	r6, r1
 80016b4:	e07f      	b.n	80017b6 <__aeabi_dadd+0x3fe>
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <__aeabi_dadd+0x378>)
 80016b8:	1a76      	subs	r6, r6, r1
 80016ba:	4013      	ands	r3, r2
 80016bc:	4698      	mov	r8, r3
 80016be:	e6f5      	b.n	80014ac <__aeabi_dadd+0xf4>
 80016c0:	0028      	movs	r0, r5
 80016c2:	f001 fd9b 	bl	80031fc <__clzsi2>
 80016c6:	0001      	movs	r1, r0
 80016c8:	3118      	adds	r1, #24
 80016ca:	291f      	cmp	r1, #31
 80016cc:	dc00      	bgt.n	80016d0 <__aeabi_dadd+0x318>
 80016ce:	e6cf      	b.n	8001470 <__aeabi_dadd+0xb8>
 80016d0:	002b      	movs	r3, r5
 80016d2:	3808      	subs	r0, #8
 80016d4:	4083      	lsls	r3, r0
 80016d6:	2500      	movs	r5, #0
 80016d8:	e6d2      	b.n	8001480 <__aeabi_dadd+0xc8>
 80016da:	4662      	mov	r2, ip
 80016dc:	433a      	orrs	r2, r7
 80016de:	0011      	movs	r1, r2
 80016e0:	1e4f      	subs	r7, r1, #1
 80016e2:	41b9      	sbcs	r1, r7
 80016e4:	e6ac      	b.n	8001440 <__aeabi_dadd+0x88>
 80016e6:	4649      	mov	r1, r9
 80016e8:	0758      	lsls	r0, r3, #29
 80016ea:	08c9      	lsrs	r1, r1, #3
 80016ec:	4301      	orrs	r1, r0
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	e787      	b.n	8001602 <__aeabi_dadd+0x24a>
 80016f2:	4649      	mov	r1, r9
 80016f4:	075a      	lsls	r2, r3, #29
 80016f6:	08c9      	lsrs	r1, r1, #3
 80016f8:	4311      	orrs	r1, r2
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	e7a6      	b.n	800164c <__aeabi_dadd+0x294>
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <__aeabi_dadd+0x37c>)
 8001700:	1c70      	adds	r0, r6, #1
 8001702:	4208      	tst	r0, r1
 8001704:	d000      	beq.n	8001708 <__aeabi_dadd+0x350>
 8001706:	e0bb      	b.n	8001880 <__aeabi_dadd+0x4c8>
 8001708:	2e00      	cmp	r6, #0
 800170a:	d000      	beq.n	800170e <__aeabi_dadd+0x356>
 800170c:	e114      	b.n	8001938 <__aeabi_dadd+0x580>
 800170e:	4649      	mov	r1, r9
 8001710:	4319      	orrs	r1, r3
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x35e>
 8001714:	e175      	b.n	8001a02 <__aeabi_dadd+0x64a>
 8001716:	0029      	movs	r1, r5
 8001718:	4339      	orrs	r1, r7
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x366>
 800171c:	e17e      	b.n	8001a1c <__aeabi_dadd+0x664>
 800171e:	4649      	mov	r1, r9
 8001720:	0758      	lsls	r0, r3, #29
 8001722:	08c9      	lsrs	r1, r1, #3
 8001724:	4301      	orrs	r1, r0
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	e76e      	b.n	8001608 <__aeabi_dadd+0x250>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff
 8001730:	ff7fffff 	.word	0xff7fffff
 8001734:	000007fe 	.word	0x000007fe
 8001738:	4649      	mov	r1, r9
 800173a:	1bcd      	subs	r5, r1, r7
 800173c:	4661      	mov	r1, ip
 800173e:	1a58      	subs	r0, r3, r1
 8001740:	45a9      	cmp	r9, r5
 8001742:	4189      	sbcs	r1, r1
 8001744:	4249      	negs	r1, r1
 8001746:	4688      	mov	r8, r1
 8001748:	0001      	movs	r1, r0
 800174a:	4640      	mov	r0, r8
 800174c:	1a09      	subs	r1, r1, r0
 800174e:	4688      	mov	r8, r1
 8001750:	0209      	lsls	r1, r1, #8
 8001752:	d500      	bpl.n	8001756 <__aeabi_dadd+0x39e>
 8001754:	e0a6      	b.n	80018a4 <__aeabi_dadd+0x4ec>
 8001756:	4641      	mov	r1, r8
 8001758:	4329      	orrs	r1, r5
 800175a:	d000      	beq.n	800175e <__aeabi_dadd+0x3a6>
 800175c:	e67f      	b.n	800145e <__aeabi_dadd+0xa6>
 800175e:	2300      	movs	r3, #0
 8001760:	2400      	movs	r4, #0
 8001762:	e751      	b.n	8001608 <__aeabi_dadd+0x250>
 8001764:	4cc7      	ldr	r4, [pc, #796]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001766:	42a1      	cmp	r1, r4
 8001768:	d100      	bne.n	800176c <__aeabi_dadd+0x3b4>
 800176a:	e0c7      	b.n	80018fc <__aeabi_dadd+0x544>
 800176c:	2480      	movs	r4, #128	; 0x80
 800176e:	0424      	lsls	r4, r4, #16
 8001770:	4323      	orrs	r3, r4
 8001772:	2a38      	cmp	r2, #56	; 0x38
 8001774:	dc54      	bgt.n	8001820 <__aeabi_dadd+0x468>
 8001776:	2a1f      	cmp	r2, #31
 8001778:	dd00      	ble.n	800177c <__aeabi_dadd+0x3c4>
 800177a:	e0cc      	b.n	8001916 <__aeabi_dadd+0x55e>
 800177c:	2420      	movs	r4, #32
 800177e:	4648      	mov	r0, r9
 8001780:	1aa4      	subs	r4, r4, r2
 8001782:	001d      	movs	r5, r3
 8001784:	464e      	mov	r6, r9
 8001786:	40a0      	lsls	r0, r4
 8001788:	40d6      	lsrs	r6, r2
 800178a:	40a5      	lsls	r5, r4
 800178c:	0004      	movs	r4, r0
 800178e:	40d3      	lsrs	r3, r2
 8001790:	4662      	mov	r2, ip
 8001792:	4335      	orrs	r5, r6
 8001794:	1e66      	subs	r6, r4, #1
 8001796:	41b4      	sbcs	r4, r6
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	469c      	mov	ip, r3
 800179c:	4325      	orrs	r5, r4
 800179e:	e044      	b.n	800182a <__aeabi_dadd+0x472>
 80017a0:	4662      	mov	r2, ip
 80017a2:	433a      	orrs	r2, r7
 80017a4:	0015      	movs	r5, r2
 80017a6:	1e6f      	subs	r7, r5, #1
 80017a8:	41bd      	sbcs	r5, r7
 80017aa:	444d      	add	r5, r9
 80017ac:	454d      	cmp	r5, r9
 80017ae:	4189      	sbcs	r1, r1
 80017b0:	4249      	negs	r1, r1
 80017b2:	4688      	mov	r8, r1
 80017b4:	4498      	add	r8, r3
 80017b6:	4643      	mov	r3, r8
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	d400      	bmi.n	80017be <__aeabi_dadd+0x406>
 80017bc:	e718      	b.n	80015f0 <__aeabi_dadd+0x238>
 80017be:	4bb1      	ldr	r3, [pc, #708]	; (8001a84 <__aeabi_dadd+0x6cc>)
 80017c0:	3601      	adds	r6, #1
 80017c2:	429e      	cmp	r6, r3
 80017c4:	d049      	beq.n	800185a <__aeabi_dadd+0x4a2>
 80017c6:	4642      	mov	r2, r8
 80017c8:	4baf      	ldr	r3, [pc, #700]	; (8001a88 <__aeabi_dadd+0x6d0>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	401a      	ands	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	086a      	lsrs	r2, r5, #1
 80017d2:	400d      	ands	r5, r1
 80017d4:	4315      	orrs	r5, r2
 80017d6:	07d9      	lsls	r1, r3, #31
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	4698      	mov	r8, r3
 80017dc:	430d      	orrs	r5, r1
 80017de:	e665      	b.n	80014ac <__aeabi_dadd+0xf4>
 80017e0:	0018      	movs	r0, r3
 80017e2:	3e1f      	subs	r6, #31
 80017e4:	40f0      	lsrs	r0, r6
 80017e6:	2a20      	cmp	r2, #32
 80017e8:	d003      	beq.n	80017f2 <__aeabi_dadd+0x43a>
 80017ea:	2140      	movs	r1, #64	; 0x40
 80017ec:	1a8a      	subs	r2, r1, r2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	431d      	orrs	r5, r3
 80017f2:	1e69      	subs	r1, r5, #1
 80017f4:	418d      	sbcs	r5, r1
 80017f6:	2300      	movs	r3, #0
 80017f8:	2600      	movs	r6, #0
 80017fa:	4698      	mov	r8, r3
 80017fc:	4305      	orrs	r5, r0
 80017fe:	e6f7      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001800:	0011      	movs	r1, r2
 8001802:	4665      	mov	r5, ip
 8001804:	3920      	subs	r1, #32
 8001806:	40cd      	lsrs	r5, r1
 8001808:	2a20      	cmp	r2, #32
 800180a:	d004      	beq.n	8001816 <__aeabi_dadd+0x45e>
 800180c:	2040      	movs	r0, #64	; 0x40
 800180e:	4661      	mov	r1, ip
 8001810:	1a82      	subs	r2, r0, r2
 8001812:	4091      	lsls	r1, r2
 8001814:	430f      	orrs	r7, r1
 8001816:	0039      	movs	r1, r7
 8001818:	1e4f      	subs	r7, r1, #1
 800181a:	41b9      	sbcs	r1, r7
 800181c:	4329      	orrs	r1, r5
 800181e:	e60f      	b.n	8001440 <__aeabi_dadd+0x88>
 8001820:	464a      	mov	r2, r9
 8001822:	4313      	orrs	r3, r2
 8001824:	001d      	movs	r5, r3
 8001826:	1e6b      	subs	r3, r5, #1
 8001828:	419d      	sbcs	r5, r3
 800182a:	1b7d      	subs	r5, r7, r5
 800182c:	42af      	cmp	r7, r5
 800182e:	419b      	sbcs	r3, r3
 8001830:	4662      	mov	r2, ip
 8001832:	425b      	negs	r3, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4698      	mov	r8, r3
 8001838:	4654      	mov	r4, sl
 800183a:	000e      	movs	r6, r1
 800183c:	e607      	b.n	800144e <__aeabi_dadd+0x96>
 800183e:	4648      	mov	r0, r9
 8001840:	4318      	orrs	r0, r3
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x48e>
 8001844:	e0b3      	b.n	80019ae <__aeabi_dadd+0x5f6>
 8001846:	1e50      	subs	r0, r2, #1
 8001848:	2a01      	cmp	r2, #1
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x496>
 800184c:	e10d      	b.n	8001a6a <__aeabi_dadd+0x6b2>
 800184e:	4d8d      	ldr	r5, [pc, #564]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001850:	42aa      	cmp	r2, r5
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x49e>
 8001854:	e0a5      	b.n	80019a2 <__aeabi_dadd+0x5ea>
 8001856:	0002      	movs	r2, r0
 8001858:	e710      	b.n	800167c <__aeabi_dadd+0x2c4>
 800185a:	0032      	movs	r2, r6
 800185c:	2300      	movs	r3, #0
 800185e:	2100      	movs	r1, #0
 8001860:	e644      	b.n	80014ec <__aeabi_dadd+0x134>
 8001862:	2120      	movs	r1, #32
 8001864:	0038      	movs	r0, r7
 8001866:	1a89      	subs	r1, r1, r2
 8001868:	4665      	mov	r5, ip
 800186a:	408f      	lsls	r7, r1
 800186c:	408d      	lsls	r5, r1
 800186e:	40d0      	lsrs	r0, r2
 8001870:	1e79      	subs	r1, r7, #1
 8001872:	418f      	sbcs	r7, r1
 8001874:	4305      	orrs	r5, r0
 8001876:	433d      	orrs	r5, r7
 8001878:	4667      	mov	r7, ip
 800187a:	40d7      	lsrs	r7, r2
 800187c:	19db      	adds	r3, r3, r7
 800187e:	e794      	b.n	80017aa <__aeabi_dadd+0x3f2>
 8001880:	4a80      	ldr	r2, [pc, #512]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001882:	4290      	cmp	r0, r2
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x4d0>
 8001886:	e0ec      	b.n	8001a62 <__aeabi_dadd+0x6aa>
 8001888:	0039      	movs	r1, r7
 800188a:	4449      	add	r1, r9
 800188c:	4549      	cmp	r1, r9
 800188e:	4192      	sbcs	r2, r2
 8001890:	4463      	add	r3, ip
 8001892:	4252      	negs	r2, r2
 8001894:	189b      	adds	r3, r3, r2
 8001896:	07dd      	lsls	r5, r3, #31
 8001898:	0849      	lsrs	r1, r1, #1
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	4698      	mov	r8, r3
 800189e:	0006      	movs	r6, r0
 80018a0:	430d      	orrs	r5, r1
 80018a2:	e6a5      	b.n	80015f0 <__aeabi_dadd+0x238>
 80018a4:	464a      	mov	r2, r9
 80018a6:	1abd      	subs	r5, r7, r2
 80018a8:	42af      	cmp	r7, r5
 80018aa:	4189      	sbcs	r1, r1
 80018ac:	4662      	mov	r2, ip
 80018ae:	4249      	negs	r1, r1
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	4698      	mov	r8, r3
 80018b6:	4654      	mov	r4, sl
 80018b8:	e5d1      	b.n	800145e <__aeabi_dadd+0xa6>
 80018ba:	076c      	lsls	r4, r5, #29
 80018bc:	08f9      	lsrs	r1, r7, #3
 80018be:	4321      	orrs	r1, r4
 80018c0:	08eb      	lsrs	r3, r5, #3
 80018c2:	0004      	movs	r4, r0
 80018c4:	e69d      	b.n	8001602 <__aeabi_dadd+0x24a>
 80018c6:	464a      	mov	r2, r9
 80018c8:	431a      	orrs	r2, r3
 80018ca:	d175      	bne.n	80019b8 <__aeabi_dadd+0x600>
 80018cc:	4661      	mov	r1, ip
 80018ce:	4339      	orrs	r1, r7
 80018d0:	d114      	bne.n	80018fc <__aeabi_dadd+0x544>
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	2400      	movs	r4, #0
 80018d6:	031b      	lsls	r3, r3, #12
 80018d8:	e6bc      	b.n	8001654 <__aeabi_dadd+0x29c>
 80018da:	464a      	mov	r2, r9
 80018dc:	1bd5      	subs	r5, r2, r7
 80018de:	45a9      	cmp	r9, r5
 80018e0:	4189      	sbcs	r1, r1
 80018e2:	4662      	mov	r2, ip
 80018e4:	4249      	negs	r1, r1
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	1a5b      	subs	r3, r3, r1
 80018ea:	4698      	mov	r8, r3
 80018ec:	2601      	movs	r6, #1
 80018ee:	e5ae      	b.n	800144e <__aeabi_dadd+0x96>
 80018f0:	464a      	mov	r2, r9
 80018f2:	08d1      	lsrs	r1, r2, #3
 80018f4:	075a      	lsls	r2, r3, #29
 80018f6:	4311      	orrs	r1, r2
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	e6a7      	b.n	800164c <__aeabi_dadd+0x294>
 80018fc:	4663      	mov	r3, ip
 80018fe:	08f9      	lsrs	r1, r7, #3
 8001900:	075a      	lsls	r2, r3, #29
 8001902:	4654      	mov	r4, sl
 8001904:	4311      	orrs	r1, r2
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	e6a0      	b.n	800164c <__aeabi_dadd+0x294>
 800190a:	464a      	mov	r2, r9
 800190c:	4313      	orrs	r3, r2
 800190e:	001d      	movs	r5, r3
 8001910:	1e6b      	subs	r3, r5, #1
 8001912:	419d      	sbcs	r5, r3
 8001914:	e6c7      	b.n	80016a6 <__aeabi_dadd+0x2ee>
 8001916:	0014      	movs	r4, r2
 8001918:	001e      	movs	r6, r3
 800191a:	3c20      	subs	r4, #32
 800191c:	40e6      	lsrs	r6, r4
 800191e:	2a20      	cmp	r2, #32
 8001920:	d005      	beq.n	800192e <__aeabi_dadd+0x576>
 8001922:	2440      	movs	r4, #64	; 0x40
 8001924:	1aa2      	subs	r2, r4, r2
 8001926:	4093      	lsls	r3, r2
 8001928:	464a      	mov	r2, r9
 800192a:	431a      	orrs	r2, r3
 800192c:	4691      	mov	r9, r2
 800192e:	464d      	mov	r5, r9
 8001930:	1e6b      	subs	r3, r5, #1
 8001932:	419d      	sbcs	r5, r3
 8001934:	4335      	orrs	r5, r6
 8001936:	e778      	b.n	800182a <__aeabi_dadd+0x472>
 8001938:	464a      	mov	r2, r9
 800193a:	431a      	orrs	r2, r3
 800193c:	d000      	beq.n	8001940 <__aeabi_dadd+0x588>
 800193e:	e66b      	b.n	8001618 <__aeabi_dadd+0x260>
 8001940:	076b      	lsls	r3, r5, #29
 8001942:	08f9      	lsrs	r1, r7, #3
 8001944:	4319      	orrs	r1, r3
 8001946:	08eb      	lsrs	r3, r5, #3
 8001948:	e680      	b.n	800164c <__aeabi_dadd+0x294>
 800194a:	4661      	mov	r1, ip
 800194c:	4339      	orrs	r1, r7
 800194e:	d054      	beq.n	80019fa <__aeabi_dadd+0x642>
 8001950:	4663      	mov	r3, ip
 8001952:	08f9      	lsrs	r1, r7, #3
 8001954:	075c      	lsls	r4, r3, #29
 8001956:	4321      	orrs	r1, r4
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	0004      	movs	r4, r0
 800195c:	e654      	b.n	8001608 <__aeabi_dadd+0x250>
 800195e:	464a      	mov	r2, r9
 8001960:	1abd      	subs	r5, r7, r2
 8001962:	42af      	cmp	r7, r5
 8001964:	4189      	sbcs	r1, r1
 8001966:	4662      	mov	r2, ip
 8001968:	4249      	negs	r1, r1
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	4698      	mov	r8, r3
 8001970:	0004      	movs	r4, r0
 8001972:	2601      	movs	r6, #1
 8001974:	e56b      	b.n	800144e <__aeabi_dadd+0x96>
 8001976:	464a      	mov	r2, r9
 8001978:	1bd5      	subs	r5, r2, r7
 800197a:	45a9      	cmp	r9, r5
 800197c:	4189      	sbcs	r1, r1
 800197e:	4662      	mov	r2, ip
 8001980:	4249      	negs	r1, r1
 8001982:	1a9a      	subs	r2, r3, r2
 8001984:	1a52      	subs	r2, r2, r1
 8001986:	4690      	mov	r8, r2
 8001988:	0212      	lsls	r2, r2, #8
 800198a:	d532      	bpl.n	80019f2 <__aeabi_dadd+0x63a>
 800198c:	464a      	mov	r2, r9
 800198e:	1abd      	subs	r5, r7, r2
 8001990:	42af      	cmp	r7, r5
 8001992:	4189      	sbcs	r1, r1
 8001994:	4662      	mov	r2, ip
 8001996:	4249      	negs	r1, r1
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	1a5b      	subs	r3, r3, r1
 800199c:	4698      	mov	r8, r3
 800199e:	0004      	movs	r4, r0
 80019a0:	e584      	b.n	80014ac <__aeabi_dadd+0xf4>
 80019a2:	4663      	mov	r3, ip
 80019a4:	08f9      	lsrs	r1, r7, #3
 80019a6:	075a      	lsls	r2, r3, #29
 80019a8:	4311      	orrs	r1, r2
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	e64e      	b.n	800164c <__aeabi_dadd+0x294>
 80019ae:	08f9      	lsrs	r1, r7, #3
 80019b0:	0768      	lsls	r0, r5, #29
 80019b2:	4301      	orrs	r1, r0
 80019b4:	08eb      	lsrs	r3, r5, #3
 80019b6:	e624      	b.n	8001602 <__aeabi_dadd+0x24a>
 80019b8:	4662      	mov	r2, ip
 80019ba:	433a      	orrs	r2, r7
 80019bc:	d100      	bne.n	80019c0 <__aeabi_dadd+0x608>
 80019be:	e698      	b.n	80016f2 <__aeabi_dadd+0x33a>
 80019c0:	464a      	mov	r2, r9
 80019c2:	08d1      	lsrs	r1, r2, #3
 80019c4:	075a      	lsls	r2, r3, #29
 80019c6:	4311      	orrs	r1, r2
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	421a      	tst	r2, r3
 80019d0:	d008      	beq.n	80019e4 <__aeabi_dadd+0x62c>
 80019d2:	4660      	mov	r0, ip
 80019d4:	08c5      	lsrs	r5, r0, #3
 80019d6:	421d      	tst	r5, r3
 80019d8:	d104      	bne.n	80019e4 <__aeabi_dadd+0x62c>
 80019da:	4654      	mov	r4, sl
 80019dc:	002a      	movs	r2, r5
 80019de:	08f9      	lsrs	r1, r7, #3
 80019e0:	0743      	lsls	r3, r0, #29
 80019e2:	4319      	orrs	r1, r3
 80019e4:	0f4b      	lsrs	r3, r1, #29
 80019e6:	00c9      	lsls	r1, r1, #3
 80019e8:	075b      	lsls	r3, r3, #29
 80019ea:	08c9      	lsrs	r1, r1, #3
 80019ec:	4319      	orrs	r1, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	e62c      	b.n	800164c <__aeabi_dadd+0x294>
 80019f2:	4641      	mov	r1, r8
 80019f4:	4329      	orrs	r1, r5
 80019f6:	d000      	beq.n	80019fa <__aeabi_dadd+0x642>
 80019f8:	e5fa      	b.n	80015f0 <__aeabi_dadd+0x238>
 80019fa:	2300      	movs	r3, #0
 80019fc:	000a      	movs	r2, r1
 80019fe:	2400      	movs	r4, #0
 8001a00:	e602      	b.n	8001608 <__aeabi_dadd+0x250>
 8001a02:	076b      	lsls	r3, r5, #29
 8001a04:	08f9      	lsrs	r1, r7, #3
 8001a06:	4319      	orrs	r1, r3
 8001a08:	08eb      	lsrs	r3, r5, #3
 8001a0a:	e5fd      	b.n	8001608 <__aeabi_dadd+0x250>
 8001a0c:	4663      	mov	r3, ip
 8001a0e:	08f9      	lsrs	r1, r7, #3
 8001a10:	075b      	lsls	r3, r3, #29
 8001a12:	4319      	orrs	r1, r3
 8001a14:	4663      	mov	r3, ip
 8001a16:	0004      	movs	r4, r0
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	e617      	b.n	800164c <__aeabi_dadd+0x294>
 8001a1c:	003d      	movs	r5, r7
 8001a1e:	444d      	add	r5, r9
 8001a20:	4463      	add	r3, ip
 8001a22:	454d      	cmp	r5, r9
 8001a24:	4189      	sbcs	r1, r1
 8001a26:	4698      	mov	r8, r3
 8001a28:	4249      	negs	r1, r1
 8001a2a:	4488      	add	r8, r1
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	d400      	bmi.n	8001a34 <__aeabi_dadd+0x67c>
 8001a32:	e5dd      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001a34:	4642      	mov	r2, r8
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <__aeabi_dadd+0x6d0>)
 8001a38:	2601      	movs	r6, #1
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	e5d7      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001a40:	0010      	movs	r0, r2
 8001a42:	001e      	movs	r6, r3
 8001a44:	3820      	subs	r0, #32
 8001a46:	40c6      	lsrs	r6, r0
 8001a48:	2a20      	cmp	r2, #32
 8001a4a:	d005      	beq.n	8001a58 <__aeabi_dadd+0x6a0>
 8001a4c:	2040      	movs	r0, #64	; 0x40
 8001a4e:	1a82      	subs	r2, r0, r2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	464a      	mov	r2, r9
 8001a54:	431a      	orrs	r2, r3
 8001a56:	4691      	mov	r9, r2
 8001a58:	464d      	mov	r5, r9
 8001a5a:	1e6b      	subs	r3, r5, #1
 8001a5c:	419d      	sbcs	r5, r3
 8001a5e:	4335      	orrs	r5, r6
 8001a60:	e621      	b.n	80016a6 <__aeabi_dadd+0x2ee>
 8001a62:	0002      	movs	r2, r0
 8001a64:	2300      	movs	r3, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	e540      	b.n	80014ec <__aeabi_dadd+0x134>
 8001a6a:	464a      	mov	r2, r9
 8001a6c:	19d5      	adds	r5, r2, r7
 8001a6e:	42bd      	cmp	r5, r7
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4463      	add	r3, ip
 8001a74:	4698      	mov	r8, r3
 8001a76:	4249      	negs	r1, r1
 8001a78:	4488      	add	r8, r1
 8001a7a:	e5b3      	b.n	80015e4 <__aeabi_dadd+0x22c>
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4a01      	ldr	r2, [pc, #4]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001a80:	000b      	movs	r3, r1
 8001a82:	e533      	b.n	80014ec <__aeabi_dadd+0x134>
 8001a84:	000007ff 	.word	0x000007ff
 8001a88:	ff7fffff 	.word	0xff7fffff

08001a8c <__aeabi_ddiv>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	b5e0      	push	{r5, r6, r7, lr}
 8001a98:	4681      	mov	r9, r0
 8001a9a:	0005      	movs	r5, r0
 8001a9c:	030c      	lsls	r4, r1, #12
 8001a9e:	0048      	lsls	r0, r1, #1
 8001aa0:	4692      	mov	sl, r2
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	0b24      	lsrs	r4, r4, #12
 8001aa8:	0d40      	lsrs	r0, r0, #21
 8001aaa:	0fce      	lsrs	r6, r1, #31
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d059      	beq.n	8001b64 <__aeabi_ddiv+0xd8>
 8001ab0:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001ab2:	4298      	cmp	r0, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x2c>
 8001ab6:	e098      	b.n	8001bea <__aeabi_ddiv+0x15e>
 8001ab8:	0f6b      	lsrs	r3, r5, #29
 8001aba:	00e4      	lsls	r4, r4, #3
 8001abc:	431c      	orrs	r4, r3
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <__aeabi_ddiv+0x248>)
 8001ac8:	00ed      	lsls	r5, r5, #3
 8001aca:	469b      	mov	fp, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	4483      	add	fp, r0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	033c      	lsls	r4, r7, #12
 8001ad6:	007b      	lsls	r3, r7, #1
 8001ad8:	4650      	mov	r0, sl
 8001ada:	0b24      	lsrs	r4, r4, #12
 8001adc:	0d5b      	lsrs	r3, r3, #21
 8001ade:	0fff      	lsrs	r7, r7, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d067      	beq.n	8001bb4 <__aeabi_ddiv+0x128>
 8001ae4:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d018      	beq.n	8001b1c <__aeabi_ddiv+0x90>
 8001aea:	497a      	ldr	r1, [pc, #488]	; (8001cd4 <__aeabi_ddiv+0x248>)
 8001aec:	0f42      	lsrs	r2, r0, #29
 8001aee:	468c      	mov	ip, r1
 8001af0:	00e4      	lsls	r4, r4, #3
 8001af2:	4659      	mov	r1, fp
 8001af4:	4314      	orrs	r4, r2
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4463      	add	r3, ip
 8001afa:	0412      	lsls	r2, r2, #16
 8001afc:	1acb      	subs	r3, r1, r3
 8001afe:	4314      	orrs	r4, r2
 8001b00:	469b      	mov	fp, r3
 8001b02:	00c2      	lsls	r2, r0, #3
 8001b04:	2000      	movs	r0, #0
 8001b06:	0033      	movs	r3, r6
 8001b08:	407b      	eors	r3, r7
 8001b0a:	469a      	mov	sl, r3
 8001b0c:	464b      	mov	r3, r9
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	d900      	bls.n	8001b14 <__aeabi_ddiv+0x88>
 8001b12:	e0ef      	b.n	8001cf4 <__aeabi_ddiv+0x268>
 8001b14:	4970      	ldr	r1, [pc, #448]	; (8001cd8 <__aeabi_ddiv+0x24c>)
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	58cb      	ldr	r3, [r1, r3]
 8001b1a:	469f      	mov	pc, r3
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <__aeabi_ddiv+0x250>)
 8001b1e:	4652      	mov	r2, sl
 8001b20:	469c      	mov	ip, r3
 8001b22:	4322      	orrs	r2, r4
 8001b24:	44e3      	add	fp, ip
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d000      	beq.n	8001b2c <__aeabi_ddiv+0xa0>
 8001b2a:	e095      	b.n	8001c58 <__aeabi_ddiv+0x1cc>
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4319      	orrs	r1, r3
 8001b32:	4689      	mov	r9, r1
 8001b34:	2400      	movs	r4, #0
 8001b36:	2002      	movs	r0, #2
 8001b38:	e7e5      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	2500      	movs	r5, #0
 8001b40:	4652      	mov	r2, sl
 8001b42:	051b      	lsls	r3, r3, #20
 8001b44:	4323      	orrs	r3, r4
 8001b46:	07d2      	lsls	r2, r2, #31
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	0028      	movs	r0, r5
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	b005      	add	sp, #20
 8001b50:	bcf0      	pop	{r4, r5, r6, r7}
 8001b52:	46bb      	mov	fp, r7
 8001b54:	46b2      	mov	sl, r6
 8001b56:	46a9      	mov	r9, r5
 8001b58:	46a0      	mov	r8, r4
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	2500      	movs	r5, #0
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001b62:	e7ed      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001b64:	464b      	mov	r3, r9
 8001b66:	4323      	orrs	r3, r4
 8001b68:	4698      	mov	r8, r3
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_ddiv+0xe2>
 8001b6c:	e089      	b.n	8001c82 <__aeabi_ddiv+0x1f6>
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0xe8>
 8001b72:	e1e0      	b.n	8001f36 <__aeabi_ddiv+0x4aa>
 8001b74:	0020      	movs	r0, r4
 8001b76:	f001 fb41 	bl	80031fc <__clzsi2>
 8001b7a:	0001      	movs	r1, r0
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	390b      	subs	r1, #11
 8001b80:	231d      	movs	r3, #29
 8001b82:	1a5b      	subs	r3, r3, r1
 8001b84:	4649      	mov	r1, r9
 8001b86:	0010      	movs	r0, r2
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	3808      	subs	r0, #8
 8001b8c:	4084      	lsls	r4, r0
 8001b8e:	000b      	movs	r3, r1
 8001b90:	464d      	mov	r5, r9
 8001b92:	4323      	orrs	r3, r4
 8001b94:	4698      	mov	r8, r3
 8001b96:	4085      	lsls	r5, r0
 8001b98:	4851      	ldr	r0, [pc, #324]	; (8001ce0 <__aeabi_ddiv+0x254>)
 8001b9a:	033c      	lsls	r4, r7, #12
 8001b9c:	1a83      	subs	r3, r0, r2
 8001b9e:	469b      	mov	fp, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	007b      	lsls	r3, r7, #1
 8001ba8:	4650      	mov	r0, sl
 8001baa:	0b24      	lsrs	r4, r4, #12
 8001bac:	0d5b      	lsrs	r3, r3, #21
 8001bae:	0fff      	lsrs	r7, r7, #31
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d197      	bne.n	8001ae4 <__aeabi_ddiv+0x58>
 8001bb4:	4652      	mov	r2, sl
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	d055      	beq.n	8001c66 <__aeabi_ddiv+0x1da>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0x134>
 8001bbe:	e1ca      	b.n	8001f56 <__aeabi_ddiv+0x4ca>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	f001 fb1b 	bl	80031fc <__clzsi2>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	3a0b      	subs	r2, #11
 8001bca:	231d      	movs	r3, #29
 8001bcc:	0001      	movs	r1, r0
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	4652      	mov	r2, sl
 8001bd2:	3908      	subs	r1, #8
 8001bd4:	40da      	lsrs	r2, r3
 8001bd6:	408c      	lsls	r4, r1
 8001bd8:	4314      	orrs	r4, r2
 8001bda:	4652      	mov	r2, sl
 8001bdc:	408a      	lsls	r2, r1
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <__aeabi_ddiv+0x258>)
 8001be0:	4458      	add	r0, fp
 8001be2:	469b      	mov	fp, r3
 8001be4:	4483      	add	fp, r0
 8001be6:	2000      	movs	r0, #0
 8001be8:	e78d      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001bea:	464b      	mov	r3, r9
 8001bec:	4323      	orrs	r3, r4
 8001bee:	4698      	mov	r8, r3
 8001bf0:	d140      	bne.n	8001c74 <__aeabi_ddiv+0x1e8>
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	3b06      	subs	r3, #6
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	4683      	mov	fp, r0
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	e769      	b.n	8001ad4 <__aeabi_ddiv+0x48>
 8001c00:	46b2      	mov	sl, r6
 8001c02:	9b00      	ldr	r3, [sp, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d0a9      	beq.n	8001b5c <__aeabi_ddiv+0xd0>
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_ddiv+0x182>
 8001c0c:	e211      	b.n	8002032 <__aeabi_ddiv+0x5a6>
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d093      	beq.n	8001b3a <__aeabi_ddiv+0xae>
 8001c12:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <__aeabi_ddiv+0x25c>)
 8001c14:	445a      	add	r2, fp
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	dc00      	bgt.n	8001c1c <__aeabi_ddiv+0x190>
 8001c1a:	e13c      	b.n	8001e96 <__aeabi_ddiv+0x40a>
 8001c1c:	076b      	lsls	r3, r5, #29
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x196>
 8001c20:	e1a7      	b.n	8001f72 <__aeabi_ddiv+0x4e6>
 8001c22:	08ed      	lsrs	r5, r5, #3
 8001c24:	4643      	mov	r3, r8
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	d506      	bpl.n	8001c38 <__aeabi_ddiv+0x1ac>
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <__aeabi_ddiv+0x260>)
 8001c2e:	401a      	ands	r2, r3
 8001c30:	4690      	mov	r8, r2
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	445a      	add	r2, fp
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <__aeabi_ddiv+0x264>)
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dc8e      	bgt.n	8001b5c <__aeabi_ddiv+0xd0>
 8001c3e:	4643      	mov	r3, r8
 8001c40:	0552      	lsls	r2, r2, #21
 8001c42:	0758      	lsls	r0, r3, #29
 8001c44:	025c      	lsls	r4, r3, #9
 8001c46:	4305      	orrs	r5, r0
 8001c48:	0b24      	lsrs	r4, r4, #12
 8001c4a:	0d53      	lsrs	r3, r2, #21
 8001c4c:	e778      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001c4e:	46ba      	mov	sl, r7
 8001c50:	46a0      	mov	r8, r4
 8001c52:	0015      	movs	r5, r2
 8001c54:	9000      	str	r0, [sp, #0]
 8001c56:	e7d4      	b.n	8001c02 <__aeabi_ddiv+0x176>
 8001c58:	464a      	mov	r2, r9
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4691      	mov	r9, r2
 8001c60:	2003      	movs	r0, #3
 8001c62:	4652      	mov	r2, sl
 8001c64:	e74f      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001c66:	4649      	mov	r1, r9
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4319      	orrs	r1, r3
 8001c6c:	4689      	mov	r9, r1
 8001c6e:	2400      	movs	r4, #0
 8001c70:	2001      	movs	r0, #1
 8001c72:	e748      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001c74:	230c      	movs	r3, #12
 8001c76:	4699      	mov	r9, r3
 8001c78:	3b09      	subs	r3, #9
 8001c7a:	46a0      	mov	r8, r4
 8001c7c:	4683      	mov	fp, r0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	e728      	b.n	8001ad4 <__aeabi_ddiv+0x48>
 8001c82:	2304      	movs	r3, #4
 8001c84:	4699      	mov	r9, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	469b      	mov	fp, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	e720      	b.n	8001ad4 <__aeabi_ddiv+0x48>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2480      	movs	r4, #128	; 0x80
 8001c96:	469a      	mov	sl, r3
 8001c98:	2500      	movs	r5, #0
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	e74f      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	031b      	lsls	r3, r3, #12
 8001ca6:	4219      	tst	r1, r3
 8001ca8:	d008      	beq.n	8001cbc <__aeabi_ddiv+0x230>
 8001caa:	421c      	tst	r4, r3
 8001cac:	d106      	bne.n	8001cbc <__aeabi_ddiv+0x230>
 8001cae:	431c      	orrs	r4, r3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	46ba      	mov	sl, r7
 8001cb4:	0015      	movs	r5, r2
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001cb8:	0b24      	lsrs	r4, r4, #12
 8001cba:	e741      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001cbc:	2480      	movs	r4, #128	; 0x80
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	0324      	lsls	r4, r4, #12
 8001cc2:	431c      	orrs	r4, r3
 8001cc4:	0324      	lsls	r4, r4, #12
 8001cc6:	46b2      	mov	sl, r6
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	e738      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	000007ff 	.word	0x000007ff
 8001cd4:	fffffc01 	.word	0xfffffc01
 8001cd8:	08010320 	.word	0x08010320
 8001cdc:	fffff801 	.word	0xfffff801
 8001ce0:	fffffc0d 	.word	0xfffffc0d
 8001ce4:	000003f3 	.word	0x000003f3
 8001ce8:	000003ff 	.word	0x000003ff
 8001cec:	feffffff 	.word	0xfeffffff
 8001cf0:	000007fe 	.word	0x000007fe
 8001cf4:	4544      	cmp	r4, r8
 8001cf6:	d200      	bcs.n	8001cfa <__aeabi_ddiv+0x26e>
 8001cf8:	e116      	b.n	8001f28 <__aeabi_ddiv+0x49c>
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x272>
 8001cfc:	e111      	b.n	8001f22 <__aeabi_ddiv+0x496>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	425b      	negs	r3, r3
 8001d02:	469c      	mov	ip, r3
 8001d04:	002e      	movs	r6, r5
 8001d06:	4640      	mov	r0, r8
 8001d08:	2500      	movs	r5, #0
 8001d0a:	44e3      	add	fp, ip
 8001d0c:	0223      	lsls	r3, r4, #8
 8001d0e:	0e14      	lsrs	r4, r2, #24
 8001d10:	431c      	orrs	r4, r3
 8001d12:	0c1b      	lsrs	r3, r3, #16
 8001d14:	4699      	mov	r9, r3
 8001d16:	0423      	lsls	r3, r4, #16
 8001d18:	0c1f      	lsrs	r7, r3, #16
 8001d1a:	0212      	lsls	r2, r2, #8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	9200      	str	r2, [sp, #0]
 8001d20:	9701      	str	r7, [sp, #4]
 8001d22:	f7fe fa81 	bl	8000228 <__aeabi_uidivmod>
 8001d26:	0002      	movs	r2, r0
 8001d28:	437a      	muls	r2, r7
 8001d2a:	040b      	lsls	r3, r1, #16
 8001d2c:	0c31      	lsrs	r1, r6, #16
 8001d2e:	4680      	mov	r8, r0
 8001d30:	4319      	orrs	r1, r3
 8001d32:	428a      	cmp	r2, r1
 8001d34:	d90b      	bls.n	8001d4e <__aeabi_ddiv+0x2c2>
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	1909      	adds	r1, r1, r4
 8001d3e:	44e0      	add	r8, ip
 8001d40:	428c      	cmp	r4, r1
 8001d42:	d804      	bhi.n	8001d4e <__aeabi_ddiv+0x2c2>
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d902      	bls.n	8001d4e <__aeabi_ddiv+0x2c2>
 8001d48:	1e83      	subs	r3, r0, #2
 8001d4a:	4698      	mov	r8, r3
 8001d4c:	1909      	adds	r1, r1, r4
 8001d4e:	1a88      	subs	r0, r1, r2
 8001d50:	4649      	mov	r1, r9
 8001d52:	f7fe fa69 	bl	8000228 <__aeabi_uidivmod>
 8001d56:	0409      	lsls	r1, r1, #16
 8001d58:	468c      	mov	ip, r1
 8001d5a:	0431      	lsls	r1, r6, #16
 8001d5c:	4666      	mov	r6, ip
 8001d5e:	9a01      	ldr	r2, [sp, #4]
 8001d60:	0c09      	lsrs	r1, r1, #16
 8001d62:	4342      	muls	r2, r0
 8001d64:	0003      	movs	r3, r0
 8001d66:	4331      	orrs	r1, r6
 8001d68:	428a      	cmp	r2, r1
 8001d6a:	d904      	bls.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001d6c:	1909      	adds	r1, r1, r4
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	428c      	cmp	r4, r1
 8001d72:	d800      	bhi.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001d74:	e111      	b.n	8001f9a <__aeabi_ddiv+0x50e>
 8001d76:	1a89      	subs	r1, r1, r2
 8001d78:	4642      	mov	r2, r8
 8001d7a:	9e00      	ldr	r6, [sp, #0]
 8001d7c:	0412      	lsls	r2, r2, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	0c33      	lsrs	r3, r6, #16
 8001d82:	001f      	movs	r7, r3
 8001d84:	0c10      	lsrs	r0, r2, #16
 8001d86:	4690      	mov	r8, r2
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	0413      	lsls	r3, r2, #16
 8001d8c:	0432      	lsls	r2, r6, #16
 8001d8e:	0c16      	lsrs	r6, r2, #16
 8001d90:	0032      	movs	r2, r6
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	435a      	muls	r2, r3
 8001d96:	9603      	str	r6, [sp, #12]
 8001d98:	437b      	muls	r3, r7
 8001d9a:	4346      	muls	r6, r0
 8001d9c:	4378      	muls	r0, r7
 8001d9e:	0c17      	lsrs	r7, r2, #16
 8001da0:	46bc      	mov	ip, r7
 8001da2:	199b      	adds	r3, r3, r6
 8001da4:	4463      	add	r3, ip
 8001da6:	429e      	cmp	r6, r3
 8001da8:	d903      	bls.n	8001db2 <__aeabi_ddiv+0x326>
 8001daa:	2680      	movs	r6, #128	; 0x80
 8001dac:	0276      	lsls	r6, r6, #9
 8001dae:	46b4      	mov	ip, r6
 8001db0:	4460      	add	r0, ip
 8001db2:	0c1e      	lsrs	r6, r3, #16
 8001db4:	1830      	adds	r0, r6, r0
 8001db6:	0416      	lsls	r6, r2, #16
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	0c36      	lsrs	r6, r6, #16
 8001dbc:	199e      	adds	r6, r3, r6
 8001dbe:	4281      	cmp	r1, r0
 8001dc0:	d200      	bcs.n	8001dc4 <__aeabi_ddiv+0x338>
 8001dc2:	e09c      	b.n	8001efe <__aeabi_ddiv+0x472>
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001dc6:	e097      	b.n	8001ef8 <__aeabi_ddiv+0x46c>
 8001dc8:	1bae      	subs	r6, r5, r6
 8001dca:	1a09      	subs	r1, r1, r0
 8001dcc:	42b5      	cmp	r5, r6
 8001dce:	4180      	sbcs	r0, r0
 8001dd0:	4240      	negs	r0, r0
 8001dd2:	1a08      	subs	r0, r1, r0
 8001dd4:	4284      	cmp	r4, r0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x34e>
 8001dd8:	e111      	b.n	8001ffe <__aeabi_ddiv+0x572>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	f7fe fa24 	bl	8000228 <__aeabi_uidivmod>
 8001de0:	9a01      	ldr	r2, [sp, #4]
 8001de2:	040b      	lsls	r3, r1, #16
 8001de4:	4342      	muls	r2, r0
 8001de6:	0c31      	lsrs	r1, r6, #16
 8001de8:	0005      	movs	r5, r0
 8001dea:	4319      	orrs	r1, r3
 8001dec:	428a      	cmp	r2, r1
 8001dee:	d907      	bls.n	8001e00 <__aeabi_ddiv+0x374>
 8001df0:	1909      	adds	r1, r1, r4
 8001df2:	3d01      	subs	r5, #1
 8001df4:	428c      	cmp	r4, r1
 8001df6:	d803      	bhi.n	8001e00 <__aeabi_ddiv+0x374>
 8001df8:	428a      	cmp	r2, r1
 8001dfa:	d901      	bls.n	8001e00 <__aeabi_ddiv+0x374>
 8001dfc:	1e85      	subs	r5, r0, #2
 8001dfe:	1909      	adds	r1, r1, r4
 8001e00:	1a88      	subs	r0, r1, r2
 8001e02:	4649      	mov	r1, r9
 8001e04:	f7fe fa10 	bl	8000228 <__aeabi_uidivmod>
 8001e08:	0409      	lsls	r1, r1, #16
 8001e0a:	468c      	mov	ip, r1
 8001e0c:	0431      	lsls	r1, r6, #16
 8001e0e:	4666      	mov	r6, ip
 8001e10:	9a01      	ldr	r2, [sp, #4]
 8001e12:	0c09      	lsrs	r1, r1, #16
 8001e14:	4342      	muls	r2, r0
 8001e16:	0003      	movs	r3, r0
 8001e18:	4331      	orrs	r1, r6
 8001e1a:	428a      	cmp	r2, r1
 8001e1c:	d907      	bls.n	8001e2e <__aeabi_ddiv+0x3a2>
 8001e1e:	1909      	adds	r1, r1, r4
 8001e20:	3b01      	subs	r3, #1
 8001e22:	428c      	cmp	r4, r1
 8001e24:	d803      	bhi.n	8001e2e <__aeabi_ddiv+0x3a2>
 8001e26:	428a      	cmp	r2, r1
 8001e28:	d901      	bls.n	8001e2e <__aeabi_ddiv+0x3a2>
 8001e2a:	1e83      	subs	r3, r0, #2
 8001e2c:	1909      	adds	r1, r1, r4
 8001e2e:	9e03      	ldr	r6, [sp, #12]
 8001e30:	1a89      	subs	r1, r1, r2
 8001e32:	0032      	movs	r2, r6
 8001e34:	042d      	lsls	r5, r5, #16
 8001e36:	431d      	orrs	r5, r3
 8001e38:	9f02      	ldr	r7, [sp, #8]
 8001e3a:	042b      	lsls	r3, r5, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	435a      	muls	r2, r3
 8001e40:	437b      	muls	r3, r7
 8001e42:	469c      	mov	ip, r3
 8001e44:	0c28      	lsrs	r0, r5, #16
 8001e46:	4346      	muls	r6, r0
 8001e48:	0c13      	lsrs	r3, r2, #16
 8001e4a:	44b4      	add	ip, r6
 8001e4c:	4463      	add	r3, ip
 8001e4e:	4378      	muls	r0, r7
 8001e50:	429e      	cmp	r6, r3
 8001e52:	d903      	bls.n	8001e5c <__aeabi_ddiv+0x3d0>
 8001e54:	2680      	movs	r6, #128	; 0x80
 8001e56:	0276      	lsls	r6, r6, #9
 8001e58:	46b4      	mov	ip, r6
 8001e5a:	4460      	add	r0, ip
 8001e5c:	0c1e      	lsrs	r6, r3, #16
 8001e5e:	0412      	lsls	r2, r2, #16
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c12      	lsrs	r2, r2, #16
 8001e64:	1830      	adds	r0, r6, r0
 8001e66:	189b      	adds	r3, r3, r2
 8001e68:	4281      	cmp	r1, r0
 8001e6a:	d306      	bcc.n	8001e7a <__aeabi_ddiv+0x3ee>
 8001e6c:	d002      	beq.n	8001e74 <__aeabi_ddiv+0x3e8>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	431d      	orrs	r5, r3
 8001e72:	e6ce      	b.n	8001c12 <__aeabi_ddiv+0x186>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_ddiv+0x3ee>
 8001e78:	e6cb      	b.n	8001c12 <__aeabi_ddiv+0x186>
 8001e7a:	1861      	adds	r1, r4, r1
 8001e7c:	1e6e      	subs	r6, r5, #1
 8001e7e:	42a1      	cmp	r1, r4
 8001e80:	d200      	bcs.n	8001e84 <__aeabi_ddiv+0x3f8>
 8001e82:	e0a4      	b.n	8001fce <__aeabi_ddiv+0x542>
 8001e84:	4281      	cmp	r1, r0
 8001e86:	d200      	bcs.n	8001e8a <__aeabi_ddiv+0x3fe>
 8001e88:	e0c9      	b.n	800201e <__aeabi_ddiv+0x592>
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x402>
 8001e8c:	e0d9      	b.n	8002042 <__aeabi_ddiv+0x5b6>
 8001e8e:	0035      	movs	r5, r6
 8001e90:	e7ed      	b.n	8001e6e <__aeabi_ddiv+0x3e2>
 8001e92:	2501      	movs	r5, #1
 8001e94:	426d      	negs	r5, r5
 8001e96:	2101      	movs	r1, #1
 8001e98:	1a89      	subs	r1, r1, r2
 8001e9a:	2938      	cmp	r1, #56	; 0x38
 8001e9c:	dd00      	ble.n	8001ea0 <__aeabi_ddiv+0x414>
 8001e9e:	e64c      	b.n	8001b3a <__aeabi_ddiv+0xae>
 8001ea0:	291f      	cmp	r1, #31
 8001ea2:	dc00      	bgt.n	8001ea6 <__aeabi_ddiv+0x41a>
 8001ea4:	e07f      	b.n	8001fa6 <__aeabi_ddiv+0x51a>
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	1a9a      	subs	r2, r3, r2
 8001eac:	4643      	mov	r3, r8
 8001eae:	40d3      	lsrs	r3, r2
 8001eb0:	2920      	cmp	r1, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x432>
 8001eb4:	4644      	mov	r4, r8
 8001eb6:	4a65      	ldr	r2, [pc, #404]	; (800204c <__aeabi_ddiv+0x5c0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4094      	lsls	r4, r2
 8001ebc:	4325      	orrs	r5, r4
 8001ebe:	1e6a      	subs	r2, r5, #1
 8001ec0:	4195      	sbcs	r5, r2
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	432b      	orrs	r3, r5
 8001ec6:	0015      	movs	r5, r2
 8001ec8:	2400      	movs	r4, #0
 8001eca:	401d      	ands	r5, r3
 8001ecc:	421a      	tst	r2, r3
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_ddiv+0x446>
 8001ed0:	e0a1      	b.n	8002016 <__aeabi_ddiv+0x58a>
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	2a04      	cmp	r2, #4
 8001eda:	d100      	bne.n	8001ede <__aeabi_ddiv+0x452>
 8001edc:	e098      	b.n	8002010 <__aeabi_ddiv+0x584>
 8001ede:	1d1a      	adds	r2, r3, #4
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	419b      	sbcs	r3, r3
 8001ee4:	425b      	negs	r3, r3
 8001ee6:	18e4      	adds	r4, r4, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	0222      	lsls	r2, r4, #8
 8001eec:	d400      	bmi.n	8001ef0 <__aeabi_ddiv+0x464>
 8001eee:	e08f      	b.n	8002010 <__aeabi_ddiv+0x584>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	e623      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001ef8:	42b5      	cmp	r5, r6
 8001efa:	d300      	bcc.n	8001efe <__aeabi_ddiv+0x472>
 8001efc:	e764      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001efe:	4643      	mov	r3, r8
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	9b00      	ldr	r3, [sp, #0]
 8001f04:	469c      	mov	ip, r3
 8001f06:	4465      	add	r5, ip
 8001f08:	001f      	movs	r7, r3
 8001f0a:	429d      	cmp	r5, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	425b      	negs	r3, r3
 8001f10:	191b      	adds	r3, r3, r4
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	428c      	cmp	r4, r1
 8001f16:	d23a      	bcs.n	8001f8e <__aeabi_ddiv+0x502>
 8001f18:	4288      	cmp	r0, r1
 8001f1a:	d863      	bhi.n	8001fe4 <__aeabi_ddiv+0x558>
 8001f1c:	d060      	beq.n	8001fe0 <__aeabi_ddiv+0x554>
 8001f1e:	4690      	mov	r8, r2
 8001f20:	e752      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001f22:	42aa      	cmp	r2, r5
 8001f24:	d900      	bls.n	8001f28 <__aeabi_ddiv+0x49c>
 8001f26:	e6ea      	b.n	8001cfe <__aeabi_ddiv+0x272>
 8001f28:	4643      	mov	r3, r8
 8001f2a:	07de      	lsls	r6, r3, #31
 8001f2c:	0858      	lsrs	r0, r3, #1
 8001f2e:	086b      	lsrs	r3, r5, #1
 8001f30:	431e      	orrs	r6, r3
 8001f32:	07ed      	lsls	r5, r5, #31
 8001f34:	e6ea      	b.n	8001d0c <__aeabi_ddiv+0x280>
 8001f36:	4648      	mov	r0, r9
 8001f38:	f001 f960 	bl	80031fc <__clzsi2>
 8001f3c:	0001      	movs	r1, r0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	3115      	adds	r1, #21
 8001f42:	3220      	adds	r2, #32
 8001f44:	291c      	cmp	r1, #28
 8001f46:	dc00      	bgt.n	8001f4a <__aeabi_ddiv+0x4be>
 8001f48:	e61a      	b.n	8001b80 <__aeabi_ddiv+0xf4>
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	3808      	subs	r0, #8
 8001f4e:	4083      	lsls	r3, r0
 8001f50:	2500      	movs	r5, #0
 8001f52:	4698      	mov	r8, r3
 8001f54:	e620      	b.n	8001b98 <__aeabi_ddiv+0x10c>
 8001f56:	f001 f951 	bl	80031fc <__clzsi2>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	3215      	adds	r2, #21
 8001f60:	3020      	adds	r0, #32
 8001f62:	2a1c      	cmp	r2, #28
 8001f64:	dc00      	bgt.n	8001f68 <__aeabi_ddiv+0x4dc>
 8001f66:	e630      	b.n	8001bca <__aeabi_ddiv+0x13e>
 8001f68:	4654      	mov	r4, sl
 8001f6a:	3b08      	subs	r3, #8
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	409c      	lsls	r4, r3
 8001f70:	e635      	b.n	8001bde <__aeabi_ddiv+0x152>
 8001f72:	230f      	movs	r3, #15
 8001f74:	402b      	ands	r3, r5
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x4f0>
 8001f7a:	e652      	b.n	8001c22 <__aeabi_ddiv+0x196>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	425b      	negs	r3, r3
 8001f80:	42ab      	cmp	r3, r5
 8001f82:	419b      	sbcs	r3, r3
 8001f84:	3504      	adds	r5, #4
 8001f86:	425b      	negs	r3, r3
 8001f88:	08ed      	lsrs	r5, r5, #3
 8001f8a:	4498      	add	r8, r3
 8001f8c:	e64a      	b.n	8001c24 <__aeabi_ddiv+0x198>
 8001f8e:	428c      	cmp	r4, r1
 8001f90:	d1c5      	bne.n	8001f1e <__aeabi_ddiv+0x492>
 8001f92:	42af      	cmp	r7, r5
 8001f94:	d9c0      	bls.n	8001f18 <__aeabi_ddiv+0x48c>
 8001f96:	4690      	mov	r8, r2
 8001f98:	e716      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001f9a:	428a      	cmp	r2, r1
 8001f9c:	d800      	bhi.n	8001fa0 <__aeabi_ddiv+0x514>
 8001f9e:	e6ea      	b.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001fa0:	1e83      	subs	r3, r0, #2
 8001fa2:	1909      	adds	r1, r1, r4
 8001fa4:	e6e7      	b.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <__aeabi_ddiv+0x5c4>)
 8001fa8:	0028      	movs	r0, r5
 8001faa:	445a      	add	r2, fp
 8001fac:	4643      	mov	r3, r8
 8001fae:	4095      	lsls	r5, r2
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	40c8      	lsrs	r0, r1
 8001fb4:	1e6a      	subs	r2, r5, #1
 8001fb6:	4195      	sbcs	r5, r2
 8001fb8:	4644      	mov	r4, r8
 8001fba:	4303      	orrs	r3, r0
 8001fbc:	432b      	orrs	r3, r5
 8001fbe:	40cc      	lsrs	r4, r1
 8001fc0:	075a      	lsls	r2, r3, #29
 8001fc2:	d092      	beq.n	8001eea <__aeabi_ddiv+0x45e>
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	2a04      	cmp	r2, #4
 8001fca:	d188      	bne.n	8001ede <__aeabi_ddiv+0x452>
 8001fcc:	e78d      	b.n	8001eea <__aeabi_ddiv+0x45e>
 8001fce:	0035      	movs	r5, r6
 8001fd0:	4281      	cmp	r1, r0
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_ddiv+0x54a>
 8001fd4:	e74b      	b.n	8001e6e <__aeabi_ddiv+0x3e2>
 8001fd6:	9a00      	ldr	r2, [sp, #0]
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d000      	beq.n	8001fde <__aeabi_ddiv+0x552>
 8001fdc:	e747      	b.n	8001e6e <__aeabi_ddiv+0x3e2>
 8001fde:	e618      	b.n	8001c12 <__aeabi_ddiv+0x186>
 8001fe0:	42ae      	cmp	r6, r5
 8001fe2:	d99c      	bls.n	8001f1e <__aeabi_ddiv+0x492>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	425b      	negs	r3, r3
 8001fe8:	469c      	mov	ip, r3
 8001fea:	9b00      	ldr	r3, [sp, #0]
 8001fec:	44e0      	add	r8, ip
 8001fee:	469c      	mov	ip, r3
 8001ff0:	4465      	add	r5, ip
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	191b      	adds	r3, r3, r4
 8001ffa:	18c9      	adds	r1, r1, r3
 8001ffc:	e6e4      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <__aeabi_ddiv+0x5c8>)
 8002000:	445a      	add	r2, fp
 8002002:	2a00      	cmp	r2, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_ddiv+0x57c>
 8002006:	e744      	b.n	8001e92 <__aeabi_ddiv+0x406>
 8002008:	2301      	movs	r3, #1
 800200a:	2500      	movs	r5, #0
 800200c:	4498      	add	r8, r3
 800200e:	e609      	b.n	8001c24 <__aeabi_ddiv+0x198>
 8002010:	0765      	lsls	r5, r4, #29
 8002012:	0264      	lsls	r4, r4, #9
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	431d      	orrs	r5, r3
 800201a:	2300      	movs	r3, #0
 800201c:	e590      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 800201e:	9e00      	ldr	r6, [sp, #0]
 8002020:	3d02      	subs	r5, #2
 8002022:	0072      	lsls	r2, r6, #1
 8002024:	42b2      	cmp	r2, r6
 8002026:	41bf      	sbcs	r7, r7
 8002028:	427f      	negs	r7, r7
 800202a:	193c      	adds	r4, r7, r4
 800202c:	1909      	adds	r1, r1, r4
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	e7ce      	b.n	8001fd0 <__aeabi_ddiv+0x544>
 8002032:	2480      	movs	r4, #128	; 0x80
 8002034:	4643      	mov	r3, r8
 8002036:	0324      	lsls	r4, r4, #12
 8002038:	431c      	orrs	r4, r3
 800203a:	0324      	lsls	r4, r4, #12
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <__aeabi_ddiv+0x5cc>)
 800203e:	0b24      	lsrs	r4, r4, #12
 8002040:	e57e      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8002042:	9a00      	ldr	r2, [sp, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d3ea      	bcc.n	800201e <__aeabi_ddiv+0x592>
 8002048:	0035      	movs	r5, r6
 800204a:	e7c4      	b.n	8001fd6 <__aeabi_ddiv+0x54a>
 800204c:	0000043e 	.word	0x0000043e
 8002050:	0000041e 	.word	0x0000041e
 8002054:	000003ff 	.word	0x000003ff
 8002058:	000007ff 	.word	0x000007ff

0800205c <__eqdf2>:
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	464f      	mov	r7, r9
 8002060:	4646      	mov	r6, r8
 8002062:	46d6      	mov	lr, sl
 8002064:	4694      	mov	ip, r2
 8002066:	4691      	mov	r9, r2
 8002068:	031a      	lsls	r2, r3, #12
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	4d18      	ldr	r5, [pc, #96]	; (80020d0 <__eqdf2+0x74>)
 800206e:	b5c0      	push	{r6, r7, lr}
 8002070:	004c      	lsls	r4, r1, #1
 8002072:	030f      	lsls	r7, r1, #12
 8002074:	4692      	mov	sl, r2
 8002076:	005a      	lsls	r2, r3, #1
 8002078:	0006      	movs	r6, r0
 800207a:	4680      	mov	r8, r0
 800207c:	0b3f      	lsrs	r7, r7, #12
 800207e:	2001      	movs	r0, #1
 8002080:	0d64      	lsrs	r4, r4, #21
 8002082:	0fc9      	lsrs	r1, r1, #31
 8002084:	0d52      	lsrs	r2, r2, #21
 8002086:	0fdb      	lsrs	r3, r3, #31
 8002088:	42ac      	cmp	r4, r5
 800208a:	d00a      	beq.n	80020a2 <__eqdf2+0x46>
 800208c:	42aa      	cmp	r2, r5
 800208e:	d003      	beq.n	8002098 <__eqdf2+0x3c>
 8002090:	4294      	cmp	r4, r2
 8002092:	d101      	bne.n	8002098 <__eqdf2+0x3c>
 8002094:	4557      	cmp	r7, sl
 8002096:	d00d      	beq.n	80020b4 <__eqdf2+0x58>
 8002098:	bce0      	pop	{r5, r6, r7}
 800209a:	46ba      	mov	sl, r7
 800209c:	46b1      	mov	r9, r6
 800209e:	46a8      	mov	r8, r5
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a2:	003d      	movs	r5, r7
 80020a4:	4335      	orrs	r5, r6
 80020a6:	d1f7      	bne.n	8002098 <__eqdf2+0x3c>
 80020a8:	42a2      	cmp	r2, r4
 80020aa:	d1f5      	bne.n	8002098 <__eqdf2+0x3c>
 80020ac:	4652      	mov	r2, sl
 80020ae:	4665      	mov	r5, ip
 80020b0:	432a      	orrs	r2, r5
 80020b2:	d1f1      	bne.n	8002098 <__eqdf2+0x3c>
 80020b4:	2001      	movs	r0, #1
 80020b6:	45c8      	cmp	r8, r9
 80020b8:	d1ee      	bne.n	8002098 <__eqdf2+0x3c>
 80020ba:	4299      	cmp	r1, r3
 80020bc:	d006      	beq.n	80020cc <__eqdf2+0x70>
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d1ea      	bne.n	8002098 <__eqdf2+0x3c>
 80020c2:	433e      	orrs	r6, r7
 80020c4:	0030      	movs	r0, r6
 80020c6:	1e46      	subs	r6, r0, #1
 80020c8:	41b0      	sbcs	r0, r6
 80020ca:	e7e5      	b.n	8002098 <__eqdf2+0x3c>
 80020cc:	2000      	movs	r0, #0
 80020ce:	e7e3      	b.n	8002098 <__eqdf2+0x3c>
 80020d0:	000007ff 	.word	0x000007ff

080020d4 <__gedf2>:
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	464e      	mov	r6, r9
 80020d8:	4645      	mov	r5, r8
 80020da:	4657      	mov	r7, sl
 80020dc:	46de      	mov	lr, fp
 80020de:	0004      	movs	r4, r0
 80020e0:	0018      	movs	r0, r3
 80020e2:	b5e0      	push	{r5, r6, r7, lr}
 80020e4:	0016      	movs	r6, r2
 80020e6:	031b      	lsls	r3, r3, #12
 80020e8:	0b1b      	lsrs	r3, r3, #12
 80020ea:	4d32      	ldr	r5, [pc, #200]	; (80021b4 <__gedf2+0xe0>)
 80020ec:	030f      	lsls	r7, r1, #12
 80020ee:	004a      	lsls	r2, r1, #1
 80020f0:	4699      	mov	r9, r3
 80020f2:	0043      	lsls	r3, r0, #1
 80020f4:	46a4      	mov	ip, r4
 80020f6:	46b0      	mov	r8, r6
 80020f8:	0b3f      	lsrs	r7, r7, #12
 80020fa:	0d52      	lsrs	r2, r2, #21
 80020fc:	0fc9      	lsrs	r1, r1, #31
 80020fe:	0d5b      	lsrs	r3, r3, #21
 8002100:	0fc0      	lsrs	r0, r0, #31
 8002102:	42aa      	cmp	r2, r5
 8002104:	d029      	beq.n	800215a <__gedf2+0x86>
 8002106:	42ab      	cmp	r3, r5
 8002108:	d018      	beq.n	800213c <__gedf2+0x68>
 800210a:	2a00      	cmp	r2, #0
 800210c:	d12a      	bne.n	8002164 <__gedf2+0x90>
 800210e:	433c      	orrs	r4, r7
 8002110:	46a3      	mov	fp, r4
 8002112:	4265      	negs	r5, r4
 8002114:	4165      	adcs	r5, r4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <__gedf2+0x4c>
 800211a:	464c      	mov	r4, r9
 800211c:	4326      	orrs	r6, r4
 800211e:	d027      	beq.n	8002170 <__gedf2+0x9c>
 8002120:	2d00      	cmp	r5, #0
 8002122:	d115      	bne.n	8002150 <__gedf2+0x7c>
 8002124:	4281      	cmp	r1, r0
 8002126:	d028      	beq.n	800217a <__gedf2+0xa6>
 8002128:	2002      	movs	r0, #2
 800212a:	3901      	subs	r1, #1
 800212c:	4008      	ands	r0, r1
 800212e:	3801      	subs	r0, #1
 8002130:	bcf0      	pop	{r4, r5, r6, r7}
 8002132:	46bb      	mov	fp, r7
 8002134:	46b2      	mov	sl, r6
 8002136:	46a9      	mov	r9, r5
 8002138:	46a0      	mov	r8, r4
 800213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213c:	464d      	mov	r5, r9
 800213e:	432e      	orrs	r6, r5
 8002140:	d12f      	bne.n	80021a2 <__gedf2+0xce>
 8002142:	2a00      	cmp	r2, #0
 8002144:	d1ee      	bne.n	8002124 <__gedf2+0x50>
 8002146:	433c      	orrs	r4, r7
 8002148:	4265      	negs	r5, r4
 800214a:	4165      	adcs	r5, r4
 800214c:	2d00      	cmp	r5, #0
 800214e:	d0e9      	beq.n	8002124 <__gedf2+0x50>
 8002150:	2800      	cmp	r0, #0
 8002152:	d1ed      	bne.n	8002130 <__gedf2+0x5c>
 8002154:	2001      	movs	r0, #1
 8002156:	4240      	negs	r0, r0
 8002158:	e7ea      	b.n	8002130 <__gedf2+0x5c>
 800215a:	003d      	movs	r5, r7
 800215c:	4325      	orrs	r5, r4
 800215e:	d120      	bne.n	80021a2 <__gedf2+0xce>
 8002160:	4293      	cmp	r3, r2
 8002162:	d0eb      	beq.n	800213c <__gedf2+0x68>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1dd      	bne.n	8002124 <__gedf2+0x50>
 8002168:	464c      	mov	r4, r9
 800216a:	4326      	orrs	r6, r4
 800216c:	d1da      	bne.n	8002124 <__gedf2+0x50>
 800216e:	e7db      	b.n	8002128 <__gedf2+0x54>
 8002170:	465b      	mov	r3, fp
 8002172:	2000      	movs	r0, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0db      	beq.n	8002130 <__gedf2+0x5c>
 8002178:	e7d6      	b.n	8002128 <__gedf2+0x54>
 800217a:	429a      	cmp	r2, r3
 800217c:	dc0a      	bgt.n	8002194 <__gedf2+0xc0>
 800217e:	dbe7      	blt.n	8002150 <__gedf2+0x7c>
 8002180:	454f      	cmp	r7, r9
 8002182:	d8d1      	bhi.n	8002128 <__gedf2+0x54>
 8002184:	d010      	beq.n	80021a8 <__gedf2+0xd4>
 8002186:	2000      	movs	r0, #0
 8002188:	454f      	cmp	r7, r9
 800218a:	d2d1      	bcs.n	8002130 <__gedf2+0x5c>
 800218c:	2900      	cmp	r1, #0
 800218e:	d0e1      	beq.n	8002154 <__gedf2+0x80>
 8002190:	0008      	movs	r0, r1
 8002192:	e7cd      	b.n	8002130 <__gedf2+0x5c>
 8002194:	4243      	negs	r3, r0
 8002196:	4158      	adcs	r0, r3
 8002198:	2302      	movs	r3, #2
 800219a:	4240      	negs	r0, r0
 800219c:	4018      	ands	r0, r3
 800219e:	3801      	subs	r0, #1
 80021a0:	e7c6      	b.n	8002130 <__gedf2+0x5c>
 80021a2:	2002      	movs	r0, #2
 80021a4:	4240      	negs	r0, r0
 80021a6:	e7c3      	b.n	8002130 <__gedf2+0x5c>
 80021a8:	45c4      	cmp	ip, r8
 80021aa:	d8bd      	bhi.n	8002128 <__gedf2+0x54>
 80021ac:	2000      	movs	r0, #0
 80021ae:	45c4      	cmp	ip, r8
 80021b0:	d2be      	bcs.n	8002130 <__gedf2+0x5c>
 80021b2:	e7eb      	b.n	800218c <__gedf2+0xb8>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__ledf2>:
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	464e      	mov	r6, r9
 80021bc:	4645      	mov	r5, r8
 80021be:	4657      	mov	r7, sl
 80021c0:	46de      	mov	lr, fp
 80021c2:	0004      	movs	r4, r0
 80021c4:	0018      	movs	r0, r3
 80021c6:	b5e0      	push	{r5, r6, r7, lr}
 80021c8:	0016      	movs	r6, r2
 80021ca:	031b      	lsls	r3, r3, #12
 80021cc:	0b1b      	lsrs	r3, r3, #12
 80021ce:	4d31      	ldr	r5, [pc, #196]	; (8002294 <__ledf2+0xdc>)
 80021d0:	030f      	lsls	r7, r1, #12
 80021d2:	004a      	lsls	r2, r1, #1
 80021d4:	4699      	mov	r9, r3
 80021d6:	0043      	lsls	r3, r0, #1
 80021d8:	46a4      	mov	ip, r4
 80021da:	46b0      	mov	r8, r6
 80021dc:	0b3f      	lsrs	r7, r7, #12
 80021de:	0d52      	lsrs	r2, r2, #21
 80021e0:	0fc9      	lsrs	r1, r1, #31
 80021e2:	0d5b      	lsrs	r3, r3, #21
 80021e4:	0fc0      	lsrs	r0, r0, #31
 80021e6:	42aa      	cmp	r2, r5
 80021e8:	d011      	beq.n	800220e <__ledf2+0x56>
 80021ea:	42ab      	cmp	r3, r5
 80021ec:	d014      	beq.n	8002218 <__ledf2+0x60>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d12f      	bne.n	8002252 <__ledf2+0x9a>
 80021f2:	433c      	orrs	r4, r7
 80021f4:	46a3      	mov	fp, r4
 80021f6:	4265      	negs	r5, r4
 80021f8:	4165      	adcs	r5, r4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <__ledf2+0x70>
 80021fe:	464c      	mov	r4, r9
 8002200:	4326      	orrs	r6, r4
 8002202:	d111      	bne.n	8002228 <__ledf2+0x70>
 8002204:	465b      	mov	r3, fp
 8002206:	2000      	movs	r0, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <__ledf2+0x84>
 800220c:	e010      	b.n	8002230 <__ledf2+0x78>
 800220e:	003d      	movs	r5, r7
 8002210:	4325      	orrs	r5, r4
 8002212:	d112      	bne.n	800223a <__ledf2+0x82>
 8002214:	4293      	cmp	r3, r2
 8002216:	d11c      	bne.n	8002252 <__ledf2+0x9a>
 8002218:	464d      	mov	r5, r9
 800221a:	432e      	orrs	r6, r5
 800221c:	d10d      	bne.n	800223a <__ledf2+0x82>
 800221e:	2a00      	cmp	r2, #0
 8002220:	d104      	bne.n	800222c <__ledf2+0x74>
 8002222:	433c      	orrs	r4, r7
 8002224:	4265      	negs	r5, r4
 8002226:	4165      	adcs	r5, r4
 8002228:	2d00      	cmp	r5, #0
 800222a:	d10d      	bne.n	8002248 <__ledf2+0x90>
 800222c:	4281      	cmp	r1, r0
 800222e:	d016      	beq.n	800225e <__ledf2+0xa6>
 8002230:	2002      	movs	r0, #2
 8002232:	3901      	subs	r1, #1
 8002234:	4008      	ands	r0, r1
 8002236:	3801      	subs	r0, #1
 8002238:	e000      	b.n	800223c <__ledf2+0x84>
 800223a:	2002      	movs	r0, #2
 800223c:	bcf0      	pop	{r4, r5, r6, r7}
 800223e:	46bb      	mov	fp, r7
 8002240:	46b2      	mov	sl, r6
 8002242:	46a9      	mov	r9, r5
 8002244:	46a0      	mov	r8, r4
 8002246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002248:	2800      	cmp	r0, #0
 800224a:	d1f7      	bne.n	800223c <__ledf2+0x84>
 800224c:	2001      	movs	r0, #1
 800224e:	4240      	negs	r0, r0
 8002250:	e7f4      	b.n	800223c <__ledf2+0x84>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ea      	bne.n	800222c <__ledf2+0x74>
 8002256:	464c      	mov	r4, r9
 8002258:	4326      	orrs	r6, r4
 800225a:	d1e7      	bne.n	800222c <__ledf2+0x74>
 800225c:	e7e8      	b.n	8002230 <__ledf2+0x78>
 800225e:	429a      	cmp	r2, r3
 8002260:	dd06      	ble.n	8002270 <__ledf2+0xb8>
 8002262:	4243      	negs	r3, r0
 8002264:	4158      	adcs	r0, r3
 8002266:	2302      	movs	r3, #2
 8002268:	4240      	negs	r0, r0
 800226a:	4018      	ands	r0, r3
 800226c:	3801      	subs	r0, #1
 800226e:	e7e5      	b.n	800223c <__ledf2+0x84>
 8002270:	429a      	cmp	r2, r3
 8002272:	dbe9      	blt.n	8002248 <__ledf2+0x90>
 8002274:	454f      	cmp	r7, r9
 8002276:	d8db      	bhi.n	8002230 <__ledf2+0x78>
 8002278:	d006      	beq.n	8002288 <__ledf2+0xd0>
 800227a:	2000      	movs	r0, #0
 800227c:	454f      	cmp	r7, r9
 800227e:	d2dd      	bcs.n	800223c <__ledf2+0x84>
 8002280:	2900      	cmp	r1, #0
 8002282:	d0e3      	beq.n	800224c <__ledf2+0x94>
 8002284:	0008      	movs	r0, r1
 8002286:	e7d9      	b.n	800223c <__ledf2+0x84>
 8002288:	45c4      	cmp	ip, r8
 800228a:	d8d1      	bhi.n	8002230 <__ledf2+0x78>
 800228c:	2000      	movs	r0, #0
 800228e:	45c4      	cmp	ip, r8
 8002290:	d2d4      	bcs.n	800223c <__ledf2+0x84>
 8002292:	e7f5      	b.n	8002280 <__ledf2+0xc8>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dmul>:
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	4657      	mov	r7, sl
 800229c:	464e      	mov	r6, r9
 800229e:	4645      	mov	r5, r8
 80022a0:	46de      	mov	lr, fp
 80022a2:	b5e0      	push	{r5, r6, r7, lr}
 80022a4:	4698      	mov	r8, r3
 80022a6:	030c      	lsls	r4, r1, #12
 80022a8:	004b      	lsls	r3, r1, #1
 80022aa:	0006      	movs	r6, r0
 80022ac:	4692      	mov	sl, r2
 80022ae:	b087      	sub	sp, #28
 80022b0:	0b24      	lsrs	r4, r4, #12
 80022b2:	0d5b      	lsrs	r3, r3, #21
 80022b4:	0fcf      	lsrs	r7, r1, #31
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06c      	beq.n	8002394 <__aeabi_dmul+0xfc>
 80022ba:	4add      	ldr	r2, [pc, #884]	; (8002630 <__aeabi_dmul+0x398>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0x2a>
 80022c0:	e086      	b.n	80023d0 <__aeabi_dmul+0x138>
 80022c2:	0f42      	lsrs	r2, r0, #29
 80022c4:	00e4      	lsls	r4, r4, #3
 80022c6:	4314      	orrs	r4, r2
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	0412      	lsls	r2, r2, #16
 80022cc:	4314      	orrs	r4, r2
 80022ce:	4ad9      	ldr	r2, [pc, #868]	; (8002634 <__aeabi_dmul+0x39c>)
 80022d0:	00c5      	lsls	r5, r0, #3
 80022d2:	4694      	mov	ip, r2
 80022d4:	4463      	add	r3, ip
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	4699      	mov	r9, r3
 80022dc:	469b      	mov	fp, r3
 80022de:	4643      	mov	r3, r8
 80022e0:	4642      	mov	r2, r8
 80022e2:	031e      	lsls	r6, r3, #12
 80022e4:	0fd2      	lsrs	r2, r2, #31
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4650      	mov	r0, sl
 80022ea:	4690      	mov	r8, r2
 80022ec:	0b36      	lsrs	r6, r6, #12
 80022ee:	0d5b      	lsrs	r3, r3, #21
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dmul+0x5c>
 80022f2:	e078      	b.n	80023e6 <__aeabi_dmul+0x14e>
 80022f4:	4ace      	ldr	r2, [pc, #824]	; (8002630 <__aeabi_dmul+0x398>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01d      	beq.n	8002336 <__aeabi_dmul+0x9e>
 80022fa:	49ce      	ldr	r1, [pc, #824]	; (8002634 <__aeabi_dmul+0x39c>)
 80022fc:	0f42      	lsrs	r2, r0, #29
 80022fe:	468c      	mov	ip, r1
 8002300:	9900      	ldr	r1, [sp, #0]
 8002302:	4463      	add	r3, ip
 8002304:	00f6      	lsls	r6, r6, #3
 8002306:	468c      	mov	ip, r1
 8002308:	4316      	orrs	r6, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	449c      	add	ip, r3
 800230e:	0412      	lsls	r2, r2, #16
 8002310:	4663      	mov	r3, ip
 8002312:	4316      	orrs	r6, r2
 8002314:	00c2      	lsls	r2, r0, #3
 8002316:	2000      	movs	r0, #0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	9900      	ldr	r1, [sp, #0]
 800231c:	4643      	mov	r3, r8
 800231e:	3101      	adds	r1, #1
 8002320:	468c      	mov	ip, r1
 8002322:	4649      	mov	r1, r9
 8002324:	407b      	eors	r3, r7
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	290f      	cmp	r1, #15
 800232a:	d900      	bls.n	800232e <__aeabi_dmul+0x96>
 800232c:	e07e      	b.n	800242c <__aeabi_dmul+0x194>
 800232e:	4bc2      	ldr	r3, [pc, #776]	; (8002638 <__aeabi_dmul+0x3a0>)
 8002330:	0089      	lsls	r1, r1, #2
 8002332:	5859      	ldr	r1, [r3, r1]
 8002334:	468f      	mov	pc, r1
 8002336:	4652      	mov	r2, sl
 8002338:	9b00      	ldr	r3, [sp, #0]
 800233a:	4332      	orrs	r2, r6
 800233c:	d000      	beq.n	8002340 <__aeabi_dmul+0xa8>
 800233e:	e156      	b.n	80025ee <__aeabi_dmul+0x356>
 8002340:	49bb      	ldr	r1, [pc, #748]	; (8002630 <__aeabi_dmul+0x398>)
 8002342:	2600      	movs	r6, #0
 8002344:	468c      	mov	ip, r1
 8002346:	4463      	add	r3, ip
 8002348:	4649      	mov	r1, r9
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2302      	movs	r3, #2
 800234e:	4319      	orrs	r1, r3
 8002350:	4689      	mov	r9, r1
 8002352:	2002      	movs	r0, #2
 8002354:	e7e1      	b.n	800231a <__aeabi_dmul+0x82>
 8002356:	4643      	mov	r3, r8
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	0034      	movs	r4, r6
 800235c:	0015      	movs	r5, r2
 800235e:	4683      	mov	fp, r0
 8002360:	465b      	mov	r3, fp
 8002362:	2b02      	cmp	r3, #2
 8002364:	d05e      	beq.n	8002424 <__aeabi_dmul+0x18c>
 8002366:	2b03      	cmp	r3, #3
 8002368:	d100      	bne.n	800236c <__aeabi_dmul+0xd4>
 800236a:	e1f3      	b.n	8002754 <__aeabi_dmul+0x4bc>
 800236c:	2b01      	cmp	r3, #1
 800236e:	d000      	beq.n	8002372 <__aeabi_dmul+0xda>
 8002370:	e118      	b.n	80025a4 <__aeabi_dmul+0x30c>
 8002372:	2200      	movs	r2, #0
 8002374:	2400      	movs	r4, #0
 8002376:	2500      	movs	r5, #0
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	0512      	lsls	r2, r2, #20
 800237c:	4322      	orrs	r2, r4
 800237e:	07db      	lsls	r3, r3, #31
 8002380:	431a      	orrs	r2, r3
 8002382:	0028      	movs	r0, r5
 8002384:	0011      	movs	r1, r2
 8002386:	b007      	add	sp, #28
 8002388:	bcf0      	pop	{r4, r5, r6, r7}
 800238a:	46bb      	mov	fp, r7
 800238c:	46b2      	mov	sl, r6
 800238e:	46a9      	mov	r9, r5
 8002390:	46a0      	mov	r8, r4
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002394:	0025      	movs	r5, r4
 8002396:	4305      	orrs	r5, r0
 8002398:	d100      	bne.n	800239c <__aeabi_dmul+0x104>
 800239a:	e141      	b.n	8002620 <__aeabi_dmul+0x388>
 800239c:	2c00      	cmp	r4, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dmul+0x10a>
 80023a0:	e1ad      	b.n	80026fe <__aeabi_dmul+0x466>
 80023a2:	0020      	movs	r0, r4
 80023a4:	f000 ff2a 	bl	80031fc <__clzsi2>
 80023a8:	0001      	movs	r1, r0
 80023aa:	0002      	movs	r2, r0
 80023ac:	390b      	subs	r1, #11
 80023ae:	231d      	movs	r3, #29
 80023b0:	0010      	movs	r0, r2
 80023b2:	1a5b      	subs	r3, r3, r1
 80023b4:	0031      	movs	r1, r6
 80023b6:	0035      	movs	r5, r6
 80023b8:	3808      	subs	r0, #8
 80023ba:	4084      	lsls	r4, r0
 80023bc:	40d9      	lsrs	r1, r3
 80023be:	4085      	lsls	r5, r0
 80023c0:	430c      	orrs	r4, r1
 80023c2:	489e      	ldr	r0, [pc, #632]	; (800263c <__aeabi_dmul+0x3a4>)
 80023c4:	1a83      	subs	r3, r0, r2
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	4699      	mov	r9, r3
 80023cc:	469b      	mov	fp, r3
 80023ce:	e786      	b.n	80022de <__aeabi_dmul+0x46>
 80023d0:	0005      	movs	r5, r0
 80023d2:	4325      	orrs	r5, r4
 80023d4:	d000      	beq.n	80023d8 <__aeabi_dmul+0x140>
 80023d6:	e11c      	b.n	8002612 <__aeabi_dmul+0x37a>
 80023d8:	2208      	movs	r2, #8
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2302      	movs	r3, #2
 80023de:	2400      	movs	r4, #0
 80023e0:	4691      	mov	r9, r2
 80023e2:	469b      	mov	fp, r3
 80023e4:	e77b      	b.n	80022de <__aeabi_dmul+0x46>
 80023e6:	4652      	mov	r2, sl
 80023e8:	4332      	orrs	r2, r6
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x156>
 80023ec:	e10a      	b.n	8002604 <__aeabi_dmul+0x36c>
 80023ee:	2e00      	cmp	r6, #0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dmul+0x15c>
 80023f2:	e176      	b.n	80026e2 <__aeabi_dmul+0x44a>
 80023f4:	0030      	movs	r0, r6
 80023f6:	f000 ff01 	bl	80031fc <__clzsi2>
 80023fa:	0002      	movs	r2, r0
 80023fc:	3a0b      	subs	r2, #11
 80023fe:	231d      	movs	r3, #29
 8002400:	0001      	movs	r1, r0
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	4652      	mov	r2, sl
 8002406:	3908      	subs	r1, #8
 8002408:	40da      	lsrs	r2, r3
 800240a:	408e      	lsls	r6, r1
 800240c:	4316      	orrs	r6, r2
 800240e:	4652      	mov	r2, sl
 8002410:	408a      	lsls	r2, r1
 8002412:	9b00      	ldr	r3, [sp, #0]
 8002414:	4989      	ldr	r1, [pc, #548]	; (800263c <__aeabi_dmul+0x3a4>)
 8002416:	1a18      	subs	r0, r3, r0
 8002418:	0003      	movs	r3, r0
 800241a:	468c      	mov	ip, r1
 800241c:	4463      	add	r3, ip
 800241e:	2000      	movs	r0, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	e77a      	b.n	800231a <__aeabi_dmul+0x82>
 8002424:	2400      	movs	r4, #0
 8002426:	2500      	movs	r5, #0
 8002428:	4a81      	ldr	r2, [pc, #516]	; (8002630 <__aeabi_dmul+0x398>)
 800242a:	e7a5      	b.n	8002378 <__aeabi_dmul+0xe0>
 800242c:	0c2f      	lsrs	r7, r5, #16
 800242e:	042d      	lsls	r5, r5, #16
 8002430:	0c2d      	lsrs	r5, r5, #16
 8002432:	002b      	movs	r3, r5
 8002434:	0c11      	lsrs	r1, r2, #16
 8002436:	0412      	lsls	r2, r2, #16
 8002438:	0c12      	lsrs	r2, r2, #16
 800243a:	4353      	muls	r3, r2
 800243c:	4698      	mov	r8, r3
 800243e:	0013      	movs	r3, r2
 8002440:	0028      	movs	r0, r5
 8002442:	437b      	muls	r3, r7
 8002444:	4699      	mov	r9, r3
 8002446:	4348      	muls	r0, r1
 8002448:	4448      	add	r0, r9
 800244a:	4683      	mov	fp, r0
 800244c:	4640      	mov	r0, r8
 800244e:	000b      	movs	r3, r1
 8002450:	0c00      	lsrs	r0, r0, #16
 8002452:	4682      	mov	sl, r0
 8002454:	4658      	mov	r0, fp
 8002456:	437b      	muls	r3, r7
 8002458:	4450      	add	r0, sl
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	4581      	cmp	r9, r0
 800245e:	d906      	bls.n	800246e <__aeabi_dmul+0x1d6>
 8002460:	469a      	mov	sl, r3
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	025b      	lsls	r3, r3, #9
 8002466:	4699      	mov	r9, r3
 8002468:	44ca      	add	sl, r9
 800246a:	4653      	mov	r3, sl
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	0c03      	lsrs	r3, r0, #16
 8002470:	469b      	mov	fp, r3
 8002472:	4643      	mov	r3, r8
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	0400      	lsls	r0, r0, #16
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	4698      	mov	r8, r3
 800247c:	0003      	movs	r3, r0
 800247e:	4443      	add	r3, r8
 8002480:	9304      	str	r3, [sp, #16]
 8002482:	0c33      	lsrs	r3, r6, #16
 8002484:	4699      	mov	r9, r3
 8002486:	002b      	movs	r3, r5
 8002488:	0436      	lsls	r6, r6, #16
 800248a:	0c36      	lsrs	r6, r6, #16
 800248c:	4373      	muls	r3, r6
 800248e:	4698      	mov	r8, r3
 8002490:	0033      	movs	r3, r6
 8002492:	437b      	muls	r3, r7
 8002494:	469a      	mov	sl, r3
 8002496:	464b      	mov	r3, r9
 8002498:	435d      	muls	r5, r3
 800249a:	435f      	muls	r7, r3
 800249c:	4643      	mov	r3, r8
 800249e:	4455      	add	r5, sl
 80024a0:	0c18      	lsrs	r0, r3, #16
 80024a2:	1940      	adds	r0, r0, r5
 80024a4:	4582      	cmp	sl, r0
 80024a6:	d903      	bls.n	80024b0 <__aeabi_dmul+0x218>
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	469a      	mov	sl, r3
 80024ae:	4457      	add	r7, sl
 80024b0:	0c05      	lsrs	r5, r0, #16
 80024b2:	19eb      	adds	r3, r5, r7
 80024b4:	9305      	str	r3, [sp, #20]
 80024b6:	4643      	mov	r3, r8
 80024b8:	041d      	lsls	r5, r3, #16
 80024ba:	0c2d      	lsrs	r5, r5, #16
 80024bc:	0400      	lsls	r0, r0, #16
 80024be:	1940      	adds	r0, r0, r5
 80024c0:	0c25      	lsrs	r5, r4, #16
 80024c2:	0424      	lsls	r4, r4, #16
 80024c4:	0c24      	lsrs	r4, r4, #16
 80024c6:	0027      	movs	r7, r4
 80024c8:	4357      	muls	r7, r2
 80024ca:	436a      	muls	r2, r5
 80024cc:	4690      	mov	r8, r2
 80024ce:	002a      	movs	r2, r5
 80024d0:	0c3b      	lsrs	r3, r7, #16
 80024d2:	469a      	mov	sl, r3
 80024d4:	434a      	muls	r2, r1
 80024d6:	4361      	muls	r1, r4
 80024d8:	4441      	add	r1, r8
 80024da:	4451      	add	r1, sl
 80024dc:	4483      	add	fp, r0
 80024de:	4588      	cmp	r8, r1
 80024e0:	d903      	bls.n	80024ea <__aeabi_dmul+0x252>
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	4698      	mov	r8, r3
 80024e8:	4442      	add	r2, r8
 80024ea:	043f      	lsls	r7, r7, #16
 80024ec:	0c0b      	lsrs	r3, r1, #16
 80024ee:	0c3f      	lsrs	r7, r7, #16
 80024f0:	0409      	lsls	r1, r1, #16
 80024f2:	19c9      	adds	r1, r1, r7
 80024f4:	0027      	movs	r7, r4
 80024f6:	4698      	mov	r8, r3
 80024f8:	464b      	mov	r3, r9
 80024fa:	4377      	muls	r7, r6
 80024fc:	435c      	muls	r4, r3
 80024fe:	436e      	muls	r6, r5
 8002500:	435d      	muls	r5, r3
 8002502:	0c3b      	lsrs	r3, r7, #16
 8002504:	4699      	mov	r9, r3
 8002506:	19a4      	adds	r4, r4, r6
 8002508:	444c      	add	r4, r9
 800250a:	4442      	add	r2, r8
 800250c:	9503      	str	r5, [sp, #12]
 800250e:	42a6      	cmp	r6, r4
 8002510:	d904      	bls.n	800251c <__aeabi_dmul+0x284>
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	4698      	mov	r8, r3
 8002518:	4445      	add	r5, r8
 800251a:	9503      	str	r5, [sp, #12]
 800251c:	9b02      	ldr	r3, [sp, #8]
 800251e:	043f      	lsls	r7, r7, #16
 8002520:	445b      	add	r3, fp
 8002522:	001e      	movs	r6, r3
 8002524:	4283      	cmp	r3, r0
 8002526:	4180      	sbcs	r0, r0
 8002528:	0423      	lsls	r3, r4, #16
 800252a:	4698      	mov	r8, r3
 800252c:	9b05      	ldr	r3, [sp, #20]
 800252e:	0c3f      	lsrs	r7, r7, #16
 8002530:	4447      	add	r7, r8
 8002532:	4698      	mov	r8, r3
 8002534:	1876      	adds	r6, r6, r1
 8002536:	428e      	cmp	r6, r1
 8002538:	4189      	sbcs	r1, r1
 800253a:	4447      	add	r7, r8
 800253c:	4240      	negs	r0, r0
 800253e:	183d      	adds	r5, r7, r0
 8002540:	46a8      	mov	r8, r5
 8002542:	4693      	mov	fp, r2
 8002544:	4249      	negs	r1, r1
 8002546:	468a      	mov	sl, r1
 8002548:	44c3      	add	fp, r8
 800254a:	429f      	cmp	r7, r3
 800254c:	41bf      	sbcs	r7, r7
 800254e:	4580      	cmp	r8, r0
 8002550:	4180      	sbcs	r0, r0
 8002552:	9b03      	ldr	r3, [sp, #12]
 8002554:	44da      	add	sl, fp
 8002556:	4698      	mov	r8, r3
 8002558:	4653      	mov	r3, sl
 800255a:	4240      	negs	r0, r0
 800255c:	427f      	negs	r7, r7
 800255e:	4307      	orrs	r7, r0
 8002560:	0c24      	lsrs	r4, r4, #16
 8002562:	4593      	cmp	fp, r2
 8002564:	4192      	sbcs	r2, r2
 8002566:	458a      	cmp	sl, r1
 8002568:	4189      	sbcs	r1, r1
 800256a:	193f      	adds	r7, r7, r4
 800256c:	0ddc      	lsrs	r4, r3, #23
 800256e:	9b04      	ldr	r3, [sp, #16]
 8002570:	0275      	lsls	r5, r6, #9
 8002572:	431d      	orrs	r5, r3
 8002574:	1e68      	subs	r0, r5, #1
 8002576:	4185      	sbcs	r5, r0
 8002578:	4653      	mov	r3, sl
 800257a:	4252      	negs	r2, r2
 800257c:	4249      	negs	r1, r1
 800257e:	430a      	orrs	r2, r1
 8002580:	18bf      	adds	r7, r7, r2
 8002582:	4447      	add	r7, r8
 8002584:	0df6      	lsrs	r6, r6, #23
 8002586:	027f      	lsls	r7, r7, #9
 8002588:	4335      	orrs	r5, r6
 800258a:	025a      	lsls	r2, r3, #9
 800258c:	433c      	orrs	r4, r7
 800258e:	4315      	orrs	r5, r2
 8002590:	01fb      	lsls	r3, r7, #7
 8002592:	d400      	bmi.n	8002596 <__aeabi_dmul+0x2fe>
 8002594:	e0c1      	b.n	800271a <__aeabi_dmul+0x482>
 8002596:	2101      	movs	r1, #1
 8002598:	086a      	lsrs	r2, r5, #1
 800259a:	400d      	ands	r5, r1
 800259c:	4315      	orrs	r5, r2
 800259e:	07e2      	lsls	r2, r4, #31
 80025a0:	4315      	orrs	r5, r2
 80025a2:	0864      	lsrs	r4, r4, #1
 80025a4:	4926      	ldr	r1, [pc, #152]	; (8002640 <__aeabi_dmul+0x3a8>)
 80025a6:	4461      	add	r1, ip
 80025a8:	2900      	cmp	r1, #0
 80025aa:	dd56      	ble.n	800265a <__aeabi_dmul+0x3c2>
 80025ac:	076b      	lsls	r3, r5, #29
 80025ae:	d009      	beq.n	80025c4 <__aeabi_dmul+0x32c>
 80025b0:	220f      	movs	r2, #15
 80025b2:	402a      	ands	r2, r5
 80025b4:	2a04      	cmp	r2, #4
 80025b6:	d005      	beq.n	80025c4 <__aeabi_dmul+0x32c>
 80025b8:	1d2a      	adds	r2, r5, #4
 80025ba:	42aa      	cmp	r2, r5
 80025bc:	41ad      	sbcs	r5, r5
 80025be:	426d      	negs	r5, r5
 80025c0:	1964      	adds	r4, r4, r5
 80025c2:	0015      	movs	r5, r2
 80025c4:	01e3      	lsls	r3, r4, #7
 80025c6:	d504      	bpl.n	80025d2 <__aeabi_dmul+0x33a>
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <__aeabi_dmul+0x3ac>)
 80025cc:	00c9      	lsls	r1, r1, #3
 80025ce:	4014      	ands	r4, r2
 80025d0:	4461      	add	r1, ip
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <__aeabi_dmul+0x3b0>)
 80025d4:	4291      	cmp	r1, r2
 80025d6:	dd00      	ble.n	80025da <__aeabi_dmul+0x342>
 80025d8:	e724      	b.n	8002424 <__aeabi_dmul+0x18c>
 80025da:	0762      	lsls	r2, r4, #29
 80025dc:	08ed      	lsrs	r5, r5, #3
 80025de:	0264      	lsls	r4, r4, #9
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	4315      	orrs	r5, r2
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d4a      	lsrs	r2, r1, #21
 80025e8:	e6c6      	b.n	8002378 <__aeabi_dmul+0xe0>
 80025ea:	9701      	str	r7, [sp, #4]
 80025ec:	e6b8      	b.n	8002360 <__aeabi_dmul+0xc8>
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <__aeabi_dmul+0x398>)
 80025f0:	2003      	movs	r0, #3
 80025f2:	4694      	mov	ip, r2
 80025f4:	4463      	add	r3, ip
 80025f6:	464a      	mov	r2, r9
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2303      	movs	r3, #3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	4691      	mov	r9, r2
 8002600:	4652      	mov	r2, sl
 8002602:	e68a      	b.n	800231a <__aeabi_dmul+0x82>
 8002604:	4649      	mov	r1, r9
 8002606:	2301      	movs	r3, #1
 8002608:	4319      	orrs	r1, r3
 800260a:	4689      	mov	r9, r1
 800260c:	2600      	movs	r6, #0
 800260e:	2001      	movs	r0, #1
 8002610:	e683      	b.n	800231a <__aeabi_dmul+0x82>
 8002612:	220c      	movs	r2, #12
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2303      	movs	r3, #3
 8002618:	0005      	movs	r5, r0
 800261a:	4691      	mov	r9, r2
 800261c:	469b      	mov	fp, r3
 800261e:	e65e      	b.n	80022de <__aeabi_dmul+0x46>
 8002620:	2304      	movs	r3, #4
 8002622:	4699      	mov	r9, r3
 8002624:	2300      	movs	r3, #0
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	2400      	movs	r4, #0
 800262c:	469b      	mov	fp, r3
 800262e:	e656      	b.n	80022de <__aeabi_dmul+0x46>
 8002630:	000007ff 	.word	0x000007ff
 8002634:	fffffc01 	.word	0xfffffc01
 8002638:	08010360 	.word	0x08010360
 800263c:	fffffc0d 	.word	0xfffffc0d
 8002640:	000003ff 	.word	0x000003ff
 8002644:	feffffff 	.word	0xfeffffff
 8002648:	000007fe 	.word	0x000007fe
 800264c:	2300      	movs	r3, #0
 800264e:	2480      	movs	r4, #128	; 0x80
 8002650:	2500      	movs	r5, #0
 8002652:	4a44      	ldr	r2, [pc, #272]	; (8002764 <__aeabi_dmul+0x4cc>)
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	0324      	lsls	r4, r4, #12
 8002658:	e68e      	b.n	8002378 <__aeabi_dmul+0xe0>
 800265a:	2001      	movs	r0, #1
 800265c:	1a40      	subs	r0, r0, r1
 800265e:	2838      	cmp	r0, #56	; 0x38
 8002660:	dd00      	ble.n	8002664 <__aeabi_dmul+0x3cc>
 8002662:	e686      	b.n	8002372 <__aeabi_dmul+0xda>
 8002664:	281f      	cmp	r0, #31
 8002666:	dd5b      	ble.n	8002720 <__aeabi_dmul+0x488>
 8002668:	221f      	movs	r2, #31
 800266a:	0023      	movs	r3, r4
 800266c:	4252      	negs	r2, r2
 800266e:	1a51      	subs	r1, r2, r1
 8002670:	40cb      	lsrs	r3, r1
 8002672:	0019      	movs	r1, r3
 8002674:	2820      	cmp	r0, #32
 8002676:	d003      	beq.n	8002680 <__aeabi_dmul+0x3e8>
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <__aeabi_dmul+0x4d0>)
 800267a:	4462      	add	r2, ip
 800267c:	4094      	lsls	r4, r2
 800267e:	4325      	orrs	r5, r4
 8002680:	1e6a      	subs	r2, r5, #1
 8002682:	4195      	sbcs	r5, r2
 8002684:	002a      	movs	r2, r5
 8002686:	430a      	orrs	r2, r1
 8002688:	2107      	movs	r1, #7
 800268a:	000d      	movs	r5, r1
 800268c:	2400      	movs	r4, #0
 800268e:	4015      	ands	r5, r2
 8002690:	4211      	tst	r1, r2
 8002692:	d05b      	beq.n	800274c <__aeabi_dmul+0x4b4>
 8002694:	210f      	movs	r1, #15
 8002696:	2400      	movs	r4, #0
 8002698:	4011      	ands	r1, r2
 800269a:	2904      	cmp	r1, #4
 800269c:	d053      	beq.n	8002746 <__aeabi_dmul+0x4ae>
 800269e:	1d11      	adds	r1, r2, #4
 80026a0:	4291      	cmp	r1, r2
 80026a2:	4192      	sbcs	r2, r2
 80026a4:	4252      	negs	r2, r2
 80026a6:	18a4      	adds	r4, r4, r2
 80026a8:	000a      	movs	r2, r1
 80026aa:	0223      	lsls	r3, r4, #8
 80026ac:	d54b      	bpl.n	8002746 <__aeabi_dmul+0x4ae>
 80026ae:	2201      	movs	r2, #1
 80026b0:	2400      	movs	r4, #0
 80026b2:	2500      	movs	r5, #0
 80026b4:	e660      	b.n	8002378 <__aeabi_dmul+0xe0>
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	031b      	lsls	r3, r3, #12
 80026ba:	421c      	tst	r4, r3
 80026bc:	d009      	beq.n	80026d2 <__aeabi_dmul+0x43a>
 80026be:	421e      	tst	r6, r3
 80026c0:	d107      	bne.n	80026d2 <__aeabi_dmul+0x43a>
 80026c2:	4333      	orrs	r3, r6
 80026c4:	031c      	lsls	r4, r3, #12
 80026c6:	4643      	mov	r3, r8
 80026c8:	0015      	movs	r5, r2
 80026ca:	0b24      	lsrs	r4, r4, #12
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <__aeabi_dmul+0x4cc>)
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	e652      	b.n	8002378 <__aeabi_dmul+0xe0>
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0312      	lsls	r2, r2, #12
 80026d6:	4314      	orrs	r4, r2
 80026d8:	0324      	lsls	r4, r4, #12
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <__aeabi_dmul+0x4cc>)
 80026dc:	0b24      	lsrs	r4, r4, #12
 80026de:	9701      	str	r7, [sp, #4]
 80026e0:	e64a      	b.n	8002378 <__aeabi_dmul+0xe0>
 80026e2:	f000 fd8b 	bl	80031fc <__clzsi2>
 80026e6:	0003      	movs	r3, r0
 80026e8:	001a      	movs	r2, r3
 80026ea:	3215      	adds	r2, #21
 80026ec:	3020      	adds	r0, #32
 80026ee:	2a1c      	cmp	r2, #28
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x45c>
 80026f2:	e684      	b.n	80023fe <__aeabi_dmul+0x166>
 80026f4:	4656      	mov	r6, sl
 80026f6:	3b08      	subs	r3, #8
 80026f8:	2200      	movs	r2, #0
 80026fa:	409e      	lsls	r6, r3
 80026fc:	e689      	b.n	8002412 <__aeabi_dmul+0x17a>
 80026fe:	f000 fd7d 	bl	80031fc <__clzsi2>
 8002702:	0001      	movs	r1, r0
 8002704:	0002      	movs	r2, r0
 8002706:	3115      	adds	r1, #21
 8002708:	3220      	adds	r2, #32
 800270a:	291c      	cmp	r1, #28
 800270c:	dc00      	bgt.n	8002710 <__aeabi_dmul+0x478>
 800270e:	e64e      	b.n	80023ae <__aeabi_dmul+0x116>
 8002710:	0034      	movs	r4, r6
 8002712:	3808      	subs	r0, #8
 8002714:	2500      	movs	r5, #0
 8002716:	4084      	lsls	r4, r0
 8002718:	e653      	b.n	80023c2 <__aeabi_dmul+0x12a>
 800271a:	9b00      	ldr	r3, [sp, #0]
 800271c:	469c      	mov	ip, r3
 800271e:	e741      	b.n	80025a4 <__aeabi_dmul+0x30c>
 8002720:	4912      	ldr	r1, [pc, #72]	; (800276c <__aeabi_dmul+0x4d4>)
 8002722:	0022      	movs	r2, r4
 8002724:	4461      	add	r1, ip
 8002726:	002e      	movs	r6, r5
 8002728:	408d      	lsls	r5, r1
 800272a:	408a      	lsls	r2, r1
 800272c:	40c6      	lsrs	r6, r0
 800272e:	1e69      	subs	r1, r5, #1
 8002730:	418d      	sbcs	r5, r1
 8002732:	4332      	orrs	r2, r6
 8002734:	432a      	orrs	r2, r5
 8002736:	40c4      	lsrs	r4, r0
 8002738:	0753      	lsls	r3, r2, #29
 800273a:	d0b6      	beq.n	80026aa <__aeabi_dmul+0x412>
 800273c:	210f      	movs	r1, #15
 800273e:	4011      	ands	r1, r2
 8002740:	2904      	cmp	r1, #4
 8002742:	d1ac      	bne.n	800269e <__aeabi_dmul+0x406>
 8002744:	e7b1      	b.n	80026aa <__aeabi_dmul+0x412>
 8002746:	0765      	lsls	r5, r4, #29
 8002748:	0264      	lsls	r4, r4, #9
 800274a:	0b24      	lsrs	r4, r4, #12
 800274c:	08d2      	lsrs	r2, r2, #3
 800274e:	4315      	orrs	r5, r2
 8002750:	2200      	movs	r2, #0
 8002752:	e611      	b.n	8002378 <__aeabi_dmul+0xe0>
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0312      	lsls	r2, r2, #12
 8002758:	4314      	orrs	r4, r2
 800275a:	0324      	lsls	r4, r4, #12
 800275c:	4a01      	ldr	r2, [pc, #4]	; (8002764 <__aeabi_dmul+0x4cc>)
 800275e:	0b24      	lsrs	r4, r4, #12
 8002760:	e60a      	b.n	8002378 <__aeabi_dmul+0xe0>
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	000007ff 	.word	0x000007ff
 8002768:	0000043e 	.word	0x0000043e
 800276c:	0000041e 	.word	0x0000041e

08002770 <__aeabi_dsub>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	4657      	mov	r7, sl
 8002774:	464e      	mov	r6, r9
 8002776:	4645      	mov	r5, r8
 8002778:	46de      	mov	lr, fp
 800277a:	0004      	movs	r4, r0
 800277c:	b5e0      	push	{r5, r6, r7, lr}
 800277e:	001f      	movs	r7, r3
 8002780:	0010      	movs	r0, r2
 8002782:	030b      	lsls	r3, r1, #12
 8002784:	0f62      	lsrs	r2, r4, #29
 8002786:	004e      	lsls	r6, r1, #1
 8002788:	0fcd      	lsrs	r5, r1, #31
 800278a:	0a5b      	lsrs	r3, r3, #9
 800278c:	0339      	lsls	r1, r7, #12
 800278e:	4313      	orrs	r3, r2
 8002790:	0a49      	lsrs	r1, r1, #9
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	0f44      	lsrs	r4, r0, #29
 8002796:	4321      	orrs	r1, r4
 8002798:	4cc2      	ldr	r4, [pc, #776]	; (8002aa4 <__aeabi_dsub+0x334>)
 800279a:	4691      	mov	r9, r2
 800279c:	4692      	mov	sl, r2
 800279e:	00c0      	lsls	r0, r0, #3
 80027a0:	007a      	lsls	r2, r7, #1
 80027a2:	4680      	mov	r8, r0
 80027a4:	0d76      	lsrs	r6, r6, #21
 80027a6:	0d52      	lsrs	r2, r2, #21
 80027a8:	0fff      	lsrs	r7, r7, #31
 80027aa:	42a2      	cmp	r2, r4
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x40>
 80027ae:	e0b4      	b.n	800291a <__aeabi_dsub+0x1aa>
 80027b0:	2401      	movs	r4, #1
 80027b2:	4067      	eors	r7, r4
 80027b4:	46bb      	mov	fp, r7
 80027b6:	42bd      	cmp	r5, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dsub+0x4c>
 80027ba:	e088      	b.n	80028ce <__aeabi_dsub+0x15e>
 80027bc:	1ab4      	subs	r4, r6, r2
 80027be:	46a4      	mov	ip, r4
 80027c0:	2c00      	cmp	r4, #0
 80027c2:	dc00      	bgt.n	80027c6 <__aeabi_dsub+0x56>
 80027c4:	e0b2      	b.n	800292c <__aeabi_dsub+0x1bc>
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x5c>
 80027ca:	e0c5      	b.n	8002958 <__aeabi_dsub+0x1e8>
 80027cc:	4ab5      	ldr	r2, [pc, #724]	; (8002aa4 <__aeabi_dsub+0x334>)
 80027ce:	4296      	cmp	r6, r2
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x64>
 80027d2:	e28b      	b.n	8002cec <__aeabi_dsub+0x57c>
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0412      	lsls	r2, r2, #16
 80027d8:	4311      	orrs	r1, r2
 80027da:	4662      	mov	r2, ip
 80027dc:	2a38      	cmp	r2, #56	; 0x38
 80027de:	dd00      	ble.n	80027e2 <__aeabi_dsub+0x72>
 80027e0:	e1a1      	b.n	8002b26 <__aeabi_dsub+0x3b6>
 80027e2:	2a1f      	cmp	r2, #31
 80027e4:	dd00      	ble.n	80027e8 <__aeabi_dsub+0x78>
 80027e6:	e216      	b.n	8002c16 <__aeabi_dsub+0x4a6>
 80027e8:	2720      	movs	r7, #32
 80027ea:	000c      	movs	r4, r1
 80027ec:	1abf      	subs	r7, r7, r2
 80027ee:	40bc      	lsls	r4, r7
 80027f0:	0002      	movs	r2, r0
 80027f2:	46a0      	mov	r8, r4
 80027f4:	4664      	mov	r4, ip
 80027f6:	40b8      	lsls	r0, r7
 80027f8:	40e2      	lsrs	r2, r4
 80027fa:	4644      	mov	r4, r8
 80027fc:	4314      	orrs	r4, r2
 80027fe:	0002      	movs	r2, r0
 8002800:	1e50      	subs	r0, r2, #1
 8002802:	4182      	sbcs	r2, r0
 8002804:	4660      	mov	r0, ip
 8002806:	40c1      	lsrs	r1, r0
 8002808:	4322      	orrs	r2, r4
 800280a:	1a5b      	subs	r3, r3, r1
 800280c:	4649      	mov	r1, r9
 800280e:	1a8c      	subs	r4, r1, r2
 8002810:	45a1      	cmp	r9, r4
 8002812:	4192      	sbcs	r2, r2
 8002814:	4252      	negs	r2, r2
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	4698      	mov	r8, r3
 800281a:	4643      	mov	r3, r8
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	d400      	bmi.n	8002822 <__aeabi_dsub+0xb2>
 8002820:	e117      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002822:	4643      	mov	r3, r8
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	0a5b      	lsrs	r3, r3, #9
 8002828:	4698      	mov	r8, r3
 800282a:	4643      	mov	r3, r8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d100      	bne.n	8002832 <__aeabi_dsub+0xc2>
 8002830:	e16c      	b.n	8002b0c <__aeabi_dsub+0x39c>
 8002832:	4640      	mov	r0, r8
 8002834:	f000 fce2 	bl	80031fc <__clzsi2>
 8002838:	0002      	movs	r2, r0
 800283a:	3a08      	subs	r2, #8
 800283c:	2120      	movs	r1, #32
 800283e:	0020      	movs	r0, r4
 8002840:	4643      	mov	r3, r8
 8002842:	1a89      	subs	r1, r1, r2
 8002844:	4093      	lsls	r3, r2
 8002846:	40c8      	lsrs	r0, r1
 8002848:	4094      	lsls	r4, r2
 800284a:	4303      	orrs	r3, r0
 800284c:	4296      	cmp	r6, r2
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0xe2>
 8002850:	e157      	b.n	8002b02 <__aeabi_dsub+0x392>
 8002852:	1b96      	subs	r6, r2, r6
 8002854:	1c71      	adds	r1, r6, #1
 8002856:	291f      	cmp	r1, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0xec>
 800285a:	e1cb      	b.n	8002bf4 <__aeabi_dsub+0x484>
 800285c:	2220      	movs	r2, #32
 800285e:	0018      	movs	r0, r3
 8002860:	0026      	movs	r6, r4
 8002862:	1a52      	subs	r2, r2, r1
 8002864:	4094      	lsls	r4, r2
 8002866:	4090      	lsls	r0, r2
 8002868:	40ce      	lsrs	r6, r1
 800286a:	40cb      	lsrs	r3, r1
 800286c:	1e62      	subs	r2, r4, #1
 800286e:	4194      	sbcs	r4, r2
 8002870:	4330      	orrs	r0, r6
 8002872:	4698      	mov	r8, r3
 8002874:	2600      	movs	r6, #0
 8002876:	4304      	orrs	r4, r0
 8002878:	0763      	lsls	r3, r4, #29
 800287a:	d009      	beq.n	8002890 <__aeabi_dsub+0x120>
 800287c:	230f      	movs	r3, #15
 800287e:	4023      	ands	r3, r4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d005      	beq.n	8002890 <__aeabi_dsub+0x120>
 8002884:	1d23      	adds	r3, r4, #4
 8002886:	42a3      	cmp	r3, r4
 8002888:	41a4      	sbcs	r4, r4
 800288a:	4264      	negs	r4, r4
 800288c:	44a0      	add	r8, r4
 800288e:	001c      	movs	r4, r3
 8002890:	4643      	mov	r3, r8
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	d400      	bmi.n	8002898 <__aeabi_dsub+0x128>
 8002896:	e0df      	b.n	8002a58 <__aeabi_dsub+0x2e8>
 8002898:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <__aeabi_dsub+0x334>)
 800289a:	3601      	adds	r6, #1
 800289c:	429e      	cmp	r6, r3
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x132>
 80028a0:	e0fb      	b.n	8002a9a <__aeabi_dsub+0x32a>
 80028a2:	4642      	mov	r2, r8
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <__aeabi_dsub+0x338>)
 80028a6:	08e4      	lsrs	r4, r4, #3
 80028a8:	401a      	ands	r2, r3
 80028aa:	0013      	movs	r3, r2
 80028ac:	0571      	lsls	r1, r6, #21
 80028ae:	0752      	lsls	r2, r2, #29
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	4322      	orrs	r2, r4
 80028b4:	0b1b      	lsrs	r3, r3, #12
 80028b6:	0d49      	lsrs	r1, r1, #21
 80028b8:	0509      	lsls	r1, r1, #20
 80028ba:	07ed      	lsls	r5, r5, #31
 80028bc:	4319      	orrs	r1, r3
 80028be:	4329      	orrs	r1, r5
 80028c0:	0010      	movs	r0, r2
 80028c2:	bcf0      	pop	{r4, r5, r6, r7}
 80028c4:	46bb      	mov	fp, r7
 80028c6:	46b2      	mov	sl, r6
 80028c8:	46a9      	mov	r9, r5
 80028ca:	46a0      	mov	r8, r4
 80028cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ce:	1ab4      	subs	r4, r6, r2
 80028d0:	46a4      	mov	ip, r4
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	dd58      	ble.n	8002988 <__aeabi_dsub+0x218>
 80028d6:	2a00      	cmp	r2, #0
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x16c>
 80028da:	e09e      	b.n	8002a1a <__aeabi_dsub+0x2aa>
 80028dc:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <__aeabi_dsub+0x334>)
 80028de:	4296      	cmp	r6, r2
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x174>
 80028e2:	e13b      	b.n	8002b5c <__aeabi_dsub+0x3ec>
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0412      	lsls	r2, r2, #16
 80028e8:	4311      	orrs	r1, r2
 80028ea:	4662      	mov	r2, ip
 80028ec:	2a38      	cmp	r2, #56	; 0x38
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0x182>
 80028f0:	e0c1      	b.n	8002a76 <__aeabi_dsub+0x306>
 80028f2:	2a1f      	cmp	r2, #31
 80028f4:	dc00      	bgt.n	80028f8 <__aeabi_dsub+0x188>
 80028f6:	e1bb      	b.n	8002c70 <__aeabi_dsub+0x500>
 80028f8:	000c      	movs	r4, r1
 80028fa:	3a20      	subs	r2, #32
 80028fc:	40d4      	lsrs	r4, r2
 80028fe:	0022      	movs	r2, r4
 8002900:	4664      	mov	r4, ip
 8002902:	2c20      	cmp	r4, #32
 8002904:	d004      	beq.n	8002910 <__aeabi_dsub+0x1a0>
 8002906:	2740      	movs	r7, #64	; 0x40
 8002908:	1b3f      	subs	r7, r7, r4
 800290a:	40b9      	lsls	r1, r7
 800290c:	4308      	orrs	r0, r1
 800290e:	4680      	mov	r8, r0
 8002910:	4644      	mov	r4, r8
 8002912:	1e61      	subs	r1, r4, #1
 8002914:	418c      	sbcs	r4, r1
 8002916:	4314      	orrs	r4, r2
 8002918:	e0b1      	b.n	8002a7e <__aeabi_dsub+0x30e>
 800291a:	000c      	movs	r4, r1
 800291c:	4304      	orrs	r4, r0
 800291e:	d02a      	beq.n	8002976 <__aeabi_dsub+0x206>
 8002920:	46bb      	mov	fp, r7
 8002922:	42bd      	cmp	r5, r7
 8002924:	d02d      	beq.n	8002982 <__aeabi_dsub+0x212>
 8002926:	4c61      	ldr	r4, [pc, #388]	; (8002aac <__aeabi_dsub+0x33c>)
 8002928:	46a4      	mov	ip, r4
 800292a:	44b4      	add	ip, r6
 800292c:	4664      	mov	r4, ip
 800292e:	2c00      	cmp	r4, #0
 8002930:	d05c      	beq.n	80029ec <__aeabi_dsub+0x27c>
 8002932:	1b94      	subs	r4, r2, r6
 8002934:	46a4      	mov	ip, r4
 8002936:	2e00      	cmp	r6, #0
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x1cc>
 800293a:	e115      	b.n	8002b68 <__aeabi_dsub+0x3f8>
 800293c:	464d      	mov	r5, r9
 800293e:	431d      	orrs	r5, r3
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x1d4>
 8002942:	e1c3      	b.n	8002ccc <__aeabi_dsub+0x55c>
 8002944:	1e65      	subs	r5, r4, #1
 8002946:	2c01      	cmp	r4, #1
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x1dc>
 800294a:	e20c      	b.n	8002d66 <__aeabi_dsub+0x5f6>
 800294c:	4e55      	ldr	r6, [pc, #340]	; (8002aa4 <__aeabi_dsub+0x334>)
 800294e:	42b4      	cmp	r4, r6
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x1e4>
 8002952:	e1f8      	b.n	8002d46 <__aeabi_dsub+0x5d6>
 8002954:	46ac      	mov	ip, r5
 8002956:	e10e      	b.n	8002b76 <__aeabi_dsub+0x406>
 8002958:	000a      	movs	r2, r1
 800295a:	4302      	orrs	r2, r0
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x1f0>
 800295e:	e136      	b.n	8002bce <__aeabi_dsub+0x45e>
 8002960:	0022      	movs	r2, r4
 8002962:	3a01      	subs	r2, #1
 8002964:	2c01      	cmp	r4, #1
 8002966:	d100      	bne.n	800296a <__aeabi_dsub+0x1fa>
 8002968:	e1c6      	b.n	8002cf8 <__aeabi_dsub+0x588>
 800296a:	4c4e      	ldr	r4, [pc, #312]	; (8002aa4 <__aeabi_dsub+0x334>)
 800296c:	45a4      	cmp	ip, r4
 800296e:	d100      	bne.n	8002972 <__aeabi_dsub+0x202>
 8002970:	e0f4      	b.n	8002b5c <__aeabi_dsub+0x3ec>
 8002972:	4694      	mov	ip, r2
 8002974:	e731      	b.n	80027da <__aeabi_dsub+0x6a>
 8002976:	2401      	movs	r4, #1
 8002978:	4067      	eors	r7, r4
 800297a:	46bb      	mov	fp, r7
 800297c:	42bd      	cmp	r5, r7
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x212>
 8002980:	e71c      	b.n	80027bc <__aeabi_dsub+0x4c>
 8002982:	4c4a      	ldr	r4, [pc, #296]	; (8002aac <__aeabi_dsub+0x33c>)
 8002984:	46a4      	mov	ip, r4
 8002986:	44b4      	add	ip, r6
 8002988:	4664      	mov	r4, ip
 800298a:	2c00      	cmp	r4, #0
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x220>
 800298e:	e0cf      	b.n	8002b30 <__aeabi_dsub+0x3c0>
 8002990:	1b94      	subs	r4, r2, r6
 8002992:	46a4      	mov	ip, r4
 8002994:	2e00      	cmp	r6, #0
 8002996:	d100      	bne.n	800299a <__aeabi_dsub+0x22a>
 8002998:	e15c      	b.n	8002c54 <__aeabi_dsub+0x4e4>
 800299a:	4e42      	ldr	r6, [pc, #264]	; (8002aa4 <__aeabi_dsub+0x334>)
 800299c:	42b2      	cmp	r2, r6
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x232>
 80029a0:	e1ec      	b.n	8002d7c <__aeabi_dsub+0x60c>
 80029a2:	2680      	movs	r6, #128	; 0x80
 80029a4:	0436      	lsls	r6, r6, #16
 80029a6:	4333      	orrs	r3, r6
 80029a8:	4664      	mov	r4, ip
 80029aa:	2c38      	cmp	r4, #56	; 0x38
 80029ac:	dd00      	ble.n	80029b0 <__aeabi_dsub+0x240>
 80029ae:	e1b3      	b.n	8002d18 <__aeabi_dsub+0x5a8>
 80029b0:	2c1f      	cmp	r4, #31
 80029b2:	dd00      	ble.n	80029b6 <__aeabi_dsub+0x246>
 80029b4:	e238      	b.n	8002e28 <__aeabi_dsub+0x6b8>
 80029b6:	2620      	movs	r6, #32
 80029b8:	1b36      	subs	r6, r6, r4
 80029ba:	001c      	movs	r4, r3
 80029bc:	40b4      	lsls	r4, r6
 80029be:	464f      	mov	r7, r9
 80029c0:	46a0      	mov	r8, r4
 80029c2:	4664      	mov	r4, ip
 80029c4:	40e7      	lsrs	r7, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	433c      	orrs	r4, r7
 80029ca:	464f      	mov	r7, r9
 80029cc:	40b7      	lsls	r7, r6
 80029ce:	003e      	movs	r6, r7
 80029d0:	1e77      	subs	r7, r6, #1
 80029d2:	41be      	sbcs	r6, r7
 80029d4:	4334      	orrs	r4, r6
 80029d6:	4666      	mov	r6, ip
 80029d8:	40f3      	lsrs	r3, r6
 80029da:	18c9      	adds	r1, r1, r3
 80029dc:	1824      	adds	r4, r4, r0
 80029de:	4284      	cmp	r4, r0
 80029e0:	419b      	sbcs	r3, r3
 80029e2:	425b      	negs	r3, r3
 80029e4:	4698      	mov	r8, r3
 80029e6:	0016      	movs	r6, r2
 80029e8:	4488      	add	r8, r1
 80029ea:	e04e      	b.n	8002a8a <__aeabi_dsub+0x31a>
 80029ec:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <__aeabi_dsub+0x340>)
 80029ee:	1c74      	adds	r4, r6, #1
 80029f0:	4214      	tst	r4, r2
 80029f2:	d000      	beq.n	80029f6 <__aeabi_dsub+0x286>
 80029f4:	e0d6      	b.n	8002ba4 <__aeabi_dsub+0x434>
 80029f6:	464a      	mov	r2, r9
 80029f8:	431a      	orrs	r2, r3
 80029fa:	2e00      	cmp	r6, #0
 80029fc:	d000      	beq.n	8002a00 <__aeabi_dsub+0x290>
 80029fe:	e15b      	b.n	8002cb8 <__aeabi_dsub+0x548>
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dsub+0x296>
 8002a04:	e1a5      	b.n	8002d52 <__aeabi_dsub+0x5e2>
 8002a06:	000a      	movs	r2, r1
 8002a08:	4302      	orrs	r2, r0
 8002a0a:	d000      	beq.n	8002a0e <__aeabi_dsub+0x29e>
 8002a0c:	e1bb      	b.n	8002d86 <__aeabi_dsub+0x616>
 8002a0e:	464a      	mov	r2, r9
 8002a10:	0759      	lsls	r1, r3, #29
 8002a12:	08d2      	lsrs	r2, r2, #3
 8002a14:	430a      	orrs	r2, r1
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	e027      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	d100      	bne.n	8002a22 <__aeabi_dsub+0x2b2>
 8002a20:	e174      	b.n	8002d0c <__aeabi_dsub+0x59c>
 8002a22:	0022      	movs	r2, r4
 8002a24:	3a01      	subs	r2, #1
 8002a26:	2c01      	cmp	r4, #1
 8002a28:	d005      	beq.n	8002a36 <__aeabi_dsub+0x2c6>
 8002a2a:	4c1e      	ldr	r4, [pc, #120]	; (8002aa4 <__aeabi_dsub+0x334>)
 8002a2c:	45a4      	cmp	ip, r4
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x2c2>
 8002a30:	e094      	b.n	8002b5c <__aeabi_dsub+0x3ec>
 8002a32:	4694      	mov	ip, r2
 8002a34:	e759      	b.n	80028ea <__aeabi_dsub+0x17a>
 8002a36:	4448      	add	r0, r9
 8002a38:	4548      	cmp	r0, r9
 8002a3a:	4192      	sbcs	r2, r2
 8002a3c:	185b      	adds	r3, r3, r1
 8002a3e:	4698      	mov	r8, r3
 8002a40:	0004      	movs	r4, r0
 8002a42:	4252      	negs	r2, r2
 8002a44:	4490      	add	r8, r2
 8002a46:	4643      	mov	r3, r8
 8002a48:	2602      	movs	r6, #2
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	d500      	bpl.n	8002a50 <__aeabi_dsub+0x2e0>
 8002a4e:	e0c4      	b.n	8002bda <__aeabi_dsub+0x46a>
 8002a50:	3e01      	subs	r6, #1
 8002a52:	0763      	lsls	r3, r4, #29
 8002a54:	d000      	beq.n	8002a58 <__aeabi_dsub+0x2e8>
 8002a56:	e711      	b.n	800287c <__aeabi_dsub+0x10c>
 8002a58:	4643      	mov	r3, r8
 8002a5a:	46b4      	mov	ip, r6
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	08e2      	lsrs	r2, r4, #3
 8002a60:	430a      	orrs	r2, r1
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	490f      	ldr	r1, [pc, #60]	; (8002aa4 <__aeabi_dsub+0x334>)
 8002a66:	458c      	cmp	ip, r1
 8002a68:	d040      	beq.n	8002aec <__aeabi_dsub+0x37c>
 8002a6a:	4661      	mov	r1, ip
 8002a6c:	031b      	lsls	r3, r3, #12
 8002a6e:	0549      	lsls	r1, r1, #21
 8002a70:	0b1b      	lsrs	r3, r3, #12
 8002a72:	0d49      	lsrs	r1, r1, #21
 8002a74:	e720      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002a76:	4301      	orrs	r1, r0
 8002a78:	000c      	movs	r4, r1
 8002a7a:	1e61      	subs	r1, r4, #1
 8002a7c:	418c      	sbcs	r4, r1
 8002a7e:	444c      	add	r4, r9
 8002a80:	454c      	cmp	r4, r9
 8002a82:	4192      	sbcs	r2, r2
 8002a84:	4252      	negs	r2, r2
 8002a86:	4690      	mov	r8, r2
 8002a88:	4498      	add	r8, r3
 8002a8a:	4643      	mov	r3, r8
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	d5e0      	bpl.n	8002a52 <__aeabi_dsub+0x2e2>
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <__aeabi_dsub+0x334>)
 8002a92:	3601      	adds	r6, #1
 8002a94:	429e      	cmp	r6, r3
 8002a96:	d000      	beq.n	8002a9a <__aeabi_dsub+0x32a>
 8002a98:	e09f      	b.n	8002bda <__aeabi_dsub+0x46a>
 8002a9a:	0031      	movs	r1, r6
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	e70a      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	000007ff 	.word	0x000007ff
 8002aa8:	ff7fffff 	.word	0xff7fffff
 8002aac:	fffff801 	.word	0xfffff801
 8002ab0:	000007fe 	.word	0x000007fe
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x34a>
 8002ab8:	e160      	b.n	8002d7c <__aeabi_dsub+0x60c>
 8002aba:	000a      	movs	r2, r1
 8002abc:	4302      	orrs	r2, r0
 8002abe:	d04d      	beq.n	8002b5c <__aeabi_dsub+0x3ec>
 8002ac0:	464a      	mov	r2, r9
 8002ac2:	075c      	lsls	r4, r3, #29
 8002ac4:	08d2      	lsrs	r2, r2, #3
 8002ac6:	4322      	orrs	r2, r4
 8002ac8:	2480      	movs	r4, #128	; 0x80
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	0324      	lsls	r4, r4, #12
 8002ace:	4223      	tst	r3, r4
 8002ad0:	d007      	beq.n	8002ae2 <__aeabi_dsub+0x372>
 8002ad2:	08ce      	lsrs	r6, r1, #3
 8002ad4:	4226      	tst	r6, r4
 8002ad6:	d104      	bne.n	8002ae2 <__aeabi_dsub+0x372>
 8002ad8:	465d      	mov	r5, fp
 8002ada:	0033      	movs	r3, r6
 8002adc:	08c2      	lsrs	r2, r0, #3
 8002ade:	0749      	lsls	r1, r1, #29
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	0f51      	lsrs	r1, r2, #29
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	08d2      	lsrs	r2, r2, #3
 8002ae8:	0749      	lsls	r1, r1, #29
 8002aea:	430a      	orrs	r2, r1
 8002aec:	0011      	movs	r1, r2
 8002aee:	4319      	orrs	r1, r3
 8002af0:	d100      	bne.n	8002af4 <__aeabi_dsub+0x384>
 8002af2:	e1c8      	b.n	8002e86 <__aeabi_dsub+0x716>
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0309      	lsls	r1, r1, #12
 8002af8:	430b      	orrs	r3, r1
 8002afa:	031b      	lsls	r3, r3, #12
 8002afc:	49d5      	ldr	r1, [pc, #852]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002afe:	0b1b      	lsrs	r3, r3, #12
 8002b00:	e6da      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002b02:	49d5      	ldr	r1, [pc, #852]	; (8002e58 <__aeabi_dsub+0x6e8>)
 8002b04:	1ab6      	subs	r6, r6, r2
 8002b06:	400b      	ands	r3, r1
 8002b08:	4698      	mov	r8, r3
 8002b0a:	e6b5      	b.n	8002878 <__aeabi_dsub+0x108>
 8002b0c:	0020      	movs	r0, r4
 8002b0e:	f000 fb75 	bl	80031fc <__clzsi2>
 8002b12:	0002      	movs	r2, r0
 8002b14:	3218      	adds	r2, #24
 8002b16:	2a1f      	cmp	r2, #31
 8002b18:	dc00      	bgt.n	8002b1c <__aeabi_dsub+0x3ac>
 8002b1a:	e68f      	b.n	800283c <__aeabi_dsub+0xcc>
 8002b1c:	0023      	movs	r3, r4
 8002b1e:	3808      	subs	r0, #8
 8002b20:	4083      	lsls	r3, r0
 8002b22:	2400      	movs	r4, #0
 8002b24:	e692      	b.n	800284c <__aeabi_dsub+0xdc>
 8002b26:	4308      	orrs	r0, r1
 8002b28:	0002      	movs	r2, r0
 8002b2a:	1e50      	subs	r0, r2, #1
 8002b2c:	4182      	sbcs	r2, r0
 8002b2e:	e66d      	b.n	800280c <__aeabi_dsub+0x9c>
 8002b30:	4cca      	ldr	r4, [pc, #808]	; (8002e5c <__aeabi_dsub+0x6ec>)
 8002b32:	1c72      	adds	r2, r6, #1
 8002b34:	4222      	tst	r2, r4
 8002b36:	d000      	beq.n	8002b3a <__aeabi_dsub+0x3ca>
 8002b38:	e0ad      	b.n	8002c96 <__aeabi_dsub+0x526>
 8002b3a:	464a      	mov	r2, r9
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	2e00      	cmp	r6, #0
 8002b40:	d1b8      	bne.n	8002ab4 <__aeabi_dsub+0x344>
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	d100      	bne.n	8002b48 <__aeabi_dsub+0x3d8>
 8002b46:	e158      	b.n	8002dfa <__aeabi_dsub+0x68a>
 8002b48:	000a      	movs	r2, r1
 8002b4a:	4302      	orrs	r2, r0
 8002b4c:	d000      	beq.n	8002b50 <__aeabi_dsub+0x3e0>
 8002b4e:	e159      	b.n	8002e04 <__aeabi_dsub+0x694>
 8002b50:	464a      	mov	r2, r9
 8002b52:	0759      	lsls	r1, r3, #29
 8002b54:	08d2      	lsrs	r2, r2, #3
 8002b56:	430a      	orrs	r2, r1
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	e786      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002b5c:	464a      	mov	r2, r9
 8002b5e:	0759      	lsls	r1, r3, #29
 8002b60:	08d2      	lsrs	r2, r2, #3
 8002b62:	430a      	orrs	r2, r1
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	e7c1      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002b68:	4dba      	ldr	r5, [pc, #744]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002b6a:	42aa      	cmp	r2, r5
 8002b6c:	d100      	bne.n	8002b70 <__aeabi_dsub+0x400>
 8002b6e:	e11e      	b.n	8002dae <__aeabi_dsub+0x63e>
 8002b70:	2580      	movs	r5, #128	; 0x80
 8002b72:	042d      	lsls	r5, r5, #16
 8002b74:	432b      	orrs	r3, r5
 8002b76:	4664      	mov	r4, ip
 8002b78:	2c38      	cmp	r4, #56	; 0x38
 8002b7a:	dc5d      	bgt.n	8002c38 <__aeabi_dsub+0x4c8>
 8002b7c:	2c1f      	cmp	r4, #31
 8002b7e:	dd00      	ble.n	8002b82 <__aeabi_dsub+0x412>
 8002b80:	e0d0      	b.n	8002d24 <__aeabi_dsub+0x5b4>
 8002b82:	2520      	movs	r5, #32
 8002b84:	4667      	mov	r7, ip
 8002b86:	1b2d      	subs	r5, r5, r4
 8002b88:	464e      	mov	r6, r9
 8002b8a:	001c      	movs	r4, r3
 8002b8c:	40fe      	lsrs	r6, r7
 8002b8e:	40ac      	lsls	r4, r5
 8002b90:	4334      	orrs	r4, r6
 8002b92:	464e      	mov	r6, r9
 8002b94:	40ae      	lsls	r6, r5
 8002b96:	0035      	movs	r5, r6
 8002b98:	40fb      	lsrs	r3, r7
 8002b9a:	1e6e      	subs	r6, r5, #1
 8002b9c:	41b5      	sbcs	r5, r6
 8002b9e:	1ac9      	subs	r1, r1, r3
 8002ba0:	432c      	orrs	r4, r5
 8002ba2:	e04e      	b.n	8002c42 <__aeabi_dsub+0x4d2>
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	1a14      	subs	r4, r2, r0
 8002ba8:	45a1      	cmp	r9, r4
 8002baa:	4192      	sbcs	r2, r2
 8002bac:	4252      	negs	r2, r2
 8002bae:	4690      	mov	r8, r2
 8002bb0:	1a5f      	subs	r7, r3, r1
 8002bb2:	003a      	movs	r2, r7
 8002bb4:	4647      	mov	r7, r8
 8002bb6:	1bd2      	subs	r2, r2, r7
 8002bb8:	4690      	mov	r8, r2
 8002bba:	0212      	lsls	r2, r2, #8
 8002bbc:	d500      	bpl.n	8002bc0 <__aeabi_dsub+0x450>
 8002bbe:	e08b      	b.n	8002cd8 <__aeabi_dsub+0x568>
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	4322      	orrs	r2, r4
 8002bc4:	d000      	beq.n	8002bc8 <__aeabi_dsub+0x458>
 8002bc6:	e630      	b.n	800282a <__aeabi_dsub+0xba>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2500      	movs	r5, #0
 8002bcc:	e74d      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002bce:	464a      	mov	r2, r9
 8002bd0:	0759      	lsls	r1, r3, #29
 8002bd2:	08d2      	lsrs	r2, r2, #3
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	e744      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002bda:	4642      	mov	r2, r8
 8002bdc:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <__aeabi_dsub+0x6e8>)
 8002bde:	0861      	lsrs	r1, r4, #1
 8002be0:	401a      	ands	r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	2201      	movs	r2, #1
 8002be6:	4014      	ands	r4, r2
 8002be8:	430c      	orrs	r4, r1
 8002bea:	07da      	lsls	r2, r3, #31
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	4698      	mov	r8, r3
 8002bf0:	4314      	orrs	r4, r2
 8002bf2:	e641      	b.n	8002878 <__aeabi_dsub+0x108>
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	3e1f      	subs	r6, #31
 8002bf8:	40f2      	lsrs	r2, r6
 8002bfa:	0016      	movs	r6, r2
 8002bfc:	2920      	cmp	r1, #32
 8002bfe:	d003      	beq.n	8002c08 <__aeabi_dsub+0x498>
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	1a51      	subs	r1, r2, r1
 8002c04:	408b      	lsls	r3, r1
 8002c06:	431c      	orrs	r4, r3
 8002c08:	1e62      	subs	r2, r4, #1
 8002c0a:	4194      	sbcs	r4, r2
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	4334      	orrs	r4, r6
 8002c10:	4698      	mov	r8, r3
 8002c12:	2600      	movs	r6, #0
 8002c14:	e71d      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002c16:	000c      	movs	r4, r1
 8002c18:	3a20      	subs	r2, #32
 8002c1a:	40d4      	lsrs	r4, r2
 8002c1c:	0022      	movs	r2, r4
 8002c1e:	4664      	mov	r4, ip
 8002c20:	2c20      	cmp	r4, #32
 8002c22:	d004      	beq.n	8002c2e <__aeabi_dsub+0x4be>
 8002c24:	2740      	movs	r7, #64	; 0x40
 8002c26:	1b3f      	subs	r7, r7, r4
 8002c28:	40b9      	lsls	r1, r7
 8002c2a:	4308      	orrs	r0, r1
 8002c2c:	4680      	mov	r8, r0
 8002c2e:	4644      	mov	r4, r8
 8002c30:	1e61      	subs	r1, r4, #1
 8002c32:	418c      	sbcs	r4, r1
 8002c34:	4322      	orrs	r2, r4
 8002c36:	e5e9      	b.n	800280c <__aeabi_dsub+0x9c>
 8002c38:	464c      	mov	r4, r9
 8002c3a:	4323      	orrs	r3, r4
 8002c3c:	001c      	movs	r4, r3
 8002c3e:	1e63      	subs	r3, r4, #1
 8002c40:	419c      	sbcs	r4, r3
 8002c42:	1b04      	subs	r4, r0, r4
 8002c44:	42a0      	cmp	r0, r4
 8002c46:	419b      	sbcs	r3, r3
 8002c48:	425b      	negs	r3, r3
 8002c4a:	1acb      	subs	r3, r1, r3
 8002c4c:	4698      	mov	r8, r3
 8002c4e:	465d      	mov	r5, fp
 8002c50:	0016      	movs	r6, r2
 8002c52:	e5e2      	b.n	800281a <__aeabi_dsub+0xaa>
 8002c54:	464e      	mov	r6, r9
 8002c56:	431e      	orrs	r6, r3
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x4ec>
 8002c5a:	e0ae      	b.n	8002dba <__aeabi_dsub+0x64a>
 8002c5c:	1e66      	subs	r6, r4, #1
 8002c5e:	2c01      	cmp	r4, #1
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x4f4>
 8002c62:	e0fd      	b.n	8002e60 <__aeabi_dsub+0x6f0>
 8002c64:	4f7b      	ldr	r7, [pc, #492]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002c66:	42bc      	cmp	r4, r7
 8002c68:	d100      	bne.n	8002c6c <__aeabi_dsub+0x4fc>
 8002c6a:	e107      	b.n	8002e7c <__aeabi_dsub+0x70c>
 8002c6c:	46b4      	mov	ip, r6
 8002c6e:	e69b      	b.n	80029a8 <__aeabi_dsub+0x238>
 8002c70:	4664      	mov	r4, ip
 8002c72:	2220      	movs	r2, #32
 8002c74:	1b12      	subs	r2, r2, r4
 8002c76:	000c      	movs	r4, r1
 8002c78:	4094      	lsls	r4, r2
 8002c7a:	0007      	movs	r7, r0
 8002c7c:	4090      	lsls	r0, r2
 8002c7e:	46a0      	mov	r8, r4
 8002c80:	4664      	mov	r4, ip
 8002c82:	1e42      	subs	r2, r0, #1
 8002c84:	4190      	sbcs	r0, r2
 8002c86:	4662      	mov	r2, ip
 8002c88:	40e7      	lsrs	r7, r4
 8002c8a:	4644      	mov	r4, r8
 8002c8c:	40d1      	lsrs	r1, r2
 8002c8e:	433c      	orrs	r4, r7
 8002c90:	4304      	orrs	r4, r0
 8002c92:	185b      	adds	r3, r3, r1
 8002c94:	e6f3      	b.n	8002a7e <__aeabi_dsub+0x30e>
 8002c96:	4c6f      	ldr	r4, [pc, #444]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002c98:	42a2      	cmp	r2, r4
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x52e>
 8002c9c:	e0d5      	b.n	8002e4a <__aeabi_dsub+0x6da>
 8002c9e:	4448      	add	r0, r9
 8002ca0:	185b      	adds	r3, r3, r1
 8002ca2:	4548      	cmp	r0, r9
 8002ca4:	4189      	sbcs	r1, r1
 8002ca6:	4249      	negs	r1, r1
 8002ca8:	185b      	adds	r3, r3, r1
 8002caa:	07dc      	lsls	r4, r3, #31
 8002cac:	0840      	lsrs	r0, r0, #1
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	0016      	movs	r6, r2
 8002cb4:	4304      	orrs	r4, r0
 8002cb6:	e6cc      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d000      	beq.n	8002cbe <__aeabi_dsub+0x54e>
 8002cbc:	e082      	b.n	8002dc4 <__aeabi_dsub+0x654>
 8002cbe:	000a      	movs	r2, r1
 8002cc0:	4302      	orrs	r2, r0
 8002cc2:	d140      	bne.n	8002d46 <__aeabi_dsub+0x5d6>
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	e713      	b.n	8002af4 <__aeabi_dsub+0x384>
 8002ccc:	074b      	lsls	r3, r1, #29
 8002cce:	08c2      	lsrs	r2, r0, #3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	08cb      	lsrs	r3, r1, #3
 8002cd6:	e6c5      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002cd8:	464a      	mov	r2, r9
 8002cda:	1a84      	subs	r4, r0, r2
 8002cdc:	42a0      	cmp	r0, r4
 8002cde:	4192      	sbcs	r2, r2
 8002ce0:	1acb      	subs	r3, r1, r3
 8002ce2:	4252      	negs	r2, r2
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	4698      	mov	r8, r3
 8002ce8:	465d      	mov	r5, fp
 8002cea:	e59e      	b.n	800282a <__aeabi_dsub+0xba>
 8002cec:	464a      	mov	r2, r9
 8002cee:	0759      	lsls	r1, r3, #29
 8002cf0:	08d2      	lsrs	r2, r2, #3
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	e6f9      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002cf8:	464a      	mov	r2, r9
 8002cfa:	1a14      	subs	r4, r2, r0
 8002cfc:	45a1      	cmp	r9, r4
 8002cfe:	4192      	sbcs	r2, r2
 8002d00:	1a5b      	subs	r3, r3, r1
 8002d02:	4252      	negs	r2, r2
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	4698      	mov	r8, r3
 8002d08:	2601      	movs	r6, #1
 8002d0a:	e586      	b.n	800281a <__aeabi_dsub+0xaa>
 8002d0c:	464a      	mov	r2, r9
 8002d0e:	0759      	lsls	r1, r3, #29
 8002d10:	08d2      	lsrs	r2, r2, #3
 8002d12:	430a      	orrs	r2, r1
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	e6a5      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002d18:	464c      	mov	r4, r9
 8002d1a:	4323      	orrs	r3, r4
 8002d1c:	001c      	movs	r4, r3
 8002d1e:	1e63      	subs	r3, r4, #1
 8002d20:	419c      	sbcs	r4, r3
 8002d22:	e65b      	b.n	80029dc <__aeabi_dsub+0x26c>
 8002d24:	4665      	mov	r5, ip
 8002d26:	001e      	movs	r6, r3
 8002d28:	3d20      	subs	r5, #32
 8002d2a:	40ee      	lsrs	r6, r5
 8002d2c:	2c20      	cmp	r4, #32
 8002d2e:	d005      	beq.n	8002d3c <__aeabi_dsub+0x5cc>
 8002d30:	2540      	movs	r5, #64	; 0x40
 8002d32:	1b2d      	subs	r5, r5, r4
 8002d34:	40ab      	lsls	r3, r5
 8002d36:	464c      	mov	r4, r9
 8002d38:	431c      	orrs	r4, r3
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	4654      	mov	r4, sl
 8002d3e:	1e63      	subs	r3, r4, #1
 8002d40:	419c      	sbcs	r4, r3
 8002d42:	4334      	orrs	r4, r6
 8002d44:	e77d      	b.n	8002c42 <__aeabi_dsub+0x4d2>
 8002d46:	074b      	lsls	r3, r1, #29
 8002d48:	08c2      	lsrs	r2, r0, #3
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	08cb      	lsrs	r3, r1, #3
 8002d50:	e6cc      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002d52:	000a      	movs	r2, r1
 8002d54:	4302      	orrs	r2, r0
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x5ea>
 8002d58:	e736      	b.n	8002bc8 <__aeabi_dsub+0x458>
 8002d5a:	074b      	lsls	r3, r1, #29
 8002d5c:	08c2      	lsrs	r2, r0, #3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	465d      	mov	r5, fp
 8002d62:	08cb      	lsrs	r3, r1, #3
 8002d64:	e681      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002d66:	464a      	mov	r2, r9
 8002d68:	1a84      	subs	r4, r0, r2
 8002d6a:	42a0      	cmp	r0, r4
 8002d6c:	4192      	sbcs	r2, r2
 8002d6e:	1acb      	subs	r3, r1, r3
 8002d70:	4252      	negs	r2, r2
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	4698      	mov	r8, r3
 8002d76:	465d      	mov	r5, fp
 8002d78:	2601      	movs	r6, #1
 8002d7a:	e54e      	b.n	800281a <__aeabi_dsub+0xaa>
 8002d7c:	074b      	lsls	r3, r1, #29
 8002d7e:	08c2      	lsrs	r2, r0, #3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	08cb      	lsrs	r3, r1, #3
 8002d84:	e6b2      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002d86:	464a      	mov	r2, r9
 8002d88:	1a14      	subs	r4, r2, r0
 8002d8a:	45a1      	cmp	r9, r4
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	1a5f      	subs	r7, r3, r1
 8002d90:	4252      	negs	r2, r2
 8002d92:	1aba      	subs	r2, r7, r2
 8002d94:	4690      	mov	r8, r2
 8002d96:	0212      	lsls	r2, r2, #8
 8002d98:	d56b      	bpl.n	8002e72 <__aeabi_dsub+0x702>
 8002d9a:	464a      	mov	r2, r9
 8002d9c:	1a84      	subs	r4, r0, r2
 8002d9e:	42a0      	cmp	r0, r4
 8002da0:	4192      	sbcs	r2, r2
 8002da2:	1acb      	subs	r3, r1, r3
 8002da4:	4252      	negs	r2, r2
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	4698      	mov	r8, r3
 8002daa:	465d      	mov	r5, fp
 8002dac:	e564      	b.n	8002878 <__aeabi_dsub+0x108>
 8002dae:	074b      	lsls	r3, r1, #29
 8002db0:	08c2      	lsrs	r2, r0, #3
 8002db2:	431a      	orrs	r2, r3
 8002db4:	465d      	mov	r5, fp
 8002db6:	08cb      	lsrs	r3, r1, #3
 8002db8:	e698      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002dba:	074b      	lsls	r3, r1, #29
 8002dbc:	08c2      	lsrs	r2, r0, #3
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	08cb      	lsrs	r3, r1, #3
 8002dc2:	e64f      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	4302      	orrs	r2, r0
 8002dc8:	d090      	beq.n	8002cec <__aeabi_dsub+0x57c>
 8002dca:	464a      	mov	r2, r9
 8002dcc:	075c      	lsls	r4, r3, #29
 8002dce:	08d2      	lsrs	r2, r2, #3
 8002dd0:	4314      	orrs	r4, r2
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	0312      	lsls	r2, r2, #12
 8002dd8:	4213      	tst	r3, r2
 8002dda:	d008      	beq.n	8002dee <__aeabi_dsub+0x67e>
 8002ddc:	08ce      	lsrs	r6, r1, #3
 8002dde:	4216      	tst	r6, r2
 8002de0:	d105      	bne.n	8002dee <__aeabi_dsub+0x67e>
 8002de2:	08c0      	lsrs	r0, r0, #3
 8002de4:	0749      	lsls	r1, r1, #29
 8002de6:	4308      	orrs	r0, r1
 8002de8:	0004      	movs	r4, r0
 8002dea:	465d      	mov	r5, fp
 8002dec:	0033      	movs	r3, r6
 8002dee:	0f61      	lsrs	r1, r4, #29
 8002df0:	00e2      	lsls	r2, r4, #3
 8002df2:	0749      	lsls	r1, r1, #29
 8002df4:	08d2      	lsrs	r2, r2, #3
 8002df6:	430a      	orrs	r2, r1
 8002df8:	e678      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002dfa:	074b      	lsls	r3, r1, #29
 8002dfc:	08c2      	lsrs	r2, r0, #3
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	08cb      	lsrs	r3, r1, #3
 8002e02:	e632      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002e04:	4448      	add	r0, r9
 8002e06:	185b      	adds	r3, r3, r1
 8002e08:	4548      	cmp	r0, r9
 8002e0a:	4192      	sbcs	r2, r2
 8002e0c:	4698      	mov	r8, r3
 8002e0e:	4252      	negs	r2, r2
 8002e10:	4490      	add	r8, r2
 8002e12:	4643      	mov	r3, r8
 8002e14:	0004      	movs	r4, r0
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	d400      	bmi.n	8002e1c <__aeabi_dsub+0x6ac>
 8002e1a:	e61a      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <__aeabi_dsub+0x6e8>)
 8002e20:	2601      	movs	r6, #1
 8002e22:	401a      	ands	r2, r3
 8002e24:	4690      	mov	r8, r2
 8002e26:	e614      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002e28:	4666      	mov	r6, ip
 8002e2a:	001f      	movs	r7, r3
 8002e2c:	3e20      	subs	r6, #32
 8002e2e:	40f7      	lsrs	r7, r6
 8002e30:	2c20      	cmp	r4, #32
 8002e32:	d005      	beq.n	8002e40 <__aeabi_dsub+0x6d0>
 8002e34:	2640      	movs	r6, #64	; 0x40
 8002e36:	1b36      	subs	r6, r6, r4
 8002e38:	40b3      	lsls	r3, r6
 8002e3a:	464c      	mov	r4, r9
 8002e3c:	431c      	orrs	r4, r3
 8002e3e:	46a2      	mov	sl, r4
 8002e40:	4654      	mov	r4, sl
 8002e42:	1e63      	subs	r3, r4, #1
 8002e44:	419c      	sbcs	r4, r3
 8002e46:	433c      	orrs	r4, r7
 8002e48:	e5c8      	b.n	80029dc <__aeabi_dsub+0x26c>
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	e532      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	000007ff 	.word	0x000007ff
 8002e58:	ff7fffff 	.word	0xff7fffff
 8002e5c:	000007fe 	.word	0x000007fe
 8002e60:	464a      	mov	r2, r9
 8002e62:	1814      	adds	r4, r2, r0
 8002e64:	4284      	cmp	r4, r0
 8002e66:	4192      	sbcs	r2, r2
 8002e68:	185b      	adds	r3, r3, r1
 8002e6a:	4698      	mov	r8, r3
 8002e6c:	4252      	negs	r2, r2
 8002e6e:	4490      	add	r8, r2
 8002e70:	e5e9      	b.n	8002a46 <__aeabi_dsub+0x2d6>
 8002e72:	4642      	mov	r2, r8
 8002e74:	4322      	orrs	r2, r4
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x70a>
 8002e78:	e6a6      	b.n	8002bc8 <__aeabi_dsub+0x458>
 8002e7a:	e5ea      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002e7c:	074b      	lsls	r3, r1, #29
 8002e7e:	08c2      	lsrs	r2, r0, #3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	08cb      	lsrs	r3, r1, #3
 8002e84:	e632      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002e86:	2200      	movs	r2, #0
 8002e88:	4901      	ldr	r1, [pc, #4]	; (8002e90 <__aeabi_dsub+0x720>)
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	e514      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	000007ff 	.word	0x000007ff

08002e94 <__aeabi_dcmpun>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	0005      	movs	r5, r0
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <__aeabi_dcmpun+0x38>)
 8002e9a:	030c      	lsls	r4, r1, #12
 8002e9c:	0016      	movs	r6, r2
 8002e9e:	0049      	lsls	r1, r1, #1
 8002ea0:	031a      	lsls	r2, r3, #12
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	0b24      	lsrs	r4, r4, #12
 8002ea6:	0d49      	lsrs	r1, r1, #21
 8002ea8:	0b12      	lsrs	r2, r2, #12
 8002eaa:	0d5b      	lsrs	r3, r3, #21
 8002eac:	4281      	cmp	r1, r0
 8002eae:	d008      	beq.n	8002ec2 <__aeabi_dcmpun+0x2e>
 8002eb0:	4906      	ldr	r1, [pc, #24]	; (8002ecc <__aeabi_dcmpun+0x38>)
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d103      	bne.n	8002ec0 <__aeabi_dcmpun+0x2c>
 8002eb8:	4332      	orrs	r2, r6
 8002eba:	0010      	movs	r0, r2
 8002ebc:	1e42      	subs	r2, r0, #1
 8002ebe:	4190      	sbcs	r0, r2
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	432c      	orrs	r4, r5
 8002ec6:	d1fb      	bne.n	8002ec0 <__aeabi_dcmpun+0x2c>
 8002ec8:	e7f2      	b.n	8002eb0 <__aeabi_dcmpun+0x1c>
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	000007ff 	.word	0x000007ff

08002ed0 <__aeabi_d2iz>:
 8002ed0:	000a      	movs	r2, r1
 8002ed2:	b530      	push	{r4, r5, lr}
 8002ed4:	4c13      	ldr	r4, [pc, #76]	; (8002f24 <__aeabi_d2iz+0x54>)
 8002ed6:	0053      	lsls	r3, r2, #1
 8002ed8:	0309      	lsls	r1, r1, #12
 8002eda:	0005      	movs	r5, r0
 8002edc:	0b09      	lsrs	r1, r1, #12
 8002ede:	2000      	movs	r0, #0
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	0fd2      	lsrs	r2, r2, #31
 8002ee4:	42a3      	cmp	r3, r4
 8002ee6:	dd04      	ble.n	8002ef2 <__aeabi_d2iz+0x22>
 8002ee8:	480f      	ldr	r0, [pc, #60]	; (8002f28 <__aeabi_d2iz+0x58>)
 8002eea:	4283      	cmp	r3, r0
 8002eec:	dd02      	ble.n	8002ef4 <__aeabi_d2iz+0x24>
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <__aeabi_d2iz+0x5c>)
 8002ef0:	18d0      	adds	r0, r2, r3
 8002ef2:	bd30      	pop	{r4, r5, pc}
 8002ef4:	2080      	movs	r0, #128	; 0x80
 8002ef6:	0340      	lsls	r0, r0, #13
 8002ef8:	4301      	orrs	r1, r0
 8002efa:	480d      	ldr	r0, [pc, #52]	; (8002f30 <__aeabi_d2iz+0x60>)
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	281f      	cmp	r0, #31
 8002f00:	dd08      	ble.n	8002f14 <__aeabi_d2iz+0x44>
 8002f02:	480c      	ldr	r0, [pc, #48]	; (8002f34 <__aeabi_d2iz+0x64>)
 8002f04:	1ac3      	subs	r3, r0, r3
 8002f06:	40d9      	lsrs	r1, r3
 8002f08:	000b      	movs	r3, r1
 8002f0a:	4258      	negs	r0, r3
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <__aeabi_d2iz+0x22>
 8002f10:	0018      	movs	r0, r3
 8002f12:	e7ee      	b.n	8002ef2 <__aeabi_d2iz+0x22>
 8002f14:	4c08      	ldr	r4, [pc, #32]	; (8002f38 <__aeabi_d2iz+0x68>)
 8002f16:	40c5      	lsrs	r5, r0
 8002f18:	46a4      	mov	ip, r4
 8002f1a:	4463      	add	r3, ip
 8002f1c:	4099      	lsls	r1, r3
 8002f1e:	000b      	movs	r3, r1
 8002f20:	432b      	orrs	r3, r5
 8002f22:	e7f2      	b.n	8002f0a <__aeabi_d2iz+0x3a>
 8002f24:	000003fe 	.word	0x000003fe
 8002f28:	0000041d 	.word	0x0000041d
 8002f2c:	7fffffff 	.word	0x7fffffff
 8002f30:	00000433 	.word	0x00000433
 8002f34:	00000413 	.word	0x00000413
 8002f38:	fffffbed 	.word	0xfffffbed

08002f3c <__aeabi_i2d>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d016      	beq.n	8002f70 <__aeabi_i2d+0x34>
 8002f42:	17c3      	asrs	r3, r0, #31
 8002f44:	18c5      	adds	r5, r0, r3
 8002f46:	405d      	eors	r5, r3
 8002f48:	0fc4      	lsrs	r4, r0, #31
 8002f4a:	0028      	movs	r0, r5
 8002f4c:	f000 f956 	bl	80031fc <__clzsi2>
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <__aeabi_i2d+0x5c>)
 8002f52:	1a12      	subs	r2, r2, r0
 8002f54:	280a      	cmp	r0, #10
 8002f56:	dc16      	bgt.n	8002f86 <__aeabi_i2d+0x4a>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	002e      	movs	r6, r5
 8002f5c:	3315      	adds	r3, #21
 8002f5e:	409e      	lsls	r6, r3
 8002f60:	230b      	movs	r3, #11
 8002f62:	1a18      	subs	r0, r3, r0
 8002f64:	40c5      	lsrs	r5, r0
 8002f66:	0553      	lsls	r3, r2, #21
 8002f68:	032d      	lsls	r5, r5, #12
 8002f6a:	0b2d      	lsrs	r5, r5, #12
 8002f6c:	0d5b      	lsrs	r3, r3, #21
 8002f6e:	e003      	b.n	8002f78 <__aeabi_i2d+0x3c>
 8002f70:	2400      	movs	r4, #0
 8002f72:	2300      	movs	r3, #0
 8002f74:	2500      	movs	r5, #0
 8002f76:	2600      	movs	r6, #0
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	432b      	orrs	r3, r5
 8002f7c:	07e4      	lsls	r4, r4, #31
 8002f7e:	4323      	orrs	r3, r4
 8002f80:	0030      	movs	r0, r6
 8002f82:	0019      	movs	r1, r3
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	380b      	subs	r0, #11
 8002f88:	4085      	lsls	r5, r0
 8002f8a:	0553      	lsls	r3, r2, #21
 8002f8c:	032d      	lsls	r5, r5, #12
 8002f8e:	2600      	movs	r6, #0
 8002f90:	0b2d      	lsrs	r5, r5, #12
 8002f92:	0d5b      	lsrs	r3, r3, #21
 8002f94:	e7f0      	b.n	8002f78 <__aeabi_i2d+0x3c>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	0000041e 	.word	0x0000041e

08002f9c <__aeabi_ui2d>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	1e04      	subs	r4, r0, #0
 8002fa0:	d010      	beq.n	8002fc4 <__aeabi_ui2d+0x28>
 8002fa2:	f000 f92b 	bl	80031fc <__clzsi2>
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <__aeabi_ui2d+0x48>)
 8002fa8:	1a1b      	subs	r3, r3, r0
 8002faa:	280a      	cmp	r0, #10
 8002fac:	dc11      	bgt.n	8002fd2 <__aeabi_ui2d+0x36>
 8002fae:	220b      	movs	r2, #11
 8002fb0:	0021      	movs	r1, r4
 8002fb2:	1a12      	subs	r2, r2, r0
 8002fb4:	40d1      	lsrs	r1, r2
 8002fb6:	3015      	adds	r0, #21
 8002fb8:	030a      	lsls	r2, r1, #12
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	4084      	lsls	r4, r0
 8002fbe:	0b12      	lsrs	r2, r2, #12
 8002fc0:	0d5b      	lsrs	r3, r3, #21
 8002fc2:	e001      	b.n	8002fc8 <__aeabi_ui2d+0x2c>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	0020      	movs	r0, r4
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	0022      	movs	r2, r4
 8002fd4:	380b      	subs	r0, #11
 8002fd6:	4082      	lsls	r2, r0
 8002fd8:	055b      	lsls	r3, r3, #21
 8002fda:	0312      	lsls	r2, r2, #12
 8002fdc:	2400      	movs	r4, #0
 8002fde:	0b12      	lsrs	r2, r2, #12
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	e7f1      	b.n	8002fc8 <__aeabi_ui2d+0x2c>
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_f2d>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	0043      	lsls	r3, r0, #1
 8002fec:	0246      	lsls	r6, r0, #9
 8002fee:	0fc4      	lsrs	r4, r0, #31
 8002ff0:	20fe      	movs	r0, #254	; 0xfe
 8002ff2:	0e1b      	lsrs	r3, r3, #24
 8002ff4:	1c59      	adds	r1, r3, #1
 8002ff6:	0a75      	lsrs	r5, r6, #9
 8002ff8:	4208      	tst	r0, r1
 8002ffa:	d00c      	beq.n	8003016 <__aeabi_f2d+0x2e>
 8002ffc:	22e0      	movs	r2, #224	; 0xe0
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4694      	mov	ip, r2
 8003002:	076d      	lsls	r5, r5, #29
 8003004:	0b36      	lsrs	r6, r6, #12
 8003006:	4463      	add	r3, ip
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	4333      	orrs	r3, r6
 800300c:	07e4      	lsls	r4, r4, #31
 800300e:	4323      	orrs	r3, r4
 8003010:	0028      	movs	r0, r5
 8003012:	0019      	movs	r1, r3
 8003014:	bd70      	pop	{r4, r5, r6, pc}
 8003016:	2b00      	cmp	r3, #0
 8003018:	d114      	bne.n	8003044 <__aeabi_f2d+0x5c>
 800301a:	2d00      	cmp	r5, #0
 800301c:	d01b      	beq.n	8003056 <__aeabi_f2d+0x6e>
 800301e:	0028      	movs	r0, r5
 8003020:	f000 f8ec 	bl	80031fc <__clzsi2>
 8003024:	280a      	cmp	r0, #10
 8003026:	dc1c      	bgt.n	8003062 <__aeabi_f2d+0x7a>
 8003028:	230b      	movs	r3, #11
 800302a:	002a      	movs	r2, r5
 800302c:	1a1b      	subs	r3, r3, r0
 800302e:	40da      	lsrs	r2, r3
 8003030:	0003      	movs	r3, r0
 8003032:	3315      	adds	r3, #21
 8003034:	409d      	lsls	r5, r3
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <__aeabi_f2d+0x88>)
 8003038:	0312      	lsls	r2, r2, #12
 800303a:	1a1b      	subs	r3, r3, r0
 800303c:	055b      	lsls	r3, r3, #21
 800303e:	0b16      	lsrs	r6, r2, #12
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	e7e1      	b.n	8003008 <__aeabi_f2d+0x20>
 8003044:	2d00      	cmp	r5, #0
 8003046:	d009      	beq.n	800305c <__aeabi_f2d+0x74>
 8003048:	0b32      	lsrs	r2, r6, #12
 800304a:	2680      	movs	r6, #128	; 0x80
 800304c:	0336      	lsls	r6, r6, #12
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <__aeabi_f2d+0x8c>)
 8003050:	076d      	lsls	r5, r5, #29
 8003052:	4316      	orrs	r6, r2
 8003054:	e7d8      	b.n	8003008 <__aeabi_f2d+0x20>
 8003056:	2300      	movs	r3, #0
 8003058:	2600      	movs	r6, #0
 800305a:	e7d5      	b.n	8003008 <__aeabi_f2d+0x20>
 800305c:	2600      	movs	r6, #0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <__aeabi_f2d+0x8c>)
 8003060:	e7d2      	b.n	8003008 <__aeabi_f2d+0x20>
 8003062:	0003      	movs	r3, r0
 8003064:	002a      	movs	r2, r5
 8003066:	3b0b      	subs	r3, #11
 8003068:	409a      	lsls	r2, r3
 800306a:	2500      	movs	r5, #0
 800306c:	e7e3      	b.n	8003036 <__aeabi_f2d+0x4e>
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	00000389 	.word	0x00000389
 8003074:	000007ff 	.word	0x000007ff

08003078 <__aeabi_d2f>:
 8003078:	0002      	movs	r2, r0
 800307a:	004b      	lsls	r3, r1, #1
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	0308      	lsls	r0, r1, #12
 8003080:	0d5b      	lsrs	r3, r3, #21
 8003082:	4e3d      	ldr	r6, [pc, #244]	; (8003178 <__aeabi_d2f+0x100>)
 8003084:	0fcc      	lsrs	r4, r1, #31
 8003086:	0a40      	lsrs	r0, r0, #9
 8003088:	0f51      	lsrs	r1, r2, #29
 800308a:	1c5f      	adds	r7, r3, #1
 800308c:	4308      	orrs	r0, r1
 800308e:	00d5      	lsls	r5, r2, #3
 8003090:	4237      	tst	r7, r6
 8003092:	d00a      	beq.n	80030aa <__aeabi_d2f+0x32>
 8003094:	4939      	ldr	r1, [pc, #228]	; (800317c <__aeabi_d2f+0x104>)
 8003096:	185e      	adds	r6, r3, r1
 8003098:	2efe      	cmp	r6, #254	; 0xfe
 800309a:	dd16      	ble.n	80030ca <__aeabi_d2f+0x52>
 800309c:	23ff      	movs	r3, #255	; 0xff
 800309e:	2100      	movs	r1, #0
 80030a0:	05db      	lsls	r3, r3, #23
 80030a2:	430b      	orrs	r3, r1
 80030a4:	07e0      	lsls	r0, r4, #31
 80030a6:	4318      	orrs	r0, r3
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <__aeabi_d2f+0x44>
 80030ae:	4328      	orrs	r0, r5
 80030b0:	d027      	beq.n	8003102 <__aeabi_d2f+0x8a>
 80030b2:	2105      	movs	r1, #5
 80030b4:	0189      	lsls	r1, r1, #6
 80030b6:	0a49      	lsrs	r1, r1, #9
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e7f1      	b.n	80030a0 <__aeabi_d2f+0x28>
 80030bc:	4305      	orrs	r5, r0
 80030be:	d0ed      	beq.n	800309c <__aeabi_d2f+0x24>
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	03c9      	lsls	r1, r1, #15
 80030c4:	23ff      	movs	r3, #255	; 0xff
 80030c6:	4301      	orrs	r1, r0
 80030c8:	e7ea      	b.n	80030a0 <__aeabi_d2f+0x28>
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	dd1c      	ble.n	8003108 <__aeabi_d2f+0x90>
 80030ce:	0192      	lsls	r2, r2, #6
 80030d0:	0011      	movs	r1, r2
 80030d2:	1e4a      	subs	r2, r1, #1
 80030d4:	4191      	sbcs	r1, r2
 80030d6:	00c0      	lsls	r0, r0, #3
 80030d8:	0f6d      	lsrs	r5, r5, #29
 80030da:	4301      	orrs	r1, r0
 80030dc:	4329      	orrs	r1, r5
 80030de:	074b      	lsls	r3, r1, #29
 80030e0:	d048      	beq.n	8003174 <__aeabi_d2f+0xfc>
 80030e2:	230f      	movs	r3, #15
 80030e4:	400b      	ands	r3, r1
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d000      	beq.n	80030ec <__aeabi_d2f+0x74>
 80030ea:	3104      	adds	r1, #4
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	04db      	lsls	r3, r3, #19
 80030f0:	400b      	ands	r3, r1
 80030f2:	d03f      	beq.n	8003174 <__aeabi_d2f+0xfc>
 80030f4:	1c72      	adds	r2, r6, #1
 80030f6:	2efe      	cmp	r6, #254	; 0xfe
 80030f8:	d0d0      	beq.n	800309c <__aeabi_d2f+0x24>
 80030fa:	0189      	lsls	r1, r1, #6
 80030fc:	0a49      	lsrs	r1, r1, #9
 80030fe:	b2d3      	uxtb	r3, r2
 8003100:	e7ce      	b.n	80030a0 <__aeabi_d2f+0x28>
 8003102:	2300      	movs	r3, #0
 8003104:	2100      	movs	r1, #0
 8003106:	e7cb      	b.n	80030a0 <__aeabi_d2f+0x28>
 8003108:	0032      	movs	r2, r6
 800310a:	3217      	adds	r2, #23
 800310c:	db22      	blt.n	8003154 <__aeabi_d2f+0xdc>
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	221e      	movs	r2, #30
 8003112:	0409      	lsls	r1, r1, #16
 8003114:	4308      	orrs	r0, r1
 8003116:	1b92      	subs	r2, r2, r6
 8003118:	2a1f      	cmp	r2, #31
 800311a:	dd1d      	ble.n	8003158 <__aeabi_d2f+0xe0>
 800311c:	2102      	movs	r1, #2
 800311e:	4249      	negs	r1, r1
 8003120:	1b8e      	subs	r6, r1, r6
 8003122:	0001      	movs	r1, r0
 8003124:	40f1      	lsrs	r1, r6
 8003126:	000e      	movs	r6, r1
 8003128:	2a20      	cmp	r2, #32
 800312a:	d004      	beq.n	8003136 <__aeabi_d2f+0xbe>
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <__aeabi_d2f+0x108>)
 800312e:	4694      	mov	ip, r2
 8003130:	4463      	add	r3, ip
 8003132:	4098      	lsls	r0, r3
 8003134:	4305      	orrs	r5, r0
 8003136:	0029      	movs	r1, r5
 8003138:	1e4d      	subs	r5, r1, #1
 800313a:	41a9      	sbcs	r1, r5
 800313c:	4331      	orrs	r1, r6
 800313e:	2600      	movs	r6, #0
 8003140:	074b      	lsls	r3, r1, #29
 8003142:	d1ce      	bne.n	80030e2 <__aeabi_d2f+0x6a>
 8003144:	2080      	movs	r0, #128	; 0x80
 8003146:	000b      	movs	r3, r1
 8003148:	04c0      	lsls	r0, r0, #19
 800314a:	2201      	movs	r2, #1
 800314c:	4003      	ands	r3, r0
 800314e:	4201      	tst	r1, r0
 8003150:	d1d3      	bne.n	80030fa <__aeabi_d2f+0x82>
 8003152:	e7af      	b.n	80030b4 <__aeabi_d2f+0x3c>
 8003154:	2300      	movs	r3, #0
 8003156:	e7ac      	b.n	80030b2 <__aeabi_d2f+0x3a>
 8003158:	490a      	ldr	r1, [pc, #40]	; (8003184 <__aeabi_d2f+0x10c>)
 800315a:	468c      	mov	ip, r1
 800315c:	0029      	movs	r1, r5
 800315e:	4463      	add	r3, ip
 8003160:	40d1      	lsrs	r1, r2
 8003162:	409d      	lsls	r5, r3
 8003164:	000a      	movs	r2, r1
 8003166:	0029      	movs	r1, r5
 8003168:	4098      	lsls	r0, r3
 800316a:	1e4d      	subs	r5, r1, #1
 800316c:	41a9      	sbcs	r1, r5
 800316e:	4301      	orrs	r1, r0
 8003170:	4311      	orrs	r1, r2
 8003172:	e7e4      	b.n	800313e <__aeabi_d2f+0xc6>
 8003174:	0033      	movs	r3, r6
 8003176:	e79d      	b.n	80030b4 <__aeabi_d2f+0x3c>
 8003178:	000007fe 	.word	0x000007fe
 800317c:	fffffc80 	.word	0xfffffc80
 8003180:	fffffca2 	.word	0xfffffca2
 8003184:	fffffc82 	.word	0xfffffc82

08003188 <__aeabi_cfrcmple>:
 8003188:	4684      	mov	ip, r0
 800318a:	1c08      	adds	r0, r1, #0
 800318c:	4661      	mov	r1, ip
 800318e:	e7ff      	b.n	8003190 <__aeabi_cfcmpeq>

08003190 <__aeabi_cfcmpeq>:
 8003190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003192:	f000 f9b7 	bl	8003504 <__lesf2>
 8003196:	2800      	cmp	r0, #0
 8003198:	d401      	bmi.n	800319e <__aeabi_cfcmpeq+0xe>
 800319a:	2100      	movs	r1, #0
 800319c:	42c8      	cmn	r0, r1
 800319e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080031a0 <__aeabi_fcmpeq>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	f000 f93b 	bl	800341c <__eqsf2>
 80031a6:	4240      	negs	r0, r0
 80031a8:	3001      	adds	r0, #1
 80031aa:	bd10      	pop	{r4, pc}

080031ac <__aeabi_fcmplt>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	f000 f9a9 	bl	8003504 <__lesf2>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	db01      	blt.n	80031ba <__aeabi_fcmplt+0xe>
 80031b6:	2000      	movs	r0, #0
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	2001      	movs	r0, #1
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	46c0      	nop			; (mov r8, r8)

080031c0 <__aeabi_fcmple>:
 80031c0:	b510      	push	{r4, lr}
 80031c2:	f000 f99f 	bl	8003504 <__lesf2>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	dd01      	ble.n	80031ce <__aeabi_fcmple+0xe>
 80031ca:	2000      	movs	r0, #0
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	2001      	movs	r0, #1
 80031d0:	bd10      	pop	{r4, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)

080031d4 <__aeabi_fcmpgt>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	f000 f949 	bl	800346c <__gesf2>
 80031da:	2800      	cmp	r0, #0
 80031dc:	dc01      	bgt.n	80031e2 <__aeabi_fcmpgt+0xe>
 80031de:	2000      	movs	r0, #0
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	2001      	movs	r0, #1
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)

080031e8 <__aeabi_fcmpge>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	f000 f93f 	bl	800346c <__gesf2>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	da01      	bge.n	80031f6 <__aeabi_fcmpge+0xe>
 80031f2:	2000      	movs	r0, #0
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	2001      	movs	r0, #1
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)

080031fc <__clzsi2>:
 80031fc:	211c      	movs	r1, #28
 80031fe:	2301      	movs	r3, #1
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	4298      	cmp	r0, r3
 8003204:	d301      	bcc.n	800320a <__clzsi2+0xe>
 8003206:	0c00      	lsrs	r0, r0, #16
 8003208:	3910      	subs	r1, #16
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	4298      	cmp	r0, r3
 800320e:	d301      	bcc.n	8003214 <__clzsi2+0x18>
 8003210:	0a00      	lsrs	r0, r0, #8
 8003212:	3908      	subs	r1, #8
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	4298      	cmp	r0, r3
 8003218:	d301      	bcc.n	800321e <__clzsi2+0x22>
 800321a:	0900      	lsrs	r0, r0, #4
 800321c:	3904      	subs	r1, #4
 800321e:	a202      	add	r2, pc, #8	; (adr r2, 8003228 <__clzsi2+0x2c>)
 8003220:	5c10      	ldrb	r0, [r2, r0]
 8003222:	1840      	adds	r0, r0, r1
 8003224:	4770      	bx	lr
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	02020304 	.word	0x02020304
 800322c:	01010101 	.word	0x01010101
	...

08003238 <__clzdi2>:
 8003238:	b510      	push	{r4, lr}
 800323a:	2900      	cmp	r1, #0
 800323c:	d103      	bne.n	8003246 <__clzdi2+0xe>
 800323e:	f7ff ffdd 	bl	80031fc <__clzsi2>
 8003242:	3020      	adds	r0, #32
 8003244:	e002      	b.n	800324c <__clzdi2+0x14>
 8003246:	1c08      	adds	r0, r1, #0
 8003248:	f7ff ffd8 	bl	80031fc <__clzsi2>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	46c0      	nop			; (mov r8, r8)

08003250 <__divdi3>:
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	4657      	mov	r7, sl
 8003254:	464e      	mov	r6, r9
 8003256:	4645      	mov	r5, r8
 8003258:	46de      	mov	lr, fp
 800325a:	b5e0      	push	{r5, r6, r7, lr}
 800325c:	000f      	movs	r7, r1
 800325e:	0019      	movs	r1, r3
 8003260:	2300      	movs	r3, #0
 8003262:	0006      	movs	r6, r0
 8003264:	4698      	mov	r8, r3
 8003266:	0010      	movs	r0, r2
 8003268:	b083      	sub	sp, #12
 800326a:	2f00      	cmp	r7, #0
 800326c:	da07      	bge.n	800327e <__divdi3+0x2e>
 800326e:	0033      	movs	r3, r6
 8003270:	003c      	movs	r4, r7
 8003272:	2700      	movs	r7, #0
 8003274:	425e      	negs	r6, r3
 8003276:	41a7      	sbcs	r7, r4
 8003278:	2301      	movs	r3, #1
 800327a:	425b      	negs	r3, r3
 800327c:	4698      	mov	r8, r3
 800327e:	2900      	cmp	r1, #0
 8003280:	da07      	bge.n	8003292 <__divdi3+0x42>
 8003282:	4643      	mov	r3, r8
 8003284:	43db      	mvns	r3, r3
 8003286:	000c      	movs	r4, r1
 8003288:	4698      	mov	r8, r3
 800328a:	0003      	movs	r3, r0
 800328c:	2100      	movs	r1, #0
 800328e:	4258      	negs	r0, r3
 8003290:	41a1      	sbcs	r1, r4
 8003292:	0034      	movs	r4, r6
 8003294:	003d      	movs	r5, r7
 8003296:	4682      	mov	sl, r0
 8003298:	4689      	mov	r9, r1
 800329a:	42b9      	cmp	r1, r7
 800329c:	d86a      	bhi.n	8003374 <__divdi3+0x124>
 800329e:	d067      	beq.n	8003370 <__divdi3+0x120>
 80032a0:	4649      	mov	r1, r9
 80032a2:	4650      	mov	r0, sl
 80032a4:	f7ff ffc8 	bl	8003238 <__clzdi2>
 80032a8:	4683      	mov	fp, r0
 80032aa:	0039      	movs	r1, r7
 80032ac:	0030      	movs	r0, r6
 80032ae:	f7ff ffc3 	bl	8003238 <__clzdi2>
 80032b2:	465b      	mov	r3, fp
 80032b4:	1a1b      	subs	r3, r3, r0
 80032b6:	469c      	mov	ip, r3
 80032b8:	3b20      	subs	r3, #32
 80032ba:	469b      	mov	fp, r3
 80032bc:	d46b      	bmi.n	8003396 <__divdi3+0x146>
 80032be:	4658      	mov	r0, fp
 80032c0:	4651      	mov	r1, sl
 80032c2:	4081      	lsls	r1, r0
 80032c4:	4660      	mov	r0, ip
 80032c6:	000b      	movs	r3, r1
 80032c8:	4651      	mov	r1, sl
 80032ca:	4081      	lsls	r1, r0
 80032cc:	000a      	movs	r2, r1
 80032ce:	42bb      	cmp	r3, r7
 80032d0:	d900      	bls.n	80032d4 <__divdi3+0x84>
 80032d2:	e072      	b.n	80033ba <__divdi3+0x16a>
 80032d4:	42bb      	cmp	r3, r7
 80032d6:	d100      	bne.n	80032da <__divdi3+0x8a>
 80032d8:	e079      	b.n	80033ce <__divdi3+0x17e>
 80032da:	0034      	movs	r4, r6
 80032dc:	003d      	movs	r5, r7
 80032de:	4659      	mov	r1, fp
 80032e0:	1aa4      	subs	r4, r4, r2
 80032e2:	419d      	sbcs	r5, r3
 80032e4:	2900      	cmp	r1, #0
 80032e6:	da00      	bge.n	80032ea <__divdi3+0x9a>
 80032e8:	e074      	b.n	80033d4 <__divdi3+0x184>
 80032ea:	2100      	movs	r1, #0
 80032ec:	2000      	movs	r0, #0
 80032ee:	2601      	movs	r6, #1
 80032f0:	9000      	str	r0, [sp, #0]
 80032f2:	9101      	str	r1, [sp, #4]
 80032f4:	4659      	mov	r1, fp
 80032f6:	408e      	lsls	r6, r1
 80032f8:	9601      	str	r6, [sp, #4]
 80032fa:	4661      	mov	r1, ip
 80032fc:	2601      	movs	r6, #1
 80032fe:	408e      	lsls	r6, r1
 8003300:	4661      	mov	r1, ip
 8003302:	9600      	str	r6, [sp, #0]
 8003304:	2900      	cmp	r1, #0
 8003306:	d05f      	beq.n	80033c8 <__divdi3+0x178>
 8003308:	07d9      	lsls	r1, r3, #31
 800330a:	0856      	lsrs	r6, r2, #1
 800330c:	430e      	orrs	r6, r1
 800330e:	085f      	lsrs	r7, r3, #1
 8003310:	4661      	mov	r1, ip
 8003312:	2201      	movs	r2, #1
 8003314:	2300      	movs	r3, #0
 8003316:	e00c      	b.n	8003332 <__divdi3+0xe2>
 8003318:	42af      	cmp	r7, r5
 800331a:	d101      	bne.n	8003320 <__divdi3+0xd0>
 800331c:	42a6      	cmp	r6, r4
 800331e:	d80a      	bhi.n	8003336 <__divdi3+0xe6>
 8003320:	1ba4      	subs	r4, r4, r6
 8003322:	41bd      	sbcs	r5, r7
 8003324:	1924      	adds	r4, r4, r4
 8003326:	416d      	adcs	r5, r5
 8003328:	3901      	subs	r1, #1
 800332a:	18a4      	adds	r4, r4, r2
 800332c:	415d      	adcs	r5, r3
 800332e:	2900      	cmp	r1, #0
 8003330:	d006      	beq.n	8003340 <__divdi3+0xf0>
 8003332:	42af      	cmp	r7, r5
 8003334:	d9f0      	bls.n	8003318 <__divdi3+0xc8>
 8003336:	3901      	subs	r1, #1
 8003338:	1924      	adds	r4, r4, r4
 800333a:	416d      	adcs	r5, r5
 800333c:	2900      	cmp	r1, #0
 800333e:	d1f8      	bne.n	8003332 <__divdi3+0xe2>
 8003340:	9800      	ldr	r0, [sp, #0]
 8003342:	9901      	ldr	r1, [sp, #4]
 8003344:	465b      	mov	r3, fp
 8003346:	1900      	adds	r0, r0, r4
 8003348:	4169      	adcs	r1, r5
 800334a:	2b00      	cmp	r3, #0
 800334c:	db4d      	blt.n	80033ea <__divdi3+0x19a>
 800334e:	002e      	movs	r6, r5
 8003350:	002c      	movs	r4, r5
 8003352:	40de      	lsrs	r6, r3
 8003354:	4663      	mov	r3, ip
 8003356:	40dc      	lsrs	r4, r3
 8003358:	465b      	mov	r3, fp
 800335a:	2b00      	cmp	r3, #0
 800335c:	db55      	blt.n	800340a <__divdi3+0x1ba>
 800335e:	0034      	movs	r4, r6
 8003360:	409c      	lsls	r4, r3
 8003362:	0023      	movs	r3, r4
 8003364:	4664      	mov	r4, ip
 8003366:	40a6      	lsls	r6, r4
 8003368:	0032      	movs	r2, r6
 800336a:	1a80      	subs	r0, r0, r2
 800336c:	4199      	sbcs	r1, r3
 800336e:	e003      	b.n	8003378 <__divdi3+0x128>
 8003370:	42b0      	cmp	r0, r6
 8003372:	d995      	bls.n	80032a0 <__divdi3+0x50>
 8003374:	2000      	movs	r0, #0
 8003376:	2100      	movs	r1, #0
 8003378:	4643      	mov	r3, r8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <__divdi3+0x138>
 800337e:	0003      	movs	r3, r0
 8003380:	000c      	movs	r4, r1
 8003382:	2100      	movs	r1, #0
 8003384:	4258      	negs	r0, r3
 8003386:	41a1      	sbcs	r1, r4
 8003388:	b003      	add	sp, #12
 800338a:	bcf0      	pop	{r4, r5, r6, r7}
 800338c:	46bb      	mov	fp, r7
 800338e:	46b2      	mov	sl, r6
 8003390:	46a9      	mov	r9, r5
 8003392:	46a0      	mov	r8, r4
 8003394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003396:	4662      	mov	r2, ip
 8003398:	4648      	mov	r0, r9
 800339a:	2320      	movs	r3, #32
 800339c:	4651      	mov	r1, sl
 800339e:	4090      	lsls	r0, r2
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	40d9      	lsrs	r1, r3
 80033a4:	0003      	movs	r3, r0
 80033a6:	9100      	str	r1, [sp, #0]
 80033a8:	9900      	ldr	r1, [sp, #0]
 80033aa:	4660      	mov	r0, ip
 80033ac:	430b      	orrs	r3, r1
 80033ae:	4651      	mov	r1, sl
 80033b0:	4081      	lsls	r1, r0
 80033b2:	000a      	movs	r2, r1
 80033b4:	42bb      	cmp	r3, r7
 80033b6:	d800      	bhi.n	80033ba <__divdi3+0x16a>
 80033b8:	e78c      	b.n	80032d4 <__divdi3+0x84>
 80033ba:	2100      	movs	r1, #0
 80033bc:	2000      	movs	r0, #0
 80033be:	9000      	str	r0, [sp, #0]
 80033c0:	9101      	str	r1, [sp, #4]
 80033c2:	4661      	mov	r1, ip
 80033c4:	2900      	cmp	r1, #0
 80033c6:	d19f      	bne.n	8003308 <__divdi3+0xb8>
 80033c8:	9800      	ldr	r0, [sp, #0]
 80033ca:	9901      	ldr	r1, [sp, #4]
 80033cc:	e7d4      	b.n	8003378 <__divdi3+0x128>
 80033ce:	42b1      	cmp	r1, r6
 80033d0:	d8f3      	bhi.n	80033ba <__divdi3+0x16a>
 80033d2:	e782      	b.n	80032da <__divdi3+0x8a>
 80033d4:	4661      	mov	r1, ip
 80033d6:	2620      	movs	r6, #32
 80033d8:	2701      	movs	r7, #1
 80033da:	1a76      	subs	r6, r6, r1
 80033dc:	2000      	movs	r0, #0
 80033de:	2100      	movs	r1, #0
 80033e0:	40f7      	lsrs	r7, r6
 80033e2:	9000      	str	r0, [sp, #0]
 80033e4:	9101      	str	r1, [sp, #4]
 80033e6:	9701      	str	r7, [sp, #4]
 80033e8:	e787      	b.n	80032fa <__divdi3+0xaa>
 80033ea:	4662      	mov	r2, ip
 80033ec:	2320      	movs	r3, #32
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	002a      	movs	r2, r5
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0026      	movs	r6, r4
 80033f6:	0013      	movs	r3, r2
 80033f8:	4662      	mov	r2, ip
 80033fa:	40d6      	lsrs	r6, r2
 80033fc:	002c      	movs	r4, r5
 80033fe:	431e      	orrs	r6, r3
 8003400:	4663      	mov	r3, ip
 8003402:	40dc      	lsrs	r4, r3
 8003404:	465b      	mov	r3, fp
 8003406:	2b00      	cmp	r3, #0
 8003408:	daa9      	bge.n	800335e <__divdi3+0x10e>
 800340a:	4662      	mov	r2, ip
 800340c:	2320      	movs	r3, #32
 800340e:	0035      	movs	r5, r6
 8003410:	4094      	lsls	r4, r2
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	40dd      	lsrs	r5, r3
 8003416:	0023      	movs	r3, r4
 8003418:	432b      	orrs	r3, r5
 800341a:	e7a3      	b.n	8003364 <__divdi3+0x114>

0800341c <__eqsf2>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	0042      	lsls	r2, r0, #1
 8003420:	024e      	lsls	r6, r1, #9
 8003422:	004c      	lsls	r4, r1, #1
 8003424:	0245      	lsls	r5, r0, #9
 8003426:	0a6d      	lsrs	r5, r5, #9
 8003428:	0e12      	lsrs	r2, r2, #24
 800342a:	0fc3      	lsrs	r3, r0, #31
 800342c:	0a76      	lsrs	r6, r6, #9
 800342e:	0e24      	lsrs	r4, r4, #24
 8003430:	0fc9      	lsrs	r1, r1, #31
 8003432:	2aff      	cmp	r2, #255	; 0xff
 8003434:	d00f      	beq.n	8003456 <__eqsf2+0x3a>
 8003436:	2cff      	cmp	r4, #255	; 0xff
 8003438:	d011      	beq.n	800345e <__eqsf2+0x42>
 800343a:	2001      	movs	r0, #1
 800343c:	42a2      	cmp	r2, r4
 800343e:	d000      	beq.n	8003442 <__eqsf2+0x26>
 8003440:	bd70      	pop	{r4, r5, r6, pc}
 8003442:	42b5      	cmp	r5, r6
 8003444:	d1fc      	bne.n	8003440 <__eqsf2+0x24>
 8003446:	428b      	cmp	r3, r1
 8003448:	d00d      	beq.n	8003466 <__eqsf2+0x4a>
 800344a:	2a00      	cmp	r2, #0
 800344c:	d1f8      	bne.n	8003440 <__eqsf2+0x24>
 800344e:	0028      	movs	r0, r5
 8003450:	1e45      	subs	r5, r0, #1
 8003452:	41a8      	sbcs	r0, r5
 8003454:	e7f4      	b.n	8003440 <__eqsf2+0x24>
 8003456:	2001      	movs	r0, #1
 8003458:	2d00      	cmp	r5, #0
 800345a:	d1f1      	bne.n	8003440 <__eqsf2+0x24>
 800345c:	e7eb      	b.n	8003436 <__eqsf2+0x1a>
 800345e:	2001      	movs	r0, #1
 8003460:	2e00      	cmp	r6, #0
 8003462:	d1ed      	bne.n	8003440 <__eqsf2+0x24>
 8003464:	e7e9      	b.n	800343a <__eqsf2+0x1e>
 8003466:	2000      	movs	r0, #0
 8003468:	e7ea      	b.n	8003440 <__eqsf2+0x24>
 800346a:	46c0      	nop			; (mov r8, r8)

0800346c <__gesf2>:
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	0042      	lsls	r2, r0, #1
 8003470:	0246      	lsls	r6, r0, #9
 8003472:	024d      	lsls	r5, r1, #9
 8003474:	004c      	lsls	r4, r1, #1
 8003476:	0fc3      	lsrs	r3, r0, #31
 8003478:	0a76      	lsrs	r6, r6, #9
 800347a:	0e12      	lsrs	r2, r2, #24
 800347c:	0a6d      	lsrs	r5, r5, #9
 800347e:	0e24      	lsrs	r4, r4, #24
 8003480:	0fc8      	lsrs	r0, r1, #31
 8003482:	2aff      	cmp	r2, #255	; 0xff
 8003484:	d01f      	beq.n	80034c6 <__gesf2+0x5a>
 8003486:	2cff      	cmp	r4, #255	; 0xff
 8003488:	d010      	beq.n	80034ac <__gesf2+0x40>
 800348a:	2a00      	cmp	r2, #0
 800348c:	d11f      	bne.n	80034ce <__gesf2+0x62>
 800348e:	4271      	negs	r1, r6
 8003490:	4171      	adcs	r1, r6
 8003492:	2c00      	cmp	r4, #0
 8003494:	d101      	bne.n	800349a <__gesf2+0x2e>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01e      	beq.n	80034d8 <__gesf2+0x6c>
 800349a:	2900      	cmp	r1, #0
 800349c:	d10e      	bne.n	80034bc <__gesf2+0x50>
 800349e:	4283      	cmp	r3, r0
 80034a0:	d01e      	beq.n	80034e0 <__gesf2+0x74>
 80034a2:	2102      	movs	r1, #2
 80034a4:	1e58      	subs	r0, r3, #1
 80034a6:	4008      	ands	r0, r1
 80034a8:	3801      	subs	r0, #1
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	d126      	bne.n	80034fe <__gesf2+0x92>
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	d1f4      	bne.n	800349e <__gesf2+0x32>
 80034b4:	4271      	negs	r1, r6
 80034b6:	4171      	adcs	r1, r6
 80034b8:	2900      	cmp	r1, #0
 80034ba:	d0f0      	beq.n	800349e <__gesf2+0x32>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d1f4      	bne.n	80034aa <__gesf2+0x3e>
 80034c0:	2001      	movs	r0, #1
 80034c2:	4240      	negs	r0, r0
 80034c4:	e7f1      	b.n	80034aa <__gesf2+0x3e>
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d119      	bne.n	80034fe <__gesf2+0x92>
 80034ca:	2cff      	cmp	r4, #255	; 0xff
 80034cc:	d0ee      	beq.n	80034ac <__gesf2+0x40>
 80034ce:	2c00      	cmp	r4, #0
 80034d0:	d1e5      	bne.n	800349e <__gesf2+0x32>
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d1e3      	bne.n	800349e <__gesf2+0x32>
 80034d6:	e7e4      	b.n	80034a2 <__gesf2+0x36>
 80034d8:	2000      	movs	r0, #0
 80034da:	2e00      	cmp	r6, #0
 80034dc:	d0e5      	beq.n	80034aa <__gesf2+0x3e>
 80034de:	e7e0      	b.n	80034a2 <__gesf2+0x36>
 80034e0:	42a2      	cmp	r2, r4
 80034e2:	dc05      	bgt.n	80034f0 <__gesf2+0x84>
 80034e4:	dbea      	blt.n	80034bc <__gesf2+0x50>
 80034e6:	42ae      	cmp	r6, r5
 80034e8:	d802      	bhi.n	80034f0 <__gesf2+0x84>
 80034ea:	d3e7      	bcc.n	80034bc <__gesf2+0x50>
 80034ec:	2000      	movs	r0, #0
 80034ee:	e7dc      	b.n	80034aa <__gesf2+0x3e>
 80034f0:	4241      	negs	r1, r0
 80034f2:	4141      	adcs	r1, r0
 80034f4:	4248      	negs	r0, r1
 80034f6:	2102      	movs	r1, #2
 80034f8:	4008      	ands	r0, r1
 80034fa:	3801      	subs	r0, #1
 80034fc:	e7d5      	b.n	80034aa <__gesf2+0x3e>
 80034fe:	2002      	movs	r0, #2
 8003500:	4240      	negs	r0, r0
 8003502:	e7d2      	b.n	80034aa <__gesf2+0x3e>

08003504 <__lesf2>:
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	0042      	lsls	r2, r0, #1
 8003508:	0246      	lsls	r6, r0, #9
 800350a:	024d      	lsls	r5, r1, #9
 800350c:	004c      	lsls	r4, r1, #1
 800350e:	0fc3      	lsrs	r3, r0, #31
 8003510:	0a76      	lsrs	r6, r6, #9
 8003512:	0e12      	lsrs	r2, r2, #24
 8003514:	0a6d      	lsrs	r5, r5, #9
 8003516:	0e24      	lsrs	r4, r4, #24
 8003518:	0fc8      	lsrs	r0, r1, #31
 800351a:	2aff      	cmp	r2, #255	; 0xff
 800351c:	d00d      	beq.n	800353a <__lesf2+0x36>
 800351e:	2cff      	cmp	r4, #255	; 0xff
 8003520:	d00f      	beq.n	8003542 <__lesf2+0x3e>
 8003522:	2a00      	cmp	r2, #0
 8003524:	d123      	bne.n	800356e <__lesf2+0x6a>
 8003526:	4271      	negs	r1, r6
 8003528:	4171      	adcs	r1, r6
 800352a:	2c00      	cmp	r4, #0
 800352c:	d10f      	bne.n	800354e <__lesf2+0x4a>
 800352e:	2d00      	cmp	r5, #0
 8003530:	d10d      	bne.n	800354e <__lesf2+0x4a>
 8003532:	2000      	movs	r0, #0
 8003534:	2e00      	cmp	r6, #0
 8003536:	d014      	beq.n	8003562 <__lesf2+0x5e>
 8003538:	e00d      	b.n	8003556 <__lesf2+0x52>
 800353a:	2e00      	cmp	r6, #0
 800353c:	d110      	bne.n	8003560 <__lesf2+0x5c>
 800353e:	2cff      	cmp	r4, #255	; 0xff
 8003540:	d115      	bne.n	800356e <__lesf2+0x6a>
 8003542:	2d00      	cmp	r5, #0
 8003544:	d10c      	bne.n	8003560 <__lesf2+0x5c>
 8003546:	2a00      	cmp	r2, #0
 8003548:	d103      	bne.n	8003552 <__lesf2+0x4e>
 800354a:	4271      	negs	r1, r6
 800354c:	4171      	adcs	r1, r6
 800354e:	2900      	cmp	r1, #0
 8003550:	d108      	bne.n	8003564 <__lesf2+0x60>
 8003552:	4283      	cmp	r3, r0
 8003554:	d010      	beq.n	8003578 <__lesf2+0x74>
 8003556:	2102      	movs	r1, #2
 8003558:	1e58      	subs	r0, r3, #1
 800355a:	4008      	ands	r0, r1
 800355c:	3801      	subs	r0, #1
 800355e:	e000      	b.n	8003562 <__lesf2+0x5e>
 8003560:	2002      	movs	r0, #2
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003564:	2800      	cmp	r0, #0
 8003566:	d1fc      	bne.n	8003562 <__lesf2+0x5e>
 8003568:	2001      	movs	r0, #1
 800356a:	4240      	negs	r0, r0
 800356c:	e7f9      	b.n	8003562 <__lesf2+0x5e>
 800356e:	2c00      	cmp	r4, #0
 8003570:	d1ef      	bne.n	8003552 <__lesf2+0x4e>
 8003572:	2d00      	cmp	r5, #0
 8003574:	d1ed      	bne.n	8003552 <__lesf2+0x4e>
 8003576:	e7ee      	b.n	8003556 <__lesf2+0x52>
 8003578:	42a2      	cmp	r2, r4
 800357a:	dc05      	bgt.n	8003588 <__lesf2+0x84>
 800357c:	dbf2      	blt.n	8003564 <__lesf2+0x60>
 800357e:	42ae      	cmp	r6, r5
 8003580:	d802      	bhi.n	8003588 <__lesf2+0x84>
 8003582:	d3ef      	bcc.n	8003564 <__lesf2+0x60>
 8003584:	2000      	movs	r0, #0
 8003586:	e7ec      	b.n	8003562 <__lesf2+0x5e>
 8003588:	4241      	negs	r1, r0
 800358a:	4141      	adcs	r1, r0
 800358c:	4248      	negs	r0, r1
 800358e:	2102      	movs	r1, #2
 8003590:	4008      	ands	r0, r1
 8003592:	3801      	subs	r0, #1
 8003594:	e7e5      	b.n	8003562 <__lesf2+0x5e>
 8003596:	46c0      	nop			; (mov r8, r8)

08003598 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_Init+0x3c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_Init+0x3c>)
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	0049      	lsls	r1, r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b2:	2003      	movs	r0, #3
 80035b4:	f000 f810 	bl	80035d8 <HAL_InitTick>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e001      	b.n	80035c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80035c4:	f00b fad4 	bl	800eb70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40022000 	.word	0x40022000

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035e0:	230f      	movs	r3, #15
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_InitTick+0x88>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02b      	beq.n	8003648 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_InitTick+0x8c>)
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_InitTick+0x88>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	0019      	movs	r1, r3
 80035fa:	23fa      	movs	r3, #250	; 0xfa
 80035fc:	0098      	lsls	r0, r3, #2
 80035fe:	f7fc fd8d 	bl	800011c <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	0019      	movs	r1, r3
 8003606:	0020      	movs	r0, r4
 8003608:	f7fc fd88 	bl	800011c <__udivsi3>
 800360c:	0003      	movs	r3, r0
 800360e:	0018      	movs	r0, r3
 8003610:	f000 ff19 	bl	8004446 <HAL_SYSTICK_Config>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d112      	bne.n	800363e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d80a      	bhi.n	8003634 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	2301      	movs	r3, #1
 8003622:	425b      	negs	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fee8 	bl	80043fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_InitTick+0x90>)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e00d      	b.n	8003650 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003634:	230f      	movs	r3, #15
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e008      	b.n	8003650 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800363e:	230f      	movs	r3, #15
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e003      	b.n	8003650 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003648:	230f      	movs	r3, #15
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003650:	230f      	movs	r3, #15
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	781b      	ldrb	r3, [r3, #0]
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b005      	add	sp, #20
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	20000004 	.word	0x20000004
 8003664:	2000000c 	.word	0x2000000c
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_IncTick+0x1c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	001a      	movs	r2, r3
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_IncTick+0x20>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	18d2      	adds	r2, r2, r3
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_IncTick+0x20>)
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000004 	.word	0x20000004
 800368c:	20000150 	.word	0x20000150

08003690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  return uwTick;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_GetTick+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	20000150 	.word	0x20000150

080036a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7ff fff0 	bl	8003690 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	d005      	beq.n	80036ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_Delay+0x44>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	001a      	movs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	189b      	adds	r3, r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	f7ff ffe0 	bl	8003690 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d8f7      	bhi.n	80036cc <HAL_Delay+0x28>
  {
  }
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20000004 	.word	0x20000004

080036ec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40010000 	.word	0x40010000
 8003714:	fffff9ff 	.word	0xfffff9ff

08003718 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003728:	401a      	ands	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	fe3fffff 	.word	0xfe3fffff

08003740 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	23e0      	movs	r3, #224	; 0xe0
 800374e:	045b      	lsls	r3, r3, #17
 8003750:	4013      	ands	r3, r2
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}

0800375a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	400a      	ands	r2, r1
 8003770:	2107      	movs	r1, #7
 8003772:	4091      	lsls	r1, r2
 8003774:	000a      	movs	r2, r1
 8003776:	43d2      	mvns	r2, r2
 8003778:	401a      	ands	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2104      	movs	r1, #4
 800377e:	400b      	ands	r3, r1
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4099      	lsls	r1, r3
 8003784:	000b      	movs	r3, r1
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}

08003794 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	211f      	movs	r1, #31
 80037a8:	400a      	ands	r2, r1
 80037aa:	210f      	movs	r1, #15
 80037ac:	4091      	lsls	r1, r2
 80037ae:	000a      	movs	r2, r1
 80037b0:	43d2      	mvns	r2, r2
 80037b2:	401a      	ands	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0e9b      	lsrs	r3, r3, #26
 80037b8:	210f      	movs	r1, #15
 80037ba:	4019      	ands	r1, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	201f      	movs	r0, #31
 80037c0:	4003      	ands	r3, r0
 80037c2:	4099      	lsls	r1, r3
 80037c4:	000b      	movs	r3, r1
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b004      	add	sp, #16
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	035b      	lsls	r3, r3, #13
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	0352      	lsls	r2, r2, #13
 8003808:	0b52      	lsrs	r2, r2, #13
 800380a:	43d2      	mvns	r2, r2
 800380c:	401a      	ands	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b002      	add	sp, #8
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	0212      	lsls	r2, r2, #8
 8003830:	43d2      	mvns	r2, r2
 8003832:	401a      	ands	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	400b      	ands	r3, r1
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <LL_ADC_SetChannelSamplingTime+0x34>)
 800383e:	400b      	ands	r3, r1
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	07ffff00 	.word	0x07ffff00

08003854 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a05      	ldr	r2, [pc, #20]	; (8003878 <LL_ADC_EnableInternalRegulator+0x24>)
 8003862:	4013      	ands	r3, r2
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	0552      	lsls	r2, r2, #21
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	6fffffe8 	.word	0x6fffffe8

0800387c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	055b      	lsls	r3, r3, #21
 800388c:	401a      	ands	r2, r3
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	055b      	lsls	r3, r3, #21
 8003892:	429a      	cmp	r2, r3
 8003894:	d101      	bne.n	800389a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <LL_ADC_Disable+0x20>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	2202      	movs	r2, #2
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	7fffffe8 	.word	0x7fffffe8

080038c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <LL_ADC_IsEnabled+0x18>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <LL_ADC_IsEnabled+0x1a>
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b002      	add	sp, #8
 80038e8:	bd80      	pop	{r7, pc}

080038ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d101      	bne.n	8003902 <LL_ADC_IsDisableOngoing+0x18>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <LL_ADC_IsDisableOngoing+0x1a>
 8003902:	2300      	movs	r3, #0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}

0800390c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2204      	movs	r2, #4
 800391a:	4013      	ands	r3, r2
 800391c:	2b04      	cmp	r3, #4
 800391e:	d101      	bne.n	8003924 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003938:	231f      	movs	r3, #31
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1b1      	b.n	8003cba <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f00b f92d 	bl	800ebc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2254      	movs	r2, #84	; 0x54
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0018      	movs	r0, r3
 800397a:	f7ff ff7f 	bl	800387c <LL_ADC_IsInternalRegulatorEnabled>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d115      	bne.n	80039ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0018      	movs	r0, r3
 8003988:	f7ff ff64 	bl	8003854 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800398c:	4bcd      	ldr	r3, [pc, #820]	; (8003cc4 <HAL_ADC_Init+0x394>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	49cd      	ldr	r1, [pc, #820]	; (8003cc8 <HAL_ADC_Init+0x398>)
 8003992:	0018      	movs	r0, r3
 8003994:	f7fc fbc2 	bl	800011c <__udivsi3>
 8003998:	0003      	movs	r3, r0
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039a0:	e002      	b.n	80039a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f9      	bne.n	80039a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff ff62 	bl	800387c <LL_ADC_IsInternalRegulatorEnabled>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d10f      	bne.n	80039dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	2210      	movs	r2, #16
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2201      	movs	r2, #1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039d4:	231f      	movs	r3, #31
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff ff93 	bl	800390c <LL_ADC_REG_IsConversionOngoing>
 80039e6:	0003      	movs	r3, r0
 80039e8:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	2210      	movs	r2, #16
 80039f0:	4013      	ands	r3, r2
 80039f2:	d000      	beq.n	80039f6 <HAL_ADC_Init+0xc6>
 80039f4:	e154      	b.n	8003ca0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d000      	beq.n	80039fe <HAL_ADC_Init+0xce>
 80039fc:	e150      	b.n	8003ca0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	4ab2      	ldr	r2, [pc, #712]	; (8003ccc <HAL_ADC_Init+0x39c>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	2202      	movs	r2, #2
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff ff58 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a18:	1e03      	subs	r3, r0, #0
 8003a1a:	d156      	bne.n	8003aca <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2218      	movs	r2, #24
 8003a24:	4393      	bics	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0f9b      	lsrs	r3, r3, #30
 8003a3a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a40:	4313      	orrs	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	223c      	movs	r2, #60	; 0x3c
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d111      	bne.n	8003a76 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0f9b      	lsrs	r3, r3, #30
 8003a58:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a5e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003a64:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003a6a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	2201      	movs	r2, #1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	4a94      	ldr	r2, [pc, #592]	; (8003cd0 <HAL_ADC_Init+0x3a0>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	23c0      	movs	r3, #192	; 0xc0
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d018      	beq.n	8003aca <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	05db      	lsls	r3, r3, #23
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d012      	beq.n	8003aca <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d00c      	beq.n	8003aca <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003ab0:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_ADC_Init+0x3a4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a88      	ldr	r2, [pc, #544]	; (8003cd8 <HAL_ADC_Init+0x3a8>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	23f0      	movs	r3, #240	; 0xf0
 8003ac0:	039b      	lsls	r3, r3, #14
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_ADC_Init+0x3a4>)
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7e1b      	ldrb	r3, [r3, #24]
 8003ace:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7e5b      	ldrb	r3, [r3, #25]
 8003ad4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ad6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e9b      	ldrb	r3, [r3, #26]
 8003adc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ade:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_ADC_Init+0x1be>
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	e000      	b.n	8003af0 <HAL_ADC_Init+0x1c0>
 8003aee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003af0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003af6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da04      	bge.n	8003b0a <HAL_ADC_Init+0x1da>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	e001      	b.n	8003b0e <HAL_ADC_Init+0x1de>
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003b0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	5c5b      	ldrb	r3, [r3, r1]
 8003b16:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b18:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d115      	bne.n	8003b56 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	7e9b      	ldrb	r3, [r3, #26]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	0252      	lsls	r2, r2, #9
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e00b      	b.n	8003b56 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	2220      	movs	r2, #32
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b62:	23e0      	movs	r3, #224	; 0xe0
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_ADC_Init+0x3ac>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	0019      	movs	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	4a53      	ldr	r2, [pc, #332]	; (8003ce0 <HAL_ADC_Init+0x3b0>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	001a      	movs	r2, r3
 8003baa:	2100      	movs	r1, #0
 8003bac:	f7ff fdd5 	bl	800375a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	494a      	ldr	r1, [pc, #296]	; (8003ce4 <HAL_ADC_Init+0x3b4>)
 8003bba:	001a      	movs	r2, r3
 8003bbc:	f7ff fdcd 	bl	800375a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	4249      	negs	r1, r1
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003bda:	e03a      	b.n	8003c52 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	039b      	lsls	r3, r3, #14
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d134      	bne.n	8003c52 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e00c      	b.n	8003c08 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	40da      	lsrs	r2, r3
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d006      	beq.n	8003c10 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	3301      	adds	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b07      	cmp	r3, #7
 8003c0c:	d9ef      	bls.n	8003bee <HAL_ADC_Init+0x2be>
 8003c0e:	e000      	b.n	8003c12 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003c10:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d109      	bne.n	8003c2c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2110      	movs	r1, #16
 8003c24:	4249      	negs	r1, r1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2a:	e012      	b.n	8003c52 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	221c      	movs	r2, #28
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2210      	movs	r2, #16
 8003c40:	4252      	negs	r2, r2
 8003c42:	409a      	lsls	r2, r3
 8003c44:	0011      	movs	r1, r2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <HAL_ADC_Init+0x3b8>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d10b      	bne.n	8003c7a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	4393      	bics	r3, r2
 8003c70:	2201      	movs	r2, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c78:	e01c      	b.n	8003cb4 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	2212      	movs	r2, #18
 8003c80:	4393      	bics	r3, r2
 8003c82:	2210      	movs	r2, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	2201      	movs	r2, #1
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c96:	231f      	movs	r3, #31
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c9e:	e009      	b.n	8003cb4 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cac:	231f      	movs	r3, #31
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003cb4:	231f      	movs	r3, #31
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	781b      	ldrb	r3, [r3, #0]
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b008      	add	sp, #32
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	00030d40 	.word	0x00030d40
 8003ccc:	fffffefd 	.word	0xfffffefd
 8003cd0:	1ffffc02 	.word	0x1ffffc02
 8003cd4:	40012708 	.word	0x40012708
 8003cd8:	ffc3ffff 	.word	0xffc3ffff
 8003cdc:	fffe0219 	.word	0xfffe0219
 8003ce0:	dffffc02 	.word	0xdffffc02
 8003ce4:	07ffff04 	.word	0x07ffff04
 8003ce8:	833fffe7 	.word	0x833fffe7

08003cec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf6:	2317      	movs	r3, #23
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2254      	movs	r2, #84	; 0x54
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x24>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e1c0      	b.n	8004092 <HAL_ADC_ConfigChannel+0x3a6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2254      	movs	r2, #84	; 0x54
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7ff fdf5 	bl	800390c <LL_ADC_REG_IsConversionOngoing>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d000      	beq.n	8003d28 <HAL_ADC_ConfigChannel+0x3c>
 8003d26:	e1a3      	b.n	8004070 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d100      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x46>
 8003d30:	e143      	b.n	8003fba <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d004      	beq.n	8003d48 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d42:	4ac1      	ldr	r2, [pc, #772]	; (8004048 <HAL_ADC_ConfigChannel+0x35c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0019      	movs	r1, r3
 8003d52:	0010      	movs	r0, r2
 8003d54:	f7ff fd3e 	bl	80037d4 <LL_ADC_REG_SetSequencerChAdd>
 8003d58:	e0c9      	b.n	8003eee <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	211f      	movs	r1, #31
 8003d64:	400b      	ands	r3, r1
 8003d66:	210f      	movs	r1, #15
 8003d68:	4099      	lsls	r1, r3
 8003d6a:	000b      	movs	r3, r1
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	035b      	lsls	r3, r3, #13
 8003d78:	0b5b      	lsrs	r3, r3, #13
 8003d7a:	d105      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x9c>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	221f      	movs	r2, #31
 8003d84:	4013      	ands	r3, r2
 8003d86:	e098      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d000      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0xa8>
 8003d92:	e091      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x1cc>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d000      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0xb4>
 8003d9e:	e089      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x1c8>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2204      	movs	r2, #4
 8003da6:	4013      	ands	r3, r2
 8003da8:	d000      	beq.n	8003dac <HAL_ADC_ConfigChannel+0xc0>
 8003daa:	e081      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x1c4>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2208      	movs	r2, #8
 8003db2:	4013      	ands	r3, r2
 8003db4:	d000      	beq.n	8003db8 <HAL_ADC_ConfigChannel+0xcc>
 8003db6:	e079      	b.n	8003eac <HAL_ADC_ConfigChannel+0x1c0>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d000      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0xd8>
 8003dc2:	e071      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x1bc>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d000      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0xe4>
 8003dce:	e069      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x1b8>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d000      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0xf0>
 8003dda:	e061      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x1b4>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	4013      	ands	r3, r2
 8003de4:	d000      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0xfc>
 8003de6:	e059      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x1b0>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4013      	ands	r3, r2
 8003df2:	d151      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x1ac>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d149      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1a8>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d141      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x1a4>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4013      	ands	r3, r2
 8003e16:	d139      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1a0>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	015b      	lsls	r3, r3, #5
 8003e20:	4013      	ands	r3, r2
 8003e22:	d131      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x19c>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d129      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x198>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	01db      	lsls	r3, r3, #7
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d121      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x194>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	4013      	ands	r3, r2
 8003e46:	d119      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x190>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	025b      	lsls	r3, r3, #9
 8003e50:	4013      	ands	r3, r2
 8003e52:	d111      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x18c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x188>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	02db      	lsls	r3, r3, #11
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d001      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0x184>
 8003e6c:	2312      	movs	r3, #18
 8003e6e:	e024      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e70:	2300      	movs	r3, #0
 8003e72:	e022      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e74:	2311      	movs	r3, #17
 8003e76:	e020      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	e01e      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	e01c      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e80:	230e      	movs	r3, #14
 8003e82:	e01a      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e84:	230d      	movs	r3, #13
 8003e86:	e018      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e88:	230c      	movs	r3, #12
 8003e8a:	e016      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e8c:	230b      	movs	r3, #11
 8003e8e:	e014      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e90:	230a      	movs	r3, #10
 8003e92:	e012      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e94:	2309      	movs	r3, #9
 8003e96:	e010      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	e00e      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003e9c:	2307      	movs	r3, #7
 8003e9e:	e00c      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003ea0:	2306      	movs	r3, #6
 8003ea2:	e00a      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003ea4:	2305      	movs	r3, #5
 8003ea6:	e008      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	e006      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003eac:	2303      	movs	r3, #3
 8003eae:	e004      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e002      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1ce>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	6852      	ldr	r2, [r2, #4]
 8003ebe:	201f      	movs	r0, #31
 8003ec0:	4002      	ands	r2, r0
 8003ec2:	4093      	lsls	r3, r2
 8003ec4:	000a      	movs	r2, r1
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d808      	bhi.n	8003eee <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	001a      	movs	r2, r3
 8003eea:	f7ff fc53 	bl	8003794 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	001a      	movs	r2, r3
 8003efc:	f7ff fc8e 	bl	800381c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	db00      	blt.n	8003f0a <HAL_ADC_ConfigChannel+0x21e>
 8003f08:	e0bc      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff fc17 	bl	8003740 <LL_ADC_GetCommonPathInternalCh>
 8003f12:	0003      	movs	r3, r0
 8003f14:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4d      	ldr	r2, [pc, #308]	; (8004050 <HAL_ADC_ConfigChannel+0x364>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d122      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f28:	d11d      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	0412      	lsls	r2, r2, #16
 8003f30:	4313      	orrs	r3, r2
 8003f32:	4a46      	ldr	r2, [pc, #280]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8003f34:	0019      	movs	r1, r3
 8003f36:	0010      	movs	r0, r2
 8003f38:	f7ff fbee 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_ADC_ConfigChannel+0x368>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4945      	ldr	r1, [pc, #276]	; (8004058 <HAL_ADC_ConfigChannel+0x36c>)
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc f8ea 	bl	800011c <__udivsi3>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f56:	e002      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f9      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f64:	e08e      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <HAL_ADC_ConfigChannel+0x370>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10e      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x2a2>
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	045b      	lsls	r3, r3, #17
 8003f76:	4013      	ands	r3, r2
 8003f78:	d109      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	0452      	lsls	r2, r2, #17
 8003f80:	4313      	orrs	r3, r2
 8003f82:	4a32      	ldr	r2, [pc, #200]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8003f84:	0019      	movs	r1, r3
 8003f86:	0010      	movs	r0, r2
 8003f88:	f7ff fbc6 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 8003f8c:	e07a      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a33      	ldr	r2, [pc, #204]	; (8004060 <HAL_ADC_ConfigChannel+0x374>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d000      	beq.n	8003f9a <HAL_ADC_ConfigChannel+0x2ae>
 8003f98:	e074      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	03db      	lsls	r3, r3, #15
 8003fa0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fa2:	d000      	beq.n	8003fa6 <HAL_ADC_ConfigChannel+0x2ba>
 8003fa4:	e06e      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	03d2      	lsls	r2, r2, #15
 8003fac:	4313      	orrs	r3, r2
 8003fae:	4a27      	ldr	r2, [pc, #156]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	0010      	movs	r0, r2
 8003fb4:	f7ff fbb0 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 8003fb8:	e064      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d004      	beq.n	8003fd0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fca:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_ADC_ConfigChannel+0x35c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0019      	movs	r1, r3
 8003fda:	0010      	movs	r0, r2
 8003fdc:	f7ff fc0b 	bl	80037f6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da4d      	bge.n	8004084 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe8:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff fba8 	bl	8003740 <LL_ADC_GetCommonPathInternalCh>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <HAL_ADC_ConfigChannel+0x364>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_ADC_ConfigChannel+0x378>)
 8004002:	4013      	ands	r3, r2
 8004004:	4a11      	ldr	r2, [pc, #68]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8004006:	0019      	movs	r1, r3
 8004008:	0010      	movs	r0, r2
 800400a:	f7ff fb85 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 800400e:	e039      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a11      	ldr	r2, [pc, #68]	; (800405c <HAL_ADC_ConfigChannel+0x370>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a12      	ldr	r2, [pc, #72]	; (8004068 <HAL_ADC_ConfigChannel+0x37c>)
 800401e:	4013      	ands	r3, r2
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 8004022:	0019      	movs	r1, r3
 8004024:	0010      	movs	r0, r2
 8004026:	f7ff fb77 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 800402a:	e02b      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <HAL_ADC_ConfigChannel+0x374>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d126      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4a0c      	ldr	r2, [pc, #48]	; (800406c <HAL_ADC_ConfigChannel+0x380>)
 800403a:	4013      	ands	r3, r2
 800403c:	4a03      	ldr	r2, [pc, #12]	; (800404c <HAL_ADC_ConfigChannel+0x360>)
 800403e:	0019      	movs	r1, r3
 8004040:	0010      	movs	r0, r2
 8004042:	f7ff fb69 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 8004046:	e01d      	b.n	8004084 <HAL_ADC_ConfigChannel+0x398>
 8004048:	80000004 	.word	0x80000004
 800404c:	40012708 	.word	0x40012708
 8004050:	b0001000 	.word	0xb0001000
 8004054:	2000000c 	.word	0x2000000c
 8004058:	00030d40 	.word	0x00030d40
 800405c:	b8004000 	.word	0xb8004000
 8004060:	b4002000 	.word	0xb4002000
 8004064:	ff7fffff 	.word	0xff7fffff
 8004068:	feffffff 	.word	0xfeffffff
 800406c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	2220      	movs	r2, #32
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800407c:	2317      	movs	r3, #23
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2254      	movs	r2, #84	; 0x54
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800408c:	2317      	movs	r3, #23
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781b      	ldrb	r3, [r3, #0]
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b006      	add	sp, #24
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)

0800409c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7ff fc1e 	bl	80038ea <LL_ADC_IsDisableOngoing>
 80040ae:	0003      	movs	r3, r0
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fc06 	bl	80038c8 <LL_ADC_IsEnabled>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d046      	beq.n	800414e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d143      	bne.n	800414e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2205      	movs	r2, #5
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10d      	bne.n	80040f0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fbe3 	bl	80038a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2203      	movs	r2, #3
 80040e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040e6:	f7ff fad3 	bl	8003690 <HAL_GetTick>
 80040ea:	0003      	movs	r3, r0
 80040ec:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ee:	e028      	b.n	8004142 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	2210      	movs	r2, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2201      	movs	r2, #1
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e021      	b.n	8004150 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800410c:	f7ff fac0 	bl	8003690 <HAL_GetTick>
 8004110:	0002      	movs	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d913      	bls.n	8004142 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	d00d      	beq.n	8004142 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	2210      	movs	r2, #16
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	2201      	movs	r2, #1
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e006      	b.n	8004150 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d1de      	bne.n	800410c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b004      	add	sp, #16
 8004156:	bd80      	pop	{r7, pc}

08004158 <LL_ADC_IsEnabled>:
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2201      	movs	r2, #1
 8004166:	4013      	ands	r3, r2
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <LL_ADC_IsEnabled+0x18>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <LL_ADC_IsEnabled+0x1a>
 8004170:	2300      	movs	r3, #0
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}

0800417a <LL_ADC_IsCalibrationOnGoing>:
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0fdb      	lsrs	r3, r3, #31
 8004188:	07da      	lsls	r2, r3, #31
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	429a      	cmp	r2, r3
 8004190:	d101      	bne.n	8004196 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2254      	movs	r2, #84	; 0x54
 80041b0:	5c9b      	ldrb	r3, [r3, r2]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_ADCEx_Calibration_Start+0x1a>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e06c      	b.n	8004294 <HAL_ADCEx_Calibration_Start+0xf4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2254      	movs	r2, #84	; 0x54
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041c2:	2317      	movs	r3, #23
 80041c4:	18fc      	adds	r4, r7, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff ff67 	bl	800409c <ADC_Disable>
 80041ce:	0003      	movs	r3, r0
 80041d0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7ff ffbe 	bl	8004158 <LL_ADC_IsEnabled>
 80041dc:	1e03      	subs	r3, r0, #0
 80041de:	d14c      	bne.n	800427a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_ADCEx_Calibration_Start+0xfc>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	2202      	movs	r2, #2
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2203      	movs	r2, #3
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2103      	movs	r1, #3
 8004208:	438a      	bics	r2, r1
 800420a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	0609      	lsls	r1, r1, #24
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800421e:	e014      	b.n	800424a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_ADCEx_Calibration_Start+0x100>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d90d      	bls.n	800424a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	2212      	movs	r2, #18
 8004234:	4393      	bics	r3, r2
 8004236:	2210      	movs	r2, #16
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2254      	movs	r2, #84	; 0x54
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e024      	b.n	8004294 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	0018      	movs	r0, r3
 8004250:	f7ff ff93 	bl	800417a <LL_ADC_IsCalibrationOnGoing>
 8004254:	1e03      	subs	r3, r0, #0
 8004256:	d1e3      	bne.n	8004220 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	2203      	movs	r2, #3
 800426e:	4393      	bics	r3, r2
 8004270:	2201      	movs	r2, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	; 0x58
 8004278:	e005      	b.n	8004286 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	2210      	movs	r2, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2254      	movs	r2, #84	; 0x54
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800428e:	2317      	movs	r3, #23
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b007      	add	sp, #28
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	fffffefd 	.word	0xfffffefd
 80042a0:	0002f1ff 	.word	0x0002f1ff

080042a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	0002      	movs	r2, r0
 80042ac:	1dfb      	adds	r3, r7, #7
 80042ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d809      	bhi.n	80042cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	001a      	movs	r2, r3
 80042be:	231f      	movs	r3, #31
 80042c0:	401a      	ands	r2, r3
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <__NVIC_EnableIRQ+0x30>)
 80042c4:	2101      	movs	r1, #1
 80042c6:	4091      	lsls	r1, r2
 80042c8:	000a      	movs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	e000e100 	.word	0xe000e100

080042d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	0002      	movs	r2, r0
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	1dfb      	adds	r3, r7, #7
 80042e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042e6:	1dfb      	adds	r3, r7, #7
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b7f      	cmp	r3, #127	; 0x7f
 80042ec:	d828      	bhi.n	8004340 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ee:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <__NVIC_SetPriority+0xd4>)
 80042f0:	1dfb      	adds	r3, r7, #7
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	33c0      	adds	r3, #192	; 0xc0
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	589b      	ldr	r3, [r3, r2]
 80042fe:	1dfa      	adds	r2, r7, #7
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	0011      	movs	r1, r2
 8004304:	2203      	movs	r2, #3
 8004306:	400a      	ands	r2, r1
 8004308:	00d2      	lsls	r2, r2, #3
 800430a:	21ff      	movs	r1, #255	; 0xff
 800430c:	4091      	lsls	r1, r2
 800430e:	000a      	movs	r2, r1
 8004310:	43d2      	mvns	r2, r2
 8004312:	401a      	ands	r2, r3
 8004314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	22ff      	movs	r2, #255	; 0xff
 800431c:	401a      	ands	r2, r3
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	0018      	movs	r0, r3
 8004324:	2303      	movs	r3, #3
 8004326:	4003      	ands	r3, r0
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800432c:	481f      	ldr	r0, [pc, #124]	; (80043ac <__NVIC_SetPriority+0xd4>)
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b25b      	sxtb	r3, r3
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	430a      	orrs	r2, r1
 8004338:	33c0      	adds	r3, #192	; 0xc0
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800433e:	e031      	b.n	80043a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <__NVIC_SetPriority+0xd8>)
 8004342:	1dfb      	adds	r3, r7, #7
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	0019      	movs	r1, r3
 8004348:	230f      	movs	r3, #15
 800434a:	400b      	ands	r3, r1
 800434c:	3b08      	subs	r3, #8
 800434e:	089b      	lsrs	r3, r3, #2
 8004350:	3306      	adds	r3, #6
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	3304      	adds	r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1dfa      	adds	r2, r7, #7
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	0011      	movs	r1, r2
 8004360:	2203      	movs	r2, #3
 8004362:	400a      	ands	r2, r1
 8004364:	00d2      	lsls	r2, r2, #3
 8004366:	21ff      	movs	r1, #255	; 0xff
 8004368:	4091      	lsls	r1, r2
 800436a:	000a      	movs	r2, r1
 800436c:	43d2      	mvns	r2, r2
 800436e:	401a      	ands	r2, r3
 8004370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	019b      	lsls	r3, r3, #6
 8004376:	22ff      	movs	r2, #255	; 0xff
 8004378:	401a      	ands	r2, r3
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	0018      	movs	r0, r3
 8004380:	2303      	movs	r3, #3
 8004382:	4003      	ands	r3, r0
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004388:	4809      	ldr	r0, [pc, #36]	; (80043b0 <__NVIC_SetPriority+0xd8>)
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	001c      	movs	r4, r3
 8004390:	230f      	movs	r3, #15
 8004392:	4023      	ands	r3, r4
 8004394:	3b08      	subs	r3, #8
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	430a      	orrs	r2, r1
 800439a:	3306      	adds	r3, #6
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	18c3      	adds	r3, r0, r3
 80043a0:	3304      	adds	r3, #4
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b003      	add	sp, #12
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	e000e100 	.word	0xe000e100
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	045b      	lsls	r3, r3, #17
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d301      	bcc.n	80043cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c8:	2301      	movs	r3, #1
 80043ca:	e010      	b.n	80043ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <SysTick_Config+0x44>)
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	3a01      	subs	r2, #1
 80043d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d4:	2301      	movs	r3, #1
 80043d6:	425b      	negs	r3, r3
 80043d8:	2103      	movs	r1, #3
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff ff7c 	bl	80042d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <SysTick_Config+0x44>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <SysTick_Config+0x44>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b002      	add	sp, #8
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	e000e010 	.word	0xe000e010

080043fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	210f      	movs	r1, #15
 8004408:	187b      	adds	r3, r7, r1
 800440a:	1c02      	adds	r2, r0, #0
 800440c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	187b      	adds	r3, r7, r1
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b25b      	sxtb	r3, r3
 8004416:	0011      	movs	r1, r2
 8004418:	0018      	movs	r0, r3
 800441a:	f7ff ff5d 	bl	80042d8 <__NVIC_SetPriority>
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b004      	add	sp, #16
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	0002      	movs	r2, r0
 800442e:	1dfb      	adds	r3, r7, #7
 8004430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004432:	1dfb      	adds	r3, r7, #7
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b25b      	sxtb	r3, r3
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff ff33 	bl	80042a4 <__NVIC_EnableIRQ>
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff ffaf 	bl	80043b4 <SysTick_Config>
 8004456:	0003      	movs	r3, r0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004460:	b5b0      	push	{r4, r5, r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603a      	str	r2, [r7, #0]
 800446c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_FLASH_Program+0x94>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_FLASH_Program+0x1a>
 8004476:	2302      	movs	r3, #2
 8004478:	e038      	b.n	80044ec <HAL_FLASH_Program+0x8c>
 800447a:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_FLASH_Program+0x94>)
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004480:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <HAL_FLASH_Program+0x94>)
 8004482:	2200      	movs	r2, #0
 8004484:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004486:	2517      	movs	r5, #23
 8004488:	197c      	adds	r4, r7, r5
 800448a:	23fa      	movs	r3, #250	; 0xfa
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f874 	bl	800457c <FLASH_WaitForLastOperation>
 8004494:	0003      	movs	r3, r0
 8004496:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004498:	197b      	adds	r3, r7, r5
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11f      	bne.n	80044e0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d106      	bne.n	80044b4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	0008      	movs	r0, r1
 80044ae:	f000 f8b3 	bl	8004618 <FLASH_Program_DoubleWord>
 80044b2:	e005      	b.n	80044c0 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	0011      	movs	r1, r2
 80044ba:	0018      	movs	r0, r3
 80044bc:	f00b fea4 	bl	8010208 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044c0:	2317      	movs	r3, #23
 80044c2:	18fc      	adds	r4, r7, r3
 80044c4:	23fa      	movs	r3, #250	; 0xfa
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 f857 	bl	800457c <FLASH_WaitForLastOperation>
 80044ce:	0003      	movs	r3, r0
 80044d0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_FLASH_Program+0x98>)
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	43d9      	mvns	r1, r3
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_FLASH_Program+0x98>)
 80044dc:	400a      	ands	r2, r1
 80044de:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_FLASH_Program+0x94>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80044e6:	2317      	movs	r3, #23
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	781b      	ldrb	r3, [r3, #0]
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bdb0      	pop	{r4, r5, r7, pc}
 80044f4:	2000011c 	.word	0x2000011c
 80044f8:	40022000 	.word	0x40022000

080044fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_FLASH_Unlock+0x3c>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	da0c      	bge.n	800452a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_FLASH_Unlock+0x3c>)
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_FLASH_Unlock+0x40>)
 8004514:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_FLASH_Unlock+0x3c>)
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <HAL_FLASH_Unlock+0x44>)
 800451a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_FLASH_Unlock+0x3c>)
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	da02      	bge.n	800452a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8004524:	1dfb      	adds	r3, r7, #7
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b002      	add	sp, #8
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	40022000 	.word	0x40022000
 800453c:	45670123 	.word	0x45670123
 8004540:	cdef89ab 	.word	0xcdef89ab

08004544 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800454a:	1dfb      	adds	r3, r7, #7
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_FLASH_Lock+0x34>)
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_FLASH_Lock+0x34>)
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	0609      	lsls	r1, r1, #24
 800455a:	430a      	orrs	r2, r1
 800455c:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_FLASH_Lock+0x34>)
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	da02      	bge.n	800456c <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	781b      	ldrb	r3, [r3, #0]
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40022000 	.word	0x40022000

0800457c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8004584:	f7ff f884 	bl	8003690 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	189b      	adds	r3, r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	025b      	lsls	r3, r3, #9
 8004594:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8004596:	e007      	b.n	80045a8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8004598:	f7ff f87a 	bl	8003690 <HAL_GetTick>
 800459c:	0002      	movs	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d801      	bhi.n	80045a8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e02a      	b.n	80045fe <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <FLASH_WaitForLastOperation+0x8c>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	d1f2      	bne.n	8004598 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <FLASH_WaitForLastOperation+0x8c>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <FLASH_WaitForLastOperation+0x90>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <FLASH_WaitForLastOperation+0x8c>)
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <FLASH_WaitForLastOperation+0x94>)
 80045c0:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <FLASH_WaitForLastOperation+0x98>)
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e015      	b.n	80045fe <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80045d2:	f7ff f85d 	bl	8003690 <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80045de:	e007      	b.n	80045f0 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80045e0:	f7ff f856 	bl	8003690 <HAL_GetTick>
 80045e4:	0002      	movs	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d801      	bhi.n	80045f0 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e006      	b.n	80045fe <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <FLASH_WaitForLastOperation+0x8c>)
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	02db      	lsls	r3, r3, #11
 80045f8:	4013      	ands	r3, r2
 80045fa:	d1f1      	bne.n	80045e0 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	b004      	add	sp, #16
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	40022000 	.word	0x40022000
 800460c:	0000c3fa 	.word	0x0000c3fa
 8004610:	0000c3fb 	.word	0x0000c3fb
 8004614:	2000011c 	.word	0x2000011c

08004618 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004618:	b5b0      	push	{r4, r5, r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	603a      	str	r2, [r7, #0]
 8004622:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <FLASH_Program_DoubleWord+0x3c>)
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <FLASH_Program_DoubleWord+0x3c>)
 800462a:	2101      	movs	r1, #1
 800462c:	430a      	orrs	r2, r1
 800462e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004636:	f3bf 8f6f 	isb	sy
}
 800463a:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	001c      	movs	r4, r3
 8004640:	2300      	movs	r3, #0
 8004642:	001d      	movs	r5, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3304      	adds	r3, #4
 8004648:	0022      	movs	r2, r4
 800464a:	601a      	str	r2, [r3, #0]
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b004      	add	sp, #16
 8004652:	bdb0      	pop	{r4, r5, r7, pc}
 8004654:	40022000 	.word	0x40022000

08004658 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004658:	b5b0      	push	{r4, r5, r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004662:	4b35      	ldr	r3, [pc, #212]	; (8004738 <HAL_FLASHEx_Erase+0xe0>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_FLASHEx_Erase+0x16>
 800466a:	2302      	movs	r3, #2
 800466c:	e05f      	b.n	800472e <HAL_FLASHEx_Erase+0xd6>
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_FLASHEx_Erase+0xe0>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004674:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_FLASHEx_Erase+0xe0>)
 8004676:	2200      	movs	r2, #0
 8004678:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800467a:	250f      	movs	r5, #15
 800467c:	197c      	adds	r4, r7, r5
 800467e:	23fa      	movs	r3, #250	; 0xfa
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff ff7a 	bl	800457c <FLASH_WaitForLastOperation>
 8004688:	0003      	movs	r3, r0
 800468a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800468c:	002c      	movs	r4, r5
 800468e:	193b      	adds	r3, r7, r4
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d145      	bne.n	8004722 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d10d      	bne.n	80046c0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 f849 	bl	8004740 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046ae:	193c      	adds	r4, r7, r4
 80046b0:	23fa      	movs	r3, #250	; 0xfa
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7ff ff61 	bl	800457c <FLASH_WaitForLastOperation>
 80046ba:	0003      	movs	r3, r0
 80046bc:	7023      	strb	r3, [r4, #0]
 80046be:	e030      	b.n	8004722 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	4252      	negs	r2, r2
 80046c6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	e01a      	b.n	8004706 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0011      	movs	r1, r2
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 f845 	bl	8004768 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046de:	250f      	movs	r5, #15
 80046e0:	197c      	adds	r4, r7, r5
 80046e2:	23fa      	movs	r3, #250	; 0xfa
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7ff ff48 	bl	800457c <FLASH_WaitForLastOperation>
 80046ec:	0003      	movs	r3, r0
 80046ee:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80046f0:	197b      	adds	r3, r7, r5
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	601a      	str	r2, [r3, #0]
          break;
 80046fe:	e00a      	b.n	8004716 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	3301      	adds	r3, #1
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	18d3      	adds	r3, r2, r3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d3dc      	bcc.n	80046d0 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_FLASHEx_Erase+0xe4>)
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <HAL_FLASHEx_Erase+0xe4>)
 800471c:	2102      	movs	r1, #2
 800471e:	438a      	bics	r2, r1
 8004720:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_FLASHEx_Erase+0xe0>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004728:	230f      	movs	r3, #15
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b004      	add	sp, #16
 8004734:	bdb0      	pop	{r4, r5, r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	2000011c 	.word	0x2000011c
 800473c:	40022000 	.word	0x40022000

08004740 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <FLASH_MassErase+0x24>)
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	431a      	orrs	r2, r3
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <FLASH_MassErase+0x24>)
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	0249      	lsls	r1, r1, #9
 8004756:	430a      	orrs	r2, r1
 8004758:	615a      	str	r2, [r3, #20]
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	40022000 	.word	0x40022000

08004768 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <FLASH_PageErase+0x2c>)
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <FLASH_PageErase+0x30>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	00da      	lsls	r2, r3, #3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	431a      	orrs	r2, r3
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <FLASH_PageErase+0x2c>)
 8004786:	4905      	ldr	r1, [pc, #20]	; (800479c <FLASH_PageErase+0x34>)
 8004788:	430a      	orrs	r2, r1
 800478a:	615a      	str	r2, [r3, #20]
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	b004      	add	sp, #16
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40022000 	.word	0x40022000
 8004798:	fffffe07 	.word	0xfffffe07
 800479c:	00010002 	.word	0x00010002

080047a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ae:	e147      	b.n	8004a40 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2101      	movs	r1, #1
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4091      	lsls	r1, r2
 80047ba:	000a      	movs	r2, r1
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d100      	bne.n	80047c8 <HAL_GPIO_Init+0x28>
 80047c6:	e138      	b.n	8004a3a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2203      	movs	r2, #3
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d005      	beq.n	80047e0 <HAL_GPIO_Init+0x40>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2203      	movs	r2, #3
 80047da:	4013      	ands	r3, r2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d130      	bne.n	8004842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	2203      	movs	r2, #3
 80047ec:	409a      	lsls	r2, r3
 80047ee:	0013      	movs	r3, r2
 80047f0:	43da      	mvns	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	409a      	lsls	r2, r3
 8004802:	0013      	movs	r3, r2
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004816:	2201      	movs	r2, #1
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	409a      	lsls	r2, r3
 800481c:	0013      	movs	r3, r2
 800481e:	43da      	mvns	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	2201      	movs	r2, #1
 800482e:	401a      	ands	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	409a      	lsls	r2, r3
 8004834:	0013      	movs	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2203      	movs	r2, #3
 8004848:	4013      	ands	r3, r2
 800484a:	2b03      	cmp	r3, #3
 800484c:	d017      	beq.n	800487e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	409a      	lsls	r2, r3
 800485c:	0013      	movs	r3, r2
 800485e:	43da      	mvns	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	409a      	lsls	r2, r3
 8004870:	0013      	movs	r3, r2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2203      	movs	r2, #3
 8004884:	4013      	ands	r3, r2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d123      	bne.n	80048d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	08da      	lsrs	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3208      	adds	r2, #8
 8004892:	0092      	lsls	r2, r2, #2
 8004894:	58d3      	ldr	r3, [r2, r3]
 8004896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2207      	movs	r2, #7
 800489c:	4013      	ands	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	220f      	movs	r2, #15
 80048a2:	409a      	lsls	r2, r3
 80048a4:	0013      	movs	r3, r2
 80048a6:	43da      	mvns	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2107      	movs	r1, #7
 80048b6:	400b      	ands	r3, r1
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0013      	movs	r3, r2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	08da      	lsrs	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3208      	adds	r2, #8
 80048cc:	0092      	lsls	r2, r2, #2
 80048ce:	6939      	ldr	r1, [r7, #16]
 80048d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2203      	movs	r2, #3
 80048de:	409a      	lsls	r2, r3
 80048e0:	0013      	movs	r3, r2
 80048e2:	43da      	mvns	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2203      	movs	r2, #3
 80048f0:	401a      	ands	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	0013      	movs	r3, r2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	23c0      	movs	r3, #192	; 0xc0
 800490c:	029b      	lsls	r3, r3, #10
 800490e:	4013      	ands	r3, r2
 8004910:	d100      	bne.n	8004914 <HAL_GPIO_Init+0x174>
 8004912:	e092      	b.n	8004a3a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004914:	4a50      	ldr	r2, [pc, #320]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	3318      	adds	r3, #24
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	589b      	ldr	r3, [r3, r2]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2203      	movs	r2, #3
 8004926:	4013      	ands	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	220f      	movs	r2, #15
 800492c:	409a      	lsls	r2, r3
 800492e:	0013      	movs	r3, r2
 8004930:	43da      	mvns	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	23a0      	movs	r3, #160	; 0xa0
 800493c:	05db      	lsls	r3, r3, #23
 800493e:	429a      	cmp	r2, r3
 8004940:	d013      	beq.n	800496a <HAL_GPIO_Init+0x1ca>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a45      	ldr	r2, [pc, #276]	; (8004a5c <HAL_GPIO_Init+0x2bc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00d      	beq.n	8004966 <HAL_GPIO_Init+0x1c6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a44      	ldr	r2, [pc, #272]	; (8004a60 <HAL_GPIO_Init+0x2c0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <HAL_GPIO_Init+0x1c2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a43      	ldr	r2, [pc, #268]	; (8004a64 <HAL_GPIO_Init+0x2c4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_GPIO_Init+0x1be>
 800495a:	2303      	movs	r3, #3
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x1cc>
 800495e:	2305      	movs	r3, #5
 8004960:	e004      	b.n	800496c <HAL_GPIO_Init+0x1cc>
 8004962:	2302      	movs	r3, #2
 8004964:	e002      	b.n	800496c <HAL_GPIO_Init+0x1cc>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_GPIO_Init+0x1cc>
 800496a:	2300      	movs	r3, #0
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	2103      	movs	r1, #3
 8004970:	400a      	ands	r2, r1
 8004972:	00d2      	lsls	r2, r2, #3
 8004974:	4093      	lsls	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800497c:	4936      	ldr	r1, [pc, #216]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3318      	adds	r3, #24
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800498a:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	58d3      	ldr	r3, [r2, r3]
 8004990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	43da      	mvns	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	025b      	lsls	r3, r3, #9
 80049a4:	4013      	ands	r3, r2
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049b0:	4929      	ldr	r1, [pc, #164]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 80049ba:	2384      	movs	r3, #132	; 0x84
 80049bc:	58d3      	ldr	r3, [r2, r3]
 80049be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	43da      	mvns	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	029b      	lsls	r3, r3, #10
 80049d2:	4013      	ands	r3, r2
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049de:	491e      	ldr	r1, [pc, #120]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 80049e0:	2284      	movs	r2, #132	; 0x84
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049e6:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	43da      	mvns	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	035b      	lsls	r3, r3, #13
 80049fe:	4013      	ands	r3, r2
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	039b      	lsls	r3, r3, #14
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_GPIO_Init+0x2b8>)
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	40da      	lsrs	r2, r3
 8004a48:	1e13      	subs	r3, r2, #0
 8004a4a:	d000      	beq.n	8004a4e <HAL_GPIO_Init+0x2ae>
 8004a4c:	e6b0      	b.n	80047b0 <HAL_GPIO_Init+0x10>
  }
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b006      	add	sp, #24
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021800 	.word	0x40021800
 8004a5c:	50000400 	.word	0x50000400
 8004a60:	50000800 	.word	0x50000800
 8004a64:	50000c00 	.word	0x50000c00

08004a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	000a      	movs	r2, r1
 8004a72:	1cbb      	adds	r3, r7, #2
 8004a74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	1cba      	adds	r2, r7, #2
 8004a7c:	8812      	ldrh	r2, [r2, #0]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a82:	230f      	movs	r3, #15
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e003      	b.n	8004a94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a8c:	230f      	movs	r3, #15
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a94:	230f      	movs	r3, #15
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	781b      	ldrb	r3, [r3, #0]
}
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b004      	add	sp, #16
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	0008      	movs	r0, r1
 8004aac:	0011      	movs	r1, r2
 8004aae:	1cbb      	adds	r3, r7, #2
 8004ab0:	1c02      	adds	r2, r0, #0
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	1c7b      	adds	r3, r7, #1
 8004ab6:	1c0a      	adds	r2, r1, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aba:	1c7b      	adds	r3, r7, #1
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d004      	beq.n	8004acc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ac2:	1cbb      	adds	r3, r7, #2
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aca:	e003      	b.n	8004ad4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004acc:	1cbb      	adds	r3, r7, #2
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	1dbb      	adds	r3, r7, #6
 8004ae6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	1dba      	adds	r2, r7, #6
 8004aee:	8812      	ldrh	r2, [r2, #0]
 8004af0:	4013      	ands	r3, r2
 8004af2:	d008      	beq.n	8004b06 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004af6:	1dba      	adds	r2, r7, #6
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004afc:	1dbb      	adds	r3, r7, #6
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f007 fc8c 	bl	800c41e <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	1dba      	adds	r2, r7, #6
 8004b0c:	8812      	ldrh	r2, [r2, #0]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d008      	beq.n	8004b24 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b14:	1dba      	adds	r2, r7, #6
 8004b16:	8812      	ldrh	r2, [r2, #0]
 8004b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004b1a:	1dbb      	adds	r3, r7, #6
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f007 fc6e 	bl	800c400 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021800 	.word	0x40021800

08004b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e082      	b.n	8004c48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2241      	movs	r2, #65	; 0x41
 8004b46:	5c9b      	ldrb	r3, [r3, r2]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f00a f867 	bl	800ec2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2241      	movs	r2, #65	; 0x41
 8004b62:	2124      	movs	r1, #36	; 0x24
 8004b64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	438a      	bics	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4934      	ldr	r1, [pc, #208]	; (8004c50 <HAL_I2C_Init+0x120>)
 8004b80:	400a      	ands	r2, r1
 8004b82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4931      	ldr	r1, [pc, #196]	; (8004c54 <HAL_I2C_Init+0x124>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d108      	bne.n	8004bae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	0209      	lsls	r1, r1, #8
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	e007      	b.n	8004bbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2184      	movs	r1, #132	; 0x84
 8004bb8:	0209      	lsls	r1, r1, #8
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d104      	bne.n	8004bd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	0112      	lsls	r2, r2, #4
 8004bce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	491f      	ldr	r1, [pc, #124]	; (8004c58 <HAL_I2C_Init+0x128>)
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	491a      	ldr	r1, [pc, #104]	; (8004c54 <HAL_I2C_Init+0x124>)
 8004bec:	400a      	ands	r2, r1
 8004bee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69d9      	ldr	r1, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1a      	ldr	r2, [r3, #32]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2241      	movs	r2, #65	; 0x41
 8004c34:	2120      	movs	r1, #32
 8004c36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2242      	movs	r2, #66	; 0x42
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	f0ffffff 	.word	0xf0ffffff
 8004c54:	ffff7fff 	.word	0xffff7fff
 8004c58:	02008000 	.word	0x02008000

08004c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	000c      	movs	r4, r1
 8004c66:	0010      	movs	r0, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	1c22      	adds	r2, r4, #0
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	2308      	movs	r3, #8
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	1c02      	adds	r2, r0, #0
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	1dbb      	adds	r3, r7, #6
 8004c7c:	1c0a      	adds	r2, r1, #0
 8004c7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2241      	movs	r2, #65	; 0x41
 8004c84:	5c9b      	ldrb	r3, [r3, r2]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d000      	beq.n	8004c8e <HAL_I2C_Mem_Write+0x32>
 8004c8c:	e10c      	b.n	8004ea8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <HAL_I2C_Mem_Write+0x42>
 8004c94:	232c      	movs	r3, #44	; 0x2c
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0ff      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_Mem_Write+0x5c>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0f8      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fe fce6 	bl	8003690 <HAL_GetTick>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	0219      	lsls	r1, r3, #8
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2319      	movs	r3, #25
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f000 fb0b 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0e3      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2241      	movs	r2, #65	; 0x41
 8004ce6:	2121      	movs	r1, #33	; 0x21
 8004ce8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2242      	movs	r2, #66	; 0x42
 8004cee:	2140      	movs	r1, #64	; 0x40
 8004cf0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	222c      	movs	r2, #44	; 0x2c
 8004d02:	18ba      	adds	r2, r7, r2
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d0e:	1dbb      	adds	r3, r7, #6
 8004d10:	881c      	ldrh	r4, [r3, #0]
 8004d12:	2308      	movs	r3, #8
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	230a      	movs	r3, #10
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	8819      	ldrh	r1, [r3, #0]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	0023      	movs	r3, r4
 8004d2a:	f000 f9f9 	bl	8005120 <I2C_RequestMemoryWrite>
 8004d2e:	1e03      	subs	r3, r0, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2240      	movs	r2, #64	; 0x40
 8004d36:	2100      	movs	r1, #0
 8004d38:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0b5      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2bff      	cmp	r3, #255	; 0xff
 8004d46:	d911      	bls.n	8004d6c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	22ff      	movs	r2, #255	; 0xff
 8004d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	045c      	lsls	r4, r3, #17
 8004d58:	230a      	movs	r3, #10
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	8819      	ldrh	r1, [r3, #0]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	0023      	movs	r3, r4
 8004d66:	f000 fbf7 	bl	8005558 <I2C_TransferConfig>
 8004d6a:	e012      	b.n	8004d92 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	049c      	lsls	r4, r3, #18
 8004d80:	230a      	movs	r3, #10
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	8819      	ldrh	r1, [r3, #0]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	0023      	movs	r3, r4
 8004d8e:	f000 fbe3 	bl	8005558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fae8 	bl	800536e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e081      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03a      	beq.n	8004e56 <HAL_I2C_Mem_Write+0x1fa>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d136      	bne.n	8004e56 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	0013      	movs	r3, r2
 8004df2:	2200      	movs	r2, #0
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	f000 fa7b 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e053      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2bff      	cmp	r3, #255	; 0xff
 8004e0a:	d911      	bls.n	8004e30 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	22ff      	movs	r2, #255	; 0xff
 8004e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	045c      	lsls	r4, r3, #17
 8004e1c:	230a      	movs	r3, #10
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	8819      	ldrh	r1, [r3, #0]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	2300      	movs	r3, #0
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	0023      	movs	r3, r4
 8004e2a:	f000 fb95 	bl	8005558 <I2C_TransferConfig>
 8004e2e:	e012      	b.n	8004e56 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	049c      	lsls	r4, r3, #18
 8004e44:	230a      	movs	r3, #10
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	8819      	ldrh	r1, [r3, #0]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	0023      	movs	r3, r4
 8004e52:	f000 fb81 	bl	8005558 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d198      	bne.n	8004d92 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	0018      	movs	r0, r3
 8004e68:	f000 fac0 	bl	80053ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e6c:	1e03      	subs	r3, r0, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e01a      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	490b      	ldr	r1, [pc, #44]	; (8004eb4 <HAL_I2C_Mem_Write+0x258>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2241      	movs	r2, #65	; 0x41
 8004e90:	2120      	movs	r1, #32
 8004e92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2242      	movs	r2, #66	; 0x42
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2240      	movs	r2, #64	; 0x40
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	0018      	movs	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b007      	add	sp, #28
 8004eb0:	bd90      	pop	{r4, r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	fe00e800 	.word	0xfe00e800

08004eb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	000c      	movs	r4, r1
 8004ec2:	0010      	movs	r0, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	1c22      	adds	r2, r4, #0
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	2308      	movs	r3, #8
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	1c02      	adds	r2, r0, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	1dbb      	adds	r3, r7, #6
 8004ed8:	1c0a      	adds	r2, r1, #0
 8004eda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2241      	movs	r2, #65	; 0x41
 8004ee0:	5c9b      	ldrb	r3, [r3, r2]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d000      	beq.n	8004eea <HAL_I2C_Mem_Read+0x32>
 8004ee8:	e110      	b.n	800510c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <HAL_I2C_Mem_Read+0x42>
 8004ef0:	232c      	movs	r3, #44	; 0x2c
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2280      	movs	r2, #128	; 0x80
 8004efe:	0092      	lsls	r2, r2, #2
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e103      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2C_Mem_Read+0x5c>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0fc      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	2101      	movs	r1, #1
 8004f1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f1c:	f7fe fbb8 	bl	8003690 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	0219      	lsls	r1, r3, #8
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2319      	movs	r3, #25
 8004f30:	2201      	movs	r2, #1
 8004f32:	f000 f9dd 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	1e03      	subs	r3, r0, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0e7      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2241      	movs	r2, #65	; 0x41
 8004f42:	2122      	movs	r1, #34	; 0x22
 8004f44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2242      	movs	r2, #66	; 0x42
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	222c      	movs	r2, #44	; 0x2c
 8004f5e:	18ba      	adds	r2, r7, r2
 8004f60:	8812      	ldrh	r2, [r2, #0]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	881c      	ldrh	r4, [r3, #0]
 8004f6e:	2308      	movs	r3, #8
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	881a      	ldrh	r2, [r3, #0]
 8004f74:	230a      	movs	r3, #10
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	8819      	ldrh	r1, [r3, #0]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	0023      	movs	r3, r4
 8004f86:	f000 f92f 	bl	80051e8 <I2C_RequestMemoryRead>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2240      	movs	r2, #64	; 0x40
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0b9      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2bff      	cmp	r3, #255	; 0xff
 8004fa2:	d911      	bls.n	8004fc8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	045c      	lsls	r4, r3, #17
 8004fb4:	230a      	movs	r3, #10
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	8819      	ldrh	r1, [r3, #0]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_I2C_Mem_Read+0x260>)
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	0023      	movs	r3, r4
 8004fc2:	f000 fac9 	bl	8005558 <I2C_TransferConfig>
 8004fc6:	e012      	b.n	8004fee <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	049c      	lsls	r4, r3, #18
 8004fdc:	230a      	movs	r3, #10
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	8819      	ldrh	r1, [r3, #0]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	4b4c      	ldr	r3, [pc, #304]	; (8005118 <HAL_I2C_Mem_Read+0x260>)
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	0023      	movs	r3, r4
 8004fea:	f000 fab5 	bl	8005558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	0013      	movs	r3, r2
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	f000 f978 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8005000:	1e03      	subs	r3, r0, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e082      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d03a      	beq.n	80050ba <HAL_I2C_Mem_Read+0x202>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d136      	bne.n	80050ba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800504c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	0013      	movs	r3, r2
 8005056:	2200      	movs	r2, #0
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	f000 f949 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e053      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	2bff      	cmp	r3, #255	; 0xff
 800506e:	d911      	bls.n	8005094 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	22ff      	movs	r2, #255	; 0xff
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	b2da      	uxtb	r2, r3
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	045c      	lsls	r4, r3, #17
 8005080:	230a      	movs	r3, #10
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	8819      	ldrh	r1, [r3, #0]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	2300      	movs	r3, #0
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	0023      	movs	r3, r4
 800508e:	f000 fa63 	bl	8005558 <I2C_TransferConfig>
 8005092:	e012      	b.n	80050ba <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	049c      	lsls	r4, r3, #18
 80050a8:	230a      	movs	r3, #10
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	8819      	ldrh	r1, [r3, #0]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	0023      	movs	r3, r4
 80050b6:	f000 fa4f 	bl	8005558 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d194      	bne.n	8004fee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 f98e 	bl	80053ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80050d0:	1e03      	subs	r3, r0, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e01a      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2220      	movs	r2, #32
 80050de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	490c      	ldr	r1, [pc, #48]	; (800511c <HAL_I2C_Mem_Read+0x264>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2241      	movs	r2, #65	; 0x41
 80050f4:	2120      	movs	r1, #32
 80050f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2242      	movs	r2, #66	; 0x42
 80050fc:	2100      	movs	r1, #0
 80050fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2240      	movs	r2, #64	; 0x40
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b007      	add	sp, #28
 8005114:	bd90      	pop	{r4, r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	80002400 	.word	0x80002400
 800511c:	fe00e800 	.word	0xfe00e800

08005120 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	000c      	movs	r4, r1
 800512a:	0010      	movs	r0, r2
 800512c:	0019      	movs	r1, r3
 800512e:	250a      	movs	r5, #10
 8005130:	197b      	adds	r3, r7, r5
 8005132:	1c22      	adds	r2, r4, #0
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	2308      	movs	r3, #8
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	1c02      	adds	r2, r0, #0
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	1dbb      	adds	r3, r7, #6
 8005140:	1c0a      	adds	r2, r1, #0
 8005142:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005144:	1dbb      	adds	r3, r7, #6
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	045c      	lsls	r4, r3, #17
 800514e:	197b      	adds	r3, r7, r5
 8005150:	8819      	ldrh	r1, [r3, #0]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <I2C_RequestMemoryWrite+0xc4>)
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	0023      	movs	r3, r4
 800515a:	f000 f9fd 	bl	8005558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800515e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005160:	6a39      	ldr	r1, [r7, #32]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0018      	movs	r0, r3
 8005166:	f000 f902 	bl	800536e <I2C_WaitOnTXISFlagUntilTimeout>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d001      	beq.n	8005172 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e033      	b.n	80051da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005172:	1dbb      	adds	r3, r7, #6
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d107      	bne.n	800518a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800517a:	2308      	movs	r3, #8
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
 8005188:	e019      	b.n	80051be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800518a:	2308      	movs	r3, #8
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	b29b      	uxth	r3, r3
 8005194:	b2da      	uxtb	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519e:	6a39      	ldr	r1, [r7, #32]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 f8e3 	bl	800536e <I2C_WaitOnTXISFlagUntilTimeout>
 80051a8:	1e03      	subs	r3, r0, #0
 80051aa:	d001      	beq.n	80051b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e014      	b.n	80051da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051b0:	2308      	movs	r3, #8
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	0013      	movs	r3, r2
 80051c8:	2200      	movs	r2, #0
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	f000 f890 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 80051d0:	1e03      	subs	r3, r0, #0
 80051d2:	d001      	beq.n	80051d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b004      	add	sp, #16
 80051e0:	bdb0      	pop	{r4, r5, r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	80002000 	.word	0x80002000

080051e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80051e8:	b5b0      	push	{r4, r5, r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	000c      	movs	r4, r1
 80051f2:	0010      	movs	r0, r2
 80051f4:	0019      	movs	r1, r3
 80051f6:	250a      	movs	r5, #10
 80051f8:	197b      	adds	r3, r7, r5
 80051fa:	1c22      	adds	r2, r4, #0
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	2308      	movs	r3, #8
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	1c02      	adds	r2, r0, #0
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	1dbb      	adds	r3, r7, #6
 8005208:	1c0a      	adds	r2, r1, #0
 800520a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800520c:	1dbb      	adds	r3, r7, #6
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	197b      	adds	r3, r7, r5
 8005214:	8819      	ldrh	r1, [r3, #0]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <I2C_RequestMemoryRead+0xc0>)
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	2300      	movs	r3, #0
 800521e:	f000 f99b 	bl	8005558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	6a39      	ldr	r1, [r7, #32]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 f8a0 	bl	800536e <I2C_WaitOnTXISFlagUntilTimeout>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d001      	beq.n	8005236 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e033      	b.n	800529e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005236:	1dbb      	adds	r3, r7, #6
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d107      	bne.n	800524e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800523e:	2308      	movs	r3, #8
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
 800524c:	e019      	b.n	8005282 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800524e:	2308      	movs	r3, #8
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	b29b      	uxth	r3, r3
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005262:	6a39      	ldr	r1, [r7, #32]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f881 	bl	800536e <I2C_WaitOnTXISFlagUntilTimeout>
 800526c:	1e03      	subs	r3, r0, #0
 800526e:	d001      	beq.n	8005274 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e014      	b.n	800529e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005274:	2308      	movs	r3, #8
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005282:	6a3a      	ldr	r2, [r7, #32]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	0013      	movs	r3, r2
 800528c:	2200      	movs	r2, #0
 800528e:	2140      	movs	r1, #64	; 0x40
 8005290:	f000 f82e 	bl	80052f0 <I2C_WaitOnFlagUntilTimeout>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d001      	beq.n	800529c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bdb0      	pop	{r4, r5, r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	80002000 	.word	0x80002000

080052ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2202      	movs	r2, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d103      	bne.n	80052ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2201      	movs	r2, #1
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d007      	beq.n	80052e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	430a      	orrs	r2, r1
 80052e6:	619a      	str	r2, [r3, #24]
  }
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	1dfb      	adds	r3, r7, #7
 80052fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005300:	e021      	b.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	d01e      	beq.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005308:	f7fe f9c2 	bl	8003690 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d113      	bne.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	2220      	movs	r2, #32
 8005324:	431a      	orrs	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2241      	movs	r2, #65	; 0x41
 800532e:	2120      	movs	r1, #32
 8005330:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2242      	movs	r2, #66	; 0x42
 8005336:	2100      	movs	r1, #0
 8005338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2240      	movs	r2, #64	; 0x40
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e00f      	b.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	425a      	negs	r2, r3
 8005356:	4153      	adcs	r3, r2
 8005358:	b2db      	uxtb	r3, r3
 800535a:	001a      	movs	r2, r3
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d0ce      	beq.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}

0800536e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800537a:	e02b      	b.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f86e 	bl	8005464 <I2C_IsAcknowledgeFailed>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d001      	beq.n	8005390 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e029      	b.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	3301      	adds	r3, #1
 8005394:	d01e      	beq.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fe f97b 	bl	8003690 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d113      	bne.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	2220      	movs	r2, #32
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2241      	movs	r2, #65	; 0x41
 80053bc:	2120      	movs	r1, #32
 80053be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2242      	movs	r2, #66	; 0x42
 80053c4:	2100      	movs	r1, #0
 80053c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2240      	movs	r2, #64	; 0x40
 80053cc:	2100      	movs	r1, #0
 80053ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e007      	b.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2202      	movs	r2, #2
 80053dc:	4013      	ands	r3, r2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d1cc      	bne.n	800537c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b004      	add	sp, #16
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f8:	e028      	b.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	0018      	movs	r0, r3
 8005402:	f000 f82f 	bl	8005464 <I2C_IsAcknowledgeFailed>
 8005406:	1e03      	subs	r3, r0, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e026      	b.n	800545c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe f93f 	bl	8003690 <HAL_GetTick>
 8005412:	0002      	movs	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d113      	bne.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	2220      	movs	r2, #32
 800542a:	431a      	orrs	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2241      	movs	r2, #65	; 0x41
 8005434:	2120      	movs	r1, #32
 8005436:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2242      	movs	r2, #66	; 0x42
 800543c:	2100      	movs	r1, #0
 800543e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e007      	b.n	800545c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2220      	movs	r2, #32
 8005454:	4013      	ands	r3, r2
 8005456:	2b20      	cmp	r3, #32
 8005458:	d1cf      	bne.n	80053fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}

08005464 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2210      	movs	r2, #16
 8005478:	4013      	ands	r3, r2
 800547a:	2b10      	cmp	r3, #16
 800547c:	d164      	bne.n	8005548 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	049b      	lsls	r3, r3, #18
 8005488:	401a      	ands	r2, r3
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	049b      	lsls	r3, r3, #18
 800548e:	429a      	cmp	r2, r3
 8005490:	d02b      	beq.n	80054ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	01c9      	lsls	r1, r1, #7
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a4:	e021      	b.n	80054ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3301      	adds	r3, #1
 80054aa:	d01e      	beq.n	80054ea <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7fe f8f0 	bl	8003690 <HAL_GetTick>
 80054b0:	0002      	movs	r2, r0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <I2C_IsAcknowledgeFailed+0x5e>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d113      	bne.n	80054ea <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	2220      	movs	r2, #32
 80054c8:	431a      	orrs	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2241      	movs	r2, #65	; 0x41
 80054d2:	2120      	movs	r1, #32
 80054d4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2242      	movs	r2, #66	; 0x42
 80054da:	2100      	movs	r1, #0
 80054dc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	2100      	movs	r1, #0
 80054e4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e02f      	b.n	800554a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2220      	movs	r2, #32
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d1d6      	bne.n	80054a6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2210      	movs	r2, #16
 80054fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2220      	movs	r2, #32
 8005506:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	0018      	movs	r0, r3
 800550c:	f7ff fece 	bl	80052ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	490e      	ldr	r1, [pc, #56]	; (8005554 <I2C_IsAcknowledgeFailed+0xf0>)
 800551c:	400a      	ands	r2, r1
 800551e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	2204      	movs	r2, #4
 8005526:	431a      	orrs	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2241      	movs	r2, #65	; 0x41
 8005530:	2120      	movs	r1, #32
 8005532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2242      	movs	r2, #66	; 0x42
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2240      	movs	r2, #64	; 0x40
 8005540:	2100      	movs	r1, #0
 8005542:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	0018      	movs	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	b004      	add	sp, #16
 8005550:	bd80      	pop	{r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	fe00e800 	.word	0xfe00e800

08005558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	0008      	movs	r0, r1
 8005562:	0011      	movs	r1, r2
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	240a      	movs	r4, #10
 8005568:	193b      	adds	r3, r7, r4
 800556a:	1c02      	adds	r2, r0, #0
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	2009      	movs	r0, #9
 8005570:	183b      	adds	r3, r7, r0
 8005572:	1c0a      	adds	r2, r1, #0
 8005574:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	0d51      	lsrs	r1, r2, #21
 8005580:	2280      	movs	r2, #128	; 0x80
 8005582:	00d2      	lsls	r2, r2, #3
 8005584:	400a      	ands	r2, r1
 8005586:	490e      	ldr	r1, [pc, #56]	; (80055c0 <I2C_TransferConfig+0x68>)
 8005588:	430a      	orrs	r2, r1
 800558a:	43d2      	mvns	r2, r2
 800558c:	401a      	ands	r2, r3
 800558e:	0011      	movs	r1, r2
 8005590:	193b      	adds	r3, r7, r4
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	059b      	lsls	r3, r3, #22
 8005596:	0d9a      	lsrs	r2, r3, #22
 8005598:	183b      	adds	r3, r7, r0
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	0418      	lsls	r0, r3, #16
 800559e:	23ff      	movs	r3, #255	; 0xff
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	4003      	ands	r3, r0
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b005      	add	sp, #20
 80055bc:	bd90      	pop	{r4, r7, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	03ff63ff 	.word	0x03ff63ff

080055c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2241      	movs	r2, #65	; 0x41
 80055d2:	5c9b      	ldrb	r3, [r3, r2]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d138      	bne.n	800564c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2240      	movs	r2, #64	; 0x40
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e032      	b.n	800564e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	2101      	movs	r1, #1
 80055ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2241      	movs	r2, #65	; 0x41
 80055f4:	2124      	movs	r1, #36	; 0x24
 80055f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2101      	movs	r1, #1
 8005604:	438a      	bics	r2, r1
 8005606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4911      	ldr	r1, [pc, #68]	; (8005658 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005614:	400a      	ands	r2, r1
 8005616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6819      	ldr	r1, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2101      	movs	r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2241      	movs	r2, #65	; 0x41
 800563c:	2120      	movs	r1, #32
 800563e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	2100      	movs	r1, #0
 8005646:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	e000      	b.n	800564e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800564c:	2302      	movs	r3, #2
  }
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b002      	add	sp, #8
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	ffffefff 	.word	0xffffefff

0800565c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2241      	movs	r2, #65	; 0x41
 800566a:	5c9b      	ldrb	r3, [r3, r2]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	d139      	bne.n	80056e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2240      	movs	r2, #64	; 0x40
 8005676:	5c9b      	ldrb	r3, [r3, r2]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800567c:	2302      	movs	r3, #2
 800567e:	e033      	b.n	80056e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2240      	movs	r2, #64	; 0x40
 8005684:	2101      	movs	r1, #1
 8005686:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2241      	movs	r2, #65	; 0x41
 800568c:	2124      	movs	r1, #36	; 0x24
 800568e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2101      	movs	r1, #1
 800569c:	438a      	bics	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2101      	movs	r1, #1
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2241      	movs	r2, #65	; 0x41
 80056d6:	2120      	movs	r1, #32
 80056d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2240      	movs	r2, #64	; 0x40
 80056de:	2100      	movs	r1, #0
 80056e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b004      	add	sp, #16
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	fffff0ff 	.word	0xfffff0ff

080056f4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <HAL_PWR_EnableBkUpAccess+0x18>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <HAL_PWR_EnableBkUpAccess+0x18>)
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	0049      	lsls	r1, r1, #1
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40007000 	.word	0x40007000

08005710 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	000a      	movs	r2, r1
 800571a:	1cfb      	adds	r3, r7, #3
 800571c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <HAL_PWR_EnterSTOPMode+0x68>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2207      	movs	r2, #7
 800572a:	4393      	bics	r3, r2
 800572c:	001a      	movs	r2, r3
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <HAL_PWR_EnterSTOPMode+0x68>)
 8005730:	2101      	movs	r1, #1
 8005732:	430a      	orrs	r2, r1
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e005      	b.n	8005744 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <HAL_PWR_EnterSTOPMode+0x68>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <HAL_PWR_EnterSTOPMode+0x68>)
 800573e:	2107      	movs	r1, #7
 8005740:	438a      	bics	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_PWR_EnterSTOPMode+0x6c>)
 800574a:	2104      	movs	r1, #4
 800574c:	430a      	orrs	r2, r1
 800574e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005750:	1cfb      	adds	r3, r7, #3
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005758:	bf30      	wfi
 800575a:	e002      	b.n	8005762 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800575c:	bf40      	sev
    __WFE();
 800575e:	bf20      	wfe
    __WFE();
 8005760:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005768:	2104      	movs	r1, #4
 800576a:	438a      	bics	r2, r1
 800576c:	611a      	str	r2, [r3, #16]
}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	40007000 	.word	0x40007000
 800577c:	e000ed00 	.word	0xe000ed00

08005780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005788:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800578e:	4013      	ands	r3, r2
 8005790:	0019      	movs	r1, r3
 8005792:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d11f      	bne.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	0013      	movs	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	4912      	ldr	r1, [pc, #72]	; (80057fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fa fcb2 	bl	800011c <__udivsi3>
 80057b8:	0003      	movs	r3, r0
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057be:	e008      	b.n	80057d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e001      	b.n	80057d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e009      	b.n	80057e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	401a      	ands	r2, r3
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d0ed      	beq.n	80057c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	40007000 	.word	0x40007000
 80057f4:	fffff9ff 	.word	0xfffff9ff
 80057f8:	2000000c 	.word	0x2000000c
 80057fc:	000f4240 	.word	0x000f4240

08005800 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	23e0      	movs	r3, #224	; 0xe0
 800580a:	01db      	lsls	r3, r3, #7
 800580c:	4013      	ands	r3, r2
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000

08005818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e304      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2201      	movs	r2, #1
 8005830:	4013      	ands	r3, r2
 8005832:	d100      	bne.n	8005836 <HAL_RCC_OscConfig+0x1e>
 8005834:	e07c      	b.n	8005930 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005836:	4bc3      	ldr	r3, [pc, #780]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2238      	movs	r2, #56	; 0x38
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005840:	4bc0      	ldr	r3, [pc, #768]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2203      	movs	r2, #3
 8005846:	4013      	ands	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b10      	cmp	r3, #16
 800584e:	d102      	bne.n	8005856 <HAL_RCC_OscConfig+0x3e>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d002      	beq.n	800585c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d10b      	bne.n	8005874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585c:	4bb9      	ldr	r3, [pc, #740]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	4013      	ands	r3, r2
 8005866:	d062      	beq.n	800592e <HAL_RCC_OscConfig+0x116>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d15e      	bne.n	800592e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e2df      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	025b      	lsls	r3, r3, #9
 800587c:	429a      	cmp	r2, r3
 800587e:	d107      	bne.n	8005890 <HAL_RCC_OscConfig+0x78>
 8005880:	4bb0      	ldr	r3, [pc, #704]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4baf      	ldr	r3, [pc, #700]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	0249      	lsls	r1, r1, #9
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e020      	b.n	80058d2 <HAL_RCC_OscConfig+0xba>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	23a0      	movs	r3, #160	; 0xa0
 8005896:	02db      	lsls	r3, r3, #11
 8005898:	429a      	cmp	r2, r3
 800589a:	d10e      	bne.n	80058ba <HAL_RCC_OscConfig+0xa2>
 800589c:	4ba9      	ldr	r3, [pc, #676]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4ba8      	ldr	r3, [pc, #672]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	02c9      	lsls	r1, r1, #11
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	4ba6      	ldr	r3, [pc, #664]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4ba5      	ldr	r3, [pc, #660]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058b0:	2180      	movs	r1, #128	; 0x80
 80058b2:	0249      	lsls	r1, r1, #9
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e00b      	b.n	80058d2 <HAL_RCC_OscConfig+0xba>
 80058ba:	4ba2      	ldr	r3, [pc, #648]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4ba1      	ldr	r3, [pc, #644]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058c0:	49a1      	ldr	r1, [pc, #644]	; (8005b48 <HAL_RCC_OscConfig+0x330>)
 80058c2:	400a      	ands	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	4b9f      	ldr	r3, [pc, #636]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b9e      	ldr	r3, [pc, #632]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058cc:	499f      	ldr	r1, [pc, #636]	; (8005b4c <HAL_RCC_OscConfig+0x334>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d014      	beq.n	8005904 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fd fed9 	bl	8003690 <HAL_GetTick>
 80058de:	0003      	movs	r3, r0
 80058e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fd fed4 	bl	8003690 <HAL_GetTick>
 80058e8:	0002      	movs	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e29e      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058f6:	4b93      	ldr	r3, [pc, #588]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	4013      	ands	r3, r2
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0xcc>
 8005902:	e015      	b.n	8005930 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fd fec4 	bl	8003690 <HAL_GetTick>
 8005908:	0003      	movs	r3, r0
 800590a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800590e:	f7fd febf 	bl	8003690 <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b64      	cmp	r3, #100	; 0x64
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e289      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005920:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	4013      	ands	r3, r2
 800592a:	d1f0      	bne.n	800590e <HAL_RCC_OscConfig+0xf6>
 800592c:	e000      	b.n	8005930 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2202      	movs	r2, #2
 8005936:	4013      	ands	r3, r2
 8005938:	d100      	bne.n	800593c <HAL_RCC_OscConfig+0x124>
 800593a:	e099      	b.n	8005a70 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800593c:	4b81      	ldr	r3, [pc, #516]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2238      	movs	r2, #56	; 0x38
 8005942:	4013      	ands	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005946:	4b7f      	ldr	r3, [pc, #508]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2203      	movs	r2, #3
 800594c:	4013      	ands	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b10      	cmp	r3, #16
 8005954:	d102      	bne.n	800595c <HAL_RCC_OscConfig+0x144>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d002      	beq.n	8005962 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d135      	bne.n	80059ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005962:	4b78      	ldr	r3, [pc, #480]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4013      	ands	r3, r2
 800596c:	d005      	beq.n	800597a <HAL_RCC_OscConfig+0x162>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e25c      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597a:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a74      	ldr	r2, [pc, #464]	; (8005b50 <HAL_RCC_OscConfig+0x338>)
 8005980:	4013      	ands	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	021a      	lsls	r2, r3, #8
 800598a:	4b6e      	ldr	r3, [pc, #440]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d112      	bne.n	80059bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005996:	4b6b      	ldr	r3, [pc, #428]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6e      	ldr	r2, [pc, #440]	; (8005b54 <HAL_RCC_OscConfig+0x33c>)
 800599c:	4013      	ands	r3, r2
 800599e:	0019      	movs	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80059a6:	430a      	orrs	r2, r1
 80059a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80059aa:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	0adb      	lsrs	r3, r3, #11
 80059b0:	2207      	movs	r2, #7
 80059b2:	4013      	ands	r3, r2
 80059b4:	4a68      	ldr	r2, [pc, #416]	; (8005b58 <HAL_RCC_OscConfig+0x340>)
 80059b6:	40da      	lsrs	r2, r3
 80059b8:	4b68      	ldr	r3, [pc, #416]	; (8005b5c <HAL_RCC_OscConfig+0x344>)
 80059ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059bc:	4b68      	ldr	r3, [pc, #416]	; (8005b60 <HAL_RCC_OscConfig+0x348>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7fd fe09 	bl	80035d8 <HAL_InitTick>
 80059c6:	1e03      	subs	r3, r0, #0
 80059c8:	d051      	beq.n	8005a6e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e232      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d030      	beq.n	8005a38 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059d6:	4b5b      	ldr	r3, [pc, #364]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a5e      	ldr	r2, [pc, #376]	; (8005b54 <HAL_RCC_OscConfig+0x33c>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	4b57      	ldr	r3, [pc, #348]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80059e6:	430a      	orrs	r2, r1
 80059e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80059ea:	4b56      	ldr	r3, [pc, #344]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	0049      	lsls	r1, r1, #1
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fd fe4a 	bl	8003690 <HAL_GetTick>
 80059fc:	0003      	movs	r3, r0
 80059fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a02:	f7fd fe45 	bl	8003690 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e20f      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a14:	4b4b      	ldr	r3, [pc, #300]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a20:	4b48      	ldr	r3, [pc, #288]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a4a      	ldr	r2, [pc, #296]	; (8005b50 <HAL_RCC_OscConfig+0x338>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	4b44      	ldr	r3, [pc, #272]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	e01b      	b.n	8005a70 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a3e:	4949      	ldr	r1, [pc, #292]	; (8005b64 <HAL_RCC_OscConfig+0x34c>)
 8005a40:	400a      	ands	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fd fe24 	bl	8003690 <HAL_GetTick>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a4e:	f7fd fe1f 	bl	8003690 <HAL_GetTick>
 8005a52:	0002      	movs	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e1e9      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a60:	4b38      	ldr	r3, [pc, #224]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x236>
 8005a6c:	e000      	b.n	8005a70 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2208      	movs	r2, #8
 8005a76:	4013      	ands	r3, r2
 8005a78:	d047      	beq.n	8005b0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a7a:	4b32      	ldr	r3, [pc, #200]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2238      	movs	r2, #56	; 0x38
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b18      	cmp	r3, #24
 8005a84:	d10a      	bne.n	8005a9c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005a86:	4b2f      	ldr	r3, [pc, #188]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d03c      	beq.n	8005b0a <HAL_RCC_OscConfig+0x2f2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d138      	bne.n	8005b0a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e1cb      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d019      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005aa4:	4b27      	ldr	r3, [pc, #156]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005aa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005aa8:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005aaa:	2101      	movs	r1, #1
 8005aac:	430a      	orrs	r2, r1
 8005aae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fdee 	bl	8003690 <HAL_GetTick>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aba:	f7fd fde9 	bl	8003690 <HAL_GetTick>
 8005abe:	0002      	movs	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e1b3      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d0f1      	beq.n	8005aba <HAL_RCC_OscConfig+0x2a2>
 8005ad6:	e018      	b.n	8005b0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005ada:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005ade:	2101      	movs	r1, #1
 8005ae0:	438a      	bics	r2, r1
 8005ae2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fd fdd4 	bl	8003690 <HAL_GetTick>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aee:	f7fd fdcf 	bl	8003690 <HAL_GetTick>
 8005af2:	0002      	movs	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e199      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	2202      	movs	r2, #2
 8005b06:	4013      	ands	r3, r2
 8005b08:	d1f1      	bne.n	8005aee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2204      	movs	r2, #4
 8005b10:	4013      	ands	r3, r2
 8005b12:	d100      	bne.n	8005b16 <HAL_RCC_OscConfig+0x2fe>
 8005b14:	e0c6      	b.n	8005ca4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b16:	231f      	movs	r3, #31
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2238      	movs	r2, #56	; 0x38
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d11e      	bne.n	8005b68 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_RCC_OscConfig+0x32c>)
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4013      	ands	r3, r2
 8005b32:	d100      	bne.n	8005b36 <HAL_RCC_OscConfig+0x31e>
 8005b34:	e0b6      	b.n	8005ca4 <HAL_RCC_OscConfig+0x48c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d000      	beq.n	8005b40 <HAL_RCC_OscConfig+0x328>
 8005b3e:	e0b1      	b.n	8005ca4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e177      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
 8005b44:	40021000 	.word	0x40021000
 8005b48:	fffeffff 	.word	0xfffeffff
 8005b4c:	fffbffff 	.word	0xfffbffff
 8005b50:	ffff80ff 	.word	0xffff80ff
 8005b54:	ffffc7ff 	.word	0xffffc7ff
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	20000000 	.word	0x20000000
 8005b64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b68:	4bb4      	ldr	r3, [pc, #720]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	055b      	lsls	r3, r3, #21
 8005b70:	4013      	ands	r3, r2
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_OscConfig+0x360>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x362>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	4baf      	ldr	r3, [pc, #700]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b82:	4bae      	ldr	r3, [pc, #696]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005b84:	2180      	movs	r1, #128	; 0x80
 8005b86:	0549      	lsls	r1, r1, #21
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b8c:	4bab      	ldr	r3, [pc, #684]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	055b      	lsls	r3, r3, #21
 8005b94:	4013      	ands	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005b9a:	231f      	movs	r3, #31
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba2:	4ba7      	ldr	r3, [pc, #668]	; (8005e40 <HAL_RCC_OscConfig+0x628>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	2380      	movs	r3, #128	; 0x80
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	4013      	ands	r3, r2
 8005bac:	d11a      	bne.n	8005be4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bae:	4ba4      	ldr	r3, [pc, #656]	; (8005e40 <HAL_RCC_OscConfig+0x628>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4ba3      	ldr	r3, [pc, #652]	; (8005e40 <HAL_RCC_OscConfig+0x628>)
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	0049      	lsls	r1, r1, #1
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fd68 	bl	8003690 <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc6:	f7fd fd63 	bl	8003690 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e12d      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd8:	4b99      	ldr	r3, [pc, #612]	; (8005e40 <HAL_RCC_OscConfig+0x628>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	4013      	ands	r3, r2
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d106      	bne.n	8005bfa <HAL_RCC_OscConfig+0x3e2>
 8005bec:	4b93      	ldr	r3, [pc, #588]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005bee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bf0:	4b92      	ldr	r3, [pc, #584]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bf8:	e01c      	b.n	8005c34 <HAL_RCC_OscConfig+0x41c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCC_OscConfig+0x404>
 8005c02:	4b8e      	ldr	r3, [pc, #568]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c06:	4b8d      	ldr	r3, [pc, #564]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c08:	2104      	movs	r1, #4
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c0e:	4b8b      	ldr	r3, [pc, #556]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c12:	4b8a      	ldr	r3, [pc, #552]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c14:	2101      	movs	r1, #1
 8005c16:	430a      	orrs	r2, r1
 8005c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c1a:	e00b      	b.n	8005c34 <HAL_RCC_OscConfig+0x41c>
 8005c1c:	4b87      	ldr	r3, [pc, #540]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c20:	4b86      	ldr	r3, [pc, #536]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c22:	2101      	movs	r1, #1
 8005c24:	438a      	bics	r2, r1
 8005c26:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c28:	4b84      	ldr	r3, [pc, #528]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c2c:	4b83      	ldr	r3, [pc, #524]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c2e:	2104      	movs	r1, #4
 8005c30:	438a      	bics	r2, r1
 8005c32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d014      	beq.n	8005c66 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fd fd28 	bl	8003690 <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c44:	e009      	b.n	8005c5a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fd fd23 	bl	8003690 <HAL_GetTick>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	4a7c      	ldr	r2, [pc, #496]	; (8005e44 <HAL_RCC_OscConfig+0x62c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e0ec      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5a:	4b78      	ldr	r3, [pc, #480]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5e:	2202      	movs	r2, #2
 8005c60:	4013      	ands	r3, r2
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x42e>
 8005c64:	e013      	b.n	8005c8e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fd fd13 	bl	8003690 <HAL_GetTick>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c6e:	e009      	b.n	8005c84 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fd fd0e 	bl	8003690 <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	4a72      	ldr	r2, [pc, #456]	; (8005e44 <HAL_RCC_OscConfig+0x62c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0d7      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c84:	4b6d      	ldr	r3, [pc, #436]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005c8e:	231f      	movs	r3, #31
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d105      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005c98:	4b68      	ldr	r3, [pc, #416]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c9c:	4b67      	ldr	r3, [pc, #412]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005c9e:	496a      	ldr	r1, [pc, #424]	; (8005e48 <HAL_RCC_OscConfig+0x630>)
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d100      	bne.n	8005cae <HAL_RCC_OscConfig+0x496>
 8005cac:	e0c1      	b.n	8005e32 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cae:	4b63      	ldr	r3, [pc, #396]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2238      	movs	r2, #56	; 0x38
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d100      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4a4>
 8005cba:	e081      	b.n	8005dc0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d156      	bne.n	8005d72 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc4:	4b5d      	ldr	r3, [pc, #372]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b5c      	ldr	r3, [pc, #368]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005cca:	4960      	ldr	r1, [pc, #384]	; (8005e4c <HAL_RCC_OscConfig+0x634>)
 8005ccc:	400a      	ands	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fd fcde 	bl	8003690 <HAL_GetTick>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fd fcd9 	bl	8003690 <HAL_GetTick>
 8005cde:	0002      	movs	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0a3      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cec:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	049b      	lsls	r3, r3, #18
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cf8:	4b50      	ldr	r3, [pc, #320]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a54      	ldr	r2, [pc, #336]	; (8005e50 <HAL_RCC_OscConfig+0x638>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	0019      	movs	r1, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	431a      	orrs	r2, r3
 8005d26:	4b45      	ldr	r3, [pc, #276]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d2c:	4b43      	ldr	r3, [pc, #268]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	0449      	lsls	r1, r1, #17
 8005d36:	430a      	orrs	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005d3a:	4b40      	ldr	r3, [pc, #256]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	4b3f      	ldr	r3, [pc, #252]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	0549      	lsls	r1, r1, #21
 8005d44:	430a      	orrs	r2, r1
 8005d46:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fd fca2 	bl	8003690 <HAL_GetTick>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fd fc9d 	bl	8003690 <HAL_GetTick>
 8005d56:	0002      	movs	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e067      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d64:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	049b      	lsls	r3, r3, #18
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x53a>
 8005d70:	e05f      	b.n	8005e32 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d72:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b31      	ldr	r3, [pc, #196]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d78:	4934      	ldr	r1, [pc, #208]	; (8005e4c <HAL_RCC_OscConfig+0x634>)
 8005d7a:	400a      	ands	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d84:	2103      	movs	r1, #3
 8005d86:	438a      	bics	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005d8a:	4b2c      	ldr	r3, [pc, #176]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005d90:	4930      	ldr	r1, [pc, #192]	; (8005e54 <HAL_RCC_OscConfig+0x63c>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fd fc7b 	bl	8003690 <HAL_GetTick>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd fc76 	bl	8003690 <HAL_GetTick>
 8005da4:	0002      	movs	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e040      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db2:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	049b      	lsls	r3, r3, #18
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x588>
 8005dbe:	e038      	b.n	8005e32 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e033      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <HAL_RCC_OscConfig+0x624>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d126      	bne.n	8005e2e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2270      	movs	r2, #112	; 0x70
 8005de4:	401a      	ands	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d11f      	bne.n	8005e2e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	23fe      	movs	r3, #254	; 0xfe
 8005df2:	01db      	lsls	r3, r3, #7
 8005df4:	401a      	ands	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d116      	bne.n	8005e2e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	23f8      	movs	r3, #248	; 0xf8
 8005e04:	039b      	lsls	r3, r3, #14
 8005e06:	401a      	ands	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d10e      	bne.n	8005e2e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	23e0      	movs	r3, #224	; 0xe0
 8005e14:	051b      	lsls	r3, r3, #20
 8005e16:	401a      	ands	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	0f5b      	lsrs	r3, r3, #29
 8005e24:	075a      	lsls	r2, r3, #29
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d001      	beq.n	8005e32 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b008      	add	sp, #32
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40007000 	.word	0x40007000
 8005e44:	00001388 	.word	0x00001388
 8005e48:	efffffff 	.word	0xefffffff
 8005e4c:	feffffff 	.word	0xfeffffff
 8005e50:	11c1808c 	.word	0x11c1808c
 8005e54:	eefeffff 	.word	0xeefeffff

08005e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0e9      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b76      	ldr	r3, [pc, #472]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2207      	movs	r2, #7
 8005e72:	4013      	ands	r3, r2
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d91e      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b73      	ldr	r3, [pc, #460]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2207      	movs	r2, #7
 8005e80:	4393      	bics	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	4b70      	ldr	r3, [pc, #448]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e8c:	f7fd fc00 	bl	8003690 <HAL_GetTick>
 8005e90:	0003      	movs	r3, r0
 8005e92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e94:	e009      	b.n	8005eaa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e96:	f7fd fbfb 	bl	8003690 <HAL_GetTick>
 8005e9a:	0002      	movs	r2, r0
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	4a6a      	ldr	r2, [pc, #424]	; (800604c <HAL_RCC_ClockConfig+0x1f4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e0ca      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005eaa:	4b67      	ldr	r3, [pc, #412]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2207      	movs	r2, #7
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d1ee      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d015      	beq.n	8005eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d006      	beq.n	8005eda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ecc:	4b60      	ldr	r3, [pc, #384]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005ed2:	21e0      	movs	r1, #224	; 0xe0
 8005ed4:	01c9      	lsls	r1, r1, #7
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eda:	4b5d      	ldr	r3, [pc, #372]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4a5d      	ldr	r2, [pc, #372]	; (8006054 <HAL_RCC_ClockConfig+0x1fc>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d057      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d107      	bne.n	8005f10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f00:	4b53      	ldr	r3, [pc, #332]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	2380      	movs	r3, #128	; 0x80
 8005f06:	029b      	lsls	r3, r3, #10
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d12b      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e097      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d107      	bne.n	8005f28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f18:	4b4d      	ldr	r3, [pc, #308]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	049b      	lsls	r3, r3, #18
 8005f20:	4013      	ands	r3, r2
 8005f22:	d11f      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e08b      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f30:	4b47      	ldr	r3, [pc, #284]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d113      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e07f      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d106      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f48:	4b41      	ldr	r3, [pc, #260]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d108      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e074      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f56:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e06d      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f64:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2207      	movs	r2, #7
 8005f6a:	4393      	bics	r3, r2
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	4b37      	ldr	r3, [pc, #220]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f78:	f7fd fb8a 	bl	8003690 <HAL_GetTick>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f80:	e009      	b.n	8005f96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f82:	f7fd fb85 	bl	8003690 <HAL_GetTick>
 8005f86:	0002      	movs	r2, r0
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <HAL_RCC_ClockConfig+0x1f4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e054      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2238      	movs	r2, #56	; 0x38
 8005f9c:	401a      	ands	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1ec      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b27      	ldr	r3, [pc, #156]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2207      	movs	r2, #7
 8005fae:	4013      	ands	r3, r2
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d21e      	bcs.n	8005ff4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b24      	ldr	r3, [pc, #144]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2207      	movs	r2, #7
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	4b21      	ldr	r3, [pc, #132]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fc8:	f7fd fb62 	bl	8003690 <HAL_GetTick>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fd0:	e009      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd2:	f7fd fb5d 	bl	8003690 <HAL_GetTick>
 8005fd6:	0002      	movs	r2, r0
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_RCC_ClockConfig+0x1f4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e02c      	b.n	8006040 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fe6:	4b18      	ldr	r3, [pc, #96]	; (8006048 <HAL_RCC_ClockConfig+0x1f0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2207      	movs	r2, #7
 8005fec:	4013      	ands	r3, r2
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1ee      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	4a15      	ldr	r2, [pc, #84]	; (8006058 <HAL_RCC_ClockConfig+0x200>)
 8006004:	4013      	ands	r3, r2
 8006006:	0019      	movs	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006012:	f000 f829 	bl	8006068 <HAL_RCC_GetSysClockFreq>
 8006016:	0001      	movs	r1, r0
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <HAL_RCC_ClockConfig+0x1f8>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	220f      	movs	r2, #15
 8006020:	401a      	ands	r2, r3
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <HAL_RCC_ClockConfig+0x204>)
 8006024:	0092      	lsls	r2, r2, #2
 8006026:	58d3      	ldr	r3, [r2, r3]
 8006028:	221f      	movs	r2, #31
 800602a:	4013      	ands	r3, r2
 800602c:	000a      	movs	r2, r1
 800602e:	40da      	lsrs	r2, r3
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <HAL_RCC_ClockConfig+0x208>)
 8006032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_RCC_ClockConfig+0x20c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	0018      	movs	r0, r3
 800603a:	f7fd facd 	bl	80035d8 <HAL_InitTick>
 800603e:	0003      	movs	r3, r0
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b004      	add	sp, #16
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40022000 	.word	0x40022000
 800604c:	00001388 	.word	0x00001388
 8006050:	40021000 	.word	0x40021000
 8006054:	fffff0ff 	.word	0xfffff0ff
 8006058:	ffff8fff 	.word	0xffff8fff
 800605c:	08010580 	.word	0x08010580
 8006060:	2000000c 	.word	0x2000000c
 8006064:	20000000 	.word	0x20000000

08006068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800606e:	4b3c      	ldr	r3, [pc, #240]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2238      	movs	r2, #56	; 0x38
 8006074:	4013      	ands	r3, r2
 8006076:	d10f      	bne.n	8006098 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	0adb      	lsrs	r3, r3, #11
 800607e:	2207      	movs	r2, #7
 8006080:	4013      	ands	r3, r2
 8006082:	2201      	movs	r2, #1
 8006084:	409a      	lsls	r2, r3
 8006086:	0013      	movs	r3, r2
 8006088:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	4835      	ldr	r0, [pc, #212]	; (8006164 <HAL_RCC_GetSysClockFreq+0xfc>)
 800608e:	f7fa f845 	bl	800011c <__udivsi3>
 8006092:	0003      	movs	r3, r0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e05d      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006098:	4b31      	ldr	r3, [pc, #196]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2238      	movs	r2, #56	; 0x38
 800609e:	4013      	ands	r3, r2
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d102      	bne.n	80060aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060a4:	4b30      	ldr	r3, [pc, #192]	; (8006168 <HAL_RCC_GetSysClockFreq+0x100>)
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e054      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060aa:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2238      	movs	r2, #56	; 0x38
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d138      	bne.n	8006128 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80060b6:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2203      	movs	r2, #3
 80060bc:	4013      	ands	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060c0:	4b27      	ldr	r3, [pc, #156]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	2207      	movs	r2, #7
 80060c8:	4013      	ands	r3, r2
 80060ca:	3301      	adds	r3, #1
 80060cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d10d      	bne.n	80060f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4824      	ldr	r0, [pc, #144]	; (8006168 <HAL_RCC_GetSysClockFreq+0x100>)
 80060d8:	f7fa f820 	bl	800011c <__udivsi3>
 80060dc:	0003      	movs	r3, r0
 80060de:	0019      	movs	r1, r3
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	227f      	movs	r2, #127	; 0x7f
 80060e8:	4013      	ands	r3, r2
 80060ea:	434b      	muls	r3, r1
 80060ec:	617b      	str	r3, [r7, #20]
        break;
 80060ee:	e00d      	b.n	800610c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	481c      	ldr	r0, [pc, #112]	; (8006164 <HAL_RCC_GetSysClockFreq+0xfc>)
 80060f4:	f7fa f812 	bl	800011c <__udivsi3>
 80060f8:	0003      	movs	r3, r0
 80060fa:	0019      	movs	r1, r3
 80060fc:	4b18      	ldr	r3, [pc, #96]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	227f      	movs	r2, #127	; 0x7f
 8006104:	4013      	ands	r3, r2
 8006106:	434b      	muls	r3, r1
 8006108:	617b      	str	r3, [r7, #20]
        break;
 800610a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800610c:	4b14      	ldr	r3, [pc, #80]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	0f5b      	lsrs	r3, r3, #29
 8006112:	2207      	movs	r2, #7
 8006114:	4013      	ands	r3, r2
 8006116:	3301      	adds	r3, #1
 8006118:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	f7f9 fffd 	bl	800011c <__udivsi3>
 8006122:	0003      	movs	r3, r0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	e015      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2238      	movs	r2, #56	; 0x38
 800612e:	4013      	ands	r3, r2
 8006130:	2b20      	cmp	r3, #32
 8006132:	d103      	bne.n	800613c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	e00b      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2238      	movs	r2, #56	; 0x38
 8006142:	4013      	ands	r3, r2
 8006144:	2b18      	cmp	r3, #24
 8006146:	d103      	bne.n	8006150 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006148:	23fa      	movs	r3, #250	; 0xfa
 800614a:	01db      	lsls	r3, r3, #7
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	e001      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006154:	693b      	ldr	r3, [r7, #16]
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b006      	add	sp, #24
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	40021000 	.word	0x40021000
 8006164:	00f42400 	.word	0x00f42400
 8006168:	007a1200 	.word	0x007a1200

0800616c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006170:	4b02      	ldr	r3, [pc, #8]	; (800617c <HAL_RCC_GetHCLKFreq+0x10>)
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	0018      	movs	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	2000000c 	.word	0x2000000c

08006180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006180:	b5b0      	push	{r4, r5, r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006184:	f7ff fff2 	bl	800616c <HAL_RCC_GetHCLKFreq>
 8006188:	0004      	movs	r4, r0
 800618a:	f7ff fb39 	bl	8005800 <LL_RCC_GetAPB1Prescaler>
 800618e:	0003      	movs	r3, r0
 8006190:	0b1a      	lsrs	r2, r3, #12
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	58d3      	ldr	r3, [r2, r3]
 8006198:	221f      	movs	r2, #31
 800619a:	4013      	ands	r3, r2
 800619c:	40dc      	lsrs	r4, r3
 800619e:	0023      	movs	r3, r4
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bdb0      	pop	{r4, r5, r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	080105c0 	.word	0x080105c0

080061ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80061b4:	2313      	movs	r3, #19
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061bc:	2312      	movs	r3, #18
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	4013      	ands	r3, r2
 80061ce:	d100      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80061d0:	e0a3      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d2:	2011      	movs	r0, #17
 80061d4:	183b      	adds	r3, r7, r0
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4bc3      	ldr	r3, [pc, #780]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	055b      	lsls	r3, r3, #21
 80061e2:	4013      	ands	r3, r2
 80061e4:	d110      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	4bc0      	ldr	r3, [pc, #768]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ea:	4bbf      	ldr	r3, [pc, #764]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	0549      	lsls	r1, r1, #21
 80061f0:	430a      	orrs	r2, r1
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80061f4:	4bbc      	ldr	r3, [pc, #752]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	055b      	lsls	r3, r3, #21
 80061fc:	4013      	ands	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006202:	183b      	adds	r3, r7, r0
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006208:	4bb8      	ldr	r3, [pc, #736]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	4bb7      	ldr	r3, [pc, #732]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	0049      	lsls	r1, r1, #1
 8006212:	430a      	orrs	r2, r1
 8006214:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006216:	f7fd fa3b 	bl	8003690 <HAL_GetTick>
 800621a:	0003      	movs	r3, r0
 800621c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800621e:	e00b      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fd fa36 	bl	8003690 <HAL_GetTick>
 8006224:	0002      	movs	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d904      	bls.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800622e:	2313      	movs	r3, #19
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	2203      	movs	r2, #3
 8006234:	701a      	strb	r2, [r3, #0]
        break;
 8006236:	e005      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006238:	4bac      	ldr	r3, [pc, #688]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	4013      	ands	r3, r2
 8006242:	d0ed      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006244:	2313      	movs	r3, #19
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d154      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800624e:	4ba6      	ldr	r3, [pc, #664]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006252:	23c0      	movs	r3, #192	; 0xc0
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4013      	ands	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d019      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	429a      	cmp	r2, r3
 8006268:	d014      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800626a:	4b9f      	ldr	r3, [pc, #636]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626e:	4aa0      	ldr	r2, [pc, #640]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006270:	4013      	ands	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006274:	4b9c      	ldr	r3, [pc, #624]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006278:	4b9b      	ldr	r3, [pc, #620]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	0249      	lsls	r1, r1, #9
 800627e:	430a      	orrs	r2, r1
 8006280:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006282:	4b99      	ldr	r3, [pc, #612]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006286:	4b98      	ldr	r3, [pc, #608]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006288:	499a      	ldr	r1, [pc, #616]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800628a:	400a      	ands	r2, r1
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800628e:	4b96      	ldr	r3, [pc, #600]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2201      	movs	r2, #1
 8006298:	4013      	ands	r3, r2
 800629a:	d016      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fd f9f8 	bl	8003690 <HAL_GetTick>
 80062a0:	0003      	movs	r3, r0
 80062a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a4:	e00c      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f7fd f9f3 	bl	8003690 <HAL_GetTick>
 80062aa:	0002      	movs	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	4a91      	ldr	r2, [pc, #580]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d904      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80062b6:	2313      	movs	r3, #19
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	2203      	movs	r2, #3
 80062bc:	701a      	strb	r2, [r3, #0]
            break;
 80062be:	e004      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c0:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	2202      	movs	r2, #2
 80062c6:	4013      	ands	r3, r2
 80062c8:	d0ed      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80062ca:	2313      	movs	r3, #19
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062d4:	4b84      	ldr	r3, [pc, #528]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	4a85      	ldr	r2, [pc, #532]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062da:	4013      	ands	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e2:	4b81      	ldr	r3, [pc, #516]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80062e8:	e00c      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ea:	2312      	movs	r3, #18
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	2213      	movs	r2, #19
 80062f0:	18ba      	adds	r2, r7, r2
 80062f2:	7812      	ldrb	r2, [r2, #0]
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e005      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f8:	2312      	movs	r3, #18
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	2213      	movs	r2, #19
 80062fe:	18ba      	adds	r2, r7, r2
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006304:	2311      	movs	r3, #17
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d105      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630e:	4b76      	ldr	r3, [pc, #472]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006312:	4b75      	ldr	r3, [pc, #468]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006314:	4979      	ldr	r1, [pc, #484]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006316:	400a      	ands	r2, r1
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	4013      	ands	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006324:	4b70      	ldr	r3, [pc, #448]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	2203      	movs	r2, #3
 800632a:	4393      	bics	r3, r2
 800632c:	0019      	movs	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	4b6d      	ldr	r3, [pc, #436]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006334:	430a      	orrs	r2, r1
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2202      	movs	r2, #2
 800633e:	4013      	ands	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006342:	4b69      	ldr	r3, [pc, #420]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	220c      	movs	r2, #12
 8006348:	4393      	bics	r3, r2
 800634a:	0019      	movs	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	4b65      	ldr	r3, [pc, #404]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006352:	430a      	orrs	r2, r1
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2210      	movs	r2, #16
 800635c:	4013      	ands	r3, r2
 800635e:	d009      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006360:	4b61      	ldr	r3, [pc, #388]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	4a66      	ldr	r2, [pc, #408]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006366:	4013      	ands	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	4b5e      	ldr	r3, [pc, #376]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006370:	430a      	orrs	r2, r1
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4013      	ands	r3, r2
 800637e:	d009      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006380:	4b59      	ldr	r3, [pc, #356]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	4a5f      	ldr	r2, [pc, #380]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006386:	4013      	ands	r3, r2
 8006388:	0019      	movs	r1, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	4b56      	ldr	r3, [pc, #344]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006390:	430a      	orrs	r2, r1
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4013      	ands	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a0:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a4:	4a58      	ldr	r2, [pc, #352]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	0019      	movs	r1, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	4b4e      	ldr	r3, [pc, #312]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063b0:	430a      	orrs	r2, r1
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2220      	movs	r2, #32
 80063ba:	4013      	ands	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063be:	4b4a      	ldr	r3, [pc, #296]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	4a52      	ldr	r2, [pc, #328]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	0019      	movs	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	4b46      	ldr	r3, [pc, #280]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063ce:	430a      	orrs	r2, r1
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	01db      	lsls	r3, r3, #7
 80063da:	4013      	ands	r3, r2
 80063dc:	d015      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063de:	4b42      	ldr	r3, [pc, #264]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	0899      	lsrs	r1, r3, #2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063ec:	430a      	orrs	r2, r1
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	05db      	lsls	r3, r3, #23
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d106      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80063fc:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	0249      	lsls	r1, r1, #9
 8006406:	430a      	orrs	r2, r1
 8006408:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	4013      	ands	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006416:	4b34      	ldr	r3, [pc, #208]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	2240      	movs	r2, #64	; 0x40
 800641c:	4393      	bics	r3, r2
 800641e:	0019      	movs	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006424:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006426:	430a      	orrs	r2, r1
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	039b      	lsls	r3, r3, #14
 8006432:	4013      	ands	r3, r2
 8006434:	d016      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006436:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	4a35      	ldr	r2, [pc, #212]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800643c:	4013      	ands	r3, r2
 800643e:	0019      	movs	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006444:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006446:	430a      	orrs	r2, r1
 8006448:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800644e:	2380      	movs	r3, #128	; 0x80
 8006450:	03db      	lsls	r3, r3, #15
 8006452:	429a      	cmp	r2, r3
 8006454:	d106      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800645c:	2180      	movs	r1, #128	; 0x80
 800645e:	0449      	lsls	r1, r1, #17
 8006460:	430a      	orrs	r2, r1
 8006462:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	2380      	movs	r3, #128	; 0x80
 800646a:	03db      	lsls	r3, r3, #15
 800646c:	4013      	ands	r3, r2
 800646e:	d016      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006474:	4a27      	ldr	r2, [pc, #156]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006476:	4013      	ands	r3, r2
 8006478:	0019      	movs	r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006480:	430a      	orrs	r2, r1
 8006482:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	045b      	lsls	r3, r3, #17
 800648c:	429a      	cmp	r2, r3
 800648e:	d106      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006490:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	0449      	lsls	r1, r1, #17
 800649a:	430a      	orrs	r2, r1
 800649c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	4013      	ands	r3, r2
 80064a8:	d016      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80064aa:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ae:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064ba:	430a      	orrs	r2, r1
 80064bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	01db      	lsls	r3, r3, #7
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d106      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80064ca:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	0249      	lsls	r1, r1, #9
 80064d4:	430a      	orrs	r2, r1
 80064d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80064d8:	2312      	movs	r3, #18
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	781b      	ldrb	r3, [r3, #0]
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b006      	add	sp, #24
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	40021000 	.word	0x40021000
 80064ec:	40007000 	.word	0x40007000
 80064f0:	fffffcff 	.word	0xfffffcff
 80064f4:	fffeffff 	.word	0xfffeffff
 80064f8:	00001388 	.word	0x00001388
 80064fc:	efffffff 	.word	0xefffffff
 8006500:	fffff3ff 	.word	0xfffff3ff
 8006504:	fff3ffff 	.word	0xfff3ffff
 8006508:	ffcfffff 	.word	0xffcfffff
 800650c:	ffffcfff 	.word	0xffffcfff
 8006510:	ffbfffff 	.word	0xffbfffff
 8006514:	feffffff 	.word	0xfeffffff
 8006518:	ffff3fff 	.word	0xffff3fff

0800651c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800651c:	b5b0      	push	{r4, r5, r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006524:	230f      	movs	r3, #15
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d100      	bne.n	8006534 <HAL_RTC_Init+0x18>
 8006532:	e080      	b.n	8006636 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2229      	movs	r2, #41	; 0x29
 8006538:	5c9b      	ldrb	r3, [r3, r2]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2228      	movs	r2, #40	; 0x28
 8006544:	2100      	movs	r1, #0
 8006546:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2288      	movs	r2, #136	; 0x88
 800654c:	0212      	lsls	r2, r2, #8
 800654e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0018      	movs	r0, r3
 8006554:	f008 fbcc 	bl	800ecf0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2229      	movs	r2, #41	; 0x29
 800655c:	2102      	movs	r1, #2
 800655e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	22ca      	movs	r2, #202	; 0xca
 8006566:	625a      	str	r2, [r3, #36]	; 0x24
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2253      	movs	r2, #83	; 0x53
 800656e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006570:	250f      	movs	r5, #15
 8006572:	197c      	adds	r4, r7, r5
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0018      	movs	r0, r3
 8006578:	f000 fa71 	bl	8006a5e <RTC_EnterInitMode>
 800657c:	0003      	movs	r3, r0
 800657e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8006580:	0028      	movs	r0, r5
 8006582:	183b      	adds	r3, r7, r0
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d148      	bne.n	800661c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	492b      	ldr	r1, [pc, #172]	; (8006644 <HAL_RTC_Init+0x128>)
 8006596:	400a      	ands	r2, r1
 8006598:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6999      	ldr	r1, [r3, #24]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6912      	ldr	r2, [r2, #16]
 80065c0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6919      	ldr	r1, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	041a      	lsls	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80065d6:	0005      	movs	r5, r0
 80065d8:	183c      	adds	r4, r7, r0
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0018      	movs	r0, r3
 80065de:	f000 fa81 	bl	8006ae4 <RTC_ExitInitMode>
 80065e2:	0003      	movs	r3, r0
 80065e4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80065e6:	197b      	adds	r3, r7, r5
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d116      	bne.n	800661c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	00d2      	lsls	r2, r2, #3
 80065fa:	08d2      	lsrs	r2, r2, #3
 80065fc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6999      	ldr	r1, [r3, #24]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006624:	230f      	movs	r3, #15
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2229      	movs	r2, #41	; 0x29
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006636:	230f      	movs	r3, #15
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	781b      	ldrb	r3, [r3, #0]
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b004      	add	sp, #16
 8006642:	bdb0      	pop	{r4, r5, r7, pc}
 8006644:	fb8fffbf 	.word	0xfb8fffbf

08006648 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006648:	b5b0      	push	{r4, r5, r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2228      	movs	r2, #40	; 0x28
 8006658:	5c9b      	ldrb	r3, [r3, r2]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d101      	bne.n	8006662 <HAL_RTC_SetTime+0x1a>
 800665e:	2302      	movs	r3, #2
 8006660:	e092      	b.n	8006788 <HAL_RTC_SetTime+0x140>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2228      	movs	r2, #40	; 0x28
 8006666:	2101      	movs	r1, #1
 8006668:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2229      	movs	r2, #41	; 0x29
 800666e:	2102      	movs	r1, #2
 8006670:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	22ca      	movs	r2, #202	; 0xca
 8006678:	625a      	str	r2, [r3, #36]	; 0x24
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2253      	movs	r2, #83	; 0x53
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006682:	2513      	movs	r5, #19
 8006684:	197c      	adds	r4, r7, r5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	0018      	movs	r0, r3
 800668a:	f000 f9e8 	bl	8006a5e <RTC_EnterInitMode>
 800668e:	0003      	movs	r3, r0
 8006690:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006692:	197b      	adds	r3, r7, r5
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d162      	bne.n	8006760 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d125      	bne.n	80066ec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2240      	movs	r2, #64	; 0x40
 80066a8:	4013      	ands	r3, r2
 80066aa:	d102      	bne.n	80066b2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2200      	movs	r2, #0
 80066b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 fa58 	bl	8006b6c <RTC_ByteToBcd2>
 80066bc:	0003      	movs	r3, r0
 80066be:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 fa51 	bl	8006b6c <RTC_ByteToBcd2>
 80066ca:	0003      	movs	r3, r0
 80066cc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066ce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	789b      	ldrb	r3, [r3, #2]
 80066d4:	0018      	movs	r0, r3
 80066d6:	f000 fa49 	bl	8006b6c <RTC_ByteToBcd2>
 80066da:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066dc:	0022      	movs	r2, r4
 80066de:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	78db      	ldrb	r3, [r3, #3]
 80066e4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e017      	b.n	800671c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2240      	movs	r2, #64	; 0x40
 80066f4:	4013      	ands	r3, r2
 80066f6:	d102      	bne.n	80066fe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800670a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006710:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	78db      	ldrb	r3, [r3, #3]
 8006716:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	491b      	ldr	r1, [pc, #108]	; (8006790 <HAL_RTC_SetTime+0x148>)
 8006724:	400a      	ands	r2, r1
 8006726:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4918      	ldr	r1, [pc, #96]	; (8006794 <HAL_RTC_SetTime+0x14c>)
 8006734:	400a      	ands	r2, r1
 8006736:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6999      	ldr	r1, [r3, #24]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	431a      	orrs	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006750:	2313      	movs	r3, #19
 8006752:	18fc      	adds	r4, r7, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	0018      	movs	r0, r3
 8006758:	f000 f9c4 	bl	8006ae4 <RTC_ExitInitMode>
 800675c:	0003      	movs	r3, r0
 800675e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8006768:	2313      	movs	r3, #19
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2229      	movs	r2, #41	; 0x29
 8006776:	2101      	movs	r1, #1
 8006778:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2228      	movs	r2, #40	; 0x28
 800677e:	2100      	movs	r1, #0
 8006780:	5499      	strb	r1, [r3, r2]

  return status;
 8006782:	2313      	movs	r3, #19
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	781b      	ldrb	r3, [r3, #0]
}
 8006788:	0018      	movs	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	b006      	add	sp, #24
 800678e:	bdb0      	pop	{r4, r5, r7, pc}
 8006790:	007f7f7f 	.word	0x007f7f7f
 8006794:	fffbffff 	.word	0xfffbffff

08006798 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	045b      	lsls	r3, r3, #17
 80067b6:	0c5a      	lsrs	r2, r3, #17
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a22      	ldr	r2, [pc, #136]	; (800684c <HAL_RTC_GetTime+0xb4>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	223f      	movs	r2, #63	; 0x3f
 80067d0:	4013      	ands	r3, r2
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	0a1b      	lsrs	r3, r3, #8
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	227f      	movs	r2, #127	; 0x7f
 80067e0:	4013      	ands	r3, r2
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	227f      	movs	r2, #127	; 0x7f
 80067ee:	4013      	ands	r3, r2
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	0d9b      	lsrs	r3, r3, #22
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2201      	movs	r2, #1
 80067fe:	4013      	ands	r3, r2
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11a      	bne.n	8006842 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	0018      	movs	r0, r3
 8006812:	f000 f9d3 	bl	8006bbc <RTC_Bcd2ToByte>
 8006816:	0003      	movs	r3, r0
 8006818:	001a      	movs	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	0018      	movs	r0, r3
 8006824:	f000 f9ca 	bl	8006bbc <RTC_Bcd2ToByte>
 8006828:	0003      	movs	r3, r0
 800682a:	001a      	movs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	789b      	ldrb	r3, [r3, #2]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 f9c1 	bl	8006bbc <RTC_Bcd2ToByte>
 800683a:	0003      	movs	r3, r0
 800683c:	001a      	movs	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b006      	add	sp, #24
 800684a:	bd80      	pop	{r7, pc}
 800684c:	007f7f7f 	.word	0x007f7f7f

08006850 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006850:	b5b0      	push	{r4, r5, r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2228      	movs	r2, #40	; 0x28
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_RTC_SetDate+0x1a>
 8006866:	2302      	movs	r3, #2
 8006868:	e07e      	b.n	8006968 <HAL_RTC_SetDate+0x118>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2228      	movs	r2, #40	; 0x28
 800686e:	2101      	movs	r1, #1
 8006870:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2229      	movs	r2, #41	; 0x29
 8006876:	2102      	movs	r1, #2
 8006878:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10e      	bne.n	800689e <HAL_RTC_SetDate+0x4e>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	001a      	movs	r2, r3
 8006886:	2310      	movs	r3, #16
 8006888:	4013      	ands	r3, r2
 800688a:	d008      	beq.n	800689e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2210      	movs	r2, #16
 8006892:	4393      	bics	r3, r2
 8006894:	b2db      	uxtb	r3, r3
 8006896:	330a      	adds	r3, #10
 8006898:	b2da      	uxtb	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11c      	bne.n	80068de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	78db      	ldrb	r3, [r3, #3]
 80068a8:	0018      	movs	r0, r3
 80068aa:	f000 f95f 	bl	8006b6c <RTC_ByteToBcd2>
 80068ae:	0003      	movs	r3, r0
 80068b0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f958 	bl	8006b6c <RTC_ByteToBcd2>
 80068bc:	0003      	movs	r3, r0
 80068be:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068c0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	789b      	ldrb	r3, [r3, #2]
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 f950 	bl	8006b6c <RTC_ByteToBcd2>
 80068cc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068ce:	0022      	movs	r2, r4
 80068d0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e00e      	b.n	80068fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	78db      	ldrb	r3, [r3, #3]
 80068e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068f8:	4313      	orrs	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	22ca      	movs	r2, #202	; 0xca
 8006902:	625a      	str	r2, [r3, #36]	; 0x24
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2253      	movs	r2, #83	; 0x53
 800690a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800690c:	2513      	movs	r5, #19
 800690e:	197c      	adds	r4, r7, r5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f8a3 	bl	8006a5e <RTC_EnterInitMode>
 8006918:	0003      	movs	r3, r0
 800691a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800691c:	0028      	movs	r0, r5
 800691e:	183b      	adds	r3, r7, r0
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10c      	bne.n	8006940 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4910      	ldr	r1, [pc, #64]	; (8006970 <HAL_RTC_SetDate+0x120>)
 800692e:	400a      	ands	r2, r1
 8006930:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006932:	183c      	adds	r4, r7, r0
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 f8d4 	bl	8006ae4 <RTC_ExitInitMode>
 800693c:	0003      	movs	r3, r0
 800693e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006948:	2313      	movs	r3, #19
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2229      	movs	r2, #41	; 0x29
 8006956:	2101      	movs	r1, #1
 8006958:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2228      	movs	r2, #40	; 0x28
 800695e:	2100      	movs	r1, #0
 8006960:	5499      	strb	r1, [r3, r2]

  return status;
 8006962:	2313      	movs	r3, #19
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	781b      	ldrb	r3, [r3, #0]
}
 8006968:	0018      	movs	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	b006      	add	sp, #24
 800696e:	bdb0      	pop	{r4, r5, r7, pc}
 8006970:	00ffff3f 	.word	0x00ffff3f

08006974 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_RTC_GetDate+0x98>)
 8006988:	4013      	ands	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	0c1b      	lsrs	r3, r3, #16
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	b2db      	uxtb	r3, r3
 800699c:	221f      	movs	r2, #31
 800699e:	4013      	ands	r3, r2
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	223f      	movs	r2, #63	; 0x3f
 80069ac:	4013      	ands	r3, r2
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	0b5b      	lsrs	r3, r3, #13
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2207      	movs	r2, #7
 80069bc:	4013      	ands	r3, r2
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d11a      	bne.n	8006a00 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	78db      	ldrb	r3, [r3, #3]
 80069ce:	0018      	movs	r0, r3
 80069d0:	f000 f8f4 	bl	8006bbc <RTC_Bcd2ToByte>
 80069d4:	0003      	movs	r3, r0
 80069d6:	001a      	movs	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 f8eb 	bl	8006bbc <RTC_Bcd2ToByte>
 80069e6:	0003      	movs	r3, r0
 80069e8:	001a      	movs	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	789b      	ldrb	r3, [r3, #2]
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 f8e2 	bl	8006bbc <RTC_Bcd2ToByte>
 80069f8:	0003      	movs	r3, r0
 80069fa:	001a      	movs	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	0018      	movs	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b006      	add	sp, #24
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	00ffff3f 	.word	0x00ffff3f

08006a10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	21a0      	movs	r1, #160	; 0xa0
 8006a24:	438a      	bics	r2, r1
 8006a26:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a28:	f7fc fe32 	bl	8003690 <HAL_GetTick>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a30:	e00a      	b.n	8006a48 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a32:	f7fc fe2d 	bl	8003690 <HAL_GetTick>
 8006a36:	0002      	movs	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	23fa      	movs	r3, #250	; 0xfa
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d901      	bls.n	8006a48 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e006      	b.n	8006a56 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	4013      	ands	r3, r2
 8006a52:	d0ee      	beq.n	8006a32 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	0018      	movs	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b004      	add	sp, #16
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006a66:	230f      	movs	r3, #15
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2240      	movs	r2, #64	; 0x40
 8006a76:	4013      	ands	r3, r2
 8006a78:	d12c      	bne.n	8006ad4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2180      	movs	r1, #128	; 0x80
 8006a86:	430a      	orrs	r2, r1
 8006a88:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a8a:	f7fc fe01 	bl	8003690 <HAL_GetTick>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a92:	e014      	b.n	8006abe <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a94:	f7fc fdfc 	bl	8003690 <HAL_GetTick>
 8006a98:	0002      	movs	r2, r0
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	1ad2      	subs	r2, r2, r3
 8006a9e:	200f      	movs	r0, #15
 8006aa0:	183b      	adds	r3, r7, r0
 8006aa2:	1839      	adds	r1, r7, r0
 8006aa4:	7809      	ldrb	r1, [r1, #0]
 8006aa6:	7019      	strb	r1, [r3, #0]
 8006aa8:	23fa      	movs	r3, #250	; 0xfa
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d906      	bls.n	8006abe <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006ab0:	183b      	adds	r3, r7, r0
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2229      	movs	r2, #41	; 0x29
 8006aba:	2103      	movs	r1, #3
 8006abc:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2240      	movs	r2, #64	; 0x40
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d104      	bne.n	8006ad4 <RTC_EnterInitMode+0x76>
 8006aca:	230f      	movs	r3, #15
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d1df      	bne.n	8006a94 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	781b      	ldrb	r3, [r3, #0]
}
 8006ada:	0018      	movs	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b004      	add	sp, #16
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aec:	240f      	movs	r4, #15
 8006aee:	193b      	adds	r3, r7, r4
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006af4:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	438a      	bics	r2, r1
 8006afe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2220      	movs	r2, #32
 8006b06:	4013      	ands	r3, r2
 8006b08:	d10d      	bne.n	8006b26 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7ff ff7f 	bl	8006a10 <HAL_RTC_WaitForSynchro>
 8006b12:	1e03      	subs	r3, r0, #0
 8006b14:	d021      	beq.n	8006b5a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2229      	movs	r2, #41	; 0x29
 8006b1a:	2103      	movs	r1, #3
 8006b1c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b1e:	193b      	adds	r3, r7, r4
 8006b20:	2203      	movs	r2, #3
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	e019      	b.n	8006b5a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006b2c:	2120      	movs	r1, #32
 8006b2e:	438a      	bics	r2, r1
 8006b30:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7ff ff6b 	bl	8006a10 <HAL_RTC_WaitForSynchro>
 8006b3a:	1e03      	subs	r3, r0, #0
 8006b3c:	d007      	beq.n	8006b4e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2229      	movs	r2, #41	; 0x29
 8006b42:	2103      	movs	r1, #3
 8006b44:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b46:	230f      	movs	r3, #15
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b4e:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <RTC_ExitInitMode+0x84>)
 8006b54:	2120      	movs	r1, #32
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006b5a:	230f      	movs	r3, #15
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	781b      	ldrb	r3, [r3, #0]
}
 8006b60:	0018      	movs	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b005      	add	sp, #20
 8006b66:	bd90      	pop	{r4, r7, pc}
 8006b68:	40002800 	.word	0x40002800

08006b6c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	0002      	movs	r2, r0
 8006b74:	1dfb      	adds	r3, r7, #7
 8006b76:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006b7c:	230b      	movs	r3, #11
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	1dfa      	adds	r2, r7, #7
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006b86:	e008      	b.n	8006b9a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006b8e:	220b      	movs	r2, #11
 8006b90:	18bb      	adds	r3, r7, r2
 8006b92:	18ba      	adds	r2, r7, r2
 8006b94:	7812      	ldrb	r2, [r2, #0]
 8006b96:	3a0a      	subs	r2, #10
 8006b98:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006b9a:	210b      	movs	r1, #11
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b09      	cmp	r3, #9
 8006ba2:	d8f1      	bhi.n	8006b88 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	b2db      	uxtb	r3, r3
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b004      	add	sp, #16
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	0002      	movs	r2, r0
 8006bc4:	1dfb      	adds	r3, r7, #7
 8006bc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006bc8:	1dfb      	adds	r3, r7, #7
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	001a      	movs	r2, r3
 8006bd2:	0013      	movs	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	1dfb      	adds	r3, r7, #7
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	210f      	movs	r1, #15
 8006be6:	400b      	ands	r3, r1
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	18d3      	adds	r3, r2, r3
 8006bec:	b2db      	uxtb	r3, r3
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b004      	add	sp, #16
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2228      	movs	r2, #40	; 0x28
 8006c08:	5c9b      	ldrb	r3, [r3, r2]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e082      	b.n	8006d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2228      	movs	r2, #40	; 0x28
 8006c16:	2101      	movs	r1, #1
 8006c18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2229      	movs	r2, #41	; 0x29
 8006c1e:	2102      	movs	r1, #2
 8006c20:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	22ca      	movs	r2, #202	; 0xca
 8006c28:	625a      	str	r2, [r3, #36]	; 0x24
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2253      	movs	r2, #83	; 0x53
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4938      	ldr	r1, [pc, #224]	; (8006d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006c52:	4b34      	ldr	r3, [pc, #208]	; (8006d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2240      	movs	r2, #64	; 0x40
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d121      	bne.n	8006ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8006c5c:	f7fc fd18 	bl	8003690 <HAL_GetTick>
 8006c60:	0003      	movs	r3, r0
 8006c62:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c64:	e016      	b.n	8006c94 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c66:	f7fc fd13 	bl	8003690 <HAL_GetTick>
 8006c6a:	0002      	movs	r2, r0
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	23fa      	movs	r3, #250	; 0xfa
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d90d      	bls.n	8006c94 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	22ff      	movs	r2, #255	; 0xff
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2229      	movs	r2, #41	; 0x29
 8006c84:	2103      	movs	r1, #3
 8006c86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2228      	movs	r2, #40	; 0x28
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e041      	b.n	8006d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d0e2      	beq.n	8006c66 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2107      	movs	r1, #7
 8006cb4:	438a      	bics	r2, r1
 8006cb6:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6999      	ldr	r1, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006cca:	2380      	movs	r3, #128	; 0x80
 8006ccc:	58d3      	ldr	r3, [r2, r3]
 8006cce:	4916      	ldr	r1, [pc, #88]	; (8006d28 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	0312      	lsls	r2, r2, #12
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	01c9      	lsls	r1, r1, #7
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	00c9      	lsls	r1, r1, #3
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	22ff      	movs	r2, #255	; 0xff
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2229      	movs	r2, #41	; 0x29
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2228      	movs	r2, #40	; 0x28
 8006d12:	2100      	movs	r1, #0
 8006d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b006      	add	sp, #24
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	fffffbff 	.word	0xfffffbff
 8006d24:	40002800 	.word	0x40002800
 8006d28:	40021800 	.word	0x40021800

08006d2c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d00b      	beq.n	8006d58 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f005 fba0 	bl	800c498 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2229      	movs	r2, #41	; 0x29
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	5499      	strb	r1, [r3, r2]
}
 8006d60:	46c0      	nop			; (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e04a      	b.n	8006e10 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	223d      	movs	r2, #61	; 0x3d
 8006d7e:	5c9b      	ldrb	r3, [r3, r2]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	223c      	movs	r2, #60	; 0x3c
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	0018      	movs	r0, r3
 8006d92:	f007 fff3 	bl	800ed7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	223d      	movs	r2, #61	; 0x3d
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	0019      	movs	r1, r3
 8006da8:	0010      	movs	r0, r2
 8006daa:	f000 fadd 	bl	8007368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2248      	movs	r2, #72	; 0x48
 8006db2:	2101      	movs	r1, #1
 8006db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	223e      	movs	r2, #62	; 0x3e
 8006dba:	2101      	movs	r1, #1
 8006dbc:	5499      	strb	r1, [r3, r2]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	223f      	movs	r2, #63	; 0x3f
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	5499      	strb	r1, [r3, r2]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2240      	movs	r2, #64	; 0x40
 8006dca:	2101      	movs	r1, #1
 8006dcc:	5499      	strb	r1, [r3, r2]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2241      	movs	r2, #65	; 0x41
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	5499      	strb	r1, [r3, r2]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2242      	movs	r2, #66	; 0x42
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5499      	strb	r1, [r3, r2]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2243      	movs	r2, #67	; 0x43
 8006de2:	2101      	movs	r1, #1
 8006de4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2244      	movs	r2, #68	; 0x44
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2245      	movs	r2, #69	; 0x45
 8006df2:	2101      	movs	r1, #1
 8006df4:	5499      	strb	r1, [r3, r2]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2246      	movs	r2, #70	; 0x46
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	5499      	strb	r1, [r3, r2]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2247      	movs	r2, #71	; 0x47
 8006e02:	2101      	movs	r1, #1
 8006e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	223d      	movs	r2, #61	; 0x3d
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	0018      	movs	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	223d      	movs	r2, #61	; 0x3d
 8006e24:	5c9b      	ldrb	r3, [r3, r2]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d001      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e042      	b.n	8006eb6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	223d      	movs	r2, #61	; 0x3d
 8006e34:	2102      	movs	r1, #2
 8006e36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2101      	movs	r1, #1
 8006e44:	430a      	orrs	r2, r1
 8006e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ec0 <HAL_TIM_Base_Start_IT+0xa8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <HAL_TIM_Base_Start_IT+0x5a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	2380      	movs	r3, #128	; 0x80
 8006e58:	05db      	lsls	r3, r3, #23
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d009      	beq.n	8006e72 <HAL_TIM_Base_Start_IT+0x5a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <HAL_TIM_Base_Start_IT+0xac>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d004      	beq.n	8006e72 <HAL_TIM_Base_Start_IT+0x5a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d116      	bne.n	8006ea0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <HAL_TIM_Base_Start_IT+0xb4>)
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b06      	cmp	r3, #6
 8006e82:	d016      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x9a>
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	2380      	movs	r3, #128	; 0x80
 8006e88:	025b      	lsls	r3, r3, #9
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d011      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2101      	movs	r1, #1
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	e008      	b.n	8006eb2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e000      	b.n	8006eb4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b004      	add	sp, #16
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	00010007 	.word	0x00010007

08006ed0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	438a      	bics	r2, r1
 8006ee6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <HAL_TIM_Base_Stop_IT+0x54>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d10d      	bne.n	8006f10 <HAL_TIM_Base_Stop_IT+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <HAL_TIM_Base_Stop_IT+0x58>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	d107      	bne.n	8006f10 <HAL_TIM_Base_Stop_IT+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	438a      	bics	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	223d      	movs	r2, #61	; 0x3d
 8006f14:	2101      	movs	r1, #1
 8006f16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b002      	add	sp, #8
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	00001111 	.word	0x00001111
 8006f28:	00000444 	.word	0x00000444

08006f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d124      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d11d      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2203      	movs	r2, #3
 8006f56:	4252      	negs	r2, r2
 8006f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	2203      	movs	r2, #3
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f000 f9e2 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006f74:	e007      	b.n	8006f86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f9d5 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 f9e1 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2204      	movs	r2, #4
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d125      	bne.n	8006fe6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d11e      	bne.n	8006fe6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2205      	movs	r2, #5
 8006fae:	4252      	negs	r2, r2
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	23c0      	movs	r3, #192	; 0xc0
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 f9b5 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006fce:	e007      	b.n	8006fe0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f000 f9a8 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f000 f9b4 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2208      	movs	r2, #8
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d124      	bne.n	800703e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d11d      	bne.n	800703e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2209      	movs	r2, #9
 8007008:	4252      	negs	r2, r2
 800700a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2204      	movs	r2, #4
 8007010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	2203      	movs	r2, #3
 800701a:	4013      	ands	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0018      	movs	r0, r3
 8007022:	f000 f989 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8007026:	e007      	b.n	8007038 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0018      	movs	r0, r3
 800702c:	f000 f97c 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	0018      	movs	r0, r3
 8007034:	f000 f988 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2210      	movs	r2, #16
 8007046:	4013      	ands	r3, r2
 8007048:	2b10      	cmp	r3, #16
 800704a:	d125      	bne.n	8007098 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2210      	movs	r2, #16
 8007054:	4013      	ands	r3, r2
 8007056:	2b10      	cmp	r3, #16
 8007058:	d11e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2211      	movs	r2, #17
 8007060:	4252      	negs	r2, r2
 8007062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2208      	movs	r2, #8
 8007068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	23c0      	movs	r3, #192	; 0xc0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4013      	ands	r3, r2
 8007076:	d004      	beq.n	8007082 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	0018      	movs	r0, r3
 800707c:	f000 f95c 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8007080:	e007      	b.n	8007092 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 f94f 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0018      	movs	r0, r3
 800708e:	f000 f95b 	bl	8007348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2201      	movs	r2, #1
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10f      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	4013      	ands	r3, r2
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d108      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2202      	movs	r2, #2
 80070ba:	4252      	negs	r2, r2
 80070bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f005 f9bb 	bl	800c43c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d10f      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	4013      	ands	r3, r2
 80070de:	2b80      	cmp	r3, #128	; 0x80
 80070e0:	d108      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2281      	movs	r2, #129	; 0x81
 80070e8:	4252      	negs	r2, r2
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f000 facc 	bl	800768c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	401a      	ands	r2, r3
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	429a      	cmp	r2, r3
 8007106:	d10e      	bne.n	8007126 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	2280      	movs	r2, #128	; 0x80
 8007110:	4013      	ands	r3, r2
 8007112:	2b80      	cmp	r3, #128	; 0x80
 8007114:	d107      	bne.n	8007126 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_IRQHandler+0x260>)
 800711c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	0018      	movs	r0, r3
 8007122:	f000 fabb 	bl	800769c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	4013      	ands	r3, r2
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	d10f      	bne.n	8007154 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2240      	movs	r2, #64	; 0x40
 800713c:	4013      	ands	r3, r2
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d108      	bne.n	8007154 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2241      	movs	r2, #65	; 0x41
 8007148:	4252      	negs	r2, r2
 800714a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f000 f902 	bl	8007358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2220      	movs	r2, #32
 800715c:	4013      	ands	r3, r2
 800715e:	2b20      	cmp	r3, #32
 8007160:	d10f      	bne.n	8007182 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	4013      	ands	r3, r2
 800716c:	2b20      	cmp	r3, #32
 800716e:	d108      	bne.n	8007182 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2221      	movs	r2, #33	; 0x21
 8007176:	4252      	negs	r2, r2
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0018      	movs	r0, r3
 800717e:	f000 fa7d 	bl	800767c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	46bd      	mov	sp, r7
 8007186:	b002      	add	sp, #8
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	fffffeff 	.word	0xfffffeff

08007190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	223c      	movs	r2, #60	; 0x3c
 800719e:	5c9b      	ldrb	r3, [r3, r2]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_TIM_ConfigClockSource+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e0b7      	b.n	8007318 <HAL_TIM_ConfigClockSource+0x188>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	223c      	movs	r2, #60	; 0x3c
 80071ac:	2101      	movs	r1, #1
 80071ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	223d      	movs	r2, #61	; 0x3d
 80071b4:	2102      	movs	r1, #2
 80071b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4a57      	ldr	r2, [pc, #348]	; (8007320 <HAL_TIM_ConfigClockSource+0x190>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4a56      	ldr	r2, [pc, #344]	; (8007324 <HAL_TIM_ConfigClockSource+0x194>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2280      	movs	r2, #128	; 0x80
 80071de:	0192      	lsls	r2, r2, #6
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d040      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0xd6>
 80071e4:	2280      	movs	r2, #128	; 0x80
 80071e6:	0192      	lsls	r2, r2, #6
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d900      	bls.n	80071ee <HAL_TIM_ConfigClockSource+0x5e>
 80071ec:	e088      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	0152      	lsls	r2, r2, #5
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d100      	bne.n	80071f8 <HAL_TIM_ConfigClockSource+0x68>
 80071f6:	e085      	b.n	8007304 <HAL_TIM_ConfigClockSource+0x174>
 80071f8:	2280      	movs	r2, #128	; 0x80
 80071fa:	0152      	lsls	r2, r2, #5
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d900      	bls.n	8007202 <HAL_TIM_ConfigClockSource+0x72>
 8007200:	e07e      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 8007202:	2b70      	cmp	r3, #112	; 0x70
 8007204:	d018      	beq.n	8007238 <HAL_TIM_ConfigClockSource+0xa8>
 8007206:	d900      	bls.n	800720a <HAL_TIM_ConfigClockSource+0x7a>
 8007208:	e07a      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 800720a:	2b60      	cmp	r3, #96	; 0x60
 800720c:	d04f      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0x11e>
 800720e:	d900      	bls.n	8007212 <HAL_TIM_ConfigClockSource+0x82>
 8007210:	e076      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 8007212:	2b50      	cmp	r3, #80	; 0x50
 8007214:	d03b      	beq.n	800728e <HAL_TIM_ConfigClockSource+0xfe>
 8007216:	d900      	bls.n	800721a <HAL_TIM_ConfigClockSource+0x8a>
 8007218:	e072      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d057      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x13e>
 800721e:	d900      	bls.n	8007222 <HAL_TIM_ConfigClockSource+0x92>
 8007220:	e06e      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 8007222:	2b30      	cmp	r3, #48	; 0x30
 8007224:	d063      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x15e>
 8007226:	d86b      	bhi.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 8007228:	2b20      	cmp	r3, #32
 800722a:	d060      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x15e>
 800722c:	d868      	bhi.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d05d      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x15e>
 8007232:	2b10      	cmp	r3, #16
 8007234:	d05b      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007236:	e063      	b.n	8007300 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	6899      	ldr	r1, [r3, #8]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f000 f98a 	bl	8007560 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2277      	movs	r2, #119	; 0x77
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]
      break;
 8007264:	e04f      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f000 f973 	bl	8007560 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2180      	movs	r1, #128	; 0x80
 8007286:	01c9      	lsls	r1, r1, #7
 8007288:	430a      	orrs	r2, r1
 800728a:	609a      	str	r2, [r3, #8]
      break;
 800728c:	e03b      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	001a      	movs	r2, r3
 800729c:	f000 f8e4 	bl	8007468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2150      	movs	r1, #80	; 0x50
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f93e 	bl	8007528 <TIM_ITRx_SetConfig>
      break;
 80072ac:	e02b      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	001a      	movs	r2, r3
 80072bc:	f000 f902 	bl	80074c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2160      	movs	r1, #96	; 0x60
 80072c6:	0018      	movs	r0, r3
 80072c8:	f000 f92e 	bl	8007528 <TIM_ITRx_SetConfig>
      break;
 80072cc:	e01b      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	001a      	movs	r2, r3
 80072dc:	f000 f8c4 	bl	8007468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2140      	movs	r1, #64	; 0x40
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f91e 	bl	8007528 <TIM_ITRx_SetConfig>
      break;
 80072ec:	e00b      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0019      	movs	r1, r3
 80072f8:	0010      	movs	r0, r2
 80072fa:	f000 f915 	bl	8007528 <TIM_ITRx_SetConfig>
        break;
 80072fe:	e002      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007300:	46c0      	nop			; (mov r8, r8)
 8007302:	e000      	b.n	8007306 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007304:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	223d      	movs	r2, #61	; 0x3d
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	223c      	movs	r2, #60	; 0x3c
 8007312:	2100      	movs	r1, #0
 8007314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b004      	add	sp, #16
 800731e:	bd80      	pop	{r7, pc}
 8007320:	ffceff88 	.word	0xffceff88
 8007324:	ffff00ff 	.word	0xffff00ff

08007328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007330:	46c0      	nop			; (mov r8, r8)
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007340:	46c0      	nop			; (mov r8, r8)
 8007342:	46bd      	mov	sp, r7
 8007344:	b002      	add	sp, #8
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b002      	add	sp, #8
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007360:	46c0      	nop			; (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b002      	add	sp, #8
 8007366:	bd80      	pop	{r7, pc}

08007368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a34      	ldr	r2, [pc, #208]	; (800744c <TIM_Base_SetConfig+0xe4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d008      	beq.n	8007392 <TIM_Base_SetConfig+0x2a>
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	2380      	movs	r3, #128	; 0x80
 8007384:	05db      	lsls	r3, r3, #23
 8007386:	429a      	cmp	r2, r3
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0x2a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a30      	ldr	r2, [pc, #192]	; (8007450 <TIM_Base_SetConfig+0xe8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2270      	movs	r2, #112	; 0x70
 8007396:	4393      	bics	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a29      	ldr	r2, [pc, #164]	; (800744c <TIM_Base_SetConfig+0xe4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d018      	beq.n	80073de <TIM_Base_SetConfig+0x76>
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	2380      	movs	r3, #128	; 0x80
 80073b0:	05db      	lsls	r3, r3, #23
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d013      	beq.n	80073de <TIM_Base_SetConfig+0x76>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a25      	ldr	r2, [pc, #148]	; (8007450 <TIM_Base_SetConfig+0xe8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00f      	beq.n	80073de <TIM_Base_SetConfig+0x76>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a24      	ldr	r2, [pc, #144]	; (8007454 <TIM_Base_SetConfig+0xec>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00b      	beq.n	80073de <TIM_Base_SetConfig+0x76>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a23      	ldr	r2, [pc, #140]	; (8007458 <TIM_Base_SetConfig+0xf0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d007      	beq.n	80073de <TIM_Base_SetConfig+0x76>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a22      	ldr	r2, [pc, #136]	; (800745c <TIM_Base_SetConfig+0xf4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <TIM_Base_SetConfig+0x76>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a21      	ldr	r2, [pc, #132]	; (8007460 <TIM_Base_SetConfig+0xf8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d108      	bne.n	80073f0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a20      	ldr	r2, [pc, #128]	; (8007464 <TIM_Base_SetConfig+0xfc>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2280      	movs	r2, #128	; 0x80
 80073f4:	4393      	bics	r3, r2
 80073f6:	001a      	movs	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a0c      	ldr	r2, [pc, #48]	; (800744c <TIM_Base_SetConfig+0xe4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00b      	beq.n	8007436 <TIM_Base_SetConfig+0xce>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a0d      	ldr	r2, [pc, #52]	; (8007458 <TIM_Base_SetConfig+0xf0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d007      	beq.n	8007436 <TIM_Base_SetConfig+0xce>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a0c      	ldr	r2, [pc, #48]	; (800745c <TIM_Base_SetConfig+0xf4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d003      	beq.n	8007436 <TIM_Base_SetConfig+0xce>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a0b      	ldr	r2, [pc, #44]	; (8007460 <TIM_Base_SetConfig+0xf8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d103      	bne.n	800743e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	691a      	ldr	r2, [r3, #16]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	615a      	str	r2, [r3, #20]
}
 8007444:	46c0      	nop			; (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b004      	add	sp, #16
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40000400 	.word	0x40000400
 8007454:	40002000 	.word	0x40002000
 8007458:	40014000 	.word	0x40014000
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800
 8007464:	fffffcff 	.word	0xfffffcff

08007468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	2201      	movs	r2, #1
 8007480:	4393      	bics	r3, r2
 8007482:	001a      	movs	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	22f0      	movs	r2, #240	; 0xf0
 8007492:	4393      	bics	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	220a      	movs	r2, #10
 80074a4:	4393      	bics	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	621a      	str	r2, [r3, #32]
}
 80074bc:	46c0      	nop			; (mov r8, r8)
 80074be:	46bd      	mov	sp, r7
 80074c0:	b006      	add	sp, #24
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	2210      	movs	r2, #16
 80074d6:	4393      	bics	r3, r2
 80074d8:	001a      	movs	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4a0d      	ldr	r2, [pc, #52]	; (8007524 <TIM_TI2_ConfigInputStage+0x60>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	22a0      	movs	r2, #160	; 0xa0
 8007500:	4393      	bics	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b006      	add	sp, #24
 8007520:	bd80      	pop	{r7, pc}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	ffff0fff 	.word	0xffff0fff

08007528 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a08      	ldr	r2, [pc, #32]	; (800755c <TIM_ITRx_SetConfig+0x34>)
 800753c:	4013      	ands	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	2207      	movs	r2, #7
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	609a      	str	r2, [r3, #8]
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b004      	add	sp, #16
 8007558:	bd80      	pop	{r7, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	ffcfff8f 	.word	0xffcfff8f

08007560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <TIM_ETR_SetConfig+0x3c>)
 8007578:	4013      	ands	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	021a      	lsls	r2, r3, #8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	431a      	orrs	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4313      	orrs	r3, r2
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	609a      	str	r2, [r3, #8]
}
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	46bd      	mov	sp, r7
 8007598:	b006      	add	sp, #24
 800759a:	bd80      	pop	{r7, pc}
 800759c:	ffff00ff 	.word	0xffff00ff

080075a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	223c      	movs	r2, #60	; 0x3c
 80075ae:	5c9b      	ldrb	r3, [r3, r2]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e055      	b.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	223c      	movs	r2, #60	; 0x3c
 80075bc:	2101      	movs	r1, #1
 80075be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	223d      	movs	r2, #61	; 0x3d
 80075c4:	2102      	movs	r1, #2
 80075c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a23      	ldr	r2, [pc, #140]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d108      	bne.n	80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a22      	ldr	r2, [pc, #136]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2270      	movs	r2, #112	; 0x70
 80075f8:	4393      	bics	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00f      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	2380      	movs	r3, #128	; 0x80
 800761e:	05db      	lsls	r3, r3, #23
 8007620:	429a      	cmp	r2, r3
 8007622:	d009      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a12      	ldr	r2, [pc, #72]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a11      	ldr	r2, [pc, #68]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10c      	bne.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2280      	movs	r2, #128	; 0x80
 800763c:	4393      	bics	r3, r2
 800763e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	223d      	movs	r2, #61	; 0x3d
 8007656:	2101      	movs	r1, #1
 8007658:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	223c      	movs	r2, #60	; 0x3c
 800765e:	2100      	movs	r1, #0
 8007660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b004      	add	sp, #16
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40012c00 	.word	0x40012c00
 8007670:	ff0fffff 	.word	0xff0fffff
 8007674:	40000400 	.word	0x40000400
 8007678:	40014000 	.word	0x40014000

0800767c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007684:	46c0      	nop			; (mov r8, r8)
 8007686:	46bd      	mov	sp, r7
 8007688:	b002      	add	sp, #8
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007694:	46c0      	nop			; (mov r8, r8)
 8007696:	46bd      	mov	sp, r7
 8007698:	b002      	add	sp, #8
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b002      	add	sp, #8
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e046      	b.n	800774c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2284      	movs	r2, #132	; 0x84
 80076c2:	589b      	ldr	r3, [r3, r2]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2280      	movs	r2, #128	; 0x80
 80076cc:	2100      	movs	r1, #0
 80076ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	0018      	movs	r0, r3
 80076d4:	f007 fbd0 	bl	800ee78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2284      	movs	r2, #132	; 0x84
 80076dc:	2124      	movs	r1, #36	; 0x24
 80076de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2101      	movs	r1, #1
 80076ec:	438a      	bics	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	0018      	movs	r0, r3
 80076f4:	f000 f830 	bl	8007758 <UART_SetConfig>
 80076f8:	0003      	movs	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e024      	b.n	800774c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0018      	movs	r0, r3
 800770e:	f000 fb01 	bl	8007d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	490d      	ldr	r1, [pc, #52]	; (8007754 <HAL_UART_Init+0xa8>)
 800771e:	400a      	ands	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	212a      	movs	r1, #42	; 0x2a
 800772e:	438a      	bics	r2, r1
 8007730:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2101      	movs	r1, #1
 800773e:	430a      	orrs	r2, r1
 8007740:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	0018      	movs	r0, r3
 8007746:	f000 fb99 	bl	8007e7c <UART_CheckIdleState>
 800774a:	0003      	movs	r3, r0
}
 800774c:	0018      	movs	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	b002      	add	sp, #8
 8007752:	bd80      	pop	{r7, pc}
 8007754:	ffffb7ff 	.word	0xffffb7ff

08007758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007758:	b5b0      	push	{r4, r5, r7, lr}
 800775a:	b090      	sub	sp, #64	; 0x40
 800775c:	af00      	add	r7, sp, #0
 800775e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007760:	231a      	movs	r3, #26
 8007762:	2220      	movs	r2, #32
 8007764:	4694      	mov	ip, r2
 8007766:	44bc      	add	ip, r7
 8007768:	4463      	add	r3, ip
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	431a      	orrs	r2, r3
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	431a      	orrs	r2, r3
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	4313      	orrs	r3, r2
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4ab9      	ldr	r2, [pc, #740]	; (8007a74 <UART_SetConfig+0x31c>)
 800778e:	4013      	ands	r3, r2
 8007790:	0019      	movs	r1, r3
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007798:	430b      	orrs	r3, r1
 800779a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4ab5      	ldr	r2, [pc, #724]	; (8007a78 <UART_SetConfig+0x320>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	0018      	movs	r0, r3
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	68d9      	ldr	r1, [r3, #12]
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	0003      	movs	r3, r0
 80077b2:	430b      	orrs	r3, r1
 80077b4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4aae      	ldr	r2, [pc, #696]	; (8007a7c <UART_SetConfig+0x324>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077cc:	4313      	orrs	r3, r2
 80077ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	4aaa      	ldr	r2, [pc, #680]	; (8007a80 <UART_SetConfig+0x328>)
 80077d8:	4013      	ands	r3, r2
 80077da:	0019      	movs	r1, r3
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	430b      	orrs	r3, r1
 80077e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	220f      	movs	r2, #15
 80077ee:	4393      	bics	r3, r2
 80077f0:	0018      	movs	r0, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	0003      	movs	r3, r0
 80077fc:	430b      	orrs	r3, r1
 80077fe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a9f      	ldr	r2, [pc, #636]	; (8007a84 <UART_SetConfig+0x32c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d136      	bne.n	8007878 <UART_SetConfig+0x120>
 800780a:	4b9f      	ldr	r3, [pc, #636]	; (8007a88 <UART_SetConfig+0x330>)
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	2203      	movs	r2, #3
 8007810:	4013      	ands	r3, r2
 8007812:	2b03      	cmp	r3, #3
 8007814:	d020      	beq.n	8007858 <UART_SetConfig+0x100>
 8007816:	d827      	bhi.n	8007868 <UART_SetConfig+0x110>
 8007818:	2b02      	cmp	r3, #2
 800781a:	d00d      	beq.n	8007838 <UART_SetConfig+0xe0>
 800781c:	d824      	bhi.n	8007868 <UART_SetConfig+0x110>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <UART_SetConfig+0xd0>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d010      	beq.n	8007848 <UART_SetConfig+0xf0>
 8007826:	e01f      	b.n	8007868 <UART_SetConfig+0x110>
 8007828:	231b      	movs	r3, #27
 800782a:	2220      	movs	r2, #32
 800782c:	4694      	mov	ip, r2
 800782e:	44bc      	add	ip, r7
 8007830:	4463      	add	r3, ip
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	e0c5      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007838:	231b      	movs	r3, #27
 800783a:	2220      	movs	r2, #32
 800783c:	4694      	mov	ip, r2
 800783e:	44bc      	add	ip, r7
 8007840:	4463      	add	r3, ip
 8007842:	2202      	movs	r2, #2
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e0bd      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007848:	231b      	movs	r3, #27
 800784a:	2220      	movs	r2, #32
 800784c:	4694      	mov	ip, r2
 800784e:	44bc      	add	ip, r7
 8007850:	4463      	add	r3, ip
 8007852:	2204      	movs	r2, #4
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e0b5      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007858:	231b      	movs	r3, #27
 800785a:	2220      	movs	r2, #32
 800785c:	4694      	mov	ip, r2
 800785e:	44bc      	add	ip, r7
 8007860:	4463      	add	r3, ip
 8007862:	2208      	movs	r2, #8
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	e0ad      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007868:	231b      	movs	r3, #27
 800786a:	2220      	movs	r2, #32
 800786c:	4694      	mov	ip, r2
 800786e:	44bc      	add	ip, r7
 8007870:	4463      	add	r3, ip
 8007872:	2210      	movs	r2, #16
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e0a5      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a83      	ldr	r2, [pc, #524]	; (8007a8c <UART_SetConfig+0x334>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d136      	bne.n	80078f0 <UART_SetConfig+0x198>
 8007882:	4b81      	ldr	r3, [pc, #516]	; (8007a88 <UART_SetConfig+0x330>)
 8007884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007886:	220c      	movs	r2, #12
 8007888:	4013      	ands	r3, r2
 800788a:	2b0c      	cmp	r3, #12
 800788c:	d020      	beq.n	80078d0 <UART_SetConfig+0x178>
 800788e:	d827      	bhi.n	80078e0 <UART_SetConfig+0x188>
 8007890:	2b08      	cmp	r3, #8
 8007892:	d00d      	beq.n	80078b0 <UART_SetConfig+0x158>
 8007894:	d824      	bhi.n	80078e0 <UART_SetConfig+0x188>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <UART_SetConfig+0x148>
 800789a:	2b04      	cmp	r3, #4
 800789c:	d010      	beq.n	80078c0 <UART_SetConfig+0x168>
 800789e:	e01f      	b.n	80078e0 <UART_SetConfig+0x188>
 80078a0:	231b      	movs	r3, #27
 80078a2:	2220      	movs	r2, #32
 80078a4:	4694      	mov	ip, r2
 80078a6:	44bc      	add	ip, r7
 80078a8:	4463      	add	r3, ip
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e089      	b.n	80079c4 <UART_SetConfig+0x26c>
 80078b0:	231b      	movs	r3, #27
 80078b2:	2220      	movs	r2, #32
 80078b4:	4694      	mov	ip, r2
 80078b6:	44bc      	add	ip, r7
 80078b8:	4463      	add	r3, ip
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e081      	b.n	80079c4 <UART_SetConfig+0x26c>
 80078c0:	231b      	movs	r3, #27
 80078c2:	2220      	movs	r2, #32
 80078c4:	4694      	mov	ip, r2
 80078c6:	44bc      	add	ip, r7
 80078c8:	4463      	add	r3, ip
 80078ca:	2204      	movs	r2, #4
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e079      	b.n	80079c4 <UART_SetConfig+0x26c>
 80078d0:	231b      	movs	r3, #27
 80078d2:	2220      	movs	r2, #32
 80078d4:	4694      	mov	ip, r2
 80078d6:	44bc      	add	ip, r7
 80078d8:	4463      	add	r3, ip
 80078da:	2208      	movs	r2, #8
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e071      	b.n	80079c4 <UART_SetConfig+0x26c>
 80078e0:	231b      	movs	r3, #27
 80078e2:	2220      	movs	r2, #32
 80078e4:	4694      	mov	ip, r2
 80078e6:	44bc      	add	ip, r7
 80078e8:	4463      	add	r3, ip
 80078ea:	2210      	movs	r2, #16
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e069      	b.n	80079c4 <UART_SetConfig+0x26c>
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a66      	ldr	r2, [pc, #408]	; (8007a90 <UART_SetConfig+0x338>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d107      	bne.n	800790a <UART_SetConfig+0x1b2>
 80078fa:	231b      	movs	r3, #27
 80078fc:	2220      	movs	r2, #32
 80078fe:	4694      	mov	ip, r2
 8007900:	44bc      	add	ip, r7
 8007902:	4463      	add	r3, ip
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e05c      	b.n	80079c4 <UART_SetConfig+0x26c>
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a61      	ldr	r2, [pc, #388]	; (8007a94 <UART_SetConfig+0x33c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d107      	bne.n	8007924 <UART_SetConfig+0x1cc>
 8007914:	231b      	movs	r3, #27
 8007916:	2220      	movs	r2, #32
 8007918:	4694      	mov	ip, r2
 800791a:	44bc      	add	ip, r7
 800791c:	4463      	add	r3, ip
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e04f      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a54      	ldr	r2, [pc, #336]	; (8007a7c <UART_SetConfig+0x324>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d143      	bne.n	80079b6 <UART_SetConfig+0x25e>
 800792e:	4b56      	ldr	r3, [pc, #344]	; (8007a88 <UART_SetConfig+0x330>)
 8007930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007932:	23c0      	movs	r3, #192	; 0xc0
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	4013      	ands	r3, r2
 8007938:	22c0      	movs	r2, #192	; 0xc0
 800793a:	0112      	lsls	r2, r2, #4
 800793c:	4293      	cmp	r3, r2
 800793e:	d02a      	beq.n	8007996 <UART_SetConfig+0x23e>
 8007940:	22c0      	movs	r2, #192	; 0xc0
 8007942:	0112      	lsls	r2, r2, #4
 8007944:	4293      	cmp	r3, r2
 8007946:	d82e      	bhi.n	80079a6 <UART_SetConfig+0x24e>
 8007948:	2280      	movs	r2, #128	; 0x80
 800794a:	0112      	lsls	r2, r2, #4
 800794c:	4293      	cmp	r3, r2
 800794e:	d012      	beq.n	8007976 <UART_SetConfig+0x21e>
 8007950:	2280      	movs	r2, #128	; 0x80
 8007952:	0112      	lsls	r2, r2, #4
 8007954:	4293      	cmp	r3, r2
 8007956:	d826      	bhi.n	80079a6 <UART_SetConfig+0x24e>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <UART_SetConfig+0x20e>
 800795c:	2280      	movs	r2, #128	; 0x80
 800795e:	00d2      	lsls	r2, r2, #3
 8007960:	4293      	cmp	r3, r2
 8007962:	d010      	beq.n	8007986 <UART_SetConfig+0x22e>
 8007964:	e01f      	b.n	80079a6 <UART_SetConfig+0x24e>
 8007966:	231b      	movs	r3, #27
 8007968:	2220      	movs	r2, #32
 800796a:	4694      	mov	ip, r2
 800796c:	44bc      	add	ip, r7
 800796e:	4463      	add	r3, ip
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e026      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007976:	231b      	movs	r3, #27
 8007978:	2220      	movs	r2, #32
 800797a:	4694      	mov	ip, r2
 800797c:	44bc      	add	ip, r7
 800797e:	4463      	add	r3, ip
 8007980:	2202      	movs	r2, #2
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e01e      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007986:	231b      	movs	r3, #27
 8007988:	2220      	movs	r2, #32
 800798a:	4694      	mov	ip, r2
 800798c:	44bc      	add	ip, r7
 800798e:	4463      	add	r3, ip
 8007990:	2204      	movs	r2, #4
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	e016      	b.n	80079c4 <UART_SetConfig+0x26c>
 8007996:	231b      	movs	r3, #27
 8007998:	2220      	movs	r2, #32
 800799a:	4694      	mov	ip, r2
 800799c:	44bc      	add	ip, r7
 800799e:	4463      	add	r3, ip
 80079a0:	2208      	movs	r2, #8
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	e00e      	b.n	80079c4 <UART_SetConfig+0x26c>
 80079a6:	231b      	movs	r3, #27
 80079a8:	2220      	movs	r2, #32
 80079aa:	4694      	mov	ip, r2
 80079ac:	44bc      	add	ip, r7
 80079ae:	4463      	add	r3, ip
 80079b0:	2210      	movs	r2, #16
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e006      	b.n	80079c4 <UART_SetConfig+0x26c>
 80079b6:	231b      	movs	r3, #27
 80079b8:	2220      	movs	r2, #32
 80079ba:	4694      	mov	ip, r2
 80079bc:	44bc      	add	ip, r7
 80079be:	4463      	add	r3, ip
 80079c0:	2210      	movs	r2, #16
 80079c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2c      	ldr	r2, [pc, #176]	; (8007a7c <UART_SetConfig+0x324>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d000      	beq.n	80079d0 <UART_SetConfig+0x278>
 80079ce:	e0ad      	b.n	8007b2c <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079d0:	231b      	movs	r3, #27
 80079d2:	2220      	movs	r2, #32
 80079d4:	4694      	mov	ip, r2
 80079d6:	44bc      	add	ip, r7
 80079d8:	4463      	add	r3, ip
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d015      	beq.n	8007a0c <UART_SetConfig+0x2b4>
 80079e0:	dc18      	bgt.n	8007a14 <UART_SetConfig+0x2bc>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00d      	beq.n	8007a02 <UART_SetConfig+0x2aa>
 80079e6:	dc15      	bgt.n	8007a14 <UART_SetConfig+0x2bc>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <UART_SetConfig+0x29a>
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d005      	beq.n	80079fc <UART_SetConfig+0x2a4>
 80079f0:	e010      	b.n	8007a14 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f2:	f7fe fbc5 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 80079f6:	0003      	movs	r3, r0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079fa:	e015      	b.n	8007a28 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079fc:	4b26      	ldr	r3, [pc, #152]	; (8007a98 <UART_SetConfig+0x340>)
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a00:	e012      	b.n	8007a28 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a02:	f7fe fb31 	bl	8006068 <HAL_RCC_GetSysClockFreq>
 8007a06:	0003      	movs	r3, r0
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0a:	e00d      	b.n	8007a28 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a12:	e009      	b.n	8007a28 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007a18:	231a      	movs	r3, #26
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	44bc      	add	ip, r7
 8007a20:	4463      	add	r3, ip
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
        break;
 8007a26:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d100      	bne.n	8007a30 <UART_SetConfig+0x2d8>
 8007a2e:	e154      	b.n	8007cda <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <UART_SetConfig+0x344>)
 8007a36:	0052      	lsls	r2, r2, #1
 8007a38:	5ad3      	ldrh	r3, [r2, r3]
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a3e:	f7f8 fb6d 	bl	800011c <__udivsi3>
 8007a42:	0003      	movs	r3, r0
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	0013      	movs	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d305      	bcc.n	8007a62 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d91e      	bls.n	8007aa0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007a62:	231a      	movs	r3, #26
 8007a64:	2220      	movs	r2, #32
 8007a66:	4694      	mov	ip, r2
 8007a68:	44bc      	add	ip, r7
 8007a6a:	4463      	add	r3, ip
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	e133      	b.n	8007cda <UART_SetConfig+0x582>
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	cfff69f3 	.word	0xcfff69f3
 8007a78:	ffffcfff 	.word	0xffffcfff
 8007a7c:	40008000 	.word	0x40008000
 8007a80:	11fff4ff 	.word	0x11fff4ff
 8007a84:	40013800 	.word	0x40013800
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40004400 	.word	0x40004400
 8007a90:	40004800 	.word	0x40004800
 8007a94:	40004c00 	.word	0x40004c00
 8007a98:	00f42400 	.word	0x00f42400
 8007a9c:	080103a0 	.word	0x080103a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	61bb      	str	r3, [r7, #24]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aac:	4b97      	ldr	r3, [pc, #604]	; (8007d0c <UART_SetConfig+0x5b4>)
 8007aae:	0052      	lsls	r2, r2, #1
 8007ab0:	5ad3      	ldrh	r3, [r2, r3]
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	69b8      	ldr	r0, [r7, #24]
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	f7f8 fd04 	bl	80004cc <__aeabi_uldivmod>
 8007ac4:	0002      	movs	r2, r0
 8007ac6:	000b      	movs	r3, r1
 8007ac8:	0e11      	lsrs	r1, r2, #24
 8007aca:	021d      	lsls	r5, r3, #8
 8007acc:	430d      	orrs	r5, r1
 8007ace:	0214      	lsls	r4, r2, #8
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	60bb      	str	r3, [r7, #8]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68b8      	ldr	r0, [r7, #8]
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	1900      	adds	r0, r0, r4
 8007ae2:	4169      	adcs	r1, r5
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f7f8 fceb 	bl	80004cc <__aeabi_uldivmod>
 8007af6:	0002      	movs	r2, r0
 8007af8:	000b      	movs	r3, r1
 8007afa:	0013      	movs	r3, r2
 8007afc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b00:	23c0      	movs	r3, #192	; 0xc0
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d309      	bcc.n	8007b1c <UART_SetConfig+0x3c4>
 8007b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0a:	2380      	movs	r3, #128	; 0x80
 8007b0c:	035b      	lsls	r3, r3, #13
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d204      	bcs.n	8007b1c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	e0de      	b.n	8007cda <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8007b1c:	231a      	movs	r3, #26
 8007b1e:	2220      	movs	r2, #32
 8007b20:	4694      	mov	ip, r2
 8007b22:	44bc      	add	ip, r7
 8007b24:	4463      	add	r3, ip
 8007b26:	2201      	movs	r2, #1
 8007b28:	701a      	strb	r2, [r3, #0]
 8007b2a:	e0d6      	b.n	8007cda <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	69da      	ldr	r2, [r3, #28]
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d000      	beq.n	8007b3a <UART_SetConfig+0x3e2>
 8007b38:	e074      	b.n	8007c24 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8007b3a:	231b      	movs	r3, #27
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	4694      	mov	ip, r2
 8007b40:	44bc      	add	ip, r7
 8007b42:	4463      	add	r3, ip
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d015      	beq.n	8007b76 <UART_SetConfig+0x41e>
 8007b4a:	dc18      	bgt.n	8007b7e <UART_SetConfig+0x426>
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d00d      	beq.n	8007b6c <UART_SetConfig+0x414>
 8007b50:	dc15      	bgt.n	8007b7e <UART_SetConfig+0x426>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <UART_SetConfig+0x404>
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d005      	beq.n	8007b66 <UART_SetConfig+0x40e>
 8007b5a:	e010      	b.n	8007b7e <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b5c:	f7fe fb10 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8007b60:	0003      	movs	r3, r0
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b64:	e015      	b.n	8007b92 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b66:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <UART_SetConfig+0x5b8>)
 8007b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b6a:	e012      	b.n	8007b92 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b6c:	f7fe fa7c 	bl	8006068 <HAL_RCC_GetSysClockFreq>
 8007b70:	0003      	movs	r3, r0
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b74:	e00d      	b.n	8007b92 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b7c:	e009      	b.n	8007b92 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007b82:	231a      	movs	r3, #26
 8007b84:	2220      	movs	r2, #32
 8007b86:	4694      	mov	ip, r2
 8007b88:	44bc      	add	ip, r7
 8007b8a:	4463      	add	r3, ip
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
        break;
 8007b90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d100      	bne.n	8007b9a <UART_SetConfig+0x442>
 8007b98:	e09f      	b.n	8007cda <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b9e:	4b5b      	ldr	r3, [pc, #364]	; (8007d0c <UART_SetConfig+0x5b4>)
 8007ba0:	0052      	lsls	r2, r2, #1
 8007ba2:	5ad3      	ldrh	r3, [r2, r3]
 8007ba4:	0019      	movs	r1, r3
 8007ba6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ba8:	f7f8 fab8 	bl	800011c <__udivsi3>
 8007bac:	0003      	movs	r3, r0
 8007bae:	005a      	lsls	r2, r3, #1
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	085b      	lsrs	r3, r3, #1
 8007bb6:	18d2      	adds	r2, r2, r3
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	0010      	movs	r0, r2
 8007bc0:	f7f8 faac 	bl	800011c <__udivsi3>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2b0f      	cmp	r3, #15
 8007bce:	d921      	bls.n	8007c14 <UART_SetConfig+0x4bc>
 8007bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	025b      	lsls	r3, r3, #9
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d21c      	bcs.n	8007c14 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	200e      	movs	r0, #14
 8007be0:	2420      	movs	r4, #32
 8007be2:	193b      	adds	r3, r7, r4
 8007be4:	181b      	adds	r3, r3, r0
 8007be6:	210f      	movs	r1, #15
 8007be8:	438a      	bics	r2, r1
 8007bea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	085b      	lsrs	r3, r3, #1
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2207      	movs	r2, #7
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	b299      	uxth	r1, r3
 8007bf8:	193b      	adds	r3, r7, r4
 8007bfa:	181b      	adds	r3, r3, r0
 8007bfc:	193a      	adds	r2, r7, r4
 8007bfe:	1812      	adds	r2, r2, r0
 8007c00:	8812      	ldrh	r2, [r2, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	193a      	adds	r2, r7, r4
 8007c0c:	1812      	adds	r2, r2, r0
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	e062      	b.n	8007cda <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007c14:	231a      	movs	r3, #26
 8007c16:	2220      	movs	r2, #32
 8007c18:	4694      	mov	ip, r2
 8007c1a:	44bc      	add	ip, r7
 8007c1c:	4463      	add	r3, ip
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e05a      	b.n	8007cda <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c24:	231b      	movs	r3, #27
 8007c26:	2220      	movs	r2, #32
 8007c28:	4694      	mov	ip, r2
 8007c2a:	44bc      	add	ip, r7
 8007c2c:	4463      	add	r3, ip
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d015      	beq.n	8007c60 <UART_SetConfig+0x508>
 8007c34:	dc18      	bgt.n	8007c68 <UART_SetConfig+0x510>
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d00d      	beq.n	8007c56 <UART_SetConfig+0x4fe>
 8007c3a:	dc15      	bgt.n	8007c68 <UART_SetConfig+0x510>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <UART_SetConfig+0x4ee>
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d005      	beq.n	8007c50 <UART_SetConfig+0x4f8>
 8007c44:	e010      	b.n	8007c68 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c46:	f7fe fa9b 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c4e:	e015      	b.n	8007c7c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c50:	4b2f      	ldr	r3, [pc, #188]	; (8007d10 <UART_SetConfig+0x5b8>)
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c54:	e012      	b.n	8007c7c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fe fa07 	bl	8006068 <HAL_RCC_GetSysClockFreq>
 8007c5a:	0003      	movs	r3, r0
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c5e:	e00d      	b.n	8007c7c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c60:	2380      	movs	r3, #128	; 0x80
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c66:	e009      	b.n	8007c7c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007c6c:	231a      	movs	r3, #26
 8007c6e:	2220      	movs	r2, #32
 8007c70:	4694      	mov	ip, r2
 8007c72:	44bc      	add	ip, r7
 8007c74:	4463      	add	r3, ip
 8007c76:	2201      	movs	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]
        break;
 8007c7a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d02b      	beq.n	8007cda <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c86:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <UART_SetConfig+0x5b4>)
 8007c88:	0052      	lsls	r2, r2, #1
 8007c8a:	5ad3      	ldrh	r3, [r2, r3]
 8007c8c:	0019      	movs	r1, r3
 8007c8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c90:	f7f8 fa44 	bl	800011c <__udivsi3>
 8007c94:	0003      	movs	r3, r0
 8007c96:	001a      	movs	r2, r3
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	085b      	lsrs	r3, r3, #1
 8007c9e:	18d2      	adds	r2, r2, r3
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	0019      	movs	r1, r3
 8007ca6:	0010      	movs	r0, r2
 8007ca8:	f7f8 fa38 	bl	800011c <__udivsi3>
 8007cac:	0003      	movs	r3, r0
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	2b0f      	cmp	r3, #15
 8007cb6:	d909      	bls.n	8007ccc <UART_SetConfig+0x574>
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cba:	2380      	movs	r3, #128	; 0x80
 8007cbc:	025b      	lsls	r3, r3, #9
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d204      	bcs.n	8007ccc <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e006      	b.n	8007cda <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007ccc:	231a      	movs	r3, #26
 8007cce:	2220      	movs	r2, #32
 8007cd0:	4694      	mov	ip, r2
 8007cd2:	44bc      	add	ip, r7
 8007cd4:	4463      	add	r3, ip
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	226a      	movs	r2, #106	; 0x6a
 8007cde:	2101      	movs	r1, #1
 8007ce0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	2268      	movs	r2, #104	; 0x68
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	2200      	movs	r2, #0
 8007cee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cf6:	231a      	movs	r3, #26
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	4694      	mov	ip, r2
 8007cfc:	44bc      	add	ip, r7
 8007cfe:	4463      	add	r3, ip
 8007d00:	781b      	ldrb	r3, [r3, #0]
}
 8007d02:	0018      	movs	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b010      	add	sp, #64	; 0x40
 8007d08:	bdb0      	pop	{r4, r5, r7, pc}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	080103a0 	.word	0x080103a0
 8007d10:	00f42400 	.word	0x00f42400

08007d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	2201      	movs	r2, #1
 8007d22:	4013      	ands	r3, r2
 8007d24:	d00b      	beq.n	8007d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4a4a      	ldr	r2, [pc, #296]	; (8007e58 <UART_AdvFeatureConfig+0x144>)
 8007d2e:	4013      	ands	r3, r2
 8007d30:	0019      	movs	r1, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	2202      	movs	r2, #2
 8007d44:	4013      	ands	r3, r2
 8007d46:	d00b      	beq.n	8007d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	4a43      	ldr	r2, [pc, #268]	; (8007e5c <UART_AdvFeatureConfig+0x148>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	0019      	movs	r1, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	2204      	movs	r2, #4
 8007d66:	4013      	ands	r3, r2
 8007d68:	d00b      	beq.n	8007d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a3b      	ldr	r2, [pc, #236]	; (8007e60 <UART_AdvFeatureConfig+0x14c>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	0019      	movs	r1, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	2208      	movs	r2, #8
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d00b      	beq.n	8007da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4a34      	ldr	r2, [pc, #208]	; (8007e64 <UART_AdvFeatureConfig+0x150>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	0019      	movs	r1, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	2210      	movs	r2, #16
 8007daa:	4013      	ands	r3, r2
 8007dac:	d00b      	beq.n	8007dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <UART_AdvFeatureConfig+0x154>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	0019      	movs	r1, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	2220      	movs	r2, #32
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d00b      	beq.n	8007de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <UART_AdvFeatureConfig+0x158>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	0019      	movs	r1, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	2240      	movs	r2, #64	; 0x40
 8007dee:	4013      	ands	r3, r2
 8007df0:	d01d      	beq.n	8007e2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	4a1d      	ldr	r2, [pc, #116]	; (8007e70 <UART_AdvFeatureConfig+0x15c>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	0019      	movs	r1, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e0e:	2380      	movs	r3, #128	; 0x80
 8007e10:	035b      	lsls	r3, r3, #13
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d10b      	bne.n	8007e2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <UART_AdvFeatureConfig+0x160>)
 8007e1e:	4013      	ands	r3, r2
 8007e20:	0019      	movs	r1, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	2280      	movs	r2, #128	; 0x80
 8007e34:	4013      	ands	r3, r2
 8007e36:	d00b      	beq.n	8007e50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4a0e      	ldr	r2, [pc, #56]	; (8007e78 <UART_AdvFeatureConfig+0x164>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	0019      	movs	r1, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b002      	add	sp, #8
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	fffdffff 	.word	0xfffdffff
 8007e5c:	fffeffff 	.word	0xfffeffff
 8007e60:	fffbffff 	.word	0xfffbffff
 8007e64:	ffff7fff 	.word	0xffff7fff
 8007e68:	ffffefff 	.word	0xffffefff
 8007e6c:	ffffdfff 	.word	0xffffdfff
 8007e70:	ffefffff 	.word	0xffefffff
 8007e74:	ff9fffff 	.word	0xff9fffff
 8007e78:	fff7ffff 	.word	0xfff7ffff

08007e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	228c      	movs	r2, #140	; 0x8c
 8007e88:	2100      	movs	r1, #0
 8007e8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e8c:	f7fb fc00 	bl	8003690 <HAL_GetTick>
 8007e90:	0003      	movs	r3, r0
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d10c      	bne.n	8007ebc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2280      	movs	r2, #128	; 0x80
 8007ea6:	0391      	lsls	r1, r2, #14
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4a18      	ldr	r2, [pc, #96]	; (8007f0c <UART_CheckIdleState+0x90>)
 8007eac:	9200      	str	r2, [sp, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f000 f82e 	bl	8007f10 <UART_WaitOnFlagUntilTimeout>
 8007eb4:	1e03      	subs	r3, r0, #0
 8007eb6:	d001      	beq.n	8007ebc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e023      	b.n	8007f04 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d10c      	bne.n	8007ee4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2280      	movs	r2, #128	; 0x80
 8007ece:	03d1      	lsls	r1, r2, #15
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4a0e      	ldr	r2, [pc, #56]	; (8007f0c <UART_CheckIdleState+0x90>)
 8007ed4:	9200      	str	r2, [sp, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f000 f81a 	bl	8007f10 <UART_WaitOnFlagUntilTimeout>
 8007edc:	1e03      	subs	r3, r0, #0
 8007ede:	d001      	beq.n	8007ee4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e00f      	b.n	8007f04 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2284      	movs	r2, #132	; 0x84
 8007ee8:	2120      	movs	r1, #32
 8007eea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2288      	movs	r2, #136	; 0x88
 8007ef0:	2120      	movs	r1, #32
 8007ef2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2280      	movs	r2, #128	; 0x80
 8007efe:	2100      	movs	r1, #0
 8007f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	0018      	movs	r0, r3
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b004      	add	sp, #16
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	01ffffff 	.word	0x01ffffff

08007f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b094      	sub	sp, #80	; 0x50
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	1dfb      	adds	r3, r7, #7
 8007f1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f20:	e0a7      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f24:	3301      	adds	r3, #1
 8007f26:	d100      	bne.n	8007f2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007f28:	e0a3      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f2a:	f7fb fbb1 	bl	8003690 <HAL_GetTick>
 8007f2e:	0002      	movs	r2, r0
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d302      	bcc.n	8007f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d13f      	bne.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f40:	f3ef 8310 	mrs	r3, PRIMASK
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f48:	647b      	str	r3, [r7, #68]	; 0x44
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	f383 8810 	msr	PRIMASK, r3
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	494e      	ldr	r1, [pc, #312]	; (800809c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007f62:	400a      	ands	r2, r1
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	f383 8810 	msr	PRIMASK, r3
}
 8007f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f72:	f3ef 8310 	mrs	r3, PRIMASK
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f383 8810 	msr	PRIMASK, r3
}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2101      	movs	r1, #1
 8007f94:	438a      	bics	r2, r1
 8007f96:	609a      	str	r2, [r3, #8]
 8007f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	f383 8810 	msr	PRIMASK, r3
}
 8007fa2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2284      	movs	r2, #132	; 0x84
 8007fa8:	2120      	movs	r1, #32
 8007faa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2288      	movs	r2, #136	; 0x88
 8007fb0:	2120      	movs	r1, #32
 8007fb2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2280      	movs	r2, #128	; 0x80
 8007fb8:	2100      	movs	r1, #0
 8007fba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e069      	b.n	8008094 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2204      	movs	r2, #4
 8007fc8:	4013      	ands	r3, r2
 8007fca:	d052      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69da      	ldr	r2, [r3, #28]
 8007fd2:	2380      	movs	r3, #128	; 0x80
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	401a      	ands	r2, r3
 8007fd8:	2380      	movs	r3, #128	; 0x80
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d148      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	0112      	lsls	r2, r2, #4
 8007fe8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fea:	f3ef 8310 	mrs	r3, PRIMASK
 8007fee:	613b      	str	r3, [r7, #16]
  return(result);
 8007ff0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f383 8810 	msr	PRIMASK, r3
}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4924      	ldr	r1, [pc, #144]	; (800809c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800800c:	400a      	ands	r2, r1
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008012:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f383 8810 	msr	PRIMASK, r3
}
 800801a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801c:	f3ef 8310 	mrs	r3, PRIMASK
 8008020:	61fb      	str	r3, [r7, #28]
  return(result);
 8008022:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008024:	64bb      	str	r3, [r7, #72]	; 0x48
 8008026:	2301      	movs	r3, #1
 8008028:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	f383 8810 	msr	PRIMASK, r3
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2101      	movs	r1, #1
 800803e:	438a      	bics	r2, r1
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	f383 8810 	msr	PRIMASK, r3
}
 800804c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2284      	movs	r2, #132	; 0x84
 8008052:	2120      	movs	r1, #32
 8008054:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2288      	movs	r2, #136	; 0x88
 800805a:	2120      	movs	r1, #32
 800805c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	228c      	movs	r2, #140	; 0x8c
 8008062:	2120      	movs	r1, #32
 8008064:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2280      	movs	r2, #128	; 0x80
 800806a:	2100      	movs	r1, #0
 800806c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e010      	b.n	8008094 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	425a      	negs	r2, r3
 8008082:	4153      	adcs	r3, r2
 8008084:	b2db      	uxtb	r3, r3
 8008086:	001a      	movs	r2, r3
 8008088:	1dfb      	adds	r3, r7, #7
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d100      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0x182>
 8008090:	e747      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	0018      	movs	r0, r3
 8008096:	46bd      	mov	sp, r7
 8008098:	b014      	add	sp, #80	; 0x50
 800809a:	bd80      	pop	{r7, pc}
 800809c:	fffffe5f 	.word	0xfffffe5f

080080a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2280      	movs	r2, #128	; 0x80
 80080ac:	5c9b      	ldrb	r3, [r3, r2]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e027      	b.n	8008106 <HAL_UARTEx_DisableFifoMode+0x66>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2280      	movs	r2, #128	; 0x80
 80080ba:	2101      	movs	r1, #1
 80080bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2284      	movs	r2, #132	; 0x84
 80080c2:	2124      	movs	r1, #36	; 0x24
 80080c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2101      	movs	r1, #1
 80080da:	438a      	bics	r2, r1
 80080dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a0b      	ldr	r2, [pc, #44]	; (8008110 <HAL_UARTEx_DisableFifoMode+0x70>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2284      	movs	r2, #132	; 0x84
 80080f8:	2120      	movs	r1, #32
 80080fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2280      	movs	r2, #128	; 0x80
 8008100:	2100      	movs	r1, #0
 8008102:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	0018      	movs	r0, r3
 8008108:	46bd      	mov	sp, r7
 800810a:	b004      	add	sp, #16
 800810c:	bd80      	pop	{r7, pc}
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	dfffffff 	.word	0xdfffffff

08008114 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2280      	movs	r2, #128	; 0x80
 8008122:	5c9b      	ldrb	r3, [r3, r2]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008128:	2302      	movs	r3, #2
 800812a:	e02e      	b.n	800818a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2280      	movs	r2, #128	; 0x80
 8008130:	2101      	movs	r1, #1
 8008132:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2284      	movs	r2, #132	; 0x84
 8008138:	2124      	movs	r1, #36	; 0x24
 800813a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2101      	movs	r1, #1
 8008150:	438a      	bics	r2, r1
 8008152:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	08d9      	lsrs	r1, r3, #3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	0018      	movs	r0, r3
 800816c:	f000 f854 	bl	8008218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2284      	movs	r2, #132	; 0x84
 800817c:	2120      	movs	r1, #32
 800817e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2280      	movs	r2, #128	; 0x80
 8008184:	2100      	movs	r1, #0
 8008186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	b004      	add	sp, #16
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	5c9b      	ldrb	r3, [r3, r2]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e02f      	b.n	800820c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2280      	movs	r2, #128	; 0x80
 80081b0:	2101      	movs	r1, #1
 80081b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2284      	movs	r2, #132	; 0x84
 80081b8:	2124      	movs	r1, #36	; 0x24
 80081ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2101      	movs	r1, #1
 80081d0:	438a      	bics	r2, r1
 80081d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	4a0e      	ldr	r2, [pc, #56]	; (8008214 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80081dc:	4013      	ands	r3, r2
 80081de:	0019      	movs	r1, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	0018      	movs	r0, r3
 80081ee:	f000 f813 	bl	8008218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2284      	movs	r2, #132	; 0x84
 80081fe:	2120      	movs	r1, #32
 8008200:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2280      	movs	r2, #128	; 0x80
 8008206:	2100      	movs	r1, #0
 8008208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	0018      	movs	r0, r3
 800820e:	46bd      	mov	sp, r7
 8008210:	b004      	add	sp, #16
 8008212:	bd80      	pop	{r7, pc}
 8008214:	f1ffffff 	.word	0xf1ffffff

08008218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008224:	2b00      	cmp	r3, #0
 8008226:	d108      	bne.n	800823a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	226a      	movs	r2, #106	; 0x6a
 800822c:	2101      	movs	r1, #1
 800822e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2268      	movs	r2, #104	; 0x68
 8008234:	2101      	movs	r1, #1
 8008236:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008238:	e043      	b.n	80082c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800823a:	260f      	movs	r6, #15
 800823c:	19bb      	adds	r3, r7, r6
 800823e:	2208      	movs	r2, #8
 8008240:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008242:	200e      	movs	r0, #14
 8008244:	183b      	adds	r3, r7, r0
 8008246:	2208      	movs	r2, #8
 8008248:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	0e5b      	lsrs	r3, r3, #25
 8008252:	b2da      	uxtb	r2, r3
 8008254:	240d      	movs	r4, #13
 8008256:	193b      	adds	r3, r7, r4
 8008258:	2107      	movs	r1, #7
 800825a:	400a      	ands	r2, r1
 800825c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	0f5b      	lsrs	r3, r3, #29
 8008266:	b2da      	uxtb	r2, r3
 8008268:	250c      	movs	r5, #12
 800826a:	197b      	adds	r3, r7, r5
 800826c:	2107      	movs	r1, #7
 800826e:	400a      	ands	r2, r1
 8008270:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008272:	183b      	adds	r3, r7, r0
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	197a      	adds	r2, r7, r5
 8008278:	7812      	ldrb	r2, [r2, #0]
 800827a:	4914      	ldr	r1, [pc, #80]	; (80082cc <UARTEx_SetNbDataToProcess+0xb4>)
 800827c:	5c8a      	ldrb	r2, [r1, r2]
 800827e:	435a      	muls	r2, r3
 8008280:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008282:	197b      	adds	r3, r7, r5
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	4a12      	ldr	r2, [pc, #72]	; (80082d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008288:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800828a:	0019      	movs	r1, r3
 800828c:	f7f7 ffd0 	bl	8000230 <__divsi3>
 8008290:	0003      	movs	r3, r0
 8008292:	b299      	uxth	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	226a      	movs	r2, #106	; 0x6a
 8008298:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800829a:	19bb      	adds	r3, r7, r6
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	193a      	adds	r2, r7, r4
 80082a0:	7812      	ldrb	r2, [r2, #0]
 80082a2:	490a      	ldr	r1, [pc, #40]	; (80082cc <UARTEx_SetNbDataToProcess+0xb4>)
 80082a4:	5c8a      	ldrb	r2, [r1, r2]
 80082a6:	435a      	muls	r2, r3
 80082a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80082aa:	193b      	adds	r3, r7, r4
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	4a08      	ldr	r2, [pc, #32]	; (80082d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80082b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082b2:	0019      	movs	r1, r3
 80082b4:	f7f7 ffbc 	bl	8000230 <__divsi3>
 80082b8:	0003      	movs	r3, r0
 80082ba:	b299      	uxth	r1, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2268      	movs	r2, #104	; 0x68
 80082c0:	5299      	strh	r1, [r3, r2]
}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b005      	add	sp, #20
 80082c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	080103b8 	.word	0x080103b8
 80082d0:	080103c0 	.word	0x080103c0

080082d4 <LEDmultiplexing>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	0018      	movs	r0, r3
 80082e0:	f000 f9ba 	bl	8008658 <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2265      	movs	r2, #101	; 0x65
 80082e8:	5c9a      	ldrb	r2, [r3, r2]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	0011      	movs	r1, r2
 80082ee:	0018      	movs	r0, r3
 80082f0:	f000 f970 	bl	80085d4 <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2265      	movs	r2, #101	; 0x65
 80082f8:	5c9b      	ldrb	r3, [r3, r2]
 80082fa:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2260      	movs	r2, #96	; 0x60
 8008300:	185b      	adds	r3, r3, r1
 8008302:	189b      	adds	r3, r3, r2
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	0011      	movs	r1, r2
 800830a:	0018      	movs	r0, r3
 800830c:	f000 fa10 	bl	8008730 <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2264      	movs	r2, #100	; 0x64
 8008314:	5c9a      	ldrb	r2, [r3, r2]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2165      	movs	r1, #101	; 0x65
 800831a:	5c5b      	ldrb	r3, [r3, r1]
 800831c:	429a      	cmp	r2, r3
 800831e:	d107      	bne.n	8008330 <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008328:	2200      	movs	r2, #0
 800832a:	0019      	movs	r1, r3
 800832c:	f7fc fbb9 	bl	8004aa2 <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2265      	movs	r2, #101	; 0x65
 8008334:	5c9b      	ldrb	r3, [r3, r2]
 8008336:	3301      	adds	r3, #1
 8008338:	b2d9      	uxtb	r1, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2265      	movs	r2, #101	; 0x65
 800833e:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2265      	movs	r2, #101	; 0x65
 8008344:	5c9b      	ldrb	r3, [r3, r2]
 8008346:	2b03      	cmp	r3, #3
 8008348:	d903      	bls.n	8008352 <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2265      	movs	r2, #101	; 0x65
 800834e:	2100      	movs	r1, #0
 8008350:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	226c      	movs	r2, #108	; 0x6c
 8008356:	5a9b      	ldrh	r3, [r3, r2]
 8008358:	3301      	adds	r3, #1
 800835a:	b299      	uxth	r1, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	226c      	movs	r2, #108	; 0x6c
 8008360:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	226c      	movs	r2, #108	; 0x6c
 8008366:	5a9b      	ldrh	r3, [r3, r2]
 8008368:	2105      	movs	r1, #5
 800836a:	0018      	movs	r0, r3
 800836c:	f7f7 ff5c 	bl	8000228 <__aeabi_uidivmod>
 8008370:	000b      	movs	r3, r1
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d000      	beq.n	800837a <LEDmultiplexing+0xa6>
 8008378:	e0a2      	b.n	80084c0 <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2267      	movs	r2, #103	; 0x67
 800837e:	5c9b      	ldrb	r3, [r3, r2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d100      	bne.n	8008386 <LEDmultiplexing+0xb2>
 8008384:	e09c      	b.n	80084c0 <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2267      	movs	r2, #103	; 0x67
 800838a:	5c9b      	ldrb	r3, [r3, r2]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d13f      	bne.n	8008410 <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8008390:	230f      	movs	r3, #15
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	2203      	movs	r2, #3
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e015      	b.n	80083c6 <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 800839a:	240f      	movs	r4, #15
 800839c:	193b      	adds	r3, r7, r4
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	1e5a      	subs	r2, r3, #1
 80083a2:	193b      	adds	r3, r7, r4
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	2060      	movs	r0, #96	; 0x60
 80083aa:	188a      	adds	r2, r1, r2
 80083ac:	1812      	adds	r2, r2, r0
 80083ae:	7810      	ldrb	r0, [r2, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	2160      	movs	r1, #96	; 0x60
 80083b4:	18d3      	adds	r3, r2, r3
 80083b6:	185b      	adds	r3, r3, r1
 80083b8:	1c02      	adds	r2, r0, #0
 80083ba:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 80083bc:	193b      	adds	r3, r7, r4
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	193b      	adds	r3, r7, r4
 80083c2:	3a01      	subs	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
 80083c6:	230f      	movs	r3, #15
 80083c8:	18fb      	adds	r3, r7, r3
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e4      	bne.n	800839a <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2266      	movs	r2, #102	; 0x66
 80083d4:	5c9b      	ldrb	r3, [r3, r2]
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d80c      	bhi.n	80083f4 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2266      	movs	r2, #102	; 0x66
 80083de:	5c9b      	ldrb	r3, [r3, r2]
 80083e0:	0019      	movs	r1, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2268      	movs	r2, #104	; 0x68
 80083e6:	185b      	adds	r3, r3, r1
 80083e8:	189b      	adds	r3, r3, r2
 80083ea:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2260      	movs	r2, #96	; 0x60
 80083f0:	5499      	strb	r1, [r3, r2]
 80083f2:	e00d      	b.n	8008410 <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2266      	movs	r2, #102	; 0x66
 80083f8:	5c9b      	ldrb	r3, [r3, r2]
 80083fa:	001a      	movs	r2, r3
 80083fc:	2307      	movs	r3, #7
 80083fe:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	216e      	movs	r1, #110	; 0x6e
 8008404:	18d3      	adds	r3, r2, r3
 8008406:	185b      	adds	r3, r3, r1
 8008408:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2260      	movs	r2, #96	; 0x60
 800840e:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2267      	movs	r2, #103	; 0x67
 8008414:	5c9b      	ldrb	r3, [r3, r2]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d13d      	bne.n	8008496 <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 800841a:	230e      	movs	r3, #14
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	e015      	b.n	8008450 <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 8008424:	240e      	movs	r4, #14
 8008426:	193b      	adds	r3, r7, r4
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	193b      	adds	r3, r7, r4
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	2060      	movs	r0, #96	; 0x60
 8008434:	188a      	adds	r2, r1, r2
 8008436:	1812      	adds	r2, r2, r0
 8008438:	7810      	ldrb	r0, [r2, #0]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	2160      	movs	r1, #96	; 0x60
 800843e:	18d3      	adds	r3, r2, r3
 8008440:	185b      	adds	r3, r3, r1
 8008442:	1c02      	adds	r2, r0, #0
 8008444:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 8008446:	193b      	adds	r3, r7, r4
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	193b      	adds	r3, r7, r4
 800844c:	3201      	adds	r2, #1
 800844e:	701a      	strb	r2, [r3, #0]
 8008450:	230e      	movs	r3, #14
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d9e4      	bls.n	8008424 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2266      	movs	r2, #102	; 0x66
 800845e:	5c9b      	ldrb	r3, [r3, r2]
 8008460:	2b03      	cmp	r3, #3
 8008462:	d80c      	bhi.n	800847e <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2266      	movs	r2, #102	; 0x66
 8008468:	5c9b      	ldrb	r3, [r3, r2]
 800846a:	0019      	movs	r1, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2268      	movs	r2, #104	; 0x68
 8008470:	185b      	adds	r3, r3, r1
 8008472:	189b      	adds	r3, r3, r2
 8008474:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2263      	movs	r2, #99	; 0x63
 800847a:	5499      	strb	r1, [r3, r2]
 800847c:	e00b      	b.n	8008496 <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2266      	movs	r2, #102	; 0x66
 8008482:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 8008484:	3b04      	subs	r3, #4
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	216e      	movs	r1, #110	; 0x6e
 800848a:	18d3      	adds	r3, r2, r3
 800848c:	185b      	adds	r3, r3, r1
 800848e:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2263      	movs	r2, #99	; 0x63
 8008494:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2266      	movs	r2, #102	; 0x66
 800849a:	5c9b      	ldrb	r3, [r3, r2]
 800849c:	3301      	adds	r3, #1
 800849e:	b2d9      	uxtb	r1, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2266      	movs	r2, #102	; 0x66
 80084a4:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2266      	movs	r2, #102	; 0x66
 80084aa:	5c9b      	ldrb	r3, [r3, r2]
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d907      	bls.n	80084c0 <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2266      	movs	r2, #102	; 0x66
 80084b4:	2100      	movs	r1, #0
 80084b6:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2267      	movs	r2, #103	; 0x67
 80084bc:	2100      	movs	r1, #0
 80084be:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b005      	add	sp, #20
 80084c6:	bd90      	pop	{r4, r7, pc}

080084c8 <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	000a      	movs	r2, r1
 80084d2:	1cfb      	adds	r3, r7, #3
 80084d4:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	1cfa      	adds	r2, r7, #3
 80084da:	2167      	movs	r1, #103	; 0x67
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2266      	movs	r2, #102	; 0x66
 80084e4:	2100      	movs	r1, #0
 80084e6:	5499      	strb	r1, [r3, r2]

}
 80084e8:	46c0      	nop			; (mov r8, r8)
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b002      	add	sp, #8
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	000a      	movs	r2, r1
 80084fa:	1cfb      	adds	r3, r7, #3
 80084fc:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 80084fe:	1cfb      	adds	r3, r7, #3
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d108      	bne.n	8008518 <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6858      	ldr	r0, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	0019      	movs	r1, r3
 8008512:	f7fc fac6 	bl	8004aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 8008516:	e059      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 8008518:	1cfb      	adds	r3, r7, #3
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d108      	bne.n	8008532 <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68d8      	ldr	r0, [r3, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	891b      	ldrh	r3, [r3, #8]
 8008528:	2200      	movs	r2, #0
 800852a:	0019      	movs	r1, r3
 800852c:	f7fc fab9 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 8008530:	e04c      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 8008532:	1cfb      	adds	r3, r7, #3
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b03      	cmp	r3, #3
 8008538:	d108      	bne.n	800854c <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6958      	ldr	r0, [r3, #20]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	8a1b      	ldrh	r3, [r3, #16]
 8008542:	2200      	movs	r2, #0
 8008544:	0019      	movs	r1, r3
 8008546:	f7fc faac 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 800854a:	e03f      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 800854c:	1cfb      	adds	r3, r7, #3
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b04      	cmp	r3, #4
 8008552:	d108      	bne.n	8008566 <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69d8      	ldr	r0, [r3, #28]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8b1b      	ldrh	r3, [r3, #24]
 800855c:	2200      	movs	r2, #0
 800855e:	0019      	movs	r1, r3
 8008560:	f7fc fa9f 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 8008564:	e032      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 8008566:	1cfb      	adds	r3, r7, #3
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b05      	cmp	r3, #5
 800856c:	d108      	bne.n	8008580 <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8c1b      	ldrh	r3, [r3, #32]
 8008576:	2200      	movs	r2, #0
 8008578:	0019      	movs	r1, r3
 800857a:	f7fc fa92 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 800857e:	e025      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 8008580:	1cfb      	adds	r3, r7, #3
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b06      	cmp	r3, #6
 8008586:	d108      	bne.n	800859a <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008590:	2200      	movs	r2, #0
 8008592:	0019      	movs	r1, r3
 8008594:	f7fc fa85 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 8008598:	e018      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 800859a:	1cfb      	adds	r3, r7, #3
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b07      	cmp	r3, #7
 80085a0:	d108      	bne.n	80085b4 <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80085aa:	2200      	movs	r2, #0
 80085ac:	0019      	movs	r1, r3
 80085ae:	f7fc fa78 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 80085b2:	e00b      	b.n	80085cc <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 80085b4:	1cfb      	adds	r3, r7, #3
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d107      	bne.n	80085cc <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80085c4:	2200      	movs	r2, #0
 80085c6:	0019      	movs	r1, r3
 80085c8:	f7fc fa6b 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 80085cc:	46c0      	nop			; (mov r8, r8)
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b002      	add	sp, #8
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	000a      	movs	r2, r1
 80085de:	1cfb      	adds	r3, r7, #3
 80085e0:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 80085e2:	1cfb      	adds	r3, r7, #3
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2240      	movs	r2, #64	; 0x40
 80085f2:	5a9b      	ldrh	r3, [r3, r2]
 80085f4:	2200      	movs	r2, #0
 80085f6:	0019      	movs	r1, r3
 80085f8:	f7fc fa53 	bl	8004aa2 <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 80085fc:	e028      	b.n	8008650 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 80085fe:	1cfb      	adds	r3, r7, #3
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d109      	bne.n	800861a <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2248      	movs	r2, #72	; 0x48
 800860e:	5a9b      	ldrh	r3, [r3, r2]
 8008610:	2200      	movs	r2, #0
 8008612:	0019      	movs	r1, r3
 8008614:	f7fc fa45 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 8008618:	e01a      	b.n	8008650 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 800861a:	1cfb      	adds	r3, r7, #3
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d109      	bne.n	8008636 <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2250      	movs	r2, #80	; 0x50
 800862a:	5a9b      	ldrh	r3, [r3, r2]
 800862c:	2200      	movs	r2, #0
 800862e:	0019      	movs	r1, r3
 8008630:	f7fc fa37 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 8008634:	e00c      	b.n	8008650 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 8008636:	1cfb      	adds	r3, r7, #3
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b03      	cmp	r3, #3
 800863c:	d108      	bne.n	8008650 <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2258      	movs	r2, #88	; 0x58
 8008646:	5a9b      	ldrh	r3, [r3, r2]
 8008648:	2200      	movs	r2, #0
 800864a:	0019      	movs	r1, r3
 800864c:	f7fc fa29 	bl	8004aa2 <HAL_GPIO_WritePin>
}
 8008650:	46c0      	nop			; (mov r8, r8)
 8008652:	46bd      	mov	sp, r7
 8008654:	b002      	add	sp, #8
 8008656:	bd80      	pop	{r7, pc}

08008658 <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2240      	movs	r2, #64	; 0x40
 8008668:	5a9b      	ldrh	r3, [r3, r2]
 800866a:	2201      	movs	r2, #1
 800866c:	0019      	movs	r1, r3
 800866e:	f7fc fa18 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_FIELD_OFF);
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2248      	movs	r2, #72	; 0x48
 800867a:	5a9b      	ldrh	r3, [r3, r2]
 800867c:	2201      	movs	r2, #1
 800867e:	0019      	movs	r1, r3
 8008680:	f7fc fa0f 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_FIELD_OFF);
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2250      	movs	r2, #80	; 0x50
 800868c:	5a9b      	ldrh	r3, [r3, r2]
 800868e:	2201      	movs	r2, #1
 8008690:	0019      	movs	r1, r3
 8008692:	f7fc fa06 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_FIELD_OFF);
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2258      	movs	r2, #88	; 0x58
 800869e:	5a9b      	ldrh	r3, [r3, r2]
 80086a0:	2201      	movs	r2, #1
 80086a2:	0019      	movs	r1, r3
 80086a4:	f7fc f9fd 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_FIELD_OFF);
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6858      	ldr	r0, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	2201      	movs	r2, #1
 80086b2:	0019      	movs	r1, r3
 80086b4:	f7fc f9f5 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68d8      	ldr	r0, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	891b      	ldrh	r3, [r3, #8]
 80086c0:	2201      	movs	r2, #1
 80086c2:	0019      	movs	r1, r3
 80086c4:	f7fc f9ed 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6958      	ldr	r0, [r3, #20]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8a1b      	ldrh	r3, [r3, #16]
 80086d0:	2201      	movs	r2, #1
 80086d2:	0019      	movs	r1, r3
 80086d4:	f7fc f9e5 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	69d8      	ldr	r0, [r3, #28]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	8b1b      	ldrh	r3, [r3, #24]
 80086e0:	2201      	movs	r2, #1
 80086e2:	0019      	movs	r1, r3
 80086e4:	f7fc f9dd 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8c1b      	ldrh	r3, [r3, #32]
 80086f0:	2201      	movs	r2, #1
 80086f2:	0019      	movs	r1, r3
 80086f4:	f7fc f9d5 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008700:	2201      	movs	r2, #1
 8008702:	0019      	movs	r1, r3
 8008704:	f7fc f9cd 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008710:	2201      	movs	r2, #1
 8008712:	0019      	movs	r1, r3
 8008714:	f7fc f9c5 	bl	8004aa2 <HAL_GPIO_WritePin>
			LED_SEGMENT_OFF);
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008720:	2201      	movs	r2, #1
 8008722:	0019      	movs	r1, r3
 8008724:	f7fc f9bd 	bl	8004aa2 <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 8008728:	46c0      	nop			; (mov r8, r8)
 800872a:	46bd      	mov	sp, r7
 800872c:	b002      	add	sp, #8
 800872e:	bd80      	pop	{r7, pc}

08008730 <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	000a      	movs	r2, r1
 800873a:	1cfb      	adds	r3, r7, #3
 800873c:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 800873e:	1cfb      	adds	r3, r7, #3
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b2f      	cmp	r3, #47	; 0x2f
 8008744:	d800      	bhi.n	8008748 <_LEDwriteCharacter+0x18>
 8008746:	e10f      	b.n	8008968 <_LEDwriteCharacter+0x238>
 8008748:	1cfb      	adds	r3, r7, #3
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b39      	cmp	r3, #57	; 0x39
 800874e:	d900      	bls.n	8008752 <_LEDwriteCharacter+0x22>
 8008750:	e10a      	b.n	8008968 <_LEDwriteCharacter+0x238>
		switch (character) {
 8008752:	1cfb      	adds	r3, r7, #3
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	3b30      	subs	r3, #48	; 0x30
 8008758:	2b09      	cmp	r3, #9
 800875a:	d900      	bls.n	800875e <_LEDwriteCharacter+0x2e>
 800875c:	e317      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
 800875e:	009a      	lsls	r2, r3, #2
 8008760:	4bea      	ldr	r3, [pc, #936]	; (8008b0c <_LEDwriteCharacter+0x3dc>)
 8008762:	18d3      	adds	r3, r2, r3
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2102      	movs	r1, #2
 800876c:	0018      	movs	r0, r3
 800876e:	f7ff febf 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2103      	movs	r1, #3
 8008776:	0018      	movs	r0, r3
 8008778:	f7ff feba 	bl	80084f0 <_LEDsegmentOn>
			break;
 800877c:	e0f3      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2101      	movs	r1, #1
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff feb4 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2102      	movs	r1, #2
 800878c:	0018      	movs	r0, r3
 800878e:	f7ff feaf 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2107      	movs	r1, #7
 8008796:	0018      	movs	r0, r3
 8008798:	f7ff feaa 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2105      	movs	r1, #5
 80087a0:	0018      	movs	r0, r3
 80087a2:	f7ff fea5 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2104      	movs	r1, #4
 80087aa:	0018      	movs	r0, r3
 80087ac:	f7ff fea0 	bl	80084f0 <_LEDsegmentOn>
			break;
 80087b0:	e0d9      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2101      	movs	r1, #1
 80087b6:	0018      	movs	r0, r3
 80087b8:	f7ff fe9a 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2102      	movs	r1, #2
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7ff fe95 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2107      	movs	r1, #7
 80087ca:	0018      	movs	r0, r3
 80087cc:	f7ff fe90 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2103      	movs	r1, #3
 80087d4:	0018      	movs	r0, r3
 80087d6:	f7ff fe8b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2104      	movs	r1, #4
 80087de:	0018      	movs	r0, r3
 80087e0:	f7ff fe86 	bl	80084f0 <_LEDsegmentOn>
			break;
 80087e4:	e0bf      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2106      	movs	r1, #6
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7ff fe80 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2107      	movs	r1, #7
 80087f4:	0018      	movs	r0, r3
 80087f6:	f7ff fe7b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2102      	movs	r1, #2
 80087fe:	0018      	movs	r0, r3
 8008800:	f7ff fe76 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2103      	movs	r1, #3
 8008808:	0018      	movs	r0, r3
 800880a:	f7ff fe71 	bl	80084f0 <_LEDsegmentOn>
			break;
 800880e:	e0aa      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2101      	movs	r1, #1
 8008814:	0018      	movs	r0, r3
 8008816:	f7ff fe6b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2106      	movs	r1, #6
 800881e:	0018      	movs	r0, r3
 8008820:	f7ff fe66 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2107      	movs	r1, #7
 8008828:	0018      	movs	r0, r3
 800882a:	f7ff fe61 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2103      	movs	r1, #3
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff fe5c 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2104      	movs	r1, #4
 800883c:	0018      	movs	r0, r3
 800883e:	f7ff fe57 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008842:	e090      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2101      	movs	r1, #1
 8008848:	0018      	movs	r0, r3
 800884a:	f7ff fe51 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2103      	movs	r1, #3
 8008852:	0018      	movs	r0, r3
 8008854:	f7ff fe4c 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2104      	movs	r1, #4
 800885c:	0018      	movs	r0, r3
 800885e:	f7ff fe47 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2105      	movs	r1, #5
 8008866:	0018      	movs	r0, r3
 8008868:	f7ff fe42 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2106      	movs	r1, #6
 8008870:	0018      	movs	r0, r3
 8008872:	f7ff fe3d 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2107      	movs	r1, #7
 800887a:	0018      	movs	r0, r3
 800887c:	f7ff fe38 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008880:	e071      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2101      	movs	r1, #1
 8008886:	0018      	movs	r0, r3
 8008888:	f7ff fe32 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2102      	movs	r1, #2
 8008890:	0018      	movs	r0, r3
 8008892:	f7ff fe2d 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2103      	movs	r1, #3
 800889a:	0018      	movs	r0, r3
 800889c:	f7ff fe28 	bl	80084f0 <_LEDsegmentOn>
			break;
 80088a0:	e061      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2101      	movs	r1, #1
 80088a6:	0018      	movs	r0, r3
 80088a8:	f7ff fe22 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2102      	movs	r1, #2
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7ff fe1d 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2103      	movs	r1, #3
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7ff fe18 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2104      	movs	r1, #4
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7ff fe13 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2105      	movs	r1, #5
 80088ce:	0018      	movs	r0, r3
 80088d0:	f7ff fe0e 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2106      	movs	r1, #6
 80088d8:	0018      	movs	r0, r3
 80088da:	f7ff fe09 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2107      	movs	r1, #7
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7ff fe04 	bl	80084f0 <_LEDsegmentOn>
			break;
 80088e8:	e03d      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2101      	movs	r1, #1
 80088ee:	0018      	movs	r0, r3
 80088f0:	f7ff fdfe 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2102      	movs	r1, #2
 80088f8:	0018      	movs	r0, r3
 80088fa:	f7ff fdf9 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2103      	movs	r1, #3
 8008902:	0018      	movs	r0, r3
 8008904:	f7ff fdf4 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2104      	movs	r1, #4
 800890c:	0018      	movs	r0, r3
 800890e:	f7ff fdef 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2106      	movs	r1, #6
 8008916:	0018      	movs	r0, r3
 8008918:	f7ff fdea 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2107      	movs	r1, #7
 8008920:	0018      	movs	r0, r3
 8008922:	f7ff fde5 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008926:	e01e      	b.n	8008966 <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2101      	movs	r1, #1
 800892c:	0018      	movs	r0, r3
 800892e:	f7ff fddf 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2102      	movs	r1, #2
 8008936:	0018      	movs	r0, r3
 8008938:	f7ff fdda 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2103      	movs	r1, #3
 8008940:	0018      	movs	r0, r3
 8008942:	f7ff fdd5 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2104      	movs	r1, #4
 800894a:	0018      	movs	r0, r3
 800894c:	f7ff fdd0 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2105      	movs	r1, #5
 8008954:	0018      	movs	r0, r3
 8008956:	f7ff fdcb 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2106      	movs	r1, #6
 800895e:	0018      	movs	r0, r3
 8008960:	f7ff fdc6 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008964:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 8008966:	e212      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		}
	} else {
		switch (character) {
 8008968:	1cfb      	adds	r3, r7, #3
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	3b2d      	subs	r3, #45	; 0x2d
 800896e:	2b47      	cmp	r3, #71	; 0x47
 8008970:	d900      	bls.n	8008974 <_LEDwriteCharacter+0x244>
 8008972:	e20c      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
 8008974:	009a      	lsls	r2, r3, #2
 8008976:	4b66      	ldr	r3, [pc, #408]	; (8008b10 <_LEDwriteCharacter+0x3e0>)
 8008978:	18d3      	adds	r3, r2, r3
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2101      	movs	r1, #1
 8008982:	0018      	movs	r0, r3
 8008984:	f7ff fdb4 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2102      	movs	r1, #2
 800898c:	0018      	movs	r0, r3
 800898e:	f7ff fdaf 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2103      	movs	r1, #3
 8008996:	0018      	movs	r0, r3
 8008998:	f7ff fdaa 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2105      	movs	r1, #5
 80089a0:	0018      	movs	r0, r3
 80089a2:	f7ff fda5 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2106      	movs	r1, #6
 80089aa:	0018      	movs	r0, r3
 80089ac:	f7ff fda0 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2107      	movs	r1, #7
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7ff fd9b 	bl	80084f0 <_LEDsegmentOn>
			break;
 80089ba:	e1e8      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2103      	movs	r1, #3
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7ff fd95 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2104      	movs	r1, #4
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7ff fd90 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2105      	movs	r1, #5
 80089d4:	0018      	movs	r0, r3
 80089d6:	f7ff fd8b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2106      	movs	r1, #6
 80089de:	0018      	movs	r0, r3
 80089e0:	f7ff fd86 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2107      	movs	r1, #7
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7ff fd81 	bl	80084f0 <_LEDsegmentOn>
			break;
 80089ee:	e1ce      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2101      	movs	r1, #1
 80089f4:	0018      	movs	r0, r3
 80089f6:	f7ff fd7b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2104      	movs	r1, #4
 80089fe:	0018      	movs	r0, r3
 8008a00:	f7ff fd76 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2105      	movs	r1, #5
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f7ff fd71 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2106      	movs	r1, #6
 8008a12:	0018      	movs	r0, r3
 8008a14:	f7ff fd6c 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008a18:	e1b9      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2104      	movs	r1, #4
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f7ff fd66 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2105      	movs	r1, #5
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f7ff fd61 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2107      	movs	r1, #7
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7ff fd5c 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008a38:	e1a9      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f7ff fd56 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2102      	movs	r1, #2
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f7ff fd51 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2103      	movs	r1, #3
 8008a52:	0018      	movs	r0, r3
 8008a54:	f7ff fd4c 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7ff fd47 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2105      	movs	r1, #5
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7ff fd42 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2106      	movs	r1, #6
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff fd3d 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008a76:	e18a      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7ff fd37 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2103      	movs	r1, #3
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7ff fd32 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2104      	movs	r1, #4
 8008a90:	0018      	movs	r0, r3
 8008a92:	f7ff fd2d 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2105      	movs	r1, #5
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f7ff fd28 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2107      	movs	r1, #7
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff fd23 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008aaa:	e170      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2101      	movs	r1, #1
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f7ff fd1d 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2104      	movs	r1, #4
 8008aba:	0018      	movs	r0, r3
 8008abc:	f7ff fd18 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2105      	movs	r1, #5
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f7ff fd13 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2106      	movs	r1, #6
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7ff fd0e 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2107      	movs	r1, #7
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fd09 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008ade:	e156      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7ff fd03 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2105      	movs	r1, #5
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7ff fcfe 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2106      	movs	r1, #6
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff fcf9 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2107      	movs	r1, #7
 8008b02:	0018      	movs	r0, r3
 8008b04:	f7ff fcf4 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008b08:	e141      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	080103c8 	.word	0x080103c8
 8008b10:	080103f0 	.word	0x080103f0
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2102      	movs	r1, #2
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f7ff fce9 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2103      	movs	r1, #3
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7ff fce4 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2105      	movs	r1, #5
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff fcdf 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2106      	movs	r1, #6
 8008b36:	0018      	movs	r0, r3
 8008b38:	f7ff fcda 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2107      	movs	r1, #7
 8008b40:	0018      	movs	r0, r3
 8008b42:	f7ff fcd5 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008b46:	e122      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2103      	movs	r1, #3
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f7ff fccf 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2105      	movs	r1, #5
 8008b56:	0018      	movs	r0, r3
 8008b58:	f7ff fcca 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2106      	movs	r1, #6
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7ff fcc5 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2107      	movs	r1, #7
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f7ff fcc0 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008b70:	e10d      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2102      	movs	r1, #2
 8008b76:	0018      	movs	r0, r3
 8008b78:	f7ff fcba 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2103      	movs	r1, #3
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff fcb5 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2104      	movs	r1, #4
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7ff fcb0 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008b90:	e0fd      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2104      	movs	r1, #4
 8008b96:	0018      	movs	r0, r3
 8008b98:	f7ff fcaa 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2105      	movs	r1, #5
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7ff fca5 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2106      	movs	r1, #6
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7ff fca0 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008bb0:	e0ed      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'n':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2107      	movs	r1, #7
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f7ff fc9a 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2103      	movs	r1, #3
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7ff fc95 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2105      	movs	r1, #5
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f7ff fc90 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008bd0:	e0dd      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7ff fc8a 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2102      	movs	r1, #2
 8008be0:	0018      	movs	r0, r3
 8008be2:	f7ff fc85 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2103      	movs	r1, #3
 8008bea:	0018      	movs	r0, r3
 8008bec:	f7ff fc80 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2104      	movs	r1, #4
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7ff fc7b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2105      	movs	r1, #5
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f7ff fc76 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2106      	movs	r1, #6
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f7ff fc71 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008c0e:	e0be      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2103      	movs	r1, #3
 8008c14:	0018      	movs	r0, r3
 8008c16:	f7ff fc6b 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2104      	movs	r1, #4
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff fc66 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2105      	movs	r1, #5
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f7ff fc61 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2107      	movs	r1, #7
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff fc5c 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008c38:	e0a9      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f7ff fc56 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2102      	movs	r1, #2
 8008c48:	0018      	movs	r0, r3
 8008c4a:	f7ff fc51 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2105      	movs	r1, #5
 8008c52:	0018      	movs	r0, r3
 8008c54:	f7ff fc4c 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2106      	movs	r1, #6
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f7ff fc47 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2107      	movs	r1, #7
 8008c66:	0018      	movs	r0, r3
 8008c68:	f7ff fc42 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008c6c:	e08f      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2105      	movs	r1, #5
 8008c72:	0018      	movs	r0, r3
 8008c74:	f7ff fc3c 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2107      	movs	r1, #7
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f7ff fc37 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008c82:	e084      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2101      	movs	r1, #1
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7ff fc31 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2106      	movs	r1, #6
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7ff fc2c 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2107      	movs	r1, #7
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f7ff fc27 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2103      	movs	r1, #3
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f7ff fc22 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2104      	movs	r1, #4
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f7ff fc1d 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008cb6:	e06a      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2105      	movs	r1, #5
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f7ff fc17 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2106      	movs	r1, #6
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f7ff fc12 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2107      	movs	r1, #7
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f7ff fc0d 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008cd6:	e05a      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2102      	movs	r1, #2
 8008cdc:	0018      	movs	r0, r3
 8008cde:	f7ff fc07 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2103      	movs	r1, #3
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7ff fc02 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2104      	movs	r1, #4
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	f7ff fbfd 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2105      	movs	r1, #5
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	f7ff fbf8 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2106      	movs	r1, #6
 8008d04:	0018      	movs	r0, r3
 8008d06:	f7ff fbf3 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008d0a:	e040      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2107      	movs	r1, #7
 8008d10:	0018      	movs	r0, r3
 8008d12:	f7ff fbed 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008d16:	e03a      	b.n	8008d8e <_LEDwriteCharacter+0x65e>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2104      	movs	r1, #4
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f7ff fbe7 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008d22:	e034      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2101      	movs	r1, #1
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f7ff fbe1 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2102      	movs	r1, #2
 8008d32:	0018      	movs	r0, r3
 8008d34:	f7ff fbdc 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2106      	movs	r1, #6
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f7ff fbd7 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2107      	movs	r1, #7
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7ff fbd2 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008d4c:	e01f      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case '<':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2102      	movs	r1, #2
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7ff fbcc 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2103      	movs	r1, #3
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7ff fbc7 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2107      	movs	r1, #7
 8008d66:	0018      	movs	r0, r3
 8008d68:	f7ff fbc2 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008d6c:	e00f      	b.n	8008d8e <_LEDwriteCharacter+0x65e>

		case '>':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2106      	movs	r1, #6
 8008d72:	0018      	movs	r0, r3
 8008d74:	f7ff fbbc 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2105      	movs	r1, #5
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7ff fbb7 	bl	80084f0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2107      	movs	r1, #7
 8008d86:	0018      	movs	r0, r3
 8008d88:	f7ff fbb2 	bl	80084f0 <_LEDsegmentOn>
			break;
 8008d8c:	46c0      	nop			; (mov r8, r8)


		}
	}
}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	46bd      	mov	sp, r7
 8008d92:	b002      	add	sp, #8
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	46c0      	nop			; (mov r8, r8)

08008d98 <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	1dbb      	adds	r3, r7, #6
 8008da6:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1dba      	adds	r2, r7, #6
 8008db2:	2140      	movs	r1, #64	; 0x40
 8008db4:	8812      	ldrh	r2, [r2, #0]
 8008db6:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	2318      	movs	r3, #24
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	2148      	movs	r1, #72	; 0x48
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	18ba      	adds	r2, r7, r2
 8008dd6:	2150      	movs	r1, #80	; 0x50
 8008dd8:	8812      	ldrh	r2, [r2, #0]
 8008dda:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de0:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2228      	movs	r2, #40	; 0x28
 8008de6:	18ba      	adds	r2, r7, r2
 8008de8:	2158      	movs	r1, #88	; 0x58
 8008dea:	8812      	ldrh	r2, [r2, #0]
 8008dec:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df2:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2230      	movs	r2, #48	; 0x30
 8008df8:	18ba      	adds	r2, r7, r2
 8008dfa:	8812      	ldrh	r2, [r2, #0]
 8008dfc:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e02:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2238      	movs	r2, #56	; 0x38
 8008e08:	18ba      	adds	r2, r7, r2
 8008e0a:	8812      	ldrh	r2, [r2, #0]
 8008e0c:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e12:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2240      	movs	r2, #64	; 0x40
 8008e18:	18ba      	adds	r2, r7, r2
 8008e1a:	8812      	ldrh	r2, [r2, #0]
 8008e1c:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e22:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2248      	movs	r2, #72	; 0x48
 8008e28:	18ba      	adds	r2, r7, r2
 8008e2a:	8812      	ldrh	r2, [r2, #0]
 8008e2c:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2250      	movs	r2, #80	; 0x50
 8008e38:	18ba      	adds	r2, r7, r2
 8008e3a:	8812      	ldrh	r2, [r2, #0]
 8008e3c:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e42:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2240      	movs	r2, #64	; 0x40
 8008e48:	2118      	movs	r1, #24
 8008e4a:	468c      	mov	ip, r1
 8008e4c:	44bc      	add	ip, r7
 8008e4e:	4462      	add	r2, ip
 8008e50:	8812      	ldrh	r2, [r2, #0]
 8008e52:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e58:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2248      	movs	r2, #72	; 0x48
 8008e5e:	2118      	movs	r1, #24
 8008e60:	468c      	mov	ip, r1
 8008e62:	44bc      	add	ip, r7
 8008e64:	4462      	add	r2, ip
 8008e66:	8812      	ldrh	r2, [r2, #0]
 8008e68:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e6e:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2250      	movs	r2, #80	; 0x50
 8008e74:	2118      	movs	r1, #24
 8008e76:	468c      	mov	ip, r1
 8008e78:	44bc      	add	ip, r7
 8008e7a:	4462      	add	r2, ip
 8008e7c:	8812      	ldrh	r2, [r2, #0]
 8008e7e:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	0018      	movs	r0, r3
 8008e84:	f000 f82f 	bl	8008ee6 <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2265      	movs	r2, #101	; 0x65
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	5499      	strb	r1, [r3, r2]
}
 8008e90:	46c0      	nop			; (mov r8, r8)
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b004      	add	sp, #16
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char *separator) {
 8008e98:	b590      	push	{r4, r7, lr}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++) {
 8008ea2:	230f      	movs	r3, #15
 8008ea4:	18fb      	adds	r3, r7, r3
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e012      	b.n	8008ed2 <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 8008eac:	240f      	movs	r4, #15
 8008eae:	193b      	adds	r3, r7, r4
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	18d2      	adds	r2, r2, r3
 8008eb6:	193b      	adds	r3, r7, r4
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	7810      	ldrb	r0, [r2, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	2168      	movs	r1, #104	; 0x68
 8008ec0:	18d3      	adds	r3, r2, r3
 8008ec2:	185b      	adds	r3, r3, r1
 8008ec4:	1c02      	adds	r2, r0, #0
 8008ec6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++) {
 8008ec8:	193b      	adds	r3, r7, r4
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	193b      	adds	r3, r7, r4
 8008ece:	3201      	adds	r2, #1
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	230f      	movs	r3, #15
 8008ed4:	18fb      	adds	r3, r7, r3
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d9e7      	bls.n	8008eac <LEDseparator+0x14>
	}
}
 8008edc:	46c0      	nop			; (mov r8, r8)
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	b005      	add	sp, #20
 8008ee4:	bd90      	pop	{r4, r7, pc}

08008ee6 <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3360      	adds	r3, #96	; 0x60
 8008ef2:	2204      	movs	r2, #4
 8008ef4:	2120      	movs	r1, #32
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f006 f92d 	bl	800f156 <memset>
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2264      	movs	r2, #100	; 0x64
 8008f00:	2104      	movs	r1, #4
 8008f02:	5499      	strb	r1, [r3, r2]
	_LEDallOff(LEDdisplay);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	0018      	movs	r0, r3
 8008f08:	f7ff fba6 	bl	8008658 <_LEDallOff>
}
 8008f0c:	46c0      	nop			; (mov r8, r8)
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	b002      	add	sp, #8
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	0008      	movs	r0, r1
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	0019      	movs	r1, r3
 8008f22:	230b      	movs	r3, #11
 8008f24:	18fb      	adds	r3, r7, r3
 8008f26:	1c02      	adds	r2, r0, #0
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	230a      	movs	r3, #10
 8008f2c:	18fb      	adds	r3, r7, r3
 8008f2e:	1c0a      	adds	r2, r1, #0
 8008f30:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8008f32:	2317      	movs	r3, #23
 8008f34:	18fb      	adds	r3, r7, r3
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	e02f      	b.n	8008f9c <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 8008f3c:	230a      	movs	r3, #10
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10e      	bne.n	8008f64 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 8008f46:	2117      	movs	r1, #23
 8008f48:	187b      	adds	r3, r7, r1
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	18d2      	adds	r2, r2, r3
 8008f50:	187b      	adds	r3, r7, r1
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	7810      	ldrb	r0, [r2, #0]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	2160      	movs	r1, #96	; 0x60
 8008f5a:	18d3      	adds	r3, r2, r3
 8008f5c:	185b      	adds	r3, r3, r1
 8008f5e:	1c02      	adds	r2, r0, #0
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e015      	b.n	8008f90 <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8008f64:	2117      	movs	r1, #23
 8008f66:	187b      	adds	r3, r7, r1
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	18d2      	adds	r2, r2, r3
 8008f6e:	187b      	adds	r3, r7, r1
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	7810      	ldrb	r0, [r2, #0]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	216e      	movs	r1, #110	; 0x6e
 8008f78:	18d3      	adds	r3, r2, r3
 8008f7a:	185b      	adds	r3, r3, r1
 8008f7c:	1c02      	adds	r2, r0, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8008f80:	230a      	movs	r3, #10
 8008f82:	18fb      	adds	r3, r7, r3
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7ff fa9c 	bl	80084c8 <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8008f90:	2117      	movs	r1, #23
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	187b      	adds	r3, r7, r1
 8008f98:	3201      	adds	r2, #1
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	2317      	movs	r3, #23
 8008f9e:	18fb      	adds	r3, r7, r3
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d9ca      	bls.n	8008f3c <LEDstr+0x28>
		}

	}
}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	46c0      	nop			; (mov r8, r8)
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b006      	add	sp, #24
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	000a      	movs	r2, r1
 8008fba:	1cfb      	adds	r3, r7, #3
 8008fbc:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	1cfa      	adds	r2, r7, #3
 8008fc2:	2164      	movs	r1, #100	; 0x64
 8008fc4:	7812      	ldrb	r2, [r2, #0]
 8008fc6:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8008fc8:	46c0      	nop			; (mov r8, r8)
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	b002      	add	sp, #8
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <adcInit>:
 *
 * @param  adc handler
 *
 * @retval None
 */
void adcInit(ADC_HandleTypeDef *adcHandler){
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(adcHandler);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f7fb f8e0 	bl	80041a0 <HAL_ADCEx_Calibration_Start>
}
 8008fe0:	46c0      	nop			; (mov r8, r8)
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	b002      	add	sp, #8
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <backupInit>:
 *
 * @param  none
 *
 * @retval None
 */
void backupInit(void) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8008fec:	f7fb fa86 	bl	80044fc <HAL_FLASH_Unlock>

	eeStatus = EE_Format(EE_FORCED_ERASE);
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f001 fb8f 	bl	800a714 <EE_Format>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	4b16      	ldr	r3, [pc, #88]	; (8009054 <backupInit+0x6c>)
 8008ffc:	701a      	strb	r2, [r3, #0]
	eeStatus = EE_Init(EE_FORCED_ERASE);
 8008ffe:	2000      	movs	r0, #0
 8009000:	f000 fdfc 	bl	8009bfc <EE_Init>
 8009004:	0003      	movs	r3, r0
 8009006:	b2da      	uxtb	r2, r3
 8009008:	4b12      	ldr	r3, [pc, #72]	; (8009054 <backupInit+0x6c>)
 800900a:	701a      	strb	r2, [r3, #0]

	if (eeStatus != EE_OK) {
 800900c:	4b11      	ldr	r3, [pc, #68]	; (8009054 <backupInit+0x6c>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d019      	beq.n	8009048 <backupInit+0x60>
		eeStatus = EE_Format(EE_FORCED_ERASE);
 8009014:	2000      	movs	r0, #0
 8009016:	f001 fb7d 	bl	800a714 <EE_Format>
 800901a:	0003      	movs	r3, r0
 800901c:	b2da      	uxtb	r2, r3
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <backupInit+0x6c>)
 8009020:	701a      	strb	r2, [r3, #0]

		if (eeStatus != EE_OK) {
 8009022:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <backupInit+0x6c>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <backupInit+0x46>
			Error_Handler();
 800902a:	f004 fbc5 	bl	800d7b8 <Error_Handler>
		}

		eeStatus = EE_Init(EE_FORCED_ERASE);
 800902e:	2000      	movs	r0, #0
 8009030:	f000 fde4 	bl	8009bfc <EE_Init>
 8009034:	0003      	movs	r3, r0
 8009036:	b2da      	uxtb	r2, r3
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <backupInit+0x6c>)
 800903a:	701a      	strb	r2, [r3, #0]
		if (eeStatus != EE_OK) {
 800903c:	4b05      	ldr	r3, [pc, #20]	; (8009054 <backupInit+0x6c>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <backupInit+0x60>
			Error_Handler();
 8009044:	f004 fbb8 	bl	800d7b8 <Error_Handler>
		}

	}

	HAL_FLASH_Lock();
 8009048:	f7fb fa7c 	bl	8004544 <HAL_FLASH_Lock>
}
 800904c:	46c0      	nop			; (mov r8, r8)
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	2000016c 	.word	0x2000016c

08009058 <backupRestore>:
 *
 * @param  RTC handler
 *
 * @retval None
 */
void backupRestore(RTCChronoTypeDef *chrono) {
 8009058:	b590      	push	{r4, r7, lr}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

	uint16_t virtualAddress[2];
	uint32_t timeBackup[2];

	virtualAddress[0] = BACKUP_VIRTUAL_ADRESS;
 8009060:	2110      	movs	r1, #16
 8009062:	187b      	adds	r3, r7, r1
 8009064:	2201      	movs	r2, #1
 8009066:	801a      	strh	r2, [r3, #0]
	virtualAddress[1] = BACKUP_VIRTUAL_ADRESS + 1;
 8009068:	187b      	adds	r3, r7, r1
 800906a:	2202      	movs	r2, #2
 800906c:	805a      	strh	r2, [r3, #2]

	HAL_FLASH_Unlock();
 800906e:	f7fb fa45 	bl	80044fc <HAL_FLASH_Unlock>

	eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8009072:	2001      	movs	r0, #1
 8009074:	f000 fdc2 	bl	8009bfc <EE_Init>
 8009078:	0003      	movs	r3, r0
 800907a:	b2da      	uxtb	r2, r3
 800907c:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <backupRestore+0xd8>)
 800907e:	701a      	strb	r2, [r3, #0]
	if (eeStatus != EE_OK) {
 8009080:	4b2b      	ldr	r3, [pc, #172]	; (8009130 <backupRestore+0xd8>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <backupRestore+0x34>
		Error_Handler();
 8009088:	f004 fb96 	bl	800d7b8 <Error_Handler>
	}

	for (uint8_t i = 0; i < 2; i++) {
 800908c:	2317      	movs	r3, #23
 800908e:	18fb      	adds	r3, r7, r3
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
 8009094:	e018      	b.n	80090c8 <backupRestore+0x70>
		eeStatus = EE_ReadVariable32bits(virtualAddress[i], &timeBackup[i]);
 8009096:	2417      	movs	r4, #23
 8009098:	193b      	adds	r3, r7, r4
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	2310      	movs	r3, #16
 800909e:	18fb      	adds	r3, r7, r3
 80090a0:	0052      	lsls	r2, r2, #1
 80090a2:	5ad0      	ldrh	r0, [r2, r3]
 80090a4:	193b      	adds	r3, r7, r4
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2208      	movs	r2, #8
 80090aa:	18ba      	adds	r2, r7, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	18d3      	adds	r3, r2, r3
 80090b0:	0019      	movs	r1, r3
 80090b2:	f001 fbd9 	bl	800a868 <EE_ReadVariable32bits>
 80090b6:	0003      	movs	r3, r0
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <backupRestore+0xd8>)
 80090bc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 80090be:	193b      	adds	r3, r7, r4
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	193b      	adds	r3, r7, r4
 80090c4:	3201      	adds	r2, #1
 80090c6:	701a      	strb	r2, [r3, #0]
 80090c8:	2317      	movs	r3, #23
 80090ca:	18fb      	adds	r3, r7, r3
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d9e1      	bls.n	8009096 <backupRestore+0x3e>
		if (eeStatus == EE_NO_DATA) {

		}
	}

	HAL_FLASH_Lock();
 80090d2:	f7fb fa37 	bl	8004544 <HAL_FLASH_Lock>

	chrono->actual.hour = timeBackup[0] >> 24;
 80090d6:	2108      	movs	r1, #8
 80090d8:	187b      	adds	r3, r7, r1
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	0e1b      	lsrs	r3, r3, #24
 80090de:	b25a      	sxtb	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	70da      	strb	r2, [r3, #3]
	chrono->actual.minute = timeBackup[0] >> 16;
 80090e4:	187b      	adds	r3, r7, r1
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	0c1b      	lsrs	r3, r3, #16
 80090ea:	b25a      	sxtb	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = timeBackup[0] >> 8;
 80090f0:	187b      	adds	r3, r7, r1
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	b25a      	sxtb	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	715a      	strb	r2, [r3, #5]
	chrono->actual.day = timeBackup[1] >> 24;
 80090fc:	187b      	adds	r3, r7, r1
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	0e1b      	lsrs	r3, r3, #24
 8009102:	b25a      	sxtb	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = timeBackup[1] >> 16;
 8009108:	187b      	adds	r3, r7, r1
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	0c1b      	lsrs	r3, r3, #16
 800910e:	b25a      	sxtb	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = timeBackup[1] >> 8;
 8009114:	187b      	adds	r3, r7, r1
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	0a1b      	lsrs	r3, r3, #8
 800911a:	b25a      	sxtb	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	701a      	strb	r2, [r3, #0]

	rtcSetTime(chrono);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	0018      	movs	r0, r3
 8009124:	f005 fa50 	bl	800e5c8 <rtcSetTime>
}
 8009128:	46c0      	nop			; (mov r8, r8)
 800912a:	46bd      	mov	sp, r7
 800912c:	b007      	add	sp, #28
 800912e:	bd90      	pop	{r4, r7, pc}
 8009130:	2000016c 	.word	0x2000016c

08009134 <backupWrite>:
 *
 * @param  RTC handler
 *
 * @retval None
 */
void backupWrite(RTCChronoTypeDef *chrono) {
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]

	uint16_t virtualAddress[2];
	uint32_t timeBackup[2];

	virtualAddress[0] = BACKUP_VIRTUAL_ADRESS;
 800913c:	2110      	movs	r1, #16
 800913e:	187b      	adds	r3, r7, r1
 8009140:	2201      	movs	r2, #1
 8009142:	801a      	strh	r2, [r3, #0]
	virtualAddress[1] = BACKUP_VIRTUAL_ADRESS + 1;
 8009144:	187b      	adds	r3, r7, r1
 8009146:	2202      	movs	r2, #2
 8009148:	805a      	strh	r2, [r3, #2]

	timeBackup[0] = ((uint32_t) chrono->actual.hour << 24)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	78db      	ldrb	r3, [r3, #3]
 800914e:	b25b      	sxtb	r3, r3
 8009150:	061a      	lsls	r2, r3, #24
			| ((uint32_t) chrono->actual.minute << 16)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	791b      	ldrb	r3, [r3, #4]
 8009156:	b25b      	sxtb	r3, r3
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	431a      	orrs	r2, r3
			| ((uint32_t) chrono->actual.second << 8);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	795b      	ldrb	r3, [r3, #5]
 8009160:	b25b      	sxtb	r3, r3
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	431a      	orrs	r2, r3
	timeBackup[0] = ((uint32_t) chrono->actual.hour << 24)
 8009166:	2108      	movs	r1, #8
 8009168:	187b      	adds	r3, r7, r1
 800916a:	601a      	str	r2, [r3, #0]

	timeBackup[1] = ((uint32_t) chrono->actual.day << 24)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	789b      	ldrb	r3, [r3, #2]
 8009170:	b25b      	sxtb	r3, r3
 8009172:	061a      	lsls	r2, r3, #24
			| ((uint32_t) chrono->actual.month << 16)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	b25b      	sxtb	r3, r3
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	431a      	orrs	r2, r3
			| ((uint32_t) chrono->actual.year << 8);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b25b      	sxtb	r3, r3
 8009184:	021b      	lsls	r3, r3, #8
 8009186:	431a      	orrs	r2, r3
	timeBackup[1] = ((uint32_t) chrono->actual.day << 24)
 8009188:	187b      	adds	r3, r7, r1
 800918a:	605a      	str	r2, [r3, #4]

	HAL_FLASH_Unlock();
 800918c:	f7fb f9b6 	bl	80044fc <HAL_FLASH_Unlock>

	eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8009190:	2001      	movs	r0, #1
 8009192:	f000 fd33 	bl	8009bfc <EE_Init>
 8009196:	0003      	movs	r3, r0
 8009198:	b2da      	uxtb	r2, r3
 800919a:	4b1c      	ldr	r3, [pc, #112]	; (800920c <backupWrite+0xd8>)
 800919c:	701a      	strb	r2, [r3, #0]
	if (eeStatus != EE_OK) {
 800919e:	4b1b      	ldr	r3, [pc, #108]	; (800920c <backupWrite+0xd8>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <backupWrite+0x76>
		Error_Handler();
 80091a6:	f004 fb07 	bl	800d7b8 <Error_Handler>
	}

	for (uint8_t i = 0; i < 2; i++) {
 80091aa:	2317      	movs	r3, #23
 80091ac:	18fb      	adds	r3, r7, r3
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
 80091b2:	e01f      	b.n	80091f4 <backupWrite+0xc0>

		eeStatus = EE_WriteVariable32bits(virtualAddress[i], timeBackup[i]);
 80091b4:	2117      	movs	r1, #23
 80091b6:	187b      	adds	r3, r7, r1
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	2310      	movs	r3, #16
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	0052      	lsls	r2, r2, #1
 80091c0:	5ad0      	ldrh	r0, [r2, r3]
 80091c2:	187b      	adds	r3, r7, r1
 80091c4:	781a      	ldrb	r2, [r3, #0]
 80091c6:	2308      	movs	r3, #8
 80091c8:	18fb      	adds	r3, r7, r3
 80091ca:	0092      	lsls	r2, r2, #2
 80091cc:	58d3      	ldr	r3, [r2, r3]
 80091ce:	0019      	movs	r1, r3
 80091d0:	f001 fb78 	bl	800a8c4 <EE_WriteVariable32bits>
 80091d4:	0003      	movs	r3, r0
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	4b0c      	ldr	r3, [pc, #48]	; (800920c <backupWrite+0xd8>)
 80091da:	701a      	strb	r2, [r3, #0]

		if (eeStatus != EE_OK) {
 80091dc:	4b0b      	ldr	r3, [pc, #44]	; (800920c <backupWrite+0xd8>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <backupWrite+0xb4>
			Error_Handler();
 80091e4:	f004 fae8 	bl	800d7b8 <Error_Handler>
	for (uint8_t i = 0; i < 2; i++) {
 80091e8:	2117      	movs	r1, #23
 80091ea:	187b      	adds	r3, r7, r1
 80091ec:	781a      	ldrb	r2, [r3, #0]
 80091ee:	187b      	adds	r3, r7, r1
 80091f0:	3201      	adds	r2, #1
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	2317      	movs	r3, #23
 80091f6:	18fb      	adds	r3, r7, r3
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d9da      	bls.n	80091b4 <backupWrite+0x80>
		}
	}

	HAL_FLASH_Lock();
 80091fe:	f7fb f9a1 	bl	8004544 <HAL_FLASH_Lock>
}
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	46bd      	mov	sp, r7
 8009206:	b006      	add	sp, #24
 8009208:	bd80      	pop	{r7, pc}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	2000016c 	.word	0x2000016c

08009210 <bme280Init>:
 *
 * @param  i2C handler
 *
 * @retval None
 */
void bme280Init(bme280TypeDef *bme280, I2C_HandleTypeDef *I2Chandler) {
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b091      	sub	sp, #68	; 0x44
 8009214:	af04      	add	r7, sp, #16
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]

	bme280->I2Chandler = I2Chandler;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	645a      	str	r2, [r3, #68]	; 0x44

	bme280->i2cTimeout = BME280_I2C_TIMEOUT;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2264      	movs	r2, #100	; 0x64
 8009224:	76da      	strb	r2, [r3, #27]
//	bme280->ctrlHum = 0x01; //oversampling for humidity disabled
////	bme280->ctrlMeas = 0x24; //oversampling for temp, pressure disabled
//	bme280->ctrlMeas = 0x34; //pressure oversampling x16

//set oversampling
	bme280->ctrlMeas = (BME280_OVERSAMPLING_TEM << 5)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	22b4      	movs	r2, #180	; 0xb4
 800922a:	761a      	strb	r2, [r3, #24]
			| (BME280_OVERSAMPLING_PRE << 2);
	bme280->ctrlHum = BME280_OVERSAMPLING_HUM;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2205      	movs	r2, #5
 8009230:	765a      	strb	r2, [r3, #25]
	bme280->config = BME280_IIR_FILTER << 2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2208      	movs	r2, #8
 8009236:	769a      	strb	r2, [r3, #26]
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								READING CALIBRATION DATA

	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_T, 6, bme280->i2cTimeout) != HAL_OK) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7edb      	ldrb	r3, [r3, #27]
	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 8009240:	9302      	str	r3, [sp, #8]
 8009242:	2306      	movs	r3, #6
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	2428      	movs	r4, #40	; 0x28
 8009248:	193b      	adds	r3, r7, r4
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	2301      	movs	r3, #1
 800924e:	2288      	movs	r2, #136	; 0x88
 8009250:	21ee      	movs	r1, #238	; 0xee
 8009252:	f7fb fe31 	bl	8004eb8 <HAL_I2C_Mem_Read>

	}
	bme280->dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 8009256:	0021      	movs	r1, r4
 8009258:	187b      	adds	r3, r7, r1
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b21a      	sxth	r2, r3
 800925e:	187b      	adds	r3, r7, r1
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	b21b      	sxth	r3, r3
 8009266:	4313      	orrs	r3, r2
 8009268:	b21b      	sxth	r3, r3
 800926a:	b29a      	uxth	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	839a      	strh	r2, [r3, #28]
	bme280->dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 8009270:	187b      	adds	r3, r7, r1
 8009272:	789b      	ldrb	r3, [r3, #2]
 8009274:	b21a      	sxth	r2, r3
 8009276:	187b      	adds	r3, r7, r1
 8009278:	78db      	ldrb	r3, [r3, #3]
 800927a:	021b      	lsls	r3, r3, #8
 800927c:	b21b      	sxth	r3, r3
 800927e:	4313      	orrs	r3, r2
 8009280:	b21a      	sxth	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	83da      	strh	r2, [r3, #30]
	bme280->dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 8009286:	187b      	adds	r3, r7, r1
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	b21a      	sxth	r2, r3
 800928c:	187b      	adds	r3, r7, r1
 800928e:	791b      	ldrb	r3, [r3, #4]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	b21b      	sxth	r3, r3
 8009294:	4313      	orrs	r3, r2
 8009296:	b21a      	sxth	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	841a      	strh	r2, [r3, #32]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_P, 18, bme280->i2cTimeout);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 80092a4:	9302      	str	r3, [sp, #8]
 80092a6:	2312      	movs	r3, #18
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	2414      	movs	r4, #20
 80092ac:	193b      	adds	r3, r7, r4
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	2301      	movs	r3, #1
 80092b2:	228e      	movs	r2, #142	; 0x8e
 80092b4:	21ee      	movs	r1, #238	; 0xee
 80092b6:	f7fb fdff 	bl	8004eb8 <HAL_I2C_Mem_Read>
	bme280->dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 80092ba:	0021      	movs	r1, r4
 80092bc:	187b      	adds	r3, r7, r1
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b21a      	sxth	r2, r3
 80092c2:	187b      	adds	r3, r7, r1
 80092c4:	785b      	ldrb	r3, [r3, #1]
 80092c6:	021b      	lsls	r3, r3, #8
 80092c8:	b21b      	sxth	r3, r3
 80092ca:	4313      	orrs	r3, r2
 80092cc:	b21b      	sxth	r3, r3
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280->dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 80092d4:	187b      	adds	r3, r7, r1
 80092d6:	789b      	ldrb	r3, [r3, #2]
 80092d8:	b21a      	sxth	r2, r3
 80092da:	187b      	adds	r3, r7, r1
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	b21b      	sxth	r3, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	b21a      	sxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280->dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 80092ea:	187b      	adds	r3, r7, r1
 80092ec:	791b      	ldrb	r3, [r3, #4]
 80092ee:	b21a      	sxth	r2, r3
 80092f0:	187b      	adds	r3, r7, r1
 80092f2:	795b      	ldrb	r3, [r3, #5]
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	b21b      	sxth	r3, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	b21a      	sxth	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280->dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 8009300:	187b      	adds	r3, r7, r1
 8009302:	799b      	ldrb	r3, [r3, #6]
 8009304:	b21a      	sxth	r2, r3
 8009306:	187b      	adds	r3, r7, r1
 8009308:	79db      	ldrb	r3, [r3, #7]
 800930a:	021b      	lsls	r3, r3, #8
 800930c:	b21b      	sxth	r3, r3
 800930e:	4313      	orrs	r3, r2
 8009310:	b21a      	sxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280->dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 8009316:	187b      	adds	r3, r7, r1
 8009318:	7a1b      	ldrb	r3, [r3, #8]
 800931a:	b21a      	sxth	r2, r3
 800931c:	187b      	adds	r3, r7, r1
 800931e:	7a5b      	ldrb	r3, [r3, #9]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	b21b      	sxth	r3, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	b21a      	sxth	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280->dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 800932c:	187b      	adds	r3, r7, r1
 800932e:	7a9b      	ldrb	r3, [r3, #10]
 8009330:	b21a      	sxth	r2, r3
 8009332:	187b      	adds	r3, r7, r1
 8009334:	7adb      	ldrb	r3, [r3, #11]
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	b21b      	sxth	r3, r3
 800933a:	4313      	orrs	r3, r2
 800933c:	b21a      	sxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280->dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 8009342:	187b      	adds	r3, r7, r1
 8009344:	7b1b      	ldrb	r3, [r3, #12]
 8009346:	b21a      	sxth	r2, r3
 8009348:	187b      	adds	r3, r7, r1
 800934a:	7b5b      	ldrb	r3, [r3, #13]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	b21b      	sxth	r3, r3
 8009350:	4313      	orrs	r3, r2
 8009352:	b21a      	sxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	85da      	strh	r2, [r3, #46]	; 0x2e
	bme280->dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 8009358:	187b      	adds	r3, r7, r1
 800935a:	7b9b      	ldrb	r3, [r3, #14]
 800935c:	b21a      	sxth	r2, r3
 800935e:	187b      	adds	r3, r7, r1
 8009360:	7bdb      	ldrb	r3, [r3, #15]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	b21b      	sxth	r3, r3
 8009366:	4313      	orrs	r3, r2
 8009368:	b21a      	sxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	861a      	strh	r2, [r3, #48]	; 0x30
	bme280->dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 800936e:	187b      	adds	r3, r7, r1
 8009370:	7c1b      	ldrb	r3, [r3, #16]
 8009372:	b21a      	sxth	r2, r3
 8009374:	187b      	adds	r3, r7, r1
 8009376:	7c5b      	ldrb	r3, [r3, #17]
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	b21b      	sxth	r3, r3
 800937c:	4313      	orrs	r3, r2
 800937e:	b21a      	sxth	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	865a      	strh	r2, [r3, #50]	; 0x32

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6c58      	ldr	r0, [r3, #68]	; 0x44
			&dig_H_1, 1, bme280->i2cTimeout);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 800938c:	9302      	str	r3, [sp, #8]
 800938e:	2301      	movs	r3, #1
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	2413      	movs	r4, #19
 8009394:	193b      	adds	r3, r7, r4
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	2301      	movs	r3, #1
 800939a:	22a1      	movs	r2, #161	; 0xa1
 800939c:	21ee      	movs	r1, #238	; 0xee
 800939e:	f7fb fd8b 	bl	8004eb8 <HAL_I2C_Mem_Read>
	bme280->dig_H1 = ((unsigned char) dig_H_1);
 80093a2:	193b      	adds	r3, r7, r4
 80093a4:	7819      	ldrb	r1, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2234      	movs	r2, #52	; 0x34
 80093aa:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_H_2_6, 7, bme280->i2cTimeout);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	2307      	movs	r3, #7
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	240c      	movs	r4, #12
 80093bc:	193b      	adds	r3, r7, r4
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	2301      	movs	r3, #1
 80093c2:	22e1      	movs	r2, #225	; 0xe1
 80093c4:	21ee      	movs	r1, #238	; 0xee
 80093c6:	f7fb fd77 	bl	8004eb8 <HAL_I2C_Mem_Read>
	bme280->dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 80093ca:	0020      	movs	r0, r4
 80093cc:	183b      	adds	r3, r7, r0
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	b21a      	sxth	r2, r3
 80093d2:	183b      	adds	r3, r7, r0
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	b21b      	sxth	r3, r3
 80093da:	4313      	orrs	r3, r2
 80093dc:	b21a      	sxth	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	86da      	strh	r2, [r3, #54]	; 0x36
	bme280->dig_H3 = ((unsigned char) dig_H_2_6[2]);
 80093e2:	183b      	adds	r3, r7, r0
 80093e4:	7899      	ldrb	r1, [r3, #2]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2238      	movs	r2, #56	; 0x38
 80093ea:	5499      	strb	r1, [r3, r2]

	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 80093ec:	183b      	adds	r3, r7, r0
 80093ee:	78db      	ldrb	r3, [r3, #3]
 80093f0:	011b      	lsls	r3, r3, #4
			| (((int16_t) dig_H_2_6[4]) & 0x0f));
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	183b      	adds	r3, r7, r0
 80093f6:	791b      	ldrb	r3, [r3, #4]
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	210f      	movs	r1, #15
 80093fc:	400b      	ands	r3, r1
 80093fe:	b21b      	sxth	r3, r3
 8009400:	4313      	orrs	r3, r2
 8009402:	b21a      	sxth	r2, r3
	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	875a      	strh	r2, [r3, #58]	; 0x3a
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 8009408:	183b      	adds	r3, r7, r0
 800940a:	791b      	ldrb	r3, [r3, #4]
			| ((int16_t) dig_H_2_6[5]) << 4);
 800940c:	091b      	lsrs	r3, r3, #4
 800940e:	b2db      	uxtb	r3, r3
 8009410:	b21a      	sxth	r2, r3
 8009412:	183b      	adds	r3, r7, r0
 8009414:	795b      	ldrb	r3, [r3, #5]
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	b21b      	sxth	r3, r3
 800941a:	4313      	orrs	r3, r2
 800941c:	b21a      	sxth	r2, r3
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	879a      	strh	r2, [r3, #60]	; 0x3c
	bme280->dig_H6 = ((unsigned char) dig_H_2_6[6]);
 8009422:	183b      	adds	r3, r7, r0
 8009424:	7999      	ldrb	r1, [r3, #6]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	223e      	movs	r2, #62	; 0x3e
 800942a:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3318      	adds	r3, #24
			&bme280->ctrlMeas, 1, bme280->i2cTimeout); //write temp and press oversampling
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 8009438:	9202      	str	r2, [sp, #8]
 800943a:	2201      	movs	r2, #1
 800943c:	9201      	str	r2, [sp, #4]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	2301      	movs	r3, #1
 8009442:	22f4      	movs	r2, #244	; 0xf4
 8009444:	21ee      	movs	r1, #238	; 0xee
 8009446:	f7fb fc09 	bl	8004c5c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3319      	adds	r3, #25
			&bme280->ctrlHum, 1, bme280->i2cTimeout); //write humidity oversampling
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 8009456:	9202      	str	r2, [sp, #8]
 8009458:	2201      	movs	r2, #1
 800945a:	9201      	str	r2, [sp, #4]
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	2301      	movs	r3, #1
 8009460:	22f2      	movs	r2, #242	; 0xf2
 8009462:	21ee      	movs	r1, #238	; 0xee
 8009464:	f7fb fbfa 	bl	8004c5c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	331a      	adds	r3, #26
				&bme280->config, 1, bme280->i2cTimeout); //write iir filter config
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 8009474:	9202      	str	r2, [sp, #8]
 8009476:	2201      	movs	r2, #1
 8009478:	9201      	str	r2, [sp, #4]
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2301      	movs	r3, #1
 800947e:	22f5      	movs	r2, #245	; 0xf5
 8009480:	21ee      	movs	r1, #238	; 0xee
 8009482:	f7fb fbeb 	bl	8004c5c <HAL_I2C_Mem_Write>


}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	46bd      	mov	sp, r7
 800948a:	b00d      	add	sp, #52	; 0x34
 800948c:	bd90      	pop	{r4, r7, pc}
	...

08009490 <bme280Read>:
 *
 * @param  BME280 handler
 *
 * @retval None
 */
void bme280Read(bme280TypeDef *bme280) {
 8009490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009492:	b08d      	sub	sp, #52	; 0x34
 8009494:	af04      	add	r7, sp, #16
 8009496:	6078      	str	r0, [r7, #4]

	uint8_t readings[8] = {0};
 8009498:	230c      	movs	r3, #12
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]

	//adc data
	int32_t temperatureADC = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
	int32_t pressureADC = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
	int32_t humidityADC = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]

	//start measure by setting las bit of ctrlMeas register
	uint8_t startConversion = (bme280->ctrlMeas) + 1;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7e1b      	ldrb	r3, [r3, #24]
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	210b      	movs	r1, #11
 80094ba:	187b      	adds	r3, r7, r1
 80094bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
			&startConversion, 1, bme280->i2cTimeout);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	2301      	movs	r3, #1
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	187b      	adds	r3, r7, r1
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	2301      	movs	r3, #1
 80094d2:	22f4      	movs	r2, #244	; 0xf4
 80094d4:	21ee      	movs	r1, #238	; 0xee
 80094d6:	f7fb fbc1 	bl	8004c5c <HAL_I2C_Mem_Write>

	//wait for measurement
	uint8_t status = 0;
 80094da:	230a      	movs	r3, #10
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
	do {
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c58      	ldr	r0, [r3, #68]	; 0x44
				&status, 1, bme280->i2cTimeout);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7edb      	ldrb	r3, [r3, #27]
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	2301      	movs	r3, #1
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	260a      	movs	r6, #10
 80094f2:	19bb      	adds	r3, r7, r6
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	2301      	movs	r3, #1
 80094f8:	22f3      	movs	r2, #243	; 0xf3
 80094fa:	21ee      	movs	r1, #238	; 0xee
 80094fc:	f7fb fcdc 	bl	8004eb8 <HAL_I2C_Mem_Read>
	} while (((status >> 3) & 1) == 1);
 8009500:	19bb      	adds	r3, r7, r6
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	08db      	lsrs	r3, r3, #3
 8009506:	b2db      	uxtb	r3, r3
 8009508:	001a      	movs	r2, r3
 800950a:	2301      	movs	r3, #1
 800950c:	4013      	ands	r3, r2
 800950e:	d1e8      	bne.n	80094e2 <bme280Read+0x52>

	//read output registers
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6c58      	ldr	r0, [r3, #68]	; 0x44
			readings, 8, bme280->i2cTimeout);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	2308      	movs	r3, #8
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	260c      	movs	r6, #12
 8009520:	19bb      	adds	r3, r7, r6
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2301      	movs	r3, #1
 8009526:	22f7      	movs	r2, #247	; 0xf7
 8009528:	21ee      	movs	r1, #238	; 0xee
 800952a:	f7fb fcc5 	bl	8004eb8 <HAL_I2C_Mem_Read>


	//TEMPERATURE
	temperatureADC = ((((int32_t) readings[3] << 12)
 800952e:	19bb      	adds	r3, r7, r6
 8009530:	78db      	ldrb	r3, [r3, #3]
 8009532:	031a      	lsls	r2, r3, #12
			| ((int32_t) readings[4] << 4) | ((int32_t) readings[5] >> 4)));
 8009534:	19bb      	adds	r3, r7, r6
 8009536:	791b      	ldrb	r3, [r3, #4]
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	4313      	orrs	r3, r2
 800953c:	19ba      	adds	r2, r7, r6
 800953e:	7952      	ldrb	r2, [r2, #5]
 8009540:	0912      	lsrs	r2, r2, #4
 8009542:	b2d2      	uxtb	r2, r2
	temperatureADC = ((((int32_t) readings[3] << 12)
 8009544:	4313      	orrs	r3, r2
 8009546:	61fb      	str	r3, [r7, #28]

	bme280->temperatureValue = (_BME280_compensate_T_int32(bme280,
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	0011      	movs	r1, r2
 800954e:	0018      	movs	r0, r3
 8009550:	f000 f8a0 	bl	8009694 <_BME280_compensate_T_int32>
 8009554:	0002      	movs	r2, r0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]
			temperatureADC));

	//PRESSURE
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 800955a:	19bb      	adds	r3, r7, r6
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	031a      	lsls	r2, r3, #12
 8009560:	19bb      	adds	r3, r7, r6
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	4313      	orrs	r3, r2
			| ((int32_t) readings[2] >> 4)));
 8009568:	19ba      	adds	r2, r7, r6
 800956a:	7892      	ldrb	r2, [r2, #2]
 800956c:	0912      	lsrs	r2, r2, #4
 800956e:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 8009570:	4313      	orrs	r3, r2
 8009572:	61bb      	str	r3, [r7, #24]

	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	0011      	movs	r1, r2
 800957a:	0018      	movs	r0, r3
 800957c:	f000 f8c0 	bl	8009700 <_BME280_compensate_P_int64>
 8009580:	0003      	movs	r3, r0
			/ 256;
 8009582:	0a1a      	lsrs	r2, r3, #8
	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	609a      	str	r2, [r3, #8]

	//HUMIDITY
	humidityADC = (((int32_t) readings[6] << 8) | (int32_t) readings[7]);
 8009588:	19bb      	adds	r3, r7, r6
 800958a:	799b      	ldrb	r3, [r3, #6]
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	19ba      	adds	r2, r7, r6
 8009590:	79d2      	ldrb	r2, [r2, #7]
 8009592:	4313      	orrs	r3, r2
 8009594:	617b      	str	r3, [r7, #20]

	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	0011      	movs	r1, r2
 800959c:	0018      	movs	r0, r3
 800959e:	f000 fa5f 	bl	8009a60 <_BME280_compensate_H_int32>
 80095a2:	0003      	movs	r3, r0
			/ 1024;
 80095a4:	0a9a      	lsrs	r2, r3, #10
	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
	 * T- air temperature[K]
	 *
	 */

	bme280->altitudeValue = (-((8.314
			* ((((float) bme280->temperatureValue) / 100) + 273.15))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7f7 fe80 	bl	80012b4 <__aeabi_i2f>
 80095b4:	1c03      	adds	r3, r0, #0
 80095b6:	492f      	ldr	r1, [pc, #188]	; (8009674 <bme280Read+0x1e4>)
 80095b8:	1c18      	adds	r0, r3, #0
 80095ba:	f7f7 fa6d 	bl	8000a98 <__aeabi_fdiv>
 80095be:	1c03      	adds	r3, r0, #0
 80095c0:	1c18      	adds	r0, r3, #0
 80095c2:	f7f9 fd11 	bl	8002fe8 <__aeabi_f2d>
 80095c6:	4a2c      	ldr	r2, [pc, #176]	; (8009678 <bme280Read+0x1e8>)
 80095c8:	4b2c      	ldr	r3, [pc, #176]	; (800967c <bme280Read+0x1ec>)
 80095ca:	f7f7 fef5 	bl	80013b8 <__aeabi_dadd>
 80095ce:	0002      	movs	r2, r0
 80095d0:	000b      	movs	r3, r1
 80095d2:	0010      	movs	r0, r2
 80095d4:	0019      	movs	r1, r3
 80095d6:	4a2a      	ldr	r2, [pc, #168]	; (8009680 <bme280Read+0x1f0>)
 80095d8:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <bme280Read+0x1f4>)
 80095da:	f7f8 fe5d 	bl	8002298 <__aeabi_dmul>
 80095de:	0002      	movs	r2, r0
 80095e0:	000b      	movs	r3, r1
 80095e2:	0010      	movs	r0, r2
 80095e4:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 80095e6:	4a28      	ldr	r2, [pc, #160]	; (8009688 <bme280Read+0x1f8>)
 80095e8:	4b28      	ldr	r3, [pc, #160]	; (800968c <bme280Read+0x1fc>)
 80095ea:	f7f8 fa4f 	bl	8001a8c <__aeabi_ddiv>
 80095ee:	0002      	movs	r2, r0
 80095f0:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 80095f2:	0011      	movs	r1, r2
 80095f4:	000c      	movs	r4, r1
 80095f6:	2180      	movs	r1, #128	; 0x80
 80095f8:	0609      	lsls	r1, r1, #24
 80095fa:	4059      	eors	r1, r3
 80095fc:	000d      	movs	r5, r1
			* log(
					(float) bme280->pressureValue
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	0018      	movs	r0, r3
 8009604:	f7f7 fe9c 	bl	8001340 <__aeabi_ui2f>
 8009608:	1c06      	adds	r6, r0, #0
							/ (((float) bme280->pressureReference) * 100)))*100;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	0018      	movs	r0, r3
 8009610:	f7f7 fe96 	bl	8001340 <__aeabi_ui2f>
 8009614:	1c03      	adds	r3, r0, #0
 8009616:	4917      	ldr	r1, [pc, #92]	; (8009674 <bme280Read+0x1e4>)
 8009618:	1c18      	adds	r0, r3, #0
 800961a:	f7f7 fb49 	bl	8000cb0 <__aeabi_fmul>
 800961e:	1c03      	adds	r3, r0, #0
 8009620:	1c19      	adds	r1, r3, #0
 8009622:	1c30      	adds	r0, r6, #0
 8009624:	f7f7 fa38 	bl	8000a98 <__aeabi_fdiv>
 8009628:	1c03      	adds	r3, r0, #0
			* log(
 800962a:	1c18      	adds	r0, r3, #0
 800962c:	f7f9 fcdc 	bl	8002fe8 <__aeabi_f2d>
 8009630:	0002      	movs	r2, r0
 8009632:	000b      	movs	r3, r1
 8009634:	0010      	movs	r0, r2
 8009636:	0019      	movs	r1, r3
 8009638:	f006 f9b6 	bl	800f9a8 <log>
 800963c:	0002      	movs	r2, r0
 800963e:	000b      	movs	r3, r1
 8009640:	0020      	movs	r0, r4
 8009642:	0029      	movs	r1, r5
 8009644:	f7f8 fe28 	bl	8002298 <__aeabi_dmul>
 8009648:	0002      	movs	r2, r0
 800964a:	000b      	movs	r3, r1
 800964c:	0010      	movs	r0, r2
 800964e:	0019      	movs	r1, r3
							/ (((float) bme280->pressureReference) * 100)))*100;
 8009650:	2200      	movs	r2, #0
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <bme280Read+0x200>)
 8009654:	f7f8 fe20 	bl	8002298 <__aeabi_dmul>
 8009658:	0002      	movs	r2, r0
 800965a:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 800965c:	0010      	movs	r0, r2
 800965e:	0019      	movs	r1, r3
 8009660:	f7f9 fc36 	bl	8002ed0 <__aeabi_d2iz>
 8009664:	0002      	movs	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	611a      	str	r2, [r3, #16]
}
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	46bd      	mov	sp, r7
 800966e:	b009      	add	sp, #36	; 0x24
 8009670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	42c80000 	.word	0x42c80000
 8009678:	66666666 	.word	0x66666666
 800967c:	40711266 	.word	0x40711266
 8009680:	9ba5e354 	.word	0x9ba5e354
 8009684:	4020a0c4 	.word	0x4020a0c4
 8009688:	db22d0e5 	.word	0xdb22d0e5
 800968c:	3fd27ef9 	.word	0x3fd27ef9
 8009690:	40590000 	.word	0x40590000

08009694 <_BME280_compensate_T_int32>:
//									COMP FUNCTIONS DEFINITIONS

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	10da      	asrs	r2, r3, #3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8b9b      	ldrh	r3, [r3, #28]
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	1ad3      	subs	r3, r2, r3
			* ((int32_t) bme280->dig_T2)) >> 11;
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	211e      	movs	r1, #30
 80096ae:	5e52      	ldrsh	r2, [r2, r1]
 80096b0:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 80096b2:	12db      	asrs	r3, r3, #11
 80096b4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	111b      	asrs	r3, r3, #4
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	8b92      	ldrh	r2, [r2, #28]
 80096be:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((int32_t) bme280->dig_T1))) >> 12)
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	1112      	asrs	r2, r2, #4
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	8b89      	ldrh	r1, [r1, #28]
 80096c8:	1a52      	subs	r2, r2, r1
 80096ca:	4353      	muls	r3, r2
 80096cc:	131b      	asrs	r3, r3, #12
			* ((int32_t) bme280->dig_T3)) >> 14;
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	2120      	movs	r1, #32
 80096d2:	5e52      	ldrsh	r2, [r2, r1]
 80096d4:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 80096d6:	139b      	asrs	r3, r3, #14
 80096d8:	613b      	str	r3, [r7, #16]
	bme280->t_fine = var1 + var2;
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	18d2      	adds	r2, r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40
	T = (bme280->t_fine * 5 + 128) >> 8;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e8:	0013      	movs	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	189b      	adds	r3, r3, r2
 80096ee:	3380      	adds	r3, #128	; 0x80
 80096f0:	121b      	asrs	r3, r3, #8
 80096f2:	60fb      	str	r3, [r7, #12]
	return T;
 80096f4:	68fb      	ldr	r3, [r7, #12]
}
 80096f6:	0018      	movs	r0, r3
 80096f8:	46bd      	mov	sp, r7
 80096fa:	b006      	add	sp, #24
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <_BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P) {
 8009700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009702:	b0ad      	sub	sp, #180	; 0xb4
 8009704:	af00      	add	r7, sp, #0
 8009706:	2394      	movs	r3, #148	; 0x94
 8009708:	18fa      	adds	r2, r7, r3
 800970a:	6010      	str	r0, [r2, #0]
 800970c:	2290      	movs	r2, #144	; 0x90
 800970e:	18ba      	adds	r2, r7, r2
 8009710:	6011      	str	r1, [r2, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t) bme280->t_fine) - 128000;
 8009712:	18fa      	adds	r2, r7, r3
 8009714:	6813      	ldr	r3, [r2, #0]
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	65bb      	str	r3, [r7, #88]	; 0x58
 800971a:	17db      	asrs	r3, r3, #31
 800971c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800971e:	4ace      	ldr	r2, [pc, #824]	; (8009a58 <_BME280_compensate_P_int64+0x358>)
 8009720:	2301      	movs	r3, #1
 8009722:	425b      	negs	r3, r3
 8009724:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009726:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009728:	1880      	adds	r0, r0, r2
 800972a:	4159      	adcs	r1, r3
 800972c:	0002      	movs	r2, r0
 800972e:	000b      	movs	r3, r1
 8009730:	26a8      	movs	r6, #168	; 0xa8
 8009732:	19b9      	adds	r1, r7, r6
 8009734:	600a      	str	r2, [r1, #0]
 8009736:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) bme280->dig_P6;
 8009738:	19ba      	adds	r2, r7, r6
 800973a:	6853      	ldr	r3, [r2, #4]
 800973c:	6812      	ldr	r2, [r2, #0]
 800973e:	19b9      	adds	r1, r7, r6
 8009740:	6808      	ldr	r0, [r1, #0]
 8009742:	6849      	ldr	r1, [r1, #4]
 8009744:	f7f6 fee2 	bl	800050c <__aeabi_lmul>
 8009748:	0002      	movs	r2, r0
 800974a:	000b      	movs	r3, r1
 800974c:	0010      	movs	r0, r2
 800974e:	0019      	movs	r1, r3
 8009750:	2394      	movs	r3, #148	; 0x94
 8009752:	18fa      	adds	r2, r7, r3
 8009754:	6813      	ldr	r3, [r2, #0]
 8009756:	222c      	movs	r2, #44	; 0x2c
 8009758:	5e9b      	ldrsh	r3, [r3, r2]
 800975a:	653b      	str	r3, [r7, #80]	; 0x50
 800975c:	17db      	asrs	r3, r3, #31
 800975e:	657b      	str	r3, [r7, #84]	; 0x54
 8009760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009764:	f7f6 fed2 	bl	800050c <__aeabi_lmul>
 8009768:	0002      	movs	r2, r0
 800976a:	000b      	movs	r3, r1
 800976c:	21a0      	movs	r1, #160	; 0xa0
 800976e:	1878      	adds	r0, r7, r1
 8009770:	6002      	str	r2, [r0, #0]
 8009772:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) bme280->dig_P5) << 17);
 8009774:	2394      	movs	r3, #148	; 0x94
 8009776:	18fa      	adds	r2, r7, r3
 8009778:	6813      	ldr	r3, [r2, #0]
 800977a:	222a      	movs	r2, #42	; 0x2a
 800977c:	5e9b      	ldrsh	r3, [r3, r2]
 800977e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009780:	17db      	asrs	r3, r3, #31
 8009782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009784:	19ba      	adds	r2, r7, r6
 8009786:	6853      	ldr	r3, [r2, #4]
 8009788:	6812      	ldr	r2, [r2, #0]
 800978a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800978c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800978e:	f7f6 febd 	bl	800050c <__aeabi_lmul>
 8009792:	0002      	movs	r2, r0
 8009794:	000b      	movs	r3, r1
 8009796:	0bd1      	lsrs	r1, r2, #15
 8009798:	045d      	lsls	r5, r3, #17
 800979a:	430d      	orrs	r5, r1
 800979c:	0454      	lsls	r4, r2, #17
 800979e:	21a0      	movs	r1, #160	; 0xa0
 80097a0:	187a      	adds	r2, r7, r1
 80097a2:	6853      	ldr	r3, [r2, #4]
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	1912      	adds	r2, r2, r4
 80097a8:	416b      	adcs	r3, r5
 80097aa:	1878      	adds	r0, r7, r1
 80097ac:	6002      	str	r2, [r0, #0]
 80097ae:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) bme280->dig_P4) << 35);
 80097b0:	2594      	movs	r5, #148	; 0x94
 80097b2:	197b      	adds	r3, r7, r5
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2228      	movs	r2, #40	; 0x28
 80097b8:	5e9b      	ldrsh	r3, [r3, r2]
 80097ba:	643b      	str	r3, [r7, #64]	; 0x40
 80097bc:	17db      	asrs	r3, r3, #31
 80097be:	647b      	str	r3, [r7, #68]	; 0x44
 80097c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097c6:	2300      	movs	r3, #0
 80097c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80097ca:	000c      	movs	r4, r1
 80097cc:	187b      	adds	r3, r7, r1
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097d6:	1812      	adds	r2, r2, r0
 80097d8:	414b      	adcs	r3, r1
 80097da:	1939      	adds	r1, r7, r4
 80097dc:	600a      	str	r2, [r1, #0]
 80097de:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 80097e0:	0034      	movs	r4, r6
 80097e2:	193b      	adds	r3, r7, r4
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	1939      	adds	r1, r7, r4
 80097ea:	6808      	ldr	r0, [r1, #0]
 80097ec:	6849      	ldr	r1, [r1, #4]
 80097ee:	f7f6 fe8d 	bl	800050c <__aeabi_lmul>
 80097f2:	0002      	movs	r2, r0
 80097f4:	000b      	movs	r3, r1
 80097f6:	0010      	movs	r0, r2
 80097f8:	0019      	movs	r1, r3
 80097fa:	197b      	adds	r3, r7, r5
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2226      	movs	r2, #38	; 0x26
 8009800:	5e9b      	ldrsh	r3, [r3, r2]
 8009802:	633b      	str	r3, [r7, #48]	; 0x30
 8009804:	17db      	asrs	r3, r3, #31
 8009806:	637b      	str	r3, [r7, #52]	; 0x34
 8009808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	f7f6 fe7e 	bl	800050c <__aeabi_lmul>
 8009810:	0002      	movs	r2, r0
 8009812:	000b      	movs	r3, r1
 8009814:	0619      	lsls	r1, r3, #24
 8009816:	468c      	mov	ip, r1
 8009818:	0a10      	lsrs	r0, r2, #8
 800981a:	2688      	movs	r6, #136	; 0x88
 800981c:	19b9      	adds	r1, r7, r6
 800981e:	6008      	str	r0, [r1, #0]
 8009820:	19b8      	adds	r0, r7, r6
 8009822:	6800      	ldr	r0, [r0, #0]
 8009824:	4661      	mov	r1, ip
 8009826:	4308      	orrs	r0, r1
 8009828:	19b9      	adds	r1, r7, r6
 800982a:	6008      	str	r0, [r1, #0]
 800982c:	121b      	asrs	r3, r3, #8
 800982e:	228c      	movs	r2, #140	; 0x8c
 8009830:	18ba      	adds	r2, r7, r2
 8009832:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) bme280->dig_P2) << 12);
 8009834:	197b      	adds	r3, r7, r5
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2224      	movs	r2, #36	; 0x24
 800983a:	5e9b      	ldrsh	r3, [r3, r2]
 800983c:	62bb      	str	r3, [r7, #40]	; 0x28
 800983e:	17db      	asrs	r3, r3, #31
 8009840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009842:	193b      	adds	r3, r7, r4
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800984c:	f7f6 fe5e 	bl	800050c <__aeabi_lmul>
 8009850:	0002      	movs	r2, r0
 8009852:	000b      	movs	r3, r1
 8009854:	0d11      	lsrs	r1, r2, #20
 8009856:	468c      	mov	ip, r1
 8009858:	0318      	lsls	r0, r3, #12
 800985a:	2184      	movs	r1, #132	; 0x84
 800985c:	1879      	adds	r1, r7, r1
 800985e:	6008      	str	r0, [r1, #0]
 8009860:	2084      	movs	r0, #132	; 0x84
 8009862:	1839      	adds	r1, r7, r0
 8009864:	6808      	ldr	r0, [r1, #0]
 8009866:	4661      	mov	r1, ip
 8009868:	4308      	orrs	r0, r1
 800986a:	2184      	movs	r1, #132	; 0x84
 800986c:	1879      	adds	r1, r7, r1
 800986e:	6008      	str	r0, [r1, #0]
 8009870:	0313      	lsls	r3, r2, #12
 8009872:	2180      	movs	r1, #128	; 0x80
 8009874:	187a      	adds	r2, r7, r1
 8009876:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 8009878:	19bb      	adds	r3, r7, r6
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	1879      	adds	r1, r7, r1
 8009880:	6808      	ldr	r0, [r1, #0]
 8009882:	6849      	ldr	r1, [r1, #4]
 8009884:	1812      	adds	r2, r2, r0
 8009886:	414b      	adcs	r3, r1
 8009888:	1939      	adds	r1, r7, r4
 800988a:	600a      	str	r2, [r1, #0]
 800988c:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) bme280->dig_P1) >> 33;
 800988e:	193b      	adds	r3, r7, r4
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	6859      	ldr	r1, [r3, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	2380      	movs	r3, #128	; 0x80
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	1880      	adds	r0, r0, r2
 800989c:	4159      	adcs	r1, r3
 800989e:	197b      	adds	r3, r7, r5
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80098a4:	623b      	str	r3, [r7, #32]
 80098a6:	2300      	movs	r3, #0
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	6a3a      	ldr	r2, [r7, #32]
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	f7f6 fe2d 	bl	800050c <__aeabi_lmul>
 80098b2:	0002      	movs	r2, r0
 80098b4:	000b      	movs	r3, r1
 80098b6:	1059      	asrs	r1, r3, #1
 80098b8:	1938      	adds	r0, r7, r4
 80098ba:	6001      	str	r1, [r0, #0]
 80098bc:	17db      	asrs	r3, r3, #31
 80098be:	21ac      	movs	r1, #172	; 0xac
 80098c0:	187a      	adds	r2, r7, r1
 80098c2:	6013      	str	r3, [r2, #0]
	if (var1 == 0) {
 80098c4:	193b      	adds	r3, r7, r4
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	187b      	adds	r3, r7, r1
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	d101      	bne.n	80098d4 <_BME280_compensate_P_int64+0x1d4>
		return 0; // avoid exception caused by division by zero
 80098d0:	2300      	movs	r3, #0
 80098d2:	e0bc      	b.n	8009a4e <_BME280_compensate_P_int64+0x34e>
	}
	p = 1048576 - adc_P;
 80098d4:	2390      	movs	r3, #144	; 0x90
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	2380      	movs	r3, #128	; 0x80
 80098dc:	035b      	lsls	r3, r3, #13
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	2498      	movs	r4, #152	; 0x98
 80098e2:	193a      	adds	r2, r7, r4
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	17db      	asrs	r3, r3, #31
 80098e8:	259c      	movs	r5, #156	; 0x9c
 80098ea:	197a      	adds	r2, r7, r5
 80098ec:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 80098ee:	193b      	adds	r3, r7, r4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	105b      	asrs	r3, r3, #1
 80098f4:	61fb      	str	r3, [r7, #28]
 80098f6:	193b      	adds	r3, r7, r4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	07db      	lsls	r3, r3, #31
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	20a0      	movs	r0, #160	; 0xa0
 8009900:	183a      	adds	r2, r7, r0
 8009902:	6853      	ldr	r3, [r2, #4]
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	69b8      	ldr	r0, [r7, #24]
 8009908:	69f9      	ldr	r1, [r7, #28]
 800990a:	1a80      	subs	r0, r0, r2
 800990c:	4199      	sbcs	r1, r3
 800990e:	4a53      	ldr	r2, [pc, #332]	; (8009a5c <_BME280_compensate_P_int64+0x35c>)
 8009910:	2300      	movs	r3, #0
 8009912:	f7f6 fdfb 	bl	800050c <__aeabi_lmul>
 8009916:	0002      	movs	r2, r0
 8009918:	000b      	movs	r3, r1
 800991a:	0010      	movs	r0, r2
 800991c:	0019      	movs	r1, r3
 800991e:	23a8      	movs	r3, #168	; 0xa8
 8009920:	18fa      	adds	r2, r7, r3
 8009922:	6853      	ldr	r3, [r2, #4]
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	f7f6 fdad 	bl	8000484 <__aeabi_ldivmod>
 800992a:	0002      	movs	r2, r0
 800992c:	000b      	movs	r3, r1
 800992e:	1939      	adds	r1, r7, r4
 8009930:	600a      	str	r2, [r1, #0]
 8009932:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) bme280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8009934:	2694      	movs	r6, #148	; 0x94
 8009936:	19ba      	adds	r2, r7, r6
 8009938:	6813      	ldr	r3, [r2, #0]
 800993a:	2232      	movs	r2, #50	; 0x32
 800993c:	5e9b      	ldrsh	r3, [r3, r2]
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	17db      	asrs	r3, r3, #31
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	197a      	adds	r2, r7, r5
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	04da      	lsls	r2, r3, #19
 800994a:	1939      	adds	r1, r7, r4
 800994c:	680b      	ldr	r3, [r1, #0]
 800994e:	0b5b      	lsrs	r3, r3, #13
 8009950:	67bb      	str	r3, [r7, #120]	; 0x78
 8009952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009954:	4313      	orrs	r3, r2
 8009956:	67bb      	str	r3, [r7, #120]	; 0x78
 8009958:	197a      	adds	r2, r7, r5
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	135b      	asrs	r3, r3, #13
 800995e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009964:	6938      	ldr	r0, [r7, #16]
 8009966:	6979      	ldr	r1, [r7, #20]
 8009968:	f7f6 fdd0 	bl	800050c <__aeabi_lmul>
 800996c:	0002      	movs	r2, r0
 800996e:	000b      	movs	r3, r1
 8009970:	0010      	movs	r0, r2
 8009972:	0019      	movs	r1, r3
 8009974:	197a      	adds	r2, r7, r5
 8009976:	6813      	ldr	r3, [r2, #0]
 8009978:	04da      	lsls	r2, r3, #19
 800997a:	193b      	adds	r3, r7, r4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	0b5b      	lsrs	r3, r3, #13
 8009980:	673b      	str	r3, [r7, #112]	; 0x70
 8009982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009984:	4313      	orrs	r3, r2
 8009986:	673b      	str	r3, [r7, #112]	; 0x70
 8009988:	197a      	adds	r2, r7, r5
 800998a:	6813      	ldr	r3, [r2, #0]
 800998c:	135b      	asrs	r3, r3, #13
 800998e:	677b      	str	r3, [r7, #116]	; 0x74
 8009990:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009994:	f7f6 fdba 	bl	800050c <__aeabi_lmul>
 8009998:	0002      	movs	r2, r0
 800999a:	000b      	movs	r3, r1
 800999c:	01d9      	lsls	r1, r3, #7
 800999e:	0e50      	lsrs	r0, r2, #25
 80099a0:	4301      	orrs	r1, r0
 80099a2:	25a8      	movs	r5, #168	; 0xa8
 80099a4:	1978      	adds	r0, r7, r5
 80099a6:	6001      	str	r1, [r0, #0]
 80099a8:	165b      	asrs	r3, r3, #25
 80099aa:	22ac      	movs	r2, #172	; 0xac
 80099ac:	18ba      	adds	r2, r7, r2
 80099ae:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) bme280->dig_P8) * p) >> 19;
 80099b0:	19ba      	adds	r2, r7, r6
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	2230      	movs	r2, #48	; 0x30
 80099b6:	5e9b      	ldrsh	r3, [r3, r2]
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	17db      	asrs	r3, r3, #31
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	193a      	adds	r2, r7, r4
 80099c0:	6853      	ldr	r3, [r2, #4]
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	68b8      	ldr	r0, [r7, #8]
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	f7f6 fda0 	bl	800050c <__aeabi_lmul>
 80099cc:	0002      	movs	r2, r0
 80099ce:	000b      	movs	r3, r1
 80099d0:	0359      	lsls	r1, r3, #13
 80099d2:	0cd0      	lsrs	r0, r2, #19
 80099d4:	4301      	orrs	r1, r0
 80099d6:	20a0      	movs	r0, #160	; 0xa0
 80099d8:	1838      	adds	r0, r7, r0
 80099da:	6001      	str	r1, [r0, #0]
 80099dc:	14db      	asrs	r3, r3, #19
 80099de:	22a4      	movs	r2, #164	; 0xa4
 80099e0:	18ba      	adds	r2, r7, r2
 80099e2:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t) bme280->dig_P7) << 4);
 80099e4:	193a      	adds	r2, r7, r4
 80099e6:	6810      	ldr	r0, [r2, #0]
 80099e8:	6851      	ldr	r1, [r2, #4]
 80099ea:	197a      	adds	r2, r7, r5
 80099ec:	6853      	ldr	r3, [r2, #4]
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	1880      	adds	r0, r0, r2
 80099f2:	4159      	adcs	r1, r3
 80099f4:	23a0      	movs	r3, #160	; 0xa0
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	1812      	adds	r2, r2, r0
 80099fe:	414b      	adcs	r3, r1
 8009a00:	0619      	lsls	r1, r3, #24
 8009a02:	0a10      	lsrs	r0, r2, #8
 8009a04:	66b8      	str	r0, [r7, #104]	; 0x68
 8009a06:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009a08:	4308      	orrs	r0, r1
 8009a0a:	66b8      	str	r0, [r7, #104]	; 0x68
 8009a0c:	121b      	asrs	r3, r3, #8
 8009a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a10:	19bb      	adds	r3, r7, r6
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	222e      	movs	r2, #46	; 0x2e
 8009a16:	5e9b      	ldrsh	r3, [r3, r2]
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	17db      	asrs	r3, r3, #31
 8009a1c:	607b      	str	r3, [r7, #4]
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	000b      	movs	r3, r1
 8009a24:	0f1b      	lsrs	r3, r3, #28
 8009a26:	0010      	movs	r0, r2
 8009a28:	0100      	lsls	r0, r0, #4
 8009a2a:	6678      	str	r0, [r7, #100]	; 0x64
 8009a2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009a2e:	4318      	orrs	r0, r3
 8009a30:	6678      	str	r0, [r7, #100]	; 0x64
 8009a32:	000b      	movs	r3, r1
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	663b      	str	r3, [r7, #96]	; 0x60
 8009a38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009a3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009a40:	1812      	adds	r2, r2, r0
 8009a42:	414b      	adcs	r3, r1
 8009a44:	1939      	adds	r1, r7, r4
 8009a46:	600a      	str	r2, [r1, #0]
 8009a48:	604b      	str	r3, [r1, #4]
	return (uint32_t) p;
 8009a4a:	193b      	adds	r3, r7, r4
 8009a4c:	681b      	ldr	r3, [r3, #0]
}
 8009a4e:	0018      	movs	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b02d      	add	sp, #180	; 0xb4
 8009a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	fffe0c00 	.word	0xfffe0c00
 8009a5c:	00000c35 	.word	0x00000c35

08009a60 <_BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H) {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;
	v_x1_u32r = (bme280->t_fine - ((int32_t) 76800));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	4a2d      	ldr	r2, [pc, #180]	; (8009b24 <_BME280_compensate_H_int32+0xc4>)
 8009a70:	4694      	mov	ip, r2
 8009a72:	4463      	add	r3, ip
 8009a74:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	039a      	lsls	r2, r3, #14
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	213a      	movs	r1, #58	; 0x3a
 8009a7e:	5e5b      	ldrsh	r3, [r3, r1]
 8009a80:	051b      	lsls	r3, r3, #20
 8009a82:	1ad2      	subs	r2, r2, r3
			- (((int32_t) bme280->dig_H5) * v_x1_u32r)) + ((int32_t) 16384))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	213c      	movs	r1, #60	; 0x3c
 8009a88:	5e5b      	ldrsh	r3, [r3, r1]
 8009a8a:	0019      	movs	r1, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	434b      	muls	r3, r1
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	2280      	movs	r2, #128	; 0x80
 8009a94:	01d2      	lsls	r2, r2, #7
 8009a96:	4694      	mov	ip, r2
 8009a98:	4463      	add	r3, ip
			>> 15)
 8009a9a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * ((int32_t) bme280->dig_H6)) >> 10)
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	213e      	movs	r1, #62	; 0x3e
 8009aa0:	5c52      	ldrb	r2, [r2, r1]
 8009aa2:	0011      	movs	r1, r2
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	434a      	muls	r2, r1
 8009aa8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	2038      	movs	r0, #56	; 0x38
 8009aae:	5c09      	ldrb	r1, [r1, r0]
 8009ab0:	0008      	movs	r0, r1
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	4341      	muls	r1, r0
 8009ab6:	12c9      	asrs	r1, r1, #11
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 8009ab8:	2080      	movs	r0, #128	; 0x80
 8009aba:	0200      	lsls	r0, r0, #8
 8009abc:	4684      	mov	ip, r0
 8009abe:	4461      	add	r1, ip
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 8009ac0:	434a      	muls	r2, r1
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 8009ac2:	1292      	asrs	r2, r2, #10
 8009ac4:	2180      	movs	r1, #128	; 0x80
 8009ac6:	0389      	lsls	r1, r1, #14
 8009ac8:	468c      	mov	ip, r1
 8009aca:	4462      	add	r2, ip
					* ((int32_t) bme280->dig_H2) + 8192) >> 14));
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	2036      	movs	r0, #54	; 0x36
 8009ad0:	5e09      	ldrsh	r1, [r1, r0]
 8009ad2:	434a      	muls	r2, r1
 8009ad4:	2180      	movs	r1, #128	; 0x80
 8009ad6:	0189      	lsls	r1, r1, #6
 8009ad8:	468c      	mov	ip, r1
 8009ada:	4462      	add	r2, ip
 8009adc:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 8009ade:	4353      	muls	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	13db      	asrs	r3, r3, #15
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	13d2      	asrs	r2, r2, #15
 8009aea:	4353      	muls	r3, r2
 8009aec:	11db      	asrs	r3, r3, #7
					* ((int32_t) bme280->dig_H1)) >> 4));
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	2134      	movs	r1, #52	; 0x34
 8009af2:	5c52      	ldrb	r2, [r2, r1]
 8009af4:	4353      	muls	r3, r2
 8009af6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	da00      	bge.n	8009b06 <_BME280_compensate_H_int32+0xa6>
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	22c8      	movs	r2, #200	; 0xc8
 8009b0c:	0552      	lsls	r2, r2, #21
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	dd01      	ble.n	8009b16 <_BME280_compensate_H_int32+0xb6>
 8009b12:	23c8      	movs	r3, #200	; 0xc8
 8009b14:	055b      	lsls	r3, r3, #21
 8009b16:	60fb      	str	r3, [r7, #12]
	return (uint32_t) (v_x1_u32r >> 12);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	131b      	asrs	r3, r3, #12
}
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	b004      	add	sp, #16
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	fffed400 	.word	0xfffed400

08009b28 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	2201      	movs	r2, #1
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	609a      	str	r2, [r3, #8]
}
 8009b3c:	46c0      	nop			; (mov r8, r8)
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	b002      	add	sp, #8
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2218      	movs	r2, #24
 8009b54:	4393      	bics	r3, r2
 8009b56:	001a      	movs	r2, r3
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	609a      	str	r2, [r3, #8]
}
 8009b60:	46c0      	nop			; (mov r8, r8)
 8009b62:	46bd      	mov	sp, r7
 8009b64:	b002      	add	sp, #8
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	615a      	str	r2, [r3, #20]
}
 8009b78:	46c0      	nop			; (mov r8, r8)
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	b002      	add	sp, #8
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	601a      	str	r2, [r3, #0]
}
 8009b90:	46c0      	nop			; (mov r8, r8)
 8009b92:	46bd      	mov	sp, r7
 8009b94:	b002      	add	sp, #8
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	000a      	movs	r2, r1
 8009ba2:	1cbb      	adds	r3, r7, #2
 8009ba4:	801a      	strh	r2, [r3, #0]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1cba      	adds	r2, r7, #2
 8009bae:	8812      	ldrh	r2, [r2, #0]
 8009bb0:	801a      	strh	r2, [r3, #0]
}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b004      	add	sp, #16
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
}
 8009bc8:	0018      	movs	r0, r3
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009bda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	4013      	ands	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009bee:	68fb      	ldr	r3, [r7, #12]
}
 8009bf0:	46c0      	nop			; (mov r8, r8)
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	b004      	add	sp, #16
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	40021000 	.word	0x40021000

08009bfc <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8009bfc:	b5b0      	push	{r4, r5, r7, lr}
 8009bfe:	b090      	sub	sp, #64	; 0x40
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	0002      	movs	r2, r0
 8009c04:	1dfb      	adds	r3, r7, #7
 8009c06:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8009c08:	231a      	movs	r3, #26
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	2205      	movs	r2, #5
 8009c0e:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8009c10:	2300      	movs	r3, #0
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c14:	2300      	movs	r3, #0
 8009c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c18:	2300      	movs	r3, #0
 8009c1a:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8009c20:	2300      	movs	r3, #0
 8009c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c24:	2300      	movs	r3, #0
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8009c28:	2300      	movs	r3, #0
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8009c34:	2200      	movs	r2, #0
 8009c36:	2300      	movs	r3, #0
 8009c38:	613a      	str	r2, [r7, #16]
 8009c3a:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8009c3c:	231b      	movs	r3, #27
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]

  EE_Status status = EE_OK;
 8009c44:	230e      	movs	r3, #14
 8009c46:	18fb      	adds	r3, r7, r3
 8009c48:	2200      	movs	r2, #0
 8009c4a:	801a      	strh	r2, [r3, #0]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8009c4c:	f001 fe23 	bl	800b896 <FI_CheckBankConfig>
 8009c50:	1e03      	subs	r3, r0, #0
 8009c52:	d002      	beq.n	8009c5a <EE_Init+0x5e>
  {
    return EE_INVALID_BANK_CFG;
 8009c54:	230e      	movs	r3, #14
 8009c56:	f000 fd56 	bl	800a706 <EE_Init+0xb0a>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8009c5a:	f001 fd9d 	bl	800b798 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8009c5e:	4ba6      	ldr	r3, [pc, #664]	; (8009ef8 <EE_Init+0x2fc>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	701a      	strb	r2, [r3, #0]
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009c64:	4ba5      	ldr	r3, [pc, #660]	; (8009efc <EE_Init+0x300>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	029a      	lsls	r2, r3, #10
 8009c6a:	23ff      	movs	r3, #255	; 0xff
 8009c6c:	029b      	lsls	r3, r3, #10
 8009c6e:	401a      	ands	r2, r3
 8009c70:	23b8      	movs	r3, #184	; 0xb8
 8009c72:	025b      	lsls	r3, r3, #9
 8009c74:	0011      	movs	r1, r2
 8009c76:	0018      	movs	r0, r3
 8009c78:	f7f6 fad6 	bl	8000228 <__aeabi_uidivmod>
 8009c7c:	000b      	movs	r3, r1
 8009c7e:	0adb      	lsrs	r3, r3, #11
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c82:	e035      	b.n	8009cf0 <EE_Init+0xf4>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c86:	2280      	movs	r2, #128	; 0x80
 8009c88:	0252      	lsls	r2, r2, #9
 8009c8a:	4694      	mov	ip, r2
 8009c8c:	4463      	add	r3, ip
 8009c8e:	02dc      	lsls	r4, r3, #11
 8009c90:	4b9a      	ldr	r3, [pc, #616]	; (8009efc <EE_Init+0x300>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	029a      	lsls	r2, r3, #10
 8009c96:	23ff      	movs	r3, #255	; 0xff
 8009c98:	029b      	lsls	r3, r3, #10
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	0019      	movs	r1, r3
 8009c9e:	23b8      	movs	r3, #184	; 0xb8
 8009ca0:	0258      	lsls	r0, r3, #9
 8009ca2:	f7f6 fa3b 	bl	800011c <__udivsi3>
 8009ca6:	0003      	movs	r3, r0
 8009ca8:	0019      	movs	r1, r3
 8009caa:	4b94      	ldr	r3, [pc, #592]	; (8009efc <EE_Init+0x300>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	029a      	lsls	r2, r3, #10
 8009cb0:	23ff      	movs	r3, #255	; 0xff
 8009cb2:	029b      	lsls	r3, r3, #10
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	434b      	muls	r3, r1
 8009cb8:	18e3      	adds	r3, r4, r3
 8009cba:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc0:	e00e      	b.n	8009ce0 <EE_Init+0xe4>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8009cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	18d2      	adds	r2, r2, r3
 8009cc8:	4b8d      	ldr	r3, [pc, #564]	; (8009f00 <EE_Init+0x304>)
 8009cca:	601a      	str	r2, [r3, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8009ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd0:	18d3      	adds	r3, r2, r3
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	613a      	str	r2, [r7, #16]
 8009cd8:	617b      	str	r3, [r7, #20]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cdc:	3308      	adds	r3, #8
 8009cde:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce2:	2380      	movs	r3, #128	; 0x80
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d3eb      	bcc.n	8009cc2 <EE_Init+0xc6>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cec:	3301      	adds	r3, #1
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf0:	4b82      	ldr	r3, [pc, #520]	; (8009efc <EE_Init+0x300>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	029a      	lsls	r2, r3, #10
 8009cf6:	23ff      	movs	r3, #255	; 0xff
 8009cf8:	029b      	lsls	r3, r3, #10
 8009cfa:	401a      	ands	r2, r3
 8009cfc:	23b8      	movs	r3, #184	; 0xb8
 8009cfe:	025b      	lsls	r3, r3, #9
 8009d00:	0011      	movs	r1, r2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f7f6 fa90 	bl	8000228 <__aeabi_uidivmod>
 8009d08:	000b      	movs	r3, r1
 8009d0a:	0adb      	lsrs	r3, r3, #11
 8009d0c:	3310      	adds	r3, #16
 8009d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d3b7      	bcc.n	8009c84 <EE_Init+0x88>
     Address=(0x8000000|(FLASH->ECCR & 0x000FFFFF)); //Recovery of address where ECC error occured
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8009d14:	4b78      	ldr	r3, [pc, #480]	; (8009ef8 <EE_Init+0x2fc>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009d1a:	4b78      	ldr	r3, [pc, #480]	; (8009efc <EE_Init+0x300>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	029a      	lsls	r2, r3, #10
 8009d20:	23ff      	movs	r3, #255	; 0xff
 8009d22:	029b      	lsls	r3, r3, #10
 8009d24:	401a      	ands	r2, r3
 8009d26:	23b8      	movs	r3, #184	; 0xb8
 8009d28:	025b      	lsls	r3, r3, #9
 8009d2a:	0011      	movs	r1, r2
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f7f6 fa7b 	bl	8000228 <__aeabi_uidivmod>
 8009d32:	000b      	movs	r3, r1
 8009d34:	0adb      	lsrs	r3, r3, #11
 8009d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d38:	e041      	b.n	8009dbe <EE_Init+0x1c2>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3c:	2280      	movs	r2, #128	; 0x80
 8009d3e:	0252      	lsls	r2, r2, #9
 8009d40:	4694      	mov	ip, r2
 8009d42:	4463      	add	r3, ip
 8009d44:	02dc      	lsls	r4, r3, #11
 8009d46:	4b6d      	ldr	r3, [pc, #436]	; (8009efc <EE_Init+0x300>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	029a      	lsls	r2, r3, #10
 8009d4c:	23ff      	movs	r3, #255	; 0xff
 8009d4e:	029b      	lsls	r3, r3, #10
 8009d50:	4013      	ands	r3, r2
 8009d52:	0019      	movs	r1, r3
 8009d54:	23b8      	movs	r3, #184	; 0xb8
 8009d56:	0258      	lsls	r0, r3, #9
 8009d58:	f7f6 f9e0 	bl	800011c <__udivsi3>
 8009d5c:	0003      	movs	r3, r0
 8009d5e:	0019      	movs	r1, r3
 8009d60:	4b66      	ldr	r3, [pc, #408]	; (8009efc <EE_Init+0x300>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	029a      	lsls	r2, r3, #10
 8009d66:	23ff      	movs	r3, #255	; 0xff
 8009d68:	029b      	lsls	r3, r3, #10
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	434b      	muls	r3, r1
 8009d6e:	18e3      	adds	r3, r4, r3
 8009d70:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8009d72:	251a      	movs	r5, #26
 8009d74:	197c      	adds	r4, r7, r5
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f001 fcbd 	bl	800b6f8 <GetPageState>
 8009d7e:	0003      	movs	r3, r0
 8009d80:	7023      	strb	r3, [r4, #0]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8009d82:	197b      	adds	r3, r7, r5
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d003      	beq.n	8009d92 <EE_Init+0x196>
 8009d8a:	197b      	adds	r3, r7, r5
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d103      	bne.n	8009d9a <EE_Init+0x19e>
    {
      nbactivereceivepage++;
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	3301      	adds	r3, #1
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d98:	e00e      	b.n	8009db8 <EE_Init+0x1bc>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8009d9a:	231a      	movs	r3, #26
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d109      	bne.n	8009db8 <EE_Init+0x1bc>
    {
      if (nbvalidpage == 0U)
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <EE_Init+0x1b2>
      {
        firstvalidpage = page;
 8009daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dac:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8009dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	3301      	adds	r3, #1
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dba:	3301      	adds	r3, #1
 8009dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dbe:	4b4f      	ldr	r3, [pc, #316]	; (8009efc <EE_Init+0x300>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	029a      	lsls	r2, r3, #10
 8009dc4:	23ff      	movs	r3, #255	; 0xff
 8009dc6:	029b      	lsls	r3, r3, #10
 8009dc8:	401a      	ands	r2, r3
 8009dca:	23b8      	movs	r3, #184	; 0xb8
 8009dcc:	025b      	lsls	r3, r3, #9
 8009dce:	0011      	movs	r1, r2
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f7f6 fa29 	bl	8000228 <__aeabi_uidivmod>
 8009dd6:	000b      	movs	r3, r1
 8009dd8:	0adb      	lsrs	r3, r3, #11
 8009dda:	3310      	adds	r3, #16
 8009ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d3ab      	bcc.n	8009d3a <EE_Init+0x13e>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d177      	bne.n	8009ed8 <EE_Init+0x2dc>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d06e      	beq.n	8009ecc <EE_Init+0x2d0>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8009dee:	4b43      	ldr	r3, [pc, #268]	; (8009efc <EE_Init+0x300>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	029a      	lsls	r2, r3, #10
 8009df4:	23ff      	movs	r3, #255	; 0xff
 8009df6:	029b      	lsls	r3, r3, #10
 8009df8:	401a      	ands	r2, r3
 8009dfa:	23b8      	movs	r3, #184	; 0xb8
 8009dfc:	025b      	lsls	r3, r3, #9
 8009dfe:	0011      	movs	r1, r2
 8009e00:	0018      	movs	r0, r3
 8009e02:	f7f6 fa11 	bl	8000228 <__aeabi_uidivmod>
 8009e06:	000b      	movs	r3, r1
 8009e08:	0adb      	lsrs	r3, r3, #11
 8009e0a:	6a3a      	ldr	r2, [r7, #32]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	330f      	adds	r3, #15
 8009e10:	220f      	movs	r2, #15
 8009e12:	4013      	ands	r3, r2
 8009e14:	001c      	movs	r4, r3
 8009e16:	4b39      	ldr	r3, [pc, #228]	; (8009efc <EE_Init+0x300>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	029a      	lsls	r2, r3, #10
 8009e1c:	23ff      	movs	r3, #255	; 0xff
 8009e1e:	029b      	lsls	r3, r3, #10
 8009e20:	401a      	ands	r2, r3
 8009e22:	23b8      	movs	r3, #184	; 0xb8
 8009e24:	025b      	lsls	r3, r3, #9
 8009e26:	0011      	movs	r1, r2
 8009e28:	0018      	movs	r0, r3
 8009e2a:	f7f6 f9fd 	bl	8000228 <__aeabi_uidivmod>
 8009e2e:	000b      	movs	r3, r1
 8009e30:	0adb      	lsrs	r3, r3, #11
 8009e32:	18e3      	adds	r3, r4, r3
 8009e34:	2280      	movs	r2, #128	; 0x80
 8009e36:	0252      	lsls	r2, r2, #9
 8009e38:	4694      	mov	ip, r2
 8009e3a:	4463      	add	r3, ip
 8009e3c:	02dc      	lsls	r4, r3, #11
 8009e3e:	4b2f      	ldr	r3, [pc, #188]	; (8009efc <EE_Init+0x300>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	029a      	lsls	r2, r3, #10
 8009e44:	23ff      	movs	r3, #255	; 0xff
 8009e46:	029b      	lsls	r3, r3, #10
 8009e48:	4013      	ands	r3, r2
 8009e4a:	0019      	movs	r1, r3
 8009e4c:	23b8      	movs	r3, #184	; 0xb8
 8009e4e:	0258      	lsls	r0, r3, #9
 8009e50:	f7f6 f964 	bl	800011c <__udivsi3>
 8009e54:	0003      	movs	r3, r0
 8009e56:	0019      	movs	r1, r3
 8009e58:	4b28      	ldr	r3, [pc, #160]	; (8009efc <EE_Init+0x300>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	029a      	lsls	r2, r3, #10
 8009e5e:	23ff      	movs	r3, #255	; 0xff
 8009e60:	029b      	lsls	r3, r3, #10
 8009e62:	4013      	ands	r3, r2
 8009e64:	434b      	muls	r3, r1
 8009e66:	18e3      	adds	r3, r4, r3
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f001 fc45 	bl	800b6f8 <GetPageState>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d131      	bne.n	8009ed8 <EE_Init+0x2dc>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8009e74:	4b21      	ldr	r3, [pc, #132]	; (8009efc <EE_Init+0x300>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	029a      	lsls	r2, r3, #10
 8009e7a:	23ff      	movs	r3, #255	; 0xff
 8009e7c:	029b      	lsls	r3, r3, #10
 8009e7e:	401a      	ands	r2, r3
 8009e80:	23b8      	movs	r3, #184	; 0xb8
 8009e82:	025b      	lsls	r3, r3, #9
 8009e84:	0011      	movs	r1, r2
 8009e86:	0018      	movs	r0, r3
 8009e88:	f7f6 f9ce 	bl	8000228 <__aeabi_uidivmod>
 8009e8c:	000b      	movs	r3, r1
 8009e8e:	0adb      	lsrs	r3, r3, #11
 8009e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	3301      	adds	r3, #1
 8009e96:	220f      	movs	r2, #15
 8009e98:	4013      	ands	r3, r2
 8009e9a:	001c      	movs	r4, r3
 8009e9c:	4b17      	ldr	r3, [pc, #92]	; (8009efc <EE_Init+0x300>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	029a      	lsls	r2, r3, #10
 8009ea2:	23ff      	movs	r3, #255	; 0xff
 8009ea4:	029b      	lsls	r3, r3, #10
 8009ea6:	401a      	ands	r2, r3
 8009ea8:	23b8      	movs	r3, #184	; 0xb8
 8009eaa:	025b      	lsls	r3, r3, #9
 8009eac:	0011      	movs	r1, r2
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f7f6 f9ba 	bl	8000228 <__aeabi_uidivmod>
 8009eb4:	000b      	movs	r3, r1
 8009eb6:	0adb      	lsrs	r3, r3, #11
 8009eb8:	18e3      	adds	r3, r4, r3
 8009eba:	2101      	movs	r1, #1
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f001 fb49 	bl	800b554 <SetPageState>
 8009ec2:	1e03      	subs	r3, r0, #0
 8009ec4:	d008      	beq.n	8009ed8 <EE_Init+0x2dc>
        {
          return EE_WRITE_ERROR;
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	f000 fc1d 	bl	800a706 <EE_Init+0xb0a>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8009ecc:	2000      	movs	r0, #0
 8009ece:	f000 fc21 	bl	800a714 <EE_Format>
 8009ed2:	0003      	movs	r3, r0
 8009ed4:	f000 fc17 	bl	800a706 <EE_Init+0xb0a>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009ed8:	4b08      	ldr	r3, [pc, #32]	; (8009efc <EE_Init+0x300>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	029a      	lsls	r2, r3, #10
 8009ede:	23ff      	movs	r3, #255	; 0xff
 8009ee0:	029b      	lsls	r3, r3, #10
 8009ee2:	401a      	ands	r2, r3
 8009ee4:	23b8      	movs	r3, #184	; 0xb8
 8009ee6:	025b      	lsls	r3, r3, #9
 8009ee8:	0011      	movs	r1, r2
 8009eea:	0018      	movs	r0, r3
 8009eec:	f7f6 f99c 	bl	8000228 <__aeabi_uidivmod>
 8009ef0:	000b      	movs	r3, r1
 8009ef2:	0adb      	lsrs	r3, r3, #11
 8009ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ef6:	e105      	b.n	800a104 <EE_Init+0x508>
 8009ef8:	20000140 	.word	0x20000140
 8009efc:	1fff75e0 	.word	0x1fff75e0
 8009f00:	2000013c 	.word	0x2000013c
  {
    pageaddress = PAGE_ADDRESS(page);
 8009f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f06:	2280      	movs	r2, #128	; 0x80
 8009f08:	0252      	lsls	r2, r2, #9
 8009f0a:	4694      	mov	ip, r2
 8009f0c:	4463      	add	r3, ip
 8009f0e:	02dc      	lsls	r4, r3, #11
 8009f10:	4bdb      	ldr	r3, [pc, #876]	; (800a280 <EE_Init+0x684>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	029a      	lsls	r2, r3, #10
 8009f16:	23ff      	movs	r3, #255	; 0xff
 8009f18:	029b      	lsls	r3, r3, #10
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	0019      	movs	r1, r3
 8009f1e:	23b8      	movs	r3, #184	; 0xb8
 8009f20:	0258      	lsls	r0, r3, #9
 8009f22:	f7f6 f8fb 	bl	800011c <__udivsi3>
 8009f26:	0003      	movs	r3, r0
 8009f28:	0019      	movs	r1, r3
 8009f2a:	4bd5      	ldr	r3, [pc, #852]	; (800a280 <EE_Init+0x684>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	029a      	lsls	r2, r3, #10
 8009f30:	23ff      	movs	r3, #255	; 0xff
 8009f32:	029b      	lsls	r3, r3, #10
 8009f34:	4013      	ands	r3, r2
 8009f36:	434b      	muls	r3, r1
 8009f38:	18e3      	adds	r3, r4, r3
 8009f3a:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8009f3c:	251a      	movs	r5, #26
 8009f3e:	197c      	adds	r4, r7, r5
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	0018      	movs	r0, r3
 8009f44:	f001 fbd8 	bl	800b6f8 <GetPageState>
 8009f48:	0003      	movs	r3, r0
 8009f4a:	7023      	strb	r3, [r4, #0]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8009f4c:	197b      	adds	r3, r7, r5
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d000      	beq.n	8009f56 <EE_Init+0x35a>
 8009f54:	e0d3      	b.n	800a0fe <EE_Init+0x502>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8009f56:	4bca      	ldr	r3, [pc, #808]	; (800a280 <EE_Init+0x684>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	029a      	lsls	r2, r3, #10
 8009f5c:	23ff      	movs	r3, #255	; 0xff
 8009f5e:	029b      	lsls	r3, r3, #10
 8009f60:	401a      	ands	r2, r3
 8009f62:	23b8      	movs	r3, #184	; 0xb8
 8009f64:	025b      	lsls	r3, r3, #9
 8009f66:	0011      	movs	r1, r2
 8009f68:	0018      	movs	r0, r3
 8009f6a:	f7f6 f95d 	bl	8000228 <__aeabi_uidivmod>
 8009f6e:	000b      	movs	r3, r1
 8009f70:	0adb      	lsrs	r3, r3, #11
 8009f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d05e      	beq.n	800a036 <EE_Init+0x43a>
 8009f78:	4bc1      	ldr	r3, [pc, #772]	; (800a280 <EE_Init+0x684>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	029a      	lsls	r2, r3, #10
 8009f7e:	23ff      	movs	r3, #255	; 0xff
 8009f80:	029b      	lsls	r3, r3, #10
 8009f82:	401a      	ands	r2, r3
 8009f84:	23b8      	movs	r3, #184	; 0xb8
 8009f86:	025b      	lsls	r3, r3, #9
 8009f88:	0011      	movs	r1, r2
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f7f6 f94c 	bl	8000228 <__aeabi_uidivmod>
 8009f90:	000b      	movs	r3, r1
 8009f92:	0adb      	lsrs	r3, r3, #11
 8009f94:	3308      	adds	r3, #8
 8009f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d04c      	beq.n	800a036 <EE_Init+0x43a>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8009f9c:	4bb8      	ldr	r3, [pc, #736]	; (800a280 <EE_Init+0x684>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	029a      	lsls	r2, r3, #10
 8009fa2:	23ff      	movs	r3, #255	; 0xff
 8009fa4:	029b      	lsls	r3, r3, #10
 8009fa6:	401a      	ands	r2, r3
 8009fa8:	23b8      	movs	r3, #184	; 0xb8
 8009faa:	025b      	lsls	r3, r3, #9
 8009fac:	0011      	movs	r1, r2
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f7f6 f93a 	bl	8000228 <__aeabi_uidivmod>
 8009fb4:	000b      	movs	r3, r1
 8009fb6:	0adb      	lsrs	r3, r3, #11
 8009fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	330f      	adds	r3, #15
 8009fbe:	220f      	movs	r2, #15
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	001c      	movs	r4, r3
 8009fc4:	4bae      	ldr	r3, [pc, #696]	; (800a280 <EE_Init+0x684>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	029a      	lsls	r2, r3, #10
 8009fca:	23ff      	movs	r3, #255	; 0xff
 8009fcc:	029b      	lsls	r3, r3, #10
 8009fce:	401a      	ands	r2, r3
 8009fd0:	23b8      	movs	r3, #184	; 0xb8
 8009fd2:	025b      	lsls	r3, r3, #9
 8009fd4:	0011      	movs	r1, r2
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	f7f6 f926 	bl	8000228 <__aeabi_uidivmod>
 8009fdc:	000b      	movs	r3, r1
 8009fde:	0adb      	lsrs	r3, r3, #11
 8009fe0:	18e3      	adds	r3, r4, r3
 8009fe2:	2280      	movs	r2, #128	; 0x80
 8009fe4:	0252      	lsls	r2, r2, #9
 8009fe6:	4694      	mov	ip, r2
 8009fe8:	4463      	add	r3, ip
 8009fea:	02dc      	lsls	r4, r3, #11
 8009fec:	4ba4      	ldr	r3, [pc, #656]	; (800a280 <EE_Init+0x684>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	029a      	lsls	r2, r3, #10
 8009ff2:	23ff      	movs	r3, #255	; 0xff
 8009ff4:	029b      	lsls	r3, r3, #10
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	23b8      	movs	r3, #184	; 0xb8
 8009ffc:	0258      	lsls	r0, r3, #9
 8009ffe:	f7f6 f88d 	bl	800011c <__udivsi3>
 800a002:	0003      	movs	r3, r0
 800a004:	0019      	movs	r1, r3
 800a006:	4b9e      	ldr	r3, [pc, #632]	; (800a280 <EE_Init+0x684>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	029a      	lsls	r2, r3, #10
 800a00c:	23ff      	movs	r3, #255	; 0xff
 800a00e:	029b      	lsls	r3, r3, #10
 800a010:	4013      	ands	r3, r2
 800a012:	434b      	muls	r3, r1
 800a014:	18e3      	adds	r3, r4, r3
 800a016:	0018      	movs	r0, r3
 800a018:	f001 fb6e 	bl	800b6f8 <GetPageState>
 800a01c:	0003      	movs	r3, r0
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d104      	bne.n	800a02c <EE_Init+0x430>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a022:	231b      	movs	r3, #27
 800a024:	18fb      	adds	r3, r7, r3
 800a026:	2200      	movs	r2, #0
 800a028:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a02a:	e04f      	b.n	800a0cc <EE_Init+0x4d0>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a02c:	231b      	movs	r3, #27
 800a02e:	18fb      	adds	r3, r7, r3
 800a030:	2201      	movs	r2, #1
 800a032:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a034:	e04a      	b.n	800a0cc <EE_Init+0x4d0>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a036:	4b92      	ldr	r3, [pc, #584]	; (800a280 <EE_Init+0x684>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	029a      	lsls	r2, r3, #10
 800a03c:	23ff      	movs	r3, #255	; 0xff
 800a03e:	029b      	lsls	r3, r3, #10
 800a040:	401a      	ands	r2, r3
 800a042:	23b8      	movs	r3, #184	; 0xb8
 800a044:	025b      	lsls	r3, r3, #9
 800a046:	0011      	movs	r1, r2
 800a048:	0018      	movs	r0, r3
 800a04a:	f7f6 f8ed 	bl	8000228 <__aeabi_uidivmod>
 800a04e:	000b      	movs	r3, r1
 800a050:	0adb      	lsrs	r3, r3, #11
 800a052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	3301      	adds	r3, #1
 800a058:	220f      	movs	r2, #15
 800a05a:	4013      	ands	r3, r2
 800a05c:	001c      	movs	r4, r3
 800a05e:	4b88      	ldr	r3, [pc, #544]	; (800a280 <EE_Init+0x684>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	029a      	lsls	r2, r3, #10
 800a064:	23ff      	movs	r3, #255	; 0xff
 800a066:	029b      	lsls	r3, r3, #10
 800a068:	401a      	ands	r2, r3
 800a06a:	23b8      	movs	r3, #184	; 0xb8
 800a06c:	025b      	lsls	r3, r3, #9
 800a06e:	0011      	movs	r1, r2
 800a070:	0018      	movs	r0, r3
 800a072:	f7f6 f8d9 	bl	8000228 <__aeabi_uidivmod>
 800a076:	000b      	movs	r3, r1
 800a078:	0adb      	lsrs	r3, r3, #11
 800a07a:	18e3      	adds	r3, r4, r3
 800a07c:	2280      	movs	r2, #128	; 0x80
 800a07e:	0252      	lsls	r2, r2, #9
 800a080:	4694      	mov	ip, r2
 800a082:	4463      	add	r3, ip
 800a084:	02dc      	lsls	r4, r3, #11
 800a086:	4b7e      	ldr	r3, [pc, #504]	; (800a280 <EE_Init+0x684>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	029a      	lsls	r2, r3, #10
 800a08c:	23ff      	movs	r3, #255	; 0xff
 800a08e:	029b      	lsls	r3, r3, #10
 800a090:	4013      	ands	r3, r2
 800a092:	0019      	movs	r1, r3
 800a094:	23b8      	movs	r3, #184	; 0xb8
 800a096:	0258      	lsls	r0, r3, #9
 800a098:	f7f6 f840 	bl	800011c <__udivsi3>
 800a09c:	0003      	movs	r3, r0
 800a09e:	0019      	movs	r1, r3
 800a0a0:	4b77      	ldr	r3, [pc, #476]	; (800a280 <EE_Init+0x684>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	029a      	lsls	r2, r3, #10
 800a0a6:	23ff      	movs	r3, #255	; 0xff
 800a0a8:	029b      	lsls	r3, r3, #10
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	434b      	muls	r3, r1
 800a0ae:	18e3      	adds	r3, r4, r3
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f001 fb21 	bl	800b6f8 <GetPageState>
 800a0b6:	1e03      	subs	r3, r0, #0
 800a0b8:	d104      	bne.n	800a0c4 <EE_Init+0x4c8>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a0ba:	231b      	movs	r3, #27
 800a0bc:	18fb      	adds	r3, r7, r3
 800a0be:	2200      	movs	r2, #0
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e003      	b.n	800a0cc <EE_Init+0x4d0>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a0c4:	231b      	movs	r3, #27
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 800a0cc:	231b      	movs	r3, #27
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d113      	bne.n	800a0fe <EE_Init+0x502>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 800a0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b6a      	ldr	r3, [pc, #424]	; (800a284 <EE_Init+0x688>)
 800a0dc:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 800a0de:	2201      	movs	r2, #1
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	f000 ff36 	bl	800af54 <PagesTransfer>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	2380      	movs	r3, #128	; 0x80
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d001      	beq.n	800a0f8 <EE_Init+0x4fc>
        {
          return EE_TRANSFER_ERROR;
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	e306      	b.n	800a706 <EE_Init+0xb0a>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 800a0fc:	e015      	b.n	800a12a <EE_Init+0x52e>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a100:	3301      	adds	r3, #1
 800a102:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a104:	4b5e      	ldr	r3, [pc, #376]	; (800a280 <EE_Init+0x684>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	029a      	lsls	r2, r3, #10
 800a10a:	23ff      	movs	r3, #255	; 0xff
 800a10c:	029b      	lsls	r3, r3, #10
 800a10e:	401a      	ands	r2, r3
 800a110:	23b8      	movs	r3, #184	; 0xb8
 800a112:	025b      	lsls	r3, r3, #9
 800a114:	0011      	movs	r1, r2
 800a116:	0018      	movs	r0, r3
 800a118:	f7f6 f886 	bl	8000228 <__aeabi_uidivmod>
 800a11c:	000b      	movs	r3, r1
 800a11e:	0adb      	lsrs	r3, r3, #11
 800a120:	3310      	adds	r3, #16
 800a122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a124:	429a      	cmp	r2, r3
 800a126:	d200      	bcs.n	800a12a <EE_Init+0x52e>
 800a128:	e6ec      	b.n	8009f04 <EE_Init+0x308>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a12e:	4b54      	ldr	r3, [pc, #336]	; (800a280 <EE_Init+0x684>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	029a      	lsls	r2, r3, #10
 800a134:	23ff      	movs	r3, #255	; 0xff
 800a136:	029b      	lsls	r3, r3, #10
 800a138:	401a      	ands	r2, r3
 800a13a:	23b8      	movs	r3, #184	; 0xb8
 800a13c:	025b      	lsls	r3, r3, #9
 800a13e:	0011      	movs	r1, r2
 800a140:	0018      	movs	r0, r3
 800a142:	f7f6 f871 	bl	8000228 <__aeabi_uidivmod>
 800a146:	000b      	movs	r3, r1
 800a148:	0adb      	lsrs	r3, r3, #11
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a14c:	e103      	b.n	800a356 <EE_Init+0x75a>
  {
    pageaddress = PAGE_ADDRESS(page);
 800a14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a150:	2280      	movs	r2, #128	; 0x80
 800a152:	0252      	lsls	r2, r2, #9
 800a154:	4694      	mov	ip, r2
 800a156:	4463      	add	r3, ip
 800a158:	02dc      	lsls	r4, r3, #11
 800a15a:	4b49      	ldr	r3, [pc, #292]	; (800a280 <EE_Init+0x684>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	029a      	lsls	r2, r3, #10
 800a160:	23ff      	movs	r3, #255	; 0xff
 800a162:	029b      	lsls	r3, r3, #10
 800a164:	4013      	ands	r3, r2
 800a166:	0019      	movs	r1, r3
 800a168:	23b8      	movs	r3, #184	; 0xb8
 800a16a:	0258      	lsls	r0, r3, #9
 800a16c:	f7f5 ffd6 	bl	800011c <__udivsi3>
 800a170:	0003      	movs	r3, r0
 800a172:	0019      	movs	r1, r3
 800a174:	4b42      	ldr	r3, [pc, #264]	; (800a280 <EE_Init+0x684>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	029a      	lsls	r2, r3, #10
 800a17a:	23ff      	movs	r3, #255	; 0xff
 800a17c:	029b      	lsls	r3, r3, #10
 800a17e:	4013      	ands	r3, r2
 800a180:	434b      	muls	r3, r1
 800a182:	18e3      	adds	r3, r4, r3
 800a184:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a186:	251a      	movs	r5, #26
 800a188:	197c      	adds	r4, r7, r5
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	0018      	movs	r0, r3
 800a18e:	f001 fab3 	bl	800b6f8 <GetPageState>
 800a192:	0003      	movs	r3, r0
 800a194:	7023      	strb	r3, [r4, #0]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800a196:	197b      	adds	r3, r7, r5
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d000      	beq.n	800a1a0 <EE_Init+0x5a4>
 800a19e:	e0d0      	b.n	800a342 <EE_Init+0x746>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a1a0:	4b37      	ldr	r3, [pc, #220]	; (800a280 <EE_Init+0x684>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	029a      	lsls	r2, r3, #10
 800a1a6:	23ff      	movs	r3, #255	; 0xff
 800a1a8:	029b      	lsls	r3, r3, #10
 800a1aa:	401a      	ands	r2, r3
 800a1ac:	23b8      	movs	r3, #184	; 0xb8
 800a1ae:	025b      	lsls	r3, r3, #9
 800a1b0:	0011      	movs	r1, r2
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7f6 f838 	bl	8000228 <__aeabi_uidivmod>
 800a1b8:	000b      	movs	r3, r1
 800a1ba:	0adb      	lsrs	r3, r3, #11
 800a1bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d062      	beq.n	800a288 <EE_Init+0x68c>
 800a1c2:	4b2f      	ldr	r3, [pc, #188]	; (800a280 <EE_Init+0x684>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	029a      	lsls	r2, r3, #10
 800a1c8:	23ff      	movs	r3, #255	; 0xff
 800a1ca:	029b      	lsls	r3, r3, #10
 800a1cc:	401a      	ands	r2, r3
 800a1ce:	23b8      	movs	r3, #184	; 0xb8
 800a1d0:	025b      	lsls	r3, r3, #9
 800a1d2:	0011      	movs	r1, r2
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7f6 f827 	bl	8000228 <__aeabi_uidivmod>
 800a1da:	000b      	movs	r3, r1
 800a1dc:	0adb      	lsrs	r3, r3, #11
 800a1de:	3308      	adds	r3, #8
 800a1e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d050      	beq.n	800a288 <EE_Init+0x68c>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a1e6:	4b26      	ldr	r3, [pc, #152]	; (800a280 <EE_Init+0x684>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	029a      	lsls	r2, r3, #10
 800a1ec:	23ff      	movs	r3, #255	; 0xff
 800a1ee:	029b      	lsls	r3, r3, #10
 800a1f0:	401a      	ands	r2, r3
 800a1f2:	23b8      	movs	r3, #184	; 0xb8
 800a1f4:	025b      	lsls	r3, r3, #9
 800a1f6:	0011      	movs	r1, r2
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7f6 f815 	bl	8000228 <__aeabi_uidivmod>
 800a1fe:	000b      	movs	r3, r1
 800a200:	0adb      	lsrs	r3, r3, #11
 800a202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	330f      	adds	r3, #15
 800a208:	220f      	movs	r2, #15
 800a20a:	4013      	ands	r3, r2
 800a20c:	001c      	movs	r4, r3
 800a20e:	4b1c      	ldr	r3, [pc, #112]	; (800a280 <EE_Init+0x684>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	029a      	lsls	r2, r3, #10
 800a214:	23ff      	movs	r3, #255	; 0xff
 800a216:	029b      	lsls	r3, r3, #10
 800a218:	401a      	ands	r2, r3
 800a21a:	23b8      	movs	r3, #184	; 0xb8
 800a21c:	025b      	lsls	r3, r3, #9
 800a21e:	0011      	movs	r1, r2
 800a220:	0018      	movs	r0, r3
 800a222:	f7f6 f801 	bl	8000228 <__aeabi_uidivmod>
 800a226:	000b      	movs	r3, r1
 800a228:	0adb      	lsrs	r3, r3, #11
 800a22a:	18e3      	adds	r3, r4, r3
 800a22c:	2280      	movs	r2, #128	; 0x80
 800a22e:	0252      	lsls	r2, r2, #9
 800a230:	4694      	mov	ip, r2
 800a232:	4463      	add	r3, ip
 800a234:	02dc      	lsls	r4, r3, #11
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <EE_Init+0x684>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	029a      	lsls	r2, r3, #10
 800a23c:	23ff      	movs	r3, #255	; 0xff
 800a23e:	029b      	lsls	r3, r3, #10
 800a240:	4013      	ands	r3, r2
 800a242:	0019      	movs	r1, r3
 800a244:	23b8      	movs	r3, #184	; 0xb8
 800a246:	0258      	lsls	r0, r3, #9
 800a248:	f7f5 ff68 	bl	800011c <__udivsi3>
 800a24c:	0003      	movs	r3, r0
 800a24e:	0019      	movs	r1, r3
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <EE_Init+0x684>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	029a      	lsls	r2, r3, #10
 800a256:	23ff      	movs	r3, #255	; 0xff
 800a258:	029b      	lsls	r3, r3, #10
 800a25a:	4013      	ands	r3, r2
 800a25c:	434b      	muls	r3, r1
 800a25e:	18e3      	adds	r3, r4, r3
 800a260:	0018      	movs	r0, r3
 800a262:	f001 fa49 	bl	800b6f8 <GetPageState>
 800a266:	0003      	movs	r3, r0
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d104      	bne.n	800a276 <EE_Init+0x67a>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a26c:	231b      	movs	r3, #27
 800a26e:	18fb      	adds	r3, r7, r3
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a274:	e053      	b.n	800a31e <EE_Init+0x722>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a276:	231b      	movs	r3, #27
 800a278:	18fb      	adds	r3, r7, r3
 800a27a:	2201      	movs	r2, #1
 800a27c:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a27e:	e04e      	b.n	800a31e <EE_Init+0x722>
 800a280:	1fff75e0 	.word	0x1fff75e0
 800a284:	2000013a 	.word	0x2000013a
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a288:	4be3      	ldr	r3, [pc, #908]	; (800a618 <EE_Init+0xa1c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	029a      	lsls	r2, r3, #10
 800a28e:	23ff      	movs	r3, #255	; 0xff
 800a290:	029b      	lsls	r3, r3, #10
 800a292:	401a      	ands	r2, r3
 800a294:	23b8      	movs	r3, #184	; 0xb8
 800a296:	025b      	lsls	r3, r3, #9
 800a298:	0011      	movs	r1, r2
 800a29a:	0018      	movs	r0, r3
 800a29c:	f7f5 ffc4 	bl	8000228 <__aeabi_uidivmod>
 800a2a0:	000b      	movs	r3, r1
 800a2a2:	0adb      	lsrs	r3, r3, #11
 800a2a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	220f      	movs	r2, #15
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	001c      	movs	r4, r3
 800a2b0:	4bd9      	ldr	r3, [pc, #868]	; (800a618 <EE_Init+0xa1c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	029a      	lsls	r2, r3, #10
 800a2b6:	23ff      	movs	r3, #255	; 0xff
 800a2b8:	029b      	lsls	r3, r3, #10
 800a2ba:	401a      	ands	r2, r3
 800a2bc:	23b8      	movs	r3, #184	; 0xb8
 800a2be:	025b      	lsls	r3, r3, #9
 800a2c0:	0011      	movs	r1, r2
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f7f5 ffb0 	bl	8000228 <__aeabi_uidivmod>
 800a2c8:	000b      	movs	r3, r1
 800a2ca:	0adb      	lsrs	r3, r3, #11
 800a2cc:	18e3      	adds	r3, r4, r3
 800a2ce:	2280      	movs	r2, #128	; 0x80
 800a2d0:	0252      	lsls	r2, r2, #9
 800a2d2:	4694      	mov	ip, r2
 800a2d4:	4463      	add	r3, ip
 800a2d6:	02dc      	lsls	r4, r3, #11
 800a2d8:	4bcf      	ldr	r3, [pc, #828]	; (800a618 <EE_Init+0xa1c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	029a      	lsls	r2, r3, #10
 800a2de:	23ff      	movs	r3, #255	; 0xff
 800a2e0:	029b      	lsls	r3, r3, #10
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	0019      	movs	r1, r3
 800a2e6:	23b8      	movs	r3, #184	; 0xb8
 800a2e8:	0258      	lsls	r0, r3, #9
 800a2ea:	f7f5 ff17 	bl	800011c <__udivsi3>
 800a2ee:	0003      	movs	r3, r0
 800a2f0:	0019      	movs	r1, r3
 800a2f2:	4bc9      	ldr	r3, [pc, #804]	; (800a618 <EE_Init+0xa1c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	029a      	lsls	r2, r3, #10
 800a2f8:	23ff      	movs	r3, #255	; 0xff
 800a2fa:	029b      	lsls	r3, r3, #10
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	434b      	muls	r3, r1
 800a300:	18e3      	adds	r3, r4, r3
 800a302:	0018      	movs	r0, r3
 800a304:	f001 f9f8 	bl	800b6f8 <GetPageState>
 800a308:	1e03      	subs	r3, r0, #0
 800a30a:	d104      	bne.n	800a316 <EE_Init+0x71a>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a30c:	231b      	movs	r3, #27
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	e003      	b.n	800a31e <EE_Init+0x722>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a316:	231b      	movs	r3, #27
 800a318:	18fb      	adds	r3, r7, r3
 800a31a:	2201      	movs	r2, #1
 800a31c:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 800a31e:	231b      	movs	r3, #27
 800a320:	18fb      	adds	r3, r7, r3
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d113      	bne.n	800a350 <EE_Init+0x754>
      {
        if (nbactivepage == 0U)
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d107      	bne.n	800a33e <EE_Init+0x742>
        {
          ubCurrentActivePage = page;
 800a32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a330:	b2da      	uxtb	r2, r3
 800a332:	4bba      	ldr	r3, [pc, #744]	; (800a61c <EE_Init+0xa20>)
 800a334:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	3301      	adds	r3, #1
 800a33a:	633b      	str	r3, [r7, #48]	; 0x30
 800a33c:	e008      	b.n	800a350 <EE_Init+0x754>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 800a33e:	230a      	movs	r3, #10
 800a340:	e1e1      	b.n	800a706 <EE_Init+0xb0a>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800a342:	231a      	movs	r3, #26
 800a344:	18fb      	adds	r3, r7, r3
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d101      	bne.n	800a350 <EE_Init+0x754>
    {
      lastvalidpage = page;
 800a34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34e:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a352:	3301      	adds	r3, #1
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a356:	4bb0      	ldr	r3, [pc, #704]	; (800a618 <EE_Init+0xa1c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	029a      	lsls	r2, r3, #10
 800a35c:	23ff      	movs	r3, #255	; 0xff
 800a35e:	029b      	lsls	r3, r3, #10
 800a360:	401a      	ands	r2, r3
 800a362:	23b8      	movs	r3, #184	; 0xb8
 800a364:	025b      	lsls	r3, r3, #9
 800a366:	0011      	movs	r1, r2
 800a368:	0018      	movs	r0, r3
 800a36a:	f7f5 ff5d 	bl	8000228 <__aeabi_uidivmod>
 800a36e:	000b      	movs	r3, r1
 800a370:	0adb      	lsrs	r3, r3, #11
 800a372:	3310      	adds	r3, #16
 800a374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a376:	429a      	cmp	r2, r3
 800a378:	d200      	bcs.n	800a37c <EE_Init+0x780>
 800a37a:	e6e8      	b.n	800a14e <EE_Init+0x552>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d134      	bne.n	800a3ec <EE_Init+0x7f0>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	b2dc      	uxtb	r4, r3
 800a386:	4ba4      	ldr	r3, [pc, #656]	; (800a618 <EE_Init+0xa1c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	029a      	lsls	r2, r3, #10
 800a38c:	23ff      	movs	r3, #255	; 0xff
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	401a      	ands	r2, r3
 800a392:	23b8      	movs	r3, #184	; 0xb8
 800a394:	025b      	lsls	r3, r3, #9
 800a396:	0011      	movs	r1, r2
 800a398:	0018      	movs	r0, r3
 800a39a:	f7f5 ff45 	bl	8000228 <__aeabi_uidivmod>
 800a39e:	000b      	movs	r3, r1
 800a3a0:	0adb      	lsrs	r3, r3, #11
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	1ae3      	subs	r3, r4, r3
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	220f      	movs	r2, #15
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	b2dc      	uxtb	r4, r3
 800a3b2:	4b99      	ldr	r3, [pc, #612]	; (800a618 <EE_Init+0xa1c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	029a      	lsls	r2, r3, #10
 800a3b8:	23ff      	movs	r3, #255	; 0xff
 800a3ba:	029b      	lsls	r3, r3, #10
 800a3bc:	401a      	ands	r2, r3
 800a3be:	23b8      	movs	r3, #184	; 0xb8
 800a3c0:	025b      	lsls	r3, r3, #9
 800a3c2:	0011      	movs	r1, r2
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f7f5 ff2f 	bl	8000228 <__aeabi_uidivmod>
 800a3ca:	000b      	movs	r3, r1
 800a3cc:	0adb      	lsrs	r3, r3, #11
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	18e3      	adds	r3, r4, r3
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	4b91      	ldr	r3, [pc, #580]	; (800a61c <EE_Init+0xa20>)
 800a3d6:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800a3d8:	4b90      	ldr	r3, [pc, #576]	; (800a61c <EE_Init+0xa20>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2102      	movs	r1, #2
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f001 f8b8 	bl	800b554 <SetPageState>
 800a3e4:	1e03      	subs	r3, r0, #0
 800a3e6:	d001      	beq.n	800a3ec <EE_Init+0x7f0>
    {
      return EE_WRITE_ERROR;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e18c      	b.n	800a706 <EE_Init+0xb0a>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800a3ec:	4b8c      	ldr	r3, [pc, #560]	; (800a620 <EE_Init+0xa24>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800a3f2:	4b8c      	ldr	r3, [pc, #560]	; (800a624 <EE_Init+0xa28>)
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a3f8:	2320      	movs	r3, #32
 800a3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a3fc:	e037      	b.n	800a46e <EE_Init+0x872>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800a3fe:	4b87      	ldr	r3, [pc, #540]	; (800a61c <EE_Init+0xa20>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2280      	movs	r2, #128	; 0x80
 800a404:	0252      	lsls	r2, r2, #9
 800a406:	4694      	mov	ip, r2
 800a408:	4463      	add	r3, ip
 800a40a:	02dc      	lsls	r4, r3, #11
 800a40c:	4b82      	ldr	r3, [pc, #520]	; (800a618 <EE_Init+0xa1c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	029a      	lsls	r2, r3, #10
 800a412:	23ff      	movs	r3, #255	; 0xff
 800a414:	029b      	lsls	r3, r3, #10
 800a416:	4013      	ands	r3, r2
 800a418:	0019      	movs	r1, r3
 800a41a:	23b8      	movs	r3, #184	; 0xb8
 800a41c:	0258      	lsls	r0, r3, #9
 800a41e:	f7f5 fe7d 	bl	800011c <__udivsi3>
 800a422:	0003      	movs	r3, r0
 800a424:	0019      	movs	r1, r3
 800a426:	4b7c      	ldr	r3, [pc, #496]	; (800a618 <EE_Init+0xa1c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	029a      	lsls	r2, r3, #10
 800a42c:	23ff      	movs	r3, #255	; 0xff
 800a42e:	029b      	lsls	r3, r3, #10
 800a430:	4013      	ands	r3, r2
 800a432:	434b      	muls	r3, r1
 800a434:	18e2      	adds	r2, r4, r3
 800a436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a438:	18d3      	adds	r3, r2, r3
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	613a      	str	r2, [r7, #16]
 800a440:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) && (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	3301      	adds	r3, #1
 800a446:	d103      	bne.n	800a450 <EE_Init+0x854>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	3301      	adds	r3, #1
 800a44c:	d100      	bne.n	800a450 <EE_Init+0x854>
      uhNbWrittenElements++;
      uwAddressNextWrite += EE_ELEMENT_SIZE;
    }
    else /* no more element in the page */
    {
      break;
 800a44e:	e013      	b.n	800a478 <EE_Init+0x87c>
      uhNbWrittenElements++;
 800a450:	4b73      	ldr	r3, [pc, #460]	; (800a620 <EE_Init+0xa24>)
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	3301      	adds	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	4b71      	ldr	r3, [pc, #452]	; (800a620 <EE_Init+0xa24>)
 800a45a:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 800a45c:	4b71      	ldr	r3, [pc, #452]	; (800a624 <EE_Init+0xa28>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3308      	adds	r3, #8
 800a462:	001a      	movs	r2, r3
 800a464:	4b6f      	ldr	r3, [pc, #444]	; (800a624 <EE_Init+0xa28>)
 800a466:	601a      	str	r2, [r3, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46a:	3308      	adds	r3, #8
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
 800a46e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a470:	2380      	movs	r3, #128	; 0x80
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	429a      	cmp	r2, r3
 800a476:	d3c2      	bcc.n	800a3fe <EE_Init+0x802>
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800a478:	4b68      	ldr	r3, [pc, #416]	; (800a61c <EE_Init+0xa20>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 800a47e:	4b67      	ldr	r3, [pc, #412]	; (800a61c <EE_Init+0xa20>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a484:	e054      	b.n	800a530 <EE_Init+0x934>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800a486:	4b64      	ldr	r3, [pc, #400]	; (800a618 <EE_Init+0xa1c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	029a      	lsls	r2, r3, #10
 800a48c:	23ff      	movs	r3, #255	; 0xff
 800a48e:	029b      	lsls	r3, r3, #10
 800a490:	401a      	ands	r2, r3
 800a492:	23b8      	movs	r3, #184	; 0xb8
 800a494:	025b      	lsls	r3, r3, #9
 800a496:	0011      	movs	r1, r2
 800a498:	0018      	movs	r0, r3
 800a49a:	f7f5 fec5 	bl	8000228 <__aeabi_uidivmod>
 800a49e:	000b      	movs	r3, r1
 800a4a0:	0adb      	lsrs	r3, r3, #11
 800a4a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	330f      	adds	r3, #15
 800a4a8:	220f      	movs	r2, #15
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	001c      	movs	r4, r3
 800a4ae:	4b5a      	ldr	r3, [pc, #360]	; (800a618 <EE_Init+0xa1c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	029a      	lsls	r2, r3, #10
 800a4b4:	23ff      	movs	r3, #255	; 0xff
 800a4b6:	029b      	lsls	r3, r3, #10
 800a4b8:	401a      	ands	r2, r3
 800a4ba:	23b8      	movs	r3, #184	; 0xb8
 800a4bc:	025b      	lsls	r3, r3, #9
 800a4be:	0011      	movs	r1, r2
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f7f5 feb1 	bl	8000228 <__aeabi_uidivmod>
 800a4c6:	000b      	movs	r3, r1
 800a4c8:	0adb      	lsrs	r3, r3, #11
 800a4ca:	18e3      	adds	r3, r4, r3
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800a4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d0:	2280      	movs	r2, #128	; 0x80
 800a4d2:	0252      	lsls	r2, r2, #9
 800a4d4:	4694      	mov	ip, r2
 800a4d6:	4463      	add	r3, ip
 800a4d8:	02dc      	lsls	r4, r3, #11
 800a4da:	4b4f      	ldr	r3, [pc, #316]	; (800a618 <EE_Init+0xa1c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	029a      	lsls	r2, r3, #10
 800a4e0:	23ff      	movs	r3, #255	; 0xff
 800a4e2:	029b      	lsls	r3, r3, #10
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	0019      	movs	r1, r3
 800a4e8:	23b8      	movs	r3, #184	; 0xb8
 800a4ea:	0258      	lsls	r0, r3, #9
 800a4ec:	f7f5 fe16 	bl	800011c <__udivsi3>
 800a4f0:	0003      	movs	r3, r0
 800a4f2:	0019      	movs	r1, r3
 800a4f4:	4b48      	ldr	r3, [pc, #288]	; (800a618 <EE_Init+0xa1c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	029a      	lsls	r2, r3, #10
 800a4fa:	23ff      	movs	r3, #255	; 0xff
 800a4fc:	029b      	lsls	r3, r3, #10
 800a4fe:	4013      	ands	r3, r2
 800a500:	434b      	muls	r3, r1
 800a502:	18e3      	adds	r3, r4, r3
 800a504:	251a      	movs	r5, #26
 800a506:	197c      	adds	r4, r7, r5
 800a508:	0018      	movs	r0, r3
 800a50a:	f001 f8f5 	bl	800b6f8 <GetPageState>
 800a50e:	0003      	movs	r3, r0
 800a510:	7023      	strb	r3, [r4, #0]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800a512:	197b      	adds	r3, r7, r5
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b03      	cmp	r3, #3
 800a518:	d108      	bne.n	800a52c <EE_Init+0x930>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800a51a:	4b41      	ldr	r3, [pc, #260]	; (800a620 <EE_Init+0xa24>)
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	33fc      	adds	r3, #252	; 0xfc
 800a520:	b29a      	uxth	r2, r3
 800a522:	4b3f      	ldr	r3, [pc, #252]	; (800a620 <EE_Init+0xa24>)
 800a524:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800a526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a528:	623b      	str	r3, [r7, #32]
 800a52a:	e001      	b.n	800a530 <EE_Init+0x934>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 800a52c:	230a      	movs	r3, #10
 800a52e:	e0ea      	b.n	800a706 <EE_Init+0xb0a>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a530:	4b39      	ldr	r3, [pc, #228]	; (800a618 <EE_Init+0xa1c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	029a      	lsls	r2, r3, #10
 800a536:	23ff      	movs	r3, #255	; 0xff
 800a538:	029b      	lsls	r3, r3, #10
 800a53a:	401a      	ands	r2, r3
 800a53c:	23b8      	movs	r3, #184	; 0xb8
 800a53e:	025b      	lsls	r3, r3, #9
 800a540:	0011      	movs	r1, r2
 800a542:	0018      	movs	r0, r3
 800a544:	f7f5 fe70 	bl	8000228 <__aeabi_uidivmod>
 800a548:	000b      	movs	r3, r1
 800a54a:	0adb      	lsrs	r3, r3, #11
 800a54c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a54e:	429a      	cmp	r2, r3
 800a550:	d011      	beq.n	800a576 <EE_Init+0x97a>
 800a552:	4b31      	ldr	r3, [pc, #196]	; (800a618 <EE_Init+0xa1c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	029a      	lsls	r2, r3, #10
 800a558:	23ff      	movs	r3, #255	; 0xff
 800a55a:	029b      	lsls	r3, r3, #10
 800a55c:	401a      	ands	r2, r3
 800a55e:	23b8      	movs	r3, #184	; 0xb8
 800a560:	025b      	lsls	r3, r3, #9
 800a562:	0011      	movs	r1, r2
 800a564:	0018      	movs	r0, r3
 800a566:	f7f5 fe5f 	bl	8000228 <__aeabi_uidivmod>
 800a56a:	000b      	movs	r3, r1
 800a56c:	0adb      	lsrs	r3, r3, #11
 800a56e:	3308      	adds	r3, #8
 800a570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a572:	429a      	cmp	r2, r3
 800a574:	d187      	bne.n	800a486 <EE_Init+0x88a>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800a576:	4b29      	ldr	r3, [pc, #164]	; (800a61c <EE_Init+0xa20>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	001c      	movs	r4, r3
 800a57c:	4b26      	ldr	r3, [pc, #152]	; (800a618 <EE_Init+0xa1c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	029a      	lsls	r2, r3, #10
 800a582:	23ff      	movs	r3, #255	; 0xff
 800a584:	029b      	lsls	r3, r3, #10
 800a586:	401a      	ands	r2, r3
 800a588:	23b8      	movs	r3, #184	; 0xb8
 800a58a:	025b      	lsls	r3, r3, #9
 800a58c:	0011      	movs	r1, r2
 800a58e:	0018      	movs	r0, r3
 800a590:	f7f5 fe4a 	bl	8000228 <__aeabi_uidivmod>
 800a594:	000b      	movs	r3, r1
 800a596:	0adb      	lsrs	r3, r3, #11
 800a598:	1ae3      	subs	r3, r4, r3
 800a59a:	3301      	adds	r3, #1
 800a59c:	220f      	movs	r2, #15
 800a59e:	4013      	ands	r3, r2
 800a5a0:	001c      	movs	r4, r3
 800a5a2:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <EE_Init+0xa1c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	029a      	lsls	r2, r3, #10
 800a5a8:	23ff      	movs	r3, #255	; 0xff
 800a5aa:	029b      	lsls	r3, r3, #10
 800a5ac:	401a      	ands	r2, r3
 800a5ae:	23b8      	movs	r3, #184	; 0xb8
 800a5b0:	025b      	lsls	r3, r3, #9
 800a5b2:	0011      	movs	r1, r2
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	f7f5 fe37 	bl	8000228 <__aeabi_uidivmod>
 800a5ba:	000b      	movs	r3, r1
 800a5bc:	0adb      	lsrs	r3, r3, #11
 800a5be:	18e3      	adds	r3, r4, r3
 800a5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c4:	2280      	movs	r2, #128	; 0x80
 800a5c6:	0252      	lsls	r2, r2, #9
 800a5c8:	4694      	mov	ip, r2
 800a5ca:	4463      	add	r3, ip
 800a5cc:	02dc      	lsls	r4, r3, #11
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <EE_Init+0xa1c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	029a      	lsls	r2, r3, #10
 800a5d4:	23ff      	movs	r3, #255	; 0xff
 800a5d6:	029b      	lsls	r3, r3, #10
 800a5d8:	4013      	ands	r3, r2
 800a5da:	0019      	movs	r1, r3
 800a5dc:	23b8      	movs	r3, #184	; 0xb8
 800a5de:	0258      	lsls	r0, r3, #9
 800a5e0:	f7f5 fd9c 	bl	800011c <__udivsi3>
 800a5e4:	0003      	movs	r3, r0
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	4b0b      	ldr	r3, [pc, #44]	; (800a618 <EE_Init+0xa1c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	029a      	lsls	r2, r3, #10
 800a5ee:	23ff      	movs	r3, #255	; 0xff
 800a5f0:	029b      	lsls	r3, r3, #10
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	434b      	muls	r3, r1
 800a5f6:	18e3      	adds	r3, r4, r3
 800a5f8:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 800a5fa:	e068      	b.n	800a6ce <EE_Init+0xad2>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a5fc:	1dfb      	adds	r3, r7, #7
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d111      	bne.n	800a628 <EE_Init+0xa2c>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a606:	2101      	movs	r1, #1
 800a608:	0018      	movs	r0, r3
 800a60a:	f001 f914 	bl	800b836 <FI_PageErase>
 800a60e:	1e03      	subs	r3, r0, #0
 800a610:	d01d      	beq.n	800a64e <EE_Init+0xa52>
      {
        return EE_ERASE_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e077      	b.n	800a706 <EE_Init+0xb0a>
 800a616:	46c0      	nop			; (mov r8, r8)
 800a618:	1fff75e0 	.word	0x1fff75e0
 800a61c:	2000013a 	.word	0x2000013a
 800a620:	20000138 	.word	0x20000138
 800a624:	20000008 	.word	0x20000008
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a628:	2380      	movs	r3, #128	; 0x80
 800a62a:	011a      	lsls	r2, r3, #4
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	0011      	movs	r1, r2
 800a630:	0018      	movs	r0, r3
 800a632:	f000 fb2c 	bl	800ac8e <VerifyPageFullyErased>
 800a636:	0003      	movs	r3, r0
 800a638:	2b10      	cmp	r3, #16
 800a63a:	d108      	bne.n	800a64e <EE_Init+0xa52>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63e:	2101      	movs	r1, #1
 800a640:	0018      	movs	r0, r3
 800a642:	f001 f8f8 	bl	800b836 <FI_PageErase>
 800a646:	1e03      	subs	r3, r0, #0
 800a648:	d001      	beq.n	800a64e <EE_Init+0xa52>
        {
          return EE_ERASE_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e05b      	b.n	800a706 <EE_Init+0xb0a>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 800a64e:	4b30      	ldr	r3, [pc, #192]	; (800a710 <EE_Init+0xb14>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	029a      	lsls	r2, r3, #10
 800a654:	23ff      	movs	r3, #255	; 0xff
 800a656:	029b      	lsls	r3, r3, #10
 800a658:	401a      	ands	r2, r3
 800a65a:	23b8      	movs	r3, #184	; 0xb8
 800a65c:	025b      	lsls	r3, r3, #9
 800a65e:	0011      	movs	r1, r2
 800a660:	0018      	movs	r0, r3
 800a662:	f7f5 fde1 	bl	8000228 <__aeabi_uidivmod>
 800a666:	000b      	movs	r3, r1
 800a668:	0adb      	lsrs	r3, r3, #11
 800a66a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	3301      	adds	r3, #1
 800a670:	220f      	movs	r2, #15
 800a672:	4013      	ands	r3, r2
 800a674:	001c      	movs	r4, r3
 800a676:	4b26      	ldr	r3, [pc, #152]	; (800a710 <EE_Init+0xb14>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	029a      	lsls	r2, r3, #10
 800a67c:	23ff      	movs	r3, #255	; 0xff
 800a67e:	029b      	lsls	r3, r3, #10
 800a680:	401a      	ands	r2, r3
 800a682:	23b8      	movs	r3, #184	; 0xb8
 800a684:	025b      	lsls	r3, r3, #9
 800a686:	0011      	movs	r1, r2
 800a688:	0018      	movs	r0, r3
 800a68a:	f7f5 fdcd 	bl	8000228 <__aeabi_uidivmod>
 800a68e:	000b      	movs	r3, r1
 800a690:	0adb      	lsrs	r3, r3, #11
 800a692:	18e3      	adds	r3, r4, r3
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800a696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a698:	2280      	movs	r2, #128	; 0x80
 800a69a:	0252      	lsls	r2, r2, #9
 800a69c:	4694      	mov	ip, r2
 800a69e:	4463      	add	r3, ip
 800a6a0:	02dc      	lsls	r4, r3, #11
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <EE_Init+0xb14>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	029a      	lsls	r2, r3, #10
 800a6a8:	23ff      	movs	r3, #255	; 0xff
 800a6aa:	029b      	lsls	r3, r3, #10
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	0019      	movs	r1, r3
 800a6b0:	23b8      	movs	r3, #184	; 0xb8
 800a6b2:	0258      	lsls	r0, r3, #9
 800a6b4:	f7f5 fd32 	bl	800011c <__udivsi3>
 800a6b8:	0003      	movs	r3, r0
 800a6ba:	0019      	movs	r1, r3
 800a6bc:	4b14      	ldr	r3, [pc, #80]	; (800a710 <EE_Init+0xb14>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	029a      	lsls	r2, r3, #10
 800a6c2:	23ff      	movs	r3, #255	; 0xff
 800a6c4:	029b      	lsls	r3, r3, #10
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	434b      	muls	r3, r1
 800a6ca:	18e3      	adds	r3, r4, r3
 800a6cc:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 800a6ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d192      	bne.n	800a5fc <EE_Init+0xa00>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800a6d6:	f001 f8d9 	bl	800b88c <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d111      	bne.n	800a704 <EE_Init+0xb08>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 800a6e0:	250e      	movs	r5, #14
 800a6e2:	197c      	adds	r4, r7, r5
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f000 fe9c 	bl	800b424 <VerifyPagesFullWriteVariable>
 800a6ec:	0003      	movs	r3, r0
 800a6ee:	8023      	strh	r3, [r4, #0]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 800a6f0:	197b      	adds	r3, r7, r5
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <EE_Init+0xb08>
 800a6f8:	197b      	adds	r3, r7, r5
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	2b12      	cmp	r3, #18
 800a6fe:	d001      	beq.n	800a704 <EE_Init+0xb08>
    {
      return EE_WRITE_ERROR;
 800a700:	2302      	movs	r3, #2
 800a702:	e000      	b.n	800a706 <EE_Init+0xb0a>
    }
#endif
  }

  return EE_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	0018      	movs	r0, r3
 800a708:	46bd      	mov	sp, r7
 800a70a:	b010      	add	sp, #64	; 0x40
 800a70c:	bdb0      	pop	{r4, r5, r7, pc}
 800a70e:	46c0      	nop			; (mov r8, r8)
 800a710:	1fff75e0 	.word	0x1fff75e0

0800a714 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800a714:	b590      	push	{r4, r7, lr}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	0002      	movs	r2, r0
 800a71c:	1dfb      	adds	r3, r7, #7
 800a71e:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800a724:	f001 f8b7 	bl	800b896 <FI_CheckBankConfig>
 800a728:	1e03      	subs	r3, r0, #0
 800a72a:	d001      	beq.n	800a730 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 800a72c:	230e      	movs	r3, #14
 800a72e:	e08e      	b.n	800a84e <EE_Format+0x13a>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a730:	4b49      	ldr	r3, [pc, #292]	; (800a858 <EE_Format+0x144>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	029a      	lsls	r2, r3, #10
 800a736:	23ff      	movs	r3, #255	; 0xff
 800a738:	029b      	lsls	r3, r3, #10
 800a73a:	401a      	ands	r2, r3
 800a73c:	23b8      	movs	r3, #184	; 0xb8
 800a73e:	025b      	lsls	r3, r3, #9
 800a740:	0011      	movs	r1, r2
 800a742:	0018      	movs	r0, r3
 800a744:	f7f5 fd70 	bl	8000228 <__aeabi_uidivmod>
 800a748:	000b      	movs	r3, r1
 800a74a:	0adb      	lsrs	r3, r3, #11
 800a74c:	60fb      	str	r3, [r7, #12]
 800a74e:	e03c      	b.n	800a7ca <EE_Format+0xb6>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a750:	1dfb      	adds	r3, r7, #7
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d108      	bne.n	800a76a <EE_Format+0x56>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2101      	movs	r1, #1
 800a75c:	0018      	movs	r0, r3
 800a75e:	f001 f86a 	bl	800b836 <FI_PageErase>
 800a762:	1e03      	subs	r3, r0, #0
 800a764:	d02e      	beq.n	800a7c4 <EE_Format+0xb0>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e071      	b.n	800a84e <EE_Format+0x13a>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2280      	movs	r2, #128	; 0x80
 800a76e:	0252      	lsls	r2, r2, #9
 800a770:	4694      	mov	ip, r2
 800a772:	4463      	add	r3, ip
 800a774:	02dc      	lsls	r4, r3, #11
 800a776:	4b38      	ldr	r3, [pc, #224]	; (800a858 <EE_Format+0x144>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	029a      	lsls	r2, r3, #10
 800a77c:	23ff      	movs	r3, #255	; 0xff
 800a77e:	029b      	lsls	r3, r3, #10
 800a780:	4013      	ands	r3, r2
 800a782:	0019      	movs	r1, r3
 800a784:	23b8      	movs	r3, #184	; 0xb8
 800a786:	0258      	lsls	r0, r3, #9
 800a788:	f7f5 fcc8 	bl	800011c <__udivsi3>
 800a78c:	0003      	movs	r3, r0
 800a78e:	0019      	movs	r1, r3
 800a790:	4b31      	ldr	r3, [pc, #196]	; (800a858 <EE_Format+0x144>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	029a      	lsls	r2, r3, #10
 800a796:	23ff      	movs	r3, #255	; 0xff
 800a798:	029b      	lsls	r3, r3, #10
 800a79a:	4013      	ands	r3, r2
 800a79c:	434b      	muls	r3, r1
 800a79e:	18e3      	adds	r3, r4, r3
 800a7a0:	2280      	movs	r2, #128	; 0x80
 800a7a2:	0112      	lsls	r2, r2, #4
 800a7a4:	0011      	movs	r1, r2
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f000 fa71 	bl	800ac8e <VerifyPageFullyErased>
 800a7ac:	0003      	movs	r3, r0
 800a7ae:	2b10      	cmp	r3, #16
 800a7b0:	d108      	bne.n	800a7c4 <EE_Format+0xb0>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f001 f83d 	bl	800b836 <FI_PageErase>
 800a7bc:	1e03      	subs	r3, r0, #0
 800a7be:	d001      	beq.n	800a7c4 <EE_Format+0xb0>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e044      	b.n	800a84e <EE_Format+0x13a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	4b23      	ldr	r3, [pc, #140]	; (800a858 <EE_Format+0x144>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	029a      	lsls	r2, r3, #10
 800a7d0:	23ff      	movs	r3, #255	; 0xff
 800a7d2:	029b      	lsls	r3, r3, #10
 800a7d4:	401a      	ands	r2, r3
 800a7d6:	23b8      	movs	r3, #184	; 0xb8
 800a7d8:	025b      	lsls	r3, r3, #9
 800a7da:	0011      	movs	r1, r2
 800a7dc:	0018      	movs	r0, r3
 800a7de:	f7f5 fd23 	bl	8000228 <__aeabi_uidivmod>
 800a7e2:	000b      	movs	r3, r1
 800a7e4:	0adb      	lsrs	r3, r3, #11
 800a7e6:	3310      	adds	r3, #16
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d3b0      	bcc.n	800a750 <EE_Format+0x3c>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800a7ee:	f001 f84d 	bl	800b88c <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800a7f2:	4b19      	ldr	r3, [pc, #100]	; (800a858 <EE_Format+0x144>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	029a      	lsls	r2, r3, #10
 800a7f8:	23ff      	movs	r3, #255	; 0xff
 800a7fa:	029b      	lsls	r3, r3, #10
 800a7fc:	401a      	ands	r2, r3
 800a7fe:	23b8      	movs	r3, #184	; 0xb8
 800a800:	025b      	lsls	r3, r3, #9
 800a802:	0011      	movs	r1, r2
 800a804:	0018      	movs	r0, r3
 800a806:	f7f5 fd0f 	bl	8000228 <__aeabi_uidivmod>
 800a80a:	000b      	movs	r3, r1
 800a80c:	0adb      	lsrs	r3, r3, #11
 800a80e:	2102      	movs	r1, #2
 800a810:	0018      	movs	r0, r3
 800a812:	f000 fe9f 	bl	800b554 <SetPageState>
 800a816:	1e03      	subs	r3, r0, #0
 800a818:	d001      	beq.n	800a81e <EE_Format+0x10a>
  {
    return EE_WRITE_ERROR;
 800a81a:	2302      	movs	r3, #2
 800a81c:	e017      	b.n	800a84e <EE_Format+0x13a>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <EE_Format+0x148>)
 800a820:	2200      	movs	r2, #0
 800a822:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 800a824:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <EE_Format+0x144>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	029a      	lsls	r2, r3, #10
 800a82a:	23ff      	movs	r3, #255	; 0xff
 800a82c:	029b      	lsls	r3, r3, #10
 800a82e:	401a      	ands	r2, r3
 800a830:	23b8      	movs	r3, #184	; 0xb8
 800a832:	025b      	lsls	r3, r3, #9
 800a834:	0011      	movs	r1, r2
 800a836:	0018      	movs	r0, r3
 800a838:	f7f5 fcf6 	bl	8000228 <__aeabi_uidivmod>
 800a83c:	000b      	movs	r3, r1
 800a83e:	0adb      	lsrs	r3, r3, #11
 800a840:	b2da      	uxtb	r2, r3
 800a842:	4b07      	ldr	r3, [pc, #28]	; (800a860 <EE_Format+0x14c>)
 800a844:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800a846:	4b07      	ldr	r3, [pc, #28]	; (800a864 <EE_Format+0x150>)
 800a848:	2220      	movs	r2, #32
 800a84a:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	0018      	movs	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	b005      	add	sp, #20
 800a854:	bd90      	pop	{r4, r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	1fff75e0 	.word	0x1fff75e0
 800a85c:	20000138 	.word	0x20000138
 800a860:	2000013a 	.word	0x2000013a
 800a864:	20000008 	.word	0x20000008

0800a868 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 800a868:	b5b0      	push	{r4, r5, r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	0002      	movs	r2, r0
 800a870:	6039      	str	r1, [r7, #0]
 800a872:	1dbb      	adds	r3, r7, #6
 800a874:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800a876:	1dbb      	adds	r3, r7, #6
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01b      	beq.n	800a8b6 <EE_ReadVariable32bits+0x4e>
 800a87e:	1dbb      	adds	r3, r7, #6
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	4a0f      	ldr	r2, [pc, #60]	; (800a8c0 <EE_ReadVariable32bits+0x58>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d016      	beq.n	800a8b6 <EE_ReadVariable32bits+0x4e>
  {
    EE_DATA_TYPE datatmp = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800a88c:	250e      	movs	r5, #14
 800a88e:	197b      	adds	r3, r7, r5
 800a890:	2200      	movs	r2, #0
 800a892:	801a      	strh	r2, [r3, #0]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 800a894:	197c      	adds	r4, r7, r5
 800a896:	2308      	movs	r3, #8
 800a898:	18fa      	adds	r2, r7, r3
 800a89a:	1dbb      	adds	r3, r7, #6
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	0011      	movs	r1, r2
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	f000 f8d5 	bl	800aa50 <ReadVariable>
 800a8a6:	0003      	movs	r3, r0
 800a8a8:	8023      	strh	r3, [r4, #0]
    *pData = (uint32_t) datatmp;
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	601a      	str	r2, [r3, #0]

    return status;
 800a8b0:	197b      	adds	r3, r7, r5
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	e000      	b.n	800a8b8 <EE_ReadVariable32bits+0x50>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800a8b6:	2308      	movs	r3, #8
  } 
}
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	b004      	add	sp, #16
 800a8be:	bdb0      	pop	{r4, r5, r7, pc}
 800a8c0:	0000ffff 	.word	0x0000ffff

0800a8c4 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	0002      	movs	r2, r0
 800a8cc:	6039      	str	r1, [r7, #0]
 800a8ce:	1dbb      	adds	r3, r7, #6
 800a8d0:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800a8d2:	1dbb      	adds	r3, r7, #6
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00d      	beq.n	800a8f6 <EE_WriteVariable32bits+0x32>
 800a8da:	1dbb      	adds	r3, r7, #6
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	4a08      	ldr	r2, [pc, #32]	; (800a900 <EE_WriteVariable32bits+0x3c>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d008      	beq.n	800a8f6 <EE_WriteVariable32bits+0x32>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	1dbb      	adds	r3, r7, #6
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	0011      	movs	r1, r2
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f000 f9a5 	bl	800ac3c <WriteVariable>
 800a8f2:	0003      	movs	r3, r0
 800a8f4:	e000      	b.n	800a8f8 <EE_WriteVariable32bits+0x34>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800a8f6:	2308      	movs	r3, #8
  } 
}
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	b002      	add	sp, #8
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	0000ffff 	.word	0x0000ffff

0800a904 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	2300      	movs	r3, #0
 800a910:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	2300      	movs	r3, #0
 800a918:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800a91a:	1dfb      	adds	r3, r7, #7
 800a91c:	2205      	movs	r2, #5
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	1dbb      	adds	r3, r7, #6
 800a922:	2205      	movs	r2, #5
 800a924:	701a      	strb	r2, [r3, #0]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800a926:	4b49      	ldr	r3, [pc, #292]	; (800aa4c <EE_CleanUp+0x148>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	029a      	lsls	r2, r3, #10
 800a92c:	23ff      	movs	r3, #255	; 0xff
 800a92e:	029b      	lsls	r3, r3, #10
 800a930:	401a      	ands	r2, r3
 800a932:	23b8      	movs	r3, #184	; 0xb8
 800a934:	025b      	lsls	r3, r3, #9
 800a936:	0011      	movs	r1, r2
 800a938:	0018      	movs	r0, r3
 800a93a:	f7f5 fc75 	bl	8000228 <__aeabi_uidivmod>
 800a93e:	000b      	movs	r3, r1
 800a940:	0adb      	lsrs	r3, r3, #11
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e06b      	b.n	800aa1e <EE_CleanUp+0x11a>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2280      	movs	r2, #128	; 0x80
 800a94a:	0252      	lsls	r2, r2, #9
 800a94c:	4694      	mov	ip, r2
 800a94e:	4463      	add	r3, ip
 800a950:	02dc      	lsls	r4, r3, #11
 800a952:	4b3e      	ldr	r3, [pc, #248]	; (800aa4c <EE_CleanUp+0x148>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	029a      	lsls	r2, r3, #10
 800a958:	23ff      	movs	r3, #255	; 0xff
 800a95a:	029b      	lsls	r3, r3, #10
 800a95c:	4013      	ands	r3, r2
 800a95e:	0019      	movs	r1, r3
 800a960:	23b8      	movs	r3, #184	; 0xb8
 800a962:	0258      	lsls	r0, r3, #9
 800a964:	f7f5 fbda 	bl	800011c <__udivsi3>
 800a968:	0003      	movs	r3, r0
 800a96a:	0019      	movs	r1, r3
 800a96c:	4b37      	ldr	r3, [pc, #220]	; (800aa4c <EE_CleanUp+0x148>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	029a      	lsls	r2, r3, #10
 800a972:	23ff      	movs	r3, #255	; 0xff
 800a974:	029b      	lsls	r3, r3, #10
 800a976:	4013      	ands	r3, r2
 800a978:	434b      	muls	r3, r1
 800a97a:	18e3      	adds	r3, r4, r3
 800a97c:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800a97e:	1dfc      	adds	r4, r7, #7
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	0018      	movs	r0, r3
 800a984:	f000 feb8 	bl	800b6f8 <GetPageState>
 800a988:	0003      	movs	r3, r0
 800a98a:	7023      	strb	r3, [r4, #0]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800a98c:	1dfb      	adds	r3, r7, #7
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b04      	cmp	r3, #4
 800a992:	d141      	bne.n	800aa18 <EE_CleanUp+0x114>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	3301      	adds	r3, #1
 800a998:	613b      	str	r3, [r7, #16]
 800a99a:	e02b      	b.n	800a9f4 <EE_CleanUp+0xf0>
      {
        pageaddress = PAGE_ADDRESS(page);
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2280      	movs	r2, #128	; 0x80
 800a9a0:	0252      	lsls	r2, r2, #9
 800a9a2:	4694      	mov	ip, r2
 800a9a4:	4463      	add	r3, ip
 800a9a6:	02dc      	lsls	r4, r3, #11
 800a9a8:	4b28      	ldr	r3, [pc, #160]	; (800aa4c <EE_CleanUp+0x148>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	029a      	lsls	r2, r3, #10
 800a9ae:	23ff      	movs	r3, #255	; 0xff
 800a9b0:	029b      	lsls	r3, r3, #10
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	0019      	movs	r1, r3
 800a9b6:	23b8      	movs	r3, #184	; 0xb8
 800a9b8:	0258      	lsls	r0, r3, #9
 800a9ba:	f7f5 fbaf 	bl	800011c <__udivsi3>
 800a9be:	0003      	movs	r3, r0
 800a9c0:	0019      	movs	r1, r3
 800a9c2:	4b22      	ldr	r3, [pc, #136]	; (800aa4c <EE_CleanUp+0x148>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	029a      	lsls	r2, r3, #10
 800a9c8:	23ff      	movs	r3, #255	; 0xff
 800a9ca:	029b      	lsls	r3, r3, #10
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	434b      	muls	r3, r1
 800a9d0:	18e3      	adds	r3, r4, r3
 800a9d2:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800a9d4:	1dbc      	adds	r4, r7, #6
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f000 fe8d 	bl	800b6f8 <GetPageState>
 800a9de:	0003      	movs	r3, r0
 800a9e0:	7023      	strb	r3, [r4, #0]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800a9e2:	1dbb      	adds	r3, r7, #6
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d001      	beq.n	800a9ee <EE_CleanUp+0xea>
        {
          return EE_ERROR_NOERASING_PAGE;
 800a9ea:	2305      	movs	r3, #5
 800a9ec:	e02a      	b.n	800aa44 <EE_CleanUp+0x140>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	613b      	str	r3, [r7, #16]
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d3ce      	bcc.n	800a99c <EE_CleanUp+0x98>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2108      	movs	r1, #8
 800aa02:	0018      	movs	r0, r3
 800aa04:	f000 ff17 	bl	800b836 <FI_PageErase>
 800aa08:	1e03      	subs	r3, r0, #0
 800aa0a:	d001      	beq.n	800aa10 <EE_CleanUp+0x10c>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e019      	b.n	800aa44 <EE_CleanUp+0x140>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800aa10:	f000 ff3c 	bl	800b88c <FI_CacheFlush>
        
        return EE_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	e015      	b.n	800aa44 <EE_CleanUp+0x140>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	617b      	str	r3, [r7, #20]
 800aa1e:	4b0b      	ldr	r3, [pc, #44]	; (800aa4c <EE_CleanUp+0x148>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	029a      	lsls	r2, r3, #10
 800aa24:	23ff      	movs	r3, #255	; 0xff
 800aa26:	029b      	lsls	r3, r3, #10
 800aa28:	401a      	ands	r2, r3
 800aa2a:	23b8      	movs	r3, #184	; 0xb8
 800aa2c:	025b      	lsls	r3, r3, #9
 800aa2e:	0011      	movs	r1, r2
 800aa30:	0018      	movs	r0, r3
 800aa32:	f7f5 fbf9 	bl	8000228 <__aeabi_uidivmod>
 800aa36:	000b      	movs	r3, r1
 800aa38:	0adb      	lsrs	r3, r3, #11
 800aa3a:	3310      	adds	r3, #16
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d381      	bcc.n	800a946 <EE_CleanUp+0x42>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800aa42:	2305      	movs	r3, #5
}
 800aa44:	0018      	movs	r0, r3
 800aa46:	46bd      	mov	sp, r7
 800aa48:	b007      	add	sp, #28
 800aa4a:	bd90      	pop	{r4, r7, pc}
 800aa4c:	1fff75e0 	.word	0x1fff75e0

0800aa50 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 800aa50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa52:	b08f      	sub	sp, #60	; 0x3c
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	0002      	movs	r2, r0
 800aa58:	6139      	str	r1, [r7, #16]
 800aa5a:	2316      	movs	r3, #22
 800aa5c:	18fb      	adds	r3, r7, r3
 800aa5e:	801a      	strh	r2, [r3, #0]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800aa60:	2200      	movs	r2, #0
 800aa62:	2300      	movs	r3, #0
 800aa64:	623a      	str	r2, [r7, #32]
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	633b      	str	r3, [r7, #48]	; 0x30
 800aa70:	2300      	movs	r3, #0
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa74:	2300      	movs	r3, #0
 800aa76:	61fb      	str	r3, [r7, #28]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800aa78:	231b      	movs	r3, #27
 800aa7a:	2210      	movs	r2, #16
 800aa7c:	4694      	mov	ip, r2
 800aa7e:	44bc      	add	ip, r7
 800aa80:	4463      	add	r3, ip
 800aa82:	2205      	movs	r2, #5
 800aa84:	701a      	strb	r2, [r3, #0]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 800aa86:	2000      	movs	r0, #0
 800aa88:	f000 f928 	bl	800acdc <FindPage>
 800aa8c:	0003      	movs	r3, r0
 800aa8e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 800aa90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa92:	3301      	adds	r3, #1
 800aa94:	d101      	bne.n	800aa9a <ReadVariable+0x4a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e0ca      	b.n	800ac30 <ReadVariable+0x1e0>
  }
  pageaddress = PAGE_ADDRESS(page);
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	2280      	movs	r2, #128	; 0x80
 800aa9e:	0252      	lsls	r2, r2, #9
 800aaa0:	4694      	mov	ip, r2
 800aaa2:	4463      	add	r3, ip
 800aaa4:	02de      	lsls	r6, r3, #11
 800aaa6:	4b64      	ldr	r3, [pc, #400]	; (800ac38 <ReadVariable+0x1e8>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	029a      	lsls	r2, r3, #10
 800aaac:	23ff      	movs	r3, #255	; 0xff
 800aaae:	029b      	lsls	r3, r3, #10
 800aab0:	4013      	ands	r3, r2
 800aab2:	0019      	movs	r1, r3
 800aab4:	23b8      	movs	r3, #184	; 0xb8
 800aab6:	0258      	lsls	r0, r3, #9
 800aab8:	f7f5 fb30 	bl	800011c <__udivsi3>
 800aabc:	0003      	movs	r3, r0
 800aabe:	0019      	movs	r1, r3
 800aac0:	4b5d      	ldr	r3, [pc, #372]	; (800ac38 <ReadVariable+0x1e8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	029a      	lsls	r2, r3, #10
 800aac6:	23ff      	movs	r3, #255	; 0xff
 800aac8:	029b      	lsls	r3, r3, #10
 800aaca:	4013      	ands	r3, r2
 800aacc:	434b      	muls	r3, r1
 800aace:	18f3      	adds	r3, r6, r3
 800aad0:	633b      	str	r3, [r7, #48]	; 0x30
  pagestate = GetPageState(pageaddress);
 800aad2:	231b      	movs	r3, #27
 800aad4:	2210      	movs	r2, #16
 800aad6:	18ba      	adds	r2, r7, r2
 800aad8:	18d6      	adds	r6, r2, r3
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	0018      	movs	r0, r3
 800aade:	f000 fe0b 	bl	800b6f8 <GetPageState>
 800aae2:	0003      	movs	r3, r0
 800aae4:	7033      	strb	r3, [r6, #0]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800aae6:	e08e      	b.n	800ac06 <ReadVariable+0x1b6>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800aae8:	23ff      	movs	r3, #255	; 0xff
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800aaee:	e03d      	b.n	800ab6c <ReadVariable+0x11c>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 800aaf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	18d3      	adds	r3, r2, r3
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	623a      	str	r2, [r7, #32]
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	3301      	adds	r3, #1
 800ab02:	d102      	bne.n	800ab0a <ReadVariable+0xba>
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	3301      	adds	r3, #1
 800ab08:	d02d      	beq.n	800ab66 <ReadVariable+0x116>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800ab0a:	6a3a      	ldr	r2, [r7, #32]
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	1c13      	adds	r3, r2, #0
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	2216      	movs	r2, #22
 800ab14:	18ba      	adds	r2, r7, r2
 800ab16:	8812      	ldrh	r2, [r2, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d124      	bne.n	800ab66 <ReadVariable+0x116>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	001b      	movs	r3, r3
 800ab20:	60bb      	str	r3, [r7, #8]
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	68b8      	ldr	r0, [r7, #8]
 800ab28:	6a3a      	ldr	r2, [r7, #32]
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	1c13      	adds	r3, r2, #0
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	0019      	movs	r1, r3
 800ab32:	f000 fe4b 	bl	800b7cc <CalculateCrc>
 800ab36:	0003      	movs	r3, r0
 800ab38:	61fb      	str	r3, [r7, #28]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	041b      	lsls	r3, r3, #16
 800ab3e:	6a3a      	ldr	r2, [r7, #32]
 800ab40:	0c14      	lsrs	r4, r2, #16
 800ab42:	431c      	orrs	r4, r3
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	0c1d      	lsrs	r5, r3, #16
 800ab48:	b2a3      	uxth	r3, r4
 800ab4a:	001a      	movs	r2, r3
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d109      	bne.n	800ab66 <ReadVariable+0x116>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	001b      	movs	r3, r3
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	607b      	str	r3, [r7, #4]
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e064      	b.n	800ac30 <ReadVariable+0x1e0>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	3b08      	subs	r3, #8
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (counter >= PAGE_HEADER_SIZE)
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	2b1f      	cmp	r3, #31
 800ab70:	d8be      	bhi.n	800aaf0 <ReadVariable+0xa0>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800ab72:	4b31      	ldr	r3, [pc, #196]	; (800ac38 <ReadVariable+0x1e8>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	029a      	lsls	r2, r3, #10
 800ab78:	23ff      	movs	r3, #255	; 0xff
 800ab7a:	029b      	lsls	r3, r3, #10
 800ab7c:	401a      	ands	r2, r3
 800ab7e:	23b8      	movs	r3, #184	; 0xb8
 800ab80:	025b      	lsls	r3, r3, #9
 800ab82:	0011      	movs	r1, r2
 800ab84:	0018      	movs	r0, r3
 800ab86:	f7f5 fb4f 	bl	8000228 <__aeabi_uidivmod>
 800ab8a:	000b      	movs	r3, r1
 800ab8c:	0adb      	lsrs	r3, r3, #11
 800ab8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	330f      	adds	r3, #15
 800ab94:	220f      	movs	r2, #15
 800ab96:	4013      	ands	r3, r2
 800ab98:	001e      	movs	r6, r3
 800ab9a:	4b27      	ldr	r3, [pc, #156]	; (800ac38 <ReadVariable+0x1e8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	029a      	lsls	r2, r3, #10
 800aba0:	23ff      	movs	r3, #255	; 0xff
 800aba2:	029b      	lsls	r3, r3, #10
 800aba4:	401a      	ands	r2, r3
 800aba6:	23b8      	movs	r3, #184	; 0xb8
 800aba8:	025b      	lsls	r3, r3, #9
 800abaa:	0011      	movs	r1, r2
 800abac:	0018      	movs	r0, r3
 800abae:	f7f5 fb3b 	bl	8000228 <__aeabi_uidivmod>
 800abb2:	000b      	movs	r3, r1
 800abb4:	0adb      	lsrs	r3, r3, #11
 800abb6:	18f3      	adds	r3, r6, r3
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34
    pageaddress = PAGE_ADDRESS(page);
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2280      	movs	r2, #128	; 0x80
 800abbe:	0252      	lsls	r2, r2, #9
 800abc0:	4694      	mov	ip, r2
 800abc2:	4463      	add	r3, ip
 800abc4:	02de      	lsls	r6, r3, #11
 800abc6:	4b1c      	ldr	r3, [pc, #112]	; (800ac38 <ReadVariable+0x1e8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	029a      	lsls	r2, r3, #10
 800abcc:	23ff      	movs	r3, #255	; 0xff
 800abce:	029b      	lsls	r3, r3, #10
 800abd0:	4013      	ands	r3, r2
 800abd2:	0019      	movs	r1, r3
 800abd4:	23b8      	movs	r3, #184	; 0xb8
 800abd6:	0258      	lsls	r0, r3, #9
 800abd8:	f7f5 faa0 	bl	800011c <__udivsi3>
 800abdc:	0003      	movs	r3, r0
 800abde:	0019      	movs	r1, r3
 800abe0:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <ReadVariable+0x1e8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	029a      	lsls	r2, r3, #10
 800abe6:	23ff      	movs	r3, #255	; 0xff
 800abe8:	029b      	lsls	r3, r3, #10
 800abea:	4013      	ands	r3, r2
 800abec:	434b      	muls	r3, r1
 800abee:	18f3      	adds	r3, r6, r3
 800abf0:	633b      	str	r3, [r7, #48]	; 0x30
    pagestate = GetPageState(pageaddress);
 800abf2:	231b      	movs	r3, #27
 800abf4:	2210      	movs	r2, #16
 800abf6:	18ba      	adds	r2, r7, r2
 800abf8:	18d6      	adds	r6, r2, r3
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	0018      	movs	r0, r3
 800abfe:	f000 fd7b 	bl	800b6f8 <GetPageState>
 800ac02:	0003      	movs	r3, r0
 800ac04:	7033      	strb	r3, [r6, #0]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800ac06:	221b      	movs	r2, #27
 800ac08:	2110      	movs	r1, #16
 800ac0a:	187b      	adds	r3, r7, r1
 800ac0c:	189b      	adds	r3, r3, r2
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d100      	bne.n	800ac16 <ReadVariable+0x1c6>
 800ac14:	e768      	b.n	800aae8 <ReadVariable+0x98>
 800ac16:	187b      	adds	r3, r7, r1
 800ac18:	189b      	adds	r3, r3, r2
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d100      	bne.n	800ac22 <ReadVariable+0x1d2>
 800ac20:	e762      	b.n	800aae8 <ReadVariable+0x98>
 800ac22:	187b      	adds	r3, r7, r1
 800ac24:	189b      	adds	r3, r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d100      	bne.n	800ac2e <ReadVariable+0x1de>
 800ac2c:	e75c      	b.n	800aae8 <ReadVariable+0x98>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800ac2e:	2307      	movs	r3, #7
}
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	b00f      	add	sp, #60	; 0x3c
 800ac36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac38:	1fff75e0 	.word	0x1fff75e0

0800ac3c <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800ac3c:	b5b0      	push	{r4, r5, r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	0002      	movs	r2, r0
 800ac44:	6039      	str	r1, [r7, #0]
 800ac46:	1dbb      	adds	r3, r7, #6
 800ac48:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800ac4a:	250e      	movs	r5, #14
 800ac4c:	197b      	adds	r3, r7, r5
 800ac4e:	2200      	movs	r2, #0
 800ac50:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800ac52:	197c      	adds	r4, r7, r5
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	1dbb      	adds	r3, r7, #6
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	0011      	movs	r1, r2
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f000 fbe1 	bl	800b424 <VerifyPagesFullWriteVariable>
 800ac62:	0003      	movs	r3, r0
 800ac64:	8023      	strh	r3, [r4, #0]
#endif
  if (status == EE_PAGE_FULL)
 800ac66:	197b      	adds	r3, r7, r5
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	2b12      	cmp	r3, #18
 800ac6c:	d108      	bne.n	800ac80 <WriteVariable+0x44>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	1dbb      	adds	r3, r7, #6
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	2200      	movs	r2, #0
 800ac76:	0018      	movs	r0, r3
 800ac78:	f000 f96c 	bl	800af54 <PagesTransfer>
 800ac7c:	0003      	movs	r3, r0
 800ac7e:	e002      	b.n	800ac86 <WriteVariable+0x4a>
  }

  /* Return last operation status */
  return status;
 800ac80:	230e      	movs	r3, #14
 800ac82:	18fb      	adds	r3, r7, r3
 800ac84:	881b      	ldrh	r3, [r3, #0]
}
 800ac86:	0018      	movs	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	b004      	add	sp, #16
 800ac8c:	bdb0      	pop	{r4, r5, r7, pc}

0800ac8e <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 800ac98:	230e      	movs	r3, #14
 800ac9a:	18fb      	adds	r3, r7, r3
 800ac9c:	2211      	movs	r2, #17
 800ac9e:	801a      	strh	r2, [r3, #0]
  uint32_t counter = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 800aca4:	e00f      	b.n	800acc6 <VerifyPageFullyErased+0x38>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	18d3      	adds	r3, r2, r3
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	1c51      	adds	r1, r2, #1
 800acb2:	d101      	bne.n	800acb8 <VerifyPageFullyErased+0x2a>
 800acb4:	3301      	adds	r3, #1
 800acb6:	d003      	beq.n	800acc0 <VerifyPageFullyErased+0x32>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 800acb8:	230e      	movs	r3, #14
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	2210      	movs	r2, #16
 800acbe:	801a      	strh	r2, [r3, #0]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	3308      	adds	r3, #8
 800acc4:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d3eb      	bcc.n	800aca6 <VerifyPageFullyErased+0x18>
  }

  /* Return readstatus value */
  return readstatus;
 800acce:	230e      	movs	r3, #14
 800acd0:	18fb      	adds	r3, r7, r3
 800acd2:	881b      	ldrh	r3, [r3, #0]
}
 800acd4:	0018      	movs	r0, r3
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b004      	add	sp, #16
 800acda:	bd80      	pop	{r7, pc}

0800acdc <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 800acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	0002      	movs	r2, r0
 800ace4:	1dfb      	adds	r3, r7, #7
 800ace6:	701a      	strb	r2, [r3, #0]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 800ace8:	2517      	movs	r5, #23
 800acea:	197b      	adds	r3, r7, r5
 800acec:	2205      	movs	r2, #5
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	2616      	movs	r6, #22
 800acf2:	19bb      	adds	r3, r7, r6
 800acf4:	2205      	movs	r2, #5
 800acf6:	701a      	strb	r2, [r3, #0]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	2300      	movs	r3, #0
 800ad02:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 800ad04:	4b90      	ldr	r3, [pc, #576]	; (800af48 <FindPage+0x26c>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2280      	movs	r2, #128	; 0x80
 800ad0e:	0252      	lsls	r2, r2, #9
 800ad10:	4694      	mov	ip, r2
 800ad12:	4463      	add	r3, ip
 800ad14:	02dc      	lsls	r4, r3, #11
 800ad16:	4b8d      	ldr	r3, [pc, #564]	; (800af4c <FindPage+0x270>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	029a      	lsls	r2, r3, #10
 800ad1c:	23ff      	movs	r3, #255	; 0xff
 800ad1e:	029b      	lsls	r3, r3, #10
 800ad20:	4013      	ands	r3, r2
 800ad22:	0019      	movs	r1, r3
 800ad24:	23b8      	movs	r3, #184	; 0xb8
 800ad26:	0258      	lsls	r0, r3, #9
 800ad28:	f7f5 f9f8 	bl	800011c <__udivsi3>
 800ad2c:	0003      	movs	r3, r0
 800ad2e:	0019      	movs	r1, r3
 800ad30:	4b86      	ldr	r3, [pc, #536]	; (800af4c <FindPage+0x270>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	029a      	lsls	r2, r3, #10
 800ad36:	23ff      	movs	r3, #255	; 0xff
 800ad38:	029b      	lsls	r3, r3, #10
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	434b      	muls	r3, r1
 800ad3e:	18e3      	adds	r3, r4, r3
 800ad40:	197c      	adds	r4, r7, r5
 800ad42:	0018      	movs	r0, r3
 800ad44:	f000 fcd8 	bl	800b6f8 <GetPageState>
 800ad48:	0003      	movs	r3, r0
 800ad4a:	7023      	strb	r3, [r4, #0]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800ad4c:	4b7f      	ldr	r3, [pc, #508]	; (800af4c <FindPage+0x270>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	029a      	lsls	r2, r3, #10
 800ad52:	23ff      	movs	r3, #255	; 0xff
 800ad54:	029b      	lsls	r3, r3, #10
 800ad56:	401a      	ands	r2, r3
 800ad58:	23b8      	movs	r3, #184	; 0xb8
 800ad5a:	025b      	lsls	r3, r3, #9
 800ad5c:	0011      	movs	r1, r2
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f7f5 fa62 	bl	8000228 <__aeabi_uidivmod>
 800ad64:	000b      	movs	r3, r1
 800ad66:	0adb      	lsrs	r3, r3, #11
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	220f      	movs	r2, #15
 800ad70:	4013      	ands	r3, r2
 800ad72:	001c      	movs	r4, r3
 800ad74:	4b75      	ldr	r3, [pc, #468]	; (800af4c <FindPage+0x270>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	029a      	lsls	r2, r3, #10
 800ad7a:	23ff      	movs	r3, #255	; 0xff
 800ad7c:	029b      	lsls	r3, r3, #10
 800ad7e:	401a      	ands	r2, r3
 800ad80:	23b8      	movs	r3, #184	; 0xb8
 800ad82:	025b      	lsls	r3, r3, #9
 800ad84:	0011      	movs	r1, r2
 800ad86:	0018      	movs	r0, r3
 800ad88:	f7f5 fa4e 	bl	8000228 <__aeabi_uidivmod>
 800ad8c:	000b      	movs	r3, r1
 800ad8e:	0adb      	lsrs	r3, r3, #11
 800ad90:	18e3      	adds	r3, r4, r3
 800ad92:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2280      	movs	r2, #128	; 0x80
 800ad98:	0252      	lsls	r2, r2, #9
 800ad9a:	4694      	mov	ip, r2
 800ad9c:	4463      	add	r3, ip
 800ad9e:	02dc      	lsls	r4, r3, #11
 800ada0:	4b6a      	ldr	r3, [pc, #424]	; (800af4c <FindPage+0x270>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	029a      	lsls	r2, r3, #10
 800ada6:	23ff      	movs	r3, #255	; 0xff
 800ada8:	029b      	lsls	r3, r3, #10
 800adaa:	4013      	ands	r3, r2
 800adac:	0019      	movs	r1, r3
 800adae:	23b8      	movs	r3, #184	; 0xb8
 800adb0:	0258      	lsls	r0, r3, #9
 800adb2:	f7f5 f9b3 	bl	800011c <__udivsi3>
 800adb6:	0003      	movs	r3, r0
 800adb8:	0019      	movs	r1, r3
 800adba:	4b64      	ldr	r3, [pc, #400]	; (800af4c <FindPage+0x270>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	029a      	lsls	r2, r3, #10
 800adc0:	23ff      	movs	r3, #255	; 0xff
 800adc2:	029b      	lsls	r3, r3, #10
 800adc4:	4013      	ands	r3, r2
 800adc6:	434b      	muls	r3, r1
 800adc8:	18e3      	adds	r3, r4, r3
 800adca:	19bc      	adds	r4, r7, r6
 800adcc:	0018      	movs	r0, r3
 800adce:	f000 fc93 	bl	800b6f8 <GetPageState>
 800add2:	0003      	movs	r3, r0
 800add4:	7023      	strb	r3, [r4, #0]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 800add6:	4b5d      	ldr	r3, [pc, #372]	; (800af4c <FindPage+0x270>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	029a      	lsls	r2, r3, #10
 800addc:	23ff      	movs	r3, #255	; 0xff
 800adde:	029b      	lsls	r3, r3, #10
 800ade0:	401a      	ands	r2, r3
 800ade2:	23b8      	movs	r3, #184	; 0xb8
 800ade4:	025b      	lsls	r3, r3, #9
 800ade6:	0011      	movs	r1, r2
 800ade8:	0018      	movs	r0, r3
 800adea:	f7f5 fa1d 	bl	8000228 <__aeabi_uidivmod>
 800adee:	000b      	movs	r3, r1
 800adf0:	0adb      	lsrs	r3, r3, #11
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	330f      	adds	r3, #15
 800adf8:	220f      	movs	r2, #15
 800adfa:	4013      	ands	r3, r2
 800adfc:	001c      	movs	r4, r3
 800adfe:	4b53      	ldr	r3, [pc, #332]	; (800af4c <FindPage+0x270>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	029a      	lsls	r2, r3, #10
 800ae04:	23ff      	movs	r3, #255	; 0xff
 800ae06:	029b      	lsls	r3, r3, #10
 800ae08:	401a      	ands	r2, r3
 800ae0a:	23b8      	movs	r3, #184	; 0xb8
 800ae0c:	025b      	lsls	r3, r3, #9
 800ae0e:	0011      	movs	r1, r2
 800ae10:	0018      	movs	r0, r3
 800ae12:	f7f5 fa09 	bl	8000228 <__aeabi_uidivmod>
 800ae16:	000b      	movs	r3, r1
 800ae18:	0adb      	lsrs	r3, r3, #11
 800ae1a:	18e3      	adds	r3, r4, r3
 800ae1c:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 800ae1e:	1dfb      	adds	r3, r7, #7
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d100      	bne.n	800ae28 <FindPage+0x14c>
 800ae26:	e07e      	b.n	800af26 <FindPage+0x24a>
 800ae28:	dd00      	ble.n	800ae2c <FindPage+0x150>
 800ae2a:	e086      	b.n	800af3a <FindPage+0x25e>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d100      	bne.n	800ae32 <FindPage+0x156>
 800ae30:	e068      	b.n	800af04 <FindPage+0x228>
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d000      	beq.n	800ae38 <FindPage+0x15c>
 800ae36:	e080      	b.n	800af3a <FindPage+0x25e>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800ae38:	197b      	adds	r3, r7, r5
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d12c      	bne.n	800ae9a <FindPage+0x1be>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800ae40:	4b43      	ldr	r3, [pc, #268]	; (800af50 <FindPage+0x274>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	2380      	movs	r3, #128	; 0x80
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d201      	bcs.n	800ae50 <FindPage+0x174>
        {
          /* Return current Active page */
          return currentpage;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	e076      	b.n	800af3e <FindPage+0x262>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800ae50:	2316      	movs	r3, #22
 800ae52:	18fb      	adds	r3, r7, r3
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d106      	bne.n	800ae68 <FindPage+0x18c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 800ae5a:	f7ff fd53 	bl	800a904 <EE_CleanUp>
 800ae5e:	1e03      	subs	r3, r0, #0
 800ae60:	d002      	beq.n	800ae68 <FindPage+0x18c>
            {
              return EE_NO_PAGE_FOUND;
 800ae62:	2301      	movs	r3, #1
 800ae64:	425b      	negs	r3, r3
 800ae66:	e06a      	b.n	800af3e <FindPage+0x262>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	2103      	movs	r1, #3
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f000 fb71 	bl	800b554 <SetPageState>
 800ae72:	1e03      	subs	r3, r0, #0
 800ae74:	d002      	beq.n	800ae7c <FindPage+0x1a0>
          {
            return EE_NO_PAGE_FOUND;
 800ae76:	2301      	movs	r3, #1
 800ae78:	425b      	negs	r3, r3
 800ae7a:	e060      	b.n	800af3e <FindPage+0x262>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2102      	movs	r1, #2
 800ae80:	0018      	movs	r0, r3
 800ae82:	f000 fb67 	bl	800b554 <SetPageState>
 800ae86:	1e03      	subs	r3, r0, #0
 800ae88:	d002      	beq.n	800ae90 <FindPage+0x1b4>
          {
            return EE_NO_PAGE_FOUND;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	425b      	negs	r3, r3
 800ae8e:	e056      	b.n	800af3e <FindPage+0x262>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800ae90:	4b2f      	ldr	r3, [pc, #188]	; (800af50 <FindPage+0x274>)
 800ae92:	2220      	movs	r2, #32
 800ae94:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	e051      	b.n	800af3e <FindPage+0x262>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800ae9a:	2317      	movs	r3, #23
 800ae9c:	18fb      	adds	r3, r7, r3
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d12c      	bne.n	800aefe <FindPage+0x222>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 800aea4:	4b2a      	ldr	r3, [pc, #168]	; (800af50 <FindPage+0x274>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	2380      	movs	r3, #128	; 0x80
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d201      	bcs.n	800aeb4 <FindPage+0x1d8>
          {
            /* Return current receive page */
            return currentpage;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	e044      	b.n	800af3e <FindPage+0x262>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 800aeb4:	2316      	movs	r3, #22
 800aeb6:	18fb      	adds	r3, r7, r3
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	d106      	bne.n	800aecc <FindPage+0x1f0>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800aebe:	f7ff fd21 	bl	800a904 <EE_CleanUp>
 800aec2:	1e03      	subs	r3, r0, #0
 800aec4:	d002      	beq.n	800aecc <FindPage+0x1f0>
              {
                return EE_NO_PAGE_FOUND;
 800aec6:	2301      	movs	r3, #1
 800aec8:	425b      	negs	r3, r3
 800aeca:	e038      	b.n	800af3e <FindPage+0x262>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	2103      	movs	r1, #3
 800aed0:	0018      	movs	r0, r3
 800aed2:	f000 fb3f 	bl	800b554 <SetPageState>
 800aed6:	1e03      	subs	r3, r0, #0
 800aed8:	d002      	beq.n	800aee0 <FindPage+0x204>
            {
              return EE_NO_PAGE_FOUND;
 800aeda:	2301      	movs	r3, #1
 800aedc:	425b      	negs	r3, r3
 800aede:	e02e      	b.n	800af3e <FindPage+0x262>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2101      	movs	r1, #1
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 fb35 	bl	800b554 <SetPageState>
 800aeea:	1e03      	subs	r3, r0, #0
 800aeec:	d002      	beq.n	800aef4 <FindPage+0x218>
            {
              return EE_NO_PAGE_FOUND;
 800aeee:	2301      	movs	r3, #1
 800aef0:	425b      	negs	r3, r3
 800aef2:	e024      	b.n	800af3e <FindPage+0x262>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800aef4:	4b16      	ldr	r3, [pc, #88]	; (800af50 <FindPage+0x274>)
 800aef6:	2220      	movs	r2, #32
 800aef8:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	e01f      	b.n	800af3e <FindPage+0x262>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800aefe:	2301      	movs	r3, #1
 800af00:	425b      	negs	r3, r3
 800af02:	e01c      	b.n	800af3e <FindPage+0x262>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800af04:	2317      	movs	r3, #23
 800af06:	18fb      	adds	r3, r7, r3
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d101      	bne.n	800af12 <FindPage+0x236>
      {
        return currentpage;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	e015      	b.n	800af3e <FindPage+0x262>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800af12:	2317      	movs	r3, #23
 800af14:	18fb      	adds	r3, r7, r3
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <FindPage+0x244>
        {
          return previouspage;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	e00e      	b.n	800af3e <FindPage+0x262>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800af20:	2301      	movs	r3, #1
 800af22:	425b      	negs	r3, r3
 800af24:	e00b      	b.n	800af3e <FindPage+0x262>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 800af26:	2316      	movs	r3, #22
 800af28:	18fb      	adds	r3, r7, r3
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <FindPage+0x258>
      {
        return followingpage;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	e004      	b.n	800af3e <FindPage+0x262>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 800af34:	2301      	movs	r3, #1
 800af36:	425b      	negs	r3, r3
 800af38:	e001      	b.n	800af3e <FindPage+0x262>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 800af3a:	2301      	movs	r3, #1
 800af3c:	425b      	negs	r3, r3
}
 800af3e:	0018      	movs	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	b007      	add	sp, #28
 800af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	2000013a 	.word	0x2000013a
 800af4c:	1fff75e0 	.word	0x1fff75e0
 800af50:	20000008 	.word	0x20000008

0800af54 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 800af54:	b5b0      	push	{r4, r5, r7, lr}
 800af56:	b08a      	sub	sp, #40	; 0x28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6039      	str	r1, [r7, #0]
 800af5c:	0011      	movs	r1, r2
 800af5e:	1dbb      	adds	r3, r7, #6
 800af60:	1c02      	adds	r2, r0, #0
 800af62:	801a      	strh	r2, [r3, #0]
 800af64:	1d7b      	adds	r3, r7, #5
 800af66:	1c0a      	adds	r2, r1, #0
 800af68:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 800af6a:	2327      	movs	r3, #39	; 0x27
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	2205      	movs	r2, #5
 800af70:	701a      	strb	r2, [r3, #0]
  uint32_t pageaddress = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800af7e:	2200      	movs	r2, #0
 800af80:	2300      	movs	r3, #0
 800af82:	613a      	str	r2, [r7, #16]
 800af84:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 800af86:	230e      	movs	r3, #14
 800af88:	18fb      	adds	r3, r7, r3
 800af8a:	2200      	movs	r2, #0
 800af8c:	801a      	strh	r2, [r3, #0]
  EE_DATA_TYPE DataValue = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 800af92:	1d7b      	adds	r3, r7, #5
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <PagesTransfer+0x4a>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e000      	b.n	800afa0 <PagesTransfer+0x4c>
 800af9e:	2301      	movs	r3, #1
 800afa0:	0018      	movs	r0, r3
 800afa2:	f7ff fe9b 	bl	800acdc <FindPage>
 800afa6:	0003      	movs	r3, r0
 800afa8:	623b      	str	r3, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	3301      	adds	r3, #1
 800afae:	d101      	bne.n	800afb4 <PagesTransfer+0x60>
  {
    return EE_ERROR_NOERASE_PAGE;
 800afb0:	2304      	movs	r3, #4
 800afb2:	e22d      	b.n	800b410 <PagesTransfer+0x4bc>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 800afb4:	4bba      	ldr	r3, [pc, #744]	; (800b2a0 <PagesTransfer+0x34c>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	4bb9      	ldr	r3, [pc, #740]	; (800b2a4 <PagesTransfer+0x350>)
 800afc0:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800afc2:	4bb9      	ldr	r3, [pc, #740]	; (800b2a8 <PagesTransfer+0x354>)
 800afc4:	2220      	movs	r2, #32
 800afc6:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 800afc8:	1d7b      	adds	r3, r7, #5
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d108      	bne.n	800afe2 <PagesTransfer+0x8e>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	2101      	movs	r1, #1
 800afd4:	0018      	movs	r0, r3
 800afd6:	f000 fabd 	bl	800b554 <SetPageState>
 800afda:	1e03      	subs	r3, r0, #0
 800afdc:	d001      	beq.n	800afe2 <PagesTransfer+0x8e>
    {
      return EE_WRITE_ERROR;
 800afde:	2302      	movs	r3, #2
 800afe0:	e216      	b.n	800b410 <PagesTransfer+0x4bc>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 800afe2:	4bb2      	ldr	r3, [pc, #712]	; (800b2ac <PagesTransfer+0x358>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	029a      	lsls	r2, r3, #10
 800afe8:	23ff      	movs	r3, #255	; 0xff
 800afea:	029b      	lsls	r3, r3, #10
 800afec:	401a      	ands	r2, r3
 800afee:	23b8      	movs	r3, #184	; 0xb8
 800aff0:	025b      	lsls	r3, r3, #9
 800aff2:	0011      	movs	r1, r2
 800aff4:	0018      	movs	r0, r3
 800aff6:	f7f5 f917 	bl	8000228 <__aeabi_uidivmod>
 800affa:	000b      	movs	r3, r1
 800affc:	0adb      	lsrs	r3, r3, #11
 800affe:	6a3a      	ldr	r2, [r7, #32]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	330f      	adds	r3, #15
 800b004:	220f      	movs	r2, #15
 800b006:	4013      	ands	r3, r2
 800b008:	001c      	movs	r4, r3
 800b00a:	4ba8      	ldr	r3, [pc, #672]	; (800b2ac <PagesTransfer+0x358>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	029a      	lsls	r2, r3, #10
 800b010:	23ff      	movs	r3, #255	; 0xff
 800b012:	029b      	lsls	r3, r3, #10
 800b014:	401a      	ands	r2, r3
 800b016:	23b8      	movs	r3, #184	; 0xb8
 800b018:	025b      	lsls	r3, r3, #9
 800b01a:	0011      	movs	r1, r2
 800b01c:	0018      	movs	r0, r3
 800b01e:	f7f5 f903 	bl	8000228 <__aeabi_uidivmod>
 800b022:	000b      	movs	r3, r1
 800b024:	0adb      	lsrs	r3, r3, #11
 800b026:	18e3      	adds	r3, r4, r3
 800b028:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	2280      	movs	r2, #128	; 0x80
 800b02e:	0252      	lsls	r2, r2, #9
 800b030:	4694      	mov	ip, r2
 800b032:	4463      	add	r3, ip
 800b034:	02dc      	lsls	r4, r3, #11
 800b036:	4b9d      	ldr	r3, [pc, #628]	; (800b2ac <PagesTransfer+0x358>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	029a      	lsls	r2, r3, #10
 800b03c:	23ff      	movs	r3, #255	; 0xff
 800b03e:	029b      	lsls	r3, r3, #10
 800b040:	4013      	ands	r3, r2
 800b042:	0019      	movs	r1, r3
 800b044:	23b8      	movs	r3, #184	; 0xb8
 800b046:	0258      	lsls	r0, r3, #9
 800b048:	f7f5 f868 	bl	800011c <__udivsi3>
 800b04c:	0003      	movs	r3, r0
 800b04e:	0019      	movs	r1, r3
 800b050:	4b96      	ldr	r3, [pc, #600]	; (800b2ac <PagesTransfer+0x358>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	029a      	lsls	r2, r3, #10
 800b056:	23ff      	movs	r3, #255	; 0xff
 800b058:	029b      	lsls	r3, r3, #10
 800b05a:	4013      	ands	r3, r2
 800b05c:	434b      	muls	r3, r1
 800b05e:	18e3      	adds	r3, r4, r3
 800b060:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 800b062:	2527      	movs	r5, #39	; 0x27
 800b064:	197c      	adds	r4, r7, r5
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	0018      	movs	r0, r3
 800b06a:	f000 fb45 	bl	800b6f8 <GetPageState>
 800b06e:	0003      	movs	r3, r0
 800b070:	7023      	strb	r3, [r4, #0]

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b072:	197b      	adds	r3, r7, r5
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b02      	cmp	r3, #2
 800b078:	d004      	beq.n	800b084 <PagesTransfer+0x130>
 800b07a:	197b      	adds	r3, r7, r5
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d000      	beq.n	800b084 <PagesTransfer+0x130>
 800b082:	e0b6      	b.n	800b1f2 <PagesTransfer+0x29e>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800b084:	2327      	movs	r3, #39	; 0x27
 800b086:	18fb      	adds	r3, r7, r3
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d108      	bne.n	800b0a0 <PagesTransfer+0x14c>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	2104      	movs	r1, #4
 800b092:	0018      	movs	r0, r3
 800b094:	f000 fa5e 	bl	800b554 <SetPageState>
 800b098:	1e03      	subs	r3, r0, #0
 800b09a:	d001      	beq.n	800b0a0 <PagesTransfer+0x14c>
      {
        return EE_WRITE_ERROR;
 800b09c:	2302      	movs	r3, #2
 800b09e:	e1b7      	b.n	800b410 <PagesTransfer+0x4bc>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 800b0a0:	4b82      	ldr	r3, [pc, #520]	; (800b2ac <PagesTransfer+0x358>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	029a      	lsls	r2, r3, #10
 800b0a6:	23ff      	movs	r3, #255	; 0xff
 800b0a8:	029b      	lsls	r3, r3, #10
 800b0aa:	401a      	ands	r2, r3
 800b0ac:	23b8      	movs	r3, #184	; 0xb8
 800b0ae:	025b      	lsls	r3, r3, #9
 800b0b0:	0011      	movs	r1, r2
 800b0b2:	0018      	movs	r0, r3
 800b0b4:	f7f5 f8b8 	bl	8000228 <__aeabi_uidivmod>
 800b0b8:	000b      	movs	r3, r1
 800b0ba:	0adb      	lsrs	r3, r3, #11
 800b0bc:	6a3a      	ldr	r2, [r7, #32]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	330f      	adds	r3, #15
 800b0c2:	220f      	movs	r2, #15
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	001c      	movs	r4, r3
 800b0c8:	4b78      	ldr	r3, [pc, #480]	; (800b2ac <PagesTransfer+0x358>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	029a      	lsls	r2, r3, #10
 800b0ce:	23ff      	movs	r3, #255	; 0xff
 800b0d0:	029b      	lsls	r3, r3, #10
 800b0d2:	401a      	ands	r2, r3
 800b0d4:	23b8      	movs	r3, #184	; 0xb8
 800b0d6:	025b      	lsls	r3, r3, #9
 800b0d8:	0011      	movs	r1, r2
 800b0da:	0018      	movs	r0, r3
 800b0dc:	f7f5 f8a4 	bl	8000228 <__aeabi_uidivmod>
 800b0e0:	000b      	movs	r3, r1
 800b0e2:	0adb      	lsrs	r3, r3, #11
 800b0e4:	18e3      	adds	r3, r4, r3
 800b0e6:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	2280      	movs	r2, #128	; 0x80
 800b0ec:	0252      	lsls	r2, r2, #9
 800b0ee:	4694      	mov	ip, r2
 800b0f0:	4463      	add	r3, ip
 800b0f2:	02dc      	lsls	r4, r3, #11
 800b0f4:	4b6d      	ldr	r3, [pc, #436]	; (800b2ac <PagesTransfer+0x358>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	029a      	lsls	r2, r3, #10
 800b0fa:	23ff      	movs	r3, #255	; 0xff
 800b0fc:	029b      	lsls	r3, r3, #10
 800b0fe:	4013      	ands	r3, r2
 800b100:	0019      	movs	r1, r3
 800b102:	23b8      	movs	r3, #184	; 0xb8
 800b104:	0258      	lsls	r0, r3, #9
 800b106:	f7f5 f809 	bl	800011c <__udivsi3>
 800b10a:	0003      	movs	r3, r0
 800b10c:	0019      	movs	r1, r3
 800b10e:	4b67      	ldr	r3, [pc, #412]	; (800b2ac <PagesTransfer+0x358>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	029a      	lsls	r2, r3, #10
 800b114:	23ff      	movs	r3, #255	; 0xff
 800b116:	029b      	lsls	r3, r3, #10
 800b118:	4013      	ands	r3, r2
 800b11a:	434b      	muls	r3, r1
 800b11c:	18e3      	adds	r3, r4, r3
 800b11e:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 800b120:	2327      	movs	r3, #39	; 0x27
 800b122:	18fc      	adds	r4, r7, r3
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	0018      	movs	r0, r3
 800b128:	f000 fae6 	bl	800b6f8 <GetPageState>
 800b12c:	0003      	movs	r3, r0
 800b12e:	7023      	strb	r3, [r4, #0]

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b130:	e055      	b.n	800b1de <PagesTransfer+0x28a>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 800b132:	2327      	movs	r3, #39	; 0x27
 800b134:	18fb      	adds	r3, r7, r3
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d108      	bne.n	800b14e <PagesTransfer+0x1fa>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	2104      	movs	r1, #4
 800b140:	0018      	movs	r0, r3
 800b142:	f000 fa07 	bl	800b554 <SetPageState>
 800b146:	1e03      	subs	r3, r0, #0
 800b148:	d001      	beq.n	800b14e <PagesTransfer+0x1fa>
        {
          return EE_WRITE_ERROR;
 800b14a:	2302      	movs	r3, #2
 800b14c:	e160      	b.n	800b410 <PagesTransfer+0x4bc>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 800b14e:	4b57      	ldr	r3, [pc, #348]	; (800b2ac <PagesTransfer+0x358>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	029a      	lsls	r2, r3, #10
 800b154:	23ff      	movs	r3, #255	; 0xff
 800b156:	029b      	lsls	r3, r3, #10
 800b158:	401a      	ands	r2, r3
 800b15a:	23b8      	movs	r3, #184	; 0xb8
 800b15c:	025b      	lsls	r3, r3, #9
 800b15e:	0011      	movs	r1, r2
 800b160:	0018      	movs	r0, r3
 800b162:	f7f5 f861 	bl	8000228 <__aeabi_uidivmod>
 800b166:	000b      	movs	r3, r1
 800b168:	0adb      	lsrs	r3, r3, #11
 800b16a:	6a3a      	ldr	r2, [r7, #32]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	330f      	adds	r3, #15
 800b170:	220f      	movs	r2, #15
 800b172:	4013      	ands	r3, r2
 800b174:	001c      	movs	r4, r3
 800b176:	4b4d      	ldr	r3, [pc, #308]	; (800b2ac <PagesTransfer+0x358>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	029a      	lsls	r2, r3, #10
 800b17c:	23ff      	movs	r3, #255	; 0xff
 800b17e:	029b      	lsls	r3, r3, #10
 800b180:	401a      	ands	r2, r3
 800b182:	23b8      	movs	r3, #184	; 0xb8
 800b184:	025b      	lsls	r3, r3, #9
 800b186:	0011      	movs	r1, r2
 800b188:	0018      	movs	r0, r3
 800b18a:	f7f5 f84d 	bl	8000228 <__aeabi_uidivmod>
 800b18e:	000b      	movs	r3, r1
 800b190:	0adb      	lsrs	r3, r3, #11
 800b192:	18e3      	adds	r3, r4, r3
 800b194:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	2280      	movs	r2, #128	; 0x80
 800b19a:	0252      	lsls	r2, r2, #9
 800b19c:	4694      	mov	ip, r2
 800b19e:	4463      	add	r3, ip
 800b1a0:	02dc      	lsls	r4, r3, #11
 800b1a2:	4b42      	ldr	r3, [pc, #264]	; (800b2ac <PagesTransfer+0x358>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	029a      	lsls	r2, r3, #10
 800b1a8:	23ff      	movs	r3, #255	; 0xff
 800b1aa:	029b      	lsls	r3, r3, #10
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	0019      	movs	r1, r3
 800b1b0:	23b8      	movs	r3, #184	; 0xb8
 800b1b2:	0258      	lsls	r0, r3, #9
 800b1b4:	f7f4 ffb2 	bl	800011c <__udivsi3>
 800b1b8:	0003      	movs	r3, r0
 800b1ba:	0019      	movs	r1, r3
 800b1bc:	4b3b      	ldr	r3, [pc, #236]	; (800b2ac <PagesTransfer+0x358>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	029a      	lsls	r2, r3, #10
 800b1c2:	23ff      	movs	r3, #255	; 0xff
 800b1c4:	029b      	lsls	r3, r3, #10
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	434b      	muls	r3, r1
 800b1ca:	18e3      	adds	r3, r4, r3
 800b1cc:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 800b1ce:	2327      	movs	r3, #39	; 0x27
 800b1d0:	18fc      	adds	r4, r7, r3
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f000 fa8f 	bl	800b6f8 <GetPageState>
 800b1da:	0003      	movs	r3, r0
 800b1dc:	7023      	strb	r3, [r4, #0]
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b1de:	2227      	movs	r2, #39	; 0x27
 800b1e0:	18bb      	adds	r3, r7, r2
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d0a4      	beq.n	800b132 <PagesTransfer+0x1de>
 800b1e8:	18bb      	adds	r3, r7, r2
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d0a0      	beq.n	800b132 <PagesTransfer+0x1de>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b1f0:	e00a      	b.n	800b208 <PagesTransfer+0x2b4>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 800b1f2:	1d7b      	adds	r3, r7, #5
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d104      	bne.n	800b204 <PagesTransfer+0x2b0>
 800b1fa:	2327      	movs	r3, #39	; 0x27
 800b1fc:	18fb      	adds	r3, r7, r3
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b03      	cmp	r3, #3
 800b202:	d001      	beq.n	800b208 <PagesTransfer+0x2b4>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 800b204:	230a      	movs	r3, #10
 800b206:	e103      	b.n	800b410 <PagesTransfer+0x4bc>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 800b208:	1d7b      	adds	r3, r7, #5
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d000      	beq.n	800b212 <PagesTransfer+0x2be>
 800b210:	e0a6      	b.n	800b360 <PagesTransfer+0x40c>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b212:	2320      	movs	r3, #32
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	e037      	b.n	800b288 <PagesTransfer+0x334>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800b218:	4b22      	ldr	r3, [pc, #136]	; (800b2a4 <PagesTransfer+0x350>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2280      	movs	r2, #128	; 0x80
 800b21e:	0252      	lsls	r2, r2, #9
 800b220:	4694      	mov	ip, r2
 800b222:	4463      	add	r3, ip
 800b224:	02dc      	lsls	r4, r3, #11
 800b226:	4b21      	ldr	r3, [pc, #132]	; (800b2ac <PagesTransfer+0x358>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	029a      	lsls	r2, r3, #10
 800b22c:	23ff      	movs	r3, #255	; 0xff
 800b22e:	029b      	lsls	r3, r3, #10
 800b230:	4013      	ands	r3, r2
 800b232:	0019      	movs	r1, r3
 800b234:	23b8      	movs	r3, #184	; 0xb8
 800b236:	0258      	lsls	r0, r3, #9
 800b238:	f7f4 ff70 	bl	800011c <__udivsi3>
 800b23c:	0003      	movs	r3, r0
 800b23e:	0019      	movs	r1, r3
 800b240:	4b1a      	ldr	r3, [pc, #104]	; (800b2ac <PagesTransfer+0x358>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	029a      	lsls	r2, r3, #10
 800b246:	23ff      	movs	r3, #255	; 0xff
 800b248:	029b      	lsls	r3, r3, #10
 800b24a:	4013      	ands	r3, r2
 800b24c:	434b      	muls	r3, r1
 800b24e:	18e2      	adds	r2, r4, r3
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	18d3      	adds	r3, r2, r3
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	613a      	str	r2, [r7, #16]
 800b25a:	617b      	str	r3, [r7, #20]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) && (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)&& (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	3301      	adds	r3, #1
 800b260:	d103      	bne.n	800b26a <PagesTransfer+0x316>
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	3301      	adds	r3, #1
 800b266:	d100      	bne.n	800b26a <PagesTransfer+0x316>
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else
      {
        break;
 800b268:	e013      	b.n	800b292 <PagesTransfer+0x33e>
        uhNbWrittenElements++;
 800b26a:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <PagesTransfer+0x34c>)
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	b29a      	uxth	r2, r3
 800b272:	4b0b      	ldr	r3, [pc, #44]	; (800b2a0 <PagesTransfer+0x34c>)
 800b274:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b276:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <PagesTransfer+0x354>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3308      	adds	r3, #8
 800b27c:	001a      	movs	r2, r3
 800b27e:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <PagesTransfer+0x354>)
 800b280:	601a      	str	r2, [r3, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	3308      	adds	r3, #8
 800b286:	61fb      	str	r3, [r7, #28]
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	2380      	movs	r3, #128	; 0x80
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	429a      	cmp	r2, r3
 800b290:	d3c2      	bcc.n	800b218 <PagesTransfer+0x2c4>
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 800b292:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <PagesTransfer+0x350>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]
 800b29c:	e05b      	b.n	800b356 <PagesTransfer+0x402>
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	20000138 	.word	0x20000138
 800b2a4:	2000013a 	.word	0x2000013a
 800b2a8:	20000008 	.word	0x20000008
 800b2ac:	1fff75e0 	.word	0x1fff75e0
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 800b2b0:	4b59      	ldr	r3, [pc, #356]	; (800b418 <PagesTransfer+0x4c4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	029a      	lsls	r2, r3, #10
 800b2b6:	23ff      	movs	r3, #255	; 0xff
 800b2b8:	029b      	lsls	r3, r3, #10
 800b2ba:	401a      	ands	r2, r3
 800b2bc:	23b8      	movs	r3, #184	; 0xb8
 800b2be:	025b      	lsls	r3, r3, #9
 800b2c0:	0011      	movs	r1, r2
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f7f4 ffb0 	bl	8000228 <__aeabi_uidivmod>
 800b2c8:	000b      	movs	r3, r1
 800b2ca:	0adb      	lsrs	r3, r3, #11
 800b2cc:	6a3a      	ldr	r2, [r7, #32]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	330f      	adds	r3, #15
 800b2d2:	220f      	movs	r2, #15
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	001c      	movs	r4, r3
 800b2d8:	4b4f      	ldr	r3, [pc, #316]	; (800b418 <PagesTransfer+0x4c4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	029a      	lsls	r2, r3, #10
 800b2de:	23ff      	movs	r3, #255	; 0xff
 800b2e0:	029b      	lsls	r3, r3, #10
 800b2e2:	401a      	ands	r2, r3
 800b2e4:	23b8      	movs	r3, #184	; 0xb8
 800b2e6:	025b      	lsls	r3, r3, #9
 800b2e8:	0011      	movs	r1, r2
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f7f4 ff9c 	bl	8000228 <__aeabi_uidivmod>
 800b2f0:	000b      	movs	r3, r1
 800b2f2:	0adb      	lsrs	r3, r3, #11
 800b2f4:	18e3      	adds	r3, r4, r3
 800b2f6:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	2280      	movs	r2, #128	; 0x80
 800b2fc:	0252      	lsls	r2, r2, #9
 800b2fe:	4694      	mov	ip, r2
 800b300:	4463      	add	r3, ip
 800b302:	02dc      	lsls	r4, r3, #11
 800b304:	4b44      	ldr	r3, [pc, #272]	; (800b418 <PagesTransfer+0x4c4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	029a      	lsls	r2, r3, #10
 800b30a:	23ff      	movs	r3, #255	; 0xff
 800b30c:	029b      	lsls	r3, r3, #10
 800b30e:	4013      	ands	r3, r2
 800b310:	0019      	movs	r1, r3
 800b312:	23b8      	movs	r3, #184	; 0xb8
 800b314:	0258      	lsls	r0, r3, #9
 800b316:	f7f4 ff01 	bl	800011c <__udivsi3>
 800b31a:	0003      	movs	r3, r0
 800b31c:	0019      	movs	r1, r3
 800b31e:	4b3e      	ldr	r3, [pc, #248]	; (800b418 <PagesTransfer+0x4c4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	029a      	lsls	r2, r3, #10
 800b324:	23ff      	movs	r3, #255	; 0xff
 800b326:	029b      	lsls	r3, r3, #10
 800b328:	4013      	ands	r3, r2
 800b32a:	434b      	muls	r3, r1
 800b32c:	18e3      	adds	r3, r4, r3
 800b32e:	2527      	movs	r5, #39	; 0x27
 800b330:	197c      	adds	r4, r7, r5
 800b332:	0018      	movs	r0, r3
 800b334:	f000 f9e0 	bl	800b6f8 <GetPageState>
 800b338:	0003      	movs	r3, r0
 800b33a:	7023      	strb	r3, [r4, #0]

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800b33c:	197b      	adds	r3, r7, r5
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b03      	cmp	r3, #3
 800b342:	d10c      	bne.n	800b35e <PagesTransfer+0x40a>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800b344:	4b35      	ldr	r3, [pc, #212]	; (800b41c <PagesTransfer+0x4c8>)
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	33fc      	adds	r3, #252	; 0xfc
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	4b33      	ldr	r3, [pc, #204]	; (800b41c <PagesTransfer+0x4c8>)
 800b34e:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	3301      	adds	r3, #1
 800b354:	61fb      	str	r3, [r7, #28]
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	2b0f      	cmp	r3, #15
 800b35a:	d9a9      	bls.n	800b2b0 <PagesTransfer+0x35c>
 800b35c:	e000      	b.n	800b360 <PagesTransfer+0x40c>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 800b35e:	46c0      	nop			; (mov r8, r8)
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	1dbb      	adds	r3, r7, #6
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	0011      	movs	r1, r2
 800b368:	0018      	movs	r0, r3
 800b36a:	f000 f85b 	bl	800b424 <VerifyPagesFullWriteVariable>
 800b36e:	1e03      	subs	r3, r0, #0
 800b370:	d001      	beq.n	800b376 <PagesTransfer+0x422>
  {
    return EE_WRITE_ERROR;
 800b372:	2302      	movs	r3, #2
 800b374:	e04c      	b.n	800b410 <PagesTransfer+0x4bc>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b376:	4b29      	ldr	r3, [pc, #164]	; (800b41c <PagesTransfer+0x4c8>)
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d903      	bls.n	800b386 <PagesTransfer+0x432>
 800b37e:	4b27      	ldr	r3, [pc, #156]	; (800b41c <PagesTransfer+0x4c8>)
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	3b02      	subs	r3, #2
 800b384:	e000      	b.n	800b388 <PagesTransfer+0x434>
 800b386:	2301      	movs	r3, #1
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	e032      	b.n	800b3f2 <PagesTransfer+0x49e>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 800b38c:	1dbb      	adds	r3, r7, #6
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	429a      	cmp	r2, r3
 800b394:	d02a      	beq.n	800b3ec <PagesTransfer+0x498>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	250e      	movs	r5, #14
 800b39c:	197c      	adds	r4, r7, r5
 800b39e:	2208      	movs	r2, #8
 800b3a0:	18ba      	adds	r2, r7, r2
 800b3a2:	0011      	movs	r1, r2
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f7ff fb53 	bl	800aa50 <ReadVariable>
 800b3aa:	0003      	movs	r3, r0
 800b3ac:	8023      	strh	r3, [r4, #0]
      if (status == EE_OK)
 800b3ae:	0029      	movs	r1, r5
 800b3b0:	187b      	adds	r3, r7, r1
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d111      	bne.n	800b3dc <PagesTransfer+0x488>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	000d      	movs	r5, r1
 800b3c0:	187c      	adds	r4, r7, r1
 800b3c2:	0011      	movs	r1, r2
 800b3c4:	0018      	movs	r0, r3
 800b3c6:	f000 f82d 	bl	800b424 <VerifyPagesFullWriteVariable>
 800b3ca:	0003      	movs	r3, r0
 800b3cc:	8023      	strh	r3, [r4, #0]
    #endif
        if (status != EE_OK)
 800b3ce:	197b      	adds	r3, r7, r5
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <PagesTransfer+0x498>
        {
          return status;
 800b3d6:	197b      	adds	r3, r7, r5
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	e019      	b.n	800b410 <PagesTransfer+0x4bc>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 800b3dc:	220e      	movs	r2, #14
 800b3de:	18bb      	adds	r3, r7, r2
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	2b07      	cmp	r3, #7
 800b3e4:	d002      	beq.n	800b3ec <PagesTransfer+0x498>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800b3e6:	18bb      	adds	r3, r7, r2
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	e011      	b.n	800b410 <PagesTransfer+0x4bc>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	61fb      	str	r3, [r7, #28]
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d9c9      	bls.n	800b38c <PagesTransfer+0x438>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800b3f8:	4b09      	ldr	r3, [pc, #36]	; (800b420 <PagesTransfer+0x4cc>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2102      	movs	r1, #2
 800b3fe:	0018      	movs	r0, r3
 800b400:	f000 f8a8 	bl	800b554 <SetPageState>
 800b404:	1e03      	subs	r3, r0, #0
 800b406:	d001      	beq.n	800b40c <PagesTransfer+0x4b8>
  {
    return EE_WRITE_ERROR;
 800b408:	2302      	movs	r3, #2
 800b40a:	e001      	b.n	800b410 <PagesTransfer+0x4bc>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 800b40c:	2380      	movs	r3, #128	; 0x80
 800b40e:	005b      	lsls	r3, r3, #1
}
 800b410:	0018      	movs	r0, r3
 800b412:	46bd      	mov	sp, r7
 800b414:	b00a      	add	sp, #40	; 0x28
 800b416:	bdb0      	pop	{r4, r5, r7, pc}
 800b418:	1fff75e0 	.word	0x1fff75e0
 800b41c:	20000138 	.word	0x20000138
 800b420:	2000013a 	.word	0x2000013a

0800b424 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 800b424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b426:	b091      	sub	sp, #68	; 0x44
 800b428:	af00      	add	r7, sp, #0
 800b42a:	0003      	movs	r3, r0
 800b42c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b42e:	222e      	movs	r2, #46	; 0x2e
 800b430:	18ba      	adds	r2, r7, r2
 800b432:	8013      	strh	r3, [r2, #0]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800b438:	4b43      	ldr	r3, [pc, #268]	; (800b548 <VerifyPagesFullWriteVariable+0x124>)
 800b43a:	881a      	ldrh	r2, [r3, #0]
 800b43c:	23fc      	movs	r3, #252	; 0xfc
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	429a      	cmp	r2, r3
 800b442:	d301      	bcc.n	800b448 <VerifyPagesFullWriteVariable+0x24>
  {
    return EE_PAGE_FULL;
 800b444:	2312      	movs	r3, #18
 800b446:	e07b      	b.n	800b540 <VerifyPagesFullWriteVariable+0x11c>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 800b448:	2001      	movs	r0, #1
 800b44a:	f7ff fc47 	bl	800acdc <FindPage>
 800b44e:	0003      	movs	r3, r0
 800b450:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t activepageaddress = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	3301      	adds	r3, #1
 800b45a:	d101      	bne.n	800b460 <VerifyPagesFullWriteVariable+0x3c>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e06f      	b.n	800b540 <VerifyPagesFullWriteVariable+0x11c>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	2280      	movs	r2, #128	; 0x80
 800b464:	0252      	lsls	r2, r2, #9
 800b466:	4694      	mov	ip, r2
 800b468:	4463      	add	r3, ip
 800b46a:	02de      	lsls	r6, r3, #11
 800b46c:	4b37      	ldr	r3, [pc, #220]	; (800b54c <VerifyPagesFullWriteVariable+0x128>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	029a      	lsls	r2, r3, #10
 800b472:	23ff      	movs	r3, #255	; 0xff
 800b474:	029b      	lsls	r3, r3, #10
 800b476:	4013      	ands	r3, r2
 800b478:	0019      	movs	r1, r3
 800b47a:	23b8      	movs	r3, #184	; 0xb8
 800b47c:	0258      	lsls	r0, r3, #9
 800b47e:	f7f4 fe4d 	bl	800011c <__udivsi3>
 800b482:	0003      	movs	r3, r0
 800b484:	0019      	movs	r1, r3
 800b486:	4b31      	ldr	r3, [pc, #196]	; (800b54c <VerifyPagesFullWriteVariable+0x128>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	029a      	lsls	r2, r3, #10
 800b48c:	23ff      	movs	r3, #255	; 0xff
 800b48e:	029b      	lsls	r3, r3, #10
 800b490:	4013      	ands	r3, r2
 800b492:	434b      	muls	r3, r1
 800b494:	18f3      	adds	r3, r6, r3
 800b496:	637b      	str	r3, [r7, #52]	; 0x34

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d107      	bne.n	800b4ae <VerifyPagesFullWriteVariable+0x8a>
 800b49e:	232e      	movs	r3, #46	; 0x2e
 800b4a0:	18fb      	adds	r3, r7, r3
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <VerifyPagesFullWriteVariable+0x8a>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ac:	e009      	b.n	800b4c2 <VerifyPagesFullWriteVariable+0x9e>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800b4ae:	232e      	movs	r3, #46	; 0x2e
 800b4b0:	18fb      	adds	r3, r7, r3
 800b4b2:	881a      	ldrh	r2, [r3, #0]
 800b4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b6:	0011      	movs	r1, r2
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	f000 f987 	bl	800b7cc <CalculateCrc>
 800b4be:	0003      	movs	r3, r0
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  EE_Status ee_status = FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, pData64, Write_type);
  if (ee_status != EE_OK) return ee_status;
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800b4c2:	4b23      	ldr	r3, [pc, #140]	; (800b550 <VerifyPagesFullWriteVariable+0x12c>)
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c8:	18d1      	adds	r1, r2, r3
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	61fb      	str	r3, [r7, #28]
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	001b      	movs	r3, r3
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d8:	2300      	movs	r3, #0
 800b4da:	623b      	str	r3, [r7, #32]
 800b4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4de:	041b      	lsls	r3, r3, #16
 800b4e0:	613b      	str	r3, [r7, #16]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
 800b4e6:	6a38      	ldr	r0, [r7, #32]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	0016      	movs	r6, r2
 800b4ee:	4330      	orrs	r0, r6
 800b4f0:	0004      	movs	r4, r0
 800b4f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f4:	4318      	orrs	r0, r3
 800b4f6:	0005      	movs	r5, r0
 800b4f8:	232e      	movs	r3, #46	; 0x2e
 800b4fa:	18fb      	adds	r3, r7, r3
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	60bb      	str	r3, [r7, #8]
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	0010      	movs	r0, r2
 800b50c:	4320      	orrs	r0, r4
 800b50e:	6038      	str	r0, [r7, #0]
 800b510:	432b      	orrs	r3, r5
 800b512:	607b      	str	r3, [r7, #4]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	0008      	movs	r0, r1
 800b51a:	f000 f97b 	bl	800b814 <FI_WriteDoubleWord>
 800b51e:	1e03      	subs	r3, r0, #0
 800b520:	d001      	beq.n	800b526 <VerifyPagesFullWriteVariable+0x102>
  {
    return EE_WRITE_ERROR;
 800b522:	2302      	movs	r3, #2
 800b524:	e00c      	b.n	800b540 <VerifyPagesFullWriteVariable+0x11c>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b526:	4b0a      	ldr	r3, [pc, #40]	; (800b550 <VerifyPagesFullWriteVariable+0x12c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	001a      	movs	r2, r3
 800b52e:	4b08      	ldr	r3, [pc, #32]	; (800b550 <VerifyPagesFullWriteVariable+0x12c>)
 800b530:	601a      	str	r2, [r3, #0]
  uhNbWrittenElements++;
 800b532:	4b05      	ldr	r3, [pc, #20]	; (800b548 <VerifyPagesFullWriteVariable+0x124>)
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	3301      	adds	r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	4b03      	ldr	r3, [pc, #12]	; (800b548 <VerifyPagesFullWriteVariable+0x124>)
 800b53c:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	0018      	movs	r0, r3
 800b542:	46bd      	mov	sp, r7
 800b544:	b011      	add	sp, #68	; 0x44
 800b546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b548:	20000138 	.word	0x20000138
 800b54c:	1fff75e0 	.word	0x1fff75e0
 800b550:	20000008 	.word	0x20000008

0800b554 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 800b554:	b590      	push	{r4, r7, lr}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	000a      	movs	r2, r1
 800b55e:	1cfb      	adds	r3, r7, #3
 800b560:	701a      	strb	r2, [r3, #0]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	2300      	movs	r3, #0
 800b570:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2280      	movs	r2, #128	; 0x80
 800b576:	0252      	lsls	r2, r2, #9
 800b578:	4694      	mov	ip, r2
 800b57a:	4463      	add	r3, ip
 800b57c:	02dc      	lsls	r4, r3, #11
 800b57e:	4b5b      	ldr	r3, [pc, #364]	; (800b6ec <SetPageState+0x198>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	029a      	lsls	r2, r3, #10
 800b584:	23ff      	movs	r3, #255	; 0xff
 800b586:	029b      	lsls	r3, r3, #10
 800b588:	4013      	ands	r3, r2
 800b58a:	0019      	movs	r1, r3
 800b58c:	23b8      	movs	r3, #184	; 0xb8
 800b58e:	0258      	lsls	r0, r3, #9
 800b590:	f7f4 fdc4 	bl	800011c <__udivsi3>
 800b594:	0003      	movs	r3, r0
 800b596:	0019      	movs	r1, r3
 800b598:	4b54      	ldr	r3, [pc, #336]	; (800b6ec <SetPageState+0x198>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	029a      	lsls	r2, r3, #10
 800b59e:	23ff      	movs	r3, #255	; 0xff
 800b5a0:	029b      	lsls	r3, r3, #10
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	434b      	muls	r3, r1
 800b5a6:	18e3      	adds	r3, r4, r3
 800b5a8:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2280      	movs	r2, #128	; 0x80
 800b5ae:	0252      	lsls	r2, r2, #9
 800b5b0:	4694      	mov	ip, r2
 800b5b2:	4463      	add	r3, ip
 800b5b4:	02dc      	lsls	r4, r3, #11
 800b5b6:	4b4d      	ldr	r3, [pc, #308]	; (800b6ec <SetPageState+0x198>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	029a      	lsls	r2, r3, #10
 800b5bc:	23ff      	movs	r3, #255	; 0xff
 800b5be:	029b      	lsls	r3, r3, #10
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	0019      	movs	r1, r3
 800b5c4:	23b8      	movs	r3, #184	; 0xb8
 800b5c6:	0258      	lsls	r0, r3, #9
 800b5c8:	f7f4 fda8 	bl	800011c <__udivsi3>
 800b5cc:	0003      	movs	r3, r0
 800b5ce:	0019      	movs	r1, r3
 800b5d0:	4b46      	ldr	r3, [pc, #280]	; (800b6ec <SetPageState+0x198>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	029a      	lsls	r2, r3, #10
 800b5d6:	23ff      	movs	r3, #255	; 0xff
 800b5d8:	029b      	lsls	r3, r3, #10
 800b5da:	4013      	ands	r3, r2
 800b5dc:	434b      	muls	r3, r1
 800b5de:	18e3      	adds	r3, r4, r3
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2280      	movs	r2, #128	; 0x80
 800b5e8:	0252      	lsls	r2, r2, #9
 800b5ea:	4694      	mov	ip, r2
 800b5ec:	4463      	add	r3, ip
 800b5ee:	02dc      	lsls	r4, r3, #11
 800b5f0:	4b3e      	ldr	r3, [pc, #248]	; (800b6ec <SetPageState+0x198>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	029a      	lsls	r2, r3, #10
 800b5f6:	23ff      	movs	r3, #255	; 0xff
 800b5f8:	029b      	lsls	r3, r3, #10
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	0019      	movs	r1, r3
 800b5fe:	23b8      	movs	r3, #184	; 0xb8
 800b600:	0258      	lsls	r0, r3, #9
 800b602:	f7f4 fd8b 	bl	800011c <__udivsi3>
 800b606:	0003      	movs	r3, r0
 800b608:	0019      	movs	r1, r3
 800b60a:	4b38      	ldr	r3, [pc, #224]	; (800b6ec <SetPageState+0x198>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	029a      	lsls	r2, r3, #10
 800b610:	23ff      	movs	r3, #255	; 0xff
 800b612:	029b      	lsls	r3, r3, #10
 800b614:	4013      	ands	r3, r2
 800b616:	434b      	muls	r3, r1
 800b618:	18e3      	adds	r3, r4, r3
 800b61a:	3310      	adds	r3, #16
 800b61c:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2280      	movs	r2, #128	; 0x80
 800b622:	0252      	lsls	r2, r2, #9
 800b624:	4694      	mov	ip, r2
 800b626:	4463      	add	r3, ip
 800b628:	02dc      	lsls	r4, r3, #11
 800b62a:	4b30      	ldr	r3, [pc, #192]	; (800b6ec <SetPageState+0x198>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	029a      	lsls	r2, r3, #10
 800b630:	23ff      	movs	r3, #255	; 0xff
 800b632:	029b      	lsls	r3, r3, #10
 800b634:	4013      	ands	r3, r2
 800b636:	0019      	movs	r1, r3
 800b638:	23b8      	movs	r3, #184	; 0xb8
 800b63a:	0258      	lsls	r0, r3, #9
 800b63c:	f7f4 fd6e 	bl	800011c <__udivsi3>
 800b640:	0003      	movs	r3, r0
 800b642:	0019      	movs	r1, r3
 800b644:	4b29      	ldr	r3, [pc, #164]	; (800b6ec <SetPageState+0x198>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	029a      	lsls	r2, r3, #10
 800b64a:	23ff      	movs	r3, #255	; 0xff
 800b64c:	029b      	lsls	r3, r3, #10
 800b64e:	4013      	ands	r3, r2
 800b650:	434b      	muls	r3, r1
 800b652:	18e3      	adds	r3, r4, r3
 800b654:	3318      	adds	r3, #24
 800b656:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 800b658:	1cfb      	adds	r3, r7, #3
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	d030      	beq.n	800b6c2 <SetPageState+0x16e>
 800b660:	dc39      	bgt.n	800b6d6 <SetPageState+0x182>
 800b662:	2b03      	cmp	r3, #3
 800b664:	d023      	beq.n	800b6ae <SetPageState+0x15a>
 800b666:	dc36      	bgt.n	800b6d6 <SetPageState+0x182>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d002      	beq.n	800b672 <SetPageState+0x11e>
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d00f      	beq.n	800b690 <SetPageState+0x13c>
        return EE_WRITE_ERROR;
      }
    }
    break;
  default:
    break;
 800b670:	e031      	b.n	800b6d6 <SetPageState+0x182>
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 800b672:	4a1f      	ldr	r2, [pc, #124]	; (800b6f0 <SetPageState+0x19c>)
 800b674:	4b1e      	ldr	r3, [pc, #120]	; (800b6f0 <SetPageState+0x19c>)
 800b676:	6979      	ldr	r1, [r7, #20]
 800b678:	0008      	movs	r0, r1
 800b67a:	f000 f8cb 	bl	800b814 <FI_WriteDoubleWord>
 800b67e:	1e03      	subs	r3, r0, #0
 800b680:	d001      	beq.n	800b686 <SetPageState+0x132>
        return EE_WRITE_ERROR;
 800b682:	2302      	movs	r3, #2
 800b684:	e02d      	b.n	800b6e2 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <SetPageState+0x1a0>)
 800b68c:	701a      	strb	r2, [r3, #0]
    break;
 800b68e:	e027      	b.n	800b6e0 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 800b690:	4a17      	ldr	r2, [pc, #92]	; (800b6f0 <SetPageState+0x19c>)
 800b692:	4b17      	ldr	r3, [pc, #92]	; (800b6f0 <SetPageState+0x19c>)
 800b694:	6939      	ldr	r1, [r7, #16]
 800b696:	0008      	movs	r0, r1
 800b698:	f000 f8bc 	bl	800b814 <FI_WriteDoubleWord>
 800b69c:	1e03      	subs	r3, r0, #0
 800b69e:	d001      	beq.n	800b6a4 <SetPageState+0x150>
        return EE_WRITE_ERROR;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e01e      	b.n	800b6e2 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	4b12      	ldr	r3, [pc, #72]	; (800b6f4 <SetPageState+0x1a0>)
 800b6aa:	701a      	strb	r2, [r3, #0]
    break;
 800b6ac:	e018      	b.n	800b6e0 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 800b6ae:	4a10      	ldr	r2, [pc, #64]	; (800b6f0 <SetPageState+0x19c>)
 800b6b0:	4b0f      	ldr	r3, [pc, #60]	; (800b6f0 <SetPageState+0x19c>)
 800b6b2:	68f9      	ldr	r1, [r7, #12]
 800b6b4:	0008      	movs	r0, r1
 800b6b6:	f000 f8ad 	bl	800b814 <FI_WriteDoubleWord>
 800b6ba:	1e03      	subs	r3, r0, #0
 800b6bc:	d00d      	beq.n	800b6da <SetPageState+0x186>
        return EE_WRITE_ERROR;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	e00f      	b.n	800b6e2 <SetPageState+0x18e>
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800b6c2:	4a0b      	ldr	r2, [pc, #44]	; (800b6f0 <SetPageState+0x19c>)
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <SetPageState+0x19c>)
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	0008      	movs	r0, r1
 800b6ca:	f000 f8a3 	bl	800b814 <FI_WriteDoubleWord>
 800b6ce:	1e03      	subs	r3, r0, #0
 800b6d0:	d005      	beq.n	800b6de <SetPageState+0x18a>
        return EE_WRITE_ERROR;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e005      	b.n	800b6e2 <SetPageState+0x18e>
    break;
 800b6d6:	46c0      	nop			; (mov r8, r8)
 800b6d8:	e002      	b.n	800b6e0 <SetPageState+0x18c>
    break;
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	e000      	b.n	800b6e0 <SetPageState+0x18c>
    break;
 800b6de:	46c0      	nop			; (mov r8, r8)
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b007      	add	sp, #28
 800b6e8:	bd90      	pop	{r4, r7, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	1fff75e0 	.word	0x1fff75e0
 800b6f0:	aaaaaaaa 	.word	0xaaaaaaaa
 800b6f4:	2000013a 	.word	0x2000013a

0800b6f8 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800b700:	2200      	movs	r2, #0
 800b702:	2300      	movs	r3, #0
 800b704:	623a      	str	r2, [r7, #32]
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
 800b708:	2200      	movs	r2, #0
 800b70a:	2300      	movs	r3, #0
 800b70c:	61ba      	str	r2, [r7, #24]
 800b70e:	61fb      	str	r3, [r7, #28]
 800b710:	2200      	movs	r2, #0
 800b712:	2300      	movs	r3, #0
 800b714:	613a      	str	r2, [r7, #16]
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	2200      	movs	r2, #0
 800b71a:	2300      	movs	r3, #0
 800b71c:	60ba      	str	r2, [r7, #8]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	623a      	str	r2, [r7, #32]
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3308      	adds	r3, #8
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	61ba      	str	r2, [r7, #24]
 800b734:	61fb      	str	r3, [r7, #28]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3310      	adds	r3, #16
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	613a      	str	r2, [r7, #16]
 800b740:	617b      	str	r3, [r7, #20]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3318      	adds	r3, #24
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	60ba      	str	r2, [r7, #8]
 800b74c:	60fb      	str	r3, [r7, #12]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	3301      	adds	r3, #1
 800b752:	d102      	bne.n	800b75a <GetPageState+0x62>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3301      	adds	r3, #1
 800b758:	d001      	beq.n	800b75e <GetPageState+0x66>
  {
    return STATE_PAGE_ERASING;
 800b75a:	2304      	movs	r3, #4
 800b75c:	e018      	b.n	800b790 <GetPageState+0x98>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3301      	adds	r3, #1
 800b762:	d102      	bne.n	800b76a <GetPageState+0x72>
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	3301      	adds	r3, #1
 800b768:	d001      	beq.n	800b76e <GetPageState+0x76>
  {
    return STATE_PAGE_VALID;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e010      	b.n	800b790 <GetPageState+0x98>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	3301      	adds	r3, #1
 800b772:	d102      	bne.n	800b77a <GetPageState+0x82>
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	3301      	adds	r3, #1
 800b778:	d001      	beq.n	800b77e <GetPageState+0x86>
  {
    return STATE_PAGE_ACTIVE;
 800b77a:	2302      	movs	r3, #2
 800b77c:	e008      	b.n	800b790 <GetPageState+0x98>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	3301      	adds	r3, #1
 800b782:	d102      	bne.n	800b78a <GetPageState+0x92>
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	3301      	adds	r3, #1
 800b788:	d001      	beq.n	800b78e <GetPageState+0x96>
  {
    return STATE_PAGE_RECEIVE;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e000      	b.n	800b790 <GetPageState+0x98>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	0018      	movs	r0, r3
 800b792:	46bd      	mov	sp, r7
 800b794:	b00a      	add	sp, #40	; 0x28
 800b796:	bd80      	pop	{r7, pc}

0800b798 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800b79c:	2380      	movs	r3, #128	; 0x80
 800b79e:	015b      	lsls	r3, r3, #5
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	f7fe fa15 	bl	8009bd0 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 800b7a6:	4a07      	ldr	r2, [pc, #28]	; (800b7c4 <ConfigureCrc+0x2c>)
 800b7a8:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <ConfigureCrc+0x30>)
 800b7aa:	0011      	movs	r1, r2
 800b7ac:	0018      	movs	r0, r3
 800b7ae:	f7fe f9db 	bl	8009b68 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800b7b2:	4b05      	ldr	r3, [pc, #20]	; (800b7c8 <ConfigureCrc+0x30>)
 800b7b4:	2108      	movs	r1, #8
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	f7fe f9c4 	bl	8009b44 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800b7bc:	46c0      	nop			; (mov r8, r8)
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	46c0      	nop			; (mov r8, r8)
 800b7c4:	00008005 	.word	0x00008005
 800b7c8:	40023000 	.word	0x40023000

0800b7cc <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	000a      	movs	r2, r1
 800b7d6:	1cbb      	adds	r3, r7, #2
 800b7d8:	801a      	strh	r2, [r3, #0]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800b7da:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <CalculateCrc+0x44>)
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7fe f9a3 	bl	8009b28 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a0a      	ldr	r2, [pc, #40]	; (800b810 <CalculateCrc+0x44>)
 800b7e6:	0019      	movs	r1, r3
 800b7e8:	0010      	movs	r0, r2
 800b7ea:	f7fe f9c9 	bl	8009b80 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800b7ee:	1cbb      	adds	r3, r7, #2
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	4a07      	ldr	r2, [pc, #28]	; (800b810 <CalculateCrc+0x44>)
 800b7f4:	0019      	movs	r1, r3
 800b7f6:	0010      	movs	r0, r2
 800b7f8:	f7fe f9ce 	bl	8009b98 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <CalculateCrc+0x44>)
 800b7fe:	0018      	movs	r0, r3
 800b800:	f7fe f9db 	bl	8009bba <LL_CRC_ReadData16>
 800b804:	0003      	movs	r3, r0
}
 800b806:	0018      	movs	r0, r3
 800b808:	46bd      	mov	sp, r7
 800b80a:	b002      	add	sp, #8
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	40023000 	.word	0x40023000

0800b814 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	603a      	str	r2, [r7, #0]
 800b81e:	607b      	str	r3, [r7, #4]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68f9      	ldr	r1, [r7, #12]
 800b826:	2001      	movs	r0, #1
 800b828:	f7f8 fe1a 	bl	8004460 <HAL_FLASH_Program>
 800b82c:	0003      	movs	r3, r0
}
 800b82e:	0018      	movs	r0, r3
 800b830:	46bd      	mov	sp, r7
 800b832:	b004      	add	sp, #16
 800b834:	bd80      	pop	{r7, pc}

0800b836 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800b836:	b590      	push	{r4, r7, lr}
 800b838:	b089      	sub	sp, #36	; 0x24
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	000a      	movs	r2, r1
 800b840:	1cbb      	adds	r3, r7, #2
 800b842:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800b844:	241e      	movs	r4, #30
 800b846:	193b      	adds	r3, r7, r4
 800b848:	2200      	movs	r2, #0
 800b84a:	801a      	strh	r2, [r3, #0]
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60bb      	str	r3, [r7, #8]
#ifdef FLASH_BANK_2
  uint32_t bank = GetBankNumber(PAGE_ADDRESS(Page));
  s_eraseinit.Banks       = bank;
#endif  
  
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800b850:	210c      	movs	r1, #12
 800b852:	187b      	adds	r3, r7, r1
 800b854:	2202      	movs	r2, #2
 800b856:	601a      	str	r2, [r3, #0]
  s_eraseinit.NbPages     = NbPages;
 800b858:	1cbb      	adds	r3, r7, #2
 800b85a:	881a      	ldrh	r2, [r3, #0]
 800b85c:	187b      	adds	r3, r7, r1
 800b85e:	60da      	str	r2, [r3, #12]
  s_eraseinit.Page        = Page;
 800b860:	187b      	adds	r3, r7, r1
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	609a      	str	r2, [r3, #8]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800b866:	2308      	movs	r3, #8
 800b868:	18fa      	adds	r2, r7, r3
 800b86a:	187b      	adds	r3, r7, r1
 800b86c:	0011      	movs	r1, r2
 800b86e:	0018      	movs	r0, r3
 800b870:	f7f8 fef2 	bl	8004658 <HAL_FLASHEx_Erase>
 800b874:	1e03      	subs	r3, r0, #0
 800b876:	d002      	beq.n	800b87e <FI_PageErase+0x48>
  {
    status = EE_ERASE_ERROR;
 800b878:	193b      	adds	r3, r7, r4
 800b87a:	2201      	movs	r2, #1
 800b87c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800b87e:	231e      	movs	r3, #30
 800b880:	18fb      	adds	r3, r7, r3
 800b882:	881b      	ldrh	r3, [r3, #0]
}
 800b884:	0018      	movs	r0, r3
 800b886:	46bd      	mov	sp, r7
 800b888:	b009      	add	sp, #36	; 0x24
 800b88a:	bd90      	pop	{r4, r7, pc}

0800b88c <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* No flush needed. There is no D-Cache for the STM32G0x0 and STM32G0x1 products. */
  return;
 800b890:	46c0      	nop			; (mov r8, r8)
}
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 800b89a:	2300      	movs	r3, #0
#endif
}
 800b89c:	0018      	movs	r0, r3
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <interfaceWrite>:
#include "interface.h"

void _interfaceIntToArray(char *destination, uint8_t offset, int16_t integer);
void _interfaceClear(char *buffer);

void interfaceWrite(void) {
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af02      	add	r7, sp, #8

	//								WRITE DATA TO CLOCK

	_interfaceClear(buffer);
 800b8aa:	4b27      	ldr	r3, [pc, #156]	; (800b948 <interfaceWrite+0xa4>)
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	f000 fb6d 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.hour);
 800b8b2:	4b26      	ldr	r3, [pc, #152]	; (800b94c <interfaceWrite+0xa8>)
 800b8b4:	78db      	ldrb	r3, [r3, #3]
 800b8b6:	b25b      	sxtb	r3, r3
 800b8b8:	b21a      	sxth	r2, r3
 800b8ba:	4b23      	ldr	r3, [pc, #140]	; (800b948 <interfaceWrite+0xa4>)
 800b8bc:	2100      	movs	r1, #0
 800b8be:	0018      	movs	r0, r3
 800b8c0:	f000 fb28 	bl	800bf14 <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.actual.minute);
 800b8c4:	4b21      	ldr	r3, [pc, #132]	; (800b94c <interfaceWrite+0xa8>)
 800b8c6:	791b      	ldrb	r3, [r3, #4]
 800b8c8:	b25b      	sxtb	r3, r3
 800b8ca:	b21a      	sxth	r2, r3
 800b8cc:	4b1e      	ldr	r3, [pc, #120]	; (800b948 <interfaceWrite+0xa4>)
 800b8ce:	2102      	movs	r1, #2
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f000 fb1f 	bl	800bf14 <_interfaceIntToArray>

	if (rtcBlink(&chronograph)) {
 800b8d6:	4b1d      	ldr	r3, [pc, #116]	; (800b94c <interfaceWrite+0xa8>)
 800b8d8:	0018      	movs	r0, r3
 800b8da:	f003 f91d 	bl	800eb18 <rtcBlink>
 800b8de:	1e03      	subs	r3, r0, #0
 800b8e0:	d00a      	beq.n	800b8f8 <interfaceWrite+0x54>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON, NOT_EDITABLE);
 800b8e2:	4b19      	ldr	r3, [pc, #100]	; (800b948 <interfaceWrite+0xa4>)
 800b8e4:	481a      	ldr	r0, [pc, #104]	; (800b950 <interfaceWrite+0xac>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	9201      	str	r2, [sp, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	9200      	str	r2, [sp, #0]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	f001 ff8f 	bl	800d814 <menuItemChangeValue>
 800b8f6:	e009      	b.n	800b90c <interfaceWrite+0x68>
	} else {
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_DISABLED,
 800b8f8:	4b13      	ldr	r3, [pc, #76]	; (800b948 <interfaceWrite+0xa4>)
 800b8fa:	4815      	ldr	r0, [pc, #84]	; (800b950 <interfaceWrite+0xac>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	9201      	str	r2, [sp, #4]
 800b900:	2204      	movs	r2, #4
 800b902:	9200      	str	r2, [sp, #0]
 800b904:	2200      	movs	r2, #0
 800b906:	2100      	movs	r1, #0
 800b908:	f001 ff84 	bl	800d814 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	_interfaceClear(buffer);
 800b90c:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <interfaceWrite+0xa4>)
 800b90e:	0018      	movs	r0, r3
 800b910:	f000 fb3c 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.second);
 800b914:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <interfaceWrite+0xa8>)
 800b916:	795b      	ldrb	r3, [r3, #5]
 800b918:	b25b      	sxtb	r3, r3
 800b91a:	b21a      	sxth	r2, r3
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <interfaceWrite+0xa4>)
 800b91e:	2102      	movs	r1, #2
 800b920:	0018      	movs	r0, r3
 800b922:	f000 faf7 	bl	800bf14 <_interfaceIntToArray>
	if (rtcBlink(&chronograph)) {
 800b926:	4b09      	ldr	r3, [pc, #36]	; (800b94c <interfaceWrite+0xa8>)
 800b928:	0018      	movs	r0, r3
 800b92a:	f003 f8f5 	bl	800eb18 <rtcBlink>
 800b92e:	1e03      	subs	r3, r0, #0
 800b930:	d010      	beq.n	800b954 <interfaceWrite+0xb0>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON,
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <interfaceWrite+0xa4>)
 800b934:	4806      	ldr	r0, [pc, #24]	; (800b950 <interfaceWrite+0xac>)
 800b936:	2200      	movs	r2, #0
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	9200      	str	r2, [sp, #0]
 800b93e:	2201      	movs	r2, #1
 800b940:	2101      	movs	r1, #1
 800b942:	f001 ff67 	bl	800d814 <menuItemChangeValue>
 800b946:	e00f      	b.n	800b968 <interfaceWrite+0xc4>
 800b948:	20000174 	.word	0x20000174
 800b94c:	200005d8 	.word	0x200005d8
 800b950:	20000188 	.word	0x20000188
		NOT_EDITABLE);
	} else {
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_DISABLED,
 800b954:	4bf2      	ldr	r3, [pc, #968]	; (800bd20 <interfaceWrite+0x47c>)
 800b956:	48f3      	ldr	r0, [pc, #972]	; (800bd24 <interfaceWrite+0x480>)
 800b958:	2200      	movs	r2, #0
 800b95a:	9201      	str	r2, [sp, #4]
 800b95c:	2204      	movs	r2, #4
 800b95e:	9200      	str	r2, [sp, #0]
 800b960:	2201      	movs	r2, #1
 800b962:	2101      	movs	r1, #1
 800b964:	f001 ff56 	bl	800d814 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	//								WRITE DATA TO CALENDAR

	_interfaceClear(buffer);
 800b968:	4bed      	ldr	r3, [pc, #948]	; (800bd20 <interfaceWrite+0x47c>)
 800b96a:	0018      	movs	r0, r3
 800b96c:	f000 fb0e 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.day);
 800b970:	4bed      	ldr	r3, [pc, #948]	; (800bd28 <interfaceWrite+0x484>)
 800b972:	789b      	ldrb	r3, [r3, #2]
 800b974:	b25b      	sxtb	r3, r3
 800b976:	b21a      	sxth	r2, r3
 800b978:	4be9      	ldr	r3, [pc, #932]	; (800bd20 <interfaceWrite+0x47c>)
 800b97a:	2100      	movs	r1, #0
 800b97c:	0018      	movs	r0, r3
 800b97e:	f000 fac9 	bl	800bf14 <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.actual.month);
 800b982:	4be9      	ldr	r3, [pc, #932]	; (800bd28 <interfaceWrite+0x484>)
 800b984:	785b      	ldrb	r3, [r3, #1]
 800b986:	b25b      	sxtb	r3, r3
 800b988:	b21a      	sxth	r2, r3
 800b98a:	4be5      	ldr	r3, [pc, #916]	; (800bd20 <interfaceWrite+0x47c>)
 800b98c:	2102      	movs	r1, #2
 800b98e:	0018      	movs	r0, r3
 800b990:	f000 fac0 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT, NOT_EDITABLE);
 800b994:	4be2      	ldr	r3, [pc, #904]	; (800bd20 <interfaceWrite+0x47c>)
 800b996:	48e3      	ldr	r0, [pc, #908]	; (800bd24 <interfaceWrite+0x480>)
 800b998:	2200      	movs	r2, #0
 800b99a:	9201      	str	r2, [sp, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	9200      	str	r2, [sp, #0]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	f001 ff36 	bl	800d814 <menuItemChangeValue>

	//								WRITE DATA TO SETTINGS_CLOCK

	_interfaceClear(buffer);
 800b9a8:	4bdd      	ldr	r3, [pc, #884]	; (800bd20 <interfaceWrite+0x47c>)
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f000 faee 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.hour);
 800b9b0:	4bdd      	ldr	r3, [pc, #884]	; (800bd28 <interfaceWrite+0x484>)
 800b9b2:	78db      	ldrb	r3, [r3, #3]
 800b9b4:	b25b      	sxtb	r3, r3
 800b9b6:	b21a      	sxth	r2, r3
 800b9b8:	4bd9      	ldr	r3, [pc, #868]	; (800bd20 <interfaceWrite+0x47c>)
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	0018      	movs	r0, r3
 800b9be:	f000 faa9 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, buffer, INTER_COLON,
 800b9c2:	4bd7      	ldr	r3, [pc, #860]	; (800bd20 <interfaceWrite+0x47c>)
 800b9c4:	48d7      	ldr	r0, [pc, #860]	; (800bd24 <interfaceWrite+0x480>)
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	9201      	str	r2, [sp, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	9200      	str	r2, [sp, #0]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	f001 ff1f 	bl	800d814 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800b9d6:	4bd2      	ldr	r3, [pc, #840]	; (800bd20 <interfaceWrite+0x47c>)
 800b9d8:	0018      	movs	r0, r3
 800b9da:	f000 fad7 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.minute);
 800b9de:	4bd2      	ldr	r3, [pc, #840]	; (800bd28 <interfaceWrite+0x484>)
 800b9e0:	791b      	ldrb	r3, [r3, #4]
 800b9e2:	b25b      	sxtb	r3, r3
 800b9e4:	b21a      	sxth	r2, r3
 800b9e6:	4bce      	ldr	r3, [pc, #824]	; (800bd20 <interfaceWrite+0x47c>)
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	0018      	movs	r0, r3
 800b9ec:	f000 fa92 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, buffer, INTER_COLON,
 800b9f0:	4bcb      	ldr	r3, [pc, #812]	; (800bd20 <interfaceWrite+0x47c>)
 800b9f2:	48cc      	ldr	r0, [pc, #816]	; (800bd24 <interfaceWrite+0x480>)
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	9201      	str	r2, [sp, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	9200      	str	r2, [sp, #0]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	2101      	movs	r1, #1
 800ba00:	f001 ff08 	bl	800d814 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800ba04:	4bc6      	ldr	r3, [pc, #792]	; (800bd20 <interfaceWrite+0x47c>)
 800ba06:	0018      	movs	r0, r3
 800ba08:	f000 fac0 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.second);
 800ba0c:	4bc6      	ldr	r3, [pc, #792]	; (800bd28 <interfaceWrite+0x484>)
 800ba0e:	795b      	ldrb	r3, [r3, #5]
 800ba10:	b25b      	sxtb	r3, r3
 800ba12:	b21a      	sxth	r2, r3
 800ba14:	4bc2      	ldr	r3, [pc, #776]	; (800bd20 <interfaceWrite+0x47c>)
 800ba16:	2102      	movs	r1, #2
 800ba18:	0018      	movs	r0, r3
 800ba1a:	f000 fa7b 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, buffer, INTER_COLON,
 800ba1e:	4bc0      	ldr	r3, [pc, #768]	; (800bd20 <interfaceWrite+0x47c>)
 800ba20:	48c0      	ldr	r0, [pc, #768]	; (800bd24 <interfaceWrite+0x480>)
 800ba22:	2201      	movs	r2, #1
 800ba24:	9201      	str	r2, [sp, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	9200      	str	r2, [sp, #0]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	2102      	movs	r1, #2
 800ba2e:	f001 fef1 	bl	800d814 <menuItemChangeValue>
	EDITABLE);

	//								WRITE DATA TO SETTINGS_CALENDAR

	_interfaceClear(buffer);
 800ba32:	4bbb      	ldr	r3, [pc, #748]	; (800bd20 <interfaceWrite+0x47c>)
 800ba34:	0018      	movs	r0, r3
 800ba36:	f000 faa9 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.day);
 800ba3a:	4bbb      	ldr	r3, [pc, #748]	; (800bd28 <interfaceWrite+0x484>)
 800ba3c:	789b      	ldrb	r3, [r3, #2]
 800ba3e:	b25b      	sxtb	r3, r3
 800ba40:	b21a      	sxth	r2, r3
 800ba42:	4bb7      	ldr	r3, [pc, #732]	; (800bd20 <interfaceWrite+0x47c>)
 800ba44:	2100      	movs	r1, #0
 800ba46:	0018      	movs	r0, r3
 800ba48:	f000 fa64 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, buffer, INTER_DOT,
 800ba4c:	4bb4      	ldr	r3, [pc, #720]	; (800bd20 <interfaceWrite+0x47c>)
 800ba4e:	48b5      	ldr	r0, [pc, #724]	; (800bd24 <interfaceWrite+0x480>)
 800ba50:	2201      	movs	r2, #1
 800ba52:	9201      	str	r2, [sp, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	9200      	str	r2, [sp, #0]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	2103      	movs	r1, #3
 800ba5c:	f001 feda 	bl	800d814 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800ba60:	4baf      	ldr	r3, [pc, #700]	; (800bd20 <interfaceWrite+0x47c>)
 800ba62:	0018      	movs	r0, r3
 800ba64:	f000 fa92 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.month);
 800ba68:	4baf      	ldr	r3, [pc, #700]	; (800bd28 <interfaceWrite+0x484>)
 800ba6a:	785b      	ldrb	r3, [r3, #1]
 800ba6c:	b25b      	sxtb	r3, r3
 800ba6e:	b21a      	sxth	r2, r3
 800ba70:	4bab      	ldr	r3, [pc, #684]	; (800bd20 <interfaceWrite+0x47c>)
 800ba72:	2102      	movs	r1, #2
 800ba74:	0018      	movs	r0, r3
 800ba76:	f000 fa4d 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, buffer, INTER_DOT,
 800ba7a:	4ba9      	ldr	r3, [pc, #676]	; (800bd20 <interfaceWrite+0x47c>)
 800ba7c:	48a9      	ldr	r0, [pc, #676]	; (800bd24 <interfaceWrite+0x480>)
 800ba7e:	2201      	movs	r2, #1
 800ba80:	9201      	str	r2, [sp, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	9200      	str	r2, [sp, #0]
 800ba86:	2202      	movs	r2, #2
 800ba88:	2104      	movs	r1, #4
 800ba8a:	f001 fec3 	bl	800d814 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800ba8e:	4ba4      	ldr	r3, [pc, #656]	; (800bd20 <interfaceWrite+0x47c>)
 800ba90:	0018      	movs	r0, r3
 800ba92:	f000 fa7b 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.year);
 800ba96:	4ba4      	ldr	r3, [pc, #656]	; (800bd28 <interfaceWrite+0x484>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	b25b      	sxtb	r3, r3
 800ba9c:	b21a      	sxth	r2, r3
 800ba9e:	4ba0      	ldr	r3, [pc, #640]	; (800bd20 <interfaceWrite+0x47c>)
 800baa0:	2100      	movs	r1, #0
 800baa2:	0018      	movs	r0, r3
 800baa4:	f000 fa36 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, buffer,
 800baa8:	4b9d      	ldr	r3, [pc, #628]	; (800bd20 <interfaceWrite+0x47c>)
 800baaa:	489e      	ldr	r0, [pc, #632]	; (800bd24 <interfaceWrite+0x480>)
 800baac:	2201      	movs	r2, #1
 800baae:	9201      	str	r2, [sp, #4]
 800bab0:	2204      	movs	r2, #4
 800bab2:	9200      	str	r2, [sp, #0]
 800bab4:	2202      	movs	r2, #2
 800bab6:	2105      	movs	r1, #5
 800bab8:	f001 feac 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, EDITABLE);

	//								WRITE CHRONO TIME

	_interfaceClear(buffer);
 800babc:	4b98      	ldr	r3, [pc, #608]	; (800bd20 <interfaceWrite+0x47c>)
 800babe:	0018      	movs	r0, r3
 800bac0:	f000 fa64 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.chrono.minute);
 800bac4:	4b98      	ldr	r3, [pc, #608]	; (800bd28 <interfaceWrite+0x484>)
 800bac6:	7f1b      	ldrb	r3, [r3, #28]
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	b21a      	sxth	r2, r3
 800bacc:	4b94      	ldr	r3, [pc, #592]	; (800bd20 <interfaceWrite+0x47c>)
 800bace:	2100      	movs	r1, #0
 800bad0:	0018      	movs	r0, r3
 800bad2:	f000 fa1f 	bl	800bf14 <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.chrono.second);
 800bad6:	4b94      	ldr	r3, [pc, #592]	; (800bd28 <interfaceWrite+0x484>)
 800bad8:	7f5b      	ldrb	r3, [r3, #29]
 800bada:	b25b      	sxtb	r3, r3
 800badc:	b21a      	sxth	r2, r3
 800bade:	4b90      	ldr	r3, [pc, #576]	; (800bd20 <interfaceWrite+0x47c>)
 800bae0:	2102      	movs	r1, #2
 800bae2:	0018      	movs	r0, r3
 800bae4:	f000 fa16 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, CHRONO, CHRONO_LEVEL, buffer, INTER_COLON,
 800bae8:	4b8d      	ldr	r3, [pc, #564]	; (800bd20 <interfaceWrite+0x47c>)
 800baea:	488e      	ldr	r0, [pc, #568]	; (800bd24 <interfaceWrite+0x480>)
 800baec:	2200      	movs	r2, #0
 800baee:	9201      	str	r2, [sp, #4]
 800baf0:	2201      	movs	r2, #1
 800baf2:	9200      	str	r2, [sp, #0]
 800baf4:	2200      	movs	r2, #0
 800baf6:	2101      	movs	r1, #1
 800baf8:	f001 fe8c 	bl	800d814 <menuItemChangeValue>
	NOT_EDITABLE);

	_interfaceClear(buffer);
 800bafc:	4b88      	ldr	r3, [pc, #544]	; (800bd20 <interfaceWrite+0x47c>)
 800bafe:	0018      	movs	r0, r3
 800bb00:	f000 fa44 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.chrono.hour);
 800bb04:	4b88      	ldr	r3, [pc, #544]	; (800bd28 <interfaceWrite+0x484>)
 800bb06:	7edb      	ldrb	r3, [r3, #27]
 800bb08:	b25b      	sxtb	r3, r3
 800bb0a:	b21a      	sxth	r2, r3
 800bb0c:	4b84      	ldr	r3, [pc, #528]	; (800bd20 <interfaceWrite+0x47c>)
 800bb0e:	2100      	movs	r1, #0
 800bb10:	0018      	movs	r0, r3
 800bb12:	f000 f9ff 	bl	800bf14 <_interfaceIntToArray>
	buffer[3] = 'h';
 800bb16:	4b82      	ldr	r3, [pc, #520]	; (800bd20 <interfaceWrite+0x47c>)
 800bb18:	2268      	movs	r2, #104	; 0x68
 800bb1a:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, CHRONO_HOURS, CHRONO_HOURS_LEVEL, buffer,
 800bb1c:	4b80      	ldr	r3, [pc, #512]	; (800bd20 <interfaceWrite+0x47c>)
 800bb1e:	4881      	ldr	r0, [pc, #516]	; (800bd24 <interfaceWrite+0x480>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	9201      	str	r2, [sp, #4]
 800bb24:	2204      	movs	r2, #4
 800bb26:	9200      	str	r2, [sp, #0]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	2103      	movs	r1, #3
 800bb2c:	f001 fe72 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	_interfaceClear(buffer);
 800bb30:	4b7b      	ldr	r3, [pc, #492]	; (800bd20 <interfaceWrite+0x47c>)
 800bb32:	0018      	movs	r0, r3
 800bb34:	f000 fa2a 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.chrono.hundredth);
 800bb38:	4b7b      	ldr	r3, [pc, #492]	; (800bd28 <interfaceWrite+0x484>)
 800bb3a:	7f9b      	ldrb	r3, [r3, #30]
 800bb3c:	b25b      	sxtb	r3, r3
 800bb3e:	b21a      	sxth	r2, r3
 800bb40:	4b77      	ldr	r3, [pc, #476]	; (800bd20 <interfaceWrite+0x47c>)
 800bb42:	2102      	movs	r1, #2
 800bb44:	0018      	movs	r0, r3
 800bb46:	f000 f9e5 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, CHRONO_HUNDREDTHS, CHRONO_HUNDREDTHS_LEVEL,
 800bb4a:	4b75      	ldr	r3, [pc, #468]	; (800bd20 <interfaceWrite+0x47c>)
 800bb4c:	4875      	ldr	r0, [pc, #468]	; (800bd24 <interfaceWrite+0x480>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	9201      	str	r2, [sp, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	9200      	str	r2, [sp, #0]
 800bb56:	2201      	movs	r2, #1
 800bb58:	2102      	movs	r1, #2
 800bb5a:	f001 fe5b 	bl	800d814 <menuItemChangeValue>
//	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE, SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
//			INTER_DISABLED, EDITABLE);

//								WRITE BME280 DATA
	//temperature
	_interfaceClear(buffer);
 800bb5e:	4b70      	ldr	r3, [pc, #448]	; (800bd20 <interfaceWrite+0x47c>)
 800bb60:	0018      	movs	r0, r3
 800bb62:	f000 fa13 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0,
			(bme280.temperatureValue / 100) + temperatureCorrection);
 800bb66:	4b71      	ldr	r3, [pc, #452]	; (800bd2c <interfaceWrite+0x488>)
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2164      	movs	r1, #100	; 0x64
 800bb6c:	0018      	movs	r0, r3
 800bb6e:	f7f4 fb5f 	bl	8000230 <__divsi3>
 800bb72:	0003      	movs	r3, r0
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	4b6e      	ldr	r3, [pc, #440]	; (800bd30 <interfaceWrite+0x48c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	18d3      	adds	r3, r2, r3
 800bb7e:	b29b      	uxth	r3, r3
	_interfaceIntToArray(buffer, 0,
 800bb80:	b21a      	sxth	r2, r3
 800bb82:	4b67      	ldr	r3, [pc, #412]	; (800bd20 <interfaceWrite+0x47c>)
 800bb84:	2100      	movs	r1, #0
 800bb86:	0018      	movs	r0, r3
 800bb88:	f000 f9c4 	bl	800bf14 <_interfaceIntToArray>
	if (((bme280.temperatureValue / 100) + temperatureCorrection) > -10)
 800bb8c:	4b67      	ldr	r3, [pc, #412]	; (800bd2c <interfaceWrite+0x488>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	2164      	movs	r1, #100	; 0x64
 800bb92:	0018      	movs	r0, r3
 800bb94:	f7f4 fb4c 	bl	8000230 <__divsi3>
 800bb98:	0003      	movs	r3, r0
 800bb9a:	001a      	movs	r2, r3
 800bb9c:	4b64      	ldr	r3, [pc, #400]	; (800bd30 <interfaceWrite+0x48c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	18d3      	adds	r3, r2, r3
 800bba2:	3309      	adds	r3, #9
 800bba4:	db02      	blt.n	800bbac <interfaceWrite+0x308>
		buffer[2] = '^';
 800bba6:	4b5e      	ldr	r3, [pc, #376]	; (800bd20 <interfaceWrite+0x47c>)
 800bba8:	225e      	movs	r2, #94	; 0x5e
 800bbaa:	709a      	strb	r2, [r3, #2]
	buffer[3] = 'C';
 800bbac:	4b5c      	ldr	r3, [pc, #368]	; (800bd20 <interfaceWrite+0x47c>)
 800bbae:	2243      	movs	r2, #67	; 0x43
 800bbb0:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, TEMPERATURE, TEMPERATURE_LEVEL, buffer,
 800bbb2:	4b5b      	ldr	r3, [pc, #364]	; (800bd20 <interfaceWrite+0x47c>)
 800bbb4:	485b      	ldr	r0, [pc, #364]	; (800bd24 <interfaceWrite+0x480>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	9201      	str	r2, [sp, #4]
 800bbba:	2204      	movs	r2, #4
 800bbbc:	9200      	str	r2, [sp, #0]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2102      	movs	r1, #2
 800bbc2:	f001 fe27 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//temperature Correction
	_interfaceClear(buffer);
 800bbc6:	4b56      	ldr	r3, [pc, #344]	; (800bd20 <interfaceWrite+0x47c>)
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f000 f9df 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, temperatureCorrection);
 800bbce:	4b58      	ldr	r3, [pc, #352]	; (800bd30 <interfaceWrite+0x48c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	b21a      	sxth	r2, r3
 800bbd4:	4b52      	ldr	r3, [pc, #328]	; (800bd20 <interfaceWrite+0x47c>)
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f000 f99b 	bl	800bf14 <_interfaceIntToArray>
	buffer[3] = '^';
 800bbde:	4b50      	ldr	r3, [pc, #320]	; (800bd20 <interfaceWrite+0x47c>)
 800bbe0:	225e      	movs	r2, #94	; 0x5e
 800bbe2:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE,
 800bbe4:	4b4e      	ldr	r3, [pc, #312]	; (800bd20 <interfaceWrite+0x47c>)
 800bbe6:	484f      	ldr	r0, [pc, #316]	; (800bd24 <interfaceWrite+0x480>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	2204      	movs	r2, #4
 800bbee:	9200      	str	r2, [sp, #0]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	2106      	movs	r1, #6
 800bbf4:	f001 fe0e 	bl	800d814 <menuItemChangeValue>
	SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
	INTER_DISABLED, EDITABLE);

	//pressure
	_interfaceClear(buffer);
 800bbf8:	4b49      	ldr	r3, [pc, #292]	; (800bd20 <interfaceWrite+0x47c>)
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f000 f9c6 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.pressureValue / 100);
 800bc00:	4b4a      	ldr	r3, [pc, #296]	; (800bd2c <interfaceWrite+0x488>)
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	2164      	movs	r1, #100	; 0x64
 800bc06:	0018      	movs	r0, r3
 800bc08:	f7f4 fa88 	bl	800011c <__udivsi3>
 800bc0c:	0003      	movs	r3, r0
 800bc0e:	b21a      	sxth	r2, r3
 800bc10:	4b43      	ldr	r3, [pc, #268]	; (800bd20 <interfaceWrite+0x47c>)
 800bc12:	2100      	movs	r1, #0
 800bc14:	0018      	movs	r0, r3
 800bc16:	f000 f97d 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, BAROMETER, BAROMETER_LEVEL, buffer,
 800bc1a:	4b41      	ldr	r3, [pc, #260]	; (800bd20 <interfaceWrite+0x47c>)
 800bc1c:	4841      	ldr	r0, [pc, #260]	; (800bd24 <interfaceWrite+0x480>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	9201      	str	r2, [sp, #4]
 800bc22:	2204      	movs	r2, #4
 800bc24:	9200      	str	r2, [sp, #0]
 800bc26:	2200      	movs	r2, #0
 800bc28:	2103      	movs	r1, #3
 800bc2a:	f001 fdf3 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//pressure reference(altimeter)
	_interfaceClear(buffer);
 800bc2e:	4b3c      	ldr	r3, [pc, #240]	; (800bd20 <interfaceWrite+0x47c>)
 800bc30:	0018      	movs	r0, r3
 800bc32:	f000 f9ab 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.pressureReference);
 800bc36:	4b3d      	ldr	r3, [pc, #244]	; (800bd2c <interfaceWrite+0x488>)
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	b21a      	sxth	r2, r3
 800bc3c:	4b38      	ldr	r3, [pc, #224]	; (800bd20 <interfaceWrite+0x47c>)
 800bc3e:	2100      	movs	r1, #0
 800bc40:	0018      	movs	r0, r3
 800bc42:	f000 f967 	bl	800bf14 <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_REFERENCE_VALUE,
 800bc46:	4b36      	ldr	r3, [pc, #216]	; (800bd20 <interfaceWrite+0x47c>)
 800bc48:	4836      	ldr	r0, [pc, #216]	; (800bd24 <interfaceWrite+0x480>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	9201      	str	r2, [sp, #4]
 800bc4e:	2204      	movs	r2, #4
 800bc50:	9200      	str	r2, [sp, #0]
 800bc52:	2202      	movs	r2, #2
 800bc54:	2107      	movs	r1, #7
 800bc56:	f001 fddd 	bl	800d814 <menuItemChangeValue>
	SETTINGS_REFERENCE_VALUE_LEVEL, buffer,
	INTER_DISABLED, EDITABLE);

	//humidity
	_interfaceClear(buffer);
 800bc5a:	4b31      	ldr	r3, [pc, #196]	; (800bd20 <interfaceWrite+0x47c>)
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f000 f995 	bl	800bf8c <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.humidityValue);
 800bc62:	4b32      	ldr	r3, [pc, #200]	; (800bd2c <interfaceWrite+0x488>)
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	b21a      	sxth	r2, r3
 800bc68:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <interfaceWrite+0x47c>)
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	f000 f951 	bl	800bf14 <_interfaceIntToArray>
	buffer[3] = 'H';
 800bc72:	4b2b      	ldr	r3, [pc, #172]	; (800bd20 <interfaceWrite+0x47c>)
 800bc74:	2248      	movs	r2, #72	; 0x48
 800bc76:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, HIGROMETER, HIGROMETER_LEVEL, buffer,
 800bc78:	4b29      	ldr	r3, [pc, #164]	; (800bd20 <interfaceWrite+0x47c>)
 800bc7a:	482a      	ldr	r0, [pc, #168]	; (800bd24 <interfaceWrite+0x480>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	9201      	str	r2, [sp, #4]
 800bc80:	2204      	movs	r2, #4
 800bc82:	9200      	str	r2, [sp, #0]
 800bc84:	2200      	movs	r2, #0
 800bc86:	2104      	movs	r1, #4
 800bc88:	f001 fdc4 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//altitude
	_interfaceClear(buffer);
 800bc8c:	4b24      	ldr	r3, [pc, #144]	; (800bd20 <interfaceWrite+0x47c>)
 800bc8e:	0018      	movs	r0, r3
 800bc90:	f000 f97c 	bl	800bf8c <_interfaceClear>
	if (bme280.altitudeValue < -99999) {
 800bc94:	4b25      	ldr	r3, [pc, #148]	; (800bd2c <interfaceWrite+0x488>)
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	4a26      	ldr	r2, [pc, #152]	; (800bd34 <interfaceWrite+0x490>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	da0a      	bge.n	800bcb4 <interfaceWrite+0x410>
//		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, "OL  ",
 800bc9e:	4b26      	ldr	r3, [pc, #152]	; (800bd38 <interfaceWrite+0x494>)
 800bca0:	4820      	ldr	r0, [pc, #128]	; (800bd24 <interfaceWrite+0x480>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	9201      	str	r2, [sp, #4]
 800bca6:	2204      	movs	r2, #4
 800bca8:	9200      	str	r2, [sp, #0]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2105      	movs	r1, #5
 800bcae:	f001 fdb1 	bl	800d814 <menuItemChangeValue>
 800bcb2:	e072      	b.n	800bd9a <interfaceWrite+0x4f6>
		INTER_DISABLED,
		NOT_EDITABLE);
	}

	else if (bme280.altitudeValue < 0) {
 800bcb4:	4b1d      	ldr	r3, [pc, #116]	; (800bd2c <interfaceWrite+0x488>)
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	da17      	bge.n	800bcec <interfaceWrite+0x448>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
 800bcbc:	4b1b      	ldr	r3, [pc, #108]	; (800bd2c <interfaceWrite+0x488>)
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2164      	movs	r1, #100	; 0x64
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	f7f4 fab4 	bl	8000230 <__divsi3>
 800bcc8:	0003      	movs	r3, r0
 800bcca:	b21a      	sxth	r2, r3
 800bccc:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <interfaceWrite+0x47c>)
 800bcce:	2100      	movs	r1, #0
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f000 f91f 	bl	800bf14 <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800bcd6:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <interfaceWrite+0x47c>)
 800bcd8:	4812      	ldr	r0, [pc, #72]	; (800bd24 <interfaceWrite+0x480>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	9201      	str	r2, [sp, #4]
 800bcde:	2204      	movs	r2, #4
 800bce0:	9200      	str	r2, [sp, #0]
 800bce2:	2200      	movs	r2, #0
 800bce4:	2105      	movs	r1, #5
 800bce6:	f001 fd95 	bl	800d814 <menuItemChangeValue>
 800bcea:	e056      	b.n	800bd9a <interfaceWrite+0x4f6>
		INTER_DISABLED,
		NOT_EDITABLE);
	}

	else if (bme280.altitudeValue < 1000) {
 800bcec:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <interfaceWrite+0x488>)
 800bcee:	691a      	ldr	r2, [r3, #16]
 800bcf0:	23fa      	movs	r3, #250	; 0xfa
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	da21      	bge.n	800bd3c <interfaceWrite+0x498>
		_interfaceIntToArray(buffer, 1, bme280.altitudeValue);
 800bcf8:	4b0c      	ldr	r3, [pc, #48]	; (800bd2c <interfaceWrite+0x488>)
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	b21a      	sxth	r2, r3
 800bcfe:	4b08      	ldr	r3, [pc, #32]	; (800bd20 <interfaceWrite+0x47c>)
 800bd00:	2101      	movs	r1, #1
 800bd02:	0018      	movs	r0, r3
 800bd04:	f000 f906 	bl	800bf14 <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800bd08:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <interfaceWrite+0x47c>)
 800bd0a:	4806      	ldr	r0, [pc, #24]	; (800bd24 <interfaceWrite+0x480>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	9201      	str	r2, [sp, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	9200      	str	r2, [sp, #0]
 800bd14:	2200      	movs	r2, #0
 800bd16:	2105      	movs	r1, #5
 800bd18:	f001 fd7c 	bl	800d814 <menuItemChangeValue>
 800bd1c:	e03d      	b.n	800bd9a <interfaceWrite+0x4f6>
 800bd1e:	46c0      	nop			; (mov r8, r8)
 800bd20:	20000174 	.word	0x20000174
 800bd24:	20000188 	.word	0x20000188
 800bd28:	200005d8 	.word	0x200005d8
 800bd2c:	20000724 	.word	0x20000724
 800bd30:	2000017c 	.word	0x2000017c
 800bd34:	fffe7961 	.word	0xfffe7961
 800bd38:	08010218 	.word	0x08010218
		INTER_DOT,
		NOT_EDITABLE);
	} else if (bme280.altitudeValue < 10000) {
 800bd3c:	4b5e      	ldr	r3, [pc, #376]	; (800beb8 <interfaceWrite+0x614>)
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	4a5e      	ldr	r2, [pc, #376]	; (800bebc <interfaceWrite+0x618>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	dc12      	bgt.n	800bd6c <interfaceWrite+0x4c8>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue);
 800bd46:	4b5c      	ldr	r3, [pc, #368]	; (800beb8 <interfaceWrite+0x614>)
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	b21a      	sxth	r2, r3
 800bd4c:	4b5c      	ldr	r3, [pc, #368]	; (800bec0 <interfaceWrite+0x61c>)
 800bd4e:	2100      	movs	r1, #0
 800bd50:	0018      	movs	r0, r3
 800bd52:	f000 f8df 	bl	800bf14 <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800bd56:	4b5a      	ldr	r3, [pc, #360]	; (800bec0 <interfaceWrite+0x61c>)
 800bd58:	485a      	ldr	r0, [pc, #360]	; (800bec4 <interfaceWrite+0x620>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	9201      	str	r2, [sp, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	9200      	str	r2, [sp, #0]
 800bd62:	2200      	movs	r2, #0
 800bd64:	2105      	movs	r1, #5
 800bd66:	f001 fd55 	bl	800d814 <menuItemChangeValue>
 800bd6a:	e016      	b.n	800bd9a <interfaceWrite+0x4f6>
		INTER_DOT,
		NOT_EDITABLE);
	} else {
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
 800bd6c:	4b52      	ldr	r3, [pc, #328]	; (800beb8 <interfaceWrite+0x614>)
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	2164      	movs	r1, #100	; 0x64
 800bd72:	0018      	movs	r0, r3
 800bd74:	f7f4 fa5c 	bl	8000230 <__divsi3>
 800bd78:	0003      	movs	r3, r0
 800bd7a:	b21a      	sxth	r2, r3
 800bd7c:	4b50      	ldr	r3, [pc, #320]	; (800bec0 <interfaceWrite+0x61c>)
 800bd7e:	2100      	movs	r1, #0
 800bd80:	0018      	movs	r0, r3
 800bd82:	f000 f8c7 	bl	800bf14 <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800bd86:	4b4e      	ldr	r3, [pc, #312]	; (800bec0 <interfaceWrite+0x61c>)
 800bd88:	484e      	ldr	r0, [pc, #312]	; (800bec4 <interfaceWrite+0x620>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	9201      	str	r2, [sp, #4]
 800bd8e:	2204      	movs	r2, #4
 800bd90:	9200      	str	r2, [sp, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	2105      	movs	r1, #5
 800bd96:	f001 fd3d 	bl	800d814 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	//								COMPASS

	angle = (360 - ((lis3mdl.compassAngleXY * 57) + 180)) + 90;
 800bd9a:	4a4b      	ldr	r2, [pc, #300]	; (800bec8 <interfaceWrite+0x624>)
 800bd9c:	239e      	movs	r3, #158	; 0x9e
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	58d3      	ldr	r3, [r2, r3]
 800bda2:	494a      	ldr	r1, [pc, #296]	; (800becc <interfaceWrite+0x628>)
 800bda4:	1c18      	adds	r0, r3, #0
 800bda6:	f7f4 ff83 	bl	8000cb0 <__aeabi_fmul>
 800bdaa:	1c03      	adds	r3, r0, #0
 800bdac:	4948      	ldr	r1, [pc, #288]	; (800bed0 <interfaceWrite+0x62c>)
 800bdae:	1c18      	adds	r0, r3, #0
 800bdb0:	f7f4 fcd6 	bl	8000760 <__aeabi_fadd>
 800bdb4:	1c03      	adds	r3, r0, #0
 800bdb6:	1c19      	adds	r1, r3, #0
 800bdb8:	4846      	ldr	r0, [pc, #280]	; (800bed4 <interfaceWrite+0x630>)
 800bdba:	f7f5 f893 	bl	8000ee4 <__aeabi_fsub>
 800bdbe:	1c03      	adds	r3, r0, #0
 800bdc0:	4945      	ldr	r1, [pc, #276]	; (800bed8 <interfaceWrite+0x634>)
 800bdc2:	1c18      	adds	r0, r3, #0
 800bdc4:	f7f4 fccc 	bl	8000760 <__aeabi_fadd>
 800bdc8:	1c03      	adds	r3, r0, #0
 800bdca:	1c18      	adds	r0, r3, #0
 800bdcc:	f7f5 fa52 	bl	8001274 <__aeabi_f2iz>
 800bdd0:	0003      	movs	r3, r0
 800bdd2:	b21a      	sxth	r2, r3
 800bdd4:	4b41      	ldr	r3, [pc, #260]	; (800bedc <interfaceWrite+0x638>)
 800bdd6:	801a      	strh	r2, [r3, #0]

	if (angle > 360) {
 800bdd8:	4b40      	ldr	r3, [pc, #256]	; (800bedc <interfaceWrite+0x638>)
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	23b4      	movs	r3, #180	; 0xb4
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	429a      	cmp	r2, r3
 800bde4:	dd09      	ble.n	800bdfa <interfaceWrite+0x556>
		angle = angle - 360;
 800bde6:	4b3d      	ldr	r3, [pc, #244]	; (800bedc <interfaceWrite+0x638>)
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	b21b      	sxth	r3, r3
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b69      	subs	r3, #105	; 0x69
 800bdf0:	3bff      	subs	r3, #255	; 0xff
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	b21a      	sxth	r2, r3
 800bdf6:	4b39      	ldr	r3, [pc, #228]	; (800bedc <interfaceWrite+0x638>)
 800bdf8:	801a      	strh	r2, [r3, #0]
	}
	if (angle < 0) {
 800bdfa:	4b38      	ldr	r3, [pc, #224]	; (800bedc <interfaceWrite+0x638>)
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	b21b      	sxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	da09      	bge.n	800be18 <interfaceWrite+0x574>
		angle = angle + 360;
 800be04:	4b35      	ldr	r3, [pc, #212]	; (800bedc <interfaceWrite+0x638>)
 800be06:	881b      	ldrh	r3, [r3, #0]
 800be08:	b21b      	sxth	r3, r3
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	3369      	adds	r3, #105	; 0x69
 800be0e:	33ff      	adds	r3, #255	; 0xff
 800be10:	b29b      	uxth	r3, r3
 800be12:	b21a      	sxth	r2, r3
 800be14:	4b31      	ldr	r3, [pc, #196]	; (800bedc <interfaceWrite+0x638>)
 800be16:	801a      	strh	r2, [r3, #0]
	}

	_interfaceClear(buffer);
 800be18:	4b29      	ldr	r3, [pc, #164]	; (800bec0 <interfaceWrite+0x61c>)
 800be1a:	0018      	movs	r0, r3
 800be1c:	f000 f8b6 	bl	800bf8c <_interfaceClear>
//	}
//	menuItemChangeValue(&menu, COMPASS, COMPASS_LEVEL, buffer,
//	INTER_DISABLED, NOT_EDITABLE);

	//								ROTATE VARIANT
	if (angle >= 345 || angle < 15) {
 800be20:	4b2e      	ldr	r3, [pc, #184]	; (800bedc <interfaceWrite+0x638>)
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	b21a      	sxth	r2, r3
 800be26:	23ac      	movs	r3, #172	; 0xac
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	429a      	cmp	r2, r3
 800be2c:	dc04      	bgt.n	800be38 <interfaceWrite+0x594>
 800be2e:	4b2b      	ldr	r3, [pc, #172]	; (800bedc <interfaceWrite+0x638>)
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	b21b      	sxth	r3, r3
 800be34:	2b0e      	cmp	r3, #14
 800be36:	dc03      	bgt.n	800be40 <interfaceWrite+0x59c>
		buffer[2] = 'n';
 800be38:	4b21      	ldr	r3, [pc, #132]	; (800bec0 <interfaceWrite+0x61c>)
 800be3a:	226e      	movs	r2, #110	; 0x6e
 800be3c:	709a      	strb	r2, [r3, #2]
 800be3e:	e02a      	b.n	800be96 <interfaceWrite+0x5f2>
	} else if (angle >= 15 && angle < 165) {
 800be40:	4b26      	ldr	r3, [pc, #152]	; (800bedc <interfaceWrite+0x638>)
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	b21b      	sxth	r3, r3
 800be46:	2b0e      	cmp	r3, #14
 800be48:	dd08      	ble.n	800be5c <interfaceWrite+0x5b8>
 800be4a:	4b24      	ldr	r3, [pc, #144]	; (800bedc <interfaceWrite+0x638>)
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	b21b      	sxth	r3, r3
 800be50:	2ba4      	cmp	r3, #164	; 0xa4
 800be52:	dc03      	bgt.n	800be5c <interfaceWrite+0x5b8>
		buffer[1] = '<';
 800be54:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <interfaceWrite+0x61c>)
 800be56:	223c      	movs	r2, #60	; 0x3c
 800be58:	705a      	strb	r2, [r3, #1]
 800be5a:	e01c      	b.n	800be96 <interfaceWrite+0x5f2>
	} else if (angle >= 165 && angle < 195) {
 800be5c:	4b1f      	ldr	r3, [pc, #124]	; (800bedc <interfaceWrite+0x638>)
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	b21b      	sxth	r3, r3
 800be62:	2ba4      	cmp	r3, #164	; 0xa4
 800be64:	dd08      	ble.n	800be78 <interfaceWrite+0x5d4>
 800be66:	4b1d      	ldr	r3, [pc, #116]	; (800bedc <interfaceWrite+0x638>)
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	b21b      	sxth	r3, r3
 800be6c:	2bc2      	cmp	r3, #194	; 0xc2
 800be6e:	dc03      	bgt.n	800be78 <interfaceWrite+0x5d4>
		buffer[2] = 'S';
 800be70:	4b13      	ldr	r3, [pc, #76]	; (800bec0 <interfaceWrite+0x61c>)
 800be72:	2253      	movs	r2, #83	; 0x53
 800be74:	709a      	strb	r2, [r3, #2]
 800be76:	e00e      	b.n	800be96 <interfaceWrite+0x5f2>
	} else if (angle >= 195 && angle < 345) {
 800be78:	4b18      	ldr	r3, [pc, #96]	; (800bedc <interfaceWrite+0x638>)
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	b21b      	sxth	r3, r3
 800be7e:	2bc2      	cmp	r3, #194	; 0xc2
 800be80:	dd09      	ble.n	800be96 <interfaceWrite+0x5f2>
 800be82:	4b16      	ldr	r3, [pc, #88]	; (800bedc <interfaceWrite+0x638>)
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	b21a      	sxth	r2, r3
 800be88:	23ac      	movs	r3, #172	; 0xac
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	429a      	cmp	r2, r3
 800be8e:	dc02      	bgt.n	800be96 <interfaceWrite+0x5f2>
		buffer[3] = '>';
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <interfaceWrite+0x61c>)
 800be92:	223e      	movs	r2, #62	; 0x3e
 800be94:	70da      	strb	r2, [r3, #3]
	}

	buffer[0] = 'C';
 800be96:	4b0a      	ldr	r3, [pc, #40]	; (800bec0 <interfaceWrite+0x61c>)
 800be98:	2243      	movs	r2, #67	; 0x43
 800be9a:	701a      	strb	r2, [r3, #0]
	menuItemChangeValue(&menu, COMPASS, COMPASS_LEVEL, buffer,
 800be9c:	4b08      	ldr	r3, [pc, #32]	; (800bec0 <interfaceWrite+0x61c>)
 800be9e:	4809      	ldr	r0, [pc, #36]	; (800bec4 <interfaceWrite+0x620>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	9201      	str	r2, [sp, #4]
 800bea4:	2204      	movs	r2, #4
 800bea6:	9200      	str	r2, [sp, #0]
 800bea8:	2200      	movs	r2, #0
 800beaa:	2106      	movs	r1, #6
 800beac:	f001 fcb2 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

}
 800beb0:	46c0      	nop			; (mov r8, r8)
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	46c0      	nop			; (mov r8, r8)
 800beb8:	20000724 	.word	0x20000724
 800bebc:	0000270f 	.word	0x0000270f
 800bec0:	20000174 	.word	0x20000174
 800bec4:	20000188 	.word	0x20000188
 800bec8:	20000350 	.word	0x20000350
 800becc:	42640000 	.word	0x42640000
 800bed0:	43340000 	.word	0x43340000
 800bed4:	43b40000 	.word	0x43b40000
 800bed8:	42b40000 	.word	0x42b40000
 800bedc:	2000017a 	.word	0x2000017a

0800bee0 <interfaceShowActual>:

void interfaceShowActual(void) {
 800bee0:	b580      	push	{r7, lr}
 800bee2:	af00      	add	r7, sp, #0
	LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 800bee4:	4a08      	ldr	r2, [pc, #32]	; (800bf08 <interfaceShowActual+0x28>)
 800bee6:	4809      	ldr	r0, [pc, #36]	; (800bf0c <interfaceShowActual+0x2c>)
 800bee8:	2300      	movs	r3, #0
 800beea:	2100      	movs	r1, #0
 800beec:	f7fd f812 	bl	8008f14 <LEDstr>
	LEDdot(&display, menu.current.value2);
 800bef0:	4a07      	ldr	r2, [pc, #28]	; (800bf10 <interfaceShowActual+0x30>)
 800bef2:	2370      	movs	r3, #112	; 0x70
 800bef4:	33ff      	adds	r3, #255	; 0xff
 800bef6:	5cd2      	ldrb	r2, [r2, r3]
 800bef8:	4b04      	ldr	r3, [pc, #16]	; (800bf0c <interfaceShowActual+0x2c>)
 800befa:	0011      	movs	r1, r2
 800befc:	0018      	movs	r0, r3
 800befe:	f7fd f857 	bl	8008fb0 <LEDdot>
}
 800bf02:	46c0      	nop			; (mov r8, r8)
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	200002f3 	.word	0x200002f3
 800bf0c:	20000600 	.word	0x20000600
 800bf10:	20000188 	.word	0x20000188

0800bf14 <_interfaceIntToArray>:

void _interfaceIntToArray(char *destination, uint8_t offset, int16_t integer) {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	0008      	movs	r0, r1
 800bf1e:	0011      	movs	r1, r2
 800bf20:	1cfb      	adds	r3, r7, #3
 800bf22:	1c02      	adds	r2, r0, #0
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	003b      	movs	r3, r7
 800bf28:	1c0a      	adds	r2, r1, #0
 800bf2a:	801a      	strh	r2, [r3, #0]

	if (integer < 10 && integer >= 0) {
 800bf2c:	003b      	movs	r3, r7
 800bf2e:	2200      	movs	r2, #0
 800bf30:	5e9b      	ldrsh	r3, [r3, r2]
 800bf32:	2b09      	cmp	r3, #9
 800bf34:	dc17      	bgt.n	800bf66 <_interfaceIntToArray+0x52>
 800bf36:	003b      	movs	r3, r7
 800bf38:	2200      	movs	r2, #0
 800bf3a:	5e9b      	ldrsh	r3, [r3, r2]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	db12      	blt.n	800bf66 <_interfaceIntToArray+0x52>
		sprintf(destination + offset + 1, "%d", integer);
 800bf40:	1cfb      	adds	r3, r7, #3
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	3301      	adds	r3, #1
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	18d0      	adds	r0, r2, r3
 800bf4a:	003b      	movs	r3, r7
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	5e9a      	ldrsh	r2, [r3, r2]
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <_interfaceIntToArray+0x74>)
 800bf52:	0019      	movs	r1, r3
 800bf54:	f003 f908 	bl	800f168 <siprintf>
		*(destination + offset) = '0';
 800bf58:	1cfb      	adds	r3, r7, #3
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	18d3      	adds	r3, r2, r3
 800bf60:	2230      	movs	r2, #48	; 0x30
 800bf62:	701a      	strb	r2, [r3, #0]
 800bf64:	e00b      	b.n	800bf7e <_interfaceIntToArray+0x6a>
	} else {
		sprintf(destination + offset, "%d", integer);
 800bf66:	1cfb      	adds	r3, r7, #3
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	18d0      	adds	r0, r2, r3
 800bf6e:	003b      	movs	r3, r7
 800bf70:	2200      	movs	r2, #0
 800bf72:	5e9a      	ldrsh	r2, [r3, r2]
 800bf74:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <_interfaceIntToArray+0x74>)
 800bf76:	0019      	movs	r1, r3
 800bf78:	f003 f8f6 	bl	800f168 <siprintf>
	}
}
 800bf7c:	46c0      	nop			; (mov r8, r8)
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	46bd      	mov	sp, r7
 800bf82:	b002      	add	sp, #8
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	08010220 	.word	0x08010220

0800bf8c <_interfaceClear>:

void _interfaceClear(char *buffer) {
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	memset(buffer, ' ', 4);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2204      	movs	r2, #4
 800bf98:	2120      	movs	r1, #32
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f003 f8db 	bl	800f156 <memset>
}
 800bfa0:	46c0      	nop			; (mov r8, r8)
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	b002      	add	sp, #8
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <encoderAction>:
 *      Manages sync/async interrupts from internal timaers, encoder, button and switch
 */

#include "interrupts.h"

void encoderAction(uint8_t direction) {
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	0002      	movs	r2, r0
 800bfb0:	1dfb      	adds	r3, r7, #7
 800bfb2:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 800bfb4:	1dfb      	adds	r3, r7, #7
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d000      	beq.n	800bfbe <encoderAction+0x16>
 800bfbc:	e06d      	b.n	800c09a <encoderAction+0xf2>

		if (menu.current.entry == CHRONO_HUNDREDTHS
 800bfbe:	4ac1      	ldr	r2, [pc, #772]	; (800c2c4 <encoderAction+0x31c>)
 800bfc0:	2372      	movs	r3, #114	; 0x72
 800bfc2:	33ff      	adds	r3, #255	; 0xff
 800bfc4:	5cd3      	ldrb	r3, [r2, r3]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d123      	bne.n	800c012 <encoderAction+0x6a>
				&& menu.current.level == CHRONO_HUNDREDTHS_LEVEL) {
 800bfca:	4abe      	ldr	r2, [pc, #760]	; (800c2c4 <encoderAction+0x31c>)
 800bfcc:	23b9      	movs	r3, #185	; 0xb9
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	5cd3      	ldrb	r3, [r2, r3]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d11d      	bne.n	800c012 <encoderAction+0x6a>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800bfd6:	4bbc      	ldr	r3, [pc, #752]	; (800c2c8 <encoderAction+0x320>)
 800bfd8:	2224      	movs	r2, #36	; 0x24
 800bfda:	5c9b      	ldrb	r3, [r3, r2]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d104      	bne.n	800bfea <encoderAction+0x42>
				rtcStartChrono(&chronograph);
 800bfe0:	4bb9      	ldr	r3, [pc, #740]	; (800c2c8 <encoderAction+0x320>)
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	f002 fb2e 	bl	800e644 <rtcStartChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800bfe8:	e056      	b.n	800c098 <encoderAction+0xf0>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800bfea:	4bb7      	ldr	r3, [pc, #732]	; (800c2c8 <encoderAction+0x320>)
 800bfec:	2224      	movs	r2, #36	; 0x24
 800bfee:	5c9b      	ldrb	r3, [r3, r2]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d104      	bne.n	800bffe <encoderAction+0x56>
				rtcStopChrono(&chronograph);
 800bff4:	4bb4      	ldr	r3, [pc, #720]	; (800c2c8 <encoderAction+0x320>)
 800bff6:	0018      	movs	r0, r3
 800bff8:	f002 fb78 	bl	800e6ec <rtcStopChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800bffc:	e04c      	b.n	800c098 <encoderAction+0xf0>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_STOP) {
 800bffe:	4bb2      	ldr	r3, [pc, #712]	; (800c2c8 <encoderAction+0x320>)
 800c000:	2224      	movs	r2, #36	; 0x24
 800c002:	5c9b      	ldrb	r3, [r3, r2]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d147      	bne.n	800c098 <encoderAction+0xf0>
				rtcResumeChrono(&chronograph);
 800c008:	4baf      	ldr	r3, [pc, #700]	; (800c2c8 <encoderAction+0x320>)
 800c00a:	0018      	movs	r0, r3
 800c00c:	f002 fc20 	bl	800e850 <rtcResumeChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c010:	e042      	b.n	800c098 <encoderAction+0xf0>
			}

		} else if (menu.current.entry == CHRONO_RESET
 800c012:	4aac      	ldr	r2, [pc, #688]	; (800c2c4 <encoderAction+0x31c>)
 800c014:	2372      	movs	r3, #114	; 0x72
 800c016:	33ff      	adds	r3, #255	; 0xff
 800c018:	5cd3      	ldrb	r3, [r2, r3]
 800c01a:	2b04      	cmp	r3, #4
 800c01c:	d10a      	bne.n	800c034 <encoderAction+0x8c>
				&& menu.current.level == CHRONO_RESET_LEVEL) {
 800c01e:	4aa9      	ldr	r2, [pc, #676]	; (800c2c4 <encoderAction+0x31c>)
 800c020:	23b9      	movs	r3, #185	; 0xb9
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	5cd3      	ldrb	r3, [r2, r3]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d104      	bne.n	800c034 <encoderAction+0x8c>
			rtcResetChrono(&chronograph);
 800c02a:	4ba7      	ldr	r3, [pc, #668]	; (800c2c8 <encoderAction+0x320>)
 800c02c:	0018      	movs	r0, r3
 800c02e:	f002 fc1b 	bl	800e868 <rtcResetChrono>
 800c032:	e032      	b.n	800c09a <encoderAction+0xf2>

		} else if (menu.current.entry == SETTINGS_SAVE
 800c034:	4aa3      	ldr	r2, [pc, #652]	; (800c2c4 <encoderAction+0x31c>)
 800c036:	2372      	movs	r3, #114	; 0x72
 800c038:	33ff      	adds	r3, #255	; 0xff
 800c03a:	5cd3      	ldrb	r3, [r2, r3]
 800c03c:	2b0a      	cmp	r3, #10
 800c03e:	d10a      	bne.n	800c056 <encoderAction+0xae>
				&& menu.current.level == SETTINGS_SAVE_LEVEL) {
 800c040:	4aa0      	ldr	r2, [pc, #640]	; (800c2c4 <encoderAction+0x31c>)
 800c042:	23b9      	movs	r3, #185	; 0xb9
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	5cd3      	ldrb	r3, [r2, r3]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d104      	bne.n	800c056 <encoderAction+0xae>

			backupWrite(&chronograph);
 800c04c:	4b9e      	ldr	r3, [pc, #632]	; (800c2c8 <encoderAction+0x320>)
 800c04e:	0018      	movs	r0, r3
 800c050:	f7fd f870 	bl	8009134 <backupWrite>
 800c054:	e021      	b.n	800c09a <encoderAction+0xf2>

		} else {

			if (menuSwitch(&menu, MENU_ENTER)) {
 800c056:	4b9b      	ldr	r3, [pc, #620]	; (800c2c4 <encoderAction+0x31c>)
 800c058:	2100      	movs	r1, #0
 800c05a:	0018      	movs	r0, r3
 800c05c:	f001 fd20 	bl	800daa0 <menuSwitch>
 800c060:	1e03      	subs	r3, r0, #0
 800c062:	d00f      	beq.n	800c084 <encoderAction+0xdc>
				LEDstr(&display, 0, menu.current.value,
 800c064:	4a99      	ldr	r2, [pc, #612]	; (800c2cc <encoderAction+0x324>)
 800c066:	489a      	ldr	r0, [pc, #616]	; (800c2d0 <encoderAction+0x328>)
 800c068:	2301      	movs	r3, #1
 800c06a:	2100      	movs	r1, #0
 800c06c:	f7fc ff52 	bl	8008f14 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 800c070:	4a94      	ldr	r2, [pc, #592]	; (800c2c4 <encoderAction+0x31c>)
 800c072:	2370      	movs	r3, #112	; 0x70
 800c074:	33ff      	adds	r3, #255	; 0xff
 800c076:	5cd2      	ldrb	r2, [r2, r3]
 800c078:	4b95      	ldr	r3, [pc, #596]	; (800c2d0 <encoderAction+0x328>)
 800c07a:	0011      	movs	r1, r2
 800c07c:	0018      	movs	r0, r3
 800c07e:	f7fc ff97 	bl	8008fb0 <LEDdot>
 800c082:	e00a      	b.n	800c09a <encoderAction+0xf2>
			} else { //if theres no child under item
				if (menu.current.value3) { //check thats editable
 800c084:	4a8f      	ldr	r2, [pc, #572]	; (800c2c4 <encoderAction+0x31c>)
 800c086:	23b8      	movs	r3, #184	; 0xb8
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	5cd3      	ldrb	r3, [r2, r3]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d004      	beq.n	800c09a <encoderAction+0xf2>
					flags[FLAG_LOCKED] = 1;
 800c090:	4b90      	ldr	r3, [pc, #576]	; (800c2d4 <encoderAction+0x32c>)
 800c092:	2201      	movs	r2, #1
 800c094:	701a      	strb	r2, [r3, #0]
 800c096:	e000      	b.n	800c09a <encoderAction+0xf2>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c098:	46c0      	nop			; (mov r8, r8)
			}
		}

	}

	if (direction == ENCODER_ACTION_EXIT) {
 800c09a:	1dfb      	adds	r3, r7, #7
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d11e      	bne.n	800c0e0 <encoderAction+0x138>

		if (!flags[FLAG_LOCKED]) {
 800c0a2:	4b8c      	ldr	r3, [pc, #560]	; (800c2d4 <encoderAction+0x32c>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d116      	bne.n	800c0da <encoderAction+0x132>
			if (menuSwitch(&menu, MENU_EXIT)) {
 800c0ac:	4b85      	ldr	r3, [pc, #532]	; (800c2c4 <encoderAction+0x31c>)
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	0018      	movs	r0, r3
 800c0b2:	f001 fcf5 	bl	800daa0 <menuSwitch>
 800c0b6:	1e03      	subs	r3, r0, #0
 800c0b8:	d012      	beq.n	800c0e0 <encoderAction+0x138>
				LEDstr(&display, 0, menu.current.value,
 800c0ba:	4a84      	ldr	r2, [pc, #528]	; (800c2cc <encoderAction+0x324>)
 800c0bc:	4884      	ldr	r0, [pc, #528]	; (800c2d0 <encoderAction+0x328>)
 800c0be:	2302      	movs	r3, #2
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	f7fc ff27 	bl	8008f14 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 800c0c6:	4a7f      	ldr	r2, [pc, #508]	; (800c2c4 <encoderAction+0x31c>)
 800c0c8:	2370      	movs	r3, #112	; 0x70
 800c0ca:	33ff      	adds	r3, #255	; 0xff
 800c0cc:	5cd2      	ldrb	r2, [r2, r3]
 800c0ce:	4b80      	ldr	r3, [pc, #512]	; (800c2d0 <encoderAction+0x328>)
 800c0d0:	0011      	movs	r1, r2
 800c0d2:	0018      	movs	r0, r3
 800c0d4:	f7fc ff6c 	bl	8008fb0 <LEDdot>
 800c0d8:	e002      	b.n	800c0e0 <encoderAction+0x138>
			}
		} else {
			flags[FLAG_LOCKED] = 0;
 800c0da:	4b7e      	ldr	r3, [pc, #504]	; (800c2d4 <encoderAction+0x32c>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	701a      	strb	r2, [r3, #0]
		}

	}

	if (direction == ENCODER_ACTION_LEFT) {
 800c0e0:	1dfb      	adds	r3, r7, #7
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d000      	beq.n	800c0ea <encoderAction+0x142>
 800c0e8:	e06c      	b.n	800c1c4 <encoderAction+0x21c>

		if (!flags[FLAG_LOCKED]) {
 800c0ea:	4b7a      	ldr	r3, [pc, #488]	; (800c2d4 <encoderAction+0x32c>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d116      	bne.n	800c122 <encoderAction+0x17a>
			if (menuSwitch(&menu, MENU_UP)) {
 800c0f4:	4b73      	ldr	r3, [pc, #460]	; (800c2c4 <encoderAction+0x31c>)
 800c0f6:	2102      	movs	r1, #2
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f001 fcd1 	bl	800daa0 <menuSwitch>
 800c0fe:	1e03      	subs	r3, r0, #0
 800c100:	d065      	beq.n	800c1ce <encoderAction+0x226>
				LEDstr(&display, 0, menu.current.value,
 800c102:	4a72      	ldr	r2, [pc, #456]	; (800c2cc <encoderAction+0x324>)
 800c104:	4872      	ldr	r0, [pc, #456]	; (800c2d0 <encoderAction+0x328>)
 800c106:	2302      	movs	r3, #2
 800c108:	2100      	movs	r1, #0
 800c10a:	f7fc ff03 	bl	8008f14 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 800c10e:	4a6d      	ldr	r2, [pc, #436]	; (800c2c4 <encoderAction+0x31c>)
 800c110:	2370      	movs	r3, #112	; 0x70
 800c112:	33ff      	adds	r3, #255	; 0xff
 800c114:	5cd2      	ldrb	r2, [r2, r3]
 800c116:	4b6e      	ldr	r3, [pc, #440]	; (800c2d0 <encoderAction+0x328>)
 800c118:	0011      	movs	r1, r2
 800c11a:	0018      	movs	r0, r3
 800c11c:	f7fc ff48 	bl	8008fb0 <LEDdot>
 800c120:	e055      	b.n	800c1ce <encoderAction+0x226>
			}
		} else {

			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 800c122:	4a68      	ldr	r2, [pc, #416]	; (800c2c4 <encoderAction+0x31c>)
 800c124:	23b9      	movs	r3, #185	; 0xb9
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	5cd3      	ldrb	r3, [r2, r3]
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d14a      	bne.n	800c1c4 <encoderAction+0x21c>

				switch (menu.current.entry) {
 800c12e:	4a65      	ldr	r2, [pc, #404]	; (800c2c4 <encoderAction+0x31c>)
 800c130:	2372      	movs	r3, #114	; 0x72
 800c132:	33ff      	adds	r3, #255	; 0xff
 800c134:	5cd3      	ldrb	r3, [r2, r3]
 800c136:	2b07      	cmp	r3, #7
 800c138:	d849      	bhi.n	800c1ce <encoderAction+0x226>
 800c13a:	009a      	lsls	r2, r3, #2
 800c13c:	4b66      	ldr	r3, [pc, #408]	; (800c2d8 <encoderAction+0x330>)
 800c13e:	18d3      	adds	r3, r2, r3
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	469f      	mov	pc, r3
				case SETTINGS_CLOCK_HOUR:
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 800c144:	4b60      	ldr	r3, [pc, #384]	; (800c2c8 <encoderAction+0x320>)
 800c146:	2201      	movs	r2, #1
 800c148:	2100      	movs	r1, #0
 800c14a:	0018      	movs	r0, r3
 800c14c:	f002 fbb0 	bl	800e8b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c150:	e03d      	b.n	800c1ce <encoderAction+0x226>
				case SETTINGS_CLOCK_MINUTE:
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 800c152:	4b5d      	ldr	r3, [pc, #372]	; (800c2c8 <encoderAction+0x320>)
 800c154:	2201      	movs	r2, #1
 800c156:	2101      	movs	r1, #1
 800c158:	0018      	movs	r0, r3
 800c15a:	f002 fba9 	bl	800e8b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c15e:	e036      	b.n	800c1ce <encoderAction+0x226>
				case SETTINGS_CLOCK_SECONDS:
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 800c160:	4b59      	ldr	r3, [pc, #356]	; (800c2c8 <encoderAction+0x320>)
 800c162:	2201      	movs	r2, #1
 800c164:	2102      	movs	r1, #2
 800c166:	0018      	movs	r0, r3
 800c168:	f002 fba2 	bl	800e8b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c16c:	e02f      	b.n	800c1ce <encoderAction+0x226>
				case SETTINGS_CALENDAR_DAY:
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 800c16e:	4b56      	ldr	r3, [pc, #344]	; (800c2c8 <encoderAction+0x320>)
 800c170:	2201      	movs	r2, #1
 800c172:	2103      	movs	r1, #3
 800c174:	0018      	movs	r0, r3
 800c176:	f002 fb9b 	bl	800e8b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c17a:	e028      	b.n	800c1ce <encoderAction+0x226>
				case SETTINGS_CALENDAR_MONTH:
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 800c17c:	4b52      	ldr	r3, [pc, #328]	; (800c2c8 <encoderAction+0x320>)
 800c17e:	2201      	movs	r2, #1
 800c180:	2104      	movs	r1, #4
 800c182:	0018      	movs	r0, r3
 800c184:	f002 fb94 	bl	800e8b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c188:	e021      	b.n	800c1ce <encoderAction+0x226>
				case SETTINGS_CALENDAR_YEAR:
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 800c18a:	4b4f      	ldr	r3, [pc, #316]	; (800c2c8 <encoderAction+0x320>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	2105      	movs	r1, #5
 800c190:	0018      	movs	r0, r3
 800c192:	f002 fb8d 	bl	800e8b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c196:	e01a      	b.n	800c1ce <encoderAction+0x226>
				case SETTINGS_CORRECTION_VALUE:
					if (temperatureCorrection > TEMPERATURE_CORRECTION_MIN)
 800c198:	4b50      	ldr	r3, [pc, #320]	; (800c2dc <encoderAction+0x334>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3327      	adds	r3, #39	; 0x27
 800c19e:	db13      	blt.n	800c1c8 <encoderAction+0x220>
						temperatureCorrection--;
 800c1a0:	4b4e      	ldr	r3, [pc, #312]	; (800c2dc <encoderAction+0x334>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	1e5a      	subs	r2, r3, #1
 800c1a6:	4b4d      	ldr	r3, [pc, #308]	; (800c2dc <encoderAction+0x334>)
 800c1a8:	601a      	str	r2, [r3, #0]
					break;
 800c1aa:	e00d      	b.n	800c1c8 <encoderAction+0x220>
				case SETTINGS_REFERENCE_VALUE:
					if (bme280.pressureReference > PRESSURE_REFERENCE_MIN)
 800c1ac:	4b4c      	ldr	r3, [pc, #304]	; (800c2e0 <encoderAction+0x338>)
 800c1ae:	695a      	ldr	r2, [r3, #20]
 800c1b0:	2396      	movs	r3, #150	; 0x96
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d909      	bls.n	800c1cc <encoderAction+0x224>
						bme280.pressureReference--;
 800c1b8:	4b49      	ldr	r3, [pc, #292]	; (800c2e0 <encoderAction+0x338>)
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	1e5a      	subs	r2, r3, #1
 800c1be:	4b48      	ldr	r3, [pc, #288]	; (800c2e0 <encoderAction+0x338>)
 800c1c0:	615a      	str	r2, [r3, #20]
					break;
 800c1c2:	e003      	b.n	800c1cc <encoderAction+0x224>
				}

			}
 800c1c4:	46c0      	nop			; (mov r8, r8)
 800c1c6:	e002      	b.n	800c1ce <encoderAction+0x226>
					break;
 800c1c8:	46c0      	nop			; (mov r8, r8)
 800c1ca:	e000      	b.n	800c1ce <encoderAction+0x226>
					break;
 800c1cc:	46c0      	nop			; (mov r8, r8)

		}

	}
	if (direction == ENCODER_ACTION_RIGHT) {
 800c1ce:	1dfb      	adds	r3, r7, #7
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d000      	beq.n	800c1d8 <encoderAction+0x230>
 800c1d6:	e06c      	b.n	800c2b2 <encoderAction+0x30a>

		if (!flags[FLAG_LOCKED]) {
 800c1d8:	4b3e      	ldr	r3, [pc, #248]	; (800c2d4 <encoderAction+0x32c>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d116      	bne.n	800c210 <encoderAction+0x268>
			if (menuSwitch(&menu, MENU_DOWN)) {
 800c1e2:	4b38      	ldr	r3, [pc, #224]	; (800c2c4 <encoderAction+0x31c>)
 800c1e4:	2103      	movs	r1, #3
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f001 fc5a 	bl	800daa0 <menuSwitch>
 800c1ec:	1e03      	subs	r3, r0, #0
 800c1ee:	d065      	beq.n	800c2bc <encoderAction+0x314>
				LEDstr(&display, 0, menu.current.value,
 800c1f0:	4a36      	ldr	r2, [pc, #216]	; (800c2cc <encoderAction+0x324>)
 800c1f2:	4837      	ldr	r0, [pc, #220]	; (800c2d0 <encoderAction+0x328>)
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	f7fc fe8c 	bl	8008f14 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 800c1fc:	4a31      	ldr	r2, [pc, #196]	; (800c2c4 <encoderAction+0x31c>)
 800c1fe:	2370      	movs	r3, #112	; 0x70
 800c200:	33ff      	adds	r3, #255	; 0xff
 800c202:	5cd2      	ldrb	r2, [r2, r3]
 800c204:	4b32      	ldr	r3, [pc, #200]	; (800c2d0 <encoderAction+0x328>)
 800c206:	0011      	movs	r1, r2
 800c208:	0018      	movs	r0, r3
 800c20a:	f7fc fed1 	bl	8008fb0 <LEDdot>
			}

		}

	}
}
 800c20e:	e055      	b.n	800c2bc <encoderAction+0x314>
			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 800c210:	4a2c      	ldr	r2, [pc, #176]	; (800c2c4 <encoderAction+0x31c>)
 800c212:	23b9      	movs	r3, #185	; 0xb9
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	5cd3      	ldrb	r3, [r2, r3]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d14a      	bne.n	800c2b2 <encoderAction+0x30a>
				switch (menu.current.entry) {
 800c21c:	4a29      	ldr	r2, [pc, #164]	; (800c2c4 <encoderAction+0x31c>)
 800c21e:	2372      	movs	r3, #114	; 0x72
 800c220:	33ff      	adds	r3, #255	; 0xff
 800c222:	5cd3      	ldrb	r3, [r2, r3]
 800c224:	2b07      	cmp	r3, #7
 800c226:	d849      	bhi.n	800c2bc <encoderAction+0x314>
 800c228:	009a      	lsls	r2, r3, #2
 800c22a:	4b2e      	ldr	r3, [pc, #184]	; (800c2e4 <encoderAction+0x33c>)
 800c22c:	18d3      	adds	r3, r2, r3
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	469f      	mov	pc, r3
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 800c232:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <encoderAction+0x320>)
 800c234:	2200      	movs	r2, #0
 800c236:	2100      	movs	r1, #0
 800c238:	0018      	movs	r0, r3
 800c23a:	f002 fb39 	bl	800e8b0 <rtcChangeValue>
					break;
 800c23e:	e03d      	b.n	800c2bc <encoderAction+0x314>
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 800c240:	4b21      	ldr	r3, [pc, #132]	; (800c2c8 <encoderAction+0x320>)
 800c242:	2200      	movs	r2, #0
 800c244:	2101      	movs	r1, #1
 800c246:	0018      	movs	r0, r3
 800c248:	f002 fb32 	bl	800e8b0 <rtcChangeValue>
					break;
 800c24c:	e036      	b.n	800c2bc <encoderAction+0x314>
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 800c24e:	4b1e      	ldr	r3, [pc, #120]	; (800c2c8 <encoderAction+0x320>)
 800c250:	2200      	movs	r2, #0
 800c252:	2102      	movs	r1, #2
 800c254:	0018      	movs	r0, r3
 800c256:	f002 fb2b 	bl	800e8b0 <rtcChangeValue>
					break;
 800c25a:	e02f      	b.n	800c2bc <encoderAction+0x314>
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 800c25c:	4b1a      	ldr	r3, [pc, #104]	; (800c2c8 <encoderAction+0x320>)
 800c25e:	2200      	movs	r2, #0
 800c260:	2103      	movs	r1, #3
 800c262:	0018      	movs	r0, r3
 800c264:	f002 fb24 	bl	800e8b0 <rtcChangeValue>
					break;
 800c268:	e028      	b.n	800c2bc <encoderAction+0x314>
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 800c26a:	4b17      	ldr	r3, [pc, #92]	; (800c2c8 <encoderAction+0x320>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	2104      	movs	r1, #4
 800c270:	0018      	movs	r0, r3
 800c272:	f002 fb1d 	bl	800e8b0 <rtcChangeValue>
					break;
 800c276:	e021      	b.n	800c2bc <encoderAction+0x314>
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 800c278:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <encoderAction+0x320>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	2105      	movs	r1, #5
 800c27e:	0018      	movs	r0, r3
 800c280:	f002 fb16 	bl	800e8b0 <rtcChangeValue>
					break;
 800c284:	e01a      	b.n	800c2bc <encoderAction+0x314>
					if (temperatureCorrection < TEMPERATURE_CORRECTION_MAX)
 800c286:	4b15      	ldr	r3, [pc, #84]	; (800c2dc <encoderAction+0x334>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b1d      	cmp	r3, #29
 800c28c:	dc13      	bgt.n	800c2b6 <encoderAction+0x30e>
						temperatureCorrection++;
 800c28e:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <encoderAction+0x334>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	4b11      	ldr	r3, [pc, #68]	; (800c2dc <encoderAction+0x334>)
 800c296:	601a      	str	r2, [r3, #0]
					break;
 800c298:	e00d      	b.n	800c2b6 <encoderAction+0x30e>
					if (bme280.pressureReference < PRESSURE_REFERENCE_MAX)
 800c29a:	4b11      	ldr	r3, [pc, #68]	; (800c2e0 <encoderAction+0x338>)
 800c29c:	695a      	ldr	r2, [r3, #20]
 800c29e:	23af      	movs	r3, #175	; 0xaf
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d209      	bcs.n	800c2ba <encoderAction+0x312>
						bme280.pressureReference++;
 800c2a6:	4b0e      	ldr	r3, [pc, #56]	; (800c2e0 <encoderAction+0x338>)
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	4b0c      	ldr	r3, [pc, #48]	; (800c2e0 <encoderAction+0x338>)
 800c2ae:	615a      	str	r2, [r3, #20]
					break;
 800c2b0:	e003      	b.n	800c2ba <encoderAction+0x312>
			}
 800c2b2:	46c0      	nop			; (mov r8, r8)
 800c2b4:	e002      	b.n	800c2bc <encoderAction+0x314>
					break;
 800c2b6:	46c0      	nop			; (mov r8, r8)
 800c2b8:	e000      	b.n	800c2bc <encoderAction+0x314>
					break;
 800c2ba:	46c0      	nop			; (mov r8, r8)
}
 800c2bc:	46c0      	nop			; (mov r8, r8)
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	b002      	add	sp, #8
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	20000188 	.word	0x20000188
 800c2c8:	200005d8 	.word	0x200005d8
 800c2cc:	200002f3 	.word	0x200002f3
 800c2d0:	20000600 	.word	0x20000600
 800c2d4:	20000180 	.word	0x20000180
 800c2d8:	08010510 	.word	0x08010510
 800c2dc:	2000017c 	.word	0x2000017c
 800c2e0:	20000724 	.word	0x20000724
 800c2e4:	08010530 	.word	0x08010530

0800c2e8 <GPIO_EXTI_Rising_FallingCallback>:

void GPIO_EXTI_Rising_FallingCallback(uint16_t GPIO_Pin) {
 800c2e8:	b590      	push	{r4, r7, lr}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	0002      	movs	r2, r0
 800c2f0:	1dbb      	adds	r3, r7, #6
 800c2f2:	801a      	strh	r2, [r3, #0]

	status[STATUS_INT_SOURCE] = STATUS_INT_SOURCE_EXTI;
 800c2f4:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <GPIO_EXTI_Rising_FallingCallback+0x108>)
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	701a      	strb	r2, [r3, #0]

	//change status
	if(GPIO_Pin == MODE_Pin){
 800c2fa:	1dbb      	adds	r3, r7, #6
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	2b08      	cmp	r3, #8
 800c300:	d10d      	bne.n	800c31e <GPIO_EXTI_Rising_FallingCallback+0x36>
		if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin)){
 800c302:	4b3c      	ldr	r3, [pc, #240]	; (800c3f4 <GPIO_EXTI_Rising_FallingCallback+0x10c>)
 800c304:	2108      	movs	r1, #8
 800c306:	0018      	movs	r0, r3
 800c308:	f7f8 fbae 	bl	8004a68 <HAL_GPIO_ReadPin>
 800c30c:	1e03      	subs	r3, r0, #0
 800c30e:	d003      	beq.n	800c318 <GPIO_EXTI_Rising_FallingCallback+0x30>
			status[STATUS_MODE_SWITCH] = STATUS_MODE_SWITCH_ONDEMAND;
 800c310:	4b37      	ldr	r3, [pc, #220]	; (800c3f0 <GPIO_EXTI_Rising_FallingCallback+0x108>)
 800c312:	2201      	movs	r2, #1
 800c314:	705a      	strb	r2, [r3, #1]
 800c316:	e002      	b.n	800c31e <GPIO_EXTI_Rising_FallingCallback+0x36>
		}else{
			status[STATUS_MODE_SWITCH] = STATUS_MODE_SWITCH_FORCE;
 800c318:	4b35      	ldr	r3, [pc, #212]	; (800c3f0 <GPIO_EXTI_Rising_FallingCallback+0x108>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	705a      	strb	r2, [r3, #1]
		}
	}


	if (GPIO_Pin == BACKUP_Pin && flags[FLAG_INITIALIZED]) {
 800c31e:	1dbb      	adds	r3, r7, #6
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d121      	bne.n	800c36a <GPIO_EXTI_Rising_FallingCallback+0x82>
 800c326:	4b34      	ldr	r3, [pc, #208]	; (800c3f8 <GPIO_EXTI_Rising_FallingCallback+0x110>)
 800c328:	789b      	ldrb	r3, [r3, #2]
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01c      	beq.n	800c36a <GPIO_EXTI_Rising_FallingCallback+0x82>

		//turn off force mode
		status[STATUS_MODE_SWITCH] = STATUS_MODE_SWITCH_ONDEMAND;
 800c330:	4b2f      	ldr	r3, [pc, #188]	; (800c3f0 <GPIO_EXTI_Rising_FallingCallback+0x108>)
 800c332:	2201      	movs	r2, #1
 800c334:	705a      	strb	r2, [r3, #1]

		//save clock if battery is pulled out
		HAL_GPIO_WritePin(LED_WRITE_GPIO_Port, LED_WRITE_Pin, 1);
 800c336:	23a0      	movs	r3, #160	; 0xa0
 800c338:	05db      	lsls	r3, r3, #23
 800c33a:	2201      	movs	r2, #1
 800c33c:	2120      	movs	r1, #32
 800c33e:	0018      	movs	r0, r3
 800c340:	f7f8 fbaf 	bl	8004aa2 <HAL_GPIO_WritePin>
		rtcGetTime(&chronograph);
 800c344:	4b2d      	ldr	r3, [pc, #180]	; (800c3fc <GPIO_EXTI_Rising_FallingCallback+0x114>)
 800c346:	0018      	movs	r0, r3
 800c348:	f001 fefc 	bl	800e144 <rtcGetTime>
		backupWrite(&chronograph);
 800c34c:	4b2b      	ldr	r3, [pc, #172]	; (800c3fc <GPIO_EXTI_Rising_FallingCallback+0x114>)
 800c34e:	0018      	movs	r0, r3
 800c350:	f7fc fef0 	bl	8009134 <backupWrite>
		HAL_GPIO_WritePin(LED_WRITE_GPIO_Port, LED_WRITE_Pin, 0);
 800c354:	23a0      	movs	r3, #160	; 0xa0
 800c356:	05db      	lsls	r3, r3, #23
 800c358:	2200      	movs	r2, #0
 800c35a:	2120      	movs	r1, #32
 800c35c:	0018      	movs	r0, r3
 800c35e:	f7f8 fba0 	bl	8004aa2 <HAL_GPIO_WritePin>
		flags[FLAG_SLEEP] = 1;
 800c362:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <GPIO_EXTI_Rising_FallingCallback+0x110>)
 800c364:	2201      	movs	r2, #1
 800c366:	705a      	strb	r2, [r3, #1]
 800c368:	e003      	b.n	800c372 <GPIO_EXTI_Rising_FallingCallback+0x8a>

	} else {
		TIM2->CNT = 0; // reset wakeup timer if interrupt occurs
 800c36a:	2380      	movs	r3, #128	; 0x80
 800c36c:	05db      	lsls	r3, r3, #23
 800c36e:	2200      	movs	r2, #0
 800c370:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (GPIO_Pin == ENC1_Pin) {
 800c372:	1dbb      	adds	r3, r7, #6
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	2b40      	cmp	r3, #64	; 0x40
 800c378:	d111      	bne.n	800c39e <GPIO_EXTI_Rising_FallingCallback+0xb6>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c37a:	4b1e      	ldr	r3, [pc, #120]	; (800c3f4 <GPIO_EXTI_Rising_FallingCallback+0x10c>)
 800c37c:	2140      	movs	r1, #64	; 0x40
 800c37e:	0018      	movs	r0, r3
 800c380:	f7f8 fb72 	bl	8004a68 <HAL_GPIO_ReadPin>
 800c384:	0003      	movs	r3, r0
 800c386:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800c388:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <GPIO_EXTI_Rising_FallingCallback+0x10c>)
 800c38a:	2180      	movs	r1, #128	; 0x80
 800c38c:	0018      	movs	r0, r3
 800c38e:	f7f8 fb6b 	bl	8004a68 <HAL_GPIO_ReadPin>
 800c392:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c394:	429c      	cmp	r4, r3
 800c396:	d002      	beq.n	800c39e <GPIO_EXTI_Rising_FallingCallback+0xb6>
			encoderAction(ENCODER_ACTION_LEFT);
 800c398:	2000      	movs	r0, #0
 800c39a:	f7ff fe05 	bl	800bfa8 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 800c39e:	1dbb      	adds	r3, r7, #6
 800c3a0:	881b      	ldrh	r3, [r3, #0]
 800c3a2:	2b80      	cmp	r3, #128	; 0x80
 800c3a4:	d111      	bne.n	800c3ca <GPIO_EXTI_Rising_FallingCallback+0xe2>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c3a6:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <GPIO_EXTI_Rising_FallingCallback+0x10c>)
 800c3a8:	2140      	movs	r1, #64	; 0x40
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	f7f8 fb5c 	bl	8004a68 <HAL_GPIO_ReadPin>
 800c3b0:	0003      	movs	r3, r0
 800c3b2:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <GPIO_EXTI_Rising_FallingCallback+0x10c>)
 800c3b6:	2180      	movs	r1, #128	; 0x80
 800c3b8:	0018      	movs	r0, r3
 800c3ba:	f7f8 fb55 	bl	8004a68 <HAL_GPIO_ReadPin>
 800c3be:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c3c0:	429c      	cmp	r4, r3
 800c3c2:	d002      	beq.n	800c3ca <GPIO_EXTI_Rising_FallingCallback+0xe2>
			encoderAction(ENCODER_ACTION_RIGHT);
 800c3c4:	2001      	movs	r0, #1
 800c3c6:	f7ff fdef 	bl	800bfa8 <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 800c3ca:	1dbb      	adds	r3, r7, #6
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	2b20      	cmp	r3, #32
 800c3d0:	d102      	bne.n	800c3d8 <GPIO_EXTI_Rising_FallingCallback+0xf0>
		encoderAction(ENCODER_ACTION_ENTER);
 800c3d2:	2002      	movs	r0, #2
 800c3d4:	f7ff fde8 	bl	800bfa8 <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 800c3d8:	1dbb      	adds	r3, r7, #6
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	2b10      	cmp	r3, #16
 800c3de:	d102      	bne.n	800c3e6 <GPIO_EXTI_Rising_FallingCallback+0xfe>
		encoderAction(ENCODER_ACTION_EXIT);
 800c3e0:	2003      	movs	r0, #3
 800c3e2:	f7ff fde1 	bl	800bfa8 <encoderAction>

	if (GPIO_Pin == MODE_Pin) {

	}

}
 800c3e6:	46c0      	nop			; (mov r8, r8)
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	b003      	add	sp, #12
 800c3ec:	bd90      	pop	{r4, r7, pc}
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	20000184 	.word	0x20000184
 800c3f4:	50000400 	.word	0x50000400
 800c3f8:	20000180 	.word	0x20000180
 800c3fc:	200005d8 	.word	0x200005d8

0800c400 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	0002      	movs	r2, r0
 800c408:	1dbb      	adds	r3, r7, #6
 800c40a:	801a      	strh	r2, [r3, #0]
	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 800c40c:	1dbb      	adds	r3, r7, #6
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	0018      	movs	r0, r3
 800c412:	f7ff ff69 	bl	800c2e8 <GPIO_EXTI_Rising_FallingCallback>
}
 800c416:	46c0      	nop			; (mov r8, r8)
 800c418:	46bd      	mov	sp, r7
 800c41a:	b002      	add	sp, #8
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	0002      	movs	r2, r0
 800c426:	1dbb      	adds	r3, r7, #6
 800c428:	801a      	strh	r2, [r3, #0]

	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 800c42a:	1dbb      	adds	r3, r7, #6
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	0018      	movs	r0, r3
 800c430:	f7ff ff5a 	bl	800c2e8 <GPIO_EXTI_Rising_FallingCallback>

}
 800c434:	46c0      	nop			; (mov r8, r8)
 800c436:	46bd      	mov	sp, r7
 800c438:	b002      	add	sp, #8
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {//led multiplexing and transition - 320Hz
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a0e      	ldr	r2, [pc, #56]	; (800c484 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d103      	bne.n	800c456 <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 800c44e:	4b0e      	ldr	r3, [pc, #56]	; (800c488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800c450:	0018      	movs	r0, r3
 800c452:	f7fb ff3f 	bl	80082d4 <LEDmultiplexing>
	}
	if (htim->Instance == TIM2) {//going to sleep - 0,2Hz
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	2380      	movs	r3, #128	; 0x80
 800c45c:	05db      	lsls	r3, r3, #23
 800c45e:	429a      	cmp	r2, r3
 800c460:	d102      	bne.n	800c468 <HAL_TIM_PeriodElapsedCallback+0x2c>
		flags[FLAG_SLEEP] = 1;
 800c462:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800c464:	2201      	movs	r2, #1
 800c466:	705a      	strb	r2, [r3, #1]
	}
	if (htim->Instance == TIM3) {//calibrating compass - 1Hz
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a08      	ldr	r2, [pc, #32]	; (800c490 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d103      	bne.n	800c47a <HAL_TIM_PeriodElapsedCallback+0x3e>
//
//		adcSetChannel(&hadc1, ADC_CHANNEL_TEMPSENSOR);
//		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
//				+ temperatureCorrection;

		lis3mdlGetCalibrationSample(&lis3mdl);
 800c472:	4b08      	ldr	r3, [pc, #32]	; (800c494 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800c474:	0018      	movs	r0, r3
 800c476:	f000 f9cd 	bl	800c814 <lis3mdlGetCalibrationSample>

	}
}
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	46bd      	mov	sp, r7
 800c47e:	b002      	add	sp, #8
 800c480:	bd80      	pop	{r7, pc}
 800c482:	46c0      	nop			; (mov r8, r8)
 800c484:	40012c00 	.word	0x40012c00
 800c488:	20000600 	.word	0x20000600
 800c48c:	20000180 	.word	0x20000180
 800c490:	40000400 	.word	0x40000400
 800c494:	20000350 	.word	0x20000350

0800c498 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_STANDBY_GPIO_Port, LED_STANDBY_Pin, 1);
 800c4a0:	23a0      	movs	r3, #160	; 0xa0
 800c4a2:	05db      	lsls	r3, r3, #23
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	2110      	movs	r1, #16
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f7f8 fafa 	bl	8004aa2 <HAL_GPIO_WritePin>
	status[STATUS_INT_SOURCE] = STATUS_INT_SOURCE_RTC;
 800c4ae:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	701a      	strb	r2, [r3, #0]
}
 800c4b4:	46c0      	nop			; (mov r8, r8)
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	b002      	add	sp, #8
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20000184 	.word	0x20000184

0800c4c0 <lis3mdlInit>:
 *
 * @param  I2C handler
 *
 * @retval None
 */
void lis3mdlInit(lis3mdlTypeDef *lis3mdl, I2C_HandleTypeDef *I2Chandler) {
 800c4c0:	b5b0      	push	{r4, r5, r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af04      	add	r7, sp, #16
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
	uint8_t ctrl1 = LIS3MDL_CTRL1_REG_OM << 6 | LIS3MDL_CTRL1_REG_ODR << 4;
 800c4ca:	210f      	movs	r1, #15
 800c4cc:	187b      	adds	r3, r7, r1
 800c4ce:	2240      	movs	r2, #64	; 0x40
 800c4d0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrl2 = LIS3MDL_CTRL2_REG_FS << 6;
 800c4d2:	240e      	movs	r4, #14
 800c4d4:	193b      	adds	r3, r7, r4
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	701a      	strb	r2, [r3, #0]
	uint8_t ctrl3 = LIS3MDL_CTRL3_REG_MODE_POWERDOWN;
 800c4da:	250d      	movs	r5, #13
 800c4dc:	197b      	adds	r3, r7, r5
 800c4de:	2202      	movs	r2, #2
 800c4e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG1, 1, &ctrl1, 1,
 800c4e2:	6838      	ldr	r0, [r7, #0]
 800c4e4:	2364      	movs	r3, #100	; 0x64
 800c4e6:	9302      	str	r3, [sp, #8]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	9301      	str	r3, [sp, #4]
 800c4ec:	187b      	adds	r3, r7, r1
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	2220      	movs	r2, #32
 800c4f4:	2138      	movs	r1, #56	; 0x38
 800c4f6:	f7f8 fbb1 	bl	8004c5c <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG2, 1, &ctrl2, 1,
 800c4fa:	6838      	ldr	r0, [r7, #0]
 800c4fc:	2364      	movs	r3, #100	; 0x64
 800c4fe:	9302      	str	r3, [sp, #8]
 800c500:	2301      	movs	r3, #1
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	193b      	adds	r3, r7, r4
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	2301      	movs	r3, #1
 800c50a:	2221      	movs	r2, #33	; 0x21
 800c50c:	2138      	movs	r1, #56	; 0x38
 800c50e:	f7f8 fba5 	bl	8004c5c <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1, &ctrl3, 1,
 800c512:	6838      	ldr	r0, [r7, #0]
 800c514:	2364      	movs	r3, #100	; 0x64
 800c516:	9302      	str	r3, [sp, #8]
 800c518:	2301      	movs	r3, #1
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	197b      	adds	r3, r7, r5
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	2301      	movs	r3, #1
 800c522:	2222      	movs	r2, #34	; 0x22
 800c524:	2138      	movs	r1, #56	; 0x38
 800c526:	f7f8 fb99 	bl	8004c5c <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	lis3mdl->I2Chandler = I2Chandler;
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	23a1      	movs	r3, #161	; 0xa1
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	50d1      	str	r1, [r2, r3]
}
 800c534:	46c0      	nop			; (mov r8, r8)
 800c536:	46bd      	mov	sp, r7
 800c538:	b004      	add	sp, #16
 800c53a:	bdb0      	pop	{r4, r5, r7, pc}

0800c53c <lis3mdlRead>:
 *
 * @param  LIS3MDL handler
 *
 * @retval None
 */
void lis3mdlRead(lis3mdlTypeDef *lis3mdl) {
 800c53c:	b5b0      	push	{r4, r5, r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af04      	add	r7, sp, #16
 800c542:	6078      	str	r0, [r7, #4]

	uint8_t ctrl3 = LIS3MDL_CTRL3_REG_MODE_SINGLE; //set single
 800c544:	250f      	movs	r5, #15
 800c546:	197b      	adds	r3, r7, r5
 800c548:	2201      	movs	r2, #1
 800c54a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1,
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	23a1      	movs	r3, #161	; 0xa1
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	58d0      	ldr	r0, [r2, r3]
 800c554:	2364      	movs	r3, #100	; 0x64
 800c556:	9302      	str	r3, [sp, #8]
 800c558:	2301      	movs	r3, #1
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	197b      	adds	r3, r7, r5
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	2301      	movs	r3, #1
 800c562:	2222      	movs	r2, #34	; 0x22
 800c564:	2138      	movs	r1, #56	; 0x38
 800c566:	f7f8 fb79 	bl	8004c5c <HAL_I2C_Mem_Write>
			&ctrl3, 1, LIS3MDL_I2C_TIMEOUT); //turn on
	HAL_Delay(10);
 800c56a:	200a      	movs	r0, #10
 800c56c:	f7f7 f89a 	bl	80036a4 <HAL_Delay>
	uint8_t readings[6];

	HAL_I2C_Mem_Read(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1,
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	23a1      	movs	r3, #161	; 0xa1
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	58d0      	ldr	r0, [r2, r3]
 800c578:	2364      	movs	r3, #100	; 0x64
 800c57a:	9302      	str	r3, [sp, #8]
 800c57c:	2306      	movs	r3, #6
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	2408      	movs	r4, #8
 800c582:	193b      	adds	r3, r7, r4
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	2301      	movs	r3, #1
 800c588:	2229      	movs	r2, #41	; 0x29
 800c58a:	2138      	movs	r1, #56	; 0x38
 800c58c:	f7f8 fc94 	bl	8004eb8 <HAL_I2C_Mem_Read>
			readings, 6, LIS3MDL_I2C_TIMEOUT); //read

	ctrl3 = LIS3MDL_CTRL3_REG_MODE_POWERDOWN; //set power down
 800c590:	197b      	adds	r3, r7, r5
 800c592:	2202      	movs	r2, #2
 800c594:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1,
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	23a1      	movs	r3, #161	; 0xa1
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	58d0      	ldr	r0, [r2, r3]
 800c59e:	2364      	movs	r3, #100	; 0x64
 800c5a0:	9302      	str	r3, [sp, #8]
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	197b      	adds	r3, r7, r5
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	2222      	movs	r2, #34	; 0x22
 800c5ae:	2138      	movs	r1, #56	; 0x38
 800c5b0:	f7f8 fb54 	bl	8004c5c <HAL_I2C_Mem_Write>
			&ctrl3, 1, LIS3MDL_I2C_TIMEOUT); //turn off

	lis3mdl->xValue = (uint16_t) readings[0] << 8 | readings[1];
 800c5b4:	0021      	movs	r1, r4
 800c5b6:	187b      	adds	r3, r7, r1
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	021b      	lsls	r3, r3, #8
 800c5bc:	b21a      	sxth	r2, r3
 800c5be:	187b      	adds	r3, r7, r1
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	b21b      	sxth	r3, r3
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	b21a      	sxth	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	801a      	strh	r2, [r3, #0]
	lis3mdl->yValue = (uint16_t) readings[2] << 8 | readings[3];
 800c5cc:	187b      	adds	r3, r7, r1
 800c5ce:	789b      	ldrb	r3, [r3, #2]
 800c5d0:	021b      	lsls	r3, r3, #8
 800c5d2:	b21a      	sxth	r2, r3
 800c5d4:	187b      	adds	r3, r7, r1
 800c5d6:	78db      	ldrb	r3, [r3, #3]
 800c5d8:	b21b      	sxth	r3, r3
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	b21a      	sxth	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	805a      	strh	r2, [r3, #2]
	lis3mdl->zValue = (uint16_t) readings[4] << 8 | readings[5];
 800c5e2:	187b      	adds	r3, r7, r1
 800c5e4:	791b      	ldrb	r3, [r3, #4]
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	b21a      	sxth	r2, r3
 800c5ea:	187b      	adds	r3, r7, r1
 800c5ec:	795b      	ldrb	r3, [r3, #5]
 800c5ee:	b21b      	sxth	r3, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	b21a      	sxth	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	809a      	strh	r2, [r3, #4]

	//search for max and min values in conatainer
	lis3mdl->xMax = findMax(lis3mdl->xValueContainter,
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	330e      	adds	r3, #14
 800c5fc:	2164      	movs	r1, #100	; 0x64
 800c5fe:	0018      	movs	r0, r3
 800c600:	f000 f946 	bl	800c890 <findMax>
 800c604:	0003      	movs	r3, r0
 800c606:	0019      	movs	r1, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a7d      	ldr	r2, [pc, #500]	; (800c800 <lis3mdlRead+0x2c4>)
 800c60c:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->yMax = findMax(lis3mdl->yValueContainter,
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	33d6      	adds	r3, #214	; 0xd6
 800c612:	2164      	movs	r1, #100	; 0x64
 800c614:	0018      	movs	r0, r3
 800c616:	f000 f93b 	bl	800c890 <findMax>
 800c61a:	0003      	movs	r3, r0
 800c61c:	0019      	movs	r1, r3
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	239a      	movs	r3, #154	; 0x9a
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->zMax = findMax(lis3mdl->zValueContainter,
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	339f      	adds	r3, #159	; 0x9f
 800c62a:	33ff      	adds	r3, #255	; 0xff
 800c62c:	2164      	movs	r1, #100	; 0x64
 800c62e:	0018      	movs	r0, r3
 800c630:	f000 f92e 	bl	800c890 <findMax>
 800c634:	0003      	movs	r3, r0
 800c636:	0019      	movs	r1, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a72      	ldr	r2, [pc, #456]	; (800c804 <lis3mdlRead+0x2c8>)
 800c63c:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);

	lis3mdl->xMin = findMin(lis3mdl->xValueContainter,
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	330e      	adds	r3, #14
 800c642:	2164      	movs	r1, #100	; 0x64
 800c644:	0018      	movs	r0, r3
 800c646:	f000 f957 	bl	800c8f8 <findMin>
 800c64a:	0003      	movs	r3, r0
 800c64c:	0019      	movs	r1, r3
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	239b      	movs	r3, #155	; 0x9b
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->yMin = findMin(lis3mdl->yValueContainter,
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	33d6      	adds	r3, #214	; 0xd6
 800c65a:	2164      	movs	r1, #100	; 0x64
 800c65c:	0018      	movs	r0, r3
 800c65e:	f000 f94b 	bl	800c8f8 <findMin>
 800c662:	0003      	movs	r3, r0
 800c664:	0019      	movs	r1, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a67      	ldr	r2, [pc, #412]	; (800c808 <lis3mdlRead+0x2cc>)
 800c66a:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->zMin = findMin(lis3mdl->zValueContainter,
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	339f      	adds	r3, #159	; 0x9f
 800c670:	33ff      	adds	r3, #255	; 0xff
 800c672:	2164      	movs	r1, #100	; 0x64
 800c674:	0018      	movs	r0, r3
 800c676:	f000 f93f 	bl	800c8f8 <findMin>
 800c67a:	0003      	movs	r3, r0
 800c67c:	0019      	movs	r1, r3
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	239c      	movs	r3, #156	; 0x9c
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);

	//count mid values
	lis3mdl->xMid = (lis3mdl->xMax + lis3mdl->xMin) / 2;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a5d      	ldr	r2, [pc, #372]	; (800c800 <lis3mdlRead+0x2c4>)
 800c68a:	5e9b      	ldrsh	r3, [r3, r2]
 800c68c:	0019      	movs	r1, r3
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	239b      	movs	r3, #155	; 0x9b
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	5ed3      	ldrsh	r3, [r2, r3]
 800c696:	18cb      	adds	r3, r1, r3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	da00      	bge.n	800c69e <lis3mdlRead+0x162>
 800c69c:	3301      	adds	r3, #1
 800c69e:	105b      	asrs	r3, r3, #1
 800c6a0:	b219      	sxth	r1, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a59      	ldr	r2, [pc, #356]	; (800c80c <lis3mdlRead+0x2d0>)
 800c6a6:	5299      	strh	r1, [r3, r2]
	lis3mdl->yMid = (lis3mdl->yMax + lis3mdl->yMin) / 2;
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	239a      	movs	r3, #154	; 0x9a
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	5ed3      	ldrsh	r3, [r2, r3]
 800c6b0:	0019      	movs	r1, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a54      	ldr	r2, [pc, #336]	; (800c808 <lis3mdlRead+0x2cc>)
 800c6b6:	5e9b      	ldrsh	r3, [r3, r2]
 800c6b8:	18cb      	adds	r3, r1, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	da00      	bge.n	800c6c0 <lis3mdlRead+0x184>
 800c6be:	3301      	adds	r3, #1
 800c6c0:	105b      	asrs	r3, r3, #1
 800c6c2:	b219      	sxth	r1, r3
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	239d      	movs	r3, #157	; 0x9d
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	52d1      	strh	r1, [r2, r3]
	lis3mdl->zMid = (lis3mdl->zMax + lis3mdl->zMin) / 2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a4d      	ldr	r2, [pc, #308]	; (800c804 <lis3mdlRead+0x2c8>)
 800c6d0:	5e9b      	ldrsh	r3, [r3, r2]
 800c6d2:	0019      	movs	r1, r3
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	239c      	movs	r3, #156	; 0x9c
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	5ed3      	ldrsh	r3, [r2, r3]
 800c6dc:	18cb      	adds	r3, r1, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	da00      	bge.n	800c6e4 <lis3mdlRead+0x1a8>
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	105b      	asrs	r3, r3, #1
 800c6e6:	b219      	sxth	r1, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a49      	ldr	r2, [pc, #292]	; (800c810 <lis3mdlRead+0x2d4>)
 800c6ec:	5299      	strh	r1, [r3, r2]

	//correct measurement with calibration data
	lis3mdl->xCalibrated = lis3mdl->xValue - lis3mdl->xMid;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	5e9b      	ldrsh	r3, [r3, r2]
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4944      	ldr	r1, [pc, #272]	; (800c80c <lis3mdlRead+0x2d0>)
 800c6fa:	5e5b      	ldrsh	r3, [r3, r1]
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	b29b      	uxth	r3, r3
 800c702:	b21a      	sxth	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	80da      	strh	r2, [r3, #6]
	lis3mdl->yCalibrated = lis3mdl->yValue - lis3mdl->yMid;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	5e9b      	ldrsh	r3, [r3, r2]
 800c70e:	b29a      	uxth	r2, r3
 800c710:	6879      	ldr	r1, [r7, #4]
 800c712:	239d      	movs	r3, #157	; 0x9d
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	5ecb      	ldrsh	r3, [r1, r3]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	b21a      	sxth	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	811a      	strh	r2, [r3, #8]
	lis3mdl->zCalibrated = lis3mdl->zValue - lis3mdl->zMid;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2204      	movs	r2, #4
 800c728:	5e9b      	ldrsh	r3, [r3, r2]
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4938      	ldr	r1, [pc, #224]	; (800c810 <lis3mdlRead+0x2d4>)
 800c730:	5e5b      	ldrsh	r3, [r3, r1]
 800c732:	b29b      	uxth	r3, r3
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	b29b      	uxth	r3, r3
 800c738:	b21a      	sxth	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	815a      	strh	r2, [r3, #10]

	lis3mdl->compassAngleXY = atan2((double) lis3mdl->yCalibrated,
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2208      	movs	r2, #8
 800c742:	5e9b      	ldrsh	r3, [r3, r2]
 800c744:	0018      	movs	r0, r3
 800c746:	f7f6 fbf9 	bl	8002f3c <__aeabi_i2d>
 800c74a:	0004      	movs	r4, r0
 800c74c:	000d      	movs	r5, r1
			(double) lis3mdl->xCalibrated);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2206      	movs	r2, #6
 800c752:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleXY = atan2((double) lis3mdl->yCalibrated,
 800c754:	0018      	movs	r0, r3
 800c756:	f7f6 fbf1 	bl	8002f3c <__aeabi_i2d>
 800c75a:	0002      	movs	r2, r0
 800c75c:	000b      	movs	r3, r1
 800c75e:	0020      	movs	r0, r4
 800c760:	0029      	movs	r1, r5
 800c762:	f003 f91d 	bl	800f9a0 <atan2>
 800c766:	0002      	movs	r2, r0
 800c768:	000b      	movs	r3, r1
 800c76a:	0010      	movs	r0, r2
 800c76c:	0019      	movs	r1, r3
 800c76e:	f7f6 fc83 	bl	8003078 <__aeabi_d2f>
 800c772:	1c01      	adds	r1, r0, #0
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	239e      	movs	r3, #158	; 0x9e
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	50d1      	str	r1, [r2, r3]
	lis3mdl->compassAngleXZ = atan2((double) lis3mdl->zCalibrated,
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	220a      	movs	r2, #10
 800c780:	5e9b      	ldrsh	r3, [r3, r2]
 800c782:	0018      	movs	r0, r3
 800c784:	f7f6 fbda 	bl	8002f3c <__aeabi_i2d>
 800c788:	0004      	movs	r4, r0
 800c78a:	000d      	movs	r5, r1
			(double) lis3mdl->xCalibrated);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2206      	movs	r2, #6
 800c790:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleXZ = atan2((double) lis3mdl->zCalibrated,
 800c792:	0018      	movs	r0, r3
 800c794:	f7f6 fbd2 	bl	8002f3c <__aeabi_i2d>
 800c798:	0002      	movs	r2, r0
 800c79a:	000b      	movs	r3, r1
 800c79c:	0020      	movs	r0, r4
 800c79e:	0029      	movs	r1, r5
 800c7a0:	f003 f8fe 	bl	800f9a0 <atan2>
 800c7a4:	0002      	movs	r2, r0
 800c7a6:	000b      	movs	r3, r1
 800c7a8:	0010      	movs	r0, r2
 800c7aa:	0019      	movs	r1, r3
 800c7ac:	f7f6 fc64 	bl	8003078 <__aeabi_d2f>
 800c7b0:	1c01      	adds	r1, r0, #0
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	239f      	movs	r3, #159	; 0x9f
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	50d1      	str	r1, [r2, r3]
	lis3mdl->compassAngleYZ = atan2((double) lis3mdl->zCalibrated,
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	220a      	movs	r2, #10
 800c7be:	5e9b      	ldrsh	r3, [r3, r2]
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	f7f6 fbbb 	bl	8002f3c <__aeabi_i2d>
 800c7c6:	0004      	movs	r4, r0
 800c7c8:	000d      	movs	r5, r1
			(double) lis3mdl->yCalibrated);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2208      	movs	r2, #8
 800c7ce:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleYZ = atan2((double) lis3mdl->zCalibrated,
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f7f6 fbb3 	bl	8002f3c <__aeabi_i2d>
 800c7d6:	0002      	movs	r2, r0
 800c7d8:	000b      	movs	r3, r1
 800c7da:	0020      	movs	r0, r4
 800c7dc:	0029      	movs	r1, r5
 800c7de:	f003 f8df 	bl	800f9a0 <atan2>
 800c7e2:	0002      	movs	r2, r0
 800c7e4:	000b      	movs	r3, r1
 800c7e6:	0010      	movs	r0, r2
 800c7e8:	0019      	movs	r1, r3
 800c7ea:	f7f6 fc45 	bl	8003078 <__aeabi_d2f>
 800c7ee:	1c01      	adds	r1, r0, #0
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	23a0      	movs	r3, #160	; 0xa0
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	50d1      	str	r1, [r2, r3]

}
 800c7f8:	46c0      	nop			; (mov r8, r8)
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	b004      	add	sp, #16
 800c7fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c800:	00000266 	.word	0x00000266
 800c804:	0000026a 	.word	0x0000026a
 800c808:	0000026e 	.word	0x0000026e
 800c80c:	00000272 	.word	0x00000272
 800c810:	00000276 	.word	0x00000276

0800c814 <lis3mdlGetCalibrationSample>:
 *
 * @param  LIS3MDL handler
 *
 * @retval None
 */
void lis3mdlGetCalibrationSample(lis3mdlTypeDef *lis3mdl) {
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

	//store actual values into calibration containter
	lis3mdl->xValueContainter[lis3mdl->measurementCounter] = lis3mdl->xValue;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	899b      	ldrh	r3, [r3, #12]
 800c820:	0018      	movs	r0, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2100      	movs	r1, #0
 800c826:	5e59      	ldrsh	r1, [r3, r1]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	1d03      	adds	r3, r0, #4
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	18d3      	adds	r3, r2, r3
 800c830:	3306      	adds	r3, #6
 800c832:	1c0a      	adds	r2, r1, #0
 800c834:	801a      	strh	r2, [r3, #0]
	lis3mdl->yValueContainter[lis3mdl->measurementCounter] = lis3mdl->yValue;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	899b      	ldrh	r3, [r3, #12]
 800c83a:	0018      	movs	r0, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2102      	movs	r1, #2
 800c840:	5e59      	ldrsh	r1, [r3, r1]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	0003      	movs	r3, r0
 800c846:	3368      	adds	r3, #104	; 0x68
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	18d3      	adds	r3, r2, r3
 800c84c:	3306      	adds	r3, #6
 800c84e:	1c0a      	adds	r2, r1, #0
 800c850:	801a      	strh	r2, [r3, #0]
	lis3mdl->zValueContainter[lis3mdl->measurementCounter] = lis3mdl->zValue;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	899b      	ldrh	r3, [r3, #12]
 800c856:	0018      	movs	r0, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2104      	movs	r1, #4
 800c85c:	5e59      	ldrsh	r1, [r3, r1]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	0003      	movs	r3, r0
 800c862:	33cc      	adds	r3, #204	; 0xcc
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	18d3      	adds	r3, r2, r3
 800c868:	3306      	adds	r3, #6
 800c86a:	1c0a      	adds	r2, r1, #0
 800c86c:	801a      	strh	r2, [r3, #0]

	//increment counter of actually readed value
	lis3mdl->measurementCounter++;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	899b      	ldrh	r3, [r3, #12]
 800c872:	3301      	adds	r3, #1
 800c874:	b29a      	uxth	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	819a      	strh	r2, [r3, #12]
	if (lis3mdl->measurementCounter > (LIS3MDL_CONTAINER_SIZE - 1))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	899b      	ldrh	r3, [r3, #12]
 800c87e:	2b63      	cmp	r3, #99	; 0x63
 800c880:	d902      	bls.n	800c888 <lis3mdlGetCalibrationSample+0x74>
		lis3mdl->measurementCounter = 0;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	819a      	strh	r2, [r3, #12]
}
 800c888:	46c0      	nop			; (mov r8, r8)
 800c88a:	46bd      	mov	sp, r7
 800c88c:	b002      	add	sp, #8
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	000a      	movs	r2, r1
 800c89a:	1cbb      	adds	r3, r7, #2
 800c89c:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 800c89e:	230e      	movs	r3, #14
 800c8a0:	18fb      	adds	r3, r7, r3
 800c8a2:	4a14      	ldr	r2, [pc, #80]	; (800c8f4 <findMax+0x64>)
 800c8a4:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60bb      	str	r3, [r7, #8]
 800c8aa:	e015      	b.n	800c8d8 <findMax+0x48>
		if (data[i] > max)
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	18d3      	adds	r3, r2, r3
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	5e9b      	ldrsh	r3, [r3, r2]
 800c8b8:	210e      	movs	r1, #14
 800c8ba:	187a      	adds	r2, r7, r1
 800c8bc:	2000      	movs	r0, #0
 800c8be:	5e12      	ldrsh	r2, [r2, r0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	da06      	bge.n	800c8d2 <findMax+0x42>
			max = data[i];
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	18d2      	adds	r2, r2, r3
 800c8cc:	187b      	adds	r3, r7, r1
 800c8ce:	8812      	ldrh	r2, [r2, #0]
 800c8d0:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	60bb      	str	r3, [r7, #8]
 800c8d8:	1cbb      	adds	r3, r7, #2
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d3e4      	bcc.n	800c8ac <findMax+0x1c>
	}

	return max;
 800c8e2:	230e      	movs	r3, #14
 800c8e4:	18fb      	adds	r3, r7, r3
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	5e9b      	ldrsh	r3, [r3, r2]

}
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	b004      	add	sp, #16
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	46c0      	nop			; (mov r8, r8)
 800c8f4:	ffff8000 	.word	0xffff8000

0800c8f8 <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	000a      	movs	r2, r1
 800c902:	1cbb      	adds	r3, r7, #2
 800c904:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 800c906:	230e      	movs	r3, #14
 800c908:	18fb      	adds	r3, r7, r3
 800c90a:	4a14      	ldr	r2, [pc, #80]	; (800c95c <findMin+0x64>)
 800c90c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800c90e:	2300      	movs	r3, #0
 800c910:	60bb      	str	r3, [r7, #8]
 800c912:	e015      	b.n	800c940 <findMin+0x48>
		if (data[i] < min)
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	005b      	lsls	r3, r3, #1
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	18d3      	adds	r3, r2, r3
 800c91c:	2200      	movs	r2, #0
 800c91e:	5e9b      	ldrsh	r3, [r3, r2]
 800c920:	210e      	movs	r1, #14
 800c922:	187a      	adds	r2, r7, r1
 800c924:	2000      	movs	r0, #0
 800c926:	5e12      	ldrsh	r2, [r2, r0]
 800c928:	429a      	cmp	r2, r3
 800c92a:	dd06      	ble.n	800c93a <findMin+0x42>
			min = data[i];
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	18d2      	adds	r2, r2, r3
 800c934:	187b      	adds	r3, r7, r1
 800c936:	8812      	ldrh	r2, [r2, #0]
 800c938:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	3301      	adds	r3, #1
 800c93e:	60bb      	str	r3, [r7, #8]
 800c940:	1cbb      	adds	r3, r7, #2
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	429a      	cmp	r2, r3
 800c948:	d3e4      	bcc.n	800c914 <findMin+0x1c>
	}

	return min;
 800c94a:	230e      	movs	r3, #14
 800c94c:	18fb      	adds	r3, r7, r3
 800c94e:	2200      	movs	r2, #0
 800c950:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c952:	0018      	movs	r0, r3
 800c954:	46bd      	mov	sp, r7
 800c956:	b004      	add	sp, #16
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	00007fff 	.word	0x00007fff

0800c960 <LL_CRC_SetPolynomialSize>:
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	2218      	movs	r2, #24
 800c970:	4393      	bics	r3, r2
 800c972:	001a      	movs	r2, r3
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	431a      	orrs	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	609a      	str	r2, [r3, #8]
}
 800c97c:	46c0      	nop			; (mov r8, r8)
 800c97e:	46bd      	mov	sp, r7
 800c980:	b002      	add	sp, #8
 800c982:	bd80      	pop	{r7, pc}

0800c984 <LL_CRC_SetInputDataReverseMode>:
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	2260      	movs	r2, #96	; 0x60
 800c994:	4393      	bics	r3, r2
 800c996:	001a      	movs	r2, r3
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	431a      	orrs	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	609a      	str	r2, [r3, #8]
}
 800c9a0:	46c0      	nop			; (mov r8, r8)
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <LL_CRC_SetOutputDataReverseMode>:
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	2280      	movs	r2, #128	; 0x80
 800c9b8:	4393      	bics	r3, r2
 800c9ba:	001a      	movs	r2, r3
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	431a      	orrs	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	609a      	str	r2, [r3, #8]
}
 800c9c4:	46c0      	nop			; (mov r8, r8)
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	b002      	add	sp, #8
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <LL_CRC_SetInitialData>:
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	611a      	str	r2, [r3, #16]
}
 800c9dc:	46c0      	nop			; (mov r8, r8)
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	b002      	add	sp, #8
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <LL_CRC_SetPolynomialCoef>:
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	615a      	str	r2, [r3, #20]
}
 800c9f4:	46c0      	nop			; (mov r8, r8)
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	b002      	add	sp, #8
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <LL_AHB1_GRP1_EnableClock>:
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800ca04:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ca06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ca08:	4b06      	ldr	r3, [pc, #24]	; (800ca24 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	430a      	orrs	r2, r1
 800ca0e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ca12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	4013      	ands	r3, r2
 800ca18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	46c0      	nop			; (mov r8, r8)
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	b004      	add	sp, #16
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	40021000 	.word	0x40021000

0800ca28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b096      	sub	sp, #88	; 0x58
 800ca2c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ca2e:	f7f6 fdb3 	bl	8003598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ca32:	f000 fa69 	bl	800cf08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ca36:	f000 fd7d 	bl	800d534 <MX_GPIO_Init>
  MX_TIM1_Init();
 800ca3a:	f000 fc23 	bl	800d284 <MX_TIM1_Init>
  MX_TIM2_Init();
 800ca3e:	f000 fc7d 	bl	800d33c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800ca42:	f000 fd29 	bl	800d498 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800ca46:	f000 fba7 	bl	800d198 <MX_RTC_Init>
  MX_ADC1_Init();
 800ca4a:	f000 fac9 	bl	800cfe0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800ca4e:	f000 fccb 	bl	800d3e8 <MX_TIM3_Init>
  MX_I2C1_Init();
 800ca52:	f000 fb61 	bl	800d118 <MX_I2C1_Init>
  MX_CRC_Init();
 800ca56:	f000 fb35 	bl	800d0c4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 800ca5a:	4bfa      	ldr	r3, [pc, #1000]	; (800ce44 <main+0x41c>)
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f7fa f9db 	bl	8006e18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800ca62:	4bf9      	ldr	r3, [pc, #996]	; (800ce48 <main+0x420>)
 800ca64:	0018      	movs	r0, r3
 800ca66:	f7fa f9d7 	bl	8006e18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800ca6a:	4bf8      	ldr	r3, [pc, #992]	; (800ce4c <main+0x424>)
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f7fa f9d3 	bl	8006e18 <HAL_TIM_Base_Start_IT>

	adcInit(&hadc1);
 800ca72:	4bf7      	ldr	r3, [pc, #988]	; (800ce50 <main+0x428>)
 800ca74:	0018      	movs	r0, r3
 800ca76:	f7fc faab 	bl	8008fd0 <adcInit>
	temperatureCorrection = -7;
 800ca7a:	4bf6      	ldr	r3, [pc, #984]	; (800ce54 <main+0x42c>)
 800ca7c:	2207      	movs	r2, #7
 800ca7e:	4252      	negs	r2, r2
 800ca80:	601a      	str	r2, [r3, #0]
	bme280.pressureReference = 1013;
 800ca82:	4bf5      	ldr	r3, [pc, #980]	; (800ce58 <main+0x430>)
 800ca84:	4af5      	ldr	r2, [pc, #980]	; (800ce5c <main+0x434>)
 800ca86:	615a      	str	r2, [r3, #20]

//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 800ca88:	4af5      	ldr	r2, [pc, #980]	; (800ce60 <main+0x438>)
 800ca8a:	23a0      	movs	r3, #160	; 0xa0
 800ca8c:	05d9      	lsls	r1, r3, #23
 800ca8e:	48f5      	ldr	r0, [pc, #980]	; (800ce64 <main+0x43c>)
 800ca90:	2380      	movs	r3, #128	; 0x80
 800ca92:	011b      	lsls	r3, r3, #4
 800ca94:	9314      	str	r3, [sp, #80]	; 0x50
 800ca96:	23a0      	movs	r3, #160	; 0xa0
 800ca98:	05db      	lsls	r3, r3, #23
 800ca9a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca9c:	2380      	movs	r3, #128	; 0x80
 800ca9e:	021b      	lsls	r3, r3, #8
 800caa0:	9312      	str	r3, [sp, #72]	; 0x48
 800caa2:	23a0      	movs	r3, #160	; 0xa0
 800caa4:	05db      	lsls	r3, r3, #23
 800caa6:	9311      	str	r3, [sp, #68]	; 0x44
 800caa8:	2301      	movs	r3, #1
 800caaa:	9310      	str	r3, [sp, #64]	; 0x40
 800caac:	4bec      	ldr	r3, [pc, #944]	; (800ce60 <main+0x438>)
 800caae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab0:	2340      	movs	r3, #64	; 0x40
 800cab2:	930e      	str	r3, [sp, #56]	; 0x38
 800cab4:	4bec      	ldr	r3, [pc, #944]	; (800ce68 <main+0x440>)
 800cab6:	930d      	str	r3, [sp, #52]	; 0x34
 800cab8:	2380      	movs	r3, #128	; 0x80
 800caba:	00db      	lsls	r3, r3, #3
 800cabc:	930c      	str	r3, [sp, #48]	; 0x30
 800cabe:	23a0      	movs	r3, #160	; 0xa0
 800cac0:	05db      	lsls	r3, r3, #23
 800cac2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac4:	2380      	movs	r3, #128	; 0x80
 800cac6:	015b      	lsls	r3, r3, #5
 800cac8:	930a      	str	r3, [sp, #40]	; 0x28
 800caca:	23a0      	movs	r3, #160	; 0xa0
 800cacc:	05db      	lsls	r3, r3, #23
 800cace:	9309      	str	r3, [sp, #36]	; 0x24
 800cad0:	2380      	movs	r3, #128	; 0x80
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	9308      	str	r3, [sp, #32]
 800cad6:	23a0      	movs	r3, #160	; 0xa0
 800cad8:	05db      	lsls	r3, r3, #23
 800cada:	9307      	str	r3, [sp, #28]
 800cadc:	2380      	movs	r3, #128	; 0x80
 800cade:	9306      	str	r3, [sp, #24]
 800cae0:	23a0      	movs	r3, #160	; 0xa0
 800cae2:	05db      	lsls	r3, r3, #23
 800cae4:	9305      	str	r3, [sp, #20]
 800cae6:	2380      	movs	r3, #128	; 0x80
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	23a0      	movs	r3, #160	; 0xa0
 800caee:	05db      	lsls	r3, r3, #23
 800caf0:	9303      	str	r3, [sp, #12]
 800caf2:	2304      	movs	r3, #4
 800caf4:	9302      	str	r3, [sp, #8]
 800caf6:	4bda      	ldr	r3, [pc, #872]	; (800ce60 <main+0x438>)
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	2302      	movs	r3, #2
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	0013      	movs	r3, r2
 800cb00:	2240      	movs	r2, #64	; 0x40
 800cb02:	f7fc f949 	bl	8008d98 <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "    ");
 800cb06:	4ad9      	ldr	r2, [pc, #868]	; (800ce6c <main+0x444>)
 800cb08:	4bd6      	ldr	r3, [pc, #856]	; (800ce64 <main+0x43c>)
 800cb0a:	0011      	movs	r1, r2
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f7fc f9c3 	bl	8008e98 <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 800cb12:	48d7      	ldr	r0, [pc, #860]	; (800ce70 <main+0x448>)
 800cb14:	2301      	movs	r3, #1
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	23ff      	movs	r3, #255	; 0xff
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2100      	movs	r1, #0
 800cb22:	f000 ff47 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, CHRONO_HUNDREDTHS,
 800cb26:	48d2      	ldr	r0, [pc, #840]	; (800ce70 <main+0x448>)
 800cb28:	2304      	movs	r3, #4
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	23ff      	movs	r3, #255	; 0xff
 800cb32:	2200      	movs	r2, #0
 800cb34:	2101      	movs	r1, #1
 800cb36:	f000 ff3d 	bl	800d9b4 <menuItemInit>
	CHRONO_RESET);
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800cb3a:	48cd      	ldr	r0, [pc, #820]	; (800ce70 <main+0x448>)
 800cb3c:	23ff      	movs	r3, #255	; 0xff
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	23ff      	movs	r3, #255	; 0xff
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	23ff      	movs	r3, #255	; 0xff
 800cb46:	2200      	movs	r2, #0
 800cb48:	2103      	movs	r1, #3
 800cb4a:	f000 ff33 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800cb4e:	48c8      	ldr	r0, [pc, #800]	; (800ce70 <main+0x448>)
 800cb50:	23ff      	movs	r3, #255	; 0xff
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	23ff      	movs	r3, #255	; 0xff
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	23ff      	movs	r3, #255	; 0xff
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	f000 ff29 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800cb62:	48c3      	ldr	r0, [pc, #780]	; (800ce70 <main+0x448>)
 800cb64:	23ff      	movs	r3, #255	; 0xff
 800cb66:	9301      	str	r3, [sp, #4]
 800cb68:	23ff      	movs	r3, #255	; 0xff
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	23ff      	movs	r3, #255	; 0xff
 800cb6e:	2200      	movs	r2, #0
 800cb70:	2102      	movs	r1, #2
 800cb72:	f000 ff1f 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800cb76:	48be      	ldr	r0, [pc, #760]	; (800ce70 <main+0x448>)
 800cb78:	23ff      	movs	r3, #255	; 0xff
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	23ff      	movs	r3, #255	; 0xff
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	23ff      	movs	r3, #255	; 0xff
 800cb82:	2200      	movs	r2, #0
 800cb84:	2105      	movs	r1, #5
 800cb86:	f000 ff15 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, COMPASS, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800cb8a:	48b9      	ldr	r0, [pc, #740]	; (800ce70 <main+0x448>)
 800cb8c:	23ff      	movs	r3, #255	; 0xff
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	23ff      	movs	r3, #255	; 0xff
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	23ff      	movs	r3, #255	; 0xff
 800cb96:	2200      	movs	r2, #0
 800cb98:	2106      	movs	r1, #6
 800cb9a:	f000 ff0b 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, SETTINGS_CLOCK,
 800cb9e:	48b4      	ldr	r0, [pc, #720]	; (800ce70 <main+0x448>)
 800cba0:	230a      	movs	r3, #10
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	2306      	movs	r3, #6
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	23ff      	movs	r3, #255	; 0xff
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2107      	movs	r1, #7
 800cbae:	f000 ff01 	bl	800d9b4 <menuItemInit>
	SETTINGS_SAVE);

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 800cbb2:	48af      	ldr	r0, [pc, #700]	; (800ce70 <main+0x448>)
 800cbb4:	23ff      	movs	r3, #255	; 0xff
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	23ff      	movs	r3, #255	; 0xff
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	f000 fef7 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 800cbc6:	48aa      	ldr	r0, [pc, #680]	; (800ce70 <main+0x448>)
 800cbc8:	23ff      	movs	r3, #255	; 0xff
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	23ff      	movs	r3, #255	; 0xff
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	f000 feed 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, CHRONO_HUNDREDTHS, 1, CHRONO, MENU_NONE, MENU_NONE);
 800cbda:	48a5      	ldr	r0, [pc, #660]	; (800ce70 <main+0x448>)
 800cbdc:	23ff      	movs	r3, #255	; 0xff
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	23ff      	movs	r3, #255	; 0xff
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	2102      	movs	r1, #2
 800cbea:	f000 fee3 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 800cbee:	48a0      	ldr	r0, [pc, #640]	; (800ce70 <main+0x448>)
 800cbf0:	23ff      	movs	r3, #255	; 0xff
 800cbf2:	9301      	str	r3, [sp, #4]
 800cbf4:	23ff      	movs	r3, #255	; 0xff
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	2103      	movs	r1, #3
 800cbfe:	f000 fed9 	bl	800d9b4 <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 800cc02:	489b      	ldr	r0, [pc, #620]	; (800ce70 <main+0x448>)
 800cc04:	23ff      	movs	r3, #255	; 0xff
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	23ff      	movs	r3, #255	; 0xff
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	2201      	movs	r2, #1
 800cc10:	2104      	movs	r1, #4
 800cc12:	f000 fecf 	bl	800d9b4 <menuItemInit>

	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, SETTINGS_CLOCK_HOUR,
 800cc16:	4896      	ldr	r0, [pc, #600]	; (800ce70 <main+0x448>)
 800cc18:	2302      	movs	r3, #2
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	2307      	movs	r3, #7
 800cc22:	2201      	movs	r2, #1
 800cc24:	2106      	movs	r1, #6
 800cc26:	f000 fec5 	bl	800d9b4 <menuItemInit>
	SETTINGS_CLOCK_SECONDS);
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS,
 800cc2a:	4891      	ldr	r0, [pc, #580]	; (800ce70 <main+0x448>)
 800cc2c:	2305      	movs	r3, #5
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	2303      	movs	r3, #3
 800cc32:	9300      	str	r3, [sp, #0]
 800cc34:	2307      	movs	r3, #7
 800cc36:	2201      	movs	r2, #1
 800cc38:	2107      	movs	r1, #7
 800cc3a:	f000 febb 	bl	800d9b4 <menuItemInit>
	SETTINGS_CALENDAR_DAY,
	SETTINGS_CALENDAR_YEAR);
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS,
 800cc3e:	488c      	ldr	r0, [pc, #560]	; (800ce70 <main+0x448>)
 800cc40:	2306      	movs	r3, #6
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	2306      	movs	r3, #6
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	2307      	movs	r3, #7
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	2108      	movs	r1, #8
 800cc4e:	f000 feb1 	bl	800d9b4 <menuItemInit>
	SETTINGS_CORRECTION_VALUE,
	SETTINGS_CORRECTION_VALUE);
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS,
 800cc52:	4887      	ldr	r0, [pc, #540]	; (800ce70 <main+0x448>)
 800cc54:	2307      	movs	r3, #7
 800cc56:	9301      	str	r3, [sp, #4]
 800cc58:	2307      	movs	r3, #7
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	2307      	movs	r3, #7
 800cc5e:	2201      	movs	r2, #1
 800cc60:	2109      	movs	r1, #9
 800cc62:	f000 fea7 	bl	800d9b4 <menuItemInit>
	SETTINGS_REFERENCE_VALUE,
	SETTINGS_REFERENCE_VALUE);
	menuItemInit(&menu, SETTINGS_SAVE, 1, SETTINGS,
 800cc66:	4882      	ldr	r0, [pc, #520]	; (800ce70 <main+0x448>)
 800cc68:	23ff      	movs	r3, #255	; 0xff
 800cc6a:	9301      	str	r3, [sp, #4]
 800cc6c:	23ff      	movs	r3, #255	; 0xff
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	2307      	movs	r3, #7
 800cc72:	2201      	movs	r2, #1
 800cc74:	210a      	movs	r1, #10
 800cc76:	f000 fe9d 	bl	800d9b4 <menuItemInit>
	MENU_NONE,
	MENU_NONE);

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOUR, 2, SETTINGS_CLOCK, MENU_NONE,
 800cc7a:	487d      	ldr	r0, [pc, #500]	; (800ce70 <main+0x448>)
 800cc7c:	23ff      	movs	r3, #255	; 0xff
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	23ff      	movs	r3, #255	; 0xff
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	2306      	movs	r3, #6
 800cc86:	2202      	movs	r2, #2
 800cc88:	2100      	movs	r1, #0
 800cc8a:	f000 fe93 	bl	800d9b4 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_MINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 800cc8e:	4878      	ldr	r0, [pc, #480]	; (800ce70 <main+0x448>)
 800cc90:	23ff      	movs	r3, #255	; 0xff
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	23ff      	movs	r3, #255	; 0xff
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	2306      	movs	r3, #6
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	f000 fe89 	bl	800d9b4 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK,
 800cca2:	4873      	ldr	r0, [pc, #460]	; (800ce70 <main+0x448>)
 800cca4:	23ff      	movs	r3, #255	; 0xff
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	23ff      	movs	r3, #255	; 0xff
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	2306      	movs	r3, #6
 800ccae:	2202      	movs	r2, #2
 800ccb0:	2102      	movs	r1, #2
 800ccb2:	f000 fe7f 	bl	800d9b4 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAY, 2, SETTINGS_CALENDAR,
 800ccb6:	486e      	ldr	r0, [pc, #440]	; (800ce70 <main+0x448>)
 800ccb8:	23ff      	movs	r3, #255	; 0xff
 800ccba:	9301      	str	r3, [sp, #4]
 800ccbc:	23ff      	movs	r3, #255	; 0xff
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	2307      	movs	r3, #7
 800ccc2:	2202      	movs	r2, #2
 800ccc4:	2103      	movs	r1, #3
 800ccc6:	f000 fe75 	bl	800d9b4 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_MONTH, 2, SETTINGS_CALENDAR,
 800ccca:	4869      	ldr	r0, [pc, #420]	; (800ce70 <main+0x448>)
 800cccc:	23ff      	movs	r3, #255	; 0xff
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	23ff      	movs	r3, #255	; 0xff
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	2307      	movs	r3, #7
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	2104      	movs	r1, #4
 800ccda:	f000 fe6b 	bl	800d9b4 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR,
 800ccde:	4864      	ldr	r0, [pc, #400]	; (800ce70 <main+0x448>)
 800cce0:	23ff      	movs	r3, #255	; 0xff
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	23ff      	movs	r3, #255	; 0xff
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	2307      	movs	r3, #7
 800ccea:	2202      	movs	r2, #2
 800ccec:	2105      	movs	r1, #5
 800ccee:	f000 fe61 	bl	800d9b4 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CORRECTION_VALUE, 2, SETTINGS_CORRECTION,
 800ccf2:	485f      	ldr	r0, [pc, #380]	; (800ce70 <main+0x448>)
 800ccf4:	23ff      	movs	r3, #255	; 0xff
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	23ff      	movs	r3, #255	; 0xff
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	2308      	movs	r3, #8
 800ccfe:	2202      	movs	r2, #2
 800cd00:	2106      	movs	r1, #6
 800cd02:	f000 fe57 	bl	800d9b4 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_REFERENCE_VALUE, 2, SETTINGS_REFERENCE,
 800cd06:	485a      	ldr	r0, [pc, #360]	; (800ce70 <main+0x448>)
 800cd08:	23ff      	movs	r3, #255	; 0xff
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	23ff      	movs	r3, #255	; 0xff
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2309      	movs	r3, #9
 800cd12:	2202      	movs	r2, #2
 800cd14:	2107      	movs	r1, #7
 800cd16:	f000 fe4d 	bl	800d9b4 <menuItemInit>
	MENU_NONE, MENU_NONE);

	//												MENU ITEMS CONSTANT VALUES
	//level 0
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", INTER_DISABLED,
 800cd1a:	4b56      	ldr	r3, [pc, #344]	; (800ce74 <main+0x44c>)
 800cd1c:	4854      	ldr	r0, [pc, #336]	; (800ce70 <main+0x448>)
 800cd1e:	2200      	movs	r2, #0
 800cd20:	9201      	str	r2, [sp, #4]
 800cd22:	2204      	movs	r2, #4
 800cd24:	9200      	str	r2, [sp, #0]
 800cd26:	2200      	movs	r2, #0
 800cd28:	2107      	movs	r1, #7
 800cd2a:	f000 fd73 	bl	800d814 <menuItemChangeValue>
	NOT_EDITABLE);

	//level 1
//	menuItemChangeValue(&menu, CHRONO_START, 1, "St  ", INTER_DISABLED,
//	NOT_EDITABLE);
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", INTER_COLON,
 800cd2e:	4b52      	ldr	r3, [pc, #328]	; (800ce78 <main+0x450>)
 800cd30:	484f      	ldr	r0, [pc, #316]	; (800ce70 <main+0x448>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	9201      	str	r2, [sp, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	9200      	str	r2, [sp, #0]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	2104      	movs	r1, #4
 800cd3e:	f000 fd69 	bl	800d814 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", INTER_DISABLED,
 800cd42:	4b4e      	ldr	r3, [pc, #312]	; (800ce7c <main+0x454>)
 800cd44:	484a      	ldr	r0, [pc, #296]	; (800ce70 <main+0x448>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	9201      	str	r2, [sp, #4]
 800cd4a:	2204      	movs	r2, #4
 800cd4c:	9200      	str	r2, [sp, #0]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	2106      	movs	r1, #6
 800cd52:	f000 fd5f 	bl	800d814 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", INTER_DISABLED,
 800cd56:	4b4a      	ldr	r3, [pc, #296]	; (800ce80 <main+0x458>)
 800cd58:	4845      	ldr	r0, [pc, #276]	; (800ce70 <main+0x448>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	9201      	str	r2, [sp, #4]
 800cd5e:	2204      	movs	r2, #4
 800cd60:	9200      	str	r2, [sp, #0]
 800cd62:	2201      	movs	r2, #1
 800cd64:	2107      	movs	r1, #7
 800cd66:	f000 fd55 	bl	800d814 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ",
 800cd6a:	4b46      	ldr	r3, [pc, #280]	; (800ce84 <main+0x45c>)
 800cd6c:	4840      	ldr	r0, [pc, #256]	; (800ce70 <main+0x448>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	9201      	str	r2, [sp, #4]
 800cd72:	2204      	movs	r2, #4
 800cd74:	9200      	str	r2, [sp, #0]
 800cd76:	2201      	movs	r2, #1
 800cd78:	2108      	movs	r1, #8
 800cd7a:	f000 fd4b 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ",
 800cd7e:	4b42      	ldr	r3, [pc, #264]	; (800ce88 <main+0x460>)
 800cd80:	483b      	ldr	r0, [pc, #236]	; (800ce70 <main+0x448>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	9201      	str	r2, [sp, #4]
 800cd86:	2204      	movs	r2, #4
 800cd88:	9200      	str	r2, [sp, #0]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	2109      	movs	r1, #9
 800cd8e:	f000 fd41 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_SAVE, 1, "SA  ",
 800cd92:	4b3e      	ldr	r3, [pc, #248]	; (800ce8c <main+0x464>)
 800cd94:	4836      	ldr	r0, [pc, #216]	; (800ce70 <main+0x448>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	9201      	str	r2, [sp, #4]
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	9200      	str	r2, [sp, #0]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	210a      	movs	r1, #10
 800cda2:	f000 fd37 	bl	800d814 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	bme280Init(&bme280, &hi2c1);
 800cda6:	4a3a      	ldr	r2, [pc, #232]	; (800ce90 <main+0x468>)
 800cda8:	4b2b      	ldr	r3, [pc, #172]	; (800ce58 <main+0x430>)
 800cdaa:	0011      	movs	r1, r2
 800cdac:	0018      	movs	r0, r3
 800cdae:	f7fc fa2f 	bl	8009210 <bme280Init>
	lis3mdlInit(&lis3mdl, &hi2c1);
 800cdb2:	4a37      	ldr	r2, [pc, #220]	; (800ce90 <main+0x468>)
 800cdb4:	4b37      	ldr	r3, [pc, #220]	; (800ce94 <main+0x46c>)
 800cdb6:	0011      	movs	r1, r2
 800cdb8:	0018      	movs	r0, r3
 800cdba:	f7ff fb81 	bl	800c4c0 <lis3mdlInit>
	HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800cdbe:	23a0      	movs	r3, #160	; 0xa0
 800cdc0:	05db      	lsls	r3, r3, #23
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	2102      	movs	r1, #2
 800cdc6:	0018      	movs	r0, r3
 800cdc8:	f7f7 fe6b 	bl	8004aa2 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800cdcc:	2014      	movs	r0, #20
 800cdce:	f7f6 fc69 	bl	80036a4 <HAL_Delay>
	menuResetCurrent(&menu);
 800cdd2:	4b27      	ldr	r3, [pc, #156]	; (800ce70 <main+0x448>)
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	f000 fcf4 	bl	800d7c2 <menuResetCurrent>

	//										FLASH RESTORE SECTION

	backupInit();
 800cdda:	f7fc f905 	bl	8008fe8 <backupInit>
	backupRestore(&chronograph);
 800cdde:	4b2e      	ldr	r3, [pc, #184]	; (800ce98 <main+0x470>)
 800cde0:	0018      	movs	r0, r3
 800cde2:	f7fc f939 	bl	8009058 <backupRestore>

	HAL_Delay(500);
 800cde6:	23fa      	movs	r3, #250	; 0xfa
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	0018      	movs	r0, r3
 800cdec:	f7f6 fc5a 	bl	80036a4 <HAL_Delay>
	flags[FLAG_INITIALIZED] = 1;
 800cdf0:	4b2a      	ldr	r3, [pc, #168]	; (800ce9c <main+0x474>)
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	709a      	strb	r2, [r3, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//												NORMAL WORK
		if (!flags[FLAG_SLEEP]
 800cdf6:	4b29      	ldr	r3, [pc, #164]	; (800ce9c <main+0x474>)
 800cdf8:	785b      	ldrb	r3, [r3, #1]
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <main+0x3e2>
				|| status[STATUS_MODE_SWITCH] == STATUS_MODE_SWITCH_FORCE) {
 800ce00:	4b27      	ldr	r3, [pc, #156]	; (800cea0 <main+0x478>)
 800ce02:	785b      	ldrb	r3, [r3, #1]
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d153      	bne.n	800ceb2 <main+0x48a>
			//read RTC time
			rtcGetTime(&chronograph);
 800ce0a:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <main+0x470>)
 800ce0c:	0018      	movs	r0, r3
 800ce0e:	f001 f999 	bl	800e144 <rtcGetTime>

			//read sensor
			if ((menu.current.level == 0)) {
 800ce12:	4a17      	ldr	r2, [pc, #92]	; (800ce70 <main+0x448>)
 800ce14:	23b9      	movs	r3, #185	; 0xb9
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	5cd3      	ldrb	r3, [r2, r3]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d107      	bne.n	800ce2e <main+0x406>
				bme280Read(&bme280);
 800ce1e:	4b0e      	ldr	r3, [pc, #56]	; (800ce58 <main+0x430>)
 800ce20:	0018      	movs	r0, r3
 800ce22:	f7fc fb35 	bl	8009490 <bme280Read>
				lis3mdlRead(&lis3mdl);
 800ce26:	4b1b      	ldr	r3, [pc, #108]	; (800ce94 <main+0x46c>)
 800ce28:	0018      	movs	r0, r3
 800ce2a:	f7ff fb87 	bl	800c53c <lis3mdlRead>
			}

			//write actual values to menu matrix
			interfaceWrite();
 800ce2e:	f7fe fd39 	bl	800b8a4 <interfaceWrite>

			//display current item
			if (display.transitionStatus == LED_TRANSITION_DISABLED) {
 800ce32:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <main+0x43c>)
 800ce34:	2267      	movs	r2, #103	; 0x67
 800ce36:	5c9b      	ldrb	r3, [r3, r2]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d133      	bne.n	800cea4 <main+0x47c>
				interfaceShowActual();
 800ce3c:	f7ff f850 	bl	800bee0 <interfaceShowActual>
 800ce40:	e030      	b.n	800cea4 <main+0x47c>
 800ce42:	46c0      	nop			; (mov r8, r8)
 800ce44:	20000798 	.word	0x20000798
 800ce48:	200007e4 	.word	0x200007e4
 800ce4c:	20000674 	.word	0x20000674
 800ce50:	200006c0 	.word	0x200006c0
 800ce54:	2000017c 	.word	0x2000017c
 800ce58:	20000724 	.word	0x20000724
 800ce5c:	000003f5 	.word	0x000003f5
 800ce60:	50000400 	.word	0x50000400
 800ce64:	20000600 	.word	0x20000600
 800ce68:	50000800 	.word	0x50000800
 800ce6c:	08010224 	.word	0x08010224
 800ce70:	20000188 	.word	0x20000188
 800ce74:	0801022c 	.word	0x0801022c
 800ce78:	08010230 	.word	0x08010230
 800ce7c:	08010238 	.word	0x08010238
 800ce80:	08010240 	.word	0x08010240
 800ce84:	08010248 	.word	0x08010248
 800ce88:	08010250 	.word	0x08010250
 800ce8c:	08010258 	.word	0x08010258
 800ce90:	20000304 	.word	0x20000304
 800ce94:	20000350 	.word	0x20000350
 800ce98:	200005d8 	.word	0x200005d8
 800ce9c:	20000180 	.word	0x20000180
 800cea0:	20000184 	.word	0x20000184
			}

			//turn off standby LED
			HAL_GPIO_WritePin(LED_STANDBY_GPIO_Port, LED_STANDBY_Pin, 0);
 800cea4:	23a0      	movs	r3, #160	; 0xa0
 800cea6:	05db      	lsls	r3, r3, #23
 800cea8:	2200      	movs	r2, #0
 800ceaa:	2110      	movs	r1, #16
 800ceac:	0018      	movs	r0, r3
 800ceae:	f7f7 fdf8 	bl	8004aa2 <HAL_GPIO_WritePin>
		}

		//												LOW POWER SECTION
//		if (flags[FLAG_SLEEP] && HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin)) {
		if (flags[FLAG_SLEEP]
 800ceb2:	4b12      	ldr	r3, [pc, #72]	; (800cefc <main+0x4d4>)
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d09c      	beq.n	800cdf6 <main+0x3ce>
				&& status[STATUS_MODE_SWITCH] == STATUS_MODE_SWITCH_ONDEMAND) {
 800cebc:	4b10      	ldr	r3, [pc, #64]	; (800cf00 <main+0x4d8>)
 800cebe:	785b      	ldrb	r3, [r3, #1]
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d197      	bne.n	800cdf6 <main+0x3ce>

			//go to sleep
			LPsleep();
 800cec6:	f000 fc21 	bl	800d70c <LPsleep>

			//when interrupt was caused by RTC, go to sleep
			while (status[STATUS_INT_SOURCE] == STATUS_INT_SOURCE_RTC) {
 800ceca:	e009      	b.n	800cee0 <main+0x4b8>
				lis3mdlRead(&lis3mdl);
 800cecc:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <main+0x4dc>)
 800cece:	0018      	movs	r0, r3
 800ced0:	f7ff fb34 	bl	800c53c <lis3mdlRead>
				lis3mdlGetCalibrationSample(&lis3mdl);
 800ced4:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <main+0x4dc>)
 800ced6:	0018      	movs	r0, r3
 800ced8:	f7ff fc9c 	bl	800c814 <lis3mdlGetCalibrationSample>
				LPsleep();
 800cedc:	f000 fc16 	bl	800d70c <LPsleep>
			while (status[STATUS_INT_SOURCE] == STATUS_INT_SOURCE_RTC) {
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <main+0x4d8>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0f0      	beq.n	800cecc <main+0x4a4>
			}

			//											AFTER WAKE UP

			//when interrupt was caused by external, wake up
			if (status[STATUS_INT_SOURCE] == STATUS_INT_SOURCE_EXTI) {
 800ceea:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <main+0x4d8>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d000      	beq.n	800cef6 <main+0x4ce>
 800cef4:	e77f      	b.n	800cdf6 <main+0x3ce>
				LPwakeUp();
 800cef6:	f000 fc3d 	bl	800d774 <LPwakeUp>
		if (!flags[FLAG_SLEEP]
 800cefa:	e77c      	b.n	800cdf6 <main+0x3ce>
 800cefc:	20000180 	.word	0x20000180
 800cf00:	20000184 	.word	0x20000184
 800cf04:	20000350 	.word	0x20000350

0800cf08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cf08:	b590      	push	{r4, r7, lr}
 800cf0a:	b093      	sub	sp, #76	; 0x4c
 800cf0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cf0e:	2410      	movs	r4, #16
 800cf10:	193b      	adds	r3, r7, r4
 800cf12:	0018      	movs	r0, r3
 800cf14:	2338      	movs	r3, #56	; 0x38
 800cf16:	001a      	movs	r2, r3
 800cf18:	2100      	movs	r1, #0
 800cf1a:	f002 f91c 	bl	800f156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cf1e:	003b      	movs	r3, r7
 800cf20:	0018      	movs	r0, r3
 800cf22:	2310      	movs	r3, #16
 800cf24:	001a      	movs	r2, r3
 800cf26:	2100      	movs	r1, #0
 800cf28:	f002 f915 	bl	800f156 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cf2c:	2380      	movs	r3, #128	; 0x80
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	0018      	movs	r0, r3
 800cf32:	f7f8 fc25 	bl	8005780 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800cf36:	f7f8 fbdd 	bl	80056f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800cf3a:	4b28      	ldr	r3, [pc, #160]	; (800cfdc <SystemClock_Config+0xd4>)
 800cf3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf3e:	4b27      	ldr	r3, [pc, #156]	; (800cfdc <SystemClock_Config+0xd4>)
 800cf40:	2118      	movs	r1, #24
 800cf42:	438a      	bics	r2, r1
 800cf44:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800cf46:	193b      	adds	r3, r7, r4
 800cf48:	2206      	movs	r2, #6
 800cf4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800cf4c:	193b      	adds	r3, r7, r4
 800cf4e:	2201      	movs	r2, #1
 800cf50:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cf52:	193b      	adds	r3, r7, r4
 800cf54:	2280      	movs	r2, #128	; 0x80
 800cf56:	0052      	lsls	r2, r2, #1
 800cf58:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800cf5a:	0021      	movs	r1, r4
 800cf5c:	187b      	adds	r3, r7, r1
 800cf5e:	2200      	movs	r2, #0
 800cf60:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cf62:	187b      	adds	r3, r7, r1
 800cf64:	2240      	movs	r2, #64	; 0x40
 800cf66:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cf68:	187b      	adds	r3, r7, r1
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cf6e:	187b      	adds	r3, r7, r1
 800cf70:	2202      	movs	r2, #2
 800cf72:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800cf74:	187b      	adds	r3, r7, r1
 800cf76:	2200      	movs	r2, #0
 800cf78:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800cf7a:	187b      	adds	r3, r7, r1
 800cf7c:	2208      	movs	r2, #8
 800cf7e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cf80:	187b      	adds	r3, r7, r1
 800cf82:	2280      	movs	r2, #128	; 0x80
 800cf84:	0292      	lsls	r2, r2, #10
 800cf86:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800cf88:	187b      	adds	r3, r7, r1
 800cf8a:	2280      	movs	r2, #128	; 0x80
 800cf8c:	0492      	lsls	r2, r2, #18
 800cf8e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800cf90:	187b      	adds	r3, r7, r1
 800cf92:	2280      	movs	r2, #128	; 0x80
 800cf94:	0592      	lsls	r2, r2, #22
 800cf96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cf98:	187b      	adds	r3, r7, r1
 800cf9a:	0018      	movs	r0, r3
 800cf9c:	f7f8 fc3c 	bl	8005818 <HAL_RCC_OscConfig>
 800cfa0:	1e03      	subs	r3, r0, #0
 800cfa2:	d001      	beq.n	800cfa8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800cfa4:	f000 fc08 	bl	800d7b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cfa8:	003b      	movs	r3, r7
 800cfaa:	2207      	movs	r2, #7
 800cfac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cfae:	003b      	movs	r3, r7
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cfb4:	003b      	movs	r3, r7
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800cfba:	003b      	movs	r3, r7
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800cfc0:	003b      	movs	r3, r7
 800cfc2:	2102      	movs	r1, #2
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f7f8 ff47 	bl	8005e58 <HAL_RCC_ClockConfig>
 800cfca:	1e03      	subs	r3, r0, #0
 800cfcc:	d001      	beq.n	800cfd2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800cfce:	f000 fbf3 	bl	800d7b8 <Error_Handler>
  }
}
 800cfd2:	46c0      	nop			; (mov r8, r8)
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	b013      	add	sp, #76	; 0x4c
 800cfd8:	bd90      	pop	{r4, r7, pc}
 800cfda:	46c0      	nop			; (mov r8, r8)
 800cfdc:	40021000 	.word	0x40021000

0800cfe0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cfe6:	1d3b      	adds	r3, r7, #4
 800cfe8:	0018      	movs	r0, r3
 800cfea:	230c      	movs	r3, #12
 800cfec:	001a      	movs	r2, r3
 800cfee:	2100      	movs	r1, #0
 800cff0:	f002 f8b1 	bl	800f156 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800cff4:	4b30      	ldr	r3, [pc, #192]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800cff6:	4a31      	ldr	r2, [pc, #196]	; (800d0bc <MX_ADC1_Init+0xdc>)
 800cff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800cffa:	4b2f      	ldr	r3, [pc, #188]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800cffc:	2280      	movs	r2, #128	; 0x80
 800cffe:	05d2      	lsls	r2, r2, #23
 800d000:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d002:	4b2d      	ldr	r3, [pc, #180]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d004:	2200      	movs	r2, #0
 800d006:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d008:	4b2b      	ldr	r3, [pc, #172]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800d00e:	4b2a      	ldr	r3, [pc, #168]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d010:	2200      	movs	r2, #0
 800d012:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d014:	4b28      	ldr	r3, [pc, #160]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d016:	2204      	movs	r2, #4
 800d018:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800d01a:	4b27      	ldr	r3, [pc, #156]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800d020:	4b25      	ldr	r3, [pc, #148]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d022:	2200      	movs	r2, #0
 800d024:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d026:	4b24      	ldr	r3, [pc, #144]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d028:	2200      	movs	r2, #0
 800d02a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800d02c:	4b22      	ldr	r3, [pc, #136]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d02e:	2201      	movs	r2, #1
 800d030:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d032:	4b21      	ldr	r3, [pc, #132]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d034:	2200      	movs	r2, #0
 800d036:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d038:	4b1f      	ldr	r3, [pc, #124]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d03e:	4b1e      	ldr	r3, [pc, #120]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d040:	222c      	movs	r2, #44	; 0x2c
 800d042:	2100      	movs	r1, #0
 800d044:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800d046:	4b1c      	ldr	r3, [pc, #112]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d048:	2280      	movs	r2, #128	; 0x80
 800d04a:	0152      	lsls	r2, r2, #5
 800d04c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800d04e:	4b1a      	ldr	r3, [pc, #104]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d050:	2206      	movs	r2, #6
 800d052:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 800d054:	4b18      	ldr	r3, [pc, #96]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d056:	2206      	movs	r2, #6
 800d058:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800d05a:	4b17      	ldr	r3, [pc, #92]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d05c:	223c      	movs	r2, #60	; 0x3c
 800d05e:	2101      	movs	r1, #1
 800d060:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800d062:	4b15      	ldr	r3, [pc, #84]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d064:	220c      	movs	r2, #12
 800d066:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800d068:	4b13      	ldr	r3, [pc, #76]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d06a:	2280      	movs	r2, #128	; 0x80
 800d06c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800d06e:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d070:	2200      	movs	r2, #0
 800d072:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800d074:	4b10      	ldr	r3, [pc, #64]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d076:	2200      	movs	r2, #0
 800d078:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d07a:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d07c:	0018      	movs	r0, r3
 800d07e:	f7f6 fc57 	bl	8003930 <HAL_ADC_Init>
 800d082:	1e03      	subs	r3, r0, #0
 800d084:	d001      	beq.n	800d08a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800d086:	f000 fb97 	bl	800d7b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d08a:	1d3b      	adds	r3, r7, #4
 800d08c:	4a0c      	ldr	r2, [pc, #48]	; (800d0c0 <MX_ADC1_Init+0xe0>)
 800d08e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800d090:	1d3b      	adds	r3, r7, #4
 800d092:	2200      	movs	r2, #0
 800d094:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800d096:	1d3b      	adds	r3, r7, #4
 800d098:	2200      	movs	r2, #0
 800d09a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d09c:	1d3a      	adds	r2, r7, #4
 800d09e:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <MX_ADC1_Init+0xd8>)
 800d0a0:	0011      	movs	r1, r2
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f7f6 fe22 	bl	8003cec <HAL_ADC_ConfigChannel>
 800d0a8:	1e03      	subs	r3, r0, #0
 800d0aa:	d001      	beq.n	800d0b0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800d0ac:	f000 fb84 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d0b0:	46c0      	nop			; (mov r8, r8)
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	b004      	add	sp, #16
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	200006c0 	.word	0x200006c0
 800d0bc:	40012400 	.word	0x40012400
 800d0c0:	b0001000 	.word	0xb0001000

0800d0c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800d0c8:	2380      	movs	r3, #128	; 0x80
 800d0ca:	015b      	lsls	r3, r3, #5
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	f7ff fc95 	bl	800c9fc <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <MX_CRC_Init+0x4c>)
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	f7ff fc54 	bl	800c984 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <MX_CRC_Init+0x4c>)
 800d0de:	2100      	movs	r1, #0
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	f7ff fc61 	bl	800c9a8 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 800d0e6:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <MX_CRC_Init+0x50>)
 800d0e8:	4b09      	ldr	r3, [pc, #36]	; (800d110 <MX_CRC_Init+0x4c>)
 800d0ea:	0011      	movs	r1, r2
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	f7ff fc79 	bl	800c9e4 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <MX_CRC_Init+0x4c>)
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f7ff fc32 	bl	800c960 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	425b      	negs	r3, r3
 800d100:	4a03      	ldr	r2, [pc, #12]	; (800d110 <MX_CRC_Init+0x4c>)
 800d102:	0019      	movs	r1, r3
 800d104:	0010      	movs	r0, r2
 800d106:	f7ff fc61 	bl	800c9cc <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800d10a:	46c0      	nop			; (mov r8, r8)
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	40023000 	.word	0x40023000
 800d114:	04c11db7 	.word	0x04c11db7

0800d118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d11c:	4b1b      	ldr	r3, [pc, #108]	; (800d18c <MX_I2C1_Init+0x74>)
 800d11e:	4a1c      	ldr	r2, [pc, #112]	; (800d190 <MX_I2C1_Init+0x78>)
 800d120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800d122:	4b1a      	ldr	r3, [pc, #104]	; (800d18c <MX_I2C1_Init+0x74>)
 800d124:	4a1b      	ldr	r2, [pc, #108]	; (800d194 <MX_I2C1_Init+0x7c>)
 800d126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800d128:	4b18      	ldr	r3, [pc, #96]	; (800d18c <MX_I2C1_Init+0x74>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d12e:	4b17      	ldr	r3, [pc, #92]	; (800d18c <MX_I2C1_Init+0x74>)
 800d130:	2201      	movs	r2, #1
 800d132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d134:	4b15      	ldr	r3, [pc, #84]	; (800d18c <MX_I2C1_Init+0x74>)
 800d136:	2200      	movs	r2, #0
 800d138:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800d13a:	4b14      	ldr	r3, [pc, #80]	; (800d18c <MX_I2C1_Init+0x74>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d140:	4b12      	ldr	r3, [pc, #72]	; (800d18c <MX_I2C1_Init+0x74>)
 800d142:	2200      	movs	r2, #0
 800d144:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d146:	4b11      	ldr	r3, [pc, #68]	; (800d18c <MX_I2C1_Init+0x74>)
 800d148:	2200      	movs	r2, #0
 800d14a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d14c:	4b0f      	ldr	r3, [pc, #60]	; (800d18c <MX_I2C1_Init+0x74>)
 800d14e:	2200      	movs	r2, #0
 800d150:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d152:	4b0e      	ldr	r3, [pc, #56]	; (800d18c <MX_I2C1_Init+0x74>)
 800d154:	0018      	movs	r0, r3
 800d156:	f7f7 fceb 	bl	8004b30 <HAL_I2C_Init>
 800d15a:	1e03      	subs	r3, r0, #0
 800d15c:	d001      	beq.n	800d162 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800d15e:	f000 fb2b 	bl	800d7b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d162:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <MX_I2C1_Init+0x74>)
 800d164:	2100      	movs	r1, #0
 800d166:	0018      	movs	r0, r3
 800d168:	f7f8 fa2c 	bl	80055c4 <HAL_I2CEx_ConfigAnalogFilter>
 800d16c:	1e03      	subs	r3, r0, #0
 800d16e:	d001      	beq.n	800d174 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800d170:	f000 fb22 	bl	800d7b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800d174:	4b05      	ldr	r3, [pc, #20]	; (800d18c <MX_I2C1_Init+0x74>)
 800d176:	2100      	movs	r1, #0
 800d178:	0018      	movs	r0, r3
 800d17a:	f7f8 fa6f 	bl	800565c <HAL_I2CEx_ConfigDigitalFilter>
 800d17e:	1e03      	subs	r3, r0, #0
 800d180:	d001      	beq.n	800d186 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800d182:	f000 fb19 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d186:	46c0      	nop			; (mov r8, r8)
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	20000304 	.word	0x20000304
 800d190:	40005400 	.word	0x40005400
 800d194:	10707dbc 	.word	0x10707dbc

0800d198 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d19e:	1d3b      	adds	r3, r7, #4
 800d1a0:	0018      	movs	r0, r3
 800d1a2:	2314      	movs	r3, #20
 800d1a4:	001a      	movs	r2, r3
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	f001 ffd5 	bl	800f156 <memset>
  RTC_DateTypeDef sDate = {0};
 800d1ac:	003b      	movs	r3, r7
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d1b2:	4b32      	ldr	r3, [pc, #200]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1b4:	4a32      	ldr	r2, [pc, #200]	; (800d280 <MX_RTC_Init+0xe8>)
 800d1b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d1b8:	4b30      	ldr	r3, [pc, #192]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800d1be:	4b2f      	ldr	r3, [pc, #188]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1c0:	227f      	movs	r2, #127	; 0x7f
 800d1c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800d1c4:	4b2d      	ldr	r3, [pc, #180]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1c6:	22ff      	movs	r2, #255	; 0xff
 800d1c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d1ca:	4b2c      	ldr	r3, [pc, #176]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d1d0:	4b2a      	ldr	r3, [pc, #168]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d1d6:	4b29      	ldr	r3, [pc, #164]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d1dc:	4b27      	ldr	r3, [pc, #156]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1de:	2280      	movs	r2, #128	; 0x80
 800d1e0:	05d2      	lsls	r2, r2, #23
 800d1e2:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800d1e4:	4b25      	ldr	r3, [pc, #148]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d1ea:	4b24      	ldr	r3, [pc, #144]	; (800d27c <MX_RTC_Init+0xe4>)
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f7f9 f995 	bl	800651c <HAL_RTC_Init>
 800d1f2:	1e03      	subs	r3, r0, #0
 800d1f4:	d001      	beq.n	800d1fa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800d1f6:	f000 fadf 	bl	800d7b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 800d1fa:	1d3b      	adds	r3, r7, #4
 800d1fc:	2215      	movs	r2, #21
 800d1fe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 40;
 800d200:	1d3b      	adds	r3, r7, #4
 800d202:	2228      	movs	r2, #40	; 0x28
 800d204:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800d206:	1d3b      	adds	r3, r7, #4
 800d208:	2200      	movs	r2, #0
 800d20a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800d20c:	1d3b      	adds	r3, r7, #4
 800d20e:	2200      	movs	r2, #0
 800d210:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d212:	1d3b      	adds	r3, r7, #4
 800d214:	2200      	movs	r2, #0
 800d216:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d218:	1d3b      	adds	r3, r7, #4
 800d21a:	2200      	movs	r2, #0
 800d21c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d21e:	1d39      	adds	r1, r7, #4
 800d220:	4b16      	ldr	r3, [pc, #88]	; (800d27c <MX_RTC_Init+0xe4>)
 800d222:	2200      	movs	r2, #0
 800d224:	0018      	movs	r0, r3
 800d226:	f7f9 fa0f 	bl	8006648 <HAL_RTC_SetTime>
 800d22a:	1e03      	subs	r3, r0, #0
 800d22c:	d001      	beq.n	800d232 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800d22e:	f000 fac3 	bl	800d7b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800d232:	003b      	movs	r3, r7
 800d234:	2201      	movs	r2, #1
 800d236:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800d238:	003b      	movs	r3, r7
 800d23a:	2204      	movs	r2, #4
 800d23c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 800d23e:	003b      	movs	r3, r7
 800d240:	2214      	movs	r2, #20
 800d242:	709a      	strb	r2, [r3, #2]
  sDate.Year = 20;
 800d244:	003b      	movs	r3, r7
 800d246:	2214      	movs	r2, #20
 800d248:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d24a:	0039      	movs	r1, r7
 800d24c:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <MX_RTC_Init+0xe4>)
 800d24e:	2200      	movs	r2, #0
 800d250:	0018      	movs	r0, r3
 800d252:	f7f9 fafd 	bl	8006850 <HAL_RTC_SetDate>
 800d256:	1e03      	subs	r3, r0, #0
 800d258:	d001      	beq.n	800d25e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800d25a:	f000 faad 	bl	800d7b8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800d25e:	4b07      	ldr	r3, [pc, #28]	; (800d27c <MX_RTC_Init+0xe4>)
 800d260:	2204      	movs	r2, #4
 800d262:	2114      	movs	r1, #20
 800d264:	0018      	movs	r0, r3
 800d266:	f7f9 fcc7 	bl	8006bf8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800d26a:	1e03      	subs	r3, r0, #0
 800d26c:	d001      	beq.n	800d272 <MX_RTC_Init+0xda>
  {
    Error_Handler();
 800d26e:	f000 faa3 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d272:	46c0      	nop			; (mov r8, r8)
 800d274:	46bd      	mov	sp, r7
 800d276:	b006      	add	sp, #24
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	46c0      	nop			; (mov r8, r8)
 800d27c:	2000076c 	.word	0x2000076c
 800d280:	40002800 	.word	0x40002800

0800d284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d28a:	2310      	movs	r3, #16
 800d28c:	18fb      	adds	r3, r7, r3
 800d28e:	0018      	movs	r0, r3
 800d290:	2310      	movs	r3, #16
 800d292:	001a      	movs	r2, r3
 800d294:	2100      	movs	r1, #0
 800d296:	f001 ff5e 	bl	800f156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d29a:	1d3b      	adds	r3, r7, #4
 800d29c:	0018      	movs	r0, r3
 800d29e:	230c      	movs	r3, #12
 800d2a0:	001a      	movs	r2, r3
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	f001 ff57 	bl	800f156 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d2a8:	4b21      	ldr	r3, [pc, #132]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2aa:	4a22      	ldr	r2, [pc, #136]	; (800d334 <MX_TIM1_Init+0xb0>)
 800d2ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800d2ae:	4b20      	ldr	r3, [pc, #128]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2b0:	2263      	movs	r2, #99	; 0x63
 800d2b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2b4:	4b1e      	ldr	r3, [pc, #120]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800d2ba:	4b1d      	ldr	r3, [pc, #116]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2bc:	4a1e      	ldr	r2, [pc, #120]	; (800d338 <MX_TIM1_Init+0xb4>)
 800d2be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2c0:	4b1b      	ldr	r3, [pc, #108]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2cc:	4b18      	ldr	r3, [pc, #96]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d2d2:	4b17      	ldr	r3, [pc, #92]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f7f9 fd47 	bl	8006d68 <HAL_TIM_Base_Init>
 800d2da:	1e03      	subs	r3, r0, #0
 800d2dc:	d001      	beq.n	800d2e2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800d2de:	f000 fa6b 	bl	800d7b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d2e2:	2110      	movs	r1, #16
 800d2e4:	187b      	adds	r3, r7, r1
 800d2e6:	2280      	movs	r2, #128	; 0x80
 800d2e8:	0152      	lsls	r2, r2, #5
 800d2ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d2ec:	187a      	adds	r2, r7, r1
 800d2ee:	4b10      	ldr	r3, [pc, #64]	; (800d330 <MX_TIM1_Init+0xac>)
 800d2f0:	0011      	movs	r1, r2
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f7f9 ff4c 	bl	8007190 <HAL_TIM_ConfigClockSource>
 800d2f8:	1e03      	subs	r3, r0, #0
 800d2fa:	d001      	beq.n	800d300 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800d2fc:	f000 fa5c 	bl	800d7b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d300:	1d3b      	adds	r3, r7, #4
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800d306:	1d3b      	adds	r3, r7, #4
 800d308:	2200      	movs	r2, #0
 800d30a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d30c:	1d3b      	adds	r3, r7, #4
 800d30e:	2200      	movs	r2, #0
 800d310:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d312:	1d3a      	adds	r2, r7, #4
 800d314:	4b06      	ldr	r3, [pc, #24]	; (800d330 <MX_TIM1_Init+0xac>)
 800d316:	0011      	movs	r1, r2
 800d318:	0018      	movs	r0, r3
 800d31a:	f7fa f941 	bl	80075a0 <HAL_TIMEx_MasterConfigSynchronization>
 800d31e:	1e03      	subs	r3, r0, #0
 800d320:	d001      	beq.n	800d326 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800d322:	f000 fa49 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	46bd      	mov	sp, r7
 800d32a:	b008      	add	sp, #32
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	20000798 	.word	0x20000798
 800d334:	40012c00 	.word	0x40012c00
 800d338:	000007cf 	.word	0x000007cf

0800d33c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d342:	2310      	movs	r3, #16
 800d344:	18fb      	adds	r3, r7, r3
 800d346:	0018      	movs	r0, r3
 800d348:	2310      	movs	r3, #16
 800d34a:	001a      	movs	r2, r3
 800d34c:	2100      	movs	r1, #0
 800d34e:	f001 ff02 	bl	800f156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d352:	1d3b      	adds	r3, r7, #4
 800d354:	0018      	movs	r0, r3
 800d356:	230c      	movs	r3, #12
 800d358:	001a      	movs	r2, r3
 800d35a:	2100      	movs	r1, #0
 800d35c:	f001 fefb 	bl	800f156 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d360:	4b1e      	ldr	r3, [pc, #120]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d362:	2280      	movs	r2, #128	; 0x80
 800d364:	05d2      	lsls	r2, r2, #23
 800d366:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17299;
 800d368:	4b1c      	ldr	r3, [pc, #112]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d36a:	4a1d      	ldr	r2, [pc, #116]	; (800d3e0 <MX_TIM2_Init+0xa4>)
 800d36c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d36e:	4b1b      	ldr	r3, [pc, #108]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d370:	2200      	movs	r2, #0
 800d372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 18499;
 800d374:	4b19      	ldr	r3, [pc, #100]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d376:	4a1b      	ldr	r2, [pc, #108]	; (800d3e4 <MX_TIM2_Init+0xa8>)
 800d378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d37a:	4b18      	ldr	r3, [pc, #96]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d37c:	2200      	movs	r2, #0
 800d37e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d380:	4b16      	ldr	r3, [pc, #88]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d382:	2200      	movs	r2, #0
 800d384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d386:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d388:	0018      	movs	r0, r3
 800d38a:	f7f9 fced 	bl	8006d68 <HAL_TIM_Base_Init>
 800d38e:	1e03      	subs	r3, r0, #0
 800d390:	d001      	beq.n	800d396 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d392:	f000 fa11 	bl	800d7b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d396:	2110      	movs	r1, #16
 800d398:	187b      	adds	r3, r7, r1
 800d39a:	2280      	movs	r2, #128	; 0x80
 800d39c:	0152      	lsls	r2, r2, #5
 800d39e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d3a0:	187a      	adds	r2, r7, r1
 800d3a2:	4b0e      	ldr	r3, [pc, #56]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d3a4:	0011      	movs	r1, r2
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	f7f9 fef2 	bl	8007190 <HAL_TIM_ConfigClockSource>
 800d3ac:	1e03      	subs	r3, r0, #0
 800d3ae:	d001      	beq.n	800d3b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800d3b0:	f000 fa02 	bl	800d7b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3b4:	1d3b      	adds	r3, r7, #4
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3ba:	1d3b      	adds	r3, r7, #4
 800d3bc:	2200      	movs	r2, #0
 800d3be:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d3c0:	1d3a      	adds	r2, r7, #4
 800d3c2:	4b06      	ldr	r3, [pc, #24]	; (800d3dc <MX_TIM2_Init+0xa0>)
 800d3c4:	0011      	movs	r1, r2
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	f7fa f8ea 	bl	80075a0 <HAL_TIMEx_MasterConfigSynchronization>
 800d3cc:	1e03      	subs	r3, r0, #0
 800d3ce:	d001      	beq.n	800d3d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800d3d0:	f000 f9f2 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800d3d4:	46c0      	nop			; (mov r8, r8)
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	b008      	add	sp, #32
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	200007e4 	.word	0x200007e4
 800d3e0:	00004393 	.word	0x00004393
 800d3e4:	00004843 	.word	0x00004843

0800d3e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d3ee:	2310      	movs	r3, #16
 800d3f0:	18fb      	adds	r3, r7, r3
 800d3f2:	0018      	movs	r0, r3
 800d3f4:	2310      	movs	r3, #16
 800d3f6:	001a      	movs	r2, r3
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	f001 feac 	bl	800f156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d3fe:	1d3b      	adds	r3, r7, #4
 800d400:	0018      	movs	r0, r3
 800d402:	230c      	movs	r3, #12
 800d404:	001a      	movs	r2, r3
 800d406:	2100      	movs	r1, #0
 800d408:	f001 fea5 	bl	800f156 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d40c:	4b1e      	ldr	r3, [pc, #120]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d40e:	4a1f      	ldr	r2, [pc, #124]	; (800d48c <MX_TIM3_Init+0xa4>)
 800d410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9199;
 800d412:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d414:	4a1e      	ldr	r2, [pc, #120]	; (800d490 <MX_TIM3_Init+0xa8>)
 800d416:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d418:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6899;
 800d41e:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d420:	4a1c      	ldr	r2, [pc, #112]	; (800d494 <MX_TIM3_Init+0xac>)
 800d422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d424:	4b18      	ldr	r3, [pc, #96]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d426:	2200      	movs	r2, #0
 800d428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d42a:	4b17      	ldr	r3, [pc, #92]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d430:	4b15      	ldr	r3, [pc, #84]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d432:	0018      	movs	r0, r3
 800d434:	f7f9 fc98 	bl	8006d68 <HAL_TIM_Base_Init>
 800d438:	1e03      	subs	r3, r0, #0
 800d43a:	d001      	beq.n	800d440 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d43c:	f000 f9bc 	bl	800d7b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d440:	2110      	movs	r1, #16
 800d442:	187b      	adds	r3, r7, r1
 800d444:	2280      	movs	r2, #128	; 0x80
 800d446:	0152      	lsls	r2, r2, #5
 800d448:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d44a:	187a      	adds	r2, r7, r1
 800d44c:	4b0e      	ldr	r3, [pc, #56]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d44e:	0011      	movs	r1, r2
 800d450:	0018      	movs	r0, r3
 800d452:	f7f9 fe9d 	bl	8007190 <HAL_TIM_ConfigClockSource>
 800d456:	1e03      	subs	r3, r0, #0
 800d458:	d001      	beq.n	800d45e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800d45a:	f000 f9ad 	bl	800d7b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d45e:	1d3b      	adds	r3, r7, #4
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d464:	1d3b      	adds	r3, r7, #4
 800d466:	2200      	movs	r2, #0
 800d468:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d46a:	1d3a      	adds	r2, r7, #4
 800d46c:	4b06      	ldr	r3, [pc, #24]	; (800d488 <MX_TIM3_Init+0xa0>)
 800d46e:	0011      	movs	r1, r2
 800d470:	0018      	movs	r0, r3
 800d472:	f7fa f895 	bl	80075a0 <HAL_TIMEx_MasterConfigSynchronization>
 800d476:	1e03      	subs	r3, r0, #0
 800d478:	d001      	beq.n	800d47e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800d47a:	f000 f99d 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800d47e:	46c0      	nop			; (mov r8, r8)
 800d480:	46bd      	mov	sp, r7
 800d482:	b008      	add	sp, #32
 800d484:	bd80      	pop	{r7, pc}
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	20000674 	.word	0x20000674
 800d48c:	40000400 	.word	0x40000400
 800d490:	000023ef 	.word	0x000023ef
 800d494:	00001af3 	.word	0x00001af3

0800d498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d49c:	4b23      	ldr	r3, [pc, #140]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d49e:	4a24      	ldr	r2, [pc, #144]	; (800d530 <MX_USART2_UART_Init+0x98>)
 800d4a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800d4a2:	4b22      	ldr	r3, [pc, #136]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4a4:	2296      	movs	r2, #150	; 0x96
 800d4a6:	0192      	lsls	r2, r2, #6
 800d4a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d4aa:	4b20      	ldr	r3, [pc, #128]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d4b0:	4b1e      	ldr	r3, [pc, #120]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d4b6:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d4bc:	4b1b      	ldr	r3, [pc, #108]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4be:	220c      	movs	r2, #12
 800d4c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4c2:	4b1a      	ldr	r3, [pc, #104]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4c8:	4b18      	ldr	r3, [pc, #96]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d4ce:	4b17      	ldr	r3, [pc, #92]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800d4d4:	4b15      	ldr	r3, [pc, #84]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d4da:	4b14      	ldr	r3, [pc, #80]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d4e0:	4b12      	ldr	r3, [pc, #72]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4e2:	0018      	movs	r0, r3
 800d4e4:	f7fa f8e2 	bl	80076ac <HAL_UART_Init>
 800d4e8:	1e03      	subs	r3, r0, #0
 800d4ea:	d001      	beq.n	800d4f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800d4ec:	f000 f964 	bl	800d7b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d4f0:	4b0e      	ldr	r3, [pc, #56]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	f7fa fe0d 	bl	8008114 <HAL_UARTEx_SetTxFifoThreshold>
 800d4fa:	1e03      	subs	r3, r0, #0
 800d4fc:	d001      	beq.n	800d502 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800d4fe:	f000 f95b 	bl	800d7b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d502:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d504:	2100      	movs	r1, #0
 800d506:	0018      	movs	r0, r3
 800d508:	f7fa fe44 	bl	8008194 <HAL_UARTEx_SetRxFifoThreshold>
 800d50c:	1e03      	subs	r3, r0, #0
 800d50e:	d001      	beq.n	800d514 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800d510:	f000 f952 	bl	800d7b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800d514:	4b05      	ldr	r3, [pc, #20]	; (800d52c <MX_USART2_UART_Init+0x94>)
 800d516:	0018      	movs	r0, r3
 800d518:	f7fa fdc2 	bl	80080a0 <HAL_UARTEx_DisableFifoMode>
 800d51c:	1e03      	subs	r3, r0, #0
 800d51e:	d001      	beq.n	800d524 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800d520:	f000 f94a 	bl	800d7b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d524:	46c0      	nop			; (mov r8, r8)
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	46c0      	nop			; (mov r8, r8)
 800d52c:	20000830 	.word	0x20000830
 800d530:	40004400 	.word	0x40004400

0800d534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d534:	b590      	push	{r4, r7, lr}
 800d536:	b089      	sub	sp, #36	; 0x24
 800d538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d53a:	240c      	movs	r4, #12
 800d53c:	193b      	adds	r3, r7, r4
 800d53e:	0018      	movs	r0, r3
 800d540:	2314      	movs	r3, #20
 800d542:	001a      	movs	r2, r3
 800d544:	2100      	movs	r1, #0
 800d546:	f001 fe06 	bl	800f156 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d54a:	4b6b      	ldr	r3, [pc, #428]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d54c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d54e:	4b6a      	ldr	r3, [pc, #424]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d550:	2102      	movs	r1, #2
 800d552:	430a      	orrs	r2, r1
 800d554:	635a      	str	r2, [r3, #52]	; 0x34
 800d556:	4b68      	ldr	r3, [pc, #416]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	2202      	movs	r2, #2
 800d55c:	4013      	ands	r3, r2
 800d55e:	60bb      	str	r3, [r7, #8]
 800d560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d562:	4b65      	ldr	r3, [pc, #404]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d566:	4b64      	ldr	r3, [pc, #400]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d568:	2104      	movs	r1, #4
 800d56a:	430a      	orrs	r2, r1
 800d56c:	635a      	str	r2, [r3, #52]	; 0x34
 800d56e:	4b62      	ldr	r3, [pc, #392]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d572:	2204      	movs	r2, #4
 800d574:	4013      	ands	r3, r2
 800d576:	607b      	str	r3, [r7, #4]
 800d578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d57a:	4b5f      	ldr	r3, [pc, #380]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d57e:	4b5e      	ldr	r3, [pc, #376]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d580:	2101      	movs	r1, #1
 800d582:	430a      	orrs	r2, r1
 800d584:	635a      	str	r2, [r3, #52]	; 0x34
 800d586:	4b5c      	ldr	r3, [pc, #368]	; (800d6f8 <MX_GPIO_Init+0x1c4>)
 800d588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58a:	2201      	movs	r2, #1
 800d58c:	4013      	ands	r3, r2
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENCODER_ACTIVE_Pin|LED_STANDBY_Pin|LED_WRITE_Pin, GPIO_PIN_RESET);
 800d592:	23a0      	movs	r3, #160	; 0xa0
 800d594:	05db      	lsls	r3, r3, #23
 800d596:	2200      	movs	r2, #0
 800d598:	2132      	movs	r1, #50	; 0x32
 800d59a:	0018      	movs	r0, r3
 800d59c:	f7f7 fa81 	bl	8004aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_0_Pin|DISP_A_Pin|DISP_B_Pin|DISP_3_Pin
 800d5a0:	4956      	ldr	r1, [pc, #344]	; (800d6fc <MX_GPIO_Init+0x1c8>)
 800d5a2:	23a0      	movs	r3, #160	; 0xa0
 800d5a4:	05db      	lsls	r3, r3, #23
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	0018      	movs	r0, r3
 800d5aa:	f7f7 fa7a 	bl	8004aa2 <HAL_GPIO_WritePin>
                          |DISP_D_Pin|DISP_DP_Pin|DISP_C_Pin|DISP_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_F_Pin|DISP_1_Pin|DISP_2_Pin, GPIO_PIN_SET);
 800d5ae:	4b54      	ldr	r3, [pc, #336]	; (800d700 <MX_GPIO_Init+0x1cc>)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	2107      	movs	r1, #7
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	f7f7 fa74 	bl	8004aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_E_GPIO_Port, DISP_E_Pin, GPIO_PIN_SET);
 800d5ba:	4b52      	ldr	r3, [pc, #328]	; (800d704 <MX_GPIO_Init+0x1d0>)
 800d5bc:	2201      	movs	r2, #1
 800d5be:	2140      	movs	r1, #64	; 0x40
 800d5c0:	0018      	movs	r0, r3
 800d5c2:	f7f7 fa6e 	bl	8004aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BACKUP_Pin */
  GPIO_InitStruct.Pin = BACKUP_Pin;
 800d5c6:	193b      	adds	r3, r7, r4
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d5cc:	193b      	adds	r3, r7, r4
 800d5ce:	2288      	movs	r2, #136	; 0x88
 800d5d0:	0352      	lsls	r2, r2, #13
 800d5d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5d4:	193b      	adds	r3, r7, r4
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BACKUP_GPIO_Port, &GPIO_InitStruct);
 800d5da:	193a      	adds	r2, r7, r4
 800d5dc:	23a0      	movs	r3, #160	; 0xa0
 800d5de:	05db      	lsls	r3, r3, #23
 800d5e0:	0011      	movs	r1, r2
 800d5e2:	0018      	movs	r0, r3
 800d5e4:	f7f7 f8dc 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_ACTIVE_Pin LED_STANDBY_Pin LED_WRITE_Pin DISP_0_Pin
                           DISP_A_Pin DISP_B_Pin DISP_3_Pin DISP_D_Pin
                           DISP_DP_Pin DISP_C_Pin DISP_G_Pin */
  GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin|LED_STANDBY_Pin|LED_WRITE_Pin|DISP_0_Pin
 800d5e8:	193b      	adds	r3, r7, r4
 800d5ea:	4a47      	ldr	r2, [pc, #284]	; (800d708 <MX_GPIO_Init+0x1d4>)
 800d5ec:	601a      	str	r2, [r3, #0]
                          |DISP_A_Pin|DISP_B_Pin|DISP_3_Pin|DISP_D_Pin
                          |DISP_DP_Pin|DISP_C_Pin|DISP_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5ee:	193b      	adds	r3, r7, r4
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5f4:	193b      	adds	r3, r7, r4
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5fa:	193b      	adds	r3, r7, r4
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d600:	193a      	adds	r2, r7, r4
 800d602:	23a0      	movs	r3, #160	; 0xa0
 800d604:	05db      	lsls	r3, r3, #23
 800d606:	0011      	movs	r1, r2
 800d608:	0018      	movs	r0, r3
 800d60a:	f7f7 f8c9 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_F_Pin DISP_1_Pin DISP_2_Pin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_1_Pin|DISP_2_Pin;
 800d60e:	193b      	adds	r3, r7, r4
 800d610:	2207      	movs	r2, #7
 800d612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d614:	193b      	adds	r3, r7, r4
 800d616:	2201      	movs	r2, #1
 800d618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d61a:	193b      	adds	r3, r7, r4
 800d61c:	2200      	movs	r2, #0
 800d61e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d620:	193b      	adds	r3, r7, r4
 800d622:	2200      	movs	r2, #0
 800d624:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d626:	193b      	adds	r3, r7, r4
 800d628:	4a35      	ldr	r2, [pc, #212]	; (800d700 <MX_GPIO_Init+0x1cc>)
 800d62a:	0019      	movs	r1, r3
 800d62c:	0010      	movs	r0, r2
 800d62e:	f7f7 f8b7 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_E_Pin */
  GPIO_InitStruct.Pin = DISP_E_Pin;
 800d632:	193b      	adds	r3, r7, r4
 800d634:	2240      	movs	r2, #64	; 0x40
 800d636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d638:	193b      	adds	r3, r7, r4
 800d63a:	2201      	movs	r2, #1
 800d63c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d63e:	193b      	adds	r3, r7, r4
 800d640:	2200      	movs	r2, #0
 800d642:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d644:	193b      	adds	r3, r7, r4
 800d646:	2200      	movs	r2, #0
 800d648:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_E_GPIO_Port, &GPIO_InitStruct);
 800d64a:	193b      	adds	r3, r7, r4
 800d64c:	4a2d      	ldr	r2, [pc, #180]	; (800d704 <MX_GPIO_Init+0x1d0>)
 800d64e:	0019      	movs	r1, r3
 800d650:	0010      	movs	r0, r2
 800d652:	f7f7 f8a5 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800d656:	0021      	movs	r1, r4
 800d658:	187b      	adds	r3, r7, r1
 800d65a:	2208      	movs	r2, #8
 800d65c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d65e:	187b      	adds	r3, r7, r1
 800d660:	22c4      	movs	r2, #196	; 0xc4
 800d662:	0392      	lsls	r2, r2, #14
 800d664:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d666:	187b      	adds	r3, r7, r1
 800d668:	2201      	movs	r2, #1
 800d66a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 800d66c:	000c      	movs	r4, r1
 800d66e:	187b      	adds	r3, r7, r1
 800d670:	4a23      	ldr	r2, [pc, #140]	; (800d700 <MX_GPIO_Init+0x1cc>)
 800d672:	0019      	movs	r1, r3
 800d674:	0010      	movs	r0, r2
 800d676:	f7f7 f893 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 800d67a:	0021      	movs	r1, r4
 800d67c:	187b      	adds	r3, r7, r1
 800d67e:	2230      	movs	r2, #48	; 0x30
 800d680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d682:	187b      	adds	r3, r7, r1
 800d684:	2284      	movs	r2, #132	; 0x84
 800d686:	0392      	lsls	r2, r2, #14
 800d688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d68a:	187b      	adds	r3, r7, r1
 800d68c:	2201      	movs	r2, #1
 800d68e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d690:	000c      	movs	r4, r1
 800d692:	187b      	adds	r3, r7, r1
 800d694:	4a1a      	ldr	r2, [pc, #104]	; (800d700 <MX_GPIO_Init+0x1cc>)
 800d696:	0019      	movs	r1, r3
 800d698:	0010      	movs	r0, r2
 800d69a:	f7f7 f881 	bl	80047a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_Pin ENC2_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin|ENC2_Pin;
 800d69e:	0021      	movs	r1, r4
 800d6a0:	187b      	adds	r3, r7, r1
 800d6a2:	22c0      	movs	r2, #192	; 0xc0
 800d6a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d6a6:	187b      	adds	r3, r7, r1
 800d6a8:	22c4      	movs	r2, #196	; 0xc4
 800d6aa:	0392      	lsls	r2, r2, #14
 800d6ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ae:	187b      	adds	r3, r7, r1
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6b4:	187b      	adds	r3, r7, r1
 800d6b6:	4a12      	ldr	r2, [pc, #72]	; (800d700 <MX_GPIO_Init+0x1cc>)
 800d6b8:	0019      	movs	r1, r3
 800d6ba:	0010      	movs	r0, r2
 800d6bc:	f7f7 f870 	bl	80047a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	2005      	movs	r0, #5
 800d6c6:	f7f6 fe99 	bl	80043fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800d6ca:	2005      	movs	r0, #5
 800d6cc:	f7f6 feab 	bl	8004426 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	2006      	movs	r0, #6
 800d6d6:	f7f6 fe91 	bl	80043fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800d6da:	2006      	movs	r0, #6
 800d6dc:	f7f6 fea3 	bl	8004426 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	2007      	movs	r0, #7
 800d6e6:	f7f6 fe89 	bl	80043fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800d6ea:	2007      	movs	r0, #7
 800d6ec:	f7f6 fe9b 	bl	8004426 <HAL_NVIC_EnableIRQ>

}
 800d6f0:	46c0      	nop			; (mov r8, r8)
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	b009      	add	sp, #36	; 0x24
 800d6f6:	bd90      	pop	{r4, r7, pc}
 800d6f8:	40021000 	.word	0x40021000
 800d6fc:	00009fc0 	.word	0x00009fc0
 800d700:	50000400 	.word	0x50000400
 800d704:	50000800 	.word	0x50000800
 800d708:	00009ff2 	.word	0x00009ff2

0800d70c <LPsleep>:

/* USER CODE BEGIN 4 */
void LPsleep(void) {
 800d70c:	b580      	push	{r7, lr}
 800d70e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 800d710:	4b15      	ldr	r3, [pc, #84]	; (800d768 <LPsleep+0x5c>)
 800d712:	0018      	movs	r0, r3
 800d714:	f7f9 fbdc 	bl	8006ed0 <HAL_TIM_Base_Stop_IT>
	LEDclear(&display);
 800d718:	4b14      	ldr	r3, [pc, #80]	; (800d76c <LPsleep+0x60>)
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7fb fbe3 	bl	8008ee6 <LEDclear>
	flags[FLAG_SLEEP] = 0;
 800d720:	4b13      	ldr	r3, [pc, #76]	; (800d770 <LPsleep+0x64>)
 800d722:	2200      	movs	r2, #0
 800d724:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 0);
 800d726:	23a0      	movs	r3, #160	; 0xa0
 800d728:	05db      	lsls	r3, r3, #23
 800d72a:	2200      	movs	r2, #0
 800d72c:	2102      	movs	r1, #2
 800d72e:	0018      	movs	r0, r3
 800d730:	f7f7 f9b7 	bl	8004aa2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800d734:	200a      	movs	r0, #10
 800d736:	f7f5 ffb5 	bl	80036a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_WRITE_GPIO_Port, LED_WRITE_Pin, 0);
 800d73a:	23a0      	movs	r3, #160	; 0xa0
 800d73c:	05db      	lsls	r3, r3, #23
 800d73e:	2200      	movs	r2, #0
 800d740:	2120      	movs	r1, #32
 800d742:	0018      	movs	r0, r3
 800d744:	f7f7 f9ad 	bl	8004aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_STANDBY_GPIO_Port, LED_STANDBY_Pin, 0);
 800d748:	23a0      	movs	r3, #160	; 0xa0
 800d74a:	05db      	lsls	r3, r3, #23
 800d74c:	2200      	movs	r2, #0
 800d74e:	2110      	movs	r1, #16
 800d750:	0018      	movs	r0, r3
 800d752:	f7f7 f9a6 	bl	8004aa2 <HAL_GPIO_WritePin>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,
 800d756:	2380      	movs	r3, #128	; 0x80
 800d758:	01db      	lsls	r3, r3, #7
 800d75a:	2101      	movs	r1, #1
 800d75c:	0018      	movs	r0, r3
 800d75e:	f7f7 ffd7 	bl	8005710 <HAL_PWR_EnterSTOPMode>
	PWR_STOPENTRY_WFI);
}
 800d762:	46c0      	nop			; (mov r8, r8)
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	20000798 	.word	0x20000798
 800d76c:	20000600 	.word	0x20000600
 800d770:	20000180 	.word	0x20000180

0800d774 <LPwakeUp>:

void LPwakeUp(void) {
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800d778:	f7ff fbc6 	bl	800cf08 <SystemClock_Config>
	HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800d77c:	23a0      	movs	r3, #160	; 0xa0
 800d77e:	05db      	lsls	r3, r3, #23
 800d780:	2201      	movs	r2, #1
 800d782:	2102      	movs	r1, #2
 800d784:	0018      	movs	r0, r3
 800d786:	f7f7 f98c 	bl	8004aa2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800d78a:	200a      	movs	r0, #10
 800d78c:	f7f5 ff8a 	bl	80036a4 <HAL_Delay>
	menuResetCurrent(&menu);
 800d790:	4b06      	ldr	r3, [pc, #24]	; (800d7ac <LPwakeUp+0x38>)
 800d792:	0018      	movs	r0, r3
 800d794:	f000 f815 	bl	800d7c2 <menuResetCurrent>
	flags[FLAG_LOCKED] = 0;
 800d798:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <LPwakeUp+0x3c>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 800d79e:	4b05      	ldr	r3, [pc, #20]	; (800d7b4 <LPwakeUp+0x40>)
 800d7a0:	0018      	movs	r0, r3
 800d7a2:	f7f9 fb39 	bl	8006e18 <HAL_TIM_Base_Start_IT>
}
 800d7a6:	46c0      	nop			; (mov r8, r8)
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20000188 	.word	0x20000188
 800d7b0:	20000180 	.word	0x20000180
 800d7b4:	20000798 	.word	0x20000798

0800d7b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d7bc:	b672      	cpsid	i
}
 800d7be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800d7c0:	e7fe      	b.n	800d7c0 <Error_Handler+0x8>

0800d7c2 <menuResetCurrent>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuResetCurrent(MenuTypeDef *menu) {
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	236c      	movs	r3, #108	; 0x6c
 800d7ce:	33ff      	adds	r3, #255	; 0xff
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	18d3      	adds	r3, r2, r3
 800d7d4:	220b      	movs	r2, #11
 800d7d6:	0018      	movs	r0, r3
 800d7d8:	f001 fcb4 	bl	800f144 <memcpy>
	menu->current.childFirst = menu->items[0][0].childFirst;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7a59      	ldrb	r1, [r3, #9]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	23ba      	movs	r3, #186	; 0xba
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	54d1      	strb	r1, [r2, r3]
	menu->current.childLast = menu->items[0][0].childLast;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7a99      	ldrb	r1, [r3, #10]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	2376      	movs	r3, #118	; 0x76
 800d7f0:	33ff      	adds	r3, #255	; 0xff
 800d7f2:	54d1      	strb	r1, [r2, r3]
	menu->current.entry = menu->items[0][0].entry;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7999      	ldrb	r1, [r3, #6]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	2372      	movs	r3, #114	; 0x72
 800d7fc:	33ff      	adds	r3, #255	; 0xff
 800d7fe:	54d1      	strb	r1, [r2, r3]
	menu->current.level = menu->items[0][0].level;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	79d9      	ldrb	r1, [r3, #7]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	23b9      	movs	r3, #185	; 0xb9
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	54d1      	strb	r1, [r2, r3]
//	menu->current.parent = menu->items[0][0].parent;
//	menu->current.value = menu->items[0][0].value;
//	menu->current.value2 = menu->items[0][0].value2;
//	menu->current.value3 = menu->items[0][0].value3;

}
 800d80c:	46c0      	nop			; (mov r8, r8)
 800d80e:	46bd      	mov	sp, r7
 800d810:	b002      	add	sp, #8
 800d812:	bd80      	pop	{r7, pc}

0800d814 <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2, uint8_t value3) {
 800d814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	0008      	movs	r0, r1
 800d81e:	0011      	movs	r1, r2
 800d820:	607b      	str	r3, [r7, #4]
 800d822:	230b      	movs	r3, #11
 800d824:	18fb      	adds	r3, r7, r3
 800d826:	1c02      	adds	r2, r0, #0
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	230a      	movs	r3, #10
 800d82c:	18fb      	adds	r3, r7, r3
 800d82e:	1c0a      	adds	r2, r1, #0
 800d830:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800d832:	2317      	movs	r3, #23
 800d834:	18fb      	adds	r3, r7, r3
 800d836:	2200      	movs	r2, #0
 800d838:	701a      	strb	r2, [r3, #0]
 800d83a:	e01f      	b.n	800d87c <menuItemChangeValue+0x68>

		menu->items[entry][level].value[i] = value[i];
 800d83c:	2617      	movs	r6, #23
 800d83e:	19bb      	adds	r3, r7, r6
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	18d3      	adds	r3, r2, r3
 800d846:	220b      	movs	r2, #11
 800d848:	18ba      	adds	r2, r7, r2
 800d84a:	7811      	ldrb	r1, [r2, #0]
 800d84c:	220a      	movs	r2, #10
 800d84e:	18ba      	adds	r2, r7, r2
 800d850:	7812      	ldrb	r2, [r2, #0]
 800d852:	19b8      	adds	r0, r7, r6
 800d854:	7800      	ldrb	r0, [r0, #0]
 800d856:	781d      	ldrb	r5, [r3, #0]
 800d858:	68fc      	ldr	r4, [r7, #12]
 800d85a:	0013      	movs	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	189b      	adds	r3, r3, r2
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	189b      	adds	r3, r3, r2
 800d864:	000a      	movs	r2, r1
 800d866:	0152      	lsls	r2, r2, #5
 800d868:	1852      	adds	r2, r2, r1
 800d86a:	189b      	adds	r3, r3, r2
 800d86c:	18e3      	adds	r3, r4, r3
 800d86e:	1c2a      	adds	r2, r5, #0
 800d870:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800d872:	19bb      	adds	r3, r7, r6
 800d874:	781a      	ldrb	r2, [r3, #0]
 800d876:	19bb      	adds	r3, r7, r6
 800d878:	3201      	adds	r2, #1
 800d87a:	701a      	strb	r2, [r3, #0]
 800d87c:	2317      	movs	r3, #23
 800d87e:	18fb      	adds	r3, r7, r3
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	2b04      	cmp	r3, #4
 800d884:	d9da      	bls.n	800d83c <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 800d886:	240b      	movs	r4, #11
 800d888:	193b      	adds	r3, r7, r4
 800d88a:	7819      	ldrb	r1, [r3, #0]
 800d88c:	250a      	movs	r5, #10
 800d88e:	197b      	adds	r3, r7, r5
 800d890:	781a      	ldrb	r2, [r3, #0]
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	0013      	movs	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	189b      	adds	r3, r3, r2
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	189b      	adds	r3, r3, r2
 800d89e:	000a      	movs	r2, r1
 800d8a0:	0152      	lsls	r2, r2, #5
 800d8a2:	1852      	adds	r2, r2, r1
 800d8a4:	189b      	adds	r3, r3, r2
 800d8a6:	18c3      	adds	r3, r0, r3
 800d8a8:	1d1a      	adds	r2, r3, #4
 800d8aa:	2328      	movs	r3, #40	; 0x28
 800d8ac:	2108      	movs	r1, #8
 800d8ae:	468c      	mov	ip, r1
 800d8b0:	44bc      	add	ip, r7
 800d8b2:	4463      	add	r3, ip
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].value3 = value3;
 800d8b8:	193b      	adds	r3, r7, r4
 800d8ba:	7819      	ldrb	r1, [r3, #0]
 800d8bc:	197b      	adds	r3, r7, r5
 800d8be:	781a      	ldrb	r2, [r3, #0]
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	0013      	movs	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	189b      	adds	r3, r3, r2
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	189b      	adds	r3, r3, r2
 800d8cc:	000a      	movs	r2, r1
 800d8ce:	0152      	lsls	r2, r2, #5
 800d8d0:	1852      	adds	r2, r2, r1
 800d8d2:	189b      	adds	r3, r3, r2
 800d8d4:	18c3      	adds	r3, r0, r3
 800d8d6:	3305      	adds	r3, #5
 800d8d8:	222c      	movs	r2, #44	; 0x2c
 800d8da:	2108      	movs	r1, #8
 800d8dc:	468c      	mov	ip, r1
 800d8de:	44bc      	add	ip, r7
 800d8e0:	4462      	add	r2, ip
 800d8e2:	7812      	ldrb	r2, [r2, #0]
 800d8e4:	701a      	strb	r2, [r3, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	2372      	movs	r3, #114	; 0x72
 800d8ea:	33ff      	adds	r3, #255	; 0xff
 800d8ec:	5cd3      	ldrb	r3, [r2, r3]
 800d8ee:	193a      	adds	r2, r7, r4
 800d8f0:	7812      	ldrb	r2, [r2, #0]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d15a      	bne.n	800d9ac <menuItemChangeValue+0x198>
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	23b9      	movs	r3, #185	; 0xb9
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	5cd3      	ldrb	r3, [r2, r3]
 800d8fe:	197a      	adds	r2, r7, r5
 800d900:	7812      	ldrb	r2, [r2, #0]
 800d902:	429a      	cmp	r2, r3
 800d904:	d152      	bne.n	800d9ac <menuItemChangeValue+0x198>
		memcpy(menu->current.value,
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	336c      	adds	r3, #108	; 0x6c
 800d90a:	33ff      	adds	r3, #255	; 0xff
 800d90c:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	2372      	movs	r3, #114	; 0x72
 800d912:	33ff      	adds	r3, #255	; 0xff
 800d914:	5cd3      	ldrb	r3, [r2, r3]
 800d916:	0019      	movs	r1, r3
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	23b9      	movs	r3, #185	; 0xb9
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	5cd3      	ldrb	r3, [r2, r3]
 800d920:	001a      	movs	r2, r3
 800d922:	0013      	movs	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	189b      	adds	r3, r3, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	189b      	adds	r3, r3, r2
 800d92c:	000a      	movs	r2, r1
 800d92e:	0152      	lsls	r2, r2, #5
 800d930:	1852      	adds	r2, r2, r1
 800d932:	189b      	adds	r3, r3, r2
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800d938:	2204      	movs	r2, #4
 800d93a:	0019      	movs	r1, r3
 800d93c:	f001 fc02 	bl	800f144 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	2372      	movs	r3, #114	; 0x72
 800d944:	33ff      	adds	r3, #255	; 0xff
 800d946:	5cd3      	ldrb	r3, [r2, r3]
 800d948:	0018      	movs	r0, r3
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	23b9      	movs	r3, #185	; 0xb9
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	5cd3      	ldrb	r3, [r2, r3]
 800d952:	001a      	movs	r2, r3
 800d954:	68f9      	ldr	r1, [r7, #12]
 800d956:	0013      	movs	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	189b      	adds	r3, r3, r2
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	189b      	adds	r3, r3, r2
 800d960:	0002      	movs	r2, r0
 800d962:	0152      	lsls	r2, r2, #5
 800d964:	1812      	adds	r2, r2, r0
 800d966:	189b      	adds	r3, r3, r2
 800d968:	18cb      	adds	r3, r1, r3
 800d96a:	3304      	adds	r3, #4
 800d96c:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	2370      	movs	r3, #112	; 0x70
 800d972:	33ff      	adds	r3, #255	; 0xff
 800d974:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	2372      	movs	r3, #114	; 0x72
 800d97a:	33ff      	adds	r3, #255	; 0xff
 800d97c:	5cd3      	ldrb	r3, [r2, r3]
 800d97e:	0018      	movs	r0, r3
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	23b9      	movs	r3, #185	; 0xb9
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	5cd3      	ldrb	r3, [r2, r3]
 800d988:	001a      	movs	r2, r3
 800d98a:	68f9      	ldr	r1, [r7, #12]
 800d98c:	0013      	movs	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	189b      	adds	r3, r3, r2
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	189b      	adds	r3, r3, r2
 800d996:	0002      	movs	r2, r0
 800d998:	0152      	lsls	r2, r2, #5
 800d99a:	1812      	adds	r2, r2, r0
 800d99c:	189b      	adds	r3, r3, r2
 800d99e:	18cb      	adds	r3, r1, r3
 800d9a0:	3305      	adds	r3, #5
 800d9a2:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	23b8      	movs	r3, #184	; 0xb8
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	54d1      	strb	r1, [r2, r3]
	}

}
 800d9ac:	46c0      	nop			; (mov r8, r8)
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	b007      	add	sp, #28
 800d9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9b4 <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	000c      	movs	r4, r1
 800d9be:	0010      	movs	r0, r2
 800d9c0:	0019      	movs	r1, r3
 800d9c2:	1cfb      	adds	r3, r7, #3
 800d9c4:	1c22      	adds	r2, r4, #0
 800d9c6:	701a      	strb	r2, [r3, #0]
 800d9c8:	1cbb      	adds	r3, r7, #2
 800d9ca:	1c02      	adds	r2, r0, #0
 800d9cc:	701a      	strb	r2, [r3, #0]
 800d9ce:	1c7b      	adds	r3, r7, #1
 800d9d0:	1c0a      	adds	r2, r1, #0
 800d9d2:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 800d9d4:	1cfb      	adds	r3, r7, #3
 800d9d6:	7819      	ldrb	r1, [r3, #0]
 800d9d8:	1cbb      	adds	r3, r7, #2
 800d9da:	781a      	ldrb	r2, [r3, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	0013      	movs	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	189b      	adds	r3, r3, r2
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	189b      	adds	r3, r3, r2
 800d9e8:	000a      	movs	r2, r1
 800d9ea:	0152      	lsls	r2, r2, #5
 800d9ec:	1852      	adds	r2, r2, r1
 800d9ee:	189b      	adds	r3, r3, r2
 800d9f0:	18c3      	adds	r3, r0, r3
 800d9f2:	3306      	adds	r3, #6
 800d9f4:	1cfa      	adds	r2, r7, #3
 800d9f6:	7812      	ldrb	r2, [r2, #0]
 800d9f8:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 800d9fa:	1cfb      	adds	r3, r7, #3
 800d9fc:	7819      	ldrb	r1, [r3, #0]
 800d9fe:	1cbb      	adds	r3, r7, #2
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	0013      	movs	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	189b      	adds	r3, r3, r2
 800da0a:	005b      	lsls	r3, r3, #1
 800da0c:	189b      	adds	r3, r3, r2
 800da0e:	000a      	movs	r2, r1
 800da10:	0152      	lsls	r2, r2, #5
 800da12:	1852      	adds	r2, r2, r1
 800da14:	189b      	adds	r3, r3, r2
 800da16:	18c3      	adds	r3, r0, r3
 800da18:	3307      	adds	r3, #7
 800da1a:	1cba      	adds	r2, r7, #2
 800da1c:	7812      	ldrb	r2, [r2, #0]
 800da1e:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 800da20:	1cfb      	adds	r3, r7, #3
 800da22:	7819      	ldrb	r1, [r3, #0]
 800da24:	1cbb      	adds	r3, r7, #2
 800da26:	781a      	ldrb	r2, [r3, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	0013      	movs	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	189b      	adds	r3, r3, r2
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	189b      	adds	r3, r3, r2
 800da34:	000a      	movs	r2, r1
 800da36:	0152      	lsls	r2, r2, #5
 800da38:	1852      	adds	r2, r2, r1
 800da3a:	189b      	adds	r3, r3, r2
 800da3c:	18c3      	adds	r3, r0, r3
 800da3e:	3308      	adds	r3, #8
 800da40:	1c7a      	adds	r2, r7, #1
 800da42:	7812      	ldrb	r2, [r2, #0]
 800da44:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 800da46:	1cfb      	adds	r3, r7, #3
 800da48:	7819      	ldrb	r1, [r3, #0]
 800da4a:	1cbb      	adds	r3, r7, #2
 800da4c:	781a      	ldrb	r2, [r3, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	0013      	movs	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	189b      	adds	r3, r3, r2
 800da56:	005b      	lsls	r3, r3, #1
 800da58:	189b      	adds	r3, r3, r2
 800da5a:	000a      	movs	r2, r1
 800da5c:	0152      	lsls	r2, r2, #5
 800da5e:	1852      	adds	r2, r2, r1
 800da60:	189b      	adds	r3, r3, r2
 800da62:	18c3      	adds	r3, r0, r3
 800da64:	3309      	adds	r3, #9
 800da66:	001a      	movs	r2, r3
 800da68:	2318      	movs	r3, #24
 800da6a:	18fb      	adds	r3, r7, r3
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 800da70:	1cfb      	adds	r3, r7, #3
 800da72:	7819      	ldrb	r1, [r3, #0]
 800da74:	1cbb      	adds	r3, r7, #2
 800da76:	781a      	ldrb	r2, [r3, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	0013      	movs	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	189b      	adds	r3, r3, r2
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	189b      	adds	r3, r3, r2
 800da84:	000a      	movs	r2, r1
 800da86:	0152      	lsls	r2, r2, #5
 800da88:	1852      	adds	r2, r2, r1
 800da8a:	189b      	adds	r3, r3, r2
 800da8c:	18c3      	adds	r3, r0, r3
 800da8e:	330a      	adds	r3, #10
 800da90:	221c      	movs	r2, #28
 800da92:	18ba      	adds	r2, r7, r2
 800da94:	7812      	ldrb	r2, [r2, #0]
 800da96:	701a      	strb	r2, [r3, #0]

}
 800da98:	46c0      	nop			; (mov r8, r8)
 800da9a:	46bd      	mov	sp, r7
 800da9c:	b003      	add	sp, #12
 800da9e:	bd90      	pop	{r4, r7, pc}

0800daa0 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 800daa0:	b590      	push	{r4, r7, lr}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	000a      	movs	r2, r1
 800daaa:	1cfb      	adds	r3, r7, #3
 800daac:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 800daae:	1cfb      	adds	r3, r7, #3
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d000      	beq.n	800dab8 <menuSwitch+0x18>
 800dab6:	e0e2      	b.n	800dc7e <menuSwitch+0x1de>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	23b9      	movs	r3, #185	; 0xb9
 800dabc:	005b      	lsls	r3, r3, #1
 800dabe:	5cd3      	ldrb	r3, [r2, r3]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d105      	bne.n	800dad0 <menuSwitch+0x30>
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	2372      	movs	r3, #114	; 0x72
 800dac8:	33ff      	adds	r3, #255	; 0xff
 800daca:	5cd3      	ldrb	r3, [r2, r3]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d124      	bne.n	800db1a <menuSwitch+0x7a>
				|| (menu->current.level != 0
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	23b9      	movs	r3, #185	; 0xb9
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	5cd3      	ldrb	r3, [r2, r3]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d100      	bne.n	800dade <menuSwitch+0x3e>
 800dadc:	e0cd      	b.n	800dc7a <menuSwitch+0x1da>
						&& menu->current.entry
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	2372      	movs	r3, #114	; 0x72
 800dae2:	33ff      	adds	r3, #255	; 0xff
 800dae4:	5cd1      	ldrb	r1, [r2, r3]
								> menu->items[menu->current.parent][menu->current.level
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	2374      	movs	r3, #116	; 0x74
 800daea:	33ff      	adds	r3, #255	; 0xff
 800daec:	5cd3      	ldrb	r3, [r2, r3]
 800daee:	001c      	movs	r4, r3
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	23b9      	movs	r3, #185	; 0xb9
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childFirst)) {
 800daf8:	1e5a      	subs	r2, r3, #1
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	0013      	movs	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	189b      	adds	r3, r3, r2
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	189b      	adds	r3, r3, r2
 800db06:	0022      	movs	r2, r4
 800db08:	0152      	lsls	r2, r2, #5
 800db0a:	1912      	adds	r2, r2, r4
 800db0c:	189b      	adds	r3, r3, r2
 800db0e:	18c3      	adds	r3, r0, r3
 800db10:	3309      	adds	r3, #9
 800db12:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800db14:	4299      	cmp	r1, r3
 800db16:	d800      	bhi.n	800db1a <menuSwitch+0x7a>
 800db18:	e0af      	b.n	800dc7a <menuSwitch+0x1da>

			menu->current.entry--;
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	2372      	movs	r3, #114	; 0x72
 800db1e:	33ff      	adds	r3, #255	; 0xff
 800db20:	5cd3      	ldrb	r3, [r2, r3]
 800db22:	3b01      	subs	r3, #1
 800db24:	b2d9      	uxtb	r1, r3
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	2372      	movs	r3, #114	; 0x72
 800db2a:	33ff      	adds	r3, #255	; 0xff
 800db2c:	54d1      	strb	r1, [r2, r3]
			memcpy(menu->current.value,
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	336c      	adds	r3, #108	; 0x6c
 800db32:	33ff      	adds	r3, #255	; 0xff
 800db34:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	2372      	movs	r3, #114	; 0x72
 800db3a:	33ff      	adds	r3, #255	; 0xff
 800db3c:	5cd3      	ldrb	r3, [r2, r3]
 800db3e:	0019      	movs	r1, r3
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	23b9      	movs	r3, #185	; 0xb9
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	5cd3      	ldrb	r3, [r2, r3]
 800db48:	001a      	movs	r2, r3
 800db4a:	0013      	movs	r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	189b      	adds	r3, r3, r2
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	189b      	adds	r3, r3, r2
 800db54:	000a      	movs	r2, r1
 800db56:	0152      	lsls	r2, r2, #5
 800db58:	1852      	adds	r2, r2, r1
 800db5a:	189b      	adds	r3, r3, r2
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800db60:	2204      	movs	r2, #4
 800db62:	0019      	movs	r1, r3
 800db64:	f001 faee 	bl	800f144 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	2372      	movs	r3, #114	; 0x72
 800db6c:	33ff      	adds	r3, #255	; 0xff
 800db6e:	5cd3      	ldrb	r3, [r2, r3]
 800db70:	0018      	movs	r0, r3
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	23b9      	movs	r3, #185	; 0xb9
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	5cd3      	ldrb	r3, [r2, r3]
 800db7a:	001a      	movs	r2, r3
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	0013      	movs	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	189b      	adds	r3, r3, r2
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	189b      	adds	r3, r3, r2
 800db88:	0002      	movs	r2, r0
 800db8a:	0152      	lsls	r2, r2, #5
 800db8c:	1812      	adds	r2, r2, r0
 800db8e:	189b      	adds	r3, r3, r2
 800db90:	18cb      	adds	r3, r1, r3
 800db92:	3304      	adds	r3, #4
 800db94:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	2370      	movs	r3, #112	; 0x70
 800db9a:	33ff      	adds	r3, #255	; 0xff
 800db9c:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	2372      	movs	r3, #114	; 0x72
 800dba2:	33ff      	adds	r3, #255	; 0xff
 800dba4:	5cd3      	ldrb	r3, [r2, r3]
 800dba6:	0018      	movs	r0, r3
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	23b9      	movs	r3, #185	; 0xb9
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	5cd3      	ldrb	r3, [r2, r3]
 800dbb0:	001a      	movs	r2, r3
 800dbb2:	6879      	ldr	r1, [r7, #4]
 800dbb4:	0013      	movs	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	189b      	adds	r3, r3, r2
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	189b      	adds	r3, r3, r2
 800dbbe:	0002      	movs	r2, r0
 800dbc0:	0152      	lsls	r2, r2, #5
 800dbc2:	1812      	adds	r2, r2, r0
 800dbc4:	189b      	adds	r3, r3, r2
 800dbc6:	18cb      	adds	r3, r1, r3
 800dbc8:	3305      	adds	r3, #5
 800dbca:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	23b8      	movs	r3, #184	; 0xb8
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	2372      	movs	r3, #114	; 0x72
 800dbd8:	33ff      	adds	r3, #255	; 0xff
 800dbda:	5cd3      	ldrb	r3, [r2, r3]
 800dbdc:	0018      	movs	r0, r3
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	23b9      	movs	r3, #185	; 0xb9
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	5cd3      	ldrb	r3, [r2, r3]
 800dbe6:	001a      	movs	r2, r3
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	0013      	movs	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	189b      	adds	r3, r3, r2
 800dbf0:	005b      	lsls	r3, r3, #1
 800dbf2:	189b      	adds	r3, r3, r2
 800dbf4:	0002      	movs	r2, r0
 800dbf6:	0152      	lsls	r2, r2, #5
 800dbf8:	1812      	adds	r2, r2, r0
 800dbfa:	189b      	adds	r3, r3, r2
 800dbfc:	18cb      	adds	r3, r1, r3
 800dbfe:	3308      	adds	r3, #8
 800dc00:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	2374      	movs	r3, #116	; 0x74
 800dc06:	33ff      	adds	r3, #255	; 0xff
 800dc08:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	2372      	movs	r3, #114	; 0x72
 800dc0e:	33ff      	adds	r3, #255	; 0xff
 800dc10:	5cd3      	ldrb	r3, [r2, r3]
 800dc12:	0018      	movs	r0, r3
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	23b9      	movs	r3, #185	; 0xb9
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	5cd3      	ldrb	r3, [r2, r3]
 800dc1c:	001a      	movs	r2, r3
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	0013      	movs	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	189b      	adds	r3, r3, r2
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	189b      	adds	r3, r3, r2
 800dc2a:	0002      	movs	r2, r0
 800dc2c:	0152      	lsls	r2, r2, #5
 800dc2e:	1812      	adds	r2, r2, r0
 800dc30:	189b      	adds	r3, r3, r2
 800dc32:	18cb      	adds	r3, r1, r3
 800dc34:	3309      	adds	r3, #9
 800dc36:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	23ba      	movs	r3, #186	; 0xba
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	2372      	movs	r3, #114	; 0x72
 800dc44:	33ff      	adds	r3, #255	; 0xff
 800dc46:	5cd3      	ldrb	r3, [r2, r3]
 800dc48:	0018      	movs	r0, r3
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	23b9      	movs	r3, #185	; 0xb9
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	5cd3      	ldrb	r3, [r2, r3]
 800dc52:	001a      	movs	r2, r3
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	0013      	movs	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	189b      	adds	r3, r3, r2
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	189b      	adds	r3, r3, r2
 800dc60:	0002      	movs	r2, r0
 800dc62:	0152      	lsls	r2, r2, #5
 800dc64:	1812      	adds	r2, r2, r0
 800dc66:	189b      	adds	r3, r3, r2
 800dc68:	18cb      	adds	r3, r1, r3
 800dc6a:	330a      	adds	r3, #10
 800dc6c:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	2376      	movs	r3, #118	; 0x76
 800dc72:	33ff      	adds	r3, #255	; 0xff
 800dc74:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e25f      	b.n	800e13a <menuSwitch+0x69a>
		} else {
			return MENU_ERROR;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e25d      	b.n	800e13a <menuSwitch+0x69a>
		}

	} else if (direction == MENU_DOWN) {
 800dc7e:	1cfb      	adds	r3, r7, #3
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d000      	beq.n	800dc88 <menuSwitch+0x1e8>
 800dc86:	e0e2      	b.n	800de4e <menuSwitch+0x3ae>

		if ((menu->current.level == 0
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	23b9      	movs	r3, #185	; 0xb9
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	5cd3      	ldrb	r3, [r2, r3]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d105      	bne.n	800dca0 <menuSwitch+0x200>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	2372      	movs	r3, #114	; 0x72
 800dc98:	33ff      	adds	r3, #255	; 0xff
 800dc9a:	5cd3      	ldrb	r3, [r2, r3]
 800dc9c:	2b06      	cmp	r3, #6
 800dc9e:	d924      	bls.n	800dcea <menuSwitch+0x24a>
				|| (menu->current.level != 0
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	23b9      	movs	r3, #185	; 0xb9
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	5cd3      	ldrb	r3, [r2, r3]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d100      	bne.n	800dcae <menuSwitch+0x20e>
 800dcac:	e0cd      	b.n	800de4a <menuSwitch+0x3aa>
						&& menu->current.entry
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	2372      	movs	r3, #114	; 0x72
 800dcb2:	33ff      	adds	r3, #255	; 0xff
 800dcb4:	5cd1      	ldrb	r1, [r2, r3]
								< menu->items[menu->current.parent][menu->current.level
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	2374      	movs	r3, #116	; 0x74
 800dcba:	33ff      	adds	r3, #255	; 0xff
 800dcbc:	5cd3      	ldrb	r3, [r2, r3]
 800dcbe:	001c      	movs	r4, r3
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	23b9      	movs	r3, #185	; 0xb9
 800dcc4:	005b      	lsls	r3, r3, #1
 800dcc6:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childLast)) {
 800dcc8:	1e5a      	subs	r2, r3, #1
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	0013      	movs	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	189b      	adds	r3, r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	189b      	adds	r3, r3, r2
 800dcd6:	0022      	movs	r2, r4
 800dcd8:	0152      	lsls	r2, r2, #5
 800dcda:	1912      	adds	r2, r2, r4
 800dcdc:	189b      	adds	r3, r3, r2
 800dcde:	18c3      	adds	r3, r0, r3
 800dce0:	330a      	adds	r3, #10
 800dce2:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800dce4:	4299      	cmp	r1, r3
 800dce6:	d300      	bcc.n	800dcea <menuSwitch+0x24a>
 800dce8:	e0af      	b.n	800de4a <menuSwitch+0x3aa>

			menu->current.entry++;
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	2372      	movs	r3, #114	; 0x72
 800dcee:	33ff      	adds	r3, #255	; 0xff
 800dcf0:	5cd3      	ldrb	r3, [r2, r3]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b2d9      	uxtb	r1, r3
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	2372      	movs	r3, #114	; 0x72
 800dcfa:	33ff      	adds	r3, #255	; 0xff
 800dcfc:	54d1      	strb	r1, [r2, r3]

			memcpy(menu->current.value,
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	336c      	adds	r3, #108	; 0x6c
 800dd02:	33ff      	adds	r3, #255	; 0xff
 800dd04:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	2372      	movs	r3, #114	; 0x72
 800dd0a:	33ff      	adds	r3, #255	; 0xff
 800dd0c:	5cd3      	ldrb	r3, [r2, r3]
 800dd0e:	0019      	movs	r1, r3
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	23b9      	movs	r3, #185	; 0xb9
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	5cd3      	ldrb	r3, [r2, r3]
 800dd18:	001a      	movs	r2, r3
 800dd1a:	0013      	movs	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	189b      	adds	r3, r3, r2
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	189b      	adds	r3, r3, r2
 800dd24:	000a      	movs	r2, r1
 800dd26:	0152      	lsls	r2, r2, #5
 800dd28:	1852      	adds	r2, r2, r1
 800dd2a:	189b      	adds	r3, r3, r2
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800dd30:	2204      	movs	r2, #4
 800dd32:	0019      	movs	r1, r3
 800dd34:	f001 fa06 	bl	800f144 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	2372      	movs	r3, #114	; 0x72
 800dd3c:	33ff      	adds	r3, #255	; 0xff
 800dd3e:	5cd3      	ldrb	r3, [r2, r3]
 800dd40:	0018      	movs	r0, r3
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	23b9      	movs	r3, #185	; 0xb9
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	5cd3      	ldrb	r3, [r2, r3]
 800dd4a:	001a      	movs	r2, r3
 800dd4c:	6879      	ldr	r1, [r7, #4]
 800dd4e:	0013      	movs	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	189b      	adds	r3, r3, r2
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	189b      	adds	r3, r3, r2
 800dd58:	0002      	movs	r2, r0
 800dd5a:	0152      	lsls	r2, r2, #5
 800dd5c:	1812      	adds	r2, r2, r0
 800dd5e:	189b      	adds	r3, r3, r2
 800dd60:	18cb      	adds	r3, r1, r3
 800dd62:	3304      	adds	r3, #4
 800dd64:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	2370      	movs	r3, #112	; 0x70
 800dd6a:	33ff      	adds	r3, #255	; 0xff
 800dd6c:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	2372      	movs	r3, #114	; 0x72
 800dd72:	33ff      	adds	r3, #255	; 0xff
 800dd74:	5cd3      	ldrb	r3, [r2, r3]
 800dd76:	0018      	movs	r0, r3
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	23b9      	movs	r3, #185	; 0xb9
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	5cd3      	ldrb	r3, [r2, r3]
 800dd80:	001a      	movs	r2, r3
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	0013      	movs	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	189b      	adds	r3, r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	189b      	adds	r3, r3, r2
 800dd8e:	0002      	movs	r2, r0
 800dd90:	0152      	lsls	r2, r2, #5
 800dd92:	1812      	adds	r2, r2, r0
 800dd94:	189b      	adds	r3, r3, r2
 800dd96:	18cb      	adds	r3, r1, r3
 800dd98:	3305      	adds	r3, #5
 800dd9a:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	23b8      	movs	r3, #184	; 0xb8
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	2372      	movs	r3, #114	; 0x72
 800dda8:	33ff      	adds	r3, #255	; 0xff
 800ddaa:	5cd3      	ldrb	r3, [r2, r3]
 800ddac:	0018      	movs	r0, r3
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	23b9      	movs	r3, #185	; 0xb9
 800ddb2:	005b      	lsls	r3, r3, #1
 800ddb4:	5cd3      	ldrb	r3, [r2, r3]
 800ddb6:	001a      	movs	r2, r3
 800ddb8:	6879      	ldr	r1, [r7, #4]
 800ddba:	0013      	movs	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	189b      	adds	r3, r3, r2
 800ddc0:	005b      	lsls	r3, r3, #1
 800ddc2:	189b      	adds	r3, r3, r2
 800ddc4:	0002      	movs	r2, r0
 800ddc6:	0152      	lsls	r2, r2, #5
 800ddc8:	1812      	adds	r2, r2, r0
 800ddca:	189b      	adds	r3, r3, r2
 800ddcc:	18cb      	adds	r3, r1, r3
 800ddce:	3308      	adds	r3, #8
 800ddd0:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	2374      	movs	r3, #116	; 0x74
 800ddd6:	33ff      	adds	r3, #255	; 0xff
 800ddd8:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	2372      	movs	r3, #114	; 0x72
 800ddde:	33ff      	adds	r3, #255	; 0xff
 800dde0:	5cd3      	ldrb	r3, [r2, r3]
 800dde2:	0018      	movs	r0, r3
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	23b9      	movs	r3, #185	; 0xb9
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	5cd3      	ldrb	r3, [r2, r3]
 800ddec:	001a      	movs	r2, r3
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	0013      	movs	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	189b      	adds	r3, r3, r2
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	189b      	adds	r3, r3, r2
 800ddfa:	0002      	movs	r2, r0
 800ddfc:	0152      	lsls	r2, r2, #5
 800ddfe:	1812      	adds	r2, r2, r0
 800de00:	189b      	adds	r3, r3, r2
 800de02:	18cb      	adds	r3, r1, r3
 800de04:	3309      	adds	r3, #9
 800de06:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	23ba      	movs	r3, #186	; 0xba
 800de0c:	005b      	lsls	r3, r3, #1
 800de0e:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	2372      	movs	r3, #114	; 0x72
 800de14:	33ff      	adds	r3, #255	; 0xff
 800de16:	5cd3      	ldrb	r3, [r2, r3]
 800de18:	0018      	movs	r0, r3
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	23b9      	movs	r3, #185	; 0xb9
 800de1e:	005b      	lsls	r3, r3, #1
 800de20:	5cd3      	ldrb	r3, [r2, r3]
 800de22:	001a      	movs	r2, r3
 800de24:	6879      	ldr	r1, [r7, #4]
 800de26:	0013      	movs	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	189b      	adds	r3, r3, r2
 800de2c:	005b      	lsls	r3, r3, #1
 800de2e:	189b      	adds	r3, r3, r2
 800de30:	0002      	movs	r2, r0
 800de32:	0152      	lsls	r2, r2, #5
 800de34:	1812      	adds	r2, r2, r0
 800de36:	189b      	adds	r3, r3, r2
 800de38:	18cb      	adds	r3, r1, r3
 800de3a:	330a      	adds	r3, #10
 800de3c:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	2376      	movs	r3, #118	; 0x76
 800de42:	33ff      	adds	r3, #255	; 0xff
 800de44:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800de46:	2301      	movs	r3, #1
 800de48:	e177      	b.n	800e13a <menuSwitch+0x69a>

		} else {
			return MENU_ERROR;
 800de4a:	2300      	movs	r3, #0
 800de4c:	e175      	b.n	800e13a <menuSwitch+0x69a>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 800de4e:	1cfb      	adds	r3, r7, #3
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d000      	beq.n	800de58 <menuSwitch+0x3b8>
 800de56:	e0ab      	b.n	800dfb0 <menuSwitch+0x510>
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	23ba      	movs	r3, #186	; 0xba
 800de5c:	005b      	lsls	r3, r3, #1
 800de5e:	5cd3      	ldrb	r3, [r2, r3]
 800de60:	2bff      	cmp	r3, #255	; 0xff
 800de62:	d100      	bne.n	800de66 <menuSwitch+0x3c6>
 800de64:	e0a4      	b.n	800dfb0 <menuSwitch+0x510>

		menu->current.parent = menu->current.entry;
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	2372      	movs	r3, #114	; 0x72
 800de6a:	33ff      	adds	r3, #255	; 0xff
 800de6c:	5cd1      	ldrb	r1, [r2, r3]
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	2374      	movs	r3, #116	; 0x74
 800de72:	33ff      	adds	r3, #255	; 0xff
 800de74:	54d1      	strb	r1, [r2, r3]
		menu->current.entry = menu->current.childFirst;
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	23ba      	movs	r3, #186	; 0xba
 800de7a:	005b      	lsls	r3, r3, #1
 800de7c:	5cd1      	ldrb	r1, [r2, r3]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	2372      	movs	r3, #114	; 0x72
 800de82:	33ff      	adds	r3, #255	; 0xff
 800de84:	54d1      	strb	r1, [r2, r3]
		menu->current.level++;
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	23b9      	movs	r3, #185	; 0xb9
 800de8a:	005b      	lsls	r3, r3, #1
 800de8c:	5cd3      	ldrb	r3, [r2, r3]
 800de8e:	3301      	adds	r3, #1
 800de90:	b2d9      	uxtb	r1, r3
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	23b9      	movs	r3, #185	; 0xb9
 800de96:	005b      	lsls	r3, r3, #1
 800de98:	54d1      	strb	r1, [r2, r3]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	2372      	movs	r3, #114	; 0x72
 800de9e:	33ff      	adds	r3, #255	; 0xff
 800dea0:	5cd3      	ldrb	r3, [r2, r3]
 800dea2:	0018      	movs	r0, r3
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	23b9      	movs	r3, #185	; 0xb9
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	5cd3      	ldrb	r3, [r2, r3]
 800deac:	001a      	movs	r2, r3
 800deae:	6879      	ldr	r1, [r7, #4]
 800deb0:	0013      	movs	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	189b      	adds	r3, r3, r2
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	189b      	adds	r3, r3, r2
 800deba:	0002      	movs	r2, r0
 800debc:	0152      	lsls	r2, r2, #5
 800debe:	1812      	adds	r2, r2, r0
 800dec0:	189b      	adds	r3, r3, r2
 800dec2:	18cb      	adds	r3, r1, r3
 800dec4:	3309      	adds	r3, #9
 800dec6:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	23ba      	movs	r3, #186	; 0xba
 800decc:	005b      	lsls	r3, r3, #1
 800dece:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	2372      	movs	r3, #114	; 0x72
 800ded4:	33ff      	adds	r3, #255	; 0xff
 800ded6:	5cd3      	ldrb	r3, [r2, r3]
 800ded8:	0018      	movs	r0, r3
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	23b9      	movs	r3, #185	; 0xb9
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	5cd3      	ldrb	r3, [r2, r3]
 800dee2:	001a      	movs	r2, r3
 800dee4:	6879      	ldr	r1, [r7, #4]
 800dee6:	0013      	movs	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	189b      	adds	r3, r3, r2
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	189b      	adds	r3, r3, r2
 800def0:	0002      	movs	r2, r0
 800def2:	0152      	lsls	r2, r2, #5
 800def4:	1812      	adds	r2, r2, r0
 800def6:	189b      	adds	r3, r3, r2
 800def8:	18cb      	adds	r3, r1, r3
 800defa:	330a      	adds	r3, #10
 800defc:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	2376      	movs	r3, #118	; 0x76
 800df02:	33ff      	adds	r3, #255	; 0xff
 800df04:	54d1      	strb	r1, [r2, r3]
		memcpy(menu->current.value,
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	336c      	adds	r3, #108	; 0x6c
 800df0a:	33ff      	adds	r3, #255	; 0xff
 800df0c:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	2372      	movs	r3, #114	; 0x72
 800df12:	33ff      	adds	r3, #255	; 0xff
 800df14:	5cd3      	ldrb	r3, [r2, r3]
 800df16:	0019      	movs	r1, r3
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	23b9      	movs	r3, #185	; 0xb9
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	5cd3      	ldrb	r3, [r2, r3]
 800df20:	001a      	movs	r2, r3
 800df22:	0013      	movs	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	189b      	adds	r3, r3, r2
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	189b      	adds	r3, r3, r2
 800df2c:	000a      	movs	r2, r1
 800df2e:	0152      	lsls	r2, r2, #5
 800df30:	1852      	adds	r2, r2, r1
 800df32:	189b      	adds	r3, r3, r2
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800df38:	2204      	movs	r2, #4
 800df3a:	0019      	movs	r1, r3
 800df3c:	f001 f902 	bl	800f144 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	2372      	movs	r3, #114	; 0x72
 800df44:	33ff      	adds	r3, #255	; 0xff
 800df46:	5cd3      	ldrb	r3, [r2, r3]
 800df48:	0018      	movs	r0, r3
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	23b9      	movs	r3, #185	; 0xb9
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	5cd3      	ldrb	r3, [r2, r3]
 800df52:	001a      	movs	r2, r3
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	0013      	movs	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	189b      	adds	r3, r3, r2
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	189b      	adds	r3, r3, r2
 800df60:	0002      	movs	r2, r0
 800df62:	0152      	lsls	r2, r2, #5
 800df64:	1812      	adds	r2, r2, r0
 800df66:	189b      	adds	r3, r3, r2
 800df68:	18cb      	adds	r3, r1, r3
 800df6a:	3304      	adds	r3, #4
 800df6c:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	2370      	movs	r3, #112	; 0x70
 800df72:	33ff      	adds	r3, #255	; 0xff
 800df74:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	2372      	movs	r3, #114	; 0x72
 800df7a:	33ff      	adds	r3, #255	; 0xff
 800df7c:	5cd3      	ldrb	r3, [r2, r3]
 800df7e:	0018      	movs	r0, r3
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	23b9      	movs	r3, #185	; 0xb9
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	5cd3      	ldrb	r3, [r2, r3]
 800df88:	001a      	movs	r2, r3
 800df8a:	6879      	ldr	r1, [r7, #4]
 800df8c:	0013      	movs	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	189b      	adds	r3, r3, r2
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	189b      	adds	r3, r3, r2
 800df96:	0002      	movs	r2, r0
 800df98:	0152      	lsls	r2, r2, #5
 800df9a:	1812      	adds	r2, r2, r0
 800df9c:	189b      	adds	r3, r3, r2
 800df9e:	18cb      	adds	r3, r1, r3
 800dfa0:	3305      	adds	r3, #5
 800dfa2:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	23b8      	movs	r3, #184	; 0xb8
 800dfa8:	005b      	lsls	r3, r3, #1
 800dfaa:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e0c4      	b.n	800e13a <menuSwitch+0x69a>

	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 800dfb0:	1cfb      	adds	r3, r7, #3
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d000      	beq.n	800dfba <menuSwitch+0x51a>
 800dfb8:	e0be      	b.n	800e138 <menuSwitch+0x698>
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	2374      	movs	r3, #116	; 0x74
 800dfbe:	33ff      	adds	r3, #255	; 0xff
 800dfc0:	5cd3      	ldrb	r3, [r2, r3]
 800dfc2:	2bff      	cmp	r3, #255	; 0xff
 800dfc4:	d100      	bne.n	800dfc8 <menuSwitch+0x528>
 800dfc6:	e0b7      	b.n	800e138 <menuSwitch+0x698>

		menu->current.entry = menu->current.parent;
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	2374      	movs	r3, #116	; 0x74
 800dfcc:	33ff      	adds	r3, #255	; 0xff
 800dfce:	5cd1      	ldrb	r1, [r2, r3]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	2372      	movs	r3, #114	; 0x72
 800dfd4:	33ff      	adds	r3, #255	; 0xff
 800dfd6:	54d1      	strb	r1, [r2, r3]
		menu->current.level--;
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	23b9      	movs	r3, #185	; 0xb9
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	5cd3      	ldrb	r3, [r2, r3]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	b2d9      	uxtb	r1, r3
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	23b9      	movs	r3, #185	; 0xb9
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	54d1      	strb	r1, [r2, r3]
		menu->current.parent = menu->items[menu->current.parent][menu->current.level].parent;
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	2374      	movs	r3, #116	; 0x74
 800dff0:	33ff      	adds	r3, #255	; 0xff
 800dff2:	5cd3      	ldrb	r3, [r2, r3]
 800dff4:	0018      	movs	r0, r3
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	23b9      	movs	r3, #185	; 0xb9
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	5cd3      	ldrb	r3, [r2, r3]
 800dffe:	001a      	movs	r2, r3
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	0013      	movs	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	189b      	adds	r3, r3, r2
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	189b      	adds	r3, r3, r2
 800e00c:	0002      	movs	r2, r0
 800e00e:	0152      	lsls	r2, r2, #5
 800e010:	1812      	adds	r2, r2, r0
 800e012:	189b      	adds	r3, r3, r2
 800e014:	18cb      	adds	r3, r1, r3
 800e016:	3308      	adds	r3, #8
 800e018:	7819      	ldrb	r1, [r3, #0]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	2374      	movs	r3, #116	; 0x74
 800e01e:	33ff      	adds	r3, #255	; 0xff
 800e020:	54d1      	strb	r1, [r2, r3]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	2372      	movs	r3, #114	; 0x72
 800e026:	33ff      	adds	r3, #255	; 0xff
 800e028:	5cd3      	ldrb	r3, [r2, r3]
 800e02a:	0018      	movs	r0, r3
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	23b9      	movs	r3, #185	; 0xb9
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	5cd3      	ldrb	r3, [r2, r3]
 800e034:	001a      	movs	r2, r3
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	0013      	movs	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	189b      	adds	r3, r3, r2
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	189b      	adds	r3, r3, r2
 800e042:	0002      	movs	r2, r0
 800e044:	0152      	lsls	r2, r2, #5
 800e046:	1812      	adds	r2, r2, r0
 800e048:	189b      	adds	r3, r3, r2
 800e04a:	18cb      	adds	r3, r1, r3
 800e04c:	3309      	adds	r3, #9
 800e04e:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	23ba      	movs	r3, #186	; 0xba
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	2372      	movs	r3, #114	; 0x72
 800e05c:	33ff      	adds	r3, #255	; 0xff
 800e05e:	5cd3      	ldrb	r3, [r2, r3]
 800e060:	0018      	movs	r0, r3
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	23b9      	movs	r3, #185	; 0xb9
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	5cd3      	ldrb	r3, [r2, r3]
 800e06a:	001a      	movs	r2, r3
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	0013      	movs	r3, r2
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	189b      	adds	r3, r3, r2
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	189b      	adds	r3, r3, r2
 800e078:	0002      	movs	r2, r0
 800e07a:	0152      	lsls	r2, r2, #5
 800e07c:	1812      	adds	r2, r2, r0
 800e07e:	189b      	adds	r3, r3, r2
 800e080:	18cb      	adds	r3, r1, r3
 800e082:	330a      	adds	r3, #10
 800e084:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	2376      	movs	r3, #118	; 0x76
 800e08a:	33ff      	adds	r3, #255	; 0xff
 800e08c:	54d1      	strb	r1, [r2, r3]

		memcpy(menu->current.value,
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	336c      	adds	r3, #108	; 0x6c
 800e092:	33ff      	adds	r3, #255	; 0xff
 800e094:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	2372      	movs	r3, #114	; 0x72
 800e09a:	33ff      	adds	r3, #255	; 0xff
 800e09c:	5cd3      	ldrb	r3, [r2, r3]
 800e09e:	0019      	movs	r1, r3
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	23b9      	movs	r3, #185	; 0xb9
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	5cd3      	ldrb	r3, [r2, r3]
 800e0a8:	001a      	movs	r2, r3
 800e0aa:	0013      	movs	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	189b      	adds	r3, r3, r2
 800e0b0:	005b      	lsls	r3, r3, #1
 800e0b2:	189b      	adds	r3, r3, r2
 800e0b4:	000a      	movs	r2, r1
 800e0b6:	0152      	lsls	r2, r2, #5
 800e0b8:	1852      	adds	r2, r2, r1
 800e0ba:	189b      	adds	r3, r3, r2
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800e0c0:	2204      	movs	r2, #4
 800e0c2:	0019      	movs	r1, r3
 800e0c4:	f001 f83e 	bl	800f144 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	2372      	movs	r3, #114	; 0x72
 800e0cc:	33ff      	adds	r3, #255	; 0xff
 800e0ce:	5cd3      	ldrb	r3, [r2, r3]
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	23b9      	movs	r3, #185	; 0xb9
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	5cd3      	ldrb	r3, [r2, r3]
 800e0da:	001a      	movs	r2, r3
 800e0dc:	6879      	ldr	r1, [r7, #4]
 800e0de:	0013      	movs	r3, r2
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	189b      	adds	r3, r3, r2
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	189b      	adds	r3, r3, r2
 800e0e8:	0002      	movs	r2, r0
 800e0ea:	0152      	lsls	r2, r2, #5
 800e0ec:	1812      	adds	r2, r2, r0
 800e0ee:	189b      	adds	r3, r3, r2
 800e0f0:	18cb      	adds	r3, r1, r3
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	2370      	movs	r3, #112	; 0x70
 800e0fa:	33ff      	adds	r3, #255	; 0xff
 800e0fc:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
									menu->items[menu->current.entry][menu->current.level].value3;
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	2372      	movs	r3, #114	; 0x72
 800e102:	33ff      	adds	r3, #255	; 0xff
 800e104:	5cd3      	ldrb	r3, [r2, r3]
 800e106:	0018      	movs	r0, r3
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	23b9      	movs	r3, #185	; 0xb9
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	5cd3      	ldrb	r3, [r2, r3]
 800e110:	001a      	movs	r2, r3
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	0013      	movs	r3, r2
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	189b      	adds	r3, r3, r2
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	189b      	adds	r3, r3, r2
 800e11e:	0002      	movs	r2, r0
 800e120:	0152      	lsls	r2, r2, #5
 800e122:	1812      	adds	r2, r2, r0
 800e124:	189b      	adds	r3, r3, r2
 800e126:	18cb      	adds	r3, r1, r3
 800e128:	3305      	adds	r3, #5
 800e12a:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	23b8      	movs	r3, #184	; 0xb8
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800e134:	2301      	movs	r3, #1
 800e136:	e000      	b.n	800e13a <menuSwitch+0x69a>
	} else {
		return MENU_ERROR;
 800e138:	2300      	movs	r3, #0
	}
}
 800e13a:	0018      	movs	r0, r3
 800e13c:	46bd      	mov	sp, r7
 800e13e:	b003      	add	sp, #12
 800e140:	bd90      	pop	{r4, r7, pc}
	...

0800e144 <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800e144:	b5b0      	push	{r4, r5, r7, lr}
 800e146:	b090      	sub	sp, #64	; 0x40
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e14c:	49ee      	ldr	r1, [pc, #952]	; (800e508 <rtcGetTime+0x3c4>)
 800e14e:	4bef      	ldr	r3, [pc, #956]	; (800e50c <rtcGetTime+0x3c8>)
 800e150:	2200      	movs	r2, #0
 800e152:	0018      	movs	r0, r3
 800e154:	f7f8 fb20 	bl	8006798 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e158:	49ed      	ldr	r1, [pc, #948]	; (800e510 <rtcGetTime+0x3cc>)
 800e15a:	4bec      	ldr	r3, [pc, #944]	; (800e50c <rtcGetTime+0x3c8>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	0018      	movs	r0, r3
 800e160:	f7f8 fc08 	bl	8006974 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800e164:	4be8      	ldr	r3, [pc, #928]	; (800e508 <rtcGetTime+0x3c4>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	b25a      	sxtb	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 800e16e:	4be6      	ldr	r3, [pc, #920]	; (800e508 <rtcGetTime+0x3c4>)
 800e170:	785b      	ldrb	r3, [r3, #1]
 800e172:	b25a      	sxtb	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800e178:	4be3      	ldr	r3, [pc, #908]	; (800e508 <rtcGetTime+0x3c4>)
 800e17a:	789b      	ldrb	r3, [r3, #2]
 800e17c:	b25a      	sxtb	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800e182:	4be1      	ldr	r3, [pc, #900]	; (800e508 <rtcGetTime+0x3c4>)
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	0013      	movs	r3, r2
 800e188:	065b      	lsls	r3, r3, #25
 800e18a:	1a9b      	subs	r3, r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	189b      	adds	r3, r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4adf      	ldr	r2, [pc, #892]	; (800e514 <rtcGetTime+0x3d0>)
 800e198:	4694      	mov	ip, r2
 800e19a:	4463      	add	r3, ip
 800e19c:	21ff      	movs	r1, #255	; 0xff
 800e19e:	0018      	movs	r0, r3
 800e1a0:	f7f1 ffbc 	bl	800011c <__udivsi3>
 800e1a4:	0003      	movs	r3, r0
 800e1a6:	b25a      	sxtb	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800e1ac:	4bd8      	ldr	r3, [pc, #864]	; (800e510 <rtcGetTime+0x3cc>)
 800e1ae:	789b      	ldrb	r3, [r3, #2]
 800e1b0:	b25a      	sxtb	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800e1b6:	4bd6      	ldr	r3, [pc, #856]	; (800e510 <rtcGetTime+0x3cc>)
 800e1b8:	785b      	ldrb	r3, [r3, #1]
 800e1ba:	b25a      	sxtb	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800e1c0:	4bd3      	ldr	r3, [pc, #844]	; (800e510 <rtcGetTime+0x3cc>)
 800e1c2:	78db      	ldrb	r3, [r3, #3]
 800e1c4:	b25a      	sxtb	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	785b      	ldrb	r3, [r3, #1]
 800e1ce:	b25b      	sxtb	r3, r3
 800e1d0:	3309      	adds	r3, #9
 800e1d2:	210c      	movs	r1, #12
 800e1d4:	0018      	movs	r0, r3
 800e1d6:	f7f2 f82b 	bl	8000230 <__divsi3>
 800e1da:	0003      	movs	r3, r0
 800e1dc:	0018      	movs	r0, r3
 800e1de:	f7f3 f869 	bl	80012b4 <__aeabi_i2f>
 800e1e2:	1c03      	adds	r3, r0, #0
 800e1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	b25b      	sxtb	r3, r3
 800e1ec:	001c      	movs	r4, r3
 800e1ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e1f0:	f7f2 f9b4 	bl	800055c <__aeabi_f2uiz>
 800e1f4:	0003      	movs	r3, r0
 800e1f6:	18e3      	adds	r3, r4, r3
 800e1f8:	4ac7      	ldr	r2, [pc, #796]	; (800e518 <rtcGetTime+0x3d4>)
 800e1fa:	4694      	mov	ip, r2
 800e1fc:	4463      	add	r3, ip
 800e1fe:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	b25b      	sxtb	r3, r3
 800e206:	001a      	movs	r2, r3
 800e208:	0013      	movs	r3, r2
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	1a9b      	subs	r3, r3, r2
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	1a9b      	subs	r3, r3, r2
 800e212:	009a      	lsls	r2, r3, #2
 800e214:	189b      	adds	r3, r3, r2
 800e216:	2109      	movs	r1, #9
 800e218:	0018      	movs	r0, r3
 800e21a:	f7f2 f809 	bl	8000230 <__divsi3>
 800e21e:	0003      	movs	r3, r0
 800e220:	0018      	movs	r0, r3
 800e222:	f7f3 f847 	bl	80012b4 <__aeabi_i2f>
 800e226:	1c03      	adds	r3, r0, #0
 800e228:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 800e22a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e22c:	0013      	movs	r3, r2
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	1a9b      	subs	r3, r3, r2
 800e232:	089b      	lsrs	r3, r3, #2
 800e234:	0018      	movs	r0, r3
 800e236:	f7f3 f883 	bl	8001340 <__aeabi_ui2f>
 800e23a:	1c03      	adds	r3, r0, #0
 800e23c:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	b25b      	sxtb	r3, r3
 800e244:	22fa      	movs	r2, #250	; 0xfa
 800e246:	00d2      	lsls	r2, r2, #3
 800e248:	189a      	adds	r2, r3, r2
 800e24a:	0013      	movs	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	189b      	adds	r3, r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	1a9b      	subs	r3, r3, r2
 800e254:	011b      	lsls	r3, r3, #4
 800e256:	1a9b      	subs	r3, r3, r2
 800e258:	0018      	movs	r0, r3
 800e25a:	f7f4 fe6f 	bl	8002f3c <__aeabi_i2d>
 800e25e:	2280      	movs	r2, #128	; 0x80
 800e260:	0612      	lsls	r2, r2, #24
 800e262:	4bae      	ldr	r3, [pc, #696]	; (800e51c <rtcGetTime+0x3d8>)
 800e264:	f7f3 f8a8 	bl	80013b8 <__aeabi_dadd>
 800e268:	0002      	movs	r2, r0
 800e26a:	000b      	movs	r3, r1
 800e26c:	0014      	movs	r4, r2
 800e26e:	001d      	movs	r5, r3
 800e270:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e272:	f7f2 f973 	bl	800055c <__aeabi_f2uiz>
 800e276:	0003      	movs	r3, r0
 800e278:	0018      	movs	r0, r3
 800e27a:	f7f4 fe8f 	bl	8002f9c <__aeabi_ui2d>
 800e27e:	0002      	movs	r2, r0
 800e280:	000b      	movs	r3, r1
 800e282:	0020      	movs	r0, r4
 800e284:	0029      	movs	r1, r5
 800e286:	f7f3 f897 	bl	80013b8 <__aeabi_dadd>
 800e28a:	0002      	movs	r2, r0
 800e28c:	000b      	movs	r3, r1
 800e28e:	0014      	movs	r4, r2
 800e290:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800e292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e294:	f7f2 f962 	bl	800055c <__aeabi_f2uiz>
 800e298:	0003      	movs	r3, r0
 800e29a:	0018      	movs	r0, r3
 800e29c:	f7f4 fe7e 	bl	8002f9c <__aeabi_ui2d>
 800e2a0:	0002      	movs	r2, r0
 800e2a2:	000b      	movs	r3, r1
 800e2a4:	0020      	movs	r0, r4
 800e2a6:	0029      	movs	r1, r5
 800e2a8:	f7f4 fa62 	bl	8002770 <__aeabi_dsub>
 800e2ac:	0002      	movs	r2, r0
 800e2ae:	000b      	movs	r3, r1
 800e2b0:	0014      	movs	r4, r2
 800e2b2:	001d      	movs	r5, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	789b      	ldrb	r3, [r3, #2]
 800e2b8:	b25b      	sxtb	r3, r3
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f7f4 fe3e 	bl	8002f3c <__aeabi_i2d>
 800e2c0:	0002      	movs	r2, r0
 800e2c2:	000b      	movs	r3, r1
 800e2c4:	0020      	movs	r0, r4
 800e2c6:	0029      	movs	r1, r5
 800e2c8:	f7f3 f876 	bl	80013b8 <__aeabi_dadd>
 800e2cc:	0002      	movs	r2, r0
 800e2ce:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800e2d0:	0010      	movs	r0, r2
 800e2d2:	0019      	movs	r1, r3
 800e2d4:	f7f4 fed0 	bl	8003078 <__aeabi_d2f>
 800e2d8:	1c03      	adds	r3, r0, #0
 800e2da:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	3353      	adds	r3, #83	; 0x53
 800e2e0:	2164      	movs	r1, #100	; 0x64
 800e2e2:	0018      	movs	r0, r3
 800e2e4:	f7f1 ff1a 	bl	800011c <__udivsi3>
 800e2e8:	0003      	movs	r3, r0
 800e2ea:	0018      	movs	r0, r3
 800e2ec:	f7f3 f828 	bl	8001340 <__aeabi_ui2f>
 800e2f0:	1c03      	adds	r3, r0, #0
 800e2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 800e2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f6:	f7f2 f931 	bl	800055c <__aeabi_f2uiz>
 800e2fa:	0003      	movs	r3, r0
 800e2fc:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	0013      	movs	r3, r2
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	189b      	adds	r3, r3, r2
 800e308:	089b      	lsrs	r3, r3, #2
 800e30a:	0018      	movs	r0, r3
 800e30c:	f7f3 f818 	bl	8001340 <__aeabi_ui2f>
 800e310:	1c03      	adds	r3, r0, #0
 800e312:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800e314:	6a38      	ldr	r0, [r7, #32]
 800e316:	f7f2 f921 	bl	800055c <__aeabi_f2uiz>
 800e31a:	0003      	movs	r3, r0
 800e31c:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 800e31e:	4980      	ldr	r1, [pc, #512]	; (800e520 <rtcGetTime+0x3dc>)
 800e320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e322:	f7f2 fa1d 	bl	8000760 <__aeabi_fadd>
 800e326:	1c03      	adds	r3, r0, #0
 800e328:	1c1c      	adds	r4, r3, #0
 800e32a:	69f8      	ldr	r0, [r7, #28]
 800e32c:	f7f3 f808 	bl	8001340 <__aeabi_ui2f>
 800e330:	1c03      	adds	r3, r0, #0
 800e332:	1c19      	adds	r1, r3, #0
 800e334:	1c20      	adds	r0, r4, #0
 800e336:	f7f2 fdd5 	bl	8000ee4 <__aeabi_fsub>
 800e33a:	1c03      	adds	r3, r0, #0
 800e33c:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 800e33e:	4b79      	ldr	r3, [pc, #484]	; (800e524 <rtcGetTime+0x3e0>)
 800e340:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800e342:	6979      	ldr	r1, [r7, #20]
 800e344:	69b8      	ldr	r0, [r7, #24]
 800e346:	f7f2 fba7 	bl	8000a98 <__aeabi_fdiv>
 800e34a:	1c03      	adds	r3, r0, #0
 800e34c:	1c18      	adds	r0, r3, #0
 800e34e:	f7f4 fe4b 	bl	8002fe8 <__aeabi_f2d>
 800e352:	4a75      	ldr	r2, [pc, #468]	; (800e528 <rtcGetTime+0x3e4>)
 800e354:	4b75      	ldr	r3, [pc, #468]	; (800e52c <rtcGetTime+0x3e8>)
 800e356:	f7f4 fa0b 	bl	8002770 <__aeabi_dsub>
 800e35a:	0002      	movs	r2, r0
 800e35c:	000b      	movs	r3, r1
 800e35e:	0010      	movs	r0, r2
 800e360:	0019      	movs	r1, r3
 800e362:	f7f4 fe89 	bl	8003078 <__aeabi_d2f>
 800e366:	1c03      	adds	r3, r0, #0
 800e368:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800e36a:	6938      	ldr	r0, [r7, #16]
 800e36c:	f7f2 f8f6 	bl	800055c <__aeabi_f2uiz>
 800e370:	0003      	movs	r3, r0
 800e372:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7f2 ffe3 	bl	8001340 <__aeabi_ui2f>
 800e37a:	1c03      	adds	r3, r0, #0
 800e37c:	1c19      	adds	r1, r3, #0
 800e37e:	6938      	ldr	r0, [r7, #16]
 800e380:	f7f2 fdb0 	bl	8000ee4 <__aeabi_fsub>
 800e384:	1c03      	adds	r3, r0, #0
 800e386:	496a      	ldr	r1, [pc, #424]	; (800e530 <rtcGetTime+0x3ec>)
 800e388:	1c18      	adds	r0, r3, #0
 800e38a:	f7f2 fc91 	bl	8000cb0 <__aeabi_fmul>
 800e38e:	1c03      	adds	r3, r0, #0
 800e390:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800e392:	68b8      	ldr	r0, [r7, #8]
 800e394:	f7f2 f8e2 	bl	800055c <__aeabi_f2uiz>
 800e398:	0002      	movs	r2, r0
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2224      	movs	r2, #36	; 0x24
 800e3a2:	5c9b      	ldrb	r3, [r3, r2]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d114      	bne.n	800e3d2 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2224      	movs	r2, #36	; 0x24
 800e3d6:	5c9b      	ldrb	r3, [r3, r2]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d000      	beq.n	800e3de <rtcGetTime+0x29a>
 800e3dc:	e0ef      	b.n	800e5be <rtcGetTime+0x47a>

#if RTC_FREEZED_DECIMALS
		chrono->chrono.hundredth = 0;
#else
		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	799b      	ldrb	r3, [r3, #6]
 800e3e2:	b25b      	sxtb	r3, r3
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7c9b      	ldrb	r3, [r3, #18]
 800e3ea:	b25b      	sxtb	r3, r3
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	b25a      	sxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	779a      	strb	r2, [r3, #30]
#endif

		chrono->chrono.second = chrono->actual.second
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	795b      	ldrb	r3, [r3, #5]
 800e3fc:	b25b      	sxtb	r3, r3
 800e3fe:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	7c5b      	ldrb	r3, [r3, #17]
 800e404:	b25b      	sxtb	r3, r3
 800e406:	b2db      	uxtb	r3, r3
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	791b      	ldrb	r3, [r3, #4]
 800e416:	b25b      	sxtb	r3, r3
 800e418:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	7c1b      	ldrb	r3, [r3, #16]
 800e41e:	b25b      	sxtb	r3, r3
 800e420:	b2db      	uxtb	r3, r3
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	b2db      	uxtb	r3, r3
 800e426:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	78db      	ldrb	r3, [r3, #3]
 800e430:	b25b      	sxtb	r3, r3
 800e432:	b2da      	uxtb	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	7bdb      	ldrb	r3, [r3, #15]
 800e438:	b25b      	sxtb	r3, r3
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	b25a      	sxtb	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	789b      	ldrb	r3, [r3, #2]
 800e44a:	b25b      	sxtb	r3, r3
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	7b9b      	ldrb	r3, [r3, #14]
 800e452:	b25b      	sxtb	r3, r3
 800e454:	b2db      	uxtb	r3, r3
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	b25a      	sxtb	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	785b      	ldrb	r3, [r3, #1]
 800e464:	b25b      	sxtb	r3, r3
 800e466:	b2da      	uxtb	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	7b5b      	ldrb	r3, [r3, #13]
 800e46c:	b25b      	sxtb	r3, r3
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	b2db      	uxtb	r3, r3
 800e474:	b25a      	sxtb	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	7f9b      	ldrb	r3, [r3, #30]
 800e47e:	b25b      	sxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	da11      	bge.n	800e4a8 <rtcGetTime+0x364>
			chrono->chrono.second--;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7f5b      	ldrb	r3, [r3, #29]
 800e488:	b25b      	sxtb	r3, r3
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	3b01      	subs	r3, #1
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	b25a      	sxtb	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7f9b      	ldrb	r3, [r3, #30]
 800e49a:	b25b      	sxtb	r3, r3
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	3364      	adds	r3, #100	; 0x64
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	b25a      	sxtb	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7f5b      	ldrb	r3, [r3, #29]
 800e4ac:	b25b      	sxtb	r3, r3
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	da11      	bge.n	800e4d6 <rtcGetTime+0x392>
			chrono->chrono.minute--;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	7f1b      	ldrb	r3, [r3, #28]
 800e4b6:	b25b      	sxtb	r3, r3
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	b25a      	sxtb	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7f5b      	ldrb	r3, [r3, #29]
 800e4c8:	b25b      	sxtb	r3, r3
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	333c      	adds	r3, #60	; 0x3c
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	b25a      	sxtb	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7f1b      	ldrb	r3, [r3, #28]
 800e4da:	b25b      	sxtb	r3, r3
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	da29      	bge.n	800e534 <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	7edb      	ldrb	r3, [r3, #27]
 800e4e4:	b25b      	sxtb	r3, r3
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	b25a      	sxtb	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	7f1b      	ldrb	r3, [r3, #28]
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	333c      	adds	r3, #60	; 0x3c
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	b25a      	sxtb	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	771a      	strb	r2, [r3, #28]
 800e504:	e016      	b.n	800e534 <rtcGetTime+0x3f0>
 800e506:	46c0      	nop			; (mov r8, r8)
 800e508:	20000158 	.word	0x20000158
 800e50c:	2000076c 	.word	0x2000076c
 800e510:	20000154 	.word	0x20000154
 800e514:	0000639c 	.word	0x0000639c
 800e518:	00001a3c 	.word	0x00001a3c
 800e51c:	413a62ff 	.word	0x413a62ff
 800e520:	42180000 	.word	0x42180000
 800e524:	41ec3ea6 	.word	0x41ec3ea6
 800e528:	67381d7e 	.word	0x67381d7e
 800e52c:	3fd36944 	.word	0x3fd36944
 800e530:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7edb      	ldrb	r3, [r3, #27]
 800e538:	b25b      	sxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da11      	bge.n	800e562 <rtcGetTime+0x41e>
			chrono->chrono.day--;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	7e9b      	ldrb	r3, [r3, #26]
 800e542:	b25b      	sxtb	r3, r3
 800e544:	b2db      	uxtb	r3, r3
 800e546:	3b01      	subs	r3, #1
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	b25a      	sxtb	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	7edb      	ldrb	r3, [r3, #27]
 800e554:	b25b      	sxtb	r3, r3
 800e556:	b2db      	uxtb	r3, r3
 800e558:	3318      	adds	r3, #24
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	b25a      	sxtb	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	7e9b      	ldrb	r3, [r3, #26]
 800e566:	b25b      	sxtb	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	da11      	bge.n	800e590 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	7e5b      	ldrb	r3, [r3, #25]
 800e570:	b25b      	sxtb	r3, r3
 800e572:	b2db      	uxtb	r3, r3
 800e574:	3b01      	subs	r3, #1
 800e576:	b2db      	uxtb	r3, r3
 800e578:	b25a      	sxtb	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	7e9b      	ldrb	r3, [r3, #26]
 800e582:	b25b      	sxtb	r3, r3
 800e584:	b2db      	uxtb	r3, r3
 800e586:	331e      	adds	r3, #30
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	b25a      	sxtb	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7e5b      	ldrb	r3, [r3, #25]
 800e594:	b25b      	sxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	da11      	bge.n	800e5be <rtcGetTime+0x47a>
			chrono->chrono.year--;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	7e1b      	ldrb	r3, [r3, #24]
 800e59e:	b25b      	sxtb	r3, r3
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	b25a      	sxtb	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7e5b      	ldrb	r3, [r3, #25]
 800e5b0:	b25b      	sxtb	r3, r3
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	330c      	adds	r3, #12
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	b25a      	sxtb	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	765a      	strb	r2, [r3, #25]
		}

	}

}
 800e5be:	46c0      	nop			; (mov r8, r8)
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	b010      	add	sp, #64	; 0x40
 800e5c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e5c6:	46c0      	nop			; (mov r8, r8)

0800e5c8 <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	78db      	ldrb	r3, [r3, #3]
 800e5d4:	b25b      	sxtb	r3, r3
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	4b17      	ldr	r3, [pc, #92]	; (800e638 <rtcSetTime+0x70>)
 800e5da:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	791b      	ldrb	r3, [r3, #4]
 800e5e0:	b25b      	sxtb	r3, r3
 800e5e2:	b2da      	uxtb	r2, r3
 800e5e4:	4b14      	ldr	r3, [pc, #80]	; (800e638 <rtcSetTime+0x70>)
 800e5e6:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	795b      	ldrb	r3, [r3, #5]
 800e5ec:	b25b      	sxtb	r3, r3
 800e5ee:	b2da      	uxtb	r2, r3
 800e5f0:	4b11      	ldr	r3, [pc, #68]	; (800e638 <rtcSetTime+0x70>)
 800e5f2:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	789b      	ldrb	r3, [r3, #2]
 800e5f8:	b25b      	sxtb	r3, r3
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <rtcSetTime+0x74>)
 800e5fe:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	785b      	ldrb	r3, [r3, #1]
 800e604:	b25b      	sxtb	r3, r3
 800e606:	b2da      	uxtb	r2, r3
 800e608:	4b0c      	ldr	r3, [pc, #48]	; (800e63c <rtcSetTime+0x74>)
 800e60a:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	b25b      	sxtb	r3, r3
 800e612:	b2da      	uxtb	r2, r3
 800e614:	4b09      	ldr	r3, [pc, #36]	; (800e63c <rtcSetTime+0x74>)
 800e616:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e618:	4907      	ldr	r1, [pc, #28]	; (800e638 <rtcSetTime+0x70>)
 800e61a:	4b09      	ldr	r3, [pc, #36]	; (800e640 <rtcSetTime+0x78>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	0018      	movs	r0, r3
 800e620:	f7f8 f812 	bl	8006648 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e624:	4905      	ldr	r1, [pc, #20]	; (800e63c <rtcSetTime+0x74>)
 800e626:	4b06      	ldr	r3, [pc, #24]	; (800e640 <rtcSetTime+0x78>)
 800e628:	2200      	movs	r2, #0
 800e62a:	0018      	movs	r0, r3
 800e62c:	f7f8 f910 	bl	8006850 <HAL_RTC_SetDate>

}
 800e630:	46c0      	nop			; (mov r8, r8)
 800e632:	46bd      	mov	sp, r7
 800e634:	b002      	add	sp, #8
 800e636:	bd80      	pop	{r7, pc}
 800e638:	20000158 	.word	0x20000158
 800e63c:	20000154 	.word	0x20000154
 800e640:	2000076c 	.word	0x2000076c

0800e644 <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e64c:	4923      	ldr	r1, [pc, #140]	; (800e6dc <rtcStartChrono+0x98>)
 800e64e:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <rtcStartChrono+0x9c>)
 800e650:	2200      	movs	r2, #0
 800e652:	0018      	movs	r0, r3
 800e654:	f7f8 f8a0 	bl	8006798 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e658:	4922      	ldr	r1, [pc, #136]	; (800e6e4 <rtcStartChrono+0xa0>)
 800e65a:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <rtcStartChrono+0x9c>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	0018      	movs	r0, r3
 800e660:	f7f8 f988 	bl	8006974 <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800e664:	4b1d      	ldr	r3, [pc, #116]	; (800e6dc <rtcStartChrono+0x98>)
 800e666:	789b      	ldrb	r3, [r3, #2]
 800e668:	b25a      	sxtb	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 800e66e:	4b1b      	ldr	r3, [pc, #108]	; (800e6dc <rtcStartChrono+0x98>)
 800e670:	785b      	ldrb	r3, [r3, #1]
 800e672:	b25a      	sxtb	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800e678:	4b18      	ldr	r3, [pc, #96]	; (800e6dc <rtcStartChrono+0x98>)
 800e67a:	685a      	ldr	r2, [r3, #4]
 800e67c:	0013      	movs	r3, r2
 800e67e:	065b      	lsls	r3, r3, #25
 800e680:	1a9b      	subs	r3, r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	189b      	adds	r3, r3, r2
 800e686:	00db      	lsls	r3, r3, #3
 800e688:	1a9b      	subs	r3, r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4a16      	ldr	r2, [pc, #88]	; (800e6e8 <rtcStartChrono+0xa4>)
 800e68e:	4694      	mov	ip, r2
 800e690:	4463      	add	r3, ip
 800e692:	21ff      	movs	r1, #255	; 0xff
 800e694:	0018      	movs	r0, r3
 800e696:	f7f1 fd41 	bl	800011c <__udivsi3>
 800e69a:	0003      	movs	r3, r0
 800e69c:	b25a      	sxtb	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 800e6a2:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <rtcStartChrono+0x98>)
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	b25a      	sxtb	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 800e6ac:	4b0d      	ldr	r3, [pc, #52]	; (800e6e4 <rtcStartChrono+0xa0>)
 800e6ae:	789b      	ldrb	r3, [r3, #2]
 800e6b0:	b25a      	sxtb	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 800e6b6:	4b0b      	ldr	r3, [pc, #44]	; (800e6e4 <rtcStartChrono+0xa0>)
 800e6b8:	785b      	ldrb	r3, [r3, #1]
 800e6ba:	b25a      	sxtb	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 800e6c0:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <rtcStartChrono+0xa0>)
 800e6c2:	78db      	ldrb	r3, [r3, #3]
 800e6c4:	b25a      	sxtb	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2224      	movs	r2, #36	; 0x24
 800e6ce:	2101      	movs	r1, #1
 800e6d0:	5499      	strb	r1, [r3, r2]
}
 800e6d2:	46c0      	nop			; (mov r8, r8)
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	b002      	add	sp, #8
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	46c0      	nop			; (mov r8, r8)
 800e6dc:	20000158 	.word	0x20000158
 800e6e0:	2000076c 	.word	0x2000076c
 800e6e4:	20000154 	.word	0x20000154
 800e6e8:	0000639c 	.word	0x0000639c

0800e6ec <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e6f4:	4952      	ldr	r1, [pc, #328]	; (800e840 <rtcStopChrono+0x154>)
 800e6f6:	4b53      	ldr	r3, [pc, #332]	; (800e844 <rtcStopChrono+0x158>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	0018      	movs	r0, r3
 800e6fc:	f7f8 f84c 	bl	8006798 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e700:	4951      	ldr	r1, [pc, #324]	; (800e848 <rtcStopChrono+0x15c>)
 800e702:	4b50      	ldr	r3, [pc, #320]	; (800e844 <rtcStopChrono+0x158>)
 800e704:	2200      	movs	r2, #0
 800e706:	0018      	movs	r0, r3
 800e708:	f7f8 f934 	bl	8006974 <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 800e70c:	4b4c      	ldr	r3, [pc, #304]	; (800e840 <rtcStopChrono+0x154>)
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	b25a      	sxtb	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800e716:	4b4a      	ldr	r3, [pc, #296]	; (800e840 <rtcStopChrono+0x154>)
 800e718:	789b      	ldrb	r3, [r3, #2]
 800e71a:	b25a      	sxtb	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800e720:	4b47      	ldr	r3, [pc, #284]	; (800e840 <rtcStopChrono+0x154>)
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	0013      	movs	r3, r2
 800e726:	065b      	lsls	r3, r3, #25
 800e728:	1a9b      	subs	r3, r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	189b      	adds	r3, r3, r2
 800e72e:	00db      	lsls	r3, r3, #3
 800e730:	1a9b      	subs	r3, r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4a45      	ldr	r2, [pc, #276]	; (800e84c <rtcStopChrono+0x160>)
 800e736:	4694      	mov	ip, r2
 800e738:	4463      	add	r3, ip
 800e73a:	21ff      	movs	r1, #255	; 0xff
 800e73c:	0018      	movs	r0, r3
 800e73e:	f7f1 fced 	bl	800011c <__udivsi3>
 800e742:	0003      	movs	r3, r0
 800e744:	b25a      	sxtb	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 800e74a:	4b3d      	ldr	r3, [pc, #244]	; (800e840 <rtcStopChrono+0x154>)
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	b25a      	sxtb	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800e754:	4b3c      	ldr	r3, [pc, #240]	; (800e848 <rtcStopChrono+0x15c>)
 800e756:	789b      	ldrb	r3, [r3, #2]
 800e758:	b25a      	sxtb	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800e75e:	4b3a      	ldr	r3, [pc, #232]	; (800e848 <rtcStopChrono+0x15c>)
 800e760:	785b      	ldrb	r3, [r3, #1]
 800e762:	b25a      	sxtb	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800e768:	4b37      	ldr	r3, [pc, #220]	; (800e848 <rtcStopChrono+0x15c>)
 800e76a:	78db      	ldrb	r3, [r3, #3]
 800e76c:	b25a      	sxtb	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	799b      	ldrb	r3, [r3, #6]
 800e776:	b25b      	sxtb	r3, r3
 800e778:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7c9b      	ldrb	r3, [r3, #18]
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	b2db      	uxtb	r3, r3
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	b2db      	uxtb	r3, r3
 800e786:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	795b      	ldrb	r3, [r3, #5]
 800e790:	b25b      	sxtb	r3, r3
 800e792:	b2da      	uxtb	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7c5b      	ldrb	r3, [r3, #17]
 800e798:	b25b      	sxtb	r3, r3
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	b25a      	sxtb	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	791b      	ldrb	r3, [r3, #4]
 800e7aa:	b25b      	sxtb	r3, r3
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7c1b      	ldrb	r3, [r3, #16]
 800e7b2:	b25b      	sxtb	r3, r3
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	b25a      	sxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	78db      	ldrb	r3, [r3, #3]
 800e7c4:	b25b      	sxtb	r3, r3
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	7bdb      	ldrb	r3, [r3, #15]
 800e7cc:	b25b      	sxtb	r3, r3
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	b25a      	sxtb	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	789b      	ldrb	r3, [r3, #2]
 800e7de:	b25b      	sxtb	r3, r3
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7b9b      	ldrb	r3, [r3, #14]
 800e7e6:	b25b      	sxtb	r3, r3
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	b25a      	sxtb	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	785b      	ldrb	r3, [r3, #1]
 800e7f8:	b25b      	sxtb	r3, r3
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	7b5b      	ldrb	r3, [r3, #13]
 800e800:	b25b      	sxtb	r3, r3
 800e802:	b2db      	uxtb	r3, r3
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	b2db      	uxtb	r3, r3
 800e808:	b25a      	sxtb	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	b25b      	sxtb	r3, r3
 800e814:	b2da      	uxtb	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7b1b      	ldrb	r3, [r3, #12]
 800e81a:	b25b      	sxtb	r3, r3
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	b2db      	uxtb	r3, r3
 800e822:	b25a      	sxtb	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	0018      	movs	r0, r3
 800e82c:	f7ff fc8a 	bl	800e144 <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2224      	movs	r2, #36	; 0x24
 800e834:	2102      	movs	r1, #2
 800e836:	5499      	strb	r1, [r3, r2]


}
 800e838:	46c0      	nop			; (mov r8, r8)
 800e83a:	46bd      	mov	sp, r7
 800e83c:	b002      	add	sp, #8
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	20000158 	.word	0x20000158
 800e844:	2000076c 	.word	0x2000076c
 800e848:	20000154 	.word	0x20000154
 800e84c:	0000639c 	.word	0x0000639c

0800e850 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2224      	movs	r2, #36	; 0x24
 800e85c:	2101      	movs	r1, #1
 800e85e:	5499      	strb	r1, [r3, r2]
}
 800e860:	46c0      	nop			; (mov r8, r8)
 800e862:	46bd      	mov	sp, r7
 800e864:	b002      	add	sp, #8
 800e866:	bd80      	pop	{r7, pc}

0800e868 <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2224      	movs	r2, #36	; 0x24
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	5499      	strb	r1, [r3, r2]

}
 800e8a8:	46c0      	nop			; (mov r8, r8)
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	b002      	add	sp, #8
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	0008      	movs	r0, r1
 800e8ba:	0011      	movs	r1, r2
 800e8bc:	1cfb      	adds	r3, r7, #3
 800e8be:	1c02      	adds	r2, r0, #0
 800e8c0:	701a      	strb	r2, [r3, #0]
 800e8c2:	1cbb      	adds	r3, r7, #2
 800e8c4:	1c0a      	adds	r2, r1, #0
 800e8c6:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 800e8c8:	1cbb      	adds	r3, r7, #2
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d000      	beq.n	800e8d2 <rtcChangeValue+0x22>
 800e8d0:	e08a      	b.n	800e9e8 <rtcChangeValue+0x138>
		switch (element) {
 800e8d2:	1cfb      	adds	r3, r7, #3
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b05      	cmp	r3, #5
 800e8d8:	d900      	bls.n	800e8dc <rtcChangeValue+0x2c>
 800e8da:	e080      	b.n	800e9de <rtcChangeValue+0x12e>
 800e8dc:	009a      	lsls	r2, r3, #2
 800e8de:	4b8c      	ldr	r3, [pc, #560]	; (800eb10 <rtcChangeValue+0x260>)
 800e8e0:	18d3      	adds	r3, r2, r3
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	78db      	ldrb	r3, [r3, #3]
 800e8ea:	b25b      	sxtb	r3, r3
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	dd09      	ble.n	800e904 <rtcChangeValue+0x54>
				chrono->actual.hour--;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	78db      	ldrb	r3, [r3, #3]
 800e8f4:	b25b      	sxtb	r3, r3
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	3b01      	subs	r3, #1
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	b25a      	sxtb	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800e902:	e063      	b.n	800e9cc <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	78db      	ldrb	r3, [r3, #3]
 800e908:	b25b      	sxtb	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d15e      	bne.n	800e9cc <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2217      	movs	r2, #23
 800e912:	70da      	strb	r2, [r3, #3]
			break;
 800e914:	e05a      	b.n	800e9cc <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	791b      	ldrb	r3, [r3, #4]
 800e91a:	b25b      	sxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	dd09      	ble.n	800e934 <rtcChangeValue+0x84>
				chrono->actual.minute--;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	791b      	ldrb	r3, [r3, #4]
 800e924:	b25b      	sxtb	r3, r3
 800e926:	b2db      	uxtb	r3, r3
 800e928:	3b01      	subs	r3, #1
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	b25a      	sxtb	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800e932:	e04d      	b.n	800e9d0 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	791b      	ldrb	r3, [r3, #4]
 800e938:	b25b      	sxtb	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d148      	bne.n	800e9d0 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	223b      	movs	r2, #59	; 0x3b
 800e942:	711a      	strb	r2, [r3, #4]
			break;
 800e944:	e044      	b.n	800e9d0 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	715a      	strb	r2, [r3, #5]
			break;
 800e94c:	e047      	b.n	800e9de <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	789b      	ldrb	r3, [r3, #2]
 800e952:	b25b      	sxtb	r3, r3
 800e954:	2b01      	cmp	r3, #1
 800e956:	dd09      	ble.n	800e96c <rtcChangeValue+0xbc>
				chrono->actual.day--;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	789b      	ldrb	r3, [r3, #2]
 800e95c:	b25b      	sxtb	r3, r3
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	3b01      	subs	r3, #1
 800e962:	b2db      	uxtb	r3, r3
 800e964:	b25a      	sxtb	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 800e96a:	e033      	b.n	800e9d4 <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	789b      	ldrb	r3, [r3, #2]
 800e970:	b25b      	sxtb	r3, r3
 800e972:	2b01      	cmp	r3, #1
 800e974:	d12e      	bne.n	800e9d4 <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	221f      	movs	r2, #31
 800e97a:	709a      	strb	r2, [r3, #2]
			break;
 800e97c:	e02a      	b.n	800e9d4 <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	785b      	ldrb	r3, [r3, #1]
 800e982:	b25b      	sxtb	r3, r3
 800e984:	2b01      	cmp	r3, #1
 800e986:	dd09      	ble.n	800e99c <rtcChangeValue+0xec>
				chrono->actual.month--;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	785b      	ldrb	r3, [r3, #1]
 800e98c:	b25b      	sxtb	r3, r3
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	3b01      	subs	r3, #1
 800e992:	b2db      	uxtb	r3, r3
 800e994:	b25a      	sxtb	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 800e99a:	e01d      	b.n	800e9d8 <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	785b      	ldrb	r3, [r3, #1]
 800e9a0:	b25b      	sxtb	r3, r3
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d118      	bne.n	800e9d8 <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	220c      	movs	r2, #12
 800e9aa:	705a      	strb	r2, [r3, #1]
			break;
 800e9ac:	e014      	b.n	800e9d8 <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	b25b      	sxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dd11      	ble.n	800e9dc <rtcChangeValue+0x12c>
				chrono->actual.year--;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	b25b      	sxtb	r3, r3
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	b25a      	sxtb	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	701a      	strb	r2, [r3, #0]
			break;
 800e9ca:	e007      	b.n	800e9dc <rtcChangeValue+0x12c>
			break;
 800e9cc:	46c0      	nop			; (mov r8, r8)
 800e9ce:	e006      	b.n	800e9de <rtcChangeValue+0x12e>
			break;
 800e9d0:	46c0      	nop			; (mov r8, r8)
 800e9d2:	e004      	b.n	800e9de <rtcChangeValue+0x12e>
			break;
 800e9d4:	46c0      	nop			; (mov r8, r8)
 800e9d6:	e002      	b.n	800e9de <rtcChangeValue+0x12e>
			break;
 800e9d8:	46c0      	nop			; (mov r8, r8)
 800e9da:	e000      	b.n	800e9de <rtcChangeValue+0x12e>
			break;
 800e9dc:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	f7ff fdf1 	bl	800e5c8 <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 800e9e6:	e08e      	b.n	800eb06 <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 800e9e8:	1cbb      	adds	r3, r7, #2
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d000      	beq.n	800e9f2 <rtcChangeValue+0x142>
 800e9f0:	e089      	b.n	800eb06 <rtcChangeValue+0x256>
		switch (element) {
 800e9f2:	1cfb      	adds	r3, r7, #3
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	2b05      	cmp	r3, #5
 800e9f8:	d900      	bls.n	800e9fc <rtcChangeValue+0x14c>
 800e9fa:	e080      	b.n	800eafe <rtcChangeValue+0x24e>
 800e9fc:	009a      	lsls	r2, r3, #2
 800e9fe:	4b45      	ldr	r3, [pc, #276]	; (800eb14 <rtcChangeValue+0x264>)
 800ea00:	18d3      	adds	r3, r2, r3
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	78db      	ldrb	r3, [r3, #3]
 800ea0a:	b25b      	sxtb	r3, r3
 800ea0c:	2b16      	cmp	r3, #22
 800ea0e:	dc09      	bgt.n	800ea24 <rtcChangeValue+0x174>
				chrono->actual.hour++;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	78db      	ldrb	r3, [r3, #3]
 800ea14:	b25b      	sxtb	r3, r3
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	3301      	adds	r3, #1
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	b25a      	sxtb	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	70da      	strb	r2, [r3, #3]
			break;
 800ea22:	e063      	b.n	800eaec <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	78db      	ldrb	r3, [r3, #3]
 800ea28:	b25b      	sxtb	r3, r3
 800ea2a:	2b16      	cmp	r3, #22
 800ea2c:	dd5e      	ble.n	800eaec <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	70da      	strb	r2, [r3, #3]
			break;
 800ea34:	e05a      	b.n	800eaec <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	791b      	ldrb	r3, [r3, #4]
 800ea3a:	b25b      	sxtb	r3, r3
 800ea3c:	2b3a      	cmp	r3, #58	; 0x3a
 800ea3e:	dc09      	bgt.n	800ea54 <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	791b      	ldrb	r3, [r3, #4]
 800ea44:	b25b      	sxtb	r3, r3
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	3301      	adds	r3, #1
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	b25a      	sxtb	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	711a      	strb	r2, [r3, #4]
			break;
 800ea52:	e04d      	b.n	800eaf0 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	791b      	ldrb	r3, [r3, #4]
 800ea58:	b25b      	sxtb	r3, r3
 800ea5a:	2b3a      	cmp	r3, #58	; 0x3a
 800ea5c:	dd48      	ble.n	800eaf0 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	711a      	strb	r2, [r3, #4]
			break;
 800ea64:	e044      	b.n	800eaf0 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	715a      	strb	r2, [r3, #5]
			break;
 800ea6c:	e047      	b.n	800eafe <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	789b      	ldrb	r3, [r3, #2]
 800ea72:	b25b      	sxtb	r3, r3
 800ea74:	2b1e      	cmp	r3, #30
 800ea76:	dc09      	bgt.n	800ea8c <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	789b      	ldrb	r3, [r3, #2]
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	3301      	adds	r3, #1
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	b25a      	sxtb	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	709a      	strb	r2, [r3, #2]
			break;
 800ea8a:	e033      	b.n	800eaf4 <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	789b      	ldrb	r3, [r3, #2]
 800ea90:	b25b      	sxtb	r3, r3
 800ea92:	2b1f      	cmp	r3, #31
 800ea94:	d12e      	bne.n	800eaf4 <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	709a      	strb	r2, [r3, #2]
			break;
 800ea9c:	e02a      	b.n	800eaf4 <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	785b      	ldrb	r3, [r3, #1]
 800eaa2:	b25b      	sxtb	r3, r3
 800eaa4:	2b0b      	cmp	r3, #11
 800eaa6:	dc09      	bgt.n	800eabc <rtcChangeValue+0x20c>
				chrono->actual.month++;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	785b      	ldrb	r3, [r3, #1]
 800eaac:	b25b      	sxtb	r3, r3
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	3301      	adds	r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	b25a      	sxtb	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	705a      	strb	r2, [r3, #1]
			break;
 800eaba:	e01d      	b.n	800eaf8 <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	785b      	ldrb	r3, [r3, #1]
 800eac0:	b25b      	sxtb	r3, r3
 800eac2:	2b0c      	cmp	r3, #12
 800eac4:	d118      	bne.n	800eaf8 <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	705a      	strb	r2, [r3, #1]
			break;
 800eacc:	e014      	b.n	800eaf8 <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	2b62      	cmp	r3, #98	; 0x62
 800ead6:	dc11      	bgt.n	800eafc <rtcChangeValue+0x24c>
				chrono->actual.year++;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	b25b      	sxtb	r3, r3
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	3301      	adds	r3, #1
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	b25a      	sxtb	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	701a      	strb	r2, [r3, #0]
			break;
 800eaea:	e007      	b.n	800eafc <rtcChangeValue+0x24c>
			break;
 800eaec:	46c0      	nop			; (mov r8, r8)
 800eaee:	e006      	b.n	800eafe <rtcChangeValue+0x24e>
			break;
 800eaf0:	46c0      	nop			; (mov r8, r8)
 800eaf2:	e004      	b.n	800eafe <rtcChangeValue+0x24e>
			break;
 800eaf4:	46c0      	nop			; (mov r8, r8)
 800eaf6:	e002      	b.n	800eafe <rtcChangeValue+0x24e>
			break;
 800eaf8:	46c0      	nop			; (mov r8, r8)
 800eafa:	e000      	b.n	800eafe <rtcChangeValue+0x24e>
			break;
 800eafc:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	0018      	movs	r0, r3
 800eb02:	f7ff fd61 	bl	800e5c8 <rtcSetTime>
}
 800eb06:	46c0      	nop			; (mov r8, r8)
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	b002      	add	sp, #8
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	08010550 	.word	0x08010550
 800eb14:	08010568 	.word	0x08010568

0800eb18 <rtcBlink>:
 *
 * @param  RTC item handler
 *
 * @retval Even- 1, Odd- 0
 */
uint8_t rtcBlink(RTCChronoTypeDef *chrono) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800eb20:	4910      	ldr	r1, [pc, #64]	; (800eb64 <rtcBlink+0x4c>)
 800eb22:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <rtcBlink+0x50>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	0018      	movs	r0, r3
 800eb28:	f7f7 fe36 	bl	8006798 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800eb2c:	490f      	ldr	r1, [pc, #60]	; (800eb6c <rtcBlink+0x54>)
 800eb2e:	4b0e      	ldr	r3, [pc, #56]	; (800eb68 <rtcBlink+0x50>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	0018      	movs	r0, r3
 800eb34:	f7f7 ff1e 	bl	8006974 <HAL_RTC_GetDate>

	chrono->actual.second = Time.Seconds;
 800eb38:	4b0a      	ldr	r3, [pc, #40]	; (800eb64 <rtcBlink+0x4c>)
 800eb3a:	789b      	ldrb	r3, [r3, #2]
 800eb3c:	b25a      	sxtb	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	715a      	strb	r2, [r3, #5]

	if (chrono->actual.second % 2) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	795b      	ldrb	r3, [r3, #5]
 800eb46:	b25b      	sxtb	r3, r3
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	4013      	ands	r3, r2
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <rtcBlink+0x40>
		return 1;
 800eb54:	2301      	movs	r3, #1
 800eb56:	e000      	b.n	800eb5a <rtcBlink+0x42>
	} else {
		return 0;
 800eb58:	2300      	movs	r3, #0
	}
}
 800eb5a:	0018      	movs	r0, r3
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	b002      	add	sp, #8
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	46c0      	nop			; (mov r8, r8)
 800eb64:	20000158 	.word	0x20000158
 800eb68:	2000076c 	.word	0x2000076c
 800eb6c:	20000154 	.word	0x20000154

0800eb70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eb76:	4b11      	ldr	r3, [pc, #68]	; (800ebbc <HAL_MspInit+0x4c>)
 800eb78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb7a:	4b10      	ldr	r3, [pc, #64]	; (800ebbc <HAL_MspInit+0x4c>)
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	641a      	str	r2, [r3, #64]	; 0x40
 800eb82:	4b0e      	ldr	r3, [pc, #56]	; (800ebbc <HAL_MspInit+0x4c>)
 800eb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb86:	2201      	movs	r2, #1
 800eb88:	4013      	ands	r3, r2
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800eb8e:	4b0b      	ldr	r3, [pc, #44]	; (800ebbc <HAL_MspInit+0x4c>)
 800eb90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb92:	4b0a      	ldr	r3, [pc, #40]	; (800ebbc <HAL_MspInit+0x4c>)
 800eb94:	2180      	movs	r1, #128	; 0x80
 800eb96:	0549      	lsls	r1, r1, #21
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	63da      	str	r2, [r3, #60]	; 0x3c
 800eb9c:	4b07      	ldr	r3, [pc, #28]	; (800ebbc <HAL_MspInit+0x4c>)
 800eb9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eba0:	2380      	movs	r3, #128	; 0x80
 800eba2:	055b      	lsls	r3, r3, #21
 800eba4:	4013      	ands	r3, r2
 800eba6:	603b      	str	r3, [r7, #0]
 800eba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800ebaa:	2380      	movs	r3, #128	; 0x80
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	0018      	movs	r0, r3
 800ebb0:	f7f4 fd9c 	bl	80036ec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ebb4:	46c0      	nop			; (mov r8, r8)
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	b002      	add	sp, #8
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	40021000 	.word	0x40021000

0800ebc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ebc0:	b590      	push	{r4, r7, lr}
 800ebc2:	b091      	sub	sp, #68	; 0x44
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ebc8:	240c      	movs	r4, #12
 800ebca:	193b      	adds	r3, r7, r4
 800ebcc:	0018      	movs	r0, r3
 800ebce:	2334      	movs	r3, #52	; 0x34
 800ebd0:	001a      	movs	r2, r3
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	f000 fabf 	bl	800f156 <memset>
  if(hadc->Instance==ADC1)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a11      	ldr	r2, [pc, #68]	; (800ec24 <HAL_ADC_MspInit+0x64>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d11c      	bne.n	800ec1c <HAL_ADC_MspInit+0x5c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800ebe2:	193b      	adds	r3, r7, r4
 800ebe4:	2280      	movs	r2, #128	; 0x80
 800ebe6:	01d2      	lsls	r2, r2, #7
 800ebe8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800ebea:	193b      	adds	r3, r7, r4
 800ebec:	2200      	movs	r2, #0
 800ebee:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ebf0:	193b      	adds	r3, r7, r4
 800ebf2:	0018      	movs	r0, r3
 800ebf4:	f7f7 fada 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800ebf8:	1e03      	subs	r3, r0, #0
 800ebfa:	d001      	beq.n	800ec00 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800ebfc:	f7fe fddc 	bl	800d7b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800ec00:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <HAL_ADC_MspInit+0x68>)
 800ec02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec04:	4b08      	ldr	r3, [pc, #32]	; (800ec28 <HAL_ADC_MspInit+0x68>)
 800ec06:	2180      	movs	r1, #128	; 0x80
 800ec08:	0349      	lsls	r1, r1, #13
 800ec0a:	430a      	orrs	r2, r1
 800ec0c:	641a      	str	r2, [r3, #64]	; 0x40
 800ec0e:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <HAL_ADC_MspInit+0x68>)
 800ec10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec12:	2380      	movs	r3, #128	; 0x80
 800ec14:	035b      	lsls	r3, r3, #13
 800ec16:	4013      	ands	r3, r2
 800ec18:	60bb      	str	r3, [r7, #8]
 800ec1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800ec1c:	46c0      	nop			; (mov r8, r8)
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	b011      	add	sp, #68	; 0x44
 800ec22:	bd90      	pop	{r4, r7, pc}
 800ec24:	40012400 	.word	0x40012400
 800ec28:	40021000 	.word	0x40021000

0800ec2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ec2c:	b590      	push	{r4, r7, lr}
 800ec2e:	b097      	sub	sp, #92	; 0x5c
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec34:	2344      	movs	r3, #68	; 0x44
 800ec36:	18fb      	adds	r3, r7, r3
 800ec38:	0018      	movs	r0, r3
 800ec3a:	2314      	movs	r3, #20
 800ec3c:	001a      	movs	r2, r3
 800ec3e:	2100      	movs	r1, #0
 800ec40:	f000 fa89 	bl	800f156 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ec44:	2410      	movs	r4, #16
 800ec46:	193b      	adds	r3, r7, r4
 800ec48:	0018      	movs	r0, r3
 800ec4a:	2334      	movs	r3, #52	; 0x34
 800ec4c:	001a      	movs	r2, r3
 800ec4e:	2100      	movs	r1, #0
 800ec50:	f000 fa81 	bl	800f156 <memset>
  if(hi2c->Instance==I2C1)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a22      	ldr	r2, [pc, #136]	; (800ece4 <HAL_I2C_MspInit+0xb8>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d13e      	bne.n	800ecdc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800ec5e:	193b      	adds	r3, r7, r4
 800ec60:	2220      	movs	r2, #32
 800ec62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800ec64:	193b      	adds	r3, r7, r4
 800ec66:	2200      	movs	r2, #0
 800ec68:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ec6a:	193b      	adds	r3, r7, r4
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	f7f7 fa9d 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800ec72:	1e03      	subs	r3, r0, #0
 800ec74:	d001      	beq.n	800ec7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800ec76:	f7fe fd9f 	bl	800d7b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec7a:	4b1b      	ldr	r3, [pc, #108]	; (800ece8 <HAL_I2C_MspInit+0xbc>)
 800ec7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec7e:	4b1a      	ldr	r3, [pc, #104]	; (800ece8 <HAL_I2C_MspInit+0xbc>)
 800ec80:	2102      	movs	r1, #2
 800ec82:	430a      	orrs	r2, r1
 800ec84:	635a      	str	r2, [r3, #52]	; 0x34
 800ec86:	4b18      	ldr	r3, [pc, #96]	; (800ece8 <HAL_I2C_MspInit+0xbc>)
 800ec88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
 800ec90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800ec92:	2144      	movs	r1, #68	; 0x44
 800ec94:	187b      	adds	r3, r7, r1
 800ec96:	22c0      	movs	r2, #192	; 0xc0
 800ec98:	0092      	lsls	r2, r2, #2
 800ec9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ec9c:	187b      	adds	r3, r7, r1
 800ec9e:	2212      	movs	r2, #18
 800eca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eca2:	187b      	adds	r3, r7, r1
 800eca4:	2200      	movs	r2, #0
 800eca6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eca8:	187b      	adds	r3, r7, r1
 800ecaa:	2200      	movs	r2, #0
 800ecac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800ecae:	187b      	adds	r3, r7, r1
 800ecb0:	2206      	movs	r2, #6
 800ecb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ecb4:	187b      	adds	r3, r7, r1
 800ecb6:	4a0d      	ldr	r2, [pc, #52]	; (800ecec <HAL_I2C_MspInit+0xc0>)
 800ecb8:	0019      	movs	r1, r3
 800ecba:	0010      	movs	r0, r2
 800ecbc:	f7f5 fd70 	bl	80047a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ecc0:	4b09      	ldr	r3, [pc, #36]	; (800ece8 <HAL_I2C_MspInit+0xbc>)
 800ecc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecc4:	4b08      	ldr	r3, [pc, #32]	; (800ece8 <HAL_I2C_MspInit+0xbc>)
 800ecc6:	2180      	movs	r1, #128	; 0x80
 800ecc8:	0389      	lsls	r1, r1, #14
 800ecca:	430a      	orrs	r2, r1
 800eccc:	63da      	str	r2, [r3, #60]	; 0x3c
 800ecce:	4b06      	ldr	r3, [pc, #24]	; (800ece8 <HAL_I2C_MspInit+0xbc>)
 800ecd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecd2:	2380      	movs	r3, #128	; 0x80
 800ecd4:	039b      	lsls	r3, r3, #14
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	60bb      	str	r3, [r7, #8]
 800ecda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ecdc:	46c0      	nop			; (mov r8, r8)
 800ecde:	46bd      	mov	sp, r7
 800ece0:	b017      	add	sp, #92	; 0x5c
 800ece2:	bd90      	pop	{r4, r7, pc}
 800ece4:	40005400 	.word	0x40005400
 800ece8:	40021000 	.word	0x40021000
 800ecec:	50000400 	.word	0x50000400

0800ecf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ecf0:	b590      	push	{r4, r7, lr}
 800ecf2:	b091      	sub	sp, #68	; 0x44
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ecf8:	240c      	movs	r4, #12
 800ecfa:	193b      	adds	r3, r7, r4
 800ecfc:	0018      	movs	r0, r3
 800ecfe:	2334      	movs	r3, #52	; 0x34
 800ed00:	001a      	movs	r2, r3
 800ed02:	2100      	movs	r1, #0
 800ed04:	f000 fa27 	bl	800f156 <memset>
  if(hrtc->Instance==RTC)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a19      	ldr	r2, [pc, #100]	; (800ed74 <HAL_RTC_MspInit+0x84>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d12c      	bne.n	800ed6c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ed12:	193b      	adds	r3, r7, r4
 800ed14:	2280      	movs	r2, #128	; 0x80
 800ed16:	0292      	lsls	r2, r2, #10
 800ed18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800ed1a:	193b      	adds	r3, r7, r4
 800ed1c:	2280      	movs	r2, #128	; 0x80
 800ed1e:	0052      	lsls	r2, r2, #1
 800ed20:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ed22:	193b      	adds	r3, r7, r4
 800ed24:	0018      	movs	r0, r3
 800ed26:	f7f7 fa41 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800ed2a:	1e03      	subs	r3, r0, #0
 800ed2c:	d001      	beq.n	800ed32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800ed2e:	f7fe fd43 	bl	800d7b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ed32:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <HAL_RTC_MspInit+0x88>)
 800ed34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed36:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <HAL_RTC_MspInit+0x88>)
 800ed38:	2180      	movs	r1, #128	; 0x80
 800ed3a:	0209      	lsls	r1, r1, #8
 800ed3c:	430a      	orrs	r2, r1
 800ed3e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ed40:	4b0d      	ldr	r3, [pc, #52]	; (800ed78 <HAL_RTC_MspInit+0x88>)
 800ed42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed44:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <HAL_RTC_MspInit+0x88>)
 800ed46:	2180      	movs	r1, #128	; 0x80
 800ed48:	00c9      	lsls	r1, r1, #3
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ed4e:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <HAL_RTC_MspInit+0x88>)
 800ed50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed52:	2380      	movs	r3, #128	; 0x80
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	4013      	ands	r3, r2
 800ed58:	60bb      	str	r3, [r7, #8]
 800ed5a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2100      	movs	r1, #0
 800ed60:	2002      	movs	r0, #2
 800ed62:	f7f5 fb4b 	bl	80043fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800ed66:	2002      	movs	r0, #2
 800ed68:	f7f5 fb5d 	bl	8004426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ed6c:	46c0      	nop			; (mov r8, r8)
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	b011      	add	sp, #68	; 0x44
 800ed72:	bd90      	pop	{r4, r7, pc}
 800ed74:	40002800 	.word	0x40002800
 800ed78:	40021000 	.word	0x40021000

0800ed7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ed7c:	b590      	push	{r4, r7, lr}
 800ed7e:	b093      	sub	sp, #76	; 0x4c
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ed84:	2414      	movs	r4, #20
 800ed86:	193b      	adds	r3, r7, r4
 800ed88:	0018      	movs	r0, r3
 800ed8a:	2334      	movs	r3, #52	; 0x34
 800ed8c:	001a      	movs	r2, r3
 800ed8e:	2100      	movs	r1, #0
 800ed90:	f000 f9e1 	bl	800f156 <memset>
  if(htim_base->Instance==TIM1)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a34      	ldr	r2, [pc, #208]	; (800ee6c <HAL_TIM_Base_MspInit+0xf0>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d12d      	bne.n	800edfa <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800ed9e:	193b      	adds	r3, r7, r4
 800eda0:	2280      	movs	r2, #128	; 0x80
 800eda2:	0392      	lsls	r2, r2, #14
 800eda4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800eda6:	193b      	adds	r3, r7, r4
 800eda8:	2200      	movs	r2, #0
 800edaa:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800edac:	193b      	adds	r3, r7, r4
 800edae:	0018      	movs	r0, r3
 800edb0:	f7f7 f9fc 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800edb4:	1e03      	subs	r3, r0, #0
 800edb6:	d001      	beq.n	800edbc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800edb8:	f7fe fcfe 	bl	800d7b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800edbc:	4b2c      	ldr	r3, [pc, #176]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800edbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edc0:	4b2b      	ldr	r3, [pc, #172]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800edc2:	2180      	movs	r1, #128	; 0x80
 800edc4:	0109      	lsls	r1, r1, #4
 800edc6:	430a      	orrs	r2, r1
 800edc8:	641a      	str	r2, [r3, #64]	; 0x40
 800edca:	4b29      	ldr	r3, [pc, #164]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800edcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edce:	2380      	movs	r3, #128	; 0x80
 800edd0:	011b      	lsls	r3, r3, #4
 800edd2:	4013      	ands	r3, r2
 800edd4:	613b      	str	r3, [r7, #16]
 800edd6:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800edd8:	2200      	movs	r2, #0
 800edda:	2100      	movs	r1, #0
 800eddc:	200d      	movs	r0, #13
 800edde:	f7f5 fb0d 	bl	80043fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800ede2:	200d      	movs	r0, #13
 800ede4:	f7f5 fb1f 	bl	8004426 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800ede8:	2200      	movs	r2, #0
 800edea:	2100      	movs	r1, #0
 800edec:	200e      	movs	r0, #14
 800edee:	f7f5 fb05 	bl	80043fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800edf2:	200e      	movs	r0, #14
 800edf4:	f7f5 fb17 	bl	8004426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800edf8:	e033      	b.n	800ee62 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	2380      	movs	r3, #128	; 0x80
 800ee00:	05db      	lsls	r3, r3, #23
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d114      	bne.n	800ee30 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ee06:	4b1a      	ldr	r3, [pc, #104]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800ee08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee0a:	4b19      	ldr	r3, [pc, #100]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800ee0c:	2101      	movs	r1, #1
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	63da      	str	r2, [r3, #60]	; 0x3c
 800ee12:	4b17      	ldr	r3, [pc, #92]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800ee14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee16:	2201      	movs	r2, #1
 800ee18:	4013      	ands	r3, r2
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2100      	movs	r1, #0
 800ee22:	200f      	movs	r0, #15
 800ee24:	f7f5 faea 	bl	80043fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ee28:	200f      	movs	r0, #15
 800ee2a:	f7f5 fafc 	bl	8004426 <HAL_NVIC_EnableIRQ>
}
 800ee2e:	e018      	b.n	800ee62 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a0f      	ldr	r2, [pc, #60]	; (800ee74 <HAL_TIM_Base_MspInit+0xf8>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d113      	bne.n	800ee62 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800ee3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee3e:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800ee40:	2102      	movs	r1, #2
 800ee42:	430a      	orrs	r2, r1
 800ee44:	63da      	str	r2, [r3, #60]	; 0x3c
 800ee46:	4b0a      	ldr	r3, [pc, #40]	; (800ee70 <HAL_TIM_Base_MspInit+0xf4>)
 800ee48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee4a:	2202      	movs	r2, #2
 800ee4c:	4013      	ands	r3, r2
 800ee4e:	60bb      	str	r3, [r7, #8]
 800ee50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ee52:	2200      	movs	r2, #0
 800ee54:	2100      	movs	r1, #0
 800ee56:	2010      	movs	r0, #16
 800ee58:	f7f5 fad0 	bl	80043fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ee5c:	2010      	movs	r0, #16
 800ee5e:	f7f5 fae2 	bl	8004426 <HAL_NVIC_EnableIRQ>
}
 800ee62:	46c0      	nop			; (mov r8, r8)
 800ee64:	46bd      	mov	sp, r7
 800ee66:	b013      	add	sp, #76	; 0x4c
 800ee68:	bd90      	pop	{r4, r7, pc}
 800ee6a:	46c0      	nop			; (mov r8, r8)
 800ee6c:	40012c00 	.word	0x40012c00
 800ee70:	40021000 	.word	0x40021000
 800ee74:	40000400 	.word	0x40000400

0800ee78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ee78:	b590      	push	{r4, r7, lr}
 800ee7a:	b097      	sub	sp, #92	; 0x5c
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee80:	2344      	movs	r3, #68	; 0x44
 800ee82:	18fb      	adds	r3, r7, r3
 800ee84:	0018      	movs	r0, r3
 800ee86:	2314      	movs	r3, #20
 800ee88:	001a      	movs	r2, r3
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	f000 f963 	bl	800f156 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ee90:	2410      	movs	r4, #16
 800ee92:	193b      	adds	r3, r7, r4
 800ee94:	0018      	movs	r0, r3
 800ee96:	2334      	movs	r3, #52	; 0x34
 800ee98:	001a      	movs	r2, r3
 800ee9a:	2100      	movs	r1, #0
 800ee9c:	f000 f95b 	bl	800f156 <memset>
  if(huart->Instance==USART2)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a22      	ldr	r2, [pc, #136]	; (800ef30 <HAL_UART_MspInit+0xb8>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d13e      	bne.n	800ef28 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800eeaa:	193b      	adds	r3, r7, r4
 800eeac:	2202      	movs	r2, #2
 800eeae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800eeb0:	193b      	adds	r3, r7, r4
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eeb6:	193b      	adds	r3, r7, r4
 800eeb8:	0018      	movs	r0, r3
 800eeba:	f7f7 f977 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800eebe:	1e03      	subs	r3, r0, #0
 800eec0:	d001      	beq.n	800eec6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800eec2:	f7fe fc79 	bl	800d7b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800eec6:	4b1b      	ldr	r3, [pc, #108]	; (800ef34 <HAL_UART_MspInit+0xbc>)
 800eec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eeca:	4b1a      	ldr	r3, [pc, #104]	; (800ef34 <HAL_UART_MspInit+0xbc>)
 800eecc:	2180      	movs	r1, #128	; 0x80
 800eece:	0289      	lsls	r1, r1, #10
 800eed0:	430a      	orrs	r2, r1
 800eed2:	63da      	str	r2, [r3, #60]	; 0x3c
 800eed4:	4b17      	ldr	r3, [pc, #92]	; (800ef34 <HAL_UART_MspInit+0xbc>)
 800eed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eed8:	2380      	movs	r3, #128	; 0x80
 800eeda:	029b      	lsls	r3, r3, #10
 800eedc:	4013      	ands	r3, r2
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eee2:	4b14      	ldr	r3, [pc, #80]	; (800ef34 <HAL_UART_MspInit+0xbc>)
 800eee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eee6:	4b13      	ldr	r3, [pc, #76]	; (800ef34 <HAL_UART_MspInit+0xbc>)
 800eee8:	2101      	movs	r1, #1
 800eeea:	430a      	orrs	r2, r1
 800eeec:	635a      	str	r2, [r3, #52]	; 0x34
 800eeee:	4b11      	ldr	r3, [pc, #68]	; (800ef34 <HAL_UART_MspInit+0xbc>)
 800eef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef2:	2201      	movs	r2, #1
 800eef4:	4013      	ands	r3, r2
 800eef6:	60bb      	str	r3, [r7, #8]
 800eef8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800eefa:	2144      	movs	r1, #68	; 0x44
 800eefc:	187b      	adds	r3, r7, r1
 800eefe:	220c      	movs	r2, #12
 800ef00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef02:	187b      	adds	r3, r7, r1
 800ef04:	2202      	movs	r2, #2
 800ef06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef08:	187b      	adds	r3, r7, r1
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef0e:	187b      	adds	r3, r7, r1
 800ef10:	2200      	movs	r2, #0
 800ef12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ef14:	187b      	adds	r3, r7, r1
 800ef16:	2201      	movs	r2, #1
 800ef18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef1a:	187a      	adds	r2, r7, r1
 800ef1c:	23a0      	movs	r3, #160	; 0xa0
 800ef1e:	05db      	lsls	r3, r3, #23
 800ef20:	0011      	movs	r1, r2
 800ef22:	0018      	movs	r0, r3
 800ef24:	f7f5 fc3c 	bl	80047a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ef28:	46c0      	nop			; (mov r8, r8)
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	b017      	add	sp, #92	; 0x5c
 800ef2e:	bd90      	pop	{r4, r7, pc}
 800ef30:	40004400 	.word	0x40004400
 800ef34:	40021000 	.word	0x40021000

0800ef38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ef3c:	e7fe      	b.n	800ef3c <NMI_Handler+0x4>

0800ef3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ef42:	e7fe      	b.n	800ef42 <HardFault_Handler+0x4>

0800ef44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ef48:	46c0      	nop			; (mov r8, r8)
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ef52:	46c0      	nop			; (mov r8, r8)
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ef5c:	f7f4 fb86 	bl	800366c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ef60:	46c0      	nop			; (mov r8, r8)
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
	...

0800ef68 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800ef6c:	4b03      	ldr	r3, [pc, #12]	; (800ef7c <RTC_TAMP_IRQHandler+0x14>)
 800ef6e:	0018      	movs	r0, r3
 800ef70:	f7f7 fedc 	bl	8006d2c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800ef74:	46c0      	nop			; (mov r8, r8)
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	46c0      	nop			; (mov r8, r8)
 800ef7c:	2000076c 	.word	0x2000076c

0800ef80 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BACKUP_Pin);
 800ef84:	2001      	movs	r0, #1
 800ef86:	f7f5 fda9 	bl	8004adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800ef8a:	46c0      	nop			; (mov r8, r8)
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 800ef94:	2008      	movs	r0, #8
 800ef96:	f7f5 fda1 	bl	8004adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800ef9a:	46c0      	nop			; (mov r8, r8)
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800efa4:	2010      	movs	r0, #16
 800efa6:	f7f5 fd99 	bl	8004adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800efaa:	2020      	movs	r0, #32
 800efac:	f7f5 fd96 	bl	8004adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 800efb0:	2040      	movs	r0, #64	; 0x40
 800efb2:	f7f5 fd93 	bl	8004adc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 800efb6:	2080      	movs	r0, #128	; 0x80
 800efb8:	f7f5 fd90 	bl	8004adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800efbc:	46c0      	nop			; (mov r8, r8)
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
	...

0800efc4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800efc8:	4b03      	ldr	r3, [pc, #12]	; (800efd8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800efca:	0018      	movs	r0, r3
 800efcc:	f7f7 ffae 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800efd0:	46c0      	nop			; (mov r8, r8)
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	46c0      	nop			; (mov r8, r8)
 800efd8:	20000798 	.word	0x20000798

0800efdc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <TIM1_CC_IRQHandler+0x14>)
 800efe2:	0018      	movs	r0, r3
 800efe4:	f7f7 ffa2 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800efe8:	46c0      	nop			; (mov r8, r8)
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	46c0      	nop			; (mov r8, r8)
 800eff0:	20000798 	.word	0x20000798

0800eff4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800eff8:	4b03      	ldr	r3, [pc, #12]	; (800f008 <TIM2_IRQHandler+0x14>)
 800effa:	0018      	movs	r0, r3
 800effc:	f7f7 ff96 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800f000:	46c0      	nop			; (mov r8, r8)
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	46c0      	nop			; (mov r8, r8)
 800f008:	200007e4 	.word	0x200007e4

0800f00c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800f010:	4b03      	ldr	r3, [pc, #12]	; (800f020 <TIM3_IRQHandler+0x14>)
 800f012:	0018      	movs	r0, r3
 800f014:	f7f7 ff8a 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800f018:	46c0      	nop			; (mov r8, r8)
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	46c0      	nop			; (mov r8, r8)
 800f020:	20000674 	.word	0x20000674

0800f024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f02c:	4a14      	ldr	r2, [pc, #80]	; (800f080 <_sbrk+0x5c>)
 800f02e:	4b15      	ldr	r3, [pc, #84]	; (800f084 <_sbrk+0x60>)
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f038:	4b13      	ldr	r3, [pc, #76]	; (800f088 <_sbrk+0x64>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f040:	4b11      	ldr	r3, [pc, #68]	; (800f088 <_sbrk+0x64>)
 800f042:	4a12      	ldr	r2, [pc, #72]	; (800f08c <_sbrk+0x68>)
 800f044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f046:	4b10      	ldr	r3, [pc, #64]	; (800f088 <_sbrk+0x64>)
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	18d3      	adds	r3, r2, r3
 800f04e:	693a      	ldr	r2, [r7, #16]
 800f050:	429a      	cmp	r2, r3
 800f052:	d207      	bcs.n	800f064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f054:	f000 f84c 	bl	800f0f0 <__errno>
 800f058:	0003      	movs	r3, r0
 800f05a:	220c      	movs	r2, #12
 800f05c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f05e:	2301      	movs	r3, #1
 800f060:	425b      	negs	r3, r3
 800f062:	e009      	b.n	800f078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f064:	4b08      	ldr	r3, [pc, #32]	; (800f088 <_sbrk+0x64>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f06a:	4b07      	ldr	r3, [pc, #28]	; (800f088 <_sbrk+0x64>)
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	18d2      	adds	r2, r2, r3
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <_sbrk+0x64>)
 800f074:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800f076:	68fb      	ldr	r3, [r7, #12]
}
 800f078:	0018      	movs	r0, r3
 800f07a:	46bd      	mov	sp, r7
 800f07c:	b006      	add	sp, #24
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	20009000 	.word	0x20009000
 800f084:	00000400 	.word	0x00000400
 800f088:	20000144 	.word	0x20000144
 800f08c:	200008d0 	.word	0x200008d0

0800f090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f094:	46c0      	nop			; (mov r8, r8)
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
	...

0800f09c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f09c:	480d      	ldr	r0, [pc, #52]	; (800f0d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800f09e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f0a0:	f7ff fff6 	bl	800f090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f0a4:	480c      	ldr	r0, [pc, #48]	; (800f0d8 <LoopForever+0x6>)
  ldr r1, =_edata
 800f0a6:	490d      	ldr	r1, [pc, #52]	; (800f0dc <LoopForever+0xa>)
  ldr r2, =_sidata
 800f0a8:	4a0d      	ldr	r2, [pc, #52]	; (800f0e0 <LoopForever+0xe>)
  movs r3, #0
 800f0aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f0ac:	e002      	b.n	800f0b4 <LoopCopyDataInit>

0800f0ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f0ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f0b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f0b2:	3304      	adds	r3, #4

0800f0b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f0b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f0b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f0b8:	d3f9      	bcc.n	800f0ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f0ba:	4a0a      	ldr	r2, [pc, #40]	; (800f0e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f0bc:	4c0a      	ldr	r4, [pc, #40]	; (800f0e8 <LoopForever+0x16>)
  movs r3, #0
 800f0be:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f0c0:	e001      	b.n	800f0c6 <LoopFillZerobss>

0800f0c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f0c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f0c4:	3204      	adds	r2, #4

0800f0c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f0c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f0c8:	d3fb      	bcc.n	800f0c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800f0ca:	f000 f817 	bl	800f0fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800f0ce:	f7fd fcab 	bl	800ca28 <main>

0800f0d2 <LoopForever>:

LoopForever:
  b LoopForever
 800f0d2:	e7fe      	b.n	800f0d2 <LoopForever>
  ldr   r0, =_estack
 800f0d4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800f0d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f0dc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800f0e0:	08010698 	.word	0x08010698
  ldr r2, =_sbss
 800f0e4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800f0e8:	200008d0 	.word	0x200008d0

0800f0ec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800f0ec:	e7fe      	b.n	800f0ec <ADC1_COMP_IRQHandler>
	...

0800f0f0 <__errno>:
 800f0f0:	4b01      	ldr	r3, [pc, #4]	; (800f0f8 <__errno+0x8>)
 800f0f2:	6818      	ldr	r0, [r3, #0]
 800f0f4:	4770      	bx	lr
 800f0f6:	46c0      	nop			; (mov r8, r8)
 800f0f8:	20000010 	.word	0x20000010

0800f0fc <__libc_init_array>:
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	2600      	movs	r6, #0
 800f100:	4d0c      	ldr	r5, [pc, #48]	; (800f134 <__libc_init_array+0x38>)
 800f102:	4c0d      	ldr	r4, [pc, #52]	; (800f138 <__libc_init_array+0x3c>)
 800f104:	1b64      	subs	r4, r4, r5
 800f106:	10a4      	asrs	r4, r4, #2
 800f108:	42a6      	cmp	r6, r4
 800f10a:	d109      	bne.n	800f120 <__libc_init_array+0x24>
 800f10c:	2600      	movs	r6, #0
 800f10e:	f001 f86f 	bl	80101f0 <_init>
 800f112:	4d0a      	ldr	r5, [pc, #40]	; (800f13c <__libc_init_array+0x40>)
 800f114:	4c0a      	ldr	r4, [pc, #40]	; (800f140 <__libc_init_array+0x44>)
 800f116:	1b64      	subs	r4, r4, r5
 800f118:	10a4      	asrs	r4, r4, #2
 800f11a:	42a6      	cmp	r6, r4
 800f11c:	d105      	bne.n	800f12a <__libc_init_array+0x2e>
 800f11e:	bd70      	pop	{r4, r5, r6, pc}
 800f120:	00b3      	lsls	r3, r6, #2
 800f122:	58eb      	ldr	r3, [r5, r3]
 800f124:	4798      	blx	r3
 800f126:	3601      	adds	r6, #1
 800f128:	e7ee      	b.n	800f108 <__libc_init_array+0xc>
 800f12a:	00b3      	lsls	r3, r6, #2
 800f12c:	58eb      	ldr	r3, [r5, r3]
 800f12e:	4798      	blx	r3
 800f130:	3601      	adds	r6, #1
 800f132:	e7f2      	b.n	800f11a <__libc_init_array+0x1e>
 800f134:	08010690 	.word	0x08010690
 800f138:	08010690 	.word	0x08010690
 800f13c:	08010690 	.word	0x08010690
 800f140:	08010694 	.word	0x08010694

0800f144 <memcpy>:
 800f144:	2300      	movs	r3, #0
 800f146:	b510      	push	{r4, lr}
 800f148:	429a      	cmp	r2, r3
 800f14a:	d100      	bne.n	800f14e <memcpy+0xa>
 800f14c:	bd10      	pop	{r4, pc}
 800f14e:	5ccc      	ldrb	r4, [r1, r3]
 800f150:	54c4      	strb	r4, [r0, r3]
 800f152:	3301      	adds	r3, #1
 800f154:	e7f8      	b.n	800f148 <memcpy+0x4>

0800f156 <memset>:
 800f156:	0003      	movs	r3, r0
 800f158:	1882      	adds	r2, r0, r2
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d100      	bne.n	800f160 <memset+0xa>
 800f15e:	4770      	bx	lr
 800f160:	7019      	strb	r1, [r3, #0]
 800f162:	3301      	adds	r3, #1
 800f164:	e7f9      	b.n	800f15a <memset+0x4>
	...

0800f168 <siprintf>:
 800f168:	b40e      	push	{r1, r2, r3}
 800f16a:	b500      	push	{lr}
 800f16c:	490b      	ldr	r1, [pc, #44]	; (800f19c <siprintf+0x34>)
 800f16e:	b09c      	sub	sp, #112	; 0x70
 800f170:	ab1d      	add	r3, sp, #116	; 0x74
 800f172:	9002      	str	r0, [sp, #8]
 800f174:	9006      	str	r0, [sp, #24]
 800f176:	9107      	str	r1, [sp, #28]
 800f178:	9104      	str	r1, [sp, #16]
 800f17a:	4809      	ldr	r0, [pc, #36]	; (800f1a0 <siprintf+0x38>)
 800f17c:	4909      	ldr	r1, [pc, #36]	; (800f1a4 <siprintf+0x3c>)
 800f17e:	cb04      	ldmia	r3!, {r2}
 800f180:	9105      	str	r1, [sp, #20]
 800f182:	6800      	ldr	r0, [r0, #0]
 800f184:	a902      	add	r1, sp, #8
 800f186:	9301      	str	r3, [sp, #4]
 800f188:	f000 f870 	bl	800f26c <_svfiprintf_r>
 800f18c:	2300      	movs	r3, #0
 800f18e:	9a02      	ldr	r2, [sp, #8]
 800f190:	7013      	strb	r3, [r2, #0]
 800f192:	b01c      	add	sp, #112	; 0x70
 800f194:	bc08      	pop	{r3}
 800f196:	b003      	add	sp, #12
 800f198:	4718      	bx	r3
 800f19a:	46c0      	nop			; (mov r8, r8)
 800f19c:	7fffffff 	.word	0x7fffffff
 800f1a0:	20000010 	.word	0x20000010
 800f1a4:	ffff0208 	.word	0xffff0208

0800f1a8 <__ssputs_r>:
 800f1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1aa:	688e      	ldr	r6, [r1, #8]
 800f1ac:	b085      	sub	sp, #20
 800f1ae:	0007      	movs	r7, r0
 800f1b0:	000c      	movs	r4, r1
 800f1b2:	9203      	str	r2, [sp, #12]
 800f1b4:	9301      	str	r3, [sp, #4]
 800f1b6:	429e      	cmp	r6, r3
 800f1b8:	d83c      	bhi.n	800f234 <__ssputs_r+0x8c>
 800f1ba:	2390      	movs	r3, #144	; 0x90
 800f1bc:	898a      	ldrh	r2, [r1, #12]
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	421a      	tst	r2, r3
 800f1c2:	d034      	beq.n	800f22e <__ssputs_r+0x86>
 800f1c4:	2503      	movs	r5, #3
 800f1c6:	6909      	ldr	r1, [r1, #16]
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	1a5b      	subs	r3, r3, r1
 800f1cc:	9302      	str	r3, [sp, #8]
 800f1ce:	6963      	ldr	r3, [r4, #20]
 800f1d0:	9802      	ldr	r0, [sp, #8]
 800f1d2:	435d      	muls	r5, r3
 800f1d4:	0feb      	lsrs	r3, r5, #31
 800f1d6:	195d      	adds	r5, r3, r5
 800f1d8:	9b01      	ldr	r3, [sp, #4]
 800f1da:	106d      	asrs	r5, r5, #1
 800f1dc:	3301      	adds	r3, #1
 800f1de:	181b      	adds	r3, r3, r0
 800f1e0:	42ab      	cmp	r3, r5
 800f1e2:	d900      	bls.n	800f1e6 <__ssputs_r+0x3e>
 800f1e4:	001d      	movs	r5, r3
 800f1e6:	0553      	lsls	r3, r2, #21
 800f1e8:	d532      	bpl.n	800f250 <__ssputs_r+0xa8>
 800f1ea:	0029      	movs	r1, r5
 800f1ec:	0038      	movs	r0, r7
 800f1ee:	f000 fb27 	bl	800f840 <_malloc_r>
 800f1f2:	1e06      	subs	r6, r0, #0
 800f1f4:	d109      	bne.n	800f20a <__ssputs_r+0x62>
 800f1f6:	230c      	movs	r3, #12
 800f1f8:	603b      	str	r3, [r7, #0]
 800f1fa:	2340      	movs	r3, #64	; 0x40
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	89a2      	ldrh	r2, [r4, #12]
 800f200:	4240      	negs	r0, r0
 800f202:	4313      	orrs	r3, r2
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	b005      	add	sp, #20
 800f208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f20a:	9a02      	ldr	r2, [sp, #8]
 800f20c:	6921      	ldr	r1, [r4, #16]
 800f20e:	f7ff ff99 	bl	800f144 <memcpy>
 800f212:	89a3      	ldrh	r3, [r4, #12]
 800f214:	4a14      	ldr	r2, [pc, #80]	; (800f268 <__ssputs_r+0xc0>)
 800f216:	401a      	ands	r2, r3
 800f218:	2380      	movs	r3, #128	; 0x80
 800f21a:	4313      	orrs	r3, r2
 800f21c:	81a3      	strh	r3, [r4, #12]
 800f21e:	9b02      	ldr	r3, [sp, #8]
 800f220:	6126      	str	r6, [r4, #16]
 800f222:	18f6      	adds	r6, r6, r3
 800f224:	6026      	str	r6, [r4, #0]
 800f226:	6165      	str	r5, [r4, #20]
 800f228:	9e01      	ldr	r6, [sp, #4]
 800f22a:	1aed      	subs	r5, r5, r3
 800f22c:	60a5      	str	r5, [r4, #8]
 800f22e:	9b01      	ldr	r3, [sp, #4]
 800f230:	429e      	cmp	r6, r3
 800f232:	d900      	bls.n	800f236 <__ssputs_r+0x8e>
 800f234:	9e01      	ldr	r6, [sp, #4]
 800f236:	0032      	movs	r2, r6
 800f238:	9903      	ldr	r1, [sp, #12]
 800f23a:	6820      	ldr	r0, [r4, #0]
 800f23c:	f000 faa3 	bl	800f786 <memmove>
 800f240:	68a3      	ldr	r3, [r4, #8]
 800f242:	2000      	movs	r0, #0
 800f244:	1b9b      	subs	r3, r3, r6
 800f246:	60a3      	str	r3, [r4, #8]
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	199e      	adds	r6, r3, r6
 800f24c:	6026      	str	r6, [r4, #0]
 800f24e:	e7da      	b.n	800f206 <__ssputs_r+0x5e>
 800f250:	002a      	movs	r2, r5
 800f252:	0038      	movs	r0, r7
 800f254:	f000 fb52 	bl	800f8fc <_realloc_r>
 800f258:	1e06      	subs	r6, r0, #0
 800f25a:	d1e0      	bne.n	800f21e <__ssputs_r+0x76>
 800f25c:	0038      	movs	r0, r7
 800f25e:	6921      	ldr	r1, [r4, #16]
 800f260:	f000 faa4 	bl	800f7ac <_free_r>
 800f264:	e7c7      	b.n	800f1f6 <__ssputs_r+0x4e>
 800f266:	46c0      	nop			; (mov r8, r8)
 800f268:	fffffb7f 	.word	0xfffffb7f

0800f26c <_svfiprintf_r>:
 800f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f26e:	b0a1      	sub	sp, #132	; 0x84
 800f270:	9003      	str	r0, [sp, #12]
 800f272:	001d      	movs	r5, r3
 800f274:	898b      	ldrh	r3, [r1, #12]
 800f276:	000f      	movs	r7, r1
 800f278:	0016      	movs	r6, r2
 800f27a:	061b      	lsls	r3, r3, #24
 800f27c:	d511      	bpl.n	800f2a2 <_svfiprintf_r+0x36>
 800f27e:	690b      	ldr	r3, [r1, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10e      	bne.n	800f2a2 <_svfiprintf_r+0x36>
 800f284:	2140      	movs	r1, #64	; 0x40
 800f286:	f000 fadb 	bl	800f840 <_malloc_r>
 800f28a:	6038      	str	r0, [r7, #0]
 800f28c:	6138      	str	r0, [r7, #16]
 800f28e:	2800      	cmp	r0, #0
 800f290:	d105      	bne.n	800f29e <_svfiprintf_r+0x32>
 800f292:	230c      	movs	r3, #12
 800f294:	9a03      	ldr	r2, [sp, #12]
 800f296:	3801      	subs	r0, #1
 800f298:	6013      	str	r3, [r2, #0]
 800f29a:	b021      	add	sp, #132	; 0x84
 800f29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f29e:	2340      	movs	r3, #64	; 0x40
 800f2a0:	617b      	str	r3, [r7, #20]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	ac08      	add	r4, sp, #32
 800f2a6:	6163      	str	r3, [r4, #20]
 800f2a8:	3320      	adds	r3, #32
 800f2aa:	7663      	strb	r3, [r4, #25]
 800f2ac:	3310      	adds	r3, #16
 800f2ae:	76a3      	strb	r3, [r4, #26]
 800f2b0:	9507      	str	r5, [sp, #28]
 800f2b2:	0035      	movs	r5, r6
 800f2b4:	782b      	ldrb	r3, [r5, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <_svfiprintf_r+0x52>
 800f2ba:	2b25      	cmp	r3, #37	; 0x25
 800f2bc:	d147      	bne.n	800f34e <_svfiprintf_r+0xe2>
 800f2be:	1bab      	subs	r3, r5, r6
 800f2c0:	9305      	str	r3, [sp, #20]
 800f2c2:	42b5      	cmp	r5, r6
 800f2c4:	d00c      	beq.n	800f2e0 <_svfiprintf_r+0x74>
 800f2c6:	0032      	movs	r2, r6
 800f2c8:	0039      	movs	r1, r7
 800f2ca:	9803      	ldr	r0, [sp, #12]
 800f2cc:	f7ff ff6c 	bl	800f1a8 <__ssputs_r>
 800f2d0:	1c43      	adds	r3, r0, #1
 800f2d2:	d100      	bne.n	800f2d6 <_svfiprintf_r+0x6a>
 800f2d4:	e0ae      	b.n	800f434 <_svfiprintf_r+0x1c8>
 800f2d6:	6962      	ldr	r2, [r4, #20]
 800f2d8:	9b05      	ldr	r3, [sp, #20]
 800f2da:	4694      	mov	ip, r2
 800f2dc:	4463      	add	r3, ip
 800f2de:	6163      	str	r3, [r4, #20]
 800f2e0:	782b      	ldrb	r3, [r5, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d100      	bne.n	800f2e8 <_svfiprintf_r+0x7c>
 800f2e6:	e0a5      	b.n	800f434 <_svfiprintf_r+0x1c8>
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	4252      	negs	r2, r2
 800f2ee:	6062      	str	r2, [r4, #4]
 800f2f0:	a904      	add	r1, sp, #16
 800f2f2:	3254      	adds	r2, #84	; 0x54
 800f2f4:	1852      	adds	r2, r2, r1
 800f2f6:	1c6e      	adds	r6, r5, #1
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	60e3      	str	r3, [r4, #12]
 800f2fc:	60a3      	str	r3, [r4, #8]
 800f2fe:	7013      	strb	r3, [r2, #0]
 800f300:	65a3      	str	r3, [r4, #88]	; 0x58
 800f302:	2205      	movs	r2, #5
 800f304:	7831      	ldrb	r1, [r6, #0]
 800f306:	4854      	ldr	r0, [pc, #336]	; (800f458 <_svfiprintf_r+0x1ec>)
 800f308:	f000 fa32 	bl	800f770 <memchr>
 800f30c:	1c75      	adds	r5, r6, #1
 800f30e:	2800      	cmp	r0, #0
 800f310:	d11f      	bne.n	800f352 <_svfiprintf_r+0xe6>
 800f312:	6822      	ldr	r2, [r4, #0]
 800f314:	06d3      	lsls	r3, r2, #27
 800f316:	d504      	bpl.n	800f322 <_svfiprintf_r+0xb6>
 800f318:	2353      	movs	r3, #83	; 0x53
 800f31a:	a904      	add	r1, sp, #16
 800f31c:	185b      	adds	r3, r3, r1
 800f31e:	2120      	movs	r1, #32
 800f320:	7019      	strb	r1, [r3, #0]
 800f322:	0713      	lsls	r3, r2, #28
 800f324:	d504      	bpl.n	800f330 <_svfiprintf_r+0xc4>
 800f326:	2353      	movs	r3, #83	; 0x53
 800f328:	a904      	add	r1, sp, #16
 800f32a:	185b      	adds	r3, r3, r1
 800f32c:	212b      	movs	r1, #43	; 0x2b
 800f32e:	7019      	strb	r1, [r3, #0]
 800f330:	7833      	ldrb	r3, [r6, #0]
 800f332:	2b2a      	cmp	r3, #42	; 0x2a
 800f334:	d016      	beq.n	800f364 <_svfiprintf_r+0xf8>
 800f336:	0035      	movs	r5, r6
 800f338:	2100      	movs	r1, #0
 800f33a:	200a      	movs	r0, #10
 800f33c:	68e3      	ldr	r3, [r4, #12]
 800f33e:	782a      	ldrb	r2, [r5, #0]
 800f340:	1c6e      	adds	r6, r5, #1
 800f342:	3a30      	subs	r2, #48	; 0x30
 800f344:	2a09      	cmp	r2, #9
 800f346:	d94e      	bls.n	800f3e6 <_svfiprintf_r+0x17a>
 800f348:	2900      	cmp	r1, #0
 800f34a:	d111      	bne.n	800f370 <_svfiprintf_r+0x104>
 800f34c:	e017      	b.n	800f37e <_svfiprintf_r+0x112>
 800f34e:	3501      	adds	r5, #1
 800f350:	e7b0      	b.n	800f2b4 <_svfiprintf_r+0x48>
 800f352:	4b41      	ldr	r3, [pc, #260]	; (800f458 <_svfiprintf_r+0x1ec>)
 800f354:	6822      	ldr	r2, [r4, #0]
 800f356:	1ac0      	subs	r0, r0, r3
 800f358:	2301      	movs	r3, #1
 800f35a:	4083      	lsls	r3, r0
 800f35c:	4313      	orrs	r3, r2
 800f35e:	002e      	movs	r6, r5
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	e7ce      	b.n	800f302 <_svfiprintf_r+0x96>
 800f364:	9b07      	ldr	r3, [sp, #28]
 800f366:	1d19      	adds	r1, r3, #4
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	9107      	str	r1, [sp, #28]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	db01      	blt.n	800f374 <_svfiprintf_r+0x108>
 800f370:	930b      	str	r3, [sp, #44]	; 0x2c
 800f372:	e004      	b.n	800f37e <_svfiprintf_r+0x112>
 800f374:	425b      	negs	r3, r3
 800f376:	60e3      	str	r3, [r4, #12]
 800f378:	2302      	movs	r3, #2
 800f37a:	4313      	orrs	r3, r2
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	782b      	ldrb	r3, [r5, #0]
 800f380:	2b2e      	cmp	r3, #46	; 0x2e
 800f382:	d10a      	bne.n	800f39a <_svfiprintf_r+0x12e>
 800f384:	786b      	ldrb	r3, [r5, #1]
 800f386:	2b2a      	cmp	r3, #42	; 0x2a
 800f388:	d135      	bne.n	800f3f6 <_svfiprintf_r+0x18a>
 800f38a:	9b07      	ldr	r3, [sp, #28]
 800f38c:	3502      	adds	r5, #2
 800f38e:	1d1a      	adds	r2, r3, #4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	9207      	str	r2, [sp, #28]
 800f394:	2b00      	cmp	r3, #0
 800f396:	db2b      	blt.n	800f3f0 <_svfiprintf_r+0x184>
 800f398:	9309      	str	r3, [sp, #36]	; 0x24
 800f39a:	4e30      	ldr	r6, [pc, #192]	; (800f45c <_svfiprintf_r+0x1f0>)
 800f39c:	2203      	movs	r2, #3
 800f39e:	0030      	movs	r0, r6
 800f3a0:	7829      	ldrb	r1, [r5, #0]
 800f3a2:	f000 f9e5 	bl	800f770 <memchr>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d006      	beq.n	800f3b8 <_svfiprintf_r+0x14c>
 800f3aa:	2340      	movs	r3, #64	; 0x40
 800f3ac:	1b80      	subs	r0, r0, r6
 800f3ae:	4083      	lsls	r3, r0
 800f3b0:	6822      	ldr	r2, [r4, #0]
 800f3b2:	3501      	adds	r5, #1
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	6023      	str	r3, [r4, #0]
 800f3b8:	7829      	ldrb	r1, [r5, #0]
 800f3ba:	2206      	movs	r2, #6
 800f3bc:	4828      	ldr	r0, [pc, #160]	; (800f460 <_svfiprintf_r+0x1f4>)
 800f3be:	1c6e      	adds	r6, r5, #1
 800f3c0:	7621      	strb	r1, [r4, #24]
 800f3c2:	f000 f9d5 	bl	800f770 <memchr>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d03c      	beq.n	800f444 <_svfiprintf_r+0x1d8>
 800f3ca:	4b26      	ldr	r3, [pc, #152]	; (800f464 <_svfiprintf_r+0x1f8>)
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d125      	bne.n	800f41c <_svfiprintf_r+0x1b0>
 800f3d0:	2207      	movs	r2, #7
 800f3d2:	9b07      	ldr	r3, [sp, #28]
 800f3d4:	3307      	adds	r3, #7
 800f3d6:	4393      	bics	r3, r2
 800f3d8:	3308      	adds	r3, #8
 800f3da:	9307      	str	r3, [sp, #28]
 800f3dc:	6963      	ldr	r3, [r4, #20]
 800f3de:	9a04      	ldr	r2, [sp, #16]
 800f3e0:	189b      	adds	r3, r3, r2
 800f3e2:	6163      	str	r3, [r4, #20]
 800f3e4:	e765      	b.n	800f2b2 <_svfiprintf_r+0x46>
 800f3e6:	4343      	muls	r3, r0
 800f3e8:	0035      	movs	r5, r6
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	189b      	adds	r3, r3, r2
 800f3ee:	e7a6      	b.n	800f33e <_svfiprintf_r+0xd2>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	425b      	negs	r3, r3
 800f3f4:	e7d0      	b.n	800f398 <_svfiprintf_r+0x12c>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	200a      	movs	r0, #10
 800f3fa:	001a      	movs	r2, r3
 800f3fc:	3501      	adds	r5, #1
 800f3fe:	6063      	str	r3, [r4, #4]
 800f400:	7829      	ldrb	r1, [r5, #0]
 800f402:	1c6e      	adds	r6, r5, #1
 800f404:	3930      	subs	r1, #48	; 0x30
 800f406:	2909      	cmp	r1, #9
 800f408:	d903      	bls.n	800f412 <_svfiprintf_r+0x1a6>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d0c5      	beq.n	800f39a <_svfiprintf_r+0x12e>
 800f40e:	9209      	str	r2, [sp, #36]	; 0x24
 800f410:	e7c3      	b.n	800f39a <_svfiprintf_r+0x12e>
 800f412:	4342      	muls	r2, r0
 800f414:	0035      	movs	r5, r6
 800f416:	2301      	movs	r3, #1
 800f418:	1852      	adds	r2, r2, r1
 800f41a:	e7f1      	b.n	800f400 <_svfiprintf_r+0x194>
 800f41c:	ab07      	add	r3, sp, #28
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	003a      	movs	r2, r7
 800f422:	0021      	movs	r1, r4
 800f424:	4b10      	ldr	r3, [pc, #64]	; (800f468 <_svfiprintf_r+0x1fc>)
 800f426:	9803      	ldr	r0, [sp, #12]
 800f428:	e000      	b.n	800f42c <_svfiprintf_r+0x1c0>
 800f42a:	bf00      	nop
 800f42c:	9004      	str	r0, [sp, #16]
 800f42e:	9b04      	ldr	r3, [sp, #16]
 800f430:	3301      	adds	r3, #1
 800f432:	d1d3      	bne.n	800f3dc <_svfiprintf_r+0x170>
 800f434:	89bb      	ldrh	r3, [r7, #12]
 800f436:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f438:	065b      	lsls	r3, r3, #25
 800f43a:	d400      	bmi.n	800f43e <_svfiprintf_r+0x1d2>
 800f43c:	e72d      	b.n	800f29a <_svfiprintf_r+0x2e>
 800f43e:	2001      	movs	r0, #1
 800f440:	4240      	negs	r0, r0
 800f442:	e72a      	b.n	800f29a <_svfiprintf_r+0x2e>
 800f444:	ab07      	add	r3, sp, #28
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	003a      	movs	r2, r7
 800f44a:	0021      	movs	r1, r4
 800f44c:	4b06      	ldr	r3, [pc, #24]	; (800f468 <_svfiprintf_r+0x1fc>)
 800f44e:	9803      	ldr	r0, [sp, #12]
 800f450:	f000 f87c 	bl	800f54c <_printf_i>
 800f454:	e7ea      	b.n	800f42c <_svfiprintf_r+0x1c0>
 800f456:	46c0      	nop			; (mov r8, r8)
 800f458:	080105e0 	.word	0x080105e0
 800f45c:	080105e6 	.word	0x080105e6
 800f460:	080105ea 	.word	0x080105ea
 800f464:	00000000 	.word	0x00000000
 800f468:	0800f1a9 	.word	0x0800f1a9

0800f46c <_printf_common>:
 800f46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f46e:	0015      	movs	r5, r2
 800f470:	9301      	str	r3, [sp, #4]
 800f472:	688a      	ldr	r2, [r1, #8]
 800f474:	690b      	ldr	r3, [r1, #16]
 800f476:	000c      	movs	r4, r1
 800f478:	9000      	str	r0, [sp, #0]
 800f47a:	4293      	cmp	r3, r2
 800f47c:	da00      	bge.n	800f480 <_printf_common+0x14>
 800f47e:	0013      	movs	r3, r2
 800f480:	0022      	movs	r2, r4
 800f482:	602b      	str	r3, [r5, #0]
 800f484:	3243      	adds	r2, #67	; 0x43
 800f486:	7812      	ldrb	r2, [r2, #0]
 800f488:	2a00      	cmp	r2, #0
 800f48a:	d001      	beq.n	800f490 <_printf_common+0x24>
 800f48c:	3301      	adds	r3, #1
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	069b      	lsls	r3, r3, #26
 800f494:	d502      	bpl.n	800f49c <_printf_common+0x30>
 800f496:	682b      	ldr	r3, [r5, #0]
 800f498:	3302      	adds	r3, #2
 800f49a:	602b      	str	r3, [r5, #0]
 800f49c:	6822      	ldr	r2, [r4, #0]
 800f49e:	2306      	movs	r3, #6
 800f4a0:	0017      	movs	r7, r2
 800f4a2:	401f      	ands	r7, r3
 800f4a4:	421a      	tst	r2, r3
 800f4a6:	d027      	beq.n	800f4f8 <_printf_common+0x8c>
 800f4a8:	0023      	movs	r3, r4
 800f4aa:	3343      	adds	r3, #67	; 0x43
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	1e5a      	subs	r2, r3, #1
 800f4b0:	4193      	sbcs	r3, r2
 800f4b2:	6822      	ldr	r2, [r4, #0]
 800f4b4:	0692      	lsls	r2, r2, #26
 800f4b6:	d430      	bmi.n	800f51a <_printf_common+0xae>
 800f4b8:	0022      	movs	r2, r4
 800f4ba:	9901      	ldr	r1, [sp, #4]
 800f4bc:	9800      	ldr	r0, [sp, #0]
 800f4be:	9e08      	ldr	r6, [sp, #32]
 800f4c0:	3243      	adds	r2, #67	; 0x43
 800f4c2:	47b0      	blx	r6
 800f4c4:	1c43      	adds	r3, r0, #1
 800f4c6:	d025      	beq.n	800f514 <_printf_common+0xa8>
 800f4c8:	2306      	movs	r3, #6
 800f4ca:	6820      	ldr	r0, [r4, #0]
 800f4cc:	682a      	ldr	r2, [r5, #0]
 800f4ce:	68e1      	ldr	r1, [r4, #12]
 800f4d0:	2500      	movs	r5, #0
 800f4d2:	4003      	ands	r3, r0
 800f4d4:	2b04      	cmp	r3, #4
 800f4d6:	d103      	bne.n	800f4e0 <_printf_common+0x74>
 800f4d8:	1a8d      	subs	r5, r1, r2
 800f4da:	43eb      	mvns	r3, r5
 800f4dc:	17db      	asrs	r3, r3, #31
 800f4de:	401d      	ands	r5, r3
 800f4e0:	68a3      	ldr	r3, [r4, #8]
 800f4e2:	6922      	ldr	r2, [r4, #16]
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	dd01      	ble.n	800f4ec <_printf_common+0x80>
 800f4e8:	1a9b      	subs	r3, r3, r2
 800f4ea:	18ed      	adds	r5, r5, r3
 800f4ec:	2700      	movs	r7, #0
 800f4ee:	42bd      	cmp	r5, r7
 800f4f0:	d120      	bne.n	800f534 <_printf_common+0xc8>
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	e010      	b.n	800f518 <_printf_common+0xac>
 800f4f6:	3701      	adds	r7, #1
 800f4f8:	68e3      	ldr	r3, [r4, #12]
 800f4fa:	682a      	ldr	r2, [r5, #0]
 800f4fc:	1a9b      	subs	r3, r3, r2
 800f4fe:	42bb      	cmp	r3, r7
 800f500:	ddd2      	ble.n	800f4a8 <_printf_common+0x3c>
 800f502:	0022      	movs	r2, r4
 800f504:	2301      	movs	r3, #1
 800f506:	9901      	ldr	r1, [sp, #4]
 800f508:	9800      	ldr	r0, [sp, #0]
 800f50a:	9e08      	ldr	r6, [sp, #32]
 800f50c:	3219      	adds	r2, #25
 800f50e:	47b0      	blx	r6
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d1f0      	bne.n	800f4f6 <_printf_common+0x8a>
 800f514:	2001      	movs	r0, #1
 800f516:	4240      	negs	r0, r0
 800f518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f51a:	2030      	movs	r0, #48	; 0x30
 800f51c:	18e1      	adds	r1, r4, r3
 800f51e:	3143      	adds	r1, #67	; 0x43
 800f520:	7008      	strb	r0, [r1, #0]
 800f522:	0021      	movs	r1, r4
 800f524:	1c5a      	adds	r2, r3, #1
 800f526:	3145      	adds	r1, #69	; 0x45
 800f528:	7809      	ldrb	r1, [r1, #0]
 800f52a:	18a2      	adds	r2, r4, r2
 800f52c:	3243      	adds	r2, #67	; 0x43
 800f52e:	3302      	adds	r3, #2
 800f530:	7011      	strb	r1, [r2, #0]
 800f532:	e7c1      	b.n	800f4b8 <_printf_common+0x4c>
 800f534:	0022      	movs	r2, r4
 800f536:	2301      	movs	r3, #1
 800f538:	9901      	ldr	r1, [sp, #4]
 800f53a:	9800      	ldr	r0, [sp, #0]
 800f53c:	9e08      	ldr	r6, [sp, #32]
 800f53e:	321a      	adds	r2, #26
 800f540:	47b0      	blx	r6
 800f542:	1c43      	adds	r3, r0, #1
 800f544:	d0e6      	beq.n	800f514 <_printf_common+0xa8>
 800f546:	3701      	adds	r7, #1
 800f548:	e7d1      	b.n	800f4ee <_printf_common+0x82>
	...

0800f54c <_printf_i>:
 800f54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f54e:	b08b      	sub	sp, #44	; 0x2c
 800f550:	9206      	str	r2, [sp, #24]
 800f552:	000a      	movs	r2, r1
 800f554:	3243      	adds	r2, #67	; 0x43
 800f556:	9307      	str	r3, [sp, #28]
 800f558:	9005      	str	r0, [sp, #20]
 800f55a:	9204      	str	r2, [sp, #16]
 800f55c:	7e0a      	ldrb	r2, [r1, #24]
 800f55e:	000c      	movs	r4, r1
 800f560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f562:	2a78      	cmp	r2, #120	; 0x78
 800f564:	d806      	bhi.n	800f574 <_printf_i+0x28>
 800f566:	2a62      	cmp	r2, #98	; 0x62
 800f568:	d808      	bhi.n	800f57c <_printf_i+0x30>
 800f56a:	2a00      	cmp	r2, #0
 800f56c:	d100      	bne.n	800f570 <_printf_i+0x24>
 800f56e:	e0c0      	b.n	800f6f2 <_printf_i+0x1a6>
 800f570:	2a58      	cmp	r2, #88	; 0x58
 800f572:	d052      	beq.n	800f61a <_printf_i+0xce>
 800f574:	0026      	movs	r6, r4
 800f576:	3642      	adds	r6, #66	; 0x42
 800f578:	7032      	strb	r2, [r6, #0]
 800f57a:	e022      	b.n	800f5c2 <_printf_i+0x76>
 800f57c:	0010      	movs	r0, r2
 800f57e:	3863      	subs	r0, #99	; 0x63
 800f580:	2815      	cmp	r0, #21
 800f582:	d8f7      	bhi.n	800f574 <_printf_i+0x28>
 800f584:	f7f0 fdc0 	bl	8000108 <__gnu_thumb1_case_shi>
 800f588:	001f0016 	.word	0x001f0016
 800f58c:	fff6fff6 	.word	0xfff6fff6
 800f590:	fff6fff6 	.word	0xfff6fff6
 800f594:	fff6001f 	.word	0xfff6001f
 800f598:	fff6fff6 	.word	0xfff6fff6
 800f59c:	00a8fff6 	.word	0x00a8fff6
 800f5a0:	009a0036 	.word	0x009a0036
 800f5a4:	fff6fff6 	.word	0xfff6fff6
 800f5a8:	fff600b9 	.word	0xfff600b9
 800f5ac:	fff60036 	.word	0xfff60036
 800f5b0:	009efff6 	.word	0x009efff6
 800f5b4:	0026      	movs	r6, r4
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	3642      	adds	r6, #66	; 0x42
 800f5ba:	1d11      	adds	r1, r2, #4
 800f5bc:	6019      	str	r1, [r3, #0]
 800f5be:	6813      	ldr	r3, [r2, #0]
 800f5c0:	7033      	strb	r3, [r6, #0]
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	e0a7      	b.n	800f716 <_printf_i+0x1ca>
 800f5c6:	6808      	ldr	r0, [r1, #0]
 800f5c8:	6819      	ldr	r1, [r3, #0]
 800f5ca:	1d0a      	adds	r2, r1, #4
 800f5cc:	0605      	lsls	r5, r0, #24
 800f5ce:	d50b      	bpl.n	800f5e8 <_printf_i+0x9c>
 800f5d0:	680d      	ldr	r5, [r1, #0]
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	2d00      	cmp	r5, #0
 800f5d6:	da03      	bge.n	800f5e0 <_printf_i+0x94>
 800f5d8:	232d      	movs	r3, #45	; 0x2d
 800f5da:	9a04      	ldr	r2, [sp, #16]
 800f5dc:	426d      	negs	r5, r5
 800f5de:	7013      	strb	r3, [r2, #0]
 800f5e0:	4b61      	ldr	r3, [pc, #388]	; (800f768 <_printf_i+0x21c>)
 800f5e2:	270a      	movs	r7, #10
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	e032      	b.n	800f64e <_printf_i+0x102>
 800f5e8:	680d      	ldr	r5, [r1, #0]
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	0641      	lsls	r1, r0, #25
 800f5ee:	d5f1      	bpl.n	800f5d4 <_printf_i+0x88>
 800f5f0:	b22d      	sxth	r5, r5
 800f5f2:	e7ef      	b.n	800f5d4 <_printf_i+0x88>
 800f5f4:	680d      	ldr	r5, [r1, #0]
 800f5f6:	6819      	ldr	r1, [r3, #0]
 800f5f8:	1d08      	adds	r0, r1, #4
 800f5fa:	6018      	str	r0, [r3, #0]
 800f5fc:	062e      	lsls	r6, r5, #24
 800f5fe:	d501      	bpl.n	800f604 <_printf_i+0xb8>
 800f600:	680d      	ldr	r5, [r1, #0]
 800f602:	e003      	b.n	800f60c <_printf_i+0xc0>
 800f604:	066d      	lsls	r5, r5, #25
 800f606:	d5fb      	bpl.n	800f600 <_printf_i+0xb4>
 800f608:	680d      	ldr	r5, [r1, #0]
 800f60a:	b2ad      	uxth	r5, r5
 800f60c:	4b56      	ldr	r3, [pc, #344]	; (800f768 <_printf_i+0x21c>)
 800f60e:	270a      	movs	r7, #10
 800f610:	9303      	str	r3, [sp, #12]
 800f612:	2a6f      	cmp	r2, #111	; 0x6f
 800f614:	d117      	bne.n	800f646 <_printf_i+0xfa>
 800f616:	2708      	movs	r7, #8
 800f618:	e015      	b.n	800f646 <_printf_i+0xfa>
 800f61a:	3145      	adds	r1, #69	; 0x45
 800f61c:	700a      	strb	r2, [r1, #0]
 800f61e:	4a52      	ldr	r2, [pc, #328]	; (800f768 <_printf_i+0x21c>)
 800f620:	9203      	str	r2, [sp, #12]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	6821      	ldr	r1, [r4, #0]
 800f626:	ca20      	ldmia	r2!, {r5}
 800f628:	601a      	str	r2, [r3, #0]
 800f62a:	0608      	lsls	r0, r1, #24
 800f62c:	d550      	bpl.n	800f6d0 <_printf_i+0x184>
 800f62e:	07cb      	lsls	r3, r1, #31
 800f630:	d502      	bpl.n	800f638 <_printf_i+0xec>
 800f632:	2320      	movs	r3, #32
 800f634:	4319      	orrs	r1, r3
 800f636:	6021      	str	r1, [r4, #0]
 800f638:	2710      	movs	r7, #16
 800f63a:	2d00      	cmp	r5, #0
 800f63c:	d103      	bne.n	800f646 <_printf_i+0xfa>
 800f63e:	2320      	movs	r3, #32
 800f640:	6822      	ldr	r2, [r4, #0]
 800f642:	439a      	bics	r2, r3
 800f644:	6022      	str	r2, [r4, #0]
 800f646:	0023      	movs	r3, r4
 800f648:	2200      	movs	r2, #0
 800f64a:	3343      	adds	r3, #67	; 0x43
 800f64c:	701a      	strb	r2, [r3, #0]
 800f64e:	6863      	ldr	r3, [r4, #4]
 800f650:	60a3      	str	r3, [r4, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	db03      	blt.n	800f65e <_printf_i+0x112>
 800f656:	2204      	movs	r2, #4
 800f658:	6821      	ldr	r1, [r4, #0]
 800f65a:	4391      	bics	r1, r2
 800f65c:	6021      	str	r1, [r4, #0]
 800f65e:	2d00      	cmp	r5, #0
 800f660:	d102      	bne.n	800f668 <_printf_i+0x11c>
 800f662:	9e04      	ldr	r6, [sp, #16]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00c      	beq.n	800f682 <_printf_i+0x136>
 800f668:	9e04      	ldr	r6, [sp, #16]
 800f66a:	0028      	movs	r0, r5
 800f66c:	0039      	movs	r1, r7
 800f66e:	f7f0 fddb 	bl	8000228 <__aeabi_uidivmod>
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	3e01      	subs	r6, #1
 800f676:	5c5b      	ldrb	r3, [r3, r1]
 800f678:	7033      	strb	r3, [r6, #0]
 800f67a:	002b      	movs	r3, r5
 800f67c:	0005      	movs	r5, r0
 800f67e:	429f      	cmp	r7, r3
 800f680:	d9f3      	bls.n	800f66a <_printf_i+0x11e>
 800f682:	2f08      	cmp	r7, #8
 800f684:	d109      	bne.n	800f69a <_printf_i+0x14e>
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	07db      	lsls	r3, r3, #31
 800f68a:	d506      	bpl.n	800f69a <_printf_i+0x14e>
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	6922      	ldr	r2, [r4, #16]
 800f690:	4293      	cmp	r3, r2
 800f692:	dc02      	bgt.n	800f69a <_printf_i+0x14e>
 800f694:	2330      	movs	r3, #48	; 0x30
 800f696:	3e01      	subs	r6, #1
 800f698:	7033      	strb	r3, [r6, #0]
 800f69a:	9b04      	ldr	r3, [sp, #16]
 800f69c:	1b9b      	subs	r3, r3, r6
 800f69e:	6123      	str	r3, [r4, #16]
 800f6a0:	9b07      	ldr	r3, [sp, #28]
 800f6a2:	0021      	movs	r1, r4
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	9805      	ldr	r0, [sp, #20]
 800f6a8:	9b06      	ldr	r3, [sp, #24]
 800f6aa:	aa09      	add	r2, sp, #36	; 0x24
 800f6ac:	f7ff fede 	bl	800f46c <_printf_common>
 800f6b0:	1c43      	adds	r3, r0, #1
 800f6b2:	d135      	bne.n	800f720 <_printf_i+0x1d4>
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	4240      	negs	r0, r0
 800f6b8:	b00b      	add	sp, #44	; 0x2c
 800f6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6bc:	2220      	movs	r2, #32
 800f6be:	6809      	ldr	r1, [r1, #0]
 800f6c0:	430a      	orrs	r2, r1
 800f6c2:	6022      	str	r2, [r4, #0]
 800f6c4:	0022      	movs	r2, r4
 800f6c6:	2178      	movs	r1, #120	; 0x78
 800f6c8:	3245      	adds	r2, #69	; 0x45
 800f6ca:	7011      	strb	r1, [r2, #0]
 800f6cc:	4a27      	ldr	r2, [pc, #156]	; (800f76c <_printf_i+0x220>)
 800f6ce:	e7a7      	b.n	800f620 <_printf_i+0xd4>
 800f6d0:	0648      	lsls	r0, r1, #25
 800f6d2:	d5ac      	bpl.n	800f62e <_printf_i+0xe2>
 800f6d4:	b2ad      	uxth	r5, r5
 800f6d6:	e7aa      	b.n	800f62e <_printf_i+0xe2>
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	680d      	ldr	r5, [r1, #0]
 800f6dc:	1d10      	adds	r0, r2, #4
 800f6de:	6949      	ldr	r1, [r1, #20]
 800f6e0:	6018      	str	r0, [r3, #0]
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	062e      	lsls	r6, r5, #24
 800f6e6:	d501      	bpl.n	800f6ec <_printf_i+0x1a0>
 800f6e8:	6019      	str	r1, [r3, #0]
 800f6ea:	e002      	b.n	800f6f2 <_printf_i+0x1a6>
 800f6ec:	066d      	lsls	r5, r5, #25
 800f6ee:	d5fb      	bpl.n	800f6e8 <_printf_i+0x19c>
 800f6f0:	8019      	strh	r1, [r3, #0]
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9e04      	ldr	r6, [sp, #16]
 800f6f6:	6123      	str	r3, [r4, #16]
 800f6f8:	e7d2      	b.n	800f6a0 <_printf_i+0x154>
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	1d11      	adds	r1, r2, #4
 800f6fe:	6019      	str	r1, [r3, #0]
 800f700:	6816      	ldr	r6, [r2, #0]
 800f702:	2100      	movs	r1, #0
 800f704:	0030      	movs	r0, r6
 800f706:	6862      	ldr	r2, [r4, #4]
 800f708:	f000 f832 	bl	800f770 <memchr>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d001      	beq.n	800f714 <_printf_i+0x1c8>
 800f710:	1b80      	subs	r0, r0, r6
 800f712:	6060      	str	r0, [r4, #4]
 800f714:	6863      	ldr	r3, [r4, #4]
 800f716:	6123      	str	r3, [r4, #16]
 800f718:	2300      	movs	r3, #0
 800f71a:	9a04      	ldr	r2, [sp, #16]
 800f71c:	7013      	strb	r3, [r2, #0]
 800f71e:	e7bf      	b.n	800f6a0 <_printf_i+0x154>
 800f720:	6923      	ldr	r3, [r4, #16]
 800f722:	0032      	movs	r2, r6
 800f724:	9906      	ldr	r1, [sp, #24]
 800f726:	9805      	ldr	r0, [sp, #20]
 800f728:	9d07      	ldr	r5, [sp, #28]
 800f72a:	47a8      	blx	r5
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d0c1      	beq.n	800f6b4 <_printf_i+0x168>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	079b      	lsls	r3, r3, #30
 800f734:	d415      	bmi.n	800f762 <_printf_i+0x216>
 800f736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f738:	68e0      	ldr	r0, [r4, #12]
 800f73a:	4298      	cmp	r0, r3
 800f73c:	dabc      	bge.n	800f6b8 <_printf_i+0x16c>
 800f73e:	0018      	movs	r0, r3
 800f740:	e7ba      	b.n	800f6b8 <_printf_i+0x16c>
 800f742:	0022      	movs	r2, r4
 800f744:	2301      	movs	r3, #1
 800f746:	9906      	ldr	r1, [sp, #24]
 800f748:	9805      	ldr	r0, [sp, #20]
 800f74a:	9e07      	ldr	r6, [sp, #28]
 800f74c:	3219      	adds	r2, #25
 800f74e:	47b0      	blx	r6
 800f750:	1c43      	adds	r3, r0, #1
 800f752:	d0af      	beq.n	800f6b4 <_printf_i+0x168>
 800f754:	3501      	adds	r5, #1
 800f756:	68e3      	ldr	r3, [r4, #12]
 800f758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f75a:	1a9b      	subs	r3, r3, r2
 800f75c:	42ab      	cmp	r3, r5
 800f75e:	dcf0      	bgt.n	800f742 <_printf_i+0x1f6>
 800f760:	e7e9      	b.n	800f736 <_printf_i+0x1ea>
 800f762:	2500      	movs	r5, #0
 800f764:	e7f7      	b.n	800f756 <_printf_i+0x20a>
 800f766:	46c0      	nop			; (mov r8, r8)
 800f768:	080105f1 	.word	0x080105f1
 800f76c:	08010602 	.word	0x08010602

0800f770 <memchr>:
 800f770:	b2c9      	uxtb	r1, r1
 800f772:	1882      	adds	r2, r0, r2
 800f774:	4290      	cmp	r0, r2
 800f776:	d101      	bne.n	800f77c <memchr+0xc>
 800f778:	2000      	movs	r0, #0
 800f77a:	4770      	bx	lr
 800f77c:	7803      	ldrb	r3, [r0, #0]
 800f77e:	428b      	cmp	r3, r1
 800f780:	d0fb      	beq.n	800f77a <memchr+0xa>
 800f782:	3001      	adds	r0, #1
 800f784:	e7f6      	b.n	800f774 <memchr+0x4>

0800f786 <memmove>:
 800f786:	b510      	push	{r4, lr}
 800f788:	4288      	cmp	r0, r1
 800f78a:	d902      	bls.n	800f792 <memmove+0xc>
 800f78c:	188b      	adds	r3, r1, r2
 800f78e:	4298      	cmp	r0, r3
 800f790:	d303      	bcc.n	800f79a <memmove+0x14>
 800f792:	2300      	movs	r3, #0
 800f794:	e007      	b.n	800f7a6 <memmove+0x20>
 800f796:	5c8b      	ldrb	r3, [r1, r2]
 800f798:	5483      	strb	r3, [r0, r2]
 800f79a:	3a01      	subs	r2, #1
 800f79c:	d2fb      	bcs.n	800f796 <memmove+0x10>
 800f79e:	bd10      	pop	{r4, pc}
 800f7a0:	5ccc      	ldrb	r4, [r1, r3]
 800f7a2:	54c4      	strb	r4, [r0, r3]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d1fa      	bne.n	800f7a0 <memmove+0x1a>
 800f7aa:	e7f8      	b.n	800f79e <memmove+0x18>

0800f7ac <_free_r>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	0005      	movs	r5, r0
 800f7b0:	2900      	cmp	r1, #0
 800f7b2:	d010      	beq.n	800f7d6 <_free_r+0x2a>
 800f7b4:	1f0c      	subs	r4, r1, #4
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	da00      	bge.n	800f7be <_free_r+0x12>
 800f7bc:	18e4      	adds	r4, r4, r3
 800f7be:	0028      	movs	r0, r5
 800f7c0:	f000 f8d4 	bl	800f96c <__malloc_lock>
 800f7c4:	4a1d      	ldr	r2, [pc, #116]	; (800f83c <_free_r+0x90>)
 800f7c6:	6813      	ldr	r3, [r2, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d105      	bne.n	800f7d8 <_free_r+0x2c>
 800f7cc:	6063      	str	r3, [r4, #4]
 800f7ce:	6014      	str	r4, [r2, #0]
 800f7d0:	0028      	movs	r0, r5
 800f7d2:	f000 f8d3 	bl	800f97c <__malloc_unlock>
 800f7d6:	bd70      	pop	{r4, r5, r6, pc}
 800f7d8:	42a3      	cmp	r3, r4
 800f7da:	d908      	bls.n	800f7ee <_free_r+0x42>
 800f7dc:	6821      	ldr	r1, [r4, #0]
 800f7de:	1860      	adds	r0, r4, r1
 800f7e0:	4283      	cmp	r3, r0
 800f7e2:	d1f3      	bne.n	800f7cc <_free_r+0x20>
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	1841      	adds	r1, r0, r1
 800f7ea:	6021      	str	r1, [r4, #0]
 800f7ec:	e7ee      	b.n	800f7cc <_free_r+0x20>
 800f7ee:	001a      	movs	r2, r3
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d001      	beq.n	800f7fa <_free_r+0x4e>
 800f7f6:	42a3      	cmp	r3, r4
 800f7f8:	d9f9      	bls.n	800f7ee <_free_r+0x42>
 800f7fa:	6811      	ldr	r1, [r2, #0]
 800f7fc:	1850      	adds	r0, r2, r1
 800f7fe:	42a0      	cmp	r0, r4
 800f800:	d10b      	bne.n	800f81a <_free_r+0x6e>
 800f802:	6820      	ldr	r0, [r4, #0]
 800f804:	1809      	adds	r1, r1, r0
 800f806:	1850      	adds	r0, r2, r1
 800f808:	6011      	str	r1, [r2, #0]
 800f80a:	4283      	cmp	r3, r0
 800f80c:	d1e0      	bne.n	800f7d0 <_free_r+0x24>
 800f80e:	6818      	ldr	r0, [r3, #0]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	1841      	adds	r1, r0, r1
 800f814:	6011      	str	r1, [r2, #0]
 800f816:	6053      	str	r3, [r2, #4]
 800f818:	e7da      	b.n	800f7d0 <_free_r+0x24>
 800f81a:	42a0      	cmp	r0, r4
 800f81c:	d902      	bls.n	800f824 <_free_r+0x78>
 800f81e:	230c      	movs	r3, #12
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	e7d5      	b.n	800f7d0 <_free_r+0x24>
 800f824:	6821      	ldr	r1, [r4, #0]
 800f826:	1860      	adds	r0, r4, r1
 800f828:	4283      	cmp	r3, r0
 800f82a:	d103      	bne.n	800f834 <_free_r+0x88>
 800f82c:	6818      	ldr	r0, [r3, #0]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	1841      	adds	r1, r0, r1
 800f832:	6021      	str	r1, [r4, #0]
 800f834:	6063      	str	r3, [r4, #4]
 800f836:	6054      	str	r4, [r2, #4]
 800f838:	e7ca      	b.n	800f7d0 <_free_r+0x24>
 800f83a:	46c0      	nop			; (mov r8, r8)
 800f83c:	20000148 	.word	0x20000148

0800f840 <_malloc_r>:
 800f840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f842:	2303      	movs	r3, #3
 800f844:	1ccd      	adds	r5, r1, #3
 800f846:	439d      	bics	r5, r3
 800f848:	3508      	adds	r5, #8
 800f84a:	0006      	movs	r6, r0
 800f84c:	2d0c      	cmp	r5, #12
 800f84e:	d21f      	bcs.n	800f890 <_malloc_r+0x50>
 800f850:	250c      	movs	r5, #12
 800f852:	42a9      	cmp	r1, r5
 800f854:	d81e      	bhi.n	800f894 <_malloc_r+0x54>
 800f856:	0030      	movs	r0, r6
 800f858:	f000 f888 	bl	800f96c <__malloc_lock>
 800f85c:	4925      	ldr	r1, [pc, #148]	; (800f8f4 <_malloc_r+0xb4>)
 800f85e:	680a      	ldr	r2, [r1, #0]
 800f860:	0014      	movs	r4, r2
 800f862:	2c00      	cmp	r4, #0
 800f864:	d11a      	bne.n	800f89c <_malloc_r+0x5c>
 800f866:	4f24      	ldr	r7, [pc, #144]	; (800f8f8 <_malloc_r+0xb8>)
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d104      	bne.n	800f878 <_malloc_r+0x38>
 800f86e:	0021      	movs	r1, r4
 800f870:	0030      	movs	r0, r6
 800f872:	f000 f869 	bl	800f948 <_sbrk_r>
 800f876:	6038      	str	r0, [r7, #0]
 800f878:	0029      	movs	r1, r5
 800f87a:	0030      	movs	r0, r6
 800f87c:	f000 f864 	bl	800f948 <_sbrk_r>
 800f880:	1c43      	adds	r3, r0, #1
 800f882:	d12b      	bne.n	800f8dc <_malloc_r+0x9c>
 800f884:	230c      	movs	r3, #12
 800f886:	0030      	movs	r0, r6
 800f888:	6033      	str	r3, [r6, #0]
 800f88a:	f000 f877 	bl	800f97c <__malloc_unlock>
 800f88e:	e003      	b.n	800f898 <_malloc_r+0x58>
 800f890:	2d00      	cmp	r5, #0
 800f892:	dade      	bge.n	800f852 <_malloc_r+0x12>
 800f894:	230c      	movs	r3, #12
 800f896:	6033      	str	r3, [r6, #0]
 800f898:	2000      	movs	r0, #0
 800f89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	1b5b      	subs	r3, r3, r5
 800f8a0:	d419      	bmi.n	800f8d6 <_malloc_r+0x96>
 800f8a2:	2b0b      	cmp	r3, #11
 800f8a4:	d903      	bls.n	800f8ae <_malloc_r+0x6e>
 800f8a6:	6023      	str	r3, [r4, #0]
 800f8a8:	18e4      	adds	r4, r4, r3
 800f8aa:	6025      	str	r5, [r4, #0]
 800f8ac:	e003      	b.n	800f8b6 <_malloc_r+0x76>
 800f8ae:	6863      	ldr	r3, [r4, #4]
 800f8b0:	42a2      	cmp	r2, r4
 800f8b2:	d10e      	bne.n	800f8d2 <_malloc_r+0x92>
 800f8b4:	600b      	str	r3, [r1, #0]
 800f8b6:	0030      	movs	r0, r6
 800f8b8:	f000 f860 	bl	800f97c <__malloc_unlock>
 800f8bc:	0020      	movs	r0, r4
 800f8be:	2207      	movs	r2, #7
 800f8c0:	300b      	adds	r0, #11
 800f8c2:	1d23      	adds	r3, r4, #4
 800f8c4:	4390      	bics	r0, r2
 800f8c6:	1ac2      	subs	r2, r0, r3
 800f8c8:	4298      	cmp	r0, r3
 800f8ca:	d0e6      	beq.n	800f89a <_malloc_r+0x5a>
 800f8cc:	1a1b      	subs	r3, r3, r0
 800f8ce:	50a3      	str	r3, [r4, r2]
 800f8d0:	e7e3      	b.n	800f89a <_malloc_r+0x5a>
 800f8d2:	6053      	str	r3, [r2, #4]
 800f8d4:	e7ef      	b.n	800f8b6 <_malloc_r+0x76>
 800f8d6:	0022      	movs	r2, r4
 800f8d8:	6864      	ldr	r4, [r4, #4]
 800f8da:	e7c2      	b.n	800f862 <_malloc_r+0x22>
 800f8dc:	2303      	movs	r3, #3
 800f8de:	1cc4      	adds	r4, r0, #3
 800f8e0:	439c      	bics	r4, r3
 800f8e2:	42a0      	cmp	r0, r4
 800f8e4:	d0e1      	beq.n	800f8aa <_malloc_r+0x6a>
 800f8e6:	1a21      	subs	r1, r4, r0
 800f8e8:	0030      	movs	r0, r6
 800f8ea:	f000 f82d 	bl	800f948 <_sbrk_r>
 800f8ee:	1c43      	adds	r3, r0, #1
 800f8f0:	d1db      	bne.n	800f8aa <_malloc_r+0x6a>
 800f8f2:	e7c7      	b.n	800f884 <_malloc_r+0x44>
 800f8f4:	20000148 	.word	0x20000148
 800f8f8:	2000014c 	.word	0x2000014c

0800f8fc <_realloc_r>:
 800f8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fe:	0007      	movs	r7, r0
 800f900:	000d      	movs	r5, r1
 800f902:	0016      	movs	r6, r2
 800f904:	2900      	cmp	r1, #0
 800f906:	d105      	bne.n	800f914 <_realloc_r+0x18>
 800f908:	0011      	movs	r1, r2
 800f90a:	f7ff ff99 	bl	800f840 <_malloc_r>
 800f90e:	0004      	movs	r4, r0
 800f910:	0020      	movs	r0, r4
 800f912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f914:	2a00      	cmp	r2, #0
 800f916:	d103      	bne.n	800f920 <_realloc_r+0x24>
 800f918:	f7ff ff48 	bl	800f7ac <_free_r>
 800f91c:	0034      	movs	r4, r6
 800f91e:	e7f7      	b.n	800f910 <_realloc_r+0x14>
 800f920:	f000 f834 	bl	800f98c <_malloc_usable_size_r>
 800f924:	002c      	movs	r4, r5
 800f926:	42b0      	cmp	r0, r6
 800f928:	d2f2      	bcs.n	800f910 <_realloc_r+0x14>
 800f92a:	0031      	movs	r1, r6
 800f92c:	0038      	movs	r0, r7
 800f92e:	f7ff ff87 	bl	800f840 <_malloc_r>
 800f932:	1e04      	subs	r4, r0, #0
 800f934:	d0ec      	beq.n	800f910 <_realloc_r+0x14>
 800f936:	0029      	movs	r1, r5
 800f938:	0032      	movs	r2, r6
 800f93a:	f7ff fc03 	bl	800f144 <memcpy>
 800f93e:	0029      	movs	r1, r5
 800f940:	0038      	movs	r0, r7
 800f942:	f7ff ff33 	bl	800f7ac <_free_r>
 800f946:	e7e3      	b.n	800f910 <_realloc_r+0x14>

0800f948 <_sbrk_r>:
 800f948:	2300      	movs	r3, #0
 800f94a:	b570      	push	{r4, r5, r6, lr}
 800f94c:	4d06      	ldr	r5, [pc, #24]	; (800f968 <_sbrk_r+0x20>)
 800f94e:	0004      	movs	r4, r0
 800f950:	0008      	movs	r0, r1
 800f952:	602b      	str	r3, [r5, #0]
 800f954:	f7ff fb66 	bl	800f024 <_sbrk>
 800f958:	1c43      	adds	r3, r0, #1
 800f95a:	d103      	bne.n	800f964 <_sbrk_r+0x1c>
 800f95c:	682b      	ldr	r3, [r5, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d000      	beq.n	800f964 <_sbrk_r+0x1c>
 800f962:	6023      	str	r3, [r4, #0]
 800f964:	bd70      	pop	{r4, r5, r6, pc}
 800f966:	46c0      	nop			; (mov r8, r8)
 800f968:	200008c0 	.word	0x200008c0

0800f96c <__malloc_lock>:
 800f96c:	b510      	push	{r4, lr}
 800f96e:	4802      	ldr	r0, [pc, #8]	; (800f978 <__malloc_lock+0xc>)
 800f970:	f000 f814 	bl	800f99c <__retarget_lock_acquire_recursive>
 800f974:	bd10      	pop	{r4, pc}
 800f976:	46c0      	nop			; (mov r8, r8)
 800f978:	200008c8 	.word	0x200008c8

0800f97c <__malloc_unlock>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	4802      	ldr	r0, [pc, #8]	; (800f988 <__malloc_unlock+0xc>)
 800f980:	f000 f80d 	bl	800f99e <__retarget_lock_release_recursive>
 800f984:	bd10      	pop	{r4, pc}
 800f986:	46c0      	nop			; (mov r8, r8)
 800f988:	200008c8 	.word	0x200008c8

0800f98c <_malloc_usable_size_r>:
 800f98c:	1f0b      	subs	r3, r1, #4
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	1f18      	subs	r0, r3, #4
 800f992:	2b00      	cmp	r3, #0
 800f994:	da01      	bge.n	800f99a <_malloc_usable_size_r+0xe>
 800f996:	580b      	ldr	r3, [r1, r0]
 800f998:	18c0      	adds	r0, r0, r3
 800f99a:	4770      	bx	lr

0800f99c <__retarget_lock_acquire_recursive>:
 800f99c:	4770      	bx	lr

0800f99e <__retarget_lock_release_recursive>:
 800f99e:	4770      	bx	lr

0800f9a0 <atan2>:
 800f9a0:	b510      	push	{r4, lr}
 800f9a2:	f000 f83f 	bl	800fa24 <__ieee754_atan2>
 800f9a6:	bd10      	pop	{r4, pc}

0800f9a8 <log>:
 800f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9aa:	0004      	movs	r4, r0
 800f9ac:	000d      	movs	r5, r1
 800f9ae:	f000 f8e5 	bl	800fb7c <__ieee754_log>
 800f9b2:	4b19      	ldr	r3, [pc, #100]	; (800fa18 <log+0x70>)
 800f9b4:	0006      	movs	r6, r0
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	000f      	movs	r7, r1
 800f9ba:	b25b      	sxtb	r3, r3
 800f9bc:	3301      	adds	r3, #1
 800f9be:	d01d      	beq.n	800f9fc <log+0x54>
 800f9c0:	0022      	movs	r2, r4
 800f9c2:	002b      	movs	r3, r5
 800f9c4:	0020      	movs	r0, r4
 800f9c6:	0029      	movs	r1, r5
 800f9c8:	f7f3 fa64 	bl	8002e94 <__aeabi_dcmpun>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d115      	bne.n	800f9fc <log+0x54>
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	0020      	movs	r0, r4
 800f9d6:	0029      	movs	r1, r5
 800f9d8:	f7f0 fd40 	bl	800045c <__aeabi_dcmpgt>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d10d      	bne.n	800f9fc <log+0x54>
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	0020      	movs	r0, r4
 800f9e6:	0029      	movs	r1, r5
 800f9e8:	f7f0 fd1e 	bl	8000428 <__aeabi_dcmpeq>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d008      	beq.n	800fa02 <log+0x5a>
 800f9f0:	f7ff fb7e 	bl	800f0f0 <__errno>
 800f9f4:	2322      	movs	r3, #34	; 0x22
 800f9f6:	2600      	movs	r6, #0
 800f9f8:	4f08      	ldr	r7, [pc, #32]	; (800fa1c <log+0x74>)
 800f9fa:	6003      	str	r3, [r0, #0]
 800f9fc:	0030      	movs	r0, r6
 800f9fe:	0039      	movs	r1, r7
 800fa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa02:	f7ff fb75 	bl	800f0f0 <__errno>
 800fa06:	2321      	movs	r3, #33	; 0x21
 800fa08:	6003      	str	r3, [r0, #0]
 800fa0a:	4805      	ldr	r0, [pc, #20]	; (800fa20 <log+0x78>)
 800fa0c:	f000 fbea 	bl	80101e4 <nan>
 800fa10:	0006      	movs	r6, r0
 800fa12:	000f      	movs	r7, r1
 800fa14:	e7f2      	b.n	800f9fc <log+0x54>
 800fa16:	46c0      	nop			; (mov r8, r8)
 800fa18:	20000074 	.word	0x20000074
 800fa1c:	fff00000 	.word	0xfff00000
 800fa20:	080105e5 	.word	0x080105e5

0800fa24 <__ieee754_atan2>:
 800fa24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa26:	0016      	movs	r6, r2
 800fa28:	001d      	movs	r5, r3
 800fa2a:	005a      	lsls	r2, r3, #1
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	4273      	negs	r3, r6
 800fa30:	4333      	orrs	r3, r6
 800fa32:	4f46      	ldr	r7, [pc, #280]	; (800fb4c <__ieee754_atan2+0x128>)
 800fa34:	0852      	lsrs	r2, r2, #1
 800fa36:	0fdb      	lsrs	r3, r3, #31
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	42bb      	cmp	r3, r7
 800fa3c:	d809      	bhi.n	800fa52 <__ieee754_atan2+0x2e>
 800fa3e:	4244      	negs	r4, r0
 800fa40:	004b      	lsls	r3, r1, #1
 800fa42:	4304      	orrs	r4, r0
 800fa44:	085b      	lsrs	r3, r3, #1
 800fa46:	0fe4      	lsrs	r4, r4, #31
 800fa48:	9100      	str	r1, [sp, #0]
 800fa4a:	9001      	str	r0, [sp, #4]
 800fa4c:	431c      	orrs	r4, r3
 800fa4e:	42bc      	cmp	r4, r7
 800fa50:	d905      	bls.n	800fa5e <__ieee754_atan2+0x3a>
 800fa52:	0032      	movs	r2, r6
 800fa54:	002b      	movs	r3, r5
 800fa56:	f7f1 fcaf 	bl	80013b8 <__aeabi_dadd>
 800fa5a:	b003      	add	sp, #12
 800fa5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa5e:	4c3c      	ldr	r4, [pc, #240]	; (800fb50 <__ieee754_atan2+0x12c>)
 800fa60:	192c      	adds	r4, r5, r4
 800fa62:	4334      	orrs	r4, r6
 800fa64:	d102      	bne.n	800fa6c <__ieee754_atan2+0x48>
 800fa66:	f000 fa39 	bl	800fedc <atan>
 800fa6a:	e7f6      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fa6c:	17ac      	asrs	r4, r5, #30
 800fa6e:	46a4      	mov	ip, r4
 800fa70:	2402      	movs	r4, #2
 800fa72:	4667      	mov	r7, ip
 800fa74:	403c      	ands	r4, r7
 800fa76:	9f00      	ldr	r7, [sp, #0]
 800fa78:	0fff      	lsrs	r7, r7, #31
 800fa7a:	433c      	orrs	r4, r7
 800fa7c:	9f01      	ldr	r7, [sp, #4]
 800fa7e:	431f      	orrs	r7, r3
 800fa80:	d106      	bne.n	800fa90 <__ieee754_atan2+0x6c>
 800fa82:	2c02      	cmp	r4, #2
 800fa84:	d056      	beq.n	800fb34 <__ieee754_atan2+0x110>
 800fa86:	2c03      	cmp	r4, #3
 800fa88:	d1e7      	bne.n	800fa5a <__ieee754_atan2+0x36>
 800fa8a:	4832      	ldr	r0, [pc, #200]	; (800fb54 <__ieee754_atan2+0x130>)
 800fa8c:	4932      	ldr	r1, [pc, #200]	; (800fb58 <__ieee754_atan2+0x134>)
 800fa8e:	e7e4      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fa90:	0017      	movs	r7, r2
 800fa92:	4337      	orrs	r7, r6
 800fa94:	d105      	bne.n	800faa2 <__ieee754_atan2+0x7e>
 800fa96:	9b00      	ldr	r3, [sp, #0]
 800fa98:	482e      	ldr	r0, [pc, #184]	; (800fb54 <__ieee754_atan2+0x130>)
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	da53      	bge.n	800fb46 <__ieee754_atan2+0x122>
 800fa9e:	492f      	ldr	r1, [pc, #188]	; (800fb5c <__ieee754_atan2+0x138>)
 800faa0:	e7db      	b.n	800fa5a <__ieee754_atan2+0x36>
 800faa2:	4f2a      	ldr	r7, [pc, #168]	; (800fb4c <__ieee754_atan2+0x128>)
 800faa4:	42ba      	cmp	r2, r7
 800faa6:	d10f      	bne.n	800fac8 <__ieee754_atan2+0xa4>
 800faa8:	3c01      	subs	r4, #1
 800faaa:	4293      	cmp	r3, r2
 800faac:	d107      	bne.n	800fabe <__ieee754_atan2+0x9a>
 800faae:	2c02      	cmp	r4, #2
 800fab0:	d843      	bhi.n	800fb3a <__ieee754_atan2+0x116>
 800fab2:	4b2b      	ldr	r3, [pc, #172]	; (800fb60 <__ieee754_atan2+0x13c>)
 800fab4:	00e4      	lsls	r4, r4, #3
 800fab6:	191c      	adds	r4, r3, r4
 800fab8:	6820      	ldr	r0, [r4, #0]
 800faba:	6861      	ldr	r1, [r4, #4]
 800fabc:	e7cd      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fabe:	2c02      	cmp	r4, #2
 800fac0:	d83e      	bhi.n	800fb40 <__ieee754_atan2+0x11c>
 800fac2:	4b28      	ldr	r3, [pc, #160]	; (800fb64 <__ieee754_atan2+0x140>)
 800fac4:	00e4      	lsls	r4, r4, #3
 800fac6:	e7f6      	b.n	800fab6 <__ieee754_atan2+0x92>
 800fac8:	4f20      	ldr	r7, [pc, #128]	; (800fb4c <__ieee754_atan2+0x128>)
 800faca:	42bb      	cmp	r3, r7
 800facc:	d0e3      	beq.n	800fa96 <__ieee754_atan2+0x72>
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	151b      	asrs	r3, r3, #20
 800fad2:	2b3c      	cmp	r3, #60	; 0x3c
 800fad4:	dc18      	bgt.n	800fb08 <__ieee754_atan2+0xe4>
 800fad6:	2d00      	cmp	r5, #0
 800fad8:	da01      	bge.n	800fade <__ieee754_atan2+0xba>
 800fada:	333c      	adds	r3, #60	; 0x3c
 800fadc:	db17      	blt.n	800fb0e <__ieee754_atan2+0xea>
 800fade:	0032      	movs	r2, r6
 800fae0:	002b      	movs	r3, r5
 800fae2:	f7f1 ffd3 	bl	8001a8c <__aeabi_ddiv>
 800fae6:	f000 fb79 	bl	80101dc <fabs>
 800faea:	f000 f9f7 	bl	800fedc <atan>
 800faee:	2c01      	cmp	r4, #1
 800faf0:	d010      	beq.n	800fb14 <__ieee754_atan2+0xf0>
 800faf2:	2c02      	cmp	r4, #2
 800faf4:	d013      	beq.n	800fb1e <__ieee754_atan2+0xfa>
 800faf6:	2c00      	cmp	r4, #0
 800faf8:	d0af      	beq.n	800fa5a <__ieee754_atan2+0x36>
 800fafa:	4a1b      	ldr	r2, [pc, #108]	; (800fb68 <__ieee754_atan2+0x144>)
 800fafc:	4b1b      	ldr	r3, [pc, #108]	; (800fb6c <__ieee754_atan2+0x148>)
 800fafe:	f7f2 fe37 	bl	8002770 <__aeabi_dsub>
 800fb02:	4a14      	ldr	r2, [pc, #80]	; (800fb54 <__ieee754_atan2+0x130>)
 800fb04:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <__ieee754_atan2+0x14c>)
 800fb06:	e012      	b.n	800fb2e <__ieee754_atan2+0x10a>
 800fb08:	4812      	ldr	r0, [pc, #72]	; (800fb54 <__ieee754_atan2+0x130>)
 800fb0a:	491a      	ldr	r1, [pc, #104]	; (800fb74 <__ieee754_atan2+0x150>)
 800fb0c:	e7ef      	b.n	800faee <__ieee754_atan2+0xca>
 800fb0e:	2000      	movs	r0, #0
 800fb10:	2100      	movs	r1, #0
 800fb12:	e7ec      	b.n	800faee <__ieee754_atan2+0xca>
 800fb14:	2480      	movs	r4, #128	; 0x80
 800fb16:	0624      	lsls	r4, r4, #24
 800fb18:	190b      	adds	r3, r1, r4
 800fb1a:	0019      	movs	r1, r3
 800fb1c:	e79d      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fb1e:	4a12      	ldr	r2, [pc, #72]	; (800fb68 <__ieee754_atan2+0x144>)
 800fb20:	4b12      	ldr	r3, [pc, #72]	; (800fb6c <__ieee754_atan2+0x148>)
 800fb22:	f7f2 fe25 	bl	8002770 <__aeabi_dsub>
 800fb26:	0002      	movs	r2, r0
 800fb28:	000b      	movs	r3, r1
 800fb2a:	480a      	ldr	r0, [pc, #40]	; (800fb54 <__ieee754_atan2+0x130>)
 800fb2c:	4910      	ldr	r1, [pc, #64]	; (800fb70 <__ieee754_atan2+0x14c>)
 800fb2e:	f7f2 fe1f 	bl	8002770 <__aeabi_dsub>
 800fb32:	e792      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fb34:	4807      	ldr	r0, [pc, #28]	; (800fb54 <__ieee754_atan2+0x130>)
 800fb36:	490e      	ldr	r1, [pc, #56]	; (800fb70 <__ieee754_atan2+0x14c>)
 800fb38:	e78f      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fb3a:	4806      	ldr	r0, [pc, #24]	; (800fb54 <__ieee754_atan2+0x130>)
 800fb3c:	490e      	ldr	r1, [pc, #56]	; (800fb78 <__ieee754_atan2+0x154>)
 800fb3e:	e78c      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fb40:	2000      	movs	r0, #0
 800fb42:	2100      	movs	r1, #0
 800fb44:	e789      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fb46:	490b      	ldr	r1, [pc, #44]	; (800fb74 <__ieee754_atan2+0x150>)
 800fb48:	e787      	b.n	800fa5a <__ieee754_atan2+0x36>
 800fb4a:	46c0      	nop			; (mov r8, r8)
 800fb4c:	7ff00000 	.word	0x7ff00000
 800fb50:	c0100000 	.word	0xc0100000
 800fb54:	54442d18 	.word	0x54442d18
 800fb58:	c00921fb 	.word	0xc00921fb
 800fb5c:	bff921fb 	.word	0xbff921fb
 800fb60:	08010618 	.word	0x08010618
 800fb64:	08010630 	.word	0x08010630
 800fb68:	33145c07 	.word	0x33145c07
 800fb6c:	3ca1a626 	.word	0x3ca1a626
 800fb70:	400921fb 	.word	0x400921fb
 800fb74:	3ff921fb 	.word	0x3ff921fb
 800fb78:	3fe921fb 	.word	0x3fe921fb

0800fb7c <__ieee754_log>:
 800fb7c:	2280      	movs	r2, #128	; 0x80
 800fb7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb80:	000b      	movs	r3, r1
 800fb82:	b08d      	sub	sp, #52	; 0x34
 800fb84:	0352      	lsls	r2, r2, #13
 800fb86:	4291      	cmp	r1, r2
 800fb88:	da22      	bge.n	800fbd0 <__ieee754_log+0x54>
 800fb8a:	004a      	lsls	r2, r1, #1
 800fb8c:	0852      	lsrs	r2, r2, #1
 800fb8e:	4302      	orrs	r2, r0
 800fb90:	d107      	bne.n	800fba2 <__ieee754_log+0x26>
 800fb92:	2200      	movs	r2, #0
 800fb94:	2300      	movs	r3, #0
 800fb96:	2000      	movs	r0, #0
 800fb98:	49b3      	ldr	r1, [pc, #716]	; (800fe68 <__ieee754_log+0x2ec>)
 800fb9a:	f7f1 ff77 	bl	8001a8c <__aeabi_ddiv>
 800fb9e:	b00d      	add	sp, #52	; 0x34
 800fba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fba2:	2900      	cmp	r1, #0
 800fba4:	da05      	bge.n	800fbb2 <__ieee754_log+0x36>
 800fba6:	0002      	movs	r2, r0
 800fba8:	f7f2 fde2 	bl	8002770 <__aeabi_dsub>
 800fbac:	2200      	movs	r2, #0
 800fbae:	2300      	movs	r3, #0
 800fbb0:	e7f3      	b.n	800fb9a <__ieee754_log+0x1e>
 800fbb2:	4bae      	ldr	r3, [pc, #696]	; (800fe6c <__ieee754_log+0x2f0>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f7f2 fb6f 	bl	8002298 <__aeabi_dmul>
 800fbba:	2436      	movs	r4, #54	; 0x36
 800fbbc:	000b      	movs	r3, r1
 800fbbe:	4264      	negs	r4, r4
 800fbc0:	4aab      	ldr	r2, [pc, #684]	; (800fe70 <__ieee754_log+0x2f4>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	dd06      	ble.n	800fbd4 <__ieee754_log+0x58>
 800fbc6:	0002      	movs	r2, r0
 800fbc8:	000b      	movs	r3, r1
 800fbca:	f7f1 fbf5 	bl	80013b8 <__aeabi_dadd>
 800fbce:	e7e6      	b.n	800fb9e <__ieee754_log+0x22>
 800fbd0:	2400      	movs	r4, #0
 800fbd2:	e7f5      	b.n	800fbc0 <__ieee754_log+0x44>
 800fbd4:	4da7      	ldr	r5, [pc, #668]	; (800fe74 <__ieee754_log+0x2f8>)
 800fbd6:	151a      	asrs	r2, r3, #20
 800fbd8:	1952      	adds	r2, r2, r5
 800fbda:	1912      	adds	r2, r2, r4
 800fbdc:	031b      	lsls	r3, r3, #12
 800fbde:	4ca6      	ldr	r4, [pc, #664]	; (800fe78 <__ieee754_log+0x2fc>)
 800fbe0:	0b1b      	lsrs	r3, r3, #12
 800fbe2:	9302      	str	r3, [sp, #8]
 800fbe4:	191c      	adds	r4, r3, r4
 800fbe6:	2380      	movs	r3, #128	; 0x80
 800fbe8:	035b      	lsls	r3, r3, #13
 800fbea:	4023      	ands	r3, r4
 800fbec:	4ca3      	ldr	r4, [pc, #652]	; (800fe7c <__ieee754_log+0x300>)
 800fbee:	9d02      	ldr	r5, [sp, #8]
 800fbf0:	405c      	eors	r4, r3
 800fbf2:	151b      	asrs	r3, r3, #20
 800fbf4:	189b      	adds	r3, r3, r2
 800fbf6:	4325      	orrs	r5, r4
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	0029      	movs	r1, r5
 800fbfe:	4b9f      	ldr	r3, [pc, #636]	; (800fe7c <__ieee754_log+0x300>)
 800fc00:	f7f2 fdb6 	bl	8002770 <__aeabi_dsub>
 800fc04:	9b02      	ldr	r3, [sp, #8]
 800fc06:	0006      	movs	r6, r0
 800fc08:	3302      	adds	r3, #2
 800fc0a:	031b      	lsls	r3, r3, #12
 800fc0c:	000f      	movs	r7, r1
 800fc0e:	2200      	movs	r2, #0
 800fc10:	0b1b      	lsrs	r3, r3, #12
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	dc64      	bgt.n	800fce0 <__ieee754_log+0x164>
 800fc16:	2300      	movs	r3, #0
 800fc18:	f7f0 fc06 	bl	8000428 <__aeabi_dcmpeq>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d019      	beq.n	800fc54 <__ieee754_log+0xd8>
 800fc20:	9b00      	ldr	r3, [sp, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d100      	bne.n	800fc28 <__ieee754_log+0xac>
 800fc26:	e11c      	b.n	800fe62 <__ieee754_log+0x2e6>
 800fc28:	0018      	movs	r0, r3
 800fc2a:	f7f3 f987 	bl	8002f3c <__aeabi_i2d>
 800fc2e:	4a94      	ldr	r2, [pc, #592]	; (800fe80 <__ieee754_log+0x304>)
 800fc30:	4b94      	ldr	r3, [pc, #592]	; (800fe84 <__ieee754_log+0x308>)
 800fc32:	0004      	movs	r4, r0
 800fc34:	000d      	movs	r5, r1
 800fc36:	f7f2 fb2f 	bl	8002298 <__aeabi_dmul>
 800fc3a:	4a93      	ldr	r2, [pc, #588]	; (800fe88 <__ieee754_log+0x30c>)
 800fc3c:	0006      	movs	r6, r0
 800fc3e:	000f      	movs	r7, r1
 800fc40:	4b92      	ldr	r3, [pc, #584]	; (800fe8c <__ieee754_log+0x310>)
 800fc42:	0020      	movs	r0, r4
 800fc44:	0029      	movs	r1, r5
 800fc46:	f7f2 fb27 	bl	8002298 <__aeabi_dmul>
 800fc4a:	0002      	movs	r2, r0
 800fc4c:	000b      	movs	r3, r1
 800fc4e:	0030      	movs	r0, r6
 800fc50:	0039      	movs	r1, r7
 800fc52:	e7ba      	b.n	800fbca <__ieee754_log+0x4e>
 800fc54:	4a8e      	ldr	r2, [pc, #568]	; (800fe90 <__ieee754_log+0x314>)
 800fc56:	4b8f      	ldr	r3, [pc, #572]	; (800fe94 <__ieee754_log+0x318>)
 800fc58:	0030      	movs	r0, r6
 800fc5a:	0039      	movs	r1, r7
 800fc5c:	f7f2 fb1c 	bl	8002298 <__aeabi_dmul>
 800fc60:	0002      	movs	r2, r0
 800fc62:	000b      	movs	r3, r1
 800fc64:	2000      	movs	r0, #0
 800fc66:	498c      	ldr	r1, [pc, #560]	; (800fe98 <__ieee754_log+0x31c>)
 800fc68:	f7f2 fd82 	bl	8002770 <__aeabi_dsub>
 800fc6c:	0032      	movs	r2, r6
 800fc6e:	0004      	movs	r4, r0
 800fc70:	000d      	movs	r5, r1
 800fc72:	003b      	movs	r3, r7
 800fc74:	0030      	movs	r0, r6
 800fc76:	0039      	movs	r1, r7
 800fc78:	f7f2 fb0e 	bl	8002298 <__aeabi_dmul>
 800fc7c:	000b      	movs	r3, r1
 800fc7e:	0002      	movs	r2, r0
 800fc80:	0029      	movs	r1, r5
 800fc82:	0020      	movs	r0, r4
 800fc84:	f7f2 fb08 	bl	8002298 <__aeabi_dmul>
 800fc88:	9b00      	ldr	r3, [sp, #0]
 800fc8a:	9002      	str	r0, [sp, #8]
 800fc8c:	9103      	str	r1, [sp, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <__ieee754_log+0x124>
 800fc92:	0002      	movs	r2, r0
 800fc94:	000b      	movs	r3, r1
 800fc96:	0030      	movs	r0, r6
 800fc98:	0039      	movs	r1, r7
 800fc9a:	f7f2 fd69 	bl	8002770 <__aeabi_dsub>
 800fc9e:	e77e      	b.n	800fb9e <__ieee754_log+0x22>
 800fca0:	9800      	ldr	r0, [sp, #0]
 800fca2:	f7f3 f94b 	bl	8002f3c <__aeabi_i2d>
 800fca6:	4a76      	ldr	r2, [pc, #472]	; (800fe80 <__ieee754_log+0x304>)
 800fca8:	4b76      	ldr	r3, [pc, #472]	; (800fe84 <__ieee754_log+0x308>)
 800fcaa:	0004      	movs	r4, r0
 800fcac:	000d      	movs	r5, r1
 800fcae:	f7f2 faf3 	bl	8002298 <__aeabi_dmul>
 800fcb2:	4a75      	ldr	r2, [pc, #468]	; (800fe88 <__ieee754_log+0x30c>)
 800fcb4:	9000      	str	r0, [sp, #0]
 800fcb6:	9101      	str	r1, [sp, #4]
 800fcb8:	4b74      	ldr	r3, [pc, #464]	; (800fe8c <__ieee754_log+0x310>)
 800fcba:	0020      	movs	r0, r4
 800fcbc:	0029      	movs	r1, r5
 800fcbe:	f7f2 faeb 	bl	8002298 <__aeabi_dmul>
 800fcc2:	0002      	movs	r2, r0
 800fcc4:	000b      	movs	r3, r1
 800fcc6:	9802      	ldr	r0, [sp, #8]
 800fcc8:	9903      	ldr	r1, [sp, #12]
 800fcca:	f7f2 fd51 	bl	8002770 <__aeabi_dsub>
 800fcce:	0032      	movs	r2, r6
 800fcd0:	003b      	movs	r3, r7
 800fcd2:	f7f2 fd4d 	bl	8002770 <__aeabi_dsub>
 800fcd6:	0002      	movs	r2, r0
 800fcd8:	000b      	movs	r3, r1
 800fcda:	9800      	ldr	r0, [sp, #0]
 800fcdc:	9901      	ldr	r1, [sp, #4]
 800fcde:	e7dc      	b.n	800fc9a <__ieee754_log+0x11e>
 800fce0:	2380      	movs	r3, #128	; 0x80
 800fce2:	05db      	lsls	r3, r3, #23
 800fce4:	f7f1 fb68 	bl	80013b8 <__aeabi_dadd>
 800fce8:	0002      	movs	r2, r0
 800fcea:	000b      	movs	r3, r1
 800fcec:	0030      	movs	r0, r6
 800fcee:	0039      	movs	r1, r7
 800fcf0:	f7f1 fecc 	bl	8001a8c <__aeabi_ddiv>
 800fcf4:	9004      	str	r0, [sp, #16]
 800fcf6:	9105      	str	r1, [sp, #20]
 800fcf8:	9800      	ldr	r0, [sp, #0]
 800fcfa:	f7f3 f91f 	bl	8002f3c <__aeabi_i2d>
 800fcfe:	9a04      	ldr	r2, [sp, #16]
 800fd00:	9b05      	ldr	r3, [sp, #20]
 800fd02:	9006      	str	r0, [sp, #24]
 800fd04:	9107      	str	r1, [sp, #28]
 800fd06:	0010      	movs	r0, r2
 800fd08:	0019      	movs	r1, r3
 800fd0a:	f7f2 fac5 	bl	8002298 <__aeabi_dmul>
 800fd0e:	4a63      	ldr	r2, [pc, #396]	; (800fe9c <__ieee754_log+0x320>)
 800fd10:	9b02      	ldr	r3, [sp, #8]
 800fd12:	4694      	mov	ip, r2
 800fd14:	4463      	add	r3, ip
 800fd16:	0002      	movs	r2, r0
 800fd18:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd1a:	000b      	movs	r3, r1
 800fd1c:	9008      	str	r0, [sp, #32]
 800fd1e:	9109      	str	r1, [sp, #36]	; 0x24
 800fd20:	f7f2 faba 	bl	8002298 <__aeabi_dmul>
 800fd24:	0004      	movs	r4, r0
 800fd26:	000d      	movs	r5, r1
 800fd28:	4a5d      	ldr	r2, [pc, #372]	; (800fea0 <__ieee754_log+0x324>)
 800fd2a:	4b5e      	ldr	r3, [pc, #376]	; (800fea4 <__ieee754_log+0x328>)
 800fd2c:	f7f2 fab4 	bl	8002298 <__aeabi_dmul>
 800fd30:	4a5d      	ldr	r2, [pc, #372]	; (800fea8 <__ieee754_log+0x32c>)
 800fd32:	4b5e      	ldr	r3, [pc, #376]	; (800feac <__ieee754_log+0x330>)
 800fd34:	f7f1 fb40 	bl	80013b8 <__aeabi_dadd>
 800fd38:	0022      	movs	r2, r4
 800fd3a:	002b      	movs	r3, r5
 800fd3c:	f7f2 faac 	bl	8002298 <__aeabi_dmul>
 800fd40:	4a5b      	ldr	r2, [pc, #364]	; (800feb0 <__ieee754_log+0x334>)
 800fd42:	4b5c      	ldr	r3, [pc, #368]	; (800feb4 <__ieee754_log+0x338>)
 800fd44:	f7f1 fb38 	bl	80013b8 <__aeabi_dadd>
 800fd48:	0022      	movs	r2, r4
 800fd4a:	002b      	movs	r3, r5
 800fd4c:	f7f2 faa4 	bl	8002298 <__aeabi_dmul>
 800fd50:	4a59      	ldr	r2, [pc, #356]	; (800feb8 <__ieee754_log+0x33c>)
 800fd52:	4b5a      	ldr	r3, [pc, #360]	; (800febc <__ieee754_log+0x340>)
 800fd54:	f7f1 fb30 	bl	80013b8 <__aeabi_dadd>
 800fd58:	9a08      	ldr	r2, [sp, #32]
 800fd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd5c:	f7f2 fa9c 	bl	8002298 <__aeabi_dmul>
 800fd60:	4a57      	ldr	r2, [pc, #348]	; (800fec0 <__ieee754_log+0x344>)
 800fd62:	9008      	str	r0, [sp, #32]
 800fd64:	9109      	str	r1, [sp, #36]	; 0x24
 800fd66:	4b57      	ldr	r3, [pc, #348]	; (800fec4 <__ieee754_log+0x348>)
 800fd68:	0020      	movs	r0, r4
 800fd6a:	0029      	movs	r1, r5
 800fd6c:	f7f2 fa94 	bl	8002298 <__aeabi_dmul>
 800fd70:	4a55      	ldr	r2, [pc, #340]	; (800fec8 <__ieee754_log+0x34c>)
 800fd72:	4b56      	ldr	r3, [pc, #344]	; (800fecc <__ieee754_log+0x350>)
 800fd74:	f7f1 fb20 	bl	80013b8 <__aeabi_dadd>
 800fd78:	0022      	movs	r2, r4
 800fd7a:	002b      	movs	r3, r5
 800fd7c:	f7f2 fa8c 	bl	8002298 <__aeabi_dmul>
 800fd80:	4a53      	ldr	r2, [pc, #332]	; (800fed0 <__ieee754_log+0x354>)
 800fd82:	4b54      	ldr	r3, [pc, #336]	; (800fed4 <__ieee754_log+0x358>)
 800fd84:	f7f1 fb18 	bl	80013b8 <__aeabi_dadd>
 800fd88:	0022      	movs	r2, r4
 800fd8a:	002b      	movs	r3, r5
 800fd8c:	f7f2 fa84 	bl	8002298 <__aeabi_dmul>
 800fd90:	0002      	movs	r2, r0
 800fd92:	000b      	movs	r3, r1
 800fd94:	9808      	ldr	r0, [sp, #32]
 800fd96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd98:	f7f1 fb0e 	bl	80013b8 <__aeabi_dadd>
 800fd9c:	9a02      	ldr	r2, [sp, #8]
 800fd9e:	4b4e      	ldr	r3, [pc, #312]	; (800fed8 <__ieee754_log+0x35c>)
 800fda0:	0004      	movs	r4, r0
 800fda2:	1a9b      	subs	r3, r3, r2
 800fda4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fda6:	000d      	movs	r5, r1
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	dd34      	ble.n	800fe18 <__ieee754_log+0x29c>
 800fdae:	2200      	movs	r2, #0
 800fdb0:	4b39      	ldr	r3, [pc, #228]	; (800fe98 <__ieee754_log+0x31c>)
 800fdb2:	0030      	movs	r0, r6
 800fdb4:	0039      	movs	r1, r7
 800fdb6:	f7f2 fa6f 	bl	8002298 <__aeabi_dmul>
 800fdba:	0032      	movs	r2, r6
 800fdbc:	003b      	movs	r3, r7
 800fdbe:	f7f2 fa6b 	bl	8002298 <__aeabi_dmul>
 800fdc2:	0002      	movs	r2, r0
 800fdc4:	000b      	movs	r3, r1
 800fdc6:	9002      	str	r0, [sp, #8]
 800fdc8:	9103      	str	r1, [sp, #12]
 800fdca:	0020      	movs	r0, r4
 800fdcc:	0029      	movs	r1, r5
 800fdce:	f7f1 faf3 	bl	80013b8 <__aeabi_dadd>
 800fdd2:	9a04      	ldr	r2, [sp, #16]
 800fdd4:	9b05      	ldr	r3, [sp, #20]
 800fdd6:	f7f2 fa5f 	bl	8002298 <__aeabi_dmul>
 800fdda:	9b00      	ldr	r3, [sp, #0]
 800fddc:	0004      	movs	r4, r0
 800fdde:	000d      	movs	r5, r1
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d106      	bne.n	800fdf2 <__ieee754_log+0x276>
 800fde4:	0002      	movs	r2, r0
 800fde6:	000b      	movs	r3, r1
 800fde8:	9802      	ldr	r0, [sp, #8]
 800fdea:	9903      	ldr	r1, [sp, #12]
 800fdec:	f7f2 fcc0 	bl	8002770 <__aeabi_dsub>
 800fdf0:	e74f      	b.n	800fc92 <__ieee754_log+0x116>
 800fdf2:	4a23      	ldr	r2, [pc, #140]	; (800fe80 <__ieee754_log+0x304>)
 800fdf4:	4b23      	ldr	r3, [pc, #140]	; (800fe84 <__ieee754_log+0x308>)
 800fdf6:	9806      	ldr	r0, [sp, #24]
 800fdf8:	9907      	ldr	r1, [sp, #28]
 800fdfa:	f7f2 fa4d 	bl	8002298 <__aeabi_dmul>
 800fdfe:	4a22      	ldr	r2, [pc, #136]	; (800fe88 <__ieee754_log+0x30c>)
 800fe00:	9000      	str	r0, [sp, #0]
 800fe02:	9101      	str	r1, [sp, #4]
 800fe04:	9806      	ldr	r0, [sp, #24]
 800fe06:	9907      	ldr	r1, [sp, #28]
 800fe08:	4b20      	ldr	r3, [pc, #128]	; (800fe8c <__ieee754_log+0x310>)
 800fe0a:	f7f2 fa45 	bl	8002298 <__aeabi_dmul>
 800fe0e:	0022      	movs	r2, r4
 800fe10:	002b      	movs	r3, r5
 800fe12:	f7f1 fad1 	bl	80013b8 <__aeabi_dadd>
 800fe16:	e754      	b.n	800fcc2 <__ieee754_log+0x146>
 800fe18:	0002      	movs	r2, r0
 800fe1a:	000b      	movs	r3, r1
 800fe1c:	0030      	movs	r0, r6
 800fe1e:	0039      	movs	r1, r7
 800fe20:	f7f2 fca6 	bl	8002770 <__aeabi_dsub>
 800fe24:	9a04      	ldr	r2, [sp, #16]
 800fe26:	9b05      	ldr	r3, [sp, #20]
 800fe28:	f7f2 fa36 	bl	8002298 <__aeabi_dmul>
 800fe2c:	9b00      	ldr	r3, [sp, #0]
 800fe2e:	0004      	movs	r4, r0
 800fe30:	000d      	movs	r5, r1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d102      	bne.n	800fe3c <__ieee754_log+0x2c0>
 800fe36:	0002      	movs	r2, r0
 800fe38:	000b      	movs	r3, r1
 800fe3a:	e72c      	b.n	800fc96 <__ieee754_log+0x11a>
 800fe3c:	4a10      	ldr	r2, [pc, #64]	; (800fe80 <__ieee754_log+0x304>)
 800fe3e:	4b11      	ldr	r3, [pc, #68]	; (800fe84 <__ieee754_log+0x308>)
 800fe40:	9806      	ldr	r0, [sp, #24]
 800fe42:	9907      	ldr	r1, [sp, #28]
 800fe44:	f7f2 fa28 	bl	8002298 <__aeabi_dmul>
 800fe48:	4a0f      	ldr	r2, [pc, #60]	; (800fe88 <__ieee754_log+0x30c>)
 800fe4a:	9000      	str	r0, [sp, #0]
 800fe4c:	9101      	str	r1, [sp, #4]
 800fe4e:	9806      	ldr	r0, [sp, #24]
 800fe50:	9907      	ldr	r1, [sp, #28]
 800fe52:	4b0e      	ldr	r3, [pc, #56]	; (800fe8c <__ieee754_log+0x310>)
 800fe54:	f7f2 fa20 	bl	8002298 <__aeabi_dmul>
 800fe58:	0002      	movs	r2, r0
 800fe5a:	000b      	movs	r3, r1
 800fe5c:	0020      	movs	r0, r4
 800fe5e:	0029      	movs	r1, r5
 800fe60:	e733      	b.n	800fcca <__ieee754_log+0x14e>
 800fe62:	2000      	movs	r0, #0
 800fe64:	2100      	movs	r1, #0
 800fe66:	e69a      	b.n	800fb9e <__ieee754_log+0x22>
 800fe68:	c3500000 	.word	0xc3500000
 800fe6c:	43500000 	.word	0x43500000
 800fe70:	7fefffff 	.word	0x7fefffff
 800fe74:	fffffc01 	.word	0xfffffc01
 800fe78:	00095f64 	.word	0x00095f64
 800fe7c:	3ff00000 	.word	0x3ff00000
 800fe80:	fee00000 	.word	0xfee00000
 800fe84:	3fe62e42 	.word	0x3fe62e42
 800fe88:	35793c76 	.word	0x35793c76
 800fe8c:	3dea39ef 	.word	0x3dea39ef
 800fe90:	55555555 	.word	0x55555555
 800fe94:	3fd55555 	.word	0x3fd55555
 800fe98:	3fe00000 	.word	0x3fe00000
 800fe9c:	fff9eb86 	.word	0xfff9eb86
 800fea0:	df3e5244 	.word	0xdf3e5244
 800fea4:	3fc2f112 	.word	0x3fc2f112
 800fea8:	96cb03de 	.word	0x96cb03de
 800feac:	3fc74664 	.word	0x3fc74664
 800feb0:	94229359 	.word	0x94229359
 800feb4:	3fd24924 	.word	0x3fd24924
 800feb8:	55555593 	.word	0x55555593
 800febc:	3fe55555 	.word	0x3fe55555
 800fec0:	d078c69f 	.word	0xd078c69f
 800fec4:	3fc39a09 	.word	0x3fc39a09
 800fec8:	1d8e78af 	.word	0x1d8e78af
 800fecc:	3fcc71c5 	.word	0x3fcc71c5
 800fed0:	9997fa04 	.word	0x9997fa04
 800fed4:	3fd99999 	.word	0x3fd99999
 800fed8:	0006b851 	.word	0x0006b851

0800fedc <atan>:
 800fedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fede:	4b98      	ldr	r3, [pc, #608]	; (8010140 <atan+0x264>)
 800fee0:	b085      	sub	sp, #20
 800fee2:	004e      	lsls	r6, r1, #1
 800fee4:	0004      	movs	r4, r0
 800fee6:	000d      	movs	r5, r1
 800fee8:	9103      	str	r1, [sp, #12]
 800feea:	0876      	lsrs	r6, r6, #1
 800feec:	429e      	cmp	r6, r3
 800feee:	dd18      	ble.n	800ff22 <atan+0x46>
 800fef0:	4b94      	ldr	r3, [pc, #592]	; (8010144 <atan+0x268>)
 800fef2:	429e      	cmp	r6, r3
 800fef4:	dc02      	bgt.n	800fefc <atan+0x20>
 800fef6:	d10a      	bne.n	800ff0e <atan+0x32>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d008      	beq.n	800ff0e <atan+0x32>
 800fefc:	0022      	movs	r2, r4
 800fefe:	002b      	movs	r3, r5
 800ff00:	0020      	movs	r0, r4
 800ff02:	0029      	movs	r1, r5
 800ff04:	f7f1 fa58 	bl	80013b8 <__aeabi_dadd>
 800ff08:	0004      	movs	r4, r0
 800ff0a:	000d      	movs	r5, r1
 800ff0c:	e005      	b.n	800ff1a <atan+0x3e>
 800ff0e:	9b03      	ldr	r3, [sp, #12]
 800ff10:	4c8d      	ldr	r4, [pc, #564]	; (8010148 <atan+0x26c>)
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	dd00      	ble.n	800ff18 <atan+0x3c>
 800ff16:	e110      	b.n	801013a <atan+0x25e>
 800ff18:	4d8c      	ldr	r5, [pc, #560]	; (801014c <atan+0x270>)
 800ff1a:	0020      	movs	r0, r4
 800ff1c:	0029      	movs	r1, r5
 800ff1e:	b005      	add	sp, #20
 800ff20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff22:	4b8b      	ldr	r3, [pc, #556]	; (8010150 <atan+0x274>)
 800ff24:	429e      	cmp	r6, r3
 800ff26:	dc0f      	bgt.n	800ff48 <atan+0x6c>
 800ff28:	4b8a      	ldr	r3, [pc, #552]	; (8010154 <atan+0x278>)
 800ff2a:	429e      	cmp	r6, r3
 800ff2c:	dc09      	bgt.n	800ff42 <atan+0x66>
 800ff2e:	4a8a      	ldr	r2, [pc, #552]	; (8010158 <atan+0x27c>)
 800ff30:	4b8a      	ldr	r3, [pc, #552]	; (801015c <atan+0x280>)
 800ff32:	f7f1 fa41 	bl	80013b8 <__aeabi_dadd>
 800ff36:	2200      	movs	r2, #0
 800ff38:	4b89      	ldr	r3, [pc, #548]	; (8010160 <atan+0x284>)
 800ff3a:	f7f0 fa8f 	bl	800045c <__aeabi_dcmpgt>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d1eb      	bne.n	800ff1a <atan+0x3e>
 800ff42:	2301      	movs	r3, #1
 800ff44:	425b      	negs	r3, r3
 800ff46:	e025      	b.n	800ff94 <atan+0xb8>
 800ff48:	f000 f948 	bl	80101dc <fabs>
 800ff4c:	4b85      	ldr	r3, [pc, #532]	; (8010164 <atan+0x288>)
 800ff4e:	0004      	movs	r4, r0
 800ff50:	000d      	movs	r5, r1
 800ff52:	429e      	cmp	r6, r3
 800ff54:	dd00      	ble.n	800ff58 <atan+0x7c>
 800ff56:	e0aa      	b.n	80100ae <atan+0x1d2>
 800ff58:	4b83      	ldr	r3, [pc, #524]	; (8010168 <atan+0x28c>)
 800ff5a:	429e      	cmp	r6, r3
 800ff5c:	dd00      	ble.n	800ff60 <atan+0x84>
 800ff5e:	e090      	b.n	8010082 <atan+0x1a6>
 800ff60:	0002      	movs	r2, r0
 800ff62:	000b      	movs	r3, r1
 800ff64:	f7f1 fa28 	bl	80013b8 <__aeabi_dadd>
 800ff68:	2200      	movs	r2, #0
 800ff6a:	4b7d      	ldr	r3, [pc, #500]	; (8010160 <atan+0x284>)
 800ff6c:	f7f2 fc00 	bl	8002770 <__aeabi_dsub>
 800ff70:	2380      	movs	r3, #128	; 0x80
 800ff72:	0006      	movs	r6, r0
 800ff74:	000f      	movs	r7, r1
 800ff76:	2200      	movs	r2, #0
 800ff78:	0020      	movs	r0, r4
 800ff7a:	0029      	movs	r1, r5
 800ff7c:	05db      	lsls	r3, r3, #23
 800ff7e:	f7f1 fa1b 	bl	80013b8 <__aeabi_dadd>
 800ff82:	000b      	movs	r3, r1
 800ff84:	0002      	movs	r2, r0
 800ff86:	0039      	movs	r1, r7
 800ff88:	0030      	movs	r0, r6
 800ff8a:	f7f1 fd7f 	bl	8001a8c <__aeabi_ddiv>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	0004      	movs	r4, r0
 800ff92:	000d      	movs	r5, r1
 800ff94:	0022      	movs	r2, r4
 800ff96:	9302      	str	r3, [sp, #8]
 800ff98:	0020      	movs	r0, r4
 800ff9a:	002b      	movs	r3, r5
 800ff9c:	0029      	movs	r1, r5
 800ff9e:	f7f2 f97b 	bl	8002298 <__aeabi_dmul>
 800ffa2:	0002      	movs	r2, r0
 800ffa4:	000b      	movs	r3, r1
 800ffa6:	9000      	str	r0, [sp, #0]
 800ffa8:	9101      	str	r1, [sp, #4]
 800ffaa:	f7f2 f975 	bl	8002298 <__aeabi_dmul>
 800ffae:	0006      	movs	r6, r0
 800ffb0:	000f      	movs	r7, r1
 800ffb2:	4a6e      	ldr	r2, [pc, #440]	; (801016c <atan+0x290>)
 800ffb4:	4b6e      	ldr	r3, [pc, #440]	; (8010170 <atan+0x294>)
 800ffb6:	f7f2 f96f 	bl	8002298 <__aeabi_dmul>
 800ffba:	4a6e      	ldr	r2, [pc, #440]	; (8010174 <atan+0x298>)
 800ffbc:	4b6e      	ldr	r3, [pc, #440]	; (8010178 <atan+0x29c>)
 800ffbe:	f7f1 f9fb 	bl	80013b8 <__aeabi_dadd>
 800ffc2:	0032      	movs	r2, r6
 800ffc4:	003b      	movs	r3, r7
 800ffc6:	f7f2 f967 	bl	8002298 <__aeabi_dmul>
 800ffca:	4a6c      	ldr	r2, [pc, #432]	; (801017c <atan+0x2a0>)
 800ffcc:	4b6c      	ldr	r3, [pc, #432]	; (8010180 <atan+0x2a4>)
 800ffce:	f7f1 f9f3 	bl	80013b8 <__aeabi_dadd>
 800ffd2:	0032      	movs	r2, r6
 800ffd4:	003b      	movs	r3, r7
 800ffd6:	f7f2 f95f 	bl	8002298 <__aeabi_dmul>
 800ffda:	4a6a      	ldr	r2, [pc, #424]	; (8010184 <atan+0x2a8>)
 800ffdc:	4b6a      	ldr	r3, [pc, #424]	; (8010188 <atan+0x2ac>)
 800ffde:	f7f1 f9eb 	bl	80013b8 <__aeabi_dadd>
 800ffe2:	0032      	movs	r2, r6
 800ffe4:	003b      	movs	r3, r7
 800ffe6:	f7f2 f957 	bl	8002298 <__aeabi_dmul>
 800ffea:	4a68      	ldr	r2, [pc, #416]	; (801018c <atan+0x2b0>)
 800ffec:	4b68      	ldr	r3, [pc, #416]	; (8010190 <atan+0x2b4>)
 800ffee:	f7f1 f9e3 	bl	80013b8 <__aeabi_dadd>
 800fff2:	0032      	movs	r2, r6
 800fff4:	003b      	movs	r3, r7
 800fff6:	f7f2 f94f 	bl	8002298 <__aeabi_dmul>
 800fffa:	4a66      	ldr	r2, [pc, #408]	; (8010194 <atan+0x2b8>)
 800fffc:	4b66      	ldr	r3, [pc, #408]	; (8010198 <atan+0x2bc>)
 800fffe:	f7f1 f9db 	bl	80013b8 <__aeabi_dadd>
 8010002:	9a00      	ldr	r2, [sp, #0]
 8010004:	9b01      	ldr	r3, [sp, #4]
 8010006:	f7f2 f947 	bl	8002298 <__aeabi_dmul>
 801000a:	4a64      	ldr	r2, [pc, #400]	; (801019c <atan+0x2c0>)
 801000c:	9000      	str	r0, [sp, #0]
 801000e:	9101      	str	r1, [sp, #4]
 8010010:	4b63      	ldr	r3, [pc, #396]	; (80101a0 <atan+0x2c4>)
 8010012:	0030      	movs	r0, r6
 8010014:	0039      	movs	r1, r7
 8010016:	f7f2 f93f 	bl	8002298 <__aeabi_dmul>
 801001a:	4a62      	ldr	r2, [pc, #392]	; (80101a4 <atan+0x2c8>)
 801001c:	4b62      	ldr	r3, [pc, #392]	; (80101a8 <atan+0x2cc>)
 801001e:	f7f2 fba7 	bl	8002770 <__aeabi_dsub>
 8010022:	0032      	movs	r2, r6
 8010024:	003b      	movs	r3, r7
 8010026:	f7f2 f937 	bl	8002298 <__aeabi_dmul>
 801002a:	4a60      	ldr	r2, [pc, #384]	; (80101ac <atan+0x2d0>)
 801002c:	4b60      	ldr	r3, [pc, #384]	; (80101b0 <atan+0x2d4>)
 801002e:	f7f2 fb9f 	bl	8002770 <__aeabi_dsub>
 8010032:	0032      	movs	r2, r6
 8010034:	003b      	movs	r3, r7
 8010036:	f7f2 f92f 	bl	8002298 <__aeabi_dmul>
 801003a:	4a5e      	ldr	r2, [pc, #376]	; (80101b4 <atan+0x2d8>)
 801003c:	4b5e      	ldr	r3, [pc, #376]	; (80101b8 <atan+0x2dc>)
 801003e:	f7f2 fb97 	bl	8002770 <__aeabi_dsub>
 8010042:	0032      	movs	r2, r6
 8010044:	003b      	movs	r3, r7
 8010046:	f7f2 f927 	bl	8002298 <__aeabi_dmul>
 801004a:	4a5c      	ldr	r2, [pc, #368]	; (80101bc <atan+0x2e0>)
 801004c:	4b5c      	ldr	r3, [pc, #368]	; (80101c0 <atan+0x2e4>)
 801004e:	f7f2 fb8f 	bl	8002770 <__aeabi_dsub>
 8010052:	0032      	movs	r2, r6
 8010054:	003b      	movs	r3, r7
 8010056:	f7f2 f91f 	bl	8002298 <__aeabi_dmul>
 801005a:	0002      	movs	r2, r0
 801005c:	000b      	movs	r3, r1
 801005e:	9800      	ldr	r0, [sp, #0]
 8010060:	9901      	ldr	r1, [sp, #4]
 8010062:	f7f1 f9a9 	bl	80013b8 <__aeabi_dadd>
 8010066:	002b      	movs	r3, r5
 8010068:	0022      	movs	r2, r4
 801006a:	f7f2 f915 	bl	8002298 <__aeabi_dmul>
 801006e:	9b02      	ldr	r3, [sp, #8]
 8010070:	3301      	adds	r3, #1
 8010072:	d143      	bne.n	80100fc <atan+0x220>
 8010074:	0002      	movs	r2, r0
 8010076:	000b      	movs	r3, r1
 8010078:	0020      	movs	r0, r4
 801007a:	0029      	movs	r1, r5
 801007c:	f7f2 fb78 	bl	8002770 <__aeabi_dsub>
 8010080:	e742      	b.n	800ff08 <atan+0x2c>
 8010082:	2200      	movs	r2, #0
 8010084:	4b36      	ldr	r3, [pc, #216]	; (8010160 <atan+0x284>)
 8010086:	f7f2 fb73 	bl	8002770 <__aeabi_dsub>
 801008a:	2200      	movs	r2, #0
 801008c:	0006      	movs	r6, r0
 801008e:	000f      	movs	r7, r1
 8010090:	0020      	movs	r0, r4
 8010092:	0029      	movs	r1, r5
 8010094:	4b32      	ldr	r3, [pc, #200]	; (8010160 <atan+0x284>)
 8010096:	f7f1 f98f 	bl	80013b8 <__aeabi_dadd>
 801009a:	000b      	movs	r3, r1
 801009c:	0002      	movs	r2, r0
 801009e:	0039      	movs	r1, r7
 80100a0:	0030      	movs	r0, r6
 80100a2:	f7f1 fcf3 	bl	8001a8c <__aeabi_ddiv>
 80100a6:	2301      	movs	r3, #1
 80100a8:	0004      	movs	r4, r0
 80100aa:	000d      	movs	r5, r1
 80100ac:	e772      	b.n	800ff94 <atan+0xb8>
 80100ae:	4b45      	ldr	r3, [pc, #276]	; (80101c4 <atan+0x2e8>)
 80100b0:	429e      	cmp	r6, r3
 80100b2:	dc19      	bgt.n	80100e8 <atan+0x20c>
 80100b4:	2200      	movs	r2, #0
 80100b6:	4b44      	ldr	r3, [pc, #272]	; (80101c8 <atan+0x2ec>)
 80100b8:	f7f2 fb5a 	bl	8002770 <__aeabi_dsub>
 80100bc:	2200      	movs	r2, #0
 80100be:	0006      	movs	r6, r0
 80100c0:	000f      	movs	r7, r1
 80100c2:	0020      	movs	r0, r4
 80100c4:	0029      	movs	r1, r5
 80100c6:	4b40      	ldr	r3, [pc, #256]	; (80101c8 <atan+0x2ec>)
 80100c8:	f7f2 f8e6 	bl	8002298 <__aeabi_dmul>
 80100cc:	2200      	movs	r2, #0
 80100ce:	4b24      	ldr	r3, [pc, #144]	; (8010160 <atan+0x284>)
 80100d0:	f7f1 f972 	bl	80013b8 <__aeabi_dadd>
 80100d4:	000b      	movs	r3, r1
 80100d6:	0002      	movs	r2, r0
 80100d8:	0039      	movs	r1, r7
 80100da:	0030      	movs	r0, r6
 80100dc:	f7f1 fcd6 	bl	8001a8c <__aeabi_ddiv>
 80100e0:	2302      	movs	r3, #2
 80100e2:	0004      	movs	r4, r0
 80100e4:	000d      	movs	r5, r1
 80100e6:	e755      	b.n	800ff94 <atan+0xb8>
 80100e8:	000b      	movs	r3, r1
 80100ea:	0002      	movs	r2, r0
 80100ec:	4937      	ldr	r1, [pc, #220]	; (80101cc <atan+0x2f0>)
 80100ee:	2000      	movs	r0, #0
 80100f0:	f7f1 fccc 	bl	8001a8c <__aeabi_ddiv>
 80100f4:	2303      	movs	r3, #3
 80100f6:	0004      	movs	r4, r0
 80100f8:	000d      	movs	r5, r1
 80100fa:	e74b      	b.n	800ff94 <atan+0xb8>
 80100fc:	9b02      	ldr	r3, [sp, #8]
 80100fe:	4f34      	ldr	r7, [pc, #208]	; (80101d0 <atan+0x2f4>)
 8010100:	00de      	lsls	r6, r3, #3
 8010102:	4b34      	ldr	r3, [pc, #208]	; (80101d4 <atan+0x2f8>)
 8010104:	19bf      	adds	r7, r7, r6
 8010106:	199e      	adds	r6, r3, r6
 8010108:	6832      	ldr	r2, [r6, #0]
 801010a:	6873      	ldr	r3, [r6, #4]
 801010c:	f7f2 fb30 	bl	8002770 <__aeabi_dsub>
 8010110:	0022      	movs	r2, r4
 8010112:	002b      	movs	r3, r5
 8010114:	f7f2 fb2c 	bl	8002770 <__aeabi_dsub>
 8010118:	000b      	movs	r3, r1
 801011a:	0002      	movs	r2, r0
 801011c:	6838      	ldr	r0, [r7, #0]
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	f7f2 fb26 	bl	8002770 <__aeabi_dsub>
 8010124:	9b03      	ldr	r3, [sp, #12]
 8010126:	0004      	movs	r4, r0
 8010128:	000d      	movs	r5, r1
 801012a:	2b00      	cmp	r3, #0
 801012c:	db00      	blt.n	8010130 <atan+0x254>
 801012e:	e6f4      	b.n	800ff1a <atan+0x3e>
 8010130:	2180      	movs	r1, #128	; 0x80
 8010132:	0609      	lsls	r1, r1, #24
 8010134:	186b      	adds	r3, r5, r1
 8010136:	001d      	movs	r5, r3
 8010138:	e6ef      	b.n	800ff1a <atan+0x3e>
 801013a:	4d27      	ldr	r5, [pc, #156]	; (80101d8 <atan+0x2fc>)
 801013c:	e6ed      	b.n	800ff1a <atan+0x3e>
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	440fffff 	.word	0x440fffff
 8010144:	7ff00000 	.word	0x7ff00000
 8010148:	54442d18 	.word	0x54442d18
 801014c:	bff921fb 	.word	0xbff921fb
 8010150:	3fdbffff 	.word	0x3fdbffff
 8010154:	3e1fffff 	.word	0x3e1fffff
 8010158:	8800759c 	.word	0x8800759c
 801015c:	7e37e43c 	.word	0x7e37e43c
 8010160:	3ff00000 	.word	0x3ff00000
 8010164:	3ff2ffff 	.word	0x3ff2ffff
 8010168:	3fe5ffff 	.word	0x3fe5ffff
 801016c:	e322da11 	.word	0xe322da11
 8010170:	3f90ad3a 	.word	0x3f90ad3a
 8010174:	24760deb 	.word	0x24760deb
 8010178:	3fa97b4b 	.word	0x3fa97b4b
 801017c:	a0d03d51 	.word	0xa0d03d51
 8010180:	3fb10d66 	.word	0x3fb10d66
 8010184:	c54c206e 	.word	0xc54c206e
 8010188:	3fb745cd 	.word	0x3fb745cd
 801018c:	920083ff 	.word	0x920083ff
 8010190:	3fc24924 	.word	0x3fc24924
 8010194:	5555550d 	.word	0x5555550d
 8010198:	3fd55555 	.word	0x3fd55555
 801019c:	2c6a6c2f 	.word	0x2c6a6c2f
 80101a0:	bfa2b444 	.word	0xbfa2b444
 80101a4:	52defd9a 	.word	0x52defd9a
 80101a8:	3fadde2d 	.word	0x3fadde2d
 80101ac:	af749a6d 	.word	0xaf749a6d
 80101b0:	3fb3b0f2 	.word	0x3fb3b0f2
 80101b4:	fe231671 	.word	0xfe231671
 80101b8:	3fbc71c6 	.word	0x3fbc71c6
 80101bc:	9998ebc4 	.word	0x9998ebc4
 80101c0:	3fc99999 	.word	0x3fc99999
 80101c4:	40037fff 	.word	0x40037fff
 80101c8:	3ff80000 	.word	0x3ff80000
 80101cc:	bff00000 	.word	0xbff00000
 80101d0:	08010648 	.word	0x08010648
 80101d4:	08010668 	.word	0x08010668
 80101d8:	3ff921fb 	.word	0x3ff921fb

080101dc <fabs>:
 80101dc:	004b      	lsls	r3, r1, #1
 80101de:	0859      	lsrs	r1, r3, #1
 80101e0:	4770      	bx	lr
	...

080101e4 <nan>:
 80101e4:	2000      	movs	r0, #0
 80101e6:	4901      	ldr	r1, [pc, #4]	; (80101ec <nan+0x8>)
 80101e8:	4770      	bx	lr
 80101ea:	46c0      	nop			; (mov r8, r8)
 80101ec:	7ff80000 	.word	0x7ff80000

080101f0 <_init>:
 80101f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f2:	46c0      	nop			; (mov r8, r8)
 80101f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101f6:	bc08      	pop	{r3}
 80101f8:	469e      	mov	lr, r3
 80101fa:	4770      	bx	lr

080101fc <_fini>:
 80101fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fe:	46c0      	nop			; (mov r8, r8)
 8010200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010202:	bc08      	pop	{r3}
 8010204:	469e      	mov	lr, r3
 8010206:	4770      	bx	lr

08010208 <__FLASH_Program_Fast_veneer>:
 8010208:	b401      	push	{r0}
 801020a:	4802      	ldr	r0, [pc, #8]	; (8010214 <__FLASH_Program_Fast_veneer+0xc>)
 801020c:	4684      	mov	ip, r0
 801020e:	bc01      	pop	{r0}
 8010210:	4760      	bx	ip
 8010212:	bf00      	nop
 8010214:	20000079 	.word	0x20000079

Disassembly of section .data:

20000000 <uwTickPrio>:
20000000:	00000004                                ....

20000004 <uwTickFreq>:
20000004:	00000001                                ....

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <SystemCoreClock>:
2000000c:	00f42400                                .$..

20000010 <_impure_ptr>:
20000010:	20000014                                ... 

20000014 <impure_data>:
	...

20000074 <__fdlib_version>:
20000074:	000000ff                                ....

20000078 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000078:	b580      	push	{r7, lr}
2000007a:	b088      	sub	sp, #32
2000007c:	af00      	add	r7, sp, #0
2000007e:	6078      	str	r0, [r7, #4]
20000080:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000082:	231f      	movs	r3, #31
20000084:	18fb      	adds	r3, r7, r3
20000086:	2200      	movs	r2, #0
20000088:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000008e:	683b      	ldr	r3, [r7, #0]
20000090:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000092:	4b1a      	ldr	r3, [pc, #104]	; (200000fc <FLASH_Program_Fast+0x84>)
20000094:	695a      	ldr	r2, [r3, #20]
20000096:	4b19      	ldr	r3, [pc, #100]	; (200000fc <FLASH_Program_Fast+0x84>)
20000098:	2180      	movs	r1, #128	; 0x80
2000009a:	02c9      	lsls	r1, r1, #11
2000009c:	430a      	orrs	r2, r1
2000009e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000a0:	f3ef 8310 	mrs	r3, PRIMASK
200000a4:	60fb      	str	r3, [r7, #12]
  return(result);
200000a6:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000aa:	b672      	cpsid	i
}
200000ac:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ae:	e00f      	b.n	200000d0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000b0:	697a      	ldr	r2, [r7, #20]
200000b2:	69bb      	ldr	r3, [r7, #24]
200000b4:	6812      	ldr	r2, [r2, #0]
200000b6:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b8:	697b      	ldr	r3, [r7, #20]
200000ba:	3304      	adds	r3, #4
200000bc:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000be:	69bb      	ldr	r3, [r7, #24]
200000c0:	3304      	adds	r3, #4
200000c2:	61bb      	str	r3, [r7, #24]
    index++;
200000c4:	211f      	movs	r1, #31
200000c6:	187b      	adds	r3, r7, r1
200000c8:	781a      	ldrb	r2, [r3, #0]
200000ca:	187b      	adds	r3, r7, r1
200000cc:	3201      	adds	r2, #1
200000ce:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000d0:	231f      	movs	r3, #31
200000d2:	18fb      	adds	r3, r7, r3
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	2b3f      	cmp	r3, #63	; 0x3f
200000d8:	d9ea      	bls.n	200000b0 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000da:	46c0      	nop			; (mov r8, r8)
200000dc:	4b07      	ldr	r3, [pc, #28]	; (200000fc <FLASH_Program_Fast+0x84>)
200000de:	691a      	ldr	r2, [r3, #16]
200000e0:	2380      	movs	r3, #128	; 0x80
200000e2:	025b      	lsls	r3, r3, #9
200000e4:	4013      	ands	r3, r2
200000e6:	d1f9      	bne.n	200000dc <FLASH_Program_Fast+0x64>
200000e8:	693b      	ldr	r3, [r7, #16]
200000ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000ec:	68bb      	ldr	r3, [r7, #8]
200000ee:	f383 8810 	msr	PRIMASK, r3
}
200000f2:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f4:	46c0      	nop			; (mov r8, r8)
200000f6:	46bd      	mov	sp, r7
200000f8:	b008      	add	sp, #32
200000fa:	bd80      	pop	{r7, pc}
200000fc:	40022000 	.word	0x40022000
