
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800d484  0800d484  0001d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d880  0800d880  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d888  0800d888  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d888  0800d888  0001d888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d88c  0800d88c  0001d88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000074  0800d904  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800d904  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002725a  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004092  00000000  00000000  000472f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0004b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  0004ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2fe  00000000  00000000  0004dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e218  00000000  00000000  0006c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b55fd  00000000  00000000  0008a4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fae3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c20  00000000  00000000  0013fb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d46c 	.word	0x0800d46c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	0800d46c 	.word	0x0800d46c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fecd 	bl	80021b4 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fe17 	bl	8002058 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 febf 	bl	80021b4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 feb5 	bl	80021b4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe39 	bl	80020d0 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe2f 	bl	80020d0 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f932 	bl	8000720 <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f846 	bl	8000588 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	0415      	lsls	r5, r2, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	000f      	movs	r7, r1
 8000510:	0001      	movs	r1, r0
 8000512:	002e      	movs	r6, r5
 8000514:	46c6      	mov	lr, r8
 8000516:	4684      	mov	ip, r0
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	0c14      	lsrs	r4, r2, #16
 800051c:	0c00      	lsrs	r0, r0, #16
 800051e:	0c09      	lsrs	r1, r1, #16
 8000520:	4346      	muls	r6, r0
 8000522:	434d      	muls	r5, r1
 8000524:	4360      	muls	r0, r4
 8000526:	4361      	muls	r1, r4
 8000528:	1940      	adds	r0, r0, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	1824      	adds	r4, r4, r0
 800052e:	b500      	push	{lr}
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2080      	movs	r0, #128	; 0x80
 8000536:	0240      	lsls	r0, r0, #9
 8000538:	4680      	mov	r8, r0
 800053a:	4441      	add	r1, r8
 800053c:	0c25      	lsrs	r5, r4, #16
 800053e:	186d      	adds	r5, r5, r1
 8000540:	4661      	mov	r1, ip
 8000542:	4359      	muls	r1, r3
 8000544:	437a      	muls	r2, r7
 8000546:	0430      	lsls	r0, r6, #16
 8000548:	1949      	adds	r1, r1, r5
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	1820      	adds	r0, r4, r0
 8000550:	1889      	adds	r1, r1, r2
 8000552:	bc80      	pop	{r7}
 8000554:	46b8      	mov	r8, r7
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000558 <__aeabi_f2uiz>:
 8000558:	219e      	movs	r1, #158	; 0x9e
 800055a:	b510      	push	{r4, lr}
 800055c:	05c9      	lsls	r1, r1, #23
 800055e:	1c04      	adds	r4, r0, #0
 8000560:	f002 fe40 	bl	80031e4 <__aeabi_fcmpge>
 8000564:	2800      	cmp	r0, #0
 8000566:	d103      	bne.n	8000570 <__aeabi_f2uiz+0x18>
 8000568:	1c20      	adds	r0, r4, #0
 800056a:	f000 fe81 	bl	8001270 <__aeabi_f2iz>
 800056e:	bd10      	pop	{r4, pc}
 8000570:	219e      	movs	r1, #158	; 0x9e
 8000572:	1c20      	adds	r0, r4, #0
 8000574:	05c9      	lsls	r1, r1, #23
 8000576:	f000 fcb3 	bl	8000ee0 <__aeabi_fsub>
 800057a:	f000 fe79 	bl	8001270 <__aeabi_f2iz>
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	061b      	lsls	r3, r3, #24
 8000582:	469c      	mov	ip, r3
 8000584:	4460      	add	r0, ip
 8000586:	e7f2      	b.n	800056e <__aeabi_f2uiz+0x16>

08000588 <__udivmoddi4>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4657      	mov	r7, sl
 800058c:	464e      	mov	r6, r9
 800058e:	4645      	mov	r5, r8
 8000590:	46de      	mov	lr, fp
 8000592:	b5e0      	push	{r5, r6, r7, lr}
 8000594:	0004      	movs	r4, r0
 8000596:	000d      	movs	r5, r1
 8000598:	4692      	mov	sl, r2
 800059a:	4699      	mov	r9, r3
 800059c:	b083      	sub	sp, #12
 800059e:	428b      	cmp	r3, r1
 80005a0:	d830      	bhi.n	8000604 <__udivmoddi4+0x7c>
 80005a2:	d02d      	beq.n	8000600 <__udivmoddi4+0x78>
 80005a4:	4649      	mov	r1, r9
 80005a6:	4650      	mov	r0, sl
 80005a8:	f002 fe44 	bl	8003234 <__clzdi2>
 80005ac:	0029      	movs	r1, r5
 80005ae:	0006      	movs	r6, r0
 80005b0:	0020      	movs	r0, r4
 80005b2:	f002 fe3f 	bl	8003234 <__clzdi2>
 80005b6:	1a33      	subs	r3, r6, r0
 80005b8:	4698      	mov	r8, r3
 80005ba:	3b20      	subs	r3, #32
 80005bc:	469b      	mov	fp, r3
 80005be:	d433      	bmi.n	8000628 <__udivmoddi4+0xa0>
 80005c0:	465a      	mov	r2, fp
 80005c2:	4653      	mov	r3, sl
 80005c4:	4093      	lsls	r3, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	001f      	movs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d83a      	bhi.n	800064a <__udivmoddi4+0xc2>
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d100      	bne.n	80005da <__udivmoddi4+0x52>
 80005d8:	e078      	b.n	80006cc <__udivmoddi4+0x144>
 80005da:	465b      	mov	r3, fp
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5e>
 80005e4:	e075      	b.n	80006d2 <__udivmoddi4+0x14a>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	465a      	mov	r2, fp
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4642      	mov	r2, r8
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e028      	b.n	8000652 <__udivmoddi4+0xca>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9cf      	bls.n	80005a4 <__udivmoddi4+0x1c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8e>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b003      	add	sp, #12
 800061c:	bcf0      	pop	{r4, r5, r6, r7}
 800061e:	46bb      	mov	fp, r7
 8000620:	46b2      	mov	sl, r6
 8000622:	46a9      	mov	r9, r5
 8000624:	46a0      	mov	r8, r4
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	4652      	mov	r2, sl
 8000630:	40da      	lsrs	r2, r3
 8000632:	4641      	mov	r1, r8
 8000634:	0013      	movs	r3, r2
 8000636:	464a      	mov	r2, r9
 8000638:	408a      	lsls	r2, r1
 800063a:	0017      	movs	r7, r2
 800063c:	4642      	mov	r2, r8
 800063e:	431f      	orrs	r7, r3
 8000640:	4653      	mov	r3, sl
 8000642:	4093      	lsls	r3, r2
 8000644:	001e      	movs	r6, r3
 8000646:	42af      	cmp	r7, r5
 8000648:	d9c4      	bls.n	80005d4 <__udivmoddi4+0x4c>
 800064a:	2200      	movs	r2, #0
 800064c:	2300      	movs	r3, #0
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	4643      	mov	r3, r8
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0d9      	beq.n	800060c <__udivmoddi4+0x84>
 8000658:	07fb      	lsls	r3, r7, #31
 800065a:	0872      	lsrs	r2, r6, #1
 800065c:	431a      	orrs	r2, r3
 800065e:	4646      	mov	r6, r8
 8000660:	087b      	lsrs	r3, r7, #1
 8000662:	e00e      	b.n	8000682 <__udivmoddi4+0xfa>
 8000664:	42ab      	cmp	r3, r5
 8000666:	d101      	bne.n	800066c <__udivmoddi4+0xe4>
 8000668:	42a2      	cmp	r2, r4
 800066a:	d80c      	bhi.n	8000686 <__udivmoddi4+0xfe>
 800066c:	1aa4      	subs	r4, r4, r2
 800066e:	419d      	sbcs	r5, r3
 8000670:	2001      	movs	r0, #1
 8000672:	1924      	adds	r4, r4, r4
 8000674:	416d      	adcs	r5, r5
 8000676:	2100      	movs	r1, #0
 8000678:	3e01      	subs	r6, #1
 800067a:	1824      	adds	r4, r4, r0
 800067c:	414d      	adcs	r5, r1
 800067e:	2e00      	cmp	r6, #0
 8000680:	d006      	beq.n	8000690 <__udivmoddi4+0x108>
 8000682:	42ab      	cmp	r3, r5
 8000684:	d9ee      	bls.n	8000664 <__udivmoddi4+0xdc>
 8000686:	3e01      	subs	r6, #1
 8000688:	1924      	adds	r4, r4, r4
 800068a:	416d      	adcs	r5, r5
 800068c:	2e00      	cmp	r6, #0
 800068e:	d1f8      	bne.n	8000682 <__udivmoddi4+0xfa>
 8000690:	9800      	ldr	r0, [sp, #0]
 8000692:	9901      	ldr	r1, [sp, #4]
 8000694:	465b      	mov	r3, fp
 8000696:	1900      	adds	r0, r0, r4
 8000698:	4169      	adcs	r1, r5
 800069a:	2b00      	cmp	r3, #0
 800069c:	db24      	blt.n	80006e8 <__udivmoddi4+0x160>
 800069e:	002b      	movs	r3, r5
 80006a0:	465a      	mov	r2, fp
 80006a2:	4644      	mov	r4, r8
 80006a4:	40d3      	lsrs	r3, r2
 80006a6:	002a      	movs	r2, r5
 80006a8:	40e2      	lsrs	r2, r4
 80006aa:	001c      	movs	r4, r3
 80006ac:	465b      	mov	r3, fp
 80006ae:	0015      	movs	r5, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db2a      	blt.n	800070a <__udivmoddi4+0x182>
 80006b4:	0026      	movs	r6, r4
 80006b6:	409e      	lsls	r6, r3
 80006b8:	0033      	movs	r3, r6
 80006ba:	0026      	movs	r6, r4
 80006bc:	4647      	mov	r7, r8
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1a80      	subs	r0, r0, r2
 80006c4:	4199      	sbcs	r1, r3
 80006c6:	9000      	str	r0, [sp, #0]
 80006c8:	9101      	str	r1, [sp, #4]
 80006ca:	e79f      	b.n	800060c <__udivmoddi4+0x84>
 80006cc:	42a3      	cmp	r3, r4
 80006ce:	d8bc      	bhi.n	800064a <__udivmoddi4+0xc2>
 80006d0:	e783      	b.n	80005da <__udivmoddi4+0x52>
 80006d2:	4642      	mov	r2, r8
 80006d4:	2320      	movs	r3, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	2200      	movs	r2, #0
 80006dc:	9100      	str	r1, [sp, #0]
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	e786      	b.n	80005f6 <__udivmoddi4+0x6e>
 80006e8:	4642      	mov	r2, r8
 80006ea:	2320      	movs	r3, #32
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	002a      	movs	r2, r5
 80006f0:	4646      	mov	r6, r8
 80006f2:	409a      	lsls	r2, r3
 80006f4:	0023      	movs	r3, r4
 80006f6:	40f3      	lsrs	r3, r6
 80006f8:	4644      	mov	r4, r8
 80006fa:	4313      	orrs	r3, r2
 80006fc:	002a      	movs	r2, r5
 80006fe:	40e2      	lsrs	r2, r4
 8000700:	001c      	movs	r4, r3
 8000702:	465b      	mov	r3, fp
 8000704:	0015      	movs	r5, r2
 8000706:	2b00      	cmp	r3, #0
 8000708:	dad4      	bge.n	80006b4 <__udivmoddi4+0x12c>
 800070a:	4642      	mov	r2, r8
 800070c:	002f      	movs	r7, r5
 800070e:	2320      	movs	r3, #32
 8000710:	0026      	movs	r6, r4
 8000712:	4097      	lsls	r7, r2
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	40de      	lsrs	r6, r3
 8000718:	003b      	movs	r3, r7
 800071a:	4333      	orrs	r3, r6
 800071c:	e7cd      	b.n	80006ba <__udivmoddi4+0x132>
 800071e:	46c0      	nop			; (mov r8, r8)

08000720 <__gnu_ldivmod_helper>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	46ce      	mov	lr, r9
 8000724:	4647      	mov	r7, r8
 8000726:	b580      	push	{r7, lr}
 8000728:	4691      	mov	r9, r2
 800072a:	4698      	mov	r8, r3
 800072c:	0004      	movs	r4, r0
 800072e:	000d      	movs	r5, r1
 8000730:	f002 fd8c 	bl	800324c <__divdi3>
 8000734:	0007      	movs	r7, r0
 8000736:	000e      	movs	r6, r1
 8000738:	0002      	movs	r2, r0
 800073a:	000b      	movs	r3, r1
 800073c:	4648      	mov	r0, r9
 800073e:	4641      	mov	r1, r8
 8000740:	f7ff fee2 	bl	8000508 <__aeabi_lmul>
 8000744:	1a24      	subs	r4, r4, r0
 8000746:	418d      	sbcs	r5, r1
 8000748:	9b08      	ldr	r3, [sp, #32]
 800074a:	0038      	movs	r0, r7
 800074c:	0031      	movs	r1, r6
 800074e:	601c      	str	r4, [r3, #0]
 8000750:	605d      	str	r5, [r3, #4]
 8000752:	bcc0      	pop	{r6, r7}
 8000754:	46b9      	mov	r9, r7
 8000756:	46b0      	mov	r8, r6
 8000758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_fadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	4646      	mov	r6, r8
 8000760:	46d6      	mov	lr, sl
 8000762:	464f      	mov	r7, r9
 8000764:	024d      	lsls	r5, r1, #9
 8000766:	0242      	lsls	r2, r0, #9
 8000768:	b5c0      	push	{r6, r7, lr}
 800076a:	0a52      	lsrs	r2, r2, #9
 800076c:	0a6e      	lsrs	r6, r5, #9
 800076e:	0047      	lsls	r7, r0, #1
 8000770:	46b0      	mov	r8, r6
 8000772:	0e3f      	lsrs	r7, r7, #24
 8000774:	004e      	lsls	r6, r1, #1
 8000776:	0fc4      	lsrs	r4, r0, #31
 8000778:	00d0      	lsls	r0, r2, #3
 800077a:	4694      	mov	ip, r2
 800077c:	003b      	movs	r3, r7
 800077e:	4682      	mov	sl, r0
 8000780:	0e36      	lsrs	r6, r6, #24
 8000782:	0fc9      	lsrs	r1, r1, #31
 8000784:	09ad      	lsrs	r5, r5, #6
 8000786:	428c      	cmp	r4, r1
 8000788:	d06d      	beq.n	8000866 <__aeabi_fadd+0x10a>
 800078a:	1bb8      	subs	r0, r7, r6
 800078c:	4681      	mov	r9, r0
 800078e:	2800      	cmp	r0, #0
 8000790:	dd4d      	ble.n	800082e <__aeabi_fadd+0xd2>
 8000792:	2e00      	cmp	r6, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x3c>
 8000796:	e088      	b.n	80008aa <__aeabi_fadd+0x14e>
 8000798:	2fff      	cmp	r7, #255	; 0xff
 800079a:	d05a      	beq.n	8000852 <__aeabi_fadd+0xf6>
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	04db      	lsls	r3, r3, #19
 80007a0:	431d      	orrs	r5, r3
 80007a2:	464b      	mov	r3, r9
 80007a4:	2201      	movs	r2, #1
 80007a6:	2b1b      	cmp	r3, #27
 80007a8:	dc0a      	bgt.n	80007c0 <__aeabi_fadd+0x64>
 80007aa:	002b      	movs	r3, r5
 80007ac:	464a      	mov	r2, r9
 80007ae:	4649      	mov	r1, r9
 80007b0:	40d3      	lsrs	r3, r2
 80007b2:	2220      	movs	r2, #32
 80007b4:	1a52      	subs	r2, r2, r1
 80007b6:	4095      	lsls	r5, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	1e55      	subs	r5, r2, #1
 80007bc:	41aa      	sbcs	r2, r5
 80007be:	431a      	orrs	r2, r3
 80007c0:	4653      	mov	r3, sl
 80007c2:	1a9a      	subs	r2, r3, r2
 80007c4:	0153      	lsls	r3, r2, #5
 80007c6:	d400      	bmi.n	80007ca <__aeabi_fadd+0x6e>
 80007c8:	e0b9      	b.n	800093e <__aeabi_fadd+0x1e2>
 80007ca:	0192      	lsls	r2, r2, #6
 80007cc:	0996      	lsrs	r6, r2, #6
 80007ce:	0030      	movs	r0, r6
 80007d0:	f002 fd12 	bl	80031f8 <__clzsi2>
 80007d4:	3805      	subs	r0, #5
 80007d6:	4086      	lsls	r6, r0
 80007d8:	4287      	cmp	r7, r0
 80007da:	dd00      	ble.n	80007de <__aeabi_fadd+0x82>
 80007dc:	e0d4      	b.n	8000988 <__aeabi_fadd+0x22c>
 80007de:	0033      	movs	r3, r6
 80007e0:	1bc7      	subs	r7, r0, r7
 80007e2:	2020      	movs	r0, #32
 80007e4:	3701      	adds	r7, #1
 80007e6:	40fb      	lsrs	r3, r7
 80007e8:	1bc7      	subs	r7, r0, r7
 80007ea:	40be      	lsls	r6, r7
 80007ec:	0032      	movs	r2, r6
 80007ee:	1e56      	subs	r6, r2, #1
 80007f0:	41b2      	sbcs	r2, r6
 80007f2:	2700      	movs	r7, #0
 80007f4:	431a      	orrs	r2, r3
 80007f6:	0753      	lsls	r3, r2, #29
 80007f8:	d004      	beq.n	8000804 <__aeabi_fadd+0xa8>
 80007fa:	230f      	movs	r3, #15
 80007fc:	4013      	ands	r3, r2
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0xa8>
 8000802:	3204      	adds	r2, #4
 8000804:	0153      	lsls	r3, r2, #5
 8000806:	d400      	bmi.n	800080a <__aeabi_fadd+0xae>
 8000808:	e09c      	b.n	8000944 <__aeabi_fadd+0x1e8>
 800080a:	1c7b      	adds	r3, r7, #1
 800080c:	2ffe      	cmp	r7, #254	; 0xfe
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0xb6>
 8000810:	e09a      	b.n	8000948 <__aeabi_fadd+0x1ec>
 8000812:	0192      	lsls	r2, r2, #6
 8000814:	0a52      	lsrs	r2, r2, #9
 8000816:	4694      	mov	ip, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	05d8      	lsls	r0, r3, #23
 800081c:	4663      	mov	r3, ip
 800081e:	07e4      	lsls	r4, r4, #31
 8000820:	4318      	orrs	r0, r3
 8000822:	4320      	orrs	r0, r4
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	2800      	cmp	r0, #0
 8000830:	d049      	beq.n	80008c6 <__aeabi_fadd+0x16a>
 8000832:	1bf3      	subs	r3, r6, r7
 8000834:	2f00      	cmp	r7, #0
 8000836:	d000      	beq.n	800083a <__aeabi_fadd+0xde>
 8000838:	e0b6      	b.n	80009a8 <__aeabi_fadd+0x24c>
 800083a:	4652      	mov	r2, sl
 800083c:	2a00      	cmp	r2, #0
 800083e:	d060      	beq.n	8000902 <__aeabi_fadd+0x1a6>
 8000840:	3b01      	subs	r3, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0xec>
 8000846:	e0fc      	b.n	8000a42 <__aeabi_fadd+0x2e6>
 8000848:	2eff      	cmp	r6, #255	; 0xff
 800084a:	d000      	beq.n	800084e <__aeabi_fadd+0xf2>
 800084c:	e0b4      	b.n	80009b8 <__aeabi_fadd+0x25c>
 800084e:	000c      	movs	r4, r1
 8000850:	4642      	mov	r2, r8
 8000852:	2a00      	cmp	r2, #0
 8000854:	d078      	beq.n	8000948 <__aeabi_fadd+0x1ec>
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	03c0      	lsls	r0, r0, #15
 800085a:	4310      	orrs	r0, r2
 800085c:	0242      	lsls	r2, r0, #9
 800085e:	0a53      	lsrs	r3, r2, #9
 8000860:	469c      	mov	ip, r3
 8000862:	23ff      	movs	r3, #255	; 0xff
 8000864:	e7d9      	b.n	800081a <__aeabi_fadd+0xbe>
 8000866:	1bb9      	subs	r1, r7, r6
 8000868:	2900      	cmp	r1, #0
 800086a:	dd71      	ble.n	8000950 <__aeabi_fadd+0x1f4>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d03f      	beq.n	80008f0 <__aeabi_fadd+0x194>
 8000870:	2fff      	cmp	r7, #255	; 0xff
 8000872:	d0ee      	beq.n	8000852 <__aeabi_fadd+0xf6>
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	04db      	lsls	r3, r3, #19
 8000878:	431d      	orrs	r5, r3
 800087a:	2201      	movs	r2, #1
 800087c:	291b      	cmp	r1, #27
 800087e:	dc07      	bgt.n	8000890 <__aeabi_fadd+0x134>
 8000880:	002a      	movs	r2, r5
 8000882:	2320      	movs	r3, #32
 8000884:	40ca      	lsrs	r2, r1
 8000886:	1a59      	subs	r1, r3, r1
 8000888:	408d      	lsls	r5, r1
 800088a:	1e6b      	subs	r3, r5, #1
 800088c:	419d      	sbcs	r5, r3
 800088e:	432a      	orrs	r2, r5
 8000890:	4452      	add	r2, sl
 8000892:	0153      	lsls	r3, r2, #5
 8000894:	d553      	bpl.n	800093e <__aeabi_fadd+0x1e2>
 8000896:	3701      	adds	r7, #1
 8000898:	2fff      	cmp	r7, #255	; 0xff
 800089a:	d055      	beq.n	8000948 <__aeabi_fadd+0x1ec>
 800089c:	2301      	movs	r3, #1
 800089e:	497b      	ldr	r1, [pc, #492]	; (8000a8c <__aeabi_fadd+0x330>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	0852      	lsrs	r2, r2, #1
 80008a4:	400a      	ands	r2, r1
 80008a6:	431a      	orrs	r2, r3
 80008a8:	e7a5      	b.n	80007f6 <__aeabi_fadd+0x9a>
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d02c      	beq.n	8000908 <__aeabi_fadd+0x1ac>
 80008ae:	2301      	movs	r3, #1
 80008b0:	425b      	negs	r3, r3
 80008b2:	469c      	mov	ip, r3
 80008b4:	44e1      	add	r9, ip
 80008b6:	464b      	mov	r3, r9
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x162>
 80008bc:	e0ad      	b.n	8000a1a <__aeabi_fadd+0x2be>
 80008be:	2fff      	cmp	r7, #255	; 0xff
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fadd+0x168>
 80008c2:	e76e      	b.n	80007a2 <__aeabi_fadd+0x46>
 80008c4:	e7c5      	b.n	8000852 <__aeabi_fadd+0xf6>
 80008c6:	20fe      	movs	r0, #254	; 0xfe
 80008c8:	1c7e      	adds	r6, r7, #1
 80008ca:	4230      	tst	r0, r6
 80008cc:	d160      	bne.n	8000990 <__aeabi_fadd+0x234>
 80008ce:	2f00      	cmp	r7, #0
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fadd+0x178>
 80008d2:	e093      	b.n	80009fc <__aeabi_fadd+0x2a0>
 80008d4:	4652      	mov	r2, sl
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x180>
 80008da:	e0b6      	b.n	8000a4a <__aeabi_fadd+0x2ee>
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d09c      	beq.n	800081a <__aeabi_fadd+0xbe>
 80008e0:	1b52      	subs	r2, r2, r5
 80008e2:	0150      	lsls	r0, r2, #5
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_fadd+0x18c>
 80008e6:	e0c3      	b.n	8000a70 <__aeabi_fadd+0x314>
 80008e8:	4653      	mov	r3, sl
 80008ea:	000c      	movs	r4, r1
 80008ec:	1aea      	subs	r2, r5, r3
 80008ee:	e782      	b.n	80007f6 <__aeabi_fadd+0x9a>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d009      	beq.n	8000908 <__aeabi_fadd+0x1ac>
 80008f4:	3901      	subs	r1, #1
 80008f6:	2900      	cmp	r1, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x1a0>
 80008fa:	e08b      	b.n	8000a14 <__aeabi_fadd+0x2b8>
 80008fc:	2fff      	cmp	r7, #255	; 0xff
 80008fe:	d1bc      	bne.n	800087a <__aeabi_fadd+0x11e>
 8000900:	e7a7      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000902:	000c      	movs	r4, r1
 8000904:	4642      	mov	r2, r8
 8000906:	0037      	movs	r7, r6
 8000908:	2fff      	cmp	r7, #255	; 0xff
 800090a:	d0a2      	beq.n	8000852 <__aeabi_fadd+0xf6>
 800090c:	0252      	lsls	r2, r2, #9
 800090e:	0a53      	lsrs	r3, r2, #9
 8000910:	469c      	mov	ip, r3
 8000912:	b2fb      	uxtb	r3, r7
 8000914:	e781      	b.n	800081a <__aeabi_fadd+0xbe>
 8000916:	21fe      	movs	r1, #254	; 0xfe
 8000918:	3701      	adds	r7, #1
 800091a:	4239      	tst	r1, r7
 800091c:	d165      	bne.n	80009ea <__aeabi_fadd+0x28e>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d17e      	bne.n	8000a20 <__aeabi_fadd+0x2c4>
 8000922:	2800      	cmp	r0, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x1cc>
 8000926:	e0aa      	b.n	8000a7e <__aeabi_fadd+0x322>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x1d2>
 800092c:	e775      	b.n	800081a <__aeabi_fadd+0xbe>
 800092e:	002a      	movs	r2, r5
 8000930:	4452      	add	r2, sl
 8000932:	2700      	movs	r7, #0
 8000934:	0153      	lsls	r3, r2, #5
 8000936:	d502      	bpl.n	800093e <__aeabi_fadd+0x1e2>
 8000938:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <__aeabi_fadd+0x334>)
 800093a:	3701      	adds	r7, #1
 800093c:	401a      	ands	r2, r3
 800093e:	0753      	lsls	r3, r2, #29
 8000940:	d000      	beq.n	8000944 <__aeabi_fadd+0x1e8>
 8000942:	e75a      	b.n	80007fa <__aeabi_fadd+0x9e>
 8000944:	08d2      	lsrs	r2, r2, #3
 8000946:	e7df      	b.n	8000908 <__aeabi_fadd+0x1ac>
 8000948:	2200      	movs	r2, #0
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	4694      	mov	ip, r2
 800094e:	e764      	b.n	800081a <__aeabi_fadd+0xbe>
 8000950:	2900      	cmp	r1, #0
 8000952:	d0e0      	beq.n	8000916 <__aeabi_fadd+0x1ba>
 8000954:	1bf3      	subs	r3, r6, r7
 8000956:	2f00      	cmp	r7, #0
 8000958:	d03e      	beq.n	80009d8 <__aeabi_fadd+0x27c>
 800095a:	2eff      	cmp	r6, #255	; 0xff
 800095c:	d100      	bne.n	8000960 <__aeabi_fadd+0x204>
 800095e:	e777      	b.n	8000850 <__aeabi_fadd+0xf4>
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0001      	movs	r1, r0
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	468a      	mov	sl, r1
 800096a:	2201      	movs	r2, #1
 800096c:	2b1b      	cmp	r3, #27
 800096e:	dc08      	bgt.n	8000982 <__aeabi_fadd+0x226>
 8000970:	4652      	mov	r2, sl
 8000972:	2120      	movs	r1, #32
 8000974:	4650      	mov	r0, sl
 8000976:	40da      	lsrs	r2, r3
 8000978:	1acb      	subs	r3, r1, r3
 800097a:	4098      	lsls	r0, r3
 800097c:	1e43      	subs	r3, r0, #1
 800097e:	4198      	sbcs	r0, r3
 8000980:	4302      	orrs	r2, r0
 8000982:	0037      	movs	r7, r6
 8000984:	1952      	adds	r2, r2, r5
 8000986:	e784      	b.n	8000892 <__aeabi_fadd+0x136>
 8000988:	4a41      	ldr	r2, [pc, #260]	; (8000a90 <__aeabi_fadd+0x334>)
 800098a:	1a3f      	subs	r7, r7, r0
 800098c:	4032      	ands	r2, r6
 800098e:	e732      	b.n	80007f6 <__aeabi_fadd+0x9a>
 8000990:	4653      	mov	r3, sl
 8000992:	1b5e      	subs	r6, r3, r5
 8000994:	0173      	lsls	r3, r6, #5
 8000996:	d42d      	bmi.n	80009f4 <__aeabi_fadd+0x298>
 8000998:	2e00      	cmp	r6, #0
 800099a:	d000      	beq.n	800099e <__aeabi_fadd+0x242>
 800099c:	e717      	b.n	80007ce <__aeabi_fadd+0x72>
 800099e:	2200      	movs	r2, #0
 80009a0:	2400      	movs	r4, #0
 80009a2:	2300      	movs	r3, #0
 80009a4:	4694      	mov	ip, r2
 80009a6:	e738      	b.n	800081a <__aeabi_fadd+0xbe>
 80009a8:	2eff      	cmp	r6, #255	; 0xff
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x252>
 80009ac:	e74f      	b.n	800084e <__aeabi_fadd+0xf2>
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	4650      	mov	r0, sl
 80009b2:	04d2      	lsls	r2, r2, #19
 80009b4:	4310      	orrs	r0, r2
 80009b6:	4682      	mov	sl, r0
 80009b8:	2201      	movs	r2, #1
 80009ba:	2b1b      	cmp	r3, #27
 80009bc:	dc08      	bgt.n	80009d0 <__aeabi_fadd+0x274>
 80009be:	4652      	mov	r2, sl
 80009c0:	2420      	movs	r4, #32
 80009c2:	4650      	mov	r0, sl
 80009c4:	40da      	lsrs	r2, r3
 80009c6:	1ae3      	subs	r3, r4, r3
 80009c8:	4098      	lsls	r0, r3
 80009ca:	1e43      	subs	r3, r0, #1
 80009cc:	4198      	sbcs	r0, r3
 80009ce:	4302      	orrs	r2, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	0037      	movs	r7, r6
 80009d4:	1aaa      	subs	r2, r5, r2
 80009d6:	e6f5      	b.n	80007c4 <__aeabi_fadd+0x68>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d093      	beq.n	8000904 <__aeabi_fadd+0x1a8>
 80009dc:	3b01      	subs	r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d04f      	beq.n	8000a82 <__aeabi_fadd+0x326>
 80009e2:	2eff      	cmp	r6, #255	; 0xff
 80009e4:	d1c1      	bne.n	800096a <__aeabi_fadd+0x20e>
 80009e6:	4642      	mov	r2, r8
 80009e8:	e733      	b.n	8000852 <__aeabi_fadd+0xf6>
 80009ea:	2fff      	cmp	r7, #255	; 0xff
 80009ec:	d0ac      	beq.n	8000948 <__aeabi_fadd+0x1ec>
 80009ee:	4455      	add	r5, sl
 80009f0:	086a      	lsrs	r2, r5, #1
 80009f2:	e7a4      	b.n	800093e <__aeabi_fadd+0x1e2>
 80009f4:	4653      	mov	r3, sl
 80009f6:	000c      	movs	r4, r1
 80009f8:	1aee      	subs	r6, r5, r3
 80009fa:	e6e8      	b.n	80007ce <__aeabi_fadd+0x72>
 80009fc:	4653      	mov	r3, sl
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d128      	bne.n	8000a54 <__aeabi_fadd+0x2f8>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fadd+0x2ac>
 8000a06:	e722      	b.n	800084e <__aeabi_fadd+0xf2>
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	03db      	lsls	r3, r3, #15
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	2400      	movs	r4, #0
 8000a10:	23ff      	movs	r3, #255	; 0xff
 8000a12:	e702      	b.n	800081a <__aeabi_fadd+0xbe>
 8000a14:	002a      	movs	r2, r5
 8000a16:	4452      	add	r2, sl
 8000a18:	e73b      	b.n	8000892 <__aeabi_fadd+0x136>
 8000a1a:	4653      	mov	r3, sl
 8000a1c:	1b5a      	subs	r2, r3, r5
 8000a1e:	e6d1      	b.n	80007c4 <__aeabi_fadd+0x68>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d100      	bne.n	8000a26 <__aeabi_fadd+0x2ca>
 8000a24:	e714      	b.n	8000850 <__aeabi_fadd+0xf4>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fadd+0x2d0>
 8000a2a:	e712      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	03db      	lsls	r3, r3, #15
 8000a30:	421a      	tst	r2, r3
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fadd+0x2da>
 8000a34:	e70d      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a36:	4641      	mov	r1, r8
 8000a38:	4219      	tst	r1, r3
 8000a3a:	d000      	beq.n	8000a3e <__aeabi_fadd+0x2e2>
 8000a3c:	e709      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	e707      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a42:	000c      	movs	r4, r1
 8000a44:	0037      	movs	r7, r6
 8000a46:	1aaa      	subs	r2, r5, r2
 8000a48:	e6bc      	b.n	80007c4 <__aeabi_fadd+0x68>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d013      	beq.n	8000a76 <__aeabi_fadd+0x31a>
 8000a4e:	000c      	movs	r4, r1
 8000a50:	46c4      	mov	ip, r8
 8000a52:	e6e2      	b.n	800081a <__aeabi_fadd+0xbe>
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x2fe>
 8000a58:	e6fb      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	03db      	lsls	r3, r3, #15
 8000a5e:	421a      	tst	r2, r3
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fadd+0x308>
 8000a62:	e6f6      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a64:	4640      	mov	r0, r8
 8000a66:	4218      	tst	r0, r3
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fadd+0x310>
 8000a6a:	e6f2      	b.n	8000852 <__aeabi_fadd+0xf6>
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	e6ef      	b.n	8000850 <__aeabi_fadd+0xf4>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_fadd+0x31a>
 8000a74:	e763      	b.n	800093e <__aeabi_fadd+0x1e2>
 8000a76:	2200      	movs	r2, #0
 8000a78:	2400      	movs	r4, #0
 8000a7a:	4694      	mov	ip, r2
 8000a7c:	e6cd      	b.n	800081a <__aeabi_fadd+0xbe>
 8000a7e:	46c4      	mov	ip, r8
 8000a80:	e6cb      	b.n	800081a <__aeabi_fadd+0xbe>
 8000a82:	002a      	movs	r2, r5
 8000a84:	0037      	movs	r7, r6
 8000a86:	4452      	add	r2, sl
 8000a88:	e703      	b.n	8000892 <__aeabi_fadd+0x136>
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	7dffffff 	.word	0x7dffffff
 8000a90:	fbffffff 	.word	0xfbffffff

08000a94 <__aeabi_fdiv>:
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	464f      	mov	r7, r9
 8000a98:	4646      	mov	r6, r8
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	b5c0      	push	{r6, r7, lr}
 8000aa0:	0047      	lsls	r7, r0, #1
 8000aa2:	1c0c      	adds	r4, r1, #0
 8000aa4:	0a6d      	lsrs	r5, r5, #9
 8000aa6:	0e3f      	lsrs	r7, r7, #24
 8000aa8:	0fc6      	lsrs	r6, r0, #31
 8000aaa:	2f00      	cmp	r7, #0
 8000aac:	d066      	beq.n	8000b7c <__aeabi_fdiv+0xe8>
 8000aae:	2fff      	cmp	r7, #255	; 0xff
 8000ab0:	d06c      	beq.n	8000b8c <__aeabi_fdiv+0xf8>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	00ea      	lsls	r2, r5, #3
 8000ab6:	2580      	movs	r5, #128	; 0x80
 8000ab8:	4699      	mov	r9, r3
 8000aba:	469a      	mov	sl, r3
 8000abc:	04ed      	lsls	r5, r5, #19
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	3f7f      	subs	r7, #127	; 0x7f
 8000ac2:	0260      	lsls	r0, r4, #9
 8000ac4:	0061      	lsls	r1, r4, #1
 8000ac6:	0a43      	lsrs	r3, r0, #9
 8000ac8:	4698      	mov	r8, r3
 8000aca:	0e09      	lsrs	r1, r1, #24
 8000acc:	0fe4      	lsrs	r4, r4, #31
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d048      	beq.n	8000b64 <__aeabi_fdiv+0xd0>
 8000ad2:	29ff      	cmp	r1, #255	; 0xff
 8000ad4:	d010      	beq.n	8000af8 <__aeabi_fdiv+0x64>
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	00d8      	lsls	r0, r3, #3
 8000ada:	04d2      	lsls	r2, r2, #19
 8000adc:	4302      	orrs	r2, r0
 8000ade:	4690      	mov	r8, r2
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	397f      	subs	r1, #127	; 0x7f
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	0033      	movs	r3, r6
 8000ae8:	1a7f      	subs	r7, r7, r1
 8000aea:	4302      	orrs	r2, r0
 8000aec:	496c      	ldr	r1, [pc, #432]	; (8000ca0 <__aeabi_fdiv+0x20c>)
 8000aee:	0092      	lsls	r2, r2, #2
 8000af0:	588a      	ldr	r2, [r1, r2]
 8000af2:	4063      	eors	r3, r4
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4697      	mov	pc, r2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d16d      	bne.n	8000bd8 <__aeabi_fdiv+0x144>
 8000afc:	2002      	movs	r0, #2
 8000afe:	3fff      	subs	r7, #255	; 0xff
 8000b00:	e033      	b.n	8000b6a <__aeabi_fdiv+0xd6>
 8000b02:	2300      	movs	r3, #0
 8000b04:	4698      	mov	r8, r3
 8000b06:	0026      	movs	r6, r4
 8000b08:	4645      	mov	r5, r8
 8000b0a:	4682      	mov	sl, r0
 8000b0c:	4653      	mov	r3, sl
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x80>
 8000b12:	e07f      	b.n	8000c14 <__aeabi_fdiv+0x180>
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fdiv+0x86>
 8000b18:	e094      	b.n	8000c44 <__aeabi_fdiv+0x1b0>
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d017      	beq.n	8000b4e <__aeabi_fdiv+0xba>
 8000b1e:	0038      	movs	r0, r7
 8000b20:	307f      	adds	r0, #127	; 0x7f
 8000b22:	2800      	cmp	r0, #0
 8000b24:	dd5f      	ble.n	8000be6 <__aeabi_fdiv+0x152>
 8000b26:	076b      	lsls	r3, r5, #29
 8000b28:	d004      	beq.n	8000b34 <__aeabi_fdiv+0xa0>
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	402b      	ands	r3, r5
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d000      	beq.n	8000b34 <__aeabi_fdiv+0xa0>
 8000b32:	3504      	adds	r5, #4
 8000b34:	012b      	lsls	r3, r5, #4
 8000b36:	d503      	bpl.n	8000b40 <__aeabi_fdiv+0xac>
 8000b38:	0038      	movs	r0, r7
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <__aeabi_fdiv+0x210>)
 8000b3c:	3080      	adds	r0, #128	; 0x80
 8000b3e:	401d      	ands	r5, r3
 8000b40:	28fe      	cmp	r0, #254	; 0xfe
 8000b42:	dc67      	bgt.n	8000c14 <__aeabi_fdiv+0x180>
 8000b44:	01ad      	lsls	r5, r5, #6
 8000b46:	0a6d      	lsrs	r5, r5, #9
 8000b48:	b2c0      	uxtb	r0, r0
 8000b4a:	e002      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000b4c:	001e      	movs	r6, r3
 8000b4e:	2000      	movs	r0, #0
 8000b50:	2500      	movs	r5, #0
 8000b52:	05c0      	lsls	r0, r0, #23
 8000b54:	4328      	orrs	r0, r5
 8000b56:	07f6      	lsls	r6, r6, #31
 8000b58:	4330      	orrs	r0, r6
 8000b5a:	bce0      	pop	{r5, r6, r7}
 8000b5c:	46ba      	mov	sl, r7
 8000b5e:	46b1      	mov	r9, r6
 8000b60:	46a8      	mov	r8, r5
 8000b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d12b      	bne.n	8000bc0 <__aeabi_fdiv+0x12c>
 8000b68:	2001      	movs	r0, #1
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	0033      	movs	r3, r6
 8000b6e:	494e      	ldr	r1, [pc, #312]	; (8000ca8 <__aeabi_fdiv+0x214>)
 8000b70:	4302      	orrs	r2, r0
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	588a      	ldr	r2, [r1, r2]
 8000b76:	4063      	eors	r3, r4
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4697      	mov	pc, r2
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d113      	bne.n	8000ba8 <__aeabi_fdiv+0x114>
 8000b80:	2304      	movs	r3, #4
 8000b82:	4699      	mov	r9, r3
 8000b84:	3b03      	subs	r3, #3
 8000b86:	2700      	movs	r7, #0
 8000b88:	469a      	mov	sl, r3
 8000b8a:	e79a      	b.n	8000ac2 <__aeabi_fdiv+0x2e>
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d105      	bne.n	8000b9c <__aeabi_fdiv+0x108>
 8000b90:	2308      	movs	r3, #8
 8000b92:	4699      	mov	r9, r3
 8000b94:	3b06      	subs	r3, #6
 8000b96:	27ff      	movs	r7, #255	; 0xff
 8000b98:	469a      	mov	sl, r3
 8000b9a:	e792      	b.n	8000ac2 <__aeabi_fdiv+0x2e>
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	3b09      	subs	r3, #9
 8000ba2:	27ff      	movs	r7, #255	; 0xff
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	e78c      	b.n	8000ac2 <__aeabi_fdiv+0x2e>
 8000ba8:	0028      	movs	r0, r5
 8000baa:	f002 fb25 	bl	80031f8 <__clzsi2>
 8000bae:	2776      	movs	r7, #118	; 0x76
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409d      	lsls	r5, r3
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	427f      	negs	r7, r7
 8000bb8:	4699      	mov	r9, r3
 8000bba:	469a      	mov	sl, r3
 8000bbc:	1a3f      	subs	r7, r7, r0
 8000bbe:	e780      	b.n	8000ac2 <__aeabi_fdiv+0x2e>
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fb19 	bl	80031f8 <__clzsi2>
 8000bc6:	4642      	mov	r2, r8
 8000bc8:	1f43      	subs	r3, r0, #5
 8000bca:	2176      	movs	r1, #118	; 0x76
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	4249      	negs	r1, r1
 8000bd0:	1a09      	subs	r1, r1, r0
 8000bd2:	4690      	mov	r8, r2
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e785      	b.n	8000ae4 <__aeabi_fdiv+0x50>
 8000bd8:	21ff      	movs	r1, #255	; 0xff
 8000bda:	2003      	movs	r0, #3
 8000bdc:	e782      	b.n	8000ae4 <__aeabi_fdiv+0x50>
 8000bde:	001e      	movs	r6, r3
 8000be0:	20ff      	movs	r0, #255	; 0xff
 8000be2:	2500      	movs	r5, #0
 8000be4:	e7b5      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000be6:	2301      	movs	r3, #1
 8000be8:	1a1b      	subs	r3, r3, r0
 8000bea:	2b1b      	cmp	r3, #27
 8000bec:	dcaf      	bgt.n	8000b4e <__aeabi_fdiv+0xba>
 8000bee:	379e      	adds	r7, #158	; 0x9e
 8000bf0:	0029      	movs	r1, r5
 8000bf2:	40bd      	lsls	r5, r7
 8000bf4:	40d9      	lsrs	r1, r3
 8000bf6:	1e6a      	subs	r2, r5, #1
 8000bf8:	4195      	sbcs	r5, r2
 8000bfa:	430d      	orrs	r5, r1
 8000bfc:	076b      	lsls	r3, r5, #29
 8000bfe:	d004      	beq.n	8000c0a <__aeabi_fdiv+0x176>
 8000c00:	230f      	movs	r3, #15
 8000c02:	402b      	ands	r3, r5
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d000      	beq.n	8000c0a <__aeabi_fdiv+0x176>
 8000c08:	3504      	adds	r5, #4
 8000c0a:	016b      	lsls	r3, r5, #5
 8000c0c:	d544      	bpl.n	8000c98 <__aeabi_fdiv+0x204>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2500      	movs	r5, #0
 8000c12:	e79e      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000c14:	20ff      	movs	r0, #255	; 0xff
 8000c16:	2500      	movs	r5, #0
 8000c18:	e79b      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000c1a:	2580      	movs	r5, #128	; 0x80
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	20ff      	movs	r0, #255	; 0xff
 8000c20:	03ed      	lsls	r5, r5, #15
 8000c22:	e796      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000c24:	2300      	movs	r3, #0
 8000c26:	4698      	mov	r8, r3
 8000c28:	2080      	movs	r0, #128	; 0x80
 8000c2a:	03c0      	lsls	r0, r0, #15
 8000c2c:	4205      	tst	r5, r0
 8000c2e:	d009      	beq.n	8000c44 <__aeabi_fdiv+0x1b0>
 8000c30:	4643      	mov	r3, r8
 8000c32:	4203      	tst	r3, r0
 8000c34:	d106      	bne.n	8000c44 <__aeabi_fdiv+0x1b0>
 8000c36:	4645      	mov	r5, r8
 8000c38:	4305      	orrs	r5, r0
 8000c3a:	026d      	lsls	r5, r5, #9
 8000c3c:	0026      	movs	r6, r4
 8000c3e:	20ff      	movs	r0, #255	; 0xff
 8000c40:	0a6d      	lsrs	r5, r5, #9
 8000c42:	e786      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000c44:	2080      	movs	r0, #128	; 0x80
 8000c46:	03c0      	lsls	r0, r0, #15
 8000c48:	4305      	orrs	r5, r0
 8000c4a:	026d      	lsls	r5, r5, #9
 8000c4c:	20ff      	movs	r0, #255	; 0xff
 8000c4e:	0a6d      	lsrs	r5, r5, #9
 8000c50:	e77f      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000c52:	4641      	mov	r1, r8
 8000c54:	016a      	lsls	r2, r5, #5
 8000c56:	0148      	lsls	r0, r1, #5
 8000c58:	4282      	cmp	r2, r0
 8000c5a:	d219      	bcs.n	8000c90 <__aeabi_fdiv+0x1fc>
 8000c5c:	211b      	movs	r1, #27
 8000c5e:	2500      	movs	r5, #0
 8000c60:	3f01      	subs	r7, #1
 8000c62:	2601      	movs	r6, #1
 8000c64:	0014      	movs	r4, r2
 8000c66:	006d      	lsls	r5, r5, #1
 8000c68:	0052      	lsls	r2, r2, #1
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	db01      	blt.n	8000c72 <__aeabi_fdiv+0x1de>
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	d801      	bhi.n	8000c76 <__aeabi_fdiv+0x1e2>
 8000c72:	1a12      	subs	r2, r2, r0
 8000c74:	4335      	orrs	r5, r6
 8000c76:	3901      	subs	r1, #1
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	d1f3      	bne.n	8000c64 <__aeabi_fdiv+0x1d0>
 8000c7c:	1e50      	subs	r0, r2, #1
 8000c7e:	4182      	sbcs	r2, r0
 8000c80:	0038      	movs	r0, r7
 8000c82:	307f      	adds	r0, #127	; 0x7f
 8000c84:	001e      	movs	r6, r3
 8000c86:	4315      	orrs	r5, r2
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_fdiv+0x1fa>
 8000c8c:	e74b      	b.n	8000b26 <__aeabi_fdiv+0x92>
 8000c8e:	e7aa      	b.n	8000be6 <__aeabi_fdiv+0x152>
 8000c90:	211a      	movs	r1, #26
 8000c92:	2501      	movs	r5, #1
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	e7e4      	b.n	8000c62 <__aeabi_fdiv+0x1ce>
 8000c98:	01ad      	lsls	r5, r5, #6
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	0a6d      	lsrs	r5, r5, #9
 8000c9e:	e758      	b.n	8000b52 <__aeabi_fdiv+0xbe>
 8000ca0:	0800d4cc 	.word	0x0800d4cc
 8000ca4:	f7ffffff 	.word	0xf7ffffff
 8000ca8:	0800d50c 	.word	0x0800d50c

08000cac <__aeabi_fmul>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	4657      	mov	r7, sl
 8000cb0:	464e      	mov	r6, r9
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	46de      	mov	lr, fp
 8000cb6:	0244      	lsls	r4, r0, #9
 8000cb8:	b5e0      	push	{r5, r6, r7, lr}
 8000cba:	0045      	lsls	r5, r0, #1
 8000cbc:	1c0f      	adds	r7, r1, #0
 8000cbe:	0a64      	lsrs	r4, r4, #9
 8000cc0:	0e2d      	lsrs	r5, r5, #24
 8000cc2:	0fc6      	lsrs	r6, r0, #31
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d047      	beq.n	8000d58 <__aeabi_fmul+0xac>
 8000cc8:	2dff      	cmp	r5, #255	; 0xff
 8000cca:	d04d      	beq.n	8000d68 <__aeabi_fmul+0xbc>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2080      	movs	r0, #128	; 0x80
 8000cd0:	469a      	mov	sl, r3
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	00e4      	lsls	r4, r4, #3
 8000cd6:	04c0      	lsls	r0, r0, #19
 8000cd8:	4304      	orrs	r4, r0
 8000cda:	3d7f      	subs	r5, #127	; 0x7f
 8000cdc:	0278      	lsls	r0, r7, #9
 8000cde:	0a43      	lsrs	r3, r0, #9
 8000ce0:	4699      	mov	r9, r3
 8000ce2:	007a      	lsls	r2, r7, #1
 8000ce4:	0ffb      	lsrs	r3, r7, #31
 8000ce6:	4698      	mov	r8, r3
 8000ce8:	0e12      	lsrs	r2, r2, #24
 8000cea:	464b      	mov	r3, r9
 8000cec:	d044      	beq.n	8000d78 <__aeabi_fmul+0xcc>
 8000cee:	2aff      	cmp	r2, #255	; 0xff
 8000cf0:	d011      	beq.n	8000d16 <__aeabi_fmul+0x6a>
 8000cf2:	00d8      	lsls	r0, r3, #3
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	04db      	lsls	r3, r3, #19
 8000cf8:	4303      	orrs	r3, r0
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	18ad      	adds	r5, r5, r2
 8000d02:	4647      	mov	r7, r8
 8000d04:	4653      	mov	r3, sl
 8000d06:	4077      	eors	r7, r6
 8000d08:	1c69      	adds	r1, r5, #1
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d83f      	bhi.n	8000d8e <__aeabi_fmul+0xe2>
 8000d0e:	4a72      	ldr	r2, [pc, #456]	; (8000ed8 <__aeabi_fmul+0x22c>)
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	58d3      	ldr	r3, [r2, r3]
 8000d14:	469f      	mov	pc, r3
 8000d16:	35ff      	adds	r5, #255	; 0xff
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fmul+0x72>
 8000d1c:	e079      	b.n	8000e12 <__aeabi_fmul+0x166>
 8000d1e:	4652      	mov	r2, sl
 8000d20:	2302      	movs	r3, #2
 8000d22:	431a      	orrs	r2, r3
 8000d24:	4692      	mov	sl, r2
 8000d26:	2002      	movs	r0, #2
 8000d28:	e7eb      	b.n	8000d02 <__aeabi_fmul+0x56>
 8000d2a:	4647      	mov	r7, r8
 8000d2c:	464c      	mov	r4, r9
 8000d2e:	4683      	mov	fp, r0
 8000d30:	465b      	mov	r3, fp
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d028      	beq.n	8000d88 <__aeabi_fmul+0xdc>
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fmul+0x90>
 8000d3a:	e0c6      	b.n	8000eca <__aeabi_fmul+0x21e>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d14f      	bne.n	8000de0 <__aeabi_fmul+0x134>
 8000d40:	2000      	movs	r0, #0
 8000d42:	2400      	movs	r4, #0
 8000d44:	05c0      	lsls	r0, r0, #23
 8000d46:	07ff      	lsls	r7, r7, #31
 8000d48:	4320      	orrs	r0, r4
 8000d4a:	4338      	orrs	r0, r7
 8000d4c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d4e:	46bb      	mov	fp, r7
 8000d50:	46b2      	mov	sl, r6
 8000d52:	46a9      	mov	r9, r5
 8000d54:	46a0      	mov	r8, r4
 8000d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d171      	bne.n	8000e40 <__aeabi_fmul+0x194>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	469a      	mov	sl, r3
 8000d60:	3b03      	subs	r3, #3
 8000d62:	2500      	movs	r5, #0
 8000d64:	469b      	mov	fp, r3
 8000d66:	e7b9      	b.n	8000cdc <__aeabi_fmul+0x30>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d163      	bne.n	8000e34 <__aeabi_fmul+0x188>
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	469a      	mov	sl, r3
 8000d70:	3b06      	subs	r3, #6
 8000d72:	25ff      	movs	r5, #255	; 0xff
 8000d74:	469b      	mov	fp, r3
 8000d76:	e7b1      	b.n	8000cdc <__aeabi_fmul+0x30>
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d150      	bne.n	8000e1e <__aeabi_fmul+0x172>
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	3301      	adds	r3, #1
 8000d80:	431a      	orrs	r2, r3
 8000d82:	4692      	mov	sl, r2
 8000d84:	2001      	movs	r0, #1
 8000d86:	e7bc      	b.n	8000d02 <__aeabi_fmul+0x56>
 8000d88:	20ff      	movs	r0, #255	; 0xff
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	e7da      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	0c26      	lsrs	r6, r4, #16
 8000d92:	0424      	lsls	r4, r4, #16
 8000d94:	0c22      	lsrs	r2, r4, #16
 8000d96:	0404      	lsls	r4, r0, #16
 8000d98:	0c24      	lsrs	r4, r4, #16
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	0020      	movs	r0, r4
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	4350      	muls	r0, r2
 8000da2:	4374      	muls	r4, r6
 8000da4:	435a      	muls	r2, r3
 8000da6:	435e      	muls	r6, r3
 8000da8:	1912      	adds	r2, r2, r4
 8000daa:	0c03      	lsrs	r3, r0, #16
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	429c      	cmp	r4, r3
 8000db0:	d903      	bls.n	8000dba <__aeabi_fmul+0x10e>
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	0252      	lsls	r2, r2, #9
 8000db6:	4694      	mov	ip, r2
 8000db8:	4466      	add	r6, ip
 8000dba:	0400      	lsls	r0, r0, #16
 8000dbc:	041a      	lsls	r2, r3, #16
 8000dbe:	0c00      	lsrs	r0, r0, #16
 8000dc0:	1812      	adds	r2, r2, r0
 8000dc2:	0194      	lsls	r4, r2, #6
 8000dc4:	1e60      	subs	r0, r4, #1
 8000dc6:	4184      	sbcs	r4, r0
 8000dc8:	0c1b      	lsrs	r3, r3, #16
 8000dca:	0e92      	lsrs	r2, r2, #26
 8000dcc:	199b      	adds	r3, r3, r6
 8000dce:	4314      	orrs	r4, r2
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	431c      	orrs	r4, r3
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	d572      	bpl.n	8000ebe <__aeabi_fmul+0x212>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	0863      	lsrs	r3, r4, #1
 8000ddc:	4004      	ands	r4, r0
 8000dde:	431c      	orrs	r4, r3
 8000de0:	0008      	movs	r0, r1
 8000de2:	307f      	adds	r0, #127	; 0x7f
 8000de4:	2800      	cmp	r0, #0
 8000de6:	dd3c      	ble.n	8000e62 <__aeabi_fmul+0x1b6>
 8000de8:	0763      	lsls	r3, r4, #29
 8000dea:	d004      	beq.n	8000df6 <__aeabi_fmul+0x14a>
 8000dec:	230f      	movs	r3, #15
 8000dee:	4023      	ands	r3, r4
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d000      	beq.n	8000df6 <__aeabi_fmul+0x14a>
 8000df4:	3404      	adds	r4, #4
 8000df6:	0123      	lsls	r3, r4, #4
 8000df8:	d503      	bpl.n	8000e02 <__aeabi_fmul+0x156>
 8000dfa:	3180      	adds	r1, #128	; 0x80
 8000dfc:	0008      	movs	r0, r1
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <__aeabi_fmul+0x230>)
 8000e00:	401c      	ands	r4, r3
 8000e02:	28fe      	cmp	r0, #254	; 0xfe
 8000e04:	dcc0      	bgt.n	8000d88 <__aeabi_fmul+0xdc>
 8000e06:	01a4      	lsls	r4, r4, #6
 8000e08:	0a64      	lsrs	r4, r4, #9
 8000e0a:	b2c0      	uxtb	r0, r0
 8000e0c:	e79a      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000e0e:	0037      	movs	r7, r6
 8000e10:	e78e      	b.n	8000d30 <__aeabi_fmul+0x84>
 8000e12:	4652      	mov	r2, sl
 8000e14:	2303      	movs	r3, #3
 8000e16:	431a      	orrs	r2, r3
 8000e18:	4692      	mov	sl, r2
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	e771      	b.n	8000d02 <__aeabi_fmul+0x56>
 8000e1e:	4648      	mov	r0, r9
 8000e20:	f002 f9ea 	bl	80031f8 <__clzsi2>
 8000e24:	464a      	mov	r2, r9
 8000e26:	1f43      	subs	r3, r0, #5
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	1a2d      	subs	r5, r5, r0
 8000e2c:	4691      	mov	r9, r2
 8000e2e:	2000      	movs	r0, #0
 8000e30:	3d76      	subs	r5, #118	; 0x76
 8000e32:	e766      	b.n	8000d02 <__aeabi_fmul+0x56>
 8000e34:	230c      	movs	r3, #12
 8000e36:	469a      	mov	sl, r3
 8000e38:	3b09      	subs	r3, #9
 8000e3a:	25ff      	movs	r5, #255	; 0xff
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	e74d      	b.n	8000cdc <__aeabi_fmul+0x30>
 8000e40:	0020      	movs	r0, r4
 8000e42:	f002 f9d9 	bl	80031f8 <__clzsi2>
 8000e46:	2576      	movs	r5, #118	; 0x76
 8000e48:	1f43      	subs	r3, r0, #5
 8000e4a:	409c      	lsls	r4, r3
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	426d      	negs	r5, r5
 8000e50:	469a      	mov	sl, r3
 8000e52:	469b      	mov	fp, r3
 8000e54:	1a2d      	subs	r5, r5, r0
 8000e56:	e741      	b.n	8000cdc <__aeabi_fmul+0x30>
 8000e58:	2480      	movs	r4, #128	; 0x80
 8000e5a:	2700      	movs	r7, #0
 8000e5c:	20ff      	movs	r0, #255	; 0xff
 8000e5e:	03e4      	lsls	r4, r4, #15
 8000e60:	e770      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000e62:	2301      	movs	r3, #1
 8000e64:	1a1b      	subs	r3, r3, r0
 8000e66:	2b1b      	cmp	r3, #27
 8000e68:	dd00      	ble.n	8000e6c <__aeabi_fmul+0x1c0>
 8000e6a:	e769      	b.n	8000d40 <__aeabi_fmul+0x94>
 8000e6c:	319e      	adds	r1, #158	; 0x9e
 8000e6e:	0020      	movs	r0, r4
 8000e70:	408c      	lsls	r4, r1
 8000e72:	40d8      	lsrs	r0, r3
 8000e74:	1e63      	subs	r3, r4, #1
 8000e76:	419c      	sbcs	r4, r3
 8000e78:	4304      	orrs	r4, r0
 8000e7a:	0763      	lsls	r3, r4, #29
 8000e7c:	d004      	beq.n	8000e88 <__aeabi_fmul+0x1dc>
 8000e7e:	230f      	movs	r3, #15
 8000e80:	4023      	ands	r3, r4
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d000      	beq.n	8000e88 <__aeabi_fmul+0x1dc>
 8000e86:	3404      	adds	r4, #4
 8000e88:	0163      	lsls	r3, r4, #5
 8000e8a:	d51a      	bpl.n	8000ec2 <__aeabi_fmul+0x216>
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	2400      	movs	r4, #0
 8000e90:	e758      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000e92:	2080      	movs	r0, #128	; 0x80
 8000e94:	03c0      	lsls	r0, r0, #15
 8000e96:	4204      	tst	r4, r0
 8000e98:	d009      	beq.n	8000eae <__aeabi_fmul+0x202>
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	4203      	tst	r3, r0
 8000e9e:	d106      	bne.n	8000eae <__aeabi_fmul+0x202>
 8000ea0:	464c      	mov	r4, r9
 8000ea2:	4304      	orrs	r4, r0
 8000ea4:	0264      	lsls	r4, r4, #9
 8000ea6:	4647      	mov	r7, r8
 8000ea8:	20ff      	movs	r0, #255	; 0xff
 8000eaa:	0a64      	lsrs	r4, r4, #9
 8000eac:	e74a      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000eae:	2080      	movs	r0, #128	; 0x80
 8000eb0:	03c0      	lsls	r0, r0, #15
 8000eb2:	4304      	orrs	r4, r0
 8000eb4:	0264      	lsls	r4, r4, #9
 8000eb6:	0037      	movs	r7, r6
 8000eb8:	20ff      	movs	r0, #255	; 0xff
 8000eba:	0a64      	lsrs	r4, r4, #9
 8000ebc:	e742      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000ebe:	0029      	movs	r1, r5
 8000ec0:	e78e      	b.n	8000de0 <__aeabi_fmul+0x134>
 8000ec2:	01a4      	lsls	r4, r4, #6
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	0a64      	lsrs	r4, r4, #9
 8000ec8:	e73c      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000eca:	2080      	movs	r0, #128	; 0x80
 8000ecc:	03c0      	lsls	r0, r0, #15
 8000ece:	4304      	orrs	r4, r0
 8000ed0:	0264      	lsls	r4, r4, #9
 8000ed2:	20ff      	movs	r0, #255	; 0xff
 8000ed4:	0a64      	lsrs	r4, r4, #9
 8000ed6:	e735      	b.n	8000d44 <__aeabi_fmul+0x98>
 8000ed8:	0800d54c 	.word	0x0800d54c
 8000edc:	f7ffffff 	.word	0xf7ffffff

08000ee0 <__aeabi_fsub>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	4646      	mov	r6, r8
 8000ee4:	46d6      	mov	lr, sl
 8000ee6:	464f      	mov	r7, r9
 8000ee8:	0243      	lsls	r3, r0, #9
 8000eea:	0a5b      	lsrs	r3, r3, #9
 8000eec:	00da      	lsls	r2, r3, #3
 8000eee:	4694      	mov	ip, r2
 8000ef0:	024a      	lsls	r2, r1, #9
 8000ef2:	b5c0      	push	{r6, r7, lr}
 8000ef4:	0044      	lsls	r4, r0, #1
 8000ef6:	0a56      	lsrs	r6, r2, #9
 8000ef8:	1c05      	adds	r5, r0, #0
 8000efa:	46b0      	mov	r8, r6
 8000efc:	0e24      	lsrs	r4, r4, #24
 8000efe:	004e      	lsls	r6, r1, #1
 8000f00:	0992      	lsrs	r2, r2, #6
 8000f02:	001f      	movs	r7, r3
 8000f04:	0020      	movs	r0, r4
 8000f06:	4692      	mov	sl, r2
 8000f08:	0fed      	lsrs	r5, r5, #31
 8000f0a:	0e36      	lsrs	r6, r6, #24
 8000f0c:	0fc9      	lsrs	r1, r1, #31
 8000f0e:	2eff      	cmp	r6, #255	; 0xff
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x34>
 8000f12:	e07f      	b.n	8001014 <__aeabi_fsub+0x134>
 8000f14:	2201      	movs	r2, #1
 8000f16:	4051      	eors	r1, r2
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d051      	beq.n	8000fc0 <__aeabi_fsub+0xe0>
 8000f1c:	1ba2      	subs	r2, r4, r6
 8000f1e:	4691      	mov	r9, r2
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	dc00      	bgt.n	8000f26 <__aeabi_fsub+0x46>
 8000f24:	e07e      	b.n	8001024 <__aeabi_fsub+0x144>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x4c>
 8000f2a:	e099      	b.n	8001060 <__aeabi_fsub+0x180>
 8000f2c:	2cff      	cmp	r4, #255	; 0xff
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x52>
 8000f30:	e08c      	b.n	800104c <__aeabi_fsub+0x16c>
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	4652      	mov	r2, sl
 8000f36:	04db      	lsls	r3, r3, #19
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	4692      	mov	sl, r2
 8000f3c:	464a      	mov	r2, r9
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2a1b      	cmp	r2, #27
 8000f42:	dc08      	bgt.n	8000f56 <__aeabi_fsub+0x76>
 8000f44:	4653      	mov	r3, sl
 8000f46:	2120      	movs	r1, #32
 8000f48:	40d3      	lsrs	r3, r2
 8000f4a:	1a89      	subs	r1, r1, r2
 8000f4c:	4652      	mov	r2, sl
 8000f4e:	408a      	lsls	r2, r1
 8000f50:	1e51      	subs	r1, r2, #1
 8000f52:	418a      	sbcs	r2, r1
 8000f54:	4313      	orrs	r3, r2
 8000f56:	4662      	mov	r2, ip
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x80>
 8000f5e:	e0f3      	b.n	8001148 <__aeabi_fsub+0x268>
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	099e      	lsrs	r6, r3, #6
 8000f64:	0030      	movs	r0, r6
 8000f66:	f002 f947 	bl	80031f8 <__clzsi2>
 8000f6a:	3805      	subs	r0, #5
 8000f6c:	4086      	lsls	r6, r0
 8000f6e:	4284      	cmp	r4, r0
 8000f70:	dd00      	ble.n	8000f74 <__aeabi_fsub+0x94>
 8000f72:	e0f7      	b.n	8001164 <__aeabi_fsub+0x284>
 8000f74:	0032      	movs	r2, r6
 8000f76:	1b04      	subs	r4, r0, r4
 8000f78:	2020      	movs	r0, #32
 8000f7a:	3401      	adds	r4, #1
 8000f7c:	40e2      	lsrs	r2, r4
 8000f7e:	1b04      	subs	r4, r0, r4
 8000f80:	40a6      	lsls	r6, r4
 8000f82:	0033      	movs	r3, r6
 8000f84:	1e5e      	subs	r6, r3, #1
 8000f86:	41b3      	sbcs	r3, r6
 8000f88:	2400      	movs	r4, #0
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	075a      	lsls	r2, r3, #29
 8000f8e:	d004      	beq.n	8000f9a <__aeabi_fsub+0xba>
 8000f90:	220f      	movs	r2, #15
 8000f92:	401a      	ands	r2, r3
 8000f94:	2a04      	cmp	r2, #4
 8000f96:	d000      	beq.n	8000f9a <__aeabi_fsub+0xba>
 8000f98:	3304      	adds	r3, #4
 8000f9a:	015a      	lsls	r2, r3, #5
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_fsub+0xc0>
 8000f9e:	e0d6      	b.n	800114e <__aeabi_fsub+0x26e>
 8000fa0:	1c62      	adds	r2, r4, #1
 8000fa2:	2cfe      	cmp	r4, #254	; 0xfe
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0xc8>
 8000fa6:	e0da      	b.n	800115e <__aeabi_fsub+0x27e>
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	0a5f      	lsrs	r7, r3, #9
 8000fac:	b2d0      	uxtb	r0, r2
 8000fae:	05c0      	lsls	r0, r0, #23
 8000fb0:	4338      	orrs	r0, r7
 8000fb2:	07ed      	lsls	r5, r5, #31
 8000fb4:	4328      	orrs	r0, r5
 8000fb6:	bce0      	pop	{r5, r6, r7}
 8000fb8:	46ba      	mov	sl, r7
 8000fba:	46b1      	mov	r9, r6
 8000fbc:	46a8      	mov	r8, r5
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc0:	1ba2      	subs	r2, r4, r6
 8000fc2:	4691      	mov	r9, r2
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	dd63      	ble.n	8001090 <__aeabi_fsub+0x1b0>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0xee>
 8000fcc:	e099      	b.n	8001102 <__aeabi_fsub+0x222>
 8000fce:	2cff      	cmp	r4, #255	; 0xff
 8000fd0:	d03c      	beq.n	800104c <__aeabi_fsub+0x16c>
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	4652      	mov	r2, sl
 8000fd6:	04db      	lsls	r3, r3, #19
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	4692      	mov	sl, r2
 8000fdc:	464a      	mov	r2, r9
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2a1b      	cmp	r2, #27
 8000fe2:	dc08      	bgt.n	8000ff6 <__aeabi_fsub+0x116>
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	40d3      	lsrs	r3, r2
 8000fea:	1a89      	subs	r1, r1, r2
 8000fec:	4652      	mov	r2, sl
 8000fee:	408a      	lsls	r2, r1
 8000ff0:	1e51      	subs	r1, r2, #1
 8000ff2:	418a      	sbcs	r2, r1
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	4463      	add	r3, ip
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	d400      	bmi.n	8000ffe <__aeabi_fsub+0x11e>
 8000ffc:	e0a4      	b.n	8001148 <__aeabi_fsub+0x268>
 8000ffe:	3401      	adds	r4, #1
 8001000:	2cff      	cmp	r4, #255	; 0xff
 8001002:	d100      	bne.n	8001006 <__aeabi_fsub+0x126>
 8001004:	e0ab      	b.n	800115e <__aeabi_fsub+0x27e>
 8001006:	2201      	movs	r2, #1
 8001008:	4997      	ldr	r1, [pc, #604]	; (8001268 <__aeabi_fsub+0x388>)
 800100a:	401a      	ands	r2, r3
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	400b      	ands	r3, r1
 8001010:	4313      	orrs	r3, r2
 8001012:	e7bb      	b.n	8000f8c <__aeabi_fsub+0xac>
 8001014:	2a00      	cmp	r2, #0
 8001016:	d032      	beq.n	800107e <__aeabi_fsub+0x19e>
 8001018:	428d      	cmp	r5, r1
 800101a:	d035      	beq.n	8001088 <__aeabi_fsub+0x1a8>
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	4252      	negs	r2, r2
 8001020:	4691      	mov	r9, r2
 8001022:	44a1      	add	r9, r4
 8001024:	464a      	mov	r2, r9
 8001026:	2a00      	cmp	r2, #0
 8001028:	d051      	beq.n	80010ce <__aeabi_fsub+0x1ee>
 800102a:	1b30      	subs	r0, r6, r4
 800102c:	2c00      	cmp	r4, #0
 800102e:	d000      	beq.n	8001032 <__aeabi_fsub+0x152>
 8001030:	e09c      	b.n	800116c <__aeabi_fsub+0x28c>
 8001032:	4663      	mov	r3, ip
 8001034:	2b00      	cmp	r3, #0
 8001036:	d100      	bne.n	800103a <__aeabi_fsub+0x15a>
 8001038:	e0df      	b.n	80011fa <__aeabi_fsub+0x31a>
 800103a:	3801      	subs	r0, #1
 800103c:	2800      	cmp	r0, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_fsub+0x162>
 8001040:	e0f7      	b.n	8001232 <__aeabi_fsub+0x352>
 8001042:	2eff      	cmp	r6, #255	; 0xff
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0x168>
 8001046:	e099      	b.n	800117c <__aeabi_fsub+0x29c>
 8001048:	000d      	movs	r5, r1
 800104a:	4643      	mov	r3, r8
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x172>
 8001050:	e085      	b.n	800115e <__aeabi_fsub+0x27e>
 8001052:	2780      	movs	r7, #128	; 0x80
 8001054:	03ff      	lsls	r7, r7, #15
 8001056:	431f      	orrs	r7, r3
 8001058:	027f      	lsls	r7, r7, #9
 800105a:	20ff      	movs	r0, #255	; 0xff
 800105c:	0a7f      	lsrs	r7, r7, #9
 800105e:	e7a6      	b.n	8000fae <__aeabi_fsub+0xce>
 8001060:	4652      	mov	r2, sl
 8001062:	2a00      	cmp	r2, #0
 8001064:	d074      	beq.n	8001150 <__aeabi_fsub+0x270>
 8001066:	2201      	movs	r2, #1
 8001068:	4252      	negs	r2, r2
 800106a:	4690      	mov	r8, r2
 800106c:	44c1      	add	r9, r8
 800106e:	464a      	mov	r2, r9
 8001070:	2a00      	cmp	r2, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x196>
 8001074:	e0c8      	b.n	8001208 <__aeabi_fsub+0x328>
 8001076:	2cff      	cmp	r4, #255	; 0xff
 8001078:	d000      	beq.n	800107c <__aeabi_fsub+0x19c>
 800107a:	e75f      	b.n	8000f3c <__aeabi_fsub+0x5c>
 800107c:	e7e6      	b.n	800104c <__aeabi_fsub+0x16c>
 800107e:	2201      	movs	r2, #1
 8001080:	4051      	eors	r1, r2
 8001082:	42a9      	cmp	r1, r5
 8001084:	d000      	beq.n	8001088 <__aeabi_fsub+0x1a8>
 8001086:	e749      	b.n	8000f1c <__aeabi_fsub+0x3c>
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	4252      	negs	r2, r2
 800108c:	4691      	mov	r9, r2
 800108e:	44a1      	add	r9, r4
 8001090:	464a      	mov	r2, r9
 8001092:	2a00      	cmp	r2, #0
 8001094:	d043      	beq.n	800111e <__aeabi_fsub+0x23e>
 8001096:	1b31      	subs	r1, r6, r4
 8001098:	2c00      	cmp	r4, #0
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x1be>
 800109c:	e08c      	b.n	80011b8 <__aeabi_fsub+0x2d8>
 800109e:	2eff      	cmp	r6, #255	; 0xff
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x1c4>
 80010a2:	e092      	b.n	80011ca <__aeabi_fsub+0x2ea>
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	4662      	mov	r2, ip
 80010a8:	04db      	lsls	r3, r3, #19
 80010aa:	431a      	orrs	r2, r3
 80010ac:	4694      	mov	ip, r2
 80010ae:	2301      	movs	r3, #1
 80010b0:	291b      	cmp	r1, #27
 80010b2:	dc09      	bgt.n	80010c8 <__aeabi_fsub+0x1e8>
 80010b4:	2020      	movs	r0, #32
 80010b6:	4663      	mov	r3, ip
 80010b8:	4662      	mov	r2, ip
 80010ba:	40cb      	lsrs	r3, r1
 80010bc:	1a41      	subs	r1, r0, r1
 80010be:	408a      	lsls	r2, r1
 80010c0:	0011      	movs	r1, r2
 80010c2:	1e48      	subs	r0, r1, #1
 80010c4:	4181      	sbcs	r1, r0
 80010c6:	430b      	orrs	r3, r1
 80010c8:	0034      	movs	r4, r6
 80010ca:	4453      	add	r3, sl
 80010cc:	e794      	b.n	8000ff8 <__aeabi_fsub+0x118>
 80010ce:	22fe      	movs	r2, #254	; 0xfe
 80010d0:	1c66      	adds	r6, r4, #1
 80010d2:	4232      	tst	r2, r6
 80010d4:	d164      	bne.n	80011a0 <__aeabi_fsub+0x2c0>
 80010d6:	2c00      	cmp	r4, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x1fc>
 80010da:	e082      	b.n	80011e2 <__aeabi_fsub+0x302>
 80010dc:	4663      	mov	r3, ip
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x204>
 80010e2:	e0ab      	b.n	800123c <__aeabi_fsub+0x35c>
 80010e4:	4653      	mov	r3, sl
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x20c>
 80010ea:	e760      	b.n	8000fae <__aeabi_fsub+0xce>
 80010ec:	4663      	mov	r3, ip
 80010ee:	4652      	mov	r2, sl
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	015a      	lsls	r2, r3, #5
 80010f4:	d400      	bmi.n	80010f8 <__aeabi_fsub+0x218>
 80010f6:	e0aa      	b.n	800124e <__aeabi_fsub+0x36e>
 80010f8:	4663      	mov	r3, ip
 80010fa:	4652      	mov	r2, sl
 80010fc:	000d      	movs	r5, r1
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	e744      	b.n	8000f8c <__aeabi_fsub+0xac>
 8001102:	4652      	mov	r2, sl
 8001104:	2a00      	cmp	r2, #0
 8001106:	d023      	beq.n	8001150 <__aeabi_fsub+0x270>
 8001108:	2201      	movs	r2, #1
 800110a:	4252      	negs	r2, r2
 800110c:	4690      	mov	r8, r2
 800110e:	44c1      	add	r9, r8
 8001110:	464a      	mov	r2, r9
 8001112:	2a00      	cmp	r2, #0
 8001114:	d075      	beq.n	8001202 <__aeabi_fsub+0x322>
 8001116:	2cff      	cmp	r4, #255	; 0xff
 8001118:	d000      	beq.n	800111c <__aeabi_fsub+0x23c>
 800111a:	e75f      	b.n	8000fdc <__aeabi_fsub+0xfc>
 800111c:	e796      	b.n	800104c <__aeabi_fsub+0x16c>
 800111e:	26fe      	movs	r6, #254	; 0xfe
 8001120:	3401      	adds	r4, #1
 8001122:	4226      	tst	r6, r4
 8001124:	d153      	bne.n	80011ce <__aeabi_fsub+0x2ee>
 8001126:	2800      	cmp	r0, #0
 8001128:	d172      	bne.n	8001210 <__aeabi_fsub+0x330>
 800112a:	4663      	mov	r3, ip
 800112c:	2b00      	cmp	r3, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x252>
 8001130:	e093      	b.n	800125a <__aeabi_fsub+0x37a>
 8001132:	4653      	mov	r3, sl
 8001134:	2b00      	cmp	r3, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x25a>
 8001138:	e739      	b.n	8000fae <__aeabi_fsub+0xce>
 800113a:	4463      	add	r3, ip
 800113c:	2400      	movs	r4, #0
 800113e:	015a      	lsls	r2, r3, #5
 8001140:	d502      	bpl.n	8001148 <__aeabi_fsub+0x268>
 8001142:	4a4a      	ldr	r2, [pc, #296]	; (800126c <__aeabi_fsub+0x38c>)
 8001144:	3401      	adds	r4, #1
 8001146:	4013      	ands	r3, r2
 8001148:	075a      	lsls	r2, r3, #29
 800114a:	d000      	beq.n	800114e <__aeabi_fsub+0x26e>
 800114c:	e720      	b.n	8000f90 <__aeabi_fsub+0xb0>
 800114e:	08db      	lsrs	r3, r3, #3
 8001150:	2cff      	cmp	r4, #255	; 0xff
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x276>
 8001154:	e77a      	b.n	800104c <__aeabi_fsub+0x16c>
 8001156:	025b      	lsls	r3, r3, #9
 8001158:	0a5f      	lsrs	r7, r3, #9
 800115a:	b2e0      	uxtb	r0, r4
 800115c:	e727      	b.n	8000fae <__aeabi_fsub+0xce>
 800115e:	20ff      	movs	r0, #255	; 0xff
 8001160:	2700      	movs	r7, #0
 8001162:	e724      	b.n	8000fae <__aeabi_fsub+0xce>
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <__aeabi_fsub+0x38c>)
 8001166:	1a24      	subs	r4, r4, r0
 8001168:	4033      	ands	r3, r6
 800116a:	e70f      	b.n	8000f8c <__aeabi_fsub+0xac>
 800116c:	2eff      	cmp	r6, #255	; 0xff
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x292>
 8001170:	e76a      	b.n	8001048 <__aeabi_fsub+0x168>
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	4662      	mov	r2, ip
 8001176:	04db      	lsls	r3, r3, #19
 8001178:	431a      	orrs	r2, r3
 800117a:	4694      	mov	ip, r2
 800117c:	2301      	movs	r3, #1
 800117e:	281b      	cmp	r0, #27
 8001180:	dc09      	bgt.n	8001196 <__aeabi_fsub+0x2b6>
 8001182:	2420      	movs	r4, #32
 8001184:	4663      	mov	r3, ip
 8001186:	4662      	mov	r2, ip
 8001188:	40c3      	lsrs	r3, r0
 800118a:	1a20      	subs	r0, r4, r0
 800118c:	4082      	lsls	r2, r0
 800118e:	0010      	movs	r0, r2
 8001190:	1e44      	subs	r4, r0, #1
 8001192:	41a0      	sbcs	r0, r4
 8001194:	4303      	orrs	r3, r0
 8001196:	4652      	mov	r2, sl
 8001198:	000d      	movs	r5, r1
 800119a:	0034      	movs	r4, r6
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	e6dc      	b.n	8000f5a <__aeabi_fsub+0x7a>
 80011a0:	4663      	mov	r3, ip
 80011a2:	4652      	mov	r2, sl
 80011a4:	1a9e      	subs	r6, r3, r2
 80011a6:	0173      	lsls	r3, r6, #5
 80011a8:	d417      	bmi.n	80011da <__aeabi_fsub+0x2fa>
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fsub+0x2d0>
 80011ae:	e6d9      	b.n	8000f64 <__aeabi_fsub+0x84>
 80011b0:	2500      	movs	r5, #0
 80011b2:	2000      	movs	r0, #0
 80011b4:	2700      	movs	r7, #0
 80011b6:	e6fa      	b.n	8000fae <__aeabi_fsub+0xce>
 80011b8:	4663      	mov	r3, ip
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d044      	beq.n	8001248 <__aeabi_fsub+0x368>
 80011be:	3901      	subs	r1, #1
 80011c0:	2900      	cmp	r1, #0
 80011c2:	d04c      	beq.n	800125e <__aeabi_fsub+0x37e>
 80011c4:	2eff      	cmp	r6, #255	; 0xff
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x2ea>
 80011c8:	e771      	b.n	80010ae <__aeabi_fsub+0x1ce>
 80011ca:	4643      	mov	r3, r8
 80011cc:	e73e      	b.n	800104c <__aeabi_fsub+0x16c>
 80011ce:	2cff      	cmp	r4, #255	; 0xff
 80011d0:	d0c5      	beq.n	800115e <__aeabi_fsub+0x27e>
 80011d2:	4652      	mov	r2, sl
 80011d4:	4462      	add	r2, ip
 80011d6:	0853      	lsrs	r3, r2, #1
 80011d8:	e7b6      	b.n	8001148 <__aeabi_fsub+0x268>
 80011da:	4663      	mov	r3, ip
 80011dc:	000d      	movs	r5, r1
 80011de:	1ad6      	subs	r6, r2, r3
 80011e0:	e6c0      	b.n	8000f64 <__aeabi_fsub+0x84>
 80011e2:	4662      	mov	r2, ip
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d116      	bne.n	8001216 <__aeabi_fsub+0x336>
 80011e8:	4653      	mov	r3, sl
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d000      	beq.n	80011f0 <__aeabi_fsub+0x310>
 80011ee:	e72b      	b.n	8001048 <__aeabi_fsub+0x168>
 80011f0:	2780      	movs	r7, #128	; 0x80
 80011f2:	2500      	movs	r5, #0
 80011f4:	20ff      	movs	r0, #255	; 0xff
 80011f6:	03ff      	lsls	r7, r7, #15
 80011f8:	e6d9      	b.n	8000fae <__aeabi_fsub+0xce>
 80011fa:	000d      	movs	r5, r1
 80011fc:	4643      	mov	r3, r8
 80011fe:	0034      	movs	r4, r6
 8001200:	e7a6      	b.n	8001150 <__aeabi_fsub+0x270>
 8001202:	4653      	mov	r3, sl
 8001204:	4463      	add	r3, ip
 8001206:	e6f7      	b.n	8000ff8 <__aeabi_fsub+0x118>
 8001208:	4663      	mov	r3, ip
 800120a:	4652      	mov	r2, sl
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	e6a4      	b.n	8000f5a <__aeabi_fsub+0x7a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d0d9      	beq.n	80011ca <__aeabi_fsub+0x2ea>
 8001216:	4652      	mov	r2, sl
 8001218:	2a00      	cmp	r2, #0
 800121a:	d100      	bne.n	800121e <__aeabi_fsub+0x33e>
 800121c:	e716      	b.n	800104c <__aeabi_fsub+0x16c>
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	03d2      	lsls	r2, r2, #15
 8001222:	4213      	tst	r3, r2
 8001224:	d100      	bne.n	8001228 <__aeabi_fsub+0x348>
 8001226:	e711      	b.n	800104c <__aeabi_fsub+0x16c>
 8001228:	4640      	mov	r0, r8
 800122a:	4210      	tst	r0, r2
 800122c:	d000      	beq.n	8001230 <__aeabi_fsub+0x350>
 800122e:	e70d      	b.n	800104c <__aeabi_fsub+0x16c>
 8001230:	e70a      	b.n	8001048 <__aeabi_fsub+0x168>
 8001232:	4652      	mov	r2, sl
 8001234:	000d      	movs	r5, r1
 8001236:	0034      	movs	r4, r6
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	e68e      	b.n	8000f5a <__aeabi_fsub+0x7a>
 800123c:	4653      	mov	r3, sl
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <__aeabi_fsub+0x374>
 8001242:	000d      	movs	r5, r1
 8001244:	4647      	mov	r7, r8
 8001246:	e6b2      	b.n	8000fae <__aeabi_fsub+0xce>
 8001248:	4643      	mov	r3, r8
 800124a:	0034      	movs	r4, r6
 800124c:	e780      	b.n	8001150 <__aeabi_fsub+0x270>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_fsub+0x374>
 8001252:	e779      	b.n	8001148 <__aeabi_fsub+0x268>
 8001254:	2500      	movs	r5, #0
 8001256:	2700      	movs	r7, #0
 8001258:	e6a9      	b.n	8000fae <__aeabi_fsub+0xce>
 800125a:	4647      	mov	r7, r8
 800125c:	e6a7      	b.n	8000fae <__aeabi_fsub+0xce>
 800125e:	4653      	mov	r3, sl
 8001260:	0034      	movs	r4, r6
 8001262:	4463      	add	r3, ip
 8001264:	e6c8      	b.n	8000ff8 <__aeabi_fsub+0x118>
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	7dffffff 	.word	0x7dffffff
 800126c:	fbffffff 	.word	0xfbffffff

08001270 <__aeabi_f2iz>:
 8001270:	0241      	lsls	r1, r0, #9
 8001272:	0042      	lsls	r2, r0, #1
 8001274:	0fc3      	lsrs	r3, r0, #31
 8001276:	0a49      	lsrs	r1, r1, #9
 8001278:	2000      	movs	r0, #0
 800127a:	0e12      	lsrs	r2, r2, #24
 800127c:	2a7e      	cmp	r2, #126	; 0x7e
 800127e:	d903      	bls.n	8001288 <__aeabi_f2iz+0x18>
 8001280:	2a9d      	cmp	r2, #157	; 0x9d
 8001282:	d902      	bls.n	800128a <__aeabi_f2iz+0x1a>
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <__aeabi_f2iz+0x3c>)
 8001286:	1898      	adds	r0, r3, r2
 8001288:	4770      	bx	lr
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	0400      	lsls	r0, r0, #16
 800128e:	4301      	orrs	r1, r0
 8001290:	2a95      	cmp	r2, #149	; 0x95
 8001292:	dc07      	bgt.n	80012a4 <__aeabi_f2iz+0x34>
 8001294:	2096      	movs	r0, #150	; 0x96
 8001296:	1a82      	subs	r2, r0, r2
 8001298:	40d1      	lsrs	r1, r2
 800129a:	4248      	negs	r0, r1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f3      	bne.n	8001288 <__aeabi_f2iz+0x18>
 80012a0:	0008      	movs	r0, r1
 80012a2:	e7f1      	b.n	8001288 <__aeabi_f2iz+0x18>
 80012a4:	3a96      	subs	r2, #150	; 0x96
 80012a6:	4091      	lsls	r1, r2
 80012a8:	e7f7      	b.n	800129a <__aeabi_f2iz+0x2a>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	7fffffff 	.word	0x7fffffff

080012b0 <__aeabi_i2f>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	2800      	cmp	r0, #0
 80012b4:	d013      	beq.n	80012de <__aeabi_i2f+0x2e>
 80012b6:	17c3      	asrs	r3, r0, #31
 80012b8:	18c5      	adds	r5, r0, r3
 80012ba:	405d      	eors	r5, r3
 80012bc:	0fc4      	lsrs	r4, r0, #31
 80012be:	0028      	movs	r0, r5
 80012c0:	f001 ff9a 	bl	80031f8 <__clzsi2>
 80012c4:	239e      	movs	r3, #158	; 0x9e
 80012c6:	0001      	movs	r1, r0
 80012c8:	1a1b      	subs	r3, r3, r0
 80012ca:	2b96      	cmp	r3, #150	; 0x96
 80012cc:	dc0f      	bgt.n	80012ee <__aeabi_i2f+0x3e>
 80012ce:	2808      	cmp	r0, #8
 80012d0:	dd01      	ble.n	80012d6 <__aeabi_i2f+0x26>
 80012d2:	3908      	subs	r1, #8
 80012d4:	408d      	lsls	r5, r1
 80012d6:	026d      	lsls	r5, r5, #9
 80012d8:	0a6d      	lsrs	r5, r5, #9
 80012da:	b2d8      	uxtb	r0, r3
 80012dc:	e002      	b.n	80012e4 <__aeabi_i2f+0x34>
 80012de:	2400      	movs	r4, #0
 80012e0:	2000      	movs	r0, #0
 80012e2:	2500      	movs	r5, #0
 80012e4:	05c0      	lsls	r0, r0, #23
 80012e6:	4328      	orrs	r0, r5
 80012e8:	07e4      	lsls	r4, r4, #31
 80012ea:	4320      	orrs	r0, r4
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	2b99      	cmp	r3, #153	; 0x99
 80012f0:	dd0b      	ble.n	800130a <__aeabi_i2f+0x5a>
 80012f2:	2205      	movs	r2, #5
 80012f4:	002e      	movs	r6, r5
 80012f6:	1a12      	subs	r2, r2, r0
 80012f8:	40d6      	lsrs	r6, r2
 80012fa:	0002      	movs	r2, r0
 80012fc:	321b      	adds	r2, #27
 80012fe:	4095      	lsls	r5, r2
 8001300:	0028      	movs	r0, r5
 8001302:	1e45      	subs	r5, r0, #1
 8001304:	41a8      	sbcs	r0, r5
 8001306:	0035      	movs	r5, r6
 8001308:	4305      	orrs	r5, r0
 800130a:	2905      	cmp	r1, #5
 800130c:	dd01      	ble.n	8001312 <__aeabi_i2f+0x62>
 800130e:	1f4a      	subs	r2, r1, #5
 8001310:	4095      	lsls	r5, r2
 8001312:	002a      	movs	r2, r5
 8001314:	4e08      	ldr	r6, [pc, #32]	; (8001338 <__aeabi_i2f+0x88>)
 8001316:	4032      	ands	r2, r6
 8001318:	0768      	lsls	r0, r5, #29
 800131a:	d009      	beq.n	8001330 <__aeabi_i2f+0x80>
 800131c:	200f      	movs	r0, #15
 800131e:	4028      	ands	r0, r5
 8001320:	2804      	cmp	r0, #4
 8001322:	d005      	beq.n	8001330 <__aeabi_i2f+0x80>
 8001324:	3204      	adds	r2, #4
 8001326:	0150      	lsls	r0, r2, #5
 8001328:	d502      	bpl.n	8001330 <__aeabi_i2f+0x80>
 800132a:	239f      	movs	r3, #159	; 0x9f
 800132c:	4032      	ands	r2, r6
 800132e:	1a5b      	subs	r3, r3, r1
 8001330:	0192      	lsls	r2, r2, #6
 8001332:	0a55      	lsrs	r5, r2, #9
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	e7d5      	b.n	80012e4 <__aeabi_i2f+0x34>
 8001338:	fbffffff 	.word	0xfbffffff

0800133c <__aeabi_ui2f>:
 800133c:	b570      	push	{r4, r5, r6, lr}
 800133e:	1e05      	subs	r5, r0, #0
 8001340:	d00e      	beq.n	8001360 <__aeabi_ui2f+0x24>
 8001342:	f001 ff59 	bl	80031f8 <__clzsi2>
 8001346:	239e      	movs	r3, #158	; 0x9e
 8001348:	0004      	movs	r4, r0
 800134a:	1a1b      	subs	r3, r3, r0
 800134c:	2b96      	cmp	r3, #150	; 0x96
 800134e:	dc0c      	bgt.n	800136a <__aeabi_ui2f+0x2e>
 8001350:	2808      	cmp	r0, #8
 8001352:	dd01      	ble.n	8001358 <__aeabi_ui2f+0x1c>
 8001354:	3c08      	subs	r4, #8
 8001356:	40a5      	lsls	r5, r4
 8001358:	026d      	lsls	r5, r5, #9
 800135a:	0a6d      	lsrs	r5, r5, #9
 800135c:	b2d8      	uxtb	r0, r3
 800135e:	e001      	b.n	8001364 <__aeabi_ui2f+0x28>
 8001360:	2000      	movs	r0, #0
 8001362:	2500      	movs	r5, #0
 8001364:	05c0      	lsls	r0, r0, #23
 8001366:	4328      	orrs	r0, r5
 8001368:	bd70      	pop	{r4, r5, r6, pc}
 800136a:	2b99      	cmp	r3, #153	; 0x99
 800136c:	dd09      	ble.n	8001382 <__aeabi_ui2f+0x46>
 800136e:	0002      	movs	r2, r0
 8001370:	0029      	movs	r1, r5
 8001372:	321b      	adds	r2, #27
 8001374:	4091      	lsls	r1, r2
 8001376:	1e4a      	subs	r2, r1, #1
 8001378:	4191      	sbcs	r1, r2
 800137a:	2205      	movs	r2, #5
 800137c:	1a12      	subs	r2, r2, r0
 800137e:	40d5      	lsrs	r5, r2
 8001380:	430d      	orrs	r5, r1
 8001382:	2c05      	cmp	r4, #5
 8001384:	dd01      	ble.n	800138a <__aeabi_ui2f+0x4e>
 8001386:	1f62      	subs	r2, r4, #5
 8001388:	4095      	lsls	r5, r2
 800138a:	0029      	movs	r1, r5
 800138c:	4e08      	ldr	r6, [pc, #32]	; (80013b0 <__aeabi_ui2f+0x74>)
 800138e:	4031      	ands	r1, r6
 8001390:	076a      	lsls	r2, r5, #29
 8001392:	d009      	beq.n	80013a8 <__aeabi_ui2f+0x6c>
 8001394:	200f      	movs	r0, #15
 8001396:	4028      	ands	r0, r5
 8001398:	2804      	cmp	r0, #4
 800139a:	d005      	beq.n	80013a8 <__aeabi_ui2f+0x6c>
 800139c:	3104      	adds	r1, #4
 800139e:	014a      	lsls	r2, r1, #5
 80013a0:	d502      	bpl.n	80013a8 <__aeabi_ui2f+0x6c>
 80013a2:	239f      	movs	r3, #159	; 0x9f
 80013a4:	4031      	ands	r1, r6
 80013a6:	1b1b      	subs	r3, r3, r4
 80013a8:	0189      	lsls	r1, r1, #6
 80013aa:	0a4d      	lsrs	r5, r1, #9
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	e7d9      	b.n	8001364 <__aeabi_ui2f+0x28>
 80013b0:	fbffffff 	.word	0xfbffffff

080013b4 <__aeabi_dadd>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	464f      	mov	r7, r9
 80013b8:	46d6      	mov	lr, sl
 80013ba:	4646      	mov	r6, r8
 80013bc:	000d      	movs	r5, r1
 80013be:	0001      	movs	r1, r0
 80013c0:	0018      	movs	r0, r3
 80013c2:	b5c0      	push	{r6, r7, lr}
 80013c4:	0017      	movs	r7, r2
 80013c6:	032b      	lsls	r3, r5, #12
 80013c8:	0a5a      	lsrs	r2, r3, #9
 80013ca:	0f4b      	lsrs	r3, r1, #29
 80013cc:	4313      	orrs	r3, r2
 80013ce:	00ca      	lsls	r2, r1, #3
 80013d0:	4691      	mov	r9, r2
 80013d2:	0302      	lsls	r2, r0, #12
 80013d4:	006e      	lsls	r6, r5, #1
 80013d6:	0041      	lsls	r1, r0, #1
 80013d8:	0a52      	lsrs	r2, r2, #9
 80013da:	0fec      	lsrs	r4, r5, #31
 80013dc:	0f7d      	lsrs	r5, r7, #29
 80013de:	4315      	orrs	r5, r2
 80013e0:	0d76      	lsrs	r6, r6, #21
 80013e2:	0d49      	lsrs	r1, r1, #21
 80013e4:	0fc0      	lsrs	r0, r0, #31
 80013e6:	4682      	mov	sl, r0
 80013e8:	46ac      	mov	ip, r5
 80013ea:	00ff      	lsls	r7, r7, #3
 80013ec:	1a72      	subs	r2, r6, r1
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x40>
 80013f2:	e098      	b.n	8001526 <__aeabi_dadd+0x172>
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x46>
 80013f8:	e081      	b.n	80014fe <__aeabi_dadd+0x14a>
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x4c>
 80013fe:	e0b6      	b.n	800156e <__aeabi_dadd+0x1ba>
 8001400:	49c9      	ldr	r1, [pc, #804]	; (8001728 <__aeabi_dadd+0x374>)
 8001402:	428e      	cmp	r6, r1
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x54>
 8001406:	e172      	b.n	80016ee <__aeabi_dadd+0x33a>
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0028      	movs	r0, r5
 800140c:	0409      	lsls	r1, r1, #16
 800140e:	4308      	orrs	r0, r1
 8001410:	4684      	mov	ip, r0
 8001412:	2a38      	cmp	r2, #56	; 0x38
 8001414:	dd00      	ble.n	8001418 <__aeabi_dadd+0x64>
 8001416:	e15e      	b.n	80016d6 <__aeabi_dadd+0x322>
 8001418:	2a1f      	cmp	r2, #31
 800141a:	dd00      	ble.n	800141e <__aeabi_dadd+0x6a>
 800141c:	e1ee      	b.n	80017fc <__aeabi_dadd+0x448>
 800141e:	2020      	movs	r0, #32
 8001420:	0039      	movs	r1, r7
 8001422:	4665      	mov	r5, ip
 8001424:	1a80      	subs	r0, r0, r2
 8001426:	4087      	lsls	r7, r0
 8001428:	40d1      	lsrs	r1, r2
 800142a:	4085      	lsls	r5, r0
 800142c:	430d      	orrs	r5, r1
 800142e:	0039      	movs	r1, r7
 8001430:	1e4f      	subs	r7, r1, #1
 8001432:	41b9      	sbcs	r1, r7
 8001434:	4667      	mov	r7, ip
 8001436:	40d7      	lsrs	r7, r2
 8001438:	4329      	orrs	r1, r5
 800143a:	1bdb      	subs	r3, r3, r7
 800143c:	464a      	mov	r2, r9
 800143e:	1a55      	subs	r5, r2, r1
 8001440:	45a9      	cmp	r9, r5
 8001442:	4189      	sbcs	r1, r1
 8001444:	4249      	negs	r1, r1
 8001446:	1a5b      	subs	r3, r3, r1
 8001448:	4698      	mov	r8, r3
 800144a:	4643      	mov	r3, r8
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	d400      	bmi.n	8001452 <__aeabi_dadd+0x9e>
 8001450:	e0cc      	b.n	80015ec <__aeabi_dadd+0x238>
 8001452:	4643      	mov	r3, r8
 8001454:	025b      	lsls	r3, r3, #9
 8001456:	0a5b      	lsrs	r3, r3, #9
 8001458:	4698      	mov	r8, r3
 800145a:	4643      	mov	r3, r8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0xae>
 8001460:	e12c      	b.n	80016bc <__aeabi_dadd+0x308>
 8001462:	4640      	mov	r0, r8
 8001464:	f001 fec8 	bl	80031f8 <__clzsi2>
 8001468:	0001      	movs	r1, r0
 800146a:	3908      	subs	r1, #8
 800146c:	2220      	movs	r2, #32
 800146e:	0028      	movs	r0, r5
 8001470:	4643      	mov	r3, r8
 8001472:	1a52      	subs	r2, r2, r1
 8001474:	408b      	lsls	r3, r1
 8001476:	40d0      	lsrs	r0, r2
 8001478:	408d      	lsls	r5, r1
 800147a:	4303      	orrs	r3, r0
 800147c:	428e      	cmp	r6, r1
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0xce>
 8001480:	e117      	b.n	80016b2 <__aeabi_dadd+0x2fe>
 8001482:	1b8e      	subs	r6, r1, r6
 8001484:	1c72      	adds	r2, r6, #1
 8001486:	2a1f      	cmp	r2, #31
 8001488:	dd00      	ble.n	800148c <__aeabi_dadd+0xd8>
 800148a:	e1a7      	b.n	80017dc <__aeabi_dadd+0x428>
 800148c:	2120      	movs	r1, #32
 800148e:	0018      	movs	r0, r3
 8001490:	002e      	movs	r6, r5
 8001492:	1a89      	subs	r1, r1, r2
 8001494:	408d      	lsls	r5, r1
 8001496:	4088      	lsls	r0, r1
 8001498:	40d6      	lsrs	r6, r2
 800149a:	40d3      	lsrs	r3, r2
 800149c:	1e69      	subs	r1, r5, #1
 800149e:	418d      	sbcs	r5, r1
 80014a0:	4330      	orrs	r0, r6
 80014a2:	4698      	mov	r8, r3
 80014a4:	2600      	movs	r6, #0
 80014a6:	4305      	orrs	r5, r0
 80014a8:	076b      	lsls	r3, r5, #29
 80014aa:	d009      	beq.n	80014c0 <__aeabi_dadd+0x10c>
 80014ac:	230f      	movs	r3, #15
 80014ae:	402b      	ands	r3, r5
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <__aeabi_dadd+0x10c>
 80014b4:	1d2b      	adds	r3, r5, #4
 80014b6:	42ab      	cmp	r3, r5
 80014b8:	41ad      	sbcs	r5, r5
 80014ba:	426d      	negs	r5, r5
 80014bc:	44a8      	add	r8, r5
 80014be:	001d      	movs	r5, r3
 80014c0:	4643      	mov	r3, r8
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	d400      	bmi.n	80014c8 <__aeabi_dadd+0x114>
 80014c6:	e094      	b.n	80015f2 <__aeabi_dadd+0x23e>
 80014c8:	4b97      	ldr	r3, [pc, #604]	; (8001728 <__aeabi_dadd+0x374>)
 80014ca:	1c72      	adds	r2, r6, #1
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x11e>
 80014d0:	e09d      	b.n	800160e <__aeabi_dadd+0x25a>
 80014d2:	4641      	mov	r1, r8
 80014d4:	4b95      	ldr	r3, [pc, #596]	; (800172c <__aeabi_dadd+0x378>)
 80014d6:	08ed      	lsrs	r5, r5, #3
 80014d8:	4019      	ands	r1, r3
 80014da:	000b      	movs	r3, r1
 80014dc:	0552      	lsls	r2, r2, #21
 80014de:	0749      	lsls	r1, r1, #29
 80014e0:	025b      	lsls	r3, r3, #9
 80014e2:	4329      	orrs	r1, r5
 80014e4:	0b1b      	lsrs	r3, r3, #12
 80014e6:	0d52      	lsrs	r2, r2, #21
 80014e8:	0512      	lsls	r2, r2, #20
 80014ea:	4313      	orrs	r3, r2
 80014ec:	07e4      	lsls	r4, r4, #31
 80014ee:	4323      	orrs	r3, r4
 80014f0:	0008      	movs	r0, r1
 80014f2:	0019      	movs	r1, r3
 80014f4:	bce0      	pop	{r5, r6, r7}
 80014f6:	46ba      	mov	sl, r7
 80014f8:	46b1      	mov	r9, r6
 80014fa:	46a8      	mov	r8, r5
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d043      	beq.n	800158a <__aeabi_dadd+0x1d6>
 8001502:	1b8a      	subs	r2, r1, r6
 8001504:	2e00      	cmp	r6, #0
 8001506:	d000      	beq.n	800150a <__aeabi_dadd+0x156>
 8001508:	e12a      	b.n	8001760 <__aeabi_dadd+0x3ac>
 800150a:	464c      	mov	r4, r9
 800150c:	431c      	orrs	r4, r3
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x15e>
 8001510:	e1d1      	b.n	80018b6 <__aeabi_dadd+0x502>
 8001512:	1e54      	subs	r4, r2, #1
 8001514:	2a01      	cmp	r2, #1
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x166>
 8001518:	e21f      	b.n	800195a <__aeabi_dadd+0x5a6>
 800151a:	4d83      	ldr	r5, [pc, #524]	; (8001728 <__aeabi_dadd+0x374>)
 800151c:	42aa      	cmp	r2, r5
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x16e>
 8001520:	e272      	b.n	8001a08 <__aeabi_dadd+0x654>
 8001522:	0022      	movs	r2, r4
 8001524:	e123      	b.n	800176e <__aeabi_dadd+0x3ba>
 8001526:	2a00      	cmp	r2, #0
 8001528:	dc00      	bgt.n	800152c <__aeabi_dadd+0x178>
 800152a:	e098      	b.n	800165e <__aeabi_dadd+0x2aa>
 800152c:	2900      	cmp	r1, #0
 800152e:	d042      	beq.n	80015b6 <__aeabi_dadd+0x202>
 8001530:	497d      	ldr	r1, [pc, #500]	; (8001728 <__aeabi_dadd+0x374>)
 8001532:	428e      	cmp	r6, r1
 8001534:	d100      	bne.n	8001538 <__aeabi_dadd+0x184>
 8001536:	e0da      	b.n	80016ee <__aeabi_dadd+0x33a>
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0028      	movs	r0, r5
 800153c:	0409      	lsls	r1, r1, #16
 800153e:	4308      	orrs	r0, r1
 8001540:	4684      	mov	ip, r0
 8001542:	2a38      	cmp	r2, #56	; 0x38
 8001544:	dd00      	ble.n	8001548 <__aeabi_dadd+0x194>
 8001546:	e129      	b.n	800179c <__aeabi_dadd+0x3e8>
 8001548:	2a1f      	cmp	r2, #31
 800154a:	dc00      	bgt.n	800154e <__aeabi_dadd+0x19a>
 800154c:	e187      	b.n	800185e <__aeabi_dadd+0x4aa>
 800154e:	0011      	movs	r1, r2
 8001550:	4665      	mov	r5, ip
 8001552:	3920      	subs	r1, #32
 8001554:	40cd      	lsrs	r5, r1
 8001556:	2a20      	cmp	r2, #32
 8001558:	d004      	beq.n	8001564 <__aeabi_dadd+0x1b0>
 800155a:	2040      	movs	r0, #64	; 0x40
 800155c:	4661      	mov	r1, ip
 800155e:	1a82      	subs	r2, r0, r2
 8001560:	4091      	lsls	r1, r2
 8001562:	430f      	orrs	r7, r1
 8001564:	0039      	movs	r1, r7
 8001566:	1e4f      	subs	r7, r1, #1
 8001568:	41b9      	sbcs	r1, r7
 800156a:	430d      	orrs	r5, r1
 800156c:	e11b      	b.n	80017a6 <__aeabi_dadd+0x3f2>
 800156e:	0029      	movs	r1, r5
 8001570:	4339      	orrs	r1, r7
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x1c2>
 8001574:	e0b5      	b.n	80016e2 <__aeabi_dadd+0x32e>
 8001576:	1e51      	subs	r1, r2, #1
 8001578:	2a01      	cmp	r2, #1
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x1ca>
 800157c:	e1ab      	b.n	80018d6 <__aeabi_dadd+0x522>
 800157e:	486a      	ldr	r0, [pc, #424]	; (8001728 <__aeabi_dadd+0x374>)
 8001580:	4282      	cmp	r2, r0
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x1d2>
 8001584:	e1b2      	b.n	80018ec <__aeabi_dadd+0x538>
 8001586:	000a      	movs	r2, r1
 8001588:	e743      	b.n	8001412 <__aeabi_dadd+0x5e>
 800158a:	4969      	ldr	r1, [pc, #420]	; (8001730 <__aeabi_dadd+0x37c>)
 800158c:	1c75      	adds	r5, r6, #1
 800158e:	420d      	tst	r5, r1
 8001590:	d000      	beq.n	8001594 <__aeabi_dadd+0x1e0>
 8001592:	e0cf      	b.n	8001734 <__aeabi_dadd+0x380>
 8001594:	2e00      	cmp	r6, #0
 8001596:	d000      	beq.n	800159a <__aeabi_dadd+0x1e6>
 8001598:	e193      	b.n	80018c2 <__aeabi_dadd+0x50e>
 800159a:	4649      	mov	r1, r9
 800159c:	4319      	orrs	r1, r3
 800159e:	d100      	bne.n	80015a2 <__aeabi_dadd+0x1ee>
 80015a0:	e1d1      	b.n	8001946 <__aeabi_dadd+0x592>
 80015a2:	4661      	mov	r1, ip
 80015a4:	4339      	orrs	r1, r7
 80015a6:	d000      	beq.n	80015aa <__aeabi_dadd+0x1f6>
 80015a8:	e1e3      	b.n	8001972 <__aeabi_dadd+0x5be>
 80015aa:	4649      	mov	r1, r9
 80015ac:	0758      	lsls	r0, r3, #29
 80015ae:	08c9      	lsrs	r1, r1, #3
 80015b0:	4301      	orrs	r1, r0
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	e026      	b.n	8001604 <__aeabi_dadd+0x250>
 80015b6:	0029      	movs	r1, r5
 80015b8:	4339      	orrs	r1, r7
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x20a>
 80015bc:	e091      	b.n	80016e2 <__aeabi_dadd+0x32e>
 80015be:	1e51      	subs	r1, r2, #1
 80015c0:	2a01      	cmp	r2, #1
 80015c2:	d005      	beq.n	80015d0 <__aeabi_dadd+0x21c>
 80015c4:	4858      	ldr	r0, [pc, #352]	; (8001728 <__aeabi_dadd+0x374>)
 80015c6:	4282      	cmp	r2, r0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x218>
 80015ca:	e18f      	b.n	80018ec <__aeabi_dadd+0x538>
 80015cc:	000a      	movs	r2, r1
 80015ce:	e7b8      	b.n	8001542 <__aeabi_dadd+0x18e>
 80015d0:	003d      	movs	r5, r7
 80015d2:	444d      	add	r5, r9
 80015d4:	454d      	cmp	r5, r9
 80015d6:	4189      	sbcs	r1, r1
 80015d8:	4463      	add	r3, ip
 80015da:	4698      	mov	r8, r3
 80015dc:	4249      	negs	r1, r1
 80015de:	4488      	add	r8, r1
 80015e0:	4643      	mov	r3, r8
 80015e2:	2602      	movs	r6, #2
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	d500      	bpl.n	80015ea <__aeabi_dadd+0x236>
 80015e8:	e0eb      	b.n	80017c2 <__aeabi_dadd+0x40e>
 80015ea:	3e01      	subs	r6, #1
 80015ec:	076b      	lsls	r3, r5, #29
 80015ee:	d000      	beq.n	80015f2 <__aeabi_dadd+0x23e>
 80015f0:	e75c      	b.n	80014ac <__aeabi_dadd+0xf8>
 80015f2:	4643      	mov	r3, r8
 80015f4:	08e9      	lsrs	r1, r5, #3
 80015f6:	075a      	lsls	r2, r3, #29
 80015f8:	4311      	orrs	r1, r2
 80015fa:	0032      	movs	r2, r6
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	484a      	ldr	r0, [pc, #296]	; (8001728 <__aeabi_dadd+0x374>)
 8001600:	4282      	cmp	r2, r0
 8001602:	d021      	beq.n	8001648 <__aeabi_dadd+0x294>
 8001604:	031b      	lsls	r3, r3, #12
 8001606:	0552      	lsls	r2, r2, #21
 8001608:	0b1b      	lsrs	r3, r3, #12
 800160a:	0d52      	lsrs	r2, r2, #21
 800160c:	e76c      	b.n	80014e8 <__aeabi_dadd+0x134>
 800160e:	2300      	movs	r3, #0
 8001610:	2100      	movs	r1, #0
 8001612:	e769      	b.n	80014e8 <__aeabi_dadd+0x134>
 8001614:	002a      	movs	r2, r5
 8001616:	433a      	orrs	r2, r7
 8001618:	d069      	beq.n	80016ee <__aeabi_dadd+0x33a>
 800161a:	464a      	mov	r2, r9
 800161c:	0758      	lsls	r0, r3, #29
 800161e:	08d1      	lsrs	r1, r2, #3
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	031b      	lsls	r3, r3, #12
 8001626:	4308      	orrs	r0, r1
 8001628:	421a      	tst	r2, r3
 800162a:	d007      	beq.n	800163c <__aeabi_dadd+0x288>
 800162c:	0029      	movs	r1, r5
 800162e:	08ed      	lsrs	r5, r5, #3
 8001630:	421d      	tst	r5, r3
 8001632:	d103      	bne.n	800163c <__aeabi_dadd+0x288>
 8001634:	002a      	movs	r2, r5
 8001636:	08ff      	lsrs	r7, r7, #3
 8001638:	0748      	lsls	r0, r1, #29
 800163a:	4338      	orrs	r0, r7
 800163c:	0f43      	lsrs	r3, r0, #29
 800163e:	00c1      	lsls	r1, r0, #3
 8001640:	075b      	lsls	r3, r3, #29
 8001642:	08c9      	lsrs	r1, r1, #3
 8001644:	4319      	orrs	r1, r3
 8001646:	0013      	movs	r3, r2
 8001648:	000a      	movs	r2, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x29c>
 800164e:	e213      	b.n	8001a78 <__aeabi_dadd+0x6c4>
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	0312      	lsls	r2, r2, #12
 8001654:	4313      	orrs	r3, r2
 8001656:	031b      	lsls	r3, r3, #12
 8001658:	4a33      	ldr	r2, [pc, #204]	; (8001728 <__aeabi_dadd+0x374>)
 800165a:	0b1b      	lsrs	r3, r3, #12
 800165c:	e744      	b.n	80014e8 <__aeabi_dadd+0x134>
 800165e:	2a00      	cmp	r2, #0
 8001660:	d04b      	beq.n	80016fa <__aeabi_dadd+0x346>
 8001662:	1b8a      	subs	r2, r1, r6
 8001664:	2e00      	cmp	r6, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dadd+0x2b6>
 8001668:	e0e7      	b.n	800183a <__aeabi_dadd+0x486>
 800166a:	482f      	ldr	r0, [pc, #188]	; (8001728 <__aeabi_dadd+0x374>)
 800166c:	4281      	cmp	r1, r0
 800166e:	d100      	bne.n	8001672 <__aeabi_dadd+0x2be>
 8001670:	e195      	b.n	800199e <__aeabi_dadd+0x5ea>
 8001672:	2080      	movs	r0, #128	; 0x80
 8001674:	0400      	lsls	r0, r0, #16
 8001676:	4303      	orrs	r3, r0
 8001678:	2a38      	cmp	r2, #56	; 0x38
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0x2ca>
 800167c:	e143      	b.n	8001906 <__aeabi_dadd+0x552>
 800167e:	2a1f      	cmp	r2, #31
 8001680:	dd00      	ble.n	8001684 <__aeabi_dadd+0x2d0>
 8001682:	e1db      	b.n	8001a3c <__aeabi_dadd+0x688>
 8001684:	2020      	movs	r0, #32
 8001686:	001d      	movs	r5, r3
 8001688:	464e      	mov	r6, r9
 800168a:	1a80      	subs	r0, r0, r2
 800168c:	4085      	lsls	r5, r0
 800168e:	40d6      	lsrs	r6, r2
 8001690:	4335      	orrs	r5, r6
 8001692:	464e      	mov	r6, r9
 8001694:	4086      	lsls	r6, r0
 8001696:	0030      	movs	r0, r6
 8001698:	40d3      	lsrs	r3, r2
 800169a:	1e46      	subs	r6, r0, #1
 800169c:	41b0      	sbcs	r0, r6
 800169e:	449c      	add	ip, r3
 80016a0:	4305      	orrs	r5, r0
 80016a2:	19ed      	adds	r5, r5, r7
 80016a4:	42bd      	cmp	r5, r7
 80016a6:	419b      	sbcs	r3, r3
 80016a8:	425b      	negs	r3, r3
 80016aa:	4463      	add	r3, ip
 80016ac:	4698      	mov	r8, r3
 80016ae:	000e      	movs	r6, r1
 80016b0:	e07f      	b.n	80017b2 <__aeabi_dadd+0x3fe>
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <__aeabi_dadd+0x378>)
 80016b4:	1a76      	subs	r6, r6, r1
 80016b6:	4013      	ands	r3, r2
 80016b8:	4698      	mov	r8, r3
 80016ba:	e6f5      	b.n	80014a8 <__aeabi_dadd+0xf4>
 80016bc:	0028      	movs	r0, r5
 80016be:	f001 fd9b 	bl	80031f8 <__clzsi2>
 80016c2:	0001      	movs	r1, r0
 80016c4:	3118      	adds	r1, #24
 80016c6:	291f      	cmp	r1, #31
 80016c8:	dc00      	bgt.n	80016cc <__aeabi_dadd+0x318>
 80016ca:	e6cf      	b.n	800146c <__aeabi_dadd+0xb8>
 80016cc:	002b      	movs	r3, r5
 80016ce:	3808      	subs	r0, #8
 80016d0:	4083      	lsls	r3, r0
 80016d2:	2500      	movs	r5, #0
 80016d4:	e6d2      	b.n	800147c <__aeabi_dadd+0xc8>
 80016d6:	4662      	mov	r2, ip
 80016d8:	433a      	orrs	r2, r7
 80016da:	0011      	movs	r1, r2
 80016dc:	1e4f      	subs	r7, r1, #1
 80016de:	41b9      	sbcs	r1, r7
 80016e0:	e6ac      	b.n	800143c <__aeabi_dadd+0x88>
 80016e2:	4649      	mov	r1, r9
 80016e4:	0758      	lsls	r0, r3, #29
 80016e6:	08c9      	lsrs	r1, r1, #3
 80016e8:	4301      	orrs	r1, r0
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	e787      	b.n	80015fe <__aeabi_dadd+0x24a>
 80016ee:	4649      	mov	r1, r9
 80016f0:	075a      	lsls	r2, r3, #29
 80016f2:	08c9      	lsrs	r1, r1, #3
 80016f4:	4311      	orrs	r1, r2
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	e7a6      	b.n	8001648 <__aeabi_dadd+0x294>
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <__aeabi_dadd+0x37c>)
 80016fc:	1c70      	adds	r0, r6, #1
 80016fe:	4208      	tst	r0, r1
 8001700:	d000      	beq.n	8001704 <__aeabi_dadd+0x350>
 8001702:	e0bb      	b.n	800187c <__aeabi_dadd+0x4c8>
 8001704:	2e00      	cmp	r6, #0
 8001706:	d000      	beq.n	800170a <__aeabi_dadd+0x356>
 8001708:	e114      	b.n	8001934 <__aeabi_dadd+0x580>
 800170a:	4649      	mov	r1, r9
 800170c:	4319      	orrs	r1, r3
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x35e>
 8001710:	e175      	b.n	80019fe <__aeabi_dadd+0x64a>
 8001712:	0029      	movs	r1, r5
 8001714:	4339      	orrs	r1, r7
 8001716:	d000      	beq.n	800171a <__aeabi_dadd+0x366>
 8001718:	e17e      	b.n	8001a18 <__aeabi_dadd+0x664>
 800171a:	4649      	mov	r1, r9
 800171c:	0758      	lsls	r0, r3, #29
 800171e:	08c9      	lsrs	r1, r1, #3
 8001720:	4301      	orrs	r1, r0
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	e76e      	b.n	8001604 <__aeabi_dadd+0x250>
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	000007ff 	.word	0x000007ff
 800172c:	ff7fffff 	.word	0xff7fffff
 8001730:	000007fe 	.word	0x000007fe
 8001734:	4649      	mov	r1, r9
 8001736:	1bcd      	subs	r5, r1, r7
 8001738:	4661      	mov	r1, ip
 800173a:	1a58      	subs	r0, r3, r1
 800173c:	45a9      	cmp	r9, r5
 800173e:	4189      	sbcs	r1, r1
 8001740:	4249      	negs	r1, r1
 8001742:	4688      	mov	r8, r1
 8001744:	0001      	movs	r1, r0
 8001746:	4640      	mov	r0, r8
 8001748:	1a09      	subs	r1, r1, r0
 800174a:	4688      	mov	r8, r1
 800174c:	0209      	lsls	r1, r1, #8
 800174e:	d500      	bpl.n	8001752 <__aeabi_dadd+0x39e>
 8001750:	e0a6      	b.n	80018a0 <__aeabi_dadd+0x4ec>
 8001752:	4641      	mov	r1, r8
 8001754:	4329      	orrs	r1, r5
 8001756:	d000      	beq.n	800175a <__aeabi_dadd+0x3a6>
 8001758:	e67f      	b.n	800145a <__aeabi_dadd+0xa6>
 800175a:	2300      	movs	r3, #0
 800175c:	2400      	movs	r4, #0
 800175e:	e751      	b.n	8001604 <__aeabi_dadd+0x250>
 8001760:	4cc7      	ldr	r4, [pc, #796]	; (8001a80 <__aeabi_dadd+0x6cc>)
 8001762:	42a1      	cmp	r1, r4
 8001764:	d100      	bne.n	8001768 <__aeabi_dadd+0x3b4>
 8001766:	e0c7      	b.n	80018f8 <__aeabi_dadd+0x544>
 8001768:	2480      	movs	r4, #128	; 0x80
 800176a:	0424      	lsls	r4, r4, #16
 800176c:	4323      	orrs	r3, r4
 800176e:	2a38      	cmp	r2, #56	; 0x38
 8001770:	dc54      	bgt.n	800181c <__aeabi_dadd+0x468>
 8001772:	2a1f      	cmp	r2, #31
 8001774:	dd00      	ble.n	8001778 <__aeabi_dadd+0x3c4>
 8001776:	e0cc      	b.n	8001912 <__aeabi_dadd+0x55e>
 8001778:	2420      	movs	r4, #32
 800177a:	4648      	mov	r0, r9
 800177c:	1aa4      	subs	r4, r4, r2
 800177e:	001d      	movs	r5, r3
 8001780:	464e      	mov	r6, r9
 8001782:	40a0      	lsls	r0, r4
 8001784:	40d6      	lsrs	r6, r2
 8001786:	40a5      	lsls	r5, r4
 8001788:	0004      	movs	r4, r0
 800178a:	40d3      	lsrs	r3, r2
 800178c:	4662      	mov	r2, ip
 800178e:	4335      	orrs	r5, r6
 8001790:	1e66      	subs	r6, r4, #1
 8001792:	41b4      	sbcs	r4, r6
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	469c      	mov	ip, r3
 8001798:	4325      	orrs	r5, r4
 800179a:	e044      	b.n	8001826 <__aeabi_dadd+0x472>
 800179c:	4662      	mov	r2, ip
 800179e:	433a      	orrs	r2, r7
 80017a0:	0015      	movs	r5, r2
 80017a2:	1e6f      	subs	r7, r5, #1
 80017a4:	41bd      	sbcs	r5, r7
 80017a6:	444d      	add	r5, r9
 80017a8:	454d      	cmp	r5, r9
 80017aa:	4189      	sbcs	r1, r1
 80017ac:	4249      	negs	r1, r1
 80017ae:	4688      	mov	r8, r1
 80017b0:	4498      	add	r8, r3
 80017b2:	4643      	mov	r3, r8
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	d400      	bmi.n	80017ba <__aeabi_dadd+0x406>
 80017b8:	e718      	b.n	80015ec <__aeabi_dadd+0x238>
 80017ba:	4bb1      	ldr	r3, [pc, #708]	; (8001a80 <__aeabi_dadd+0x6cc>)
 80017bc:	3601      	adds	r6, #1
 80017be:	429e      	cmp	r6, r3
 80017c0:	d049      	beq.n	8001856 <__aeabi_dadd+0x4a2>
 80017c2:	4642      	mov	r2, r8
 80017c4:	4baf      	ldr	r3, [pc, #700]	; (8001a84 <__aeabi_dadd+0x6d0>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	401a      	ands	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	086a      	lsrs	r2, r5, #1
 80017ce:	400d      	ands	r5, r1
 80017d0:	4315      	orrs	r5, r2
 80017d2:	07d9      	lsls	r1, r3, #31
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	4698      	mov	r8, r3
 80017d8:	430d      	orrs	r5, r1
 80017da:	e665      	b.n	80014a8 <__aeabi_dadd+0xf4>
 80017dc:	0018      	movs	r0, r3
 80017de:	3e1f      	subs	r6, #31
 80017e0:	40f0      	lsrs	r0, r6
 80017e2:	2a20      	cmp	r2, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dadd+0x43a>
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	1a8a      	subs	r2, r1, r2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	431d      	orrs	r5, r3
 80017ee:	1e69      	subs	r1, r5, #1
 80017f0:	418d      	sbcs	r5, r1
 80017f2:	2300      	movs	r3, #0
 80017f4:	2600      	movs	r6, #0
 80017f6:	4698      	mov	r8, r3
 80017f8:	4305      	orrs	r5, r0
 80017fa:	e6f7      	b.n	80015ec <__aeabi_dadd+0x238>
 80017fc:	0011      	movs	r1, r2
 80017fe:	4665      	mov	r5, ip
 8001800:	3920      	subs	r1, #32
 8001802:	40cd      	lsrs	r5, r1
 8001804:	2a20      	cmp	r2, #32
 8001806:	d004      	beq.n	8001812 <__aeabi_dadd+0x45e>
 8001808:	2040      	movs	r0, #64	; 0x40
 800180a:	4661      	mov	r1, ip
 800180c:	1a82      	subs	r2, r0, r2
 800180e:	4091      	lsls	r1, r2
 8001810:	430f      	orrs	r7, r1
 8001812:	0039      	movs	r1, r7
 8001814:	1e4f      	subs	r7, r1, #1
 8001816:	41b9      	sbcs	r1, r7
 8001818:	4329      	orrs	r1, r5
 800181a:	e60f      	b.n	800143c <__aeabi_dadd+0x88>
 800181c:	464a      	mov	r2, r9
 800181e:	4313      	orrs	r3, r2
 8001820:	001d      	movs	r5, r3
 8001822:	1e6b      	subs	r3, r5, #1
 8001824:	419d      	sbcs	r5, r3
 8001826:	1b7d      	subs	r5, r7, r5
 8001828:	42af      	cmp	r7, r5
 800182a:	419b      	sbcs	r3, r3
 800182c:	4662      	mov	r2, ip
 800182e:	425b      	negs	r3, r3
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	4698      	mov	r8, r3
 8001834:	4654      	mov	r4, sl
 8001836:	000e      	movs	r6, r1
 8001838:	e607      	b.n	800144a <__aeabi_dadd+0x96>
 800183a:	4648      	mov	r0, r9
 800183c:	4318      	orrs	r0, r3
 800183e:	d100      	bne.n	8001842 <__aeabi_dadd+0x48e>
 8001840:	e0b3      	b.n	80019aa <__aeabi_dadd+0x5f6>
 8001842:	1e50      	subs	r0, r2, #1
 8001844:	2a01      	cmp	r2, #1
 8001846:	d100      	bne.n	800184a <__aeabi_dadd+0x496>
 8001848:	e10d      	b.n	8001a66 <__aeabi_dadd+0x6b2>
 800184a:	4d8d      	ldr	r5, [pc, #564]	; (8001a80 <__aeabi_dadd+0x6cc>)
 800184c:	42aa      	cmp	r2, r5
 800184e:	d100      	bne.n	8001852 <__aeabi_dadd+0x49e>
 8001850:	e0a5      	b.n	800199e <__aeabi_dadd+0x5ea>
 8001852:	0002      	movs	r2, r0
 8001854:	e710      	b.n	8001678 <__aeabi_dadd+0x2c4>
 8001856:	0032      	movs	r2, r6
 8001858:	2300      	movs	r3, #0
 800185a:	2100      	movs	r1, #0
 800185c:	e644      	b.n	80014e8 <__aeabi_dadd+0x134>
 800185e:	2120      	movs	r1, #32
 8001860:	0038      	movs	r0, r7
 8001862:	1a89      	subs	r1, r1, r2
 8001864:	4665      	mov	r5, ip
 8001866:	408f      	lsls	r7, r1
 8001868:	408d      	lsls	r5, r1
 800186a:	40d0      	lsrs	r0, r2
 800186c:	1e79      	subs	r1, r7, #1
 800186e:	418f      	sbcs	r7, r1
 8001870:	4305      	orrs	r5, r0
 8001872:	433d      	orrs	r5, r7
 8001874:	4667      	mov	r7, ip
 8001876:	40d7      	lsrs	r7, r2
 8001878:	19db      	adds	r3, r3, r7
 800187a:	e794      	b.n	80017a6 <__aeabi_dadd+0x3f2>
 800187c:	4a80      	ldr	r2, [pc, #512]	; (8001a80 <__aeabi_dadd+0x6cc>)
 800187e:	4290      	cmp	r0, r2
 8001880:	d100      	bne.n	8001884 <__aeabi_dadd+0x4d0>
 8001882:	e0ec      	b.n	8001a5e <__aeabi_dadd+0x6aa>
 8001884:	0039      	movs	r1, r7
 8001886:	4449      	add	r1, r9
 8001888:	4549      	cmp	r1, r9
 800188a:	4192      	sbcs	r2, r2
 800188c:	4463      	add	r3, ip
 800188e:	4252      	negs	r2, r2
 8001890:	189b      	adds	r3, r3, r2
 8001892:	07dd      	lsls	r5, r3, #31
 8001894:	0849      	lsrs	r1, r1, #1
 8001896:	085b      	lsrs	r3, r3, #1
 8001898:	4698      	mov	r8, r3
 800189a:	0006      	movs	r6, r0
 800189c:	430d      	orrs	r5, r1
 800189e:	e6a5      	b.n	80015ec <__aeabi_dadd+0x238>
 80018a0:	464a      	mov	r2, r9
 80018a2:	1abd      	subs	r5, r7, r2
 80018a4:	42af      	cmp	r7, r5
 80018a6:	4189      	sbcs	r1, r1
 80018a8:	4662      	mov	r2, ip
 80018aa:	4249      	negs	r1, r1
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	1a5b      	subs	r3, r3, r1
 80018b0:	4698      	mov	r8, r3
 80018b2:	4654      	mov	r4, sl
 80018b4:	e5d1      	b.n	800145a <__aeabi_dadd+0xa6>
 80018b6:	076c      	lsls	r4, r5, #29
 80018b8:	08f9      	lsrs	r1, r7, #3
 80018ba:	4321      	orrs	r1, r4
 80018bc:	08eb      	lsrs	r3, r5, #3
 80018be:	0004      	movs	r4, r0
 80018c0:	e69d      	b.n	80015fe <__aeabi_dadd+0x24a>
 80018c2:	464a      	mov	r2, r9
 80018c4:	431a      	orrs	r2, r3
 80018c6:	d175      	bne.n	80019b4 <__aeabi_dadd+0x600>
 80018c8:	4661      	mov	r1, ip
 80018ca:	4339      	orrs	r1, r7
 80018cc:	d114      	bne.n	80018f8 <__aeabi_dadd+0x544>
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	2400      	movs	r4, #0
 80018d2:	031b      	lsls	r3, r3, #12
 80018d4:	e6bc      	b.n	8001650 <__aeabi_dadd+0x29c>
 80018d6:	464a      	mov	r2, r9
 80018d8:	1bd5      	subs	r5, r2, r7
 80018da:	45a9      	cmp	r9, r5
 80018dc:	4189      	sbcs	r1, r1
 80018de:	4662      	mov	r2, ip
 80018e0:	4249      	negs	r1, r1
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	1a5b      	subs	r3, r3, r1
 80018e6:	4698      	mov	r8, r3
 80018e8:	2601      	movs	r6, #1
 80018ea:	e5ae      	b.n	800144a <__aeabi_dadd+0x96>
 80018ec:	464a      	mov	r2, r9
 80018ee:	08d1      	lsrs	r1, r2, #3
 80018f0:	075a      	lsls	r2, r3, #29
 80018f2:	4311      	orrs	r1, r2
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	e6a7      	b.n	8001648 <__aeabi_dadd+0x294>
 80018f8:	4663      	mov	r3, ip
 80018fa:	08f9      	lsrs	r1, r7, #3
 80018fc:	075a      	lsls	r2, r3, #29
 80018fe:	4654      	mov	r4, sl
 8001900:	4311      	orrs	r1, r2
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	e6a0      	b.n	8001648 <__aeabi_dadd+0x294>
 8001906:	464a      	mov	r2, r9
 8001908:	4313      	orrs	r3, r2
 800190a:	001d      	movs	r5, r3
 800190c:	1e6b      	subs	r3, r5, #1
 800190e:	419d      	sbcs	r5, r3
 8001910:	e6c7      	b.n	80016a2 <__aeabi_dadd+0x2ee>
 8001912:	0014      	movs	r4, r2
 8001914:	001e      	movs	r6, r3
 8001916:	3c20      	subs	r4, #32
 8001918:	40e6      	lsrs	r6, r4
 800191a:	2a20      	cmp	r2, #32
 800191c:	d005      	beq.n	800192a <__aeabi_dadd+0x576>
 800191e:	2440      	movs	r4, #64	; 0x40
 8001920:	1aa2      	subs	r2, r4, r2
 8001922:	4093      	lsls	r3, r2
 8001924:	464a      	mov	r2, r9
 8001926:	431a      	orrs	r2, r3
 8001928:	4691      	mov	r9, r2
 800192a:	464d      	mov	r5, r9
 800192c:	1e6b      	subs	r3, r5, #1
 800192e:	419d      	sbcs	r5, r3
 8001930:	4335      	orrs	r5, r6
 8001932:	e778      	b.n	8001826 <__aeabi_dadd+0x472>
 8001934:	464a      	mov	r2, r9
 8001936:	431a      	orrs	r2, r3
 8001938:	d000      	beq.n	800193c <__aeabi_dadd+0x588>
 800193a:	e66b      	b.n	8001614 <__aeabi_dadd+0x260>
 800193c:	076b      	lsls	r3, r5, #29
 800193e:	08f9      	lsrs	r1, r7, #3
 8001940:	4319      	orrs	r1, r3
 8001942:	08eb      	lsrs	r3, r5, #3
 8001944:	e680      	b.n	8001648 <__aeabi_dadd+0x294>
 8001946:	4661      	mov	r1, ip
 8001948:	4339      	orrs	r1, r7
 800194a:	d054      	beq.n	80019f6 <__aeabi_dadd+0x642>
 800194c:	4663      	mov	r3, ip
 800194e:	08f9      	lsrs	r1, r7, #3
 8001950:	075c      	lsls	r4, r3, #29
 8001952:	4321      	orrs	r1, r4
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	0004      	movs	r4, r0
 8001958:	e654      	b.n	8001604 <__aeabi_dadd+0x250>
 800195a:	464a      	mov	r2, r9
 800195c:	1abd      	subs	r5, r7, r2
 800195e:	42af      	cmp	r7, r5
 8001960:	4189      	sbcs	r1, r1
 8001962:	4662      	mov	r2, ip
 8001964:	4249      	negs	r1, r1
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	1a5b      	subs	r3, r3, r1
 800196a:	4698      	mov	r8, r3
 800196c:	0004      	movs	r4, r0
 800196e:	2601      	movs	r6, #1
 8001970:	e56b      	b.n	800144a <__aeabi_dadd+0x96>
 8001972:	464a      	mov	r2, r9
 8001974:	1bd5      	subs	r5, r2, r7
 8001976:	45a9      	cmp	r9, r5
 8001978:	4189      	sbcs	r1, r1
 800197a:	4662      	mov	r2, ip
 800197c:	4249      	negs	r1, r1
 800197e:	1a9a      	subs	r2, r3, r2
 8001980:	1a52      	subs	r2, r2, r1
 8001982:	4690      	mov	r8, r2
 8001984:	0212      	lsls	r2, r2, #8
 8001986:	d532      	bpl.n	80019ee <__aeabi_dadd+0x63a>
 8001988:	464a      	mov	r2, r9
 800198a:	1abd      	subs	r5, r7, r2
 800198c:	42af      	cmp	r7, r5
 800198e:	4189      	sbcs	r1, r1
 8001990:	4662      	mov	r2, ip
 8001992:	4249      	negs	r1, r1
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	1a5b      	subs	r3, r3, r1
 8001998:	4698      	mov	r8, r3
 800199a:	0004      	movs	r4, r0
 800199c:	e584      	b.n	80014a8 <__aeabi_dadd+0xf4>
 800199e:	4663      	mov	r3, ip
 80019a0:	08f9      	lsrs	r1, r7, #3
 80019a2:	075a      	lsls	r2, r3, #29
 80019a4:	4311      	orrs	r1, r2
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	e64e      	b.n	8001648 <__aeabi_dadd+0x294>
 80019aa:	08f9      	lsrs	r1, r7, #3
 80019ac:	0768      	lsls	r0, r5, #29
 80019ae:	4301      	orrs	r1, r0
 80019b0:	08eb      	lsrs	r3, r5, #3
 80019b2:	e624      	b.n	80015fe <__aeabi_dadd+0x24a>
 80019b4:	4662      	mov	r2, ip
 80019b6:	433a      	orrs	r2, r7
 80019b8:	d100      	bne.n	80019bc <__aeabi_dadd+0x608>
 80019ba:	e698      	b.n	80016ee <__aeabi_dadd+0x33a>
 80019bc:	464a      	mov	r2, r9
 80019be:	08d1      	lsrs	r1, r2, #3
 80019c0:	075a      	lsls	r2, r3, #29
 80019c2:	4311      	orrs	r1, r2
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	031b      	lsls	r3, r3, #12
 80019ca:	421a      	tst	r2, r3
 80019cc:	d008      	beq.n	80019e0 <__aeabi_dadd+0x62c>
 80019ce:	4660      	mov	r0, ip
 80019d0:	08c5      	lsrs	r5, r0, #3
 80019d2:	421d      	tst	r5, r3
 80019d4:	d104      	bne.n	80019e0 <__aeabi_dadd+0x62c>
 80019d6:	4654      	mov	r4, sl
 80019d8:	002a      	movs	r2, r5
 80019da:	08f9      	lsrs	r1, r7, #3
 80019dc:	0743      	lsls	r3, r0, #29
 80019de:	4319      	orrs	r1, r3
 80019e0:	0f4b      	lsrs	r3, r1, #29
 80019e2:	00c9      	lsls	r1, r1, #3
 80019e4:	075b      	lsls	r3, r3, #29
 80019e6:	08c9      	lsrs	r1, r1, #3
 80019e8:	4319      	orrs	r1, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	e62c      	b.n	8001648 <__aeabi_dadd+0x294>
 80019ee:	4641      	mov	r1, r8
 80019f0:	4329      	orrs	r1, r5
 80019f2:	d000      	beq.n	80019f6 <__aeabi_dadd+0x642>
 80019f4:	e5fa      	b.n	80015ec <__aeabi_dadd+0x238>
 80019f6:	2300      	movs	r3, #0
 80019f8:	000a      	movs	r2, r1
 80019fa:	2400      	movs	r4, #0
 80019fc:	e602      	b.n	8001604 <__aeabi_dadd+0x250>
 80019fe:	076b      	lsls	r3, r5, #29
 8001a00:	08f9      	lsrs	r1, r7, #3
 8001a02:	4319      	orrs	r1, r3
 8001a04:	08eb      	lsrs	r3, r5, #3
 8001a06:	e5fd      	b.n	8001604 <__aeabi_dadd+0x250>
 8001a08:	4663      	mov	r3, ip
 8001a0a:	08f9      	lsrs	r1, r7, #3
 8001a0c:	075b      	lsls	r3, r3, #29
 8001a0e:	4319      	orrs	r1, r3
 8001a10:	4663      	mov	r3, ip
 8001a12:	0004      	movs	r4, r0
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	e617      	b.n	8001648 <__aeabi_dadd+0x294>
 8001a18:	003d      	movs	r5, r7
 8001a1a:	444d      	add	r5, r9
 8001a1c:	4463      	add	r3, ip
 8001a1e:	454d      	cmp	r5, r9
 8001a20:	4189      	sbcs	r1, r1
 8001a22:	4698      	mov	r8, r3
 8001a24:	4249      	negs	r1, r1
 8001a26:	4488      	add	r8, r1
 8001a28:	4643      	mov	r3, r8
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	d400      	bmi.n	8001a30 <__aeabi_dadd+0x67c>
 8001a2e:	e5dd      	b.n	80015ec <__aeabi_dadd+0x238>
 8001a30:	4642      	mov	r2, r8
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <__aeabi_dadd+0x6d0>)
 8001a34:	2601      	movs	r6, #1
 8001a36:	401a      	ands	r2, r3
 8001a38:	4690      	mov	r8, r2
 8001a3a:	e5d7      	b.n	80015ec <__aeabi_dadd+0x238>
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	001e      	movs	r6, r3
 8001a40:	3820      	subs	r0, #32
 8001a42:	40c6      	lsrs	r6, r0
 8001a44:	2a20      	cmp	r2, #32
 8001a46:	d005      	beq.n	8001a54 <__aeabi_dadd+0x6a0>
 8001a48:	2040      	movs	r0, #64	; 0x40
 8001a4a:	1a82      	subs	r2, r0, r2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	464a      	mov	r2, r9
 8001a50:	431a      	orrs	r2, r3
 8001a52:	4691      	mov	r9, r2
 8001a54:	464d      	mov	r5, r9
 8001a56:	1e6b      	subs	r3, r5, #1
 8001a58:	419d      	sbcs	r5, r3
 8001a5a:	4335      	orrs	r5, r6
 8001a5c:	e621      	b.n	80016a2 <__aeabi_dadd+0x2ee>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	2300      	movs	r3, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	e540      	b.n	80014e8 <__aeabi_dadd+0x134>
 8001a66:	464a      	mov	r2, r9
 8001a68:	19d5      	adds	r5, r2, r7
 8001a6a:	42bd      	cmp	r5, r7
 8001a6c:	4189      	sbcs	r1, r1
 8001a6e:	4463      	add	r3, ip
 8001a70:	4698      	mov	r8, r3
 8001a72:	4249      	negs	r1, r1
 8001a74:	4488      	add	r8, r1
 8001a76:	e5b3      	b.n	80015e0 <__aeabi_dadd+0x22c>
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4a01      	ldr	r2, [pc, #4]	; (8001a80 <__aeabi_dadd+0x6cc>)
 8001a7c:	000b      	movs	r3, r1
 8001a7e:	e533      	b.n	80014e8 <__aeabi_dadd+0x134>
 8001a80:	000007ff 	.word	0x000007ff
 8001a84:	ff7fffff 	.word	0xff7fffff

08001a88 <__aeabi_ddiv>:
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	4657      	mov	r7, sl
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	4645      	mov	r5, r8
 8001a90:	46de      	mov	lr, fp
 8001a92:	b5e0      	push	{r5, r6, r7, lr}
 8001a94:	4681      	mov	r9, r0
 8001a96:	0005      	movs	r5, r0
 8001a98:	030c      	lsls	r4, r1, #12
 8001a9a:	0048      	lsls	r0, r1, #1
 8001a9c:	4692      	mov	sl, r2
 8001a9e:	001f      	movs	r7, r3
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	0b24      	lsrs	r4, r4, #12
 8001aa4:	0d40      	lsrs	r0, r0, #21
 8001aa6:	0fce      	lsrs	r6, r1, #31
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d059      	beq.n	8001b60 <__aeabi_ddiv+0xd8>
 8001aac:	4b87      	ldr	r3, [pc, #540]	; (8001ccc <__aeabi_ddiv+0x244>)
 8001aae:	4298      	cmp	r0, r3
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_ddiv+0x2c>
 8001ab2:	e098      	b.n	8001be6 <__aeabi_ddiv+0x15e>
 8001ab4:	0f6b      	lsrs	r3, r5, #29
 8001ab6:	00e4      	lsls	r4, r4, #3
 8001ab8:	431c      	orrs	r4, r3
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <__aeabi_ddiv+0x248>)
 8001ac4:	00ed      	lsls	r5, r5, #3
 8001ac6:	469b      	mov	fp, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4699      	mov	r9, r3
 8001acc:	4483      	add	fp, r0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	033c      	lsls	r4, r7, #12
 8001ad2:	007b      	lsls	r3, r7, #1
 8001ad4:	4650      	mov	r0, sl
 8001ad6:	0b24      	lsrs	r4, r4, #12
 8001ad8:	0d5b      	lsrs	r3, r3, #21
 8001ada:	0fff      	lsrs	r7, r7, #31
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d067      	beq.n	8001bb0 <__aeabi_ddiv+0x128>
 8001ae0:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <__aeabi_ddiv+0x244>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d018      	beq.n	8001b18 <__aeabi_ddiv+0x90>
 8001ae6:	497a      	ldr	r1, [pc, #488]	; (8001cd0 <__aeabi_ddiv+0x248>)
 8001ae8:	0f42      	lsrs	r2, r0, #29
 8001aea:	468c      	mov	ip, r1
 8001aec:	00e4      	lsls	r4, r4, #3
 8001aee:	4659      	mov	r1, fp
 8001af0:	4314      	orrs	r4, r2
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	4463      	add	r3, ip
 8001af6:	0412      	lsls	r2, r2, #16
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	4314      	orrs	r4, r2
 8001afc:	469b      	mov	fp, r3
 8001afe:	00c2      	lsls	r2, r0, #3
 8001b00:	2000      	movs	r0, #0
 8001b02:	0033      	movs	r3, r6
 8001b04:	407b      	eors	r3, r7
 8001b06:	469a      	mov	sl, r3
 8001b08:	464b      	mov	r3, r9
 8001b0a:	2b0f      	cmp	r3, #15
 8001b0c:	d900      	bls.n	8001b10 <__aeabi_ddiv+0x88>
 8001b0e:	e0ef      	b.n	8001cf0 <__aeabi_ddiv+0x268>
 8001b10:	4970      	ldr	r1, [pc, #448]	; (8001cd4 <__aeabi_ddiv+0x24c>)
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	58cb      	ldr	r3, [r1, r3]
 8001b16:	469f      	mov	pc, r3
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <__aeabi_ddiv+0x250>)
 8001b1a:	4652      	mov	r2, sl
 8001b1c:	469c      	mov	ip, r3
 8001b1e:	4322      	orrs	r2, r4
 8001b20:	44e3      	add	fp, ip
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	d000      	beq.n	8001b28 <__aeabi_ddiv+0xa0>
 8001b26:	e095      	b.n	8001c54 <__aeabi_ddiv+0x1cc>
 8001b28:	4649      	mov	r1, r9
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	4319      	orrs	r1, r3
 8001b2e:	4689      	mov	r9, r1
 8001b30:	2400      	movs	r4, #0
 8001b32:	2002      	movs	r0, #2
 8001b34:	e7e5      	b.n	8001b02 <__aeabi_ddiv+0x7a>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2400      	movs	r4, #0
 8001b3a:	2500      	movs	r5, #0
 8001b3c:	4652      	mov	r2, sl
 8001b3e:	051b      	lsls	r3, r3, #20
 8001b40:	4323      	orrs	r3, r4
 8001b42:	07d2      	lsls	r2, r2, #31
 8001b44:	4313      	orrs	r3, r2
 8001b46:	0028      	movs	r0, r5
 8001b48:	0019      	movs	r1, r3
 8001b4a:	b005      	add	sp, #20
 8001b4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b4e:	46bb      	mov	fp, r7
 8001b50:	46b2      	mov	sl, r6
 8001b52:	46a9      	mov	r9, r5
 8001b54:	46a0      	mov	r8, r4
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b58:	2400      	movs	r4, #0
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ccc <__aeabi_ddiv+0x244>)
 8001b5e:	e7ed      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 8001b60:	464b      	mov	r3, r9
 8001b62:	4323      	orrs	r3, r4
 8001b64:	4698      	mov	r8, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0xe2>
 8001b68:	e089      	b.n	8001c7e <__aeabi_ddiv+0x1f6>
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0xe8>
 8001b6e:	e1e0      	b.n	8001f32 <__aeabi_ddiv+0x4aa>
 8001b70:	0020      	movs	r0, r4
 8001b72:	f001 fb41 	bl	80031f8 <__clzsi2>
 8001b76:	0001      	movs	r1, r0
 8001b78:	0002      	movs	r2, r0
 8001b7a:	390b      	subs	r1, #11
 8001b7c:	231d      	movs	r3, #29
 8001b7e:	1a5b      	subs	r3, r3, r1
 8001b80:	4649      	mov	r1, r9
 8001b82:	0010      	movs	r0, r2
 8001b84:	40d9      	lsrs	r1, r3
 8001b86:	3808      	subs	r0, #8
 8001b88:	4084      	lsls	r4, r0
 8001b8a:	000b      	movs	r3, r1
 8001b8c:	464d      	mov	r5, r9
 8001b8e:	4323      	orrs	r3, r4
 8001b90:	4698      	mov	r8, r3
 8001b92:	4085      	lsls	r5, r0
 8001b94:	4851      	ldr	r0, [pc, #324]	; (8001cdc <__aeabi_ddiv+0x254>)
 8001b96:	033c      	lsls	r4, r7, #12
 8001b98:	1a83      	subs	r3, r0, r2
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4699      	mov	r9, r3
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	007b      	lsls	r3, r7, #1
 8001ba4:	4650      	mov	r0, sl
 8001ba6:	0b24      	lsrs	r4, r4, #12
 8001ba8:	0d5b      	lsrs	r3, r3, #21
 8001baa:	0fff      	lsrs	r7, r7, #31
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d197      	bne.n	8001ae0 <__aeabi_ddiv+0x58>
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	4322      	orrs	r2, r4
 8001bb4:	d055      	beq.n	8001c62 <__aeabi_ddiv+0x1da>
 8001bb6:	2c00      	cmp	r4, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0x134>
 8001bba:	e1ca      	b.n	8001f52 <__aeabi_ddiv+0x4ca>
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	f001 fb1b 	bl	80031f8 <__clzsi2>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	3a0b      	subs	r2, #11
 8001bc6:	231d      	movs	r3, #29
 8001bc8:	0001      	movs	r1, r0
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	4652      	mov	r2, sl
 8001bce:	3908      	subs	r1, #8
 8001bd0:	40da      	lsrs	r2, r3
 8001bd2:	408c      	lsls	r4, r1
 8001bd4:	4314      	orrs	r4, r2
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	408a      	lsls	r2, r1
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <__aeabi_ddiv+0x258>)
 8001bdc:	4458      	add	r0, fp
 8001bde:	469b      	mov	fp, r3
 8001be0:	4483      	add	fp, r0
 8001be2:	2000      	movs	r0, #0
 8001be4:	e78d      	b.n	8001b02 <__aeabi_ddiv+0x7a>
 8001be6:	464b      	mov	r3, r9
 8001be8:	4323      	orrs	r3, r4
 8001bea:	4698      	mov	r8, r3
 8001bec:	d140      	bne.n	8001c70 <__aeabi_ddiv+0x1e8>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	3b06      	subs	r3, #6
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	4683      	mov	fp, r0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	e769      	b.n	8001ad0 <__aeabi_ddiv+0x48>
 8001bfc:	46b2      	mov	sl, r6
 8001bfe:	9b00      	ldr	r3, [sp, #0]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d0a9      	beq.n	8001b58 <__aeabi_ddiv+0xd0>
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d100      	bne.n	8001c0a <__aeabi_ddiv+0x182>
 8001c08:	e211      	b.n	800202e <__aeabi_ddiv+0x5a6>
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d093      	beq.n	8001b36 <__aeabi_ddiv+0xae>
 8001c0e:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <__aeabi_ddiv+0x25c>)
 8001c10:	445a      	add	r2, fp
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	dc00      	bgt.n	8001c18 <__aeabi_ddiv+0x190>
 8001c16:	e13c      	b.n	8001e92 <__aeabi_ddiv+0x40a>
 8001c18:	076b      	lsls	r3, r5, #29
 8001c1a:	d000      	beq.n	8001c1e <__aeabi_ddiv+0x196>
 8001c1c:	e1a7      	b.n	8001f6e <__aeabi_ddiv+0x4e6>
 8001c1e:	08ed      	lsrs	r5, r5, #3
 8001c20:	4643      	mov	r3, r8
 8001c22:	01db      	lsls	r3, r3, #7
 8001c24:	d506      	bpl.n	8001c34 <__aeabi_ddiv+0x1ac>
 8001c26:	4642      	mov	r2, r8
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <__aeabi_ddiv+0x260>)
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	00d2      	lsls	r2, r2, #3
 8001c32:	445a      	add	r2, fp
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <__aeabi_ddiv+0x264>)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dc8e      	bgt.n	8001b58 <__aeabi_ddiv+0xd0>
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	0552      	lsls	r2, r2, #21
 8001c3e:	0758      	lsls	r0, r3, #29
 8001c40:	025c      	lsls	r4, r3, #9
 8001c42:	4305      	orrs	r5, r0
 8001c44:	0b24      	lsrs	r4, r4, #12
 8001c46:	0d53      	lsrs	r3, r2, #21
 8001c48:	e778      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 8001c4a:	46ba      	mov	sl, r7
 8001c4c:	46a0      	mov	r8, r4
 8001c4e:	0015      	movs	r5, r2
 8001c50:	9000      	str	r0, [sp, #0]
 8001c52:	e7d4      	b.n	8001bfe <__aeabi_ddiv+0x176>
 8001c54:	464a      	mov	r2, r9
 8001c56:	2303      	movs	r3, #3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	4691      	mov	r9, r2
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	4652      	mov	r2, sl
 8001c60:	e74f      	b.n	8001b02 <__aeabi_ddiv+0x7a>
 8001c62:	4649      	mov	r1, r9
 8001c64:	2301      	movs	r3, #1
 8001c66:	4319      	orrs	r1, r3
 8001c68:	4689      	mov	r9, r1
 8001c6a:	2400      	movs	r4, #0
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	e748      	b.n	8001b02 <__aeabi_ddiv+0x7a>
 8001c70:	230c      	movs	r3, #12
 8001c72:	4699      	mov	r9, r3
 8001c74:	3b09      	subs	r3, #9
 8001c76:	46a0      	mov	r8, r4
 8001c78:	4683      	mov	fp, r0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	e728      	b.n	8001ad0 <__aeabi_ddiv+0x48>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	4699      	mov	r9, r3
 8001c82:	2300      	movs	r3, #0
 8001c84:	469b      	mov	fp, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	2500      	movs	r5, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	e720      	b.n	8001ad0 <__aeabi_ddiv+0x48>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2480      	movs	r4, #128	; 0x80
 8001c92:	469a      	mov	sl, r3
 8001c94:	2500      	movs	r5, #0
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <__aeabi_ddiv+0x244>)
 8001c98:	0324      	lsls	r4, r4, #12
 8001c9a:	e74f      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	4641      	mov	r1, r8
 8001ca0:	031b      	lsls	r3, r3, #12
 8001ca2:	4219      	tst	r1, r3
 8001ca4:	d008      	beq.n	8001cb8 <__aeabi_ddiv+0x230>
 8001ca6:	421c      	tst	r4, r3
 8001ca8:	d106      	bne.n	8001cb8 <__aeabi_ddiv+0x230>
 8001caa:	431c      	orrs	r4, r3
 8001cac:	0324      	lsls	r4, r4, #12
 8001cae:	46ba      	mov	sl, r7
 8001cb0:	0015      	movs	r5, r2
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <__aeabi_ddiv+0x244>)
 8001cb4:	0b24      	lsrs	r4, r4, #12
 8001cb6:	e741      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 8001cb8:	2480      	movs	r4, #128	; 0x80
 8001cba:	4643      	mov	r3, r8
 8001cbc:	0324      	lsls	r4, r4, #12
 8001cbe:	431c      	orrs	r4, r3
 8001cc0:	0324      	lsls	r4, r4, #12
 8001cc2:	46b2      	mov	sl, r6
 8001cc4:	4b01      	ldr	r3, [pc, #4]	; (8001ccc <__aeabi_ddiv+0x244>)
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	e738      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	000007ff 	.word	0x000007ff
 8001cd0:	fffffc01 	.word	0xfffffc01
 8001cd4:	0800d58c 	.word	0x0800d58c
 8001cd8:	fffff801 	.word	0xfffff801
 8001cdc:	fffffc0d 	.word	0xfffffc0d
 8001ce0:	000003f3 	.word	0x000003f3
 8001ce4:	000003ff 	.word	0x000003ff
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	4544      	cmp	r4, r8
 8001cf2:	d200      	bcs.n	8001cf6 <__aeabi_ddiv+0x26e>
 8001cf4:	e116      	b.n	8001f24 <__aeabi_ddiv+0x49c>
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_ddiv+0x272>
 8001cf8:	e111      	b.n	8001f1e <__aeabi_ddiv+0x496>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	469c      	mov	ip, r3
 8001d00:	002e      	movs	r6, r5
 8001d02:	4640      	mov	r0, r8
 8001d04:	2500      	movs	r5, #0
 8001d06:	44e3      	add	fp, ip
 8001d08:	0223      	lsls	r3, r4, #8
 8001d0a:	0e14      	lsrs	r4, r2, #24
 8001d0c:	431c      	orrs	r4, r3
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	4699      	mov	r9, r3
 8001d12:	0423      	lsls	r3, r4, #16
 8001d14:	0c1f      	lsrs	r7, r3, #16
 8001d16:	0212      	lsls	r2, r2, #8
 8001d18:	4649      	mov	r1, r9
 8001d1a:	9200      	str	r2, [sp, #0]
 8001d1c:	9701      	str	r7, [sp, #4]
 8001d1e:	f7fe fa81 	bl	8000224 <__aeabi_uidivmod>
 8001d22:	0002      	movs	r2, r0
 8001d24:	437a      	muls	r2, r7
 8001d26:	040b      	lsls	r3, r1, #16
 8001d28:	0c31      	lsrs	r1, r6, #16
 8001d2a:	4680      	mov	r8, r0
 8001d2c:	4319      	orrs	r1, r3
 8001d2e:	428a      	cmp	r2, r1
 8001d30:	d90b      	bls.n	8001d4a <__aeabi_ddiv+0x2c2>
 8001d32:	2301      	movs	r3, #1
 8001d34:	425b      	negs	r3, r3
 8001d36:	469c      	mov	ip, r3
 8001d38:	1909      	adds	r1, r1, r4
 8001d3a:	44e0      	add	r8, ip
 8001d3c:	428c      	cmp	r4, r1
 8001d3e:	d804      	bhi.n	8001d4a <__aeabi_ddiv+0x2c2>
 8001d40:	428a      	cmp	r2, r1
 8001d42:	d902      	bls.n	8001d4a <__aeabi_ddiv+0x2c2>
 8001d44:	1e83      	subs	r3, r0, #2
 8001d46:	4698      	mov	r8, r3
 8001d48:	1909      	adds	r1, r1, r4
 8001d4a:	1a88      	subs	r0, r1, r2
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	f7fe fa69 	bl	8000224 <__aeabi_uidivmod>
 8001d52:	0409      	lsls	r1, r1, #16
 8001d54:	468c      	mov	ip, r1
 8001d56:	0431      	lsls	r1, r6, #16
 8001d58:	4666      	mov	r6, ip
 8001d5a:	9a01      	ldr	r2, [sp, #4]
 8001d5c:	0c09      	lsrs	r1, r1, #16
 8001d5e:	4342      	muls	r2, r0
 8001d60:	0003      	movs	r3, r0
 8001d62:	4331      	orrs	r1, r6
 8001d64:	428a      	cmp	r2, r1
 8001d66:	d904      	bls.n	8001d72 <__aeabi_ddiv+0x2ea>
 8001d68:	1909      	adds	r1, r1, r4
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	428c      	cmp	r4, r1
 8001d6e:	d800      	bhi.n	8001d72 <__aeabi_ddiv+0x2ea>
 8001d70:	e111      	b.n	8001f96 <__aeabi_ddiv+0x50e>
 8001d72:	1a89      	subs	r1, r1, r2
 8001d74:	4642      	mov	r2, r8
 8001d76:	9e00      	ldr	r6, [sp, #0]
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	0c33      	lsrs	r3, r6, #16
 8001d7e:	001f      	movs	r7, r3
 8001d80:	0c10      	lsrs	r0, r2, #16
 8001d82:	4690      	mov	r8, r2
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	0413      	lsls	r3, r2, #16
 8001d88:	0432      	lsls	r2, r6, #16
 8001d8a:	0c16      	lsrs	r6, r2, #16
 8001d8c:	0032      	movs	r2, r6
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	435a      	muls	r2, r3
 8001d92:	9603      	str	r6, [sp, #12]
 8001d94:	437b      	muls	r3, r7
 8001d96:	4346      	muls	r6, r0
 8001d98:	4378      	muls	r0, r7
 8001d9a:	0c17      	lsrs	r7, r2, #16
 8001d9c:	46bc      	mov	ip, r7
 8001d9e:	199b      	adds	r3, r3, r6
 8001da0:	4463      	add	r3, ip
 8001da2:	429e      	cmp	r6, r3
 8001da4:	d903      	bls.n	8001dae <__aeabi_ddiv+0x326>
 8001da6:	2680      	movs	r6, #128	; 0x80
 8001da8:	0276      	lsls	r6, r6, #9
 8001daa:	46b4      	mov	ip, r6
 8001dac:	4460      	add	r0, ip
 8001dae:	0c1e      	lsrs	r6, r3, #16
 8001db0:	1830      	adds	r0, r6, r0
 8001db2:	0416      	lsls	r6, r2, #16
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c36      	lsrs	r6, r6, #16
 8001db8:	199e      	adds	r6, r3, r6
 8001dba:	4281      	cmp	r1, r0
 8001dbc:	d200      	bcs.n	8001dc0 <__aeabi_ddiv+0x338>
 8001dbe:	e09c      	b.n	8001efa <__aeabi_ddiv+0x472>
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_ddiv+0x33c>
 8001dc2:	e097      	b.n	8001ef4 <__aeabi_ddiv+0x46c>
 8001dc4:	1bae      	subs	r6, r5, r6
 8001dc6:	1a09      	subs	r1, r1, r0
 8001dc8:	42b5      	cmp	r5, r6
 8001dca:	4180      	sbcs	r0, r0
 8001dcc:	4240      	negs	r0, r0
 8001dce:	1a08      	subs	r0, r1, r0
 8001dd0:	4284      	cmp	r4, r0
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_ddiv+0x34e>
 8001dd4:	e111      	b.n	8001ffa <__aeabi_ddiv+0x572>
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	f7fe fa24 	bl	8000224 <__aeabi_uidivmod>
 8001ddc:	9a01      	ldr	r2, [sp, #4]
 8001dde:	040b      	lsls	r3, r1, #16
 8001de0:	4342      	muls	r2, r0
 8001de2:	0c31      	lsrs	r1, r6, #16
 8001de4:	0005      	movs	r5, r0
 8001de6:	4319      	orrs	r1, r3
 8001de8:	428a      	cmp	r2, r1
 8001dea:	d907      	bls.n	8001dfc <__aeabi_ddiv+0x374>
 8001dec:	1909      	adds	r1, r1, r4
 8001dee:	3d01      	subs	r5, #1
 8001df0:	428c      	cmp	r4, r1
 8001df2:	d803      	bhi.n	8001dfc <__aeabi_ddiv+0x374>
 8001df4:	428a      	cmp	r2, r1
 8001df6:	d901      	bls.n	8001dfc <__aeabi_ddiv+0x374>
 8001df8:	1e85      	subs	r5, r0, #2
 8001dfa:	1909      	adds	r1, r1, r4
 8001dfc:	1a88      	subs	r0, r1, r2
 8001dfe:	4649      	mov	r1, r9
 8001e00:	f7fe fa10 	bl	8000224 <__aeabi_uidivmod>
 8001e04:	0409      	lsls	r1, r1, #16
 8001e06:	468c      	mov	ip, r1
 8001e08:	0431      	lsls	r1, r6, #16
 8001e0a:	4666      	mov	r6, ip
 8001e0c:	9a01      	ldr	r2, [sp, #4]
 8001e0e:	0c09      	lsrs	r1, r1, #16
 8001e10:	4342      	muls	r2, r0
 8001e12:	0003      	movs	r3, r0
 8001e14:	4331      	orrs	r1, r6
 8001e16:	428a      	cmp	r2, r1
 8001e18:	d907      	bls.n	8001e2a <__aeabi_ddiv+0x3a2>
 8001e1a:	1909      	adds	r1, r1, r4
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	428c      	cmp	r4, r1
 8001e20:	d803      	bhi.n	8001e2a <__aeabi_ddiv+0x3a2>
 8001e22:	428a      	cmp	r2, r1
 8001e24:	d901      	bls.n	8001e2a <__aeabi_ddiv+0x3a2>
 8001e26:	1e83      	subs	r3, r0, #2
 8001e28:	1909      	adds	r1, r1, r4
 8001e2a:	9e03      	ldr	r6, [sp, #12]
 8001e2c:	1a89      	subs	r1, r1, r2
 8001e2e:	0032      	movs	r2, r6
 8001e30:	042d      	lsls	r5, r5, #16
 8001e32:	431d      	orrs	r5, r3
 8001e34:	9f02      	ldr	r7, [sp, #8]
 8001e36:	042b      	lsls	r3, r5, #16
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	435a      	muls	r2, r3
 8001e3c:	437b      	muls	r3, r7
 8001e3e:	469c      	mov	ip, r3
 8001e40:	0c28      	lsrs	r0, r5, #16
 8001e42:	4346      	muls	r6, r0
 8001e44:	0c13      	lsrs	r3, r2, #16
 8001e46:	44b4      	add	ip, r6
 8001e48:	4463      	add	r3, ip
 8001e4a:	4378      	muls	r0, r7
 8001e4c:	429e      	cmp	r6, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x3d0>
 8001e50:	2680      	movs	r6, #128	; 0x80
 8001e52:	0276      	lsls	r6, r6, #9
 8001e54:	46b4      	mov	ip, r6
 8001e56:	4460      	add	r0, ip
 8001e58:	0c1e      	lsrs	r6, r3, #16
 8001e5a:	0412      	lsls	r2, r2, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c12      	lsrs	r2, r2, #16
 8001e60:	1830      	adds	r0, r6, r0
 8001e62:	189b      	adds	r3, r3, r2
 8001e64:	4281      	cmp	r1, r0
 8001e66:	d306      	bcc.n	8001e76 <__aeabi_ddiv+0x3ee>
 8001e68:	d002      	beq.n	8001e70 <__aeabi_ddiv+0x3e8>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	431d      	orrs	r5, r3
 8001e6e:	e6ce      	b.n	8001c0e <__aeabi_ddiv+0x186>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d100      	bne.n	8001e76 <__aeabi_ddiv+0x3ee>
 8001e74:	e6cb      	b.n	8001c0e <__aeabi_ddiv+0x186>
 8001e76:	1861      	adds	r1, r4, r1
 8001e78:	1e6e      	subs	r6, r5, #1
 8001e7a:	42a1      	cmp	r1, r4
 8001e7c:	d200      	bcs.n	8001e80 <__aeabi_ddiv+0x3f8>
 8001e7e:	e0a4      	b.n	8001fca <__aeabi_ddiv+0x542>
 8001e80:	4281      	cmp	r1, r0
 8001e82:	d200      	bcs.n	8001e86 <__aeabi_ddiv+0x3fe>
 8001e84:	e0c9      	b.n	800201a <__aeabi_ddiv+0x592>
 8001e86:	d100      	bne.n	8001e8a <__aeabi_ddiv+0x402>
 8001e88:	e0d9      	b.n	800203e <__aeabi_ddiv+0x5b6>
 8001e8a:	0035      	movs	r5, r6
 8001e8c:	e7ed      	b.n	8001e6a <__aeabi_ddiv+0x3e2>
 8001e8e:	2501      	movs	r5, #1
 8001e90:	426d      	negs	r5, r5
 8001e92:	2101      	movs	r1, #1
 8001e94:	1a89      	subs	r1, r1, r2
 8001e96:	2938      	cmp	r1, #56	; 0x38
 8001e98:	dd00      	ble.n	8001e9c <__aeabi_ddiv+0x414>
 8001e9a:	e64c      	b.n	8001b36 <__aeabi_ddiv+0xae>
 8001e9c:	291f      	cmp	r1, #31
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_ddiv+0x41a>
 8001ea0:	e07f      	b.n	8001fa2 <__aeabi_ddiv+0x51a>
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	1a9a      	subs	r2, r3, r2
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	40d3      	lsrs	r3, r2
 8001eac:	2920      	cmp	r1, #32
 8001eae:	d004      	beq.n	8001eba <__aeabi_ddiv+0x432>
 8001eb0:	4644      	mov	r4, r8
 8001eb2:	4a65      	ldr	r2, [pc, #404]	; (8002048 <__aeabi_ddiv+0x5c0>)
 8001eb4:	445a      	add	r2, fp
 8001eb6:	4094      	lsls	r4, r2
 8001eb8:	4325      	orrs	r5, r4
 8001eba:	1e6a      	subs	r2, r5, #1
 8001ebc:	4195      	sbcs	r5, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	432b      	orrs	r3, r5
 8001ec2:	0015      	movs	r5, r2
 8001ec4:	2400      	movs	r4, #0
 8001ec6:	401d      	ands	r5, r3
 8001ec8:	421a      	tst	r2, r3
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x446>
 8001ecc:	e0a1      	b.n	8002012 <__aeabi_ddiv+0x58a>
 8001ece:	220f      	movs	r2, #15
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	2a04      	cmp	r2, #4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x452>
 8001ed8:	e098      	b.n	800200c <__aeabi_ddiv+0x584>
 8001eda:	1d1a      	adds	r2, r3, #4
 8001edc:	429a      	cmp	r2, r3
 8001ede:	419b      	sbcs	r3, r3
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	18e4      	adds	r4, r4, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	0222      	lsls	r2, r4, #8
 8001ee8:	d400      	bmi.n	8001eec <__aeabi_ddiv+0x464>
 8001eea:	e08f      	b.n	800200c <__aeabi_ddiv+0x584>
 8001eec:	2301      	movs	r3, #1
 8001eee:	2400      	movs	r4, #0
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	e623      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 8001ef4:	42b5      	cmp	r5, r6
 8001ef6:	d300      	bcc.n	8001efa <__aeabi_ddiv+0x472>
 8001ef8:	e764      	b.n	8001dc4 <__aeabi_ddiv+0x33c>
 8001efa:	4643      	mov	r3, r8
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	9b00      	ldr	r3, [sp, #0]
 8001f00:	469c      	mov	ip, r3
 8001f02:	4465      	add	r5, ip
 8001f04:	001f      	movs	r7, r3
 8001f06:	429d      	cmp	r5, r3
 8001f08:	419b      	sbcs	r3, r3
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	191b      	adds	r3, r3, r4
 8001f0e:	18c9      	adds	r1, r1, r3
 8001f10:	428c      	cmp	r4, r1
 8001f12:	d23a      	bcs.n	8001f8a <__aeabi_ddiv+0x502>
 8001f14:	4288      	cmp	r0, r1
 8001f16:	d863      	bhi.n	8001fe0 <__aeabi_ddiv+0x558>
 8001f18:	d060      	beq.n	8001fdc <__aeabi_ddiv+0x554>
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	e752      	b.n	8001dc4 <__aeabi_ddiv+0x33c>
 8001f1e:	42aa      	cmp	r2, r5
 8001f20:	d900      	bls.n	8001f24 <__aeabi_ddiv+0x49c>
 8001f22:	e6ea      	b.n	8001cfa <__aeabi_ddiv+0x272>
 8001f24:	4643      	mov	r3, r8
 8001f26:	07de      	lsls	r6, r3, #31
 8001f28:	0858      	lsrs	r0, r3, #1
 8001f2a:	086b      	lsrs	r3, r5, #1
 8001f2c:	431e      	orrs	r6, r3
 8001f2e:	07ed      	lsls	r5, r5, #31
 8001f30:	e6ea      	b.n	8001d08 <__aeabi_ddiv+0x280>
 8001f32:	4648      	mov	r0, r9
 8001f34:	f001 f960 	bl	80031f8 <__clzsi2>
 8001f38:	0001      	movs	r1, r0
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	3115      	adds	r1, #21
 8001f3e:	3220      	adds	r2, #32
 8001f40:	291c      	cmp	r1, #28
 8001f42:	dc00      	bgt.n	8001f46 <__aeabi_ddiv+0x4be>
 8001f44:	e61a      	b.n	8001b7c <__aeabi_ddiv+0xf4>
 8001f46:	464b      	mov	r3, r9
 8001f48:	3808      	subs	r0, #8
 8001f4a:	4083      	lsls	r3, r0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	4698      	mov	r8, r3
 8001f50:	e620      	b.n	8001b94 <__aeabi_ddiv+0x10c>
 8001f52:	f001 f951 	bl	80031f8 <__clzsi2>
 8001f56:	0003      	movs	r3, r0
 8001f58:	001a      	movs	r2, r3
 8001f5a:	3215      	adds	r2, #21
 8001f5c:	3020      	adds	r0, #32
 8001f5e:	2a1c      	cmp	r2, #28
 8001f60:	dc00      	bgt.n	8001f64 <__aeabi_ddiv+0x4dc>
 8001f62:	e630      	b.n	8001bc6 <__aeabi_ddiv+0x13e>
 8001f64:	4654      	mov	r4, sl
 8001f66:	3b08      	subs	r3, #8
 8001f68:	2200      	movs	r2, #0
 8001f6a:	409c      	lsls	r4, r3
 8001f6c:	e635      	b.n	8001bda <__aeabi_ddiv+0x152>
 8001f6e:	230f      	movs	r3, #15
 8001f70:	402b      	ands	r3, r5
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d100      	bne.n	8001f78 <__aeabi_ddiv+0x4f0>
 8001f76:	e652      	b.n	8001c1e <__aeabi_ddiv+0x196>
 8001f78:	2305      	movs	r3, #5
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	42ab      	cmp	r3, r5
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	3504      	adds	r5, #4
 8001f82:	425b      	negs	r3, r3
 8001f84:	08ed      	lsrs	r5, r5, #3
 8001f86:	4498      	add	r8, r3
 8001f88:	e64a      	b.n	8001c20 <__aeabi_ddiv+0x198>
 8001f8a:	428c      	cmp	r4, r1
 8001f8c:	d1c5      	bne.n	8001f1a <__aeabi_ddiv+0x492>
 8001f8e:	42af      	cmp	r7, r5
 8001f90:	d9c0      	bls.n	8001f14 <__aeabi_ddiv+0x48c>
 8001f92:	4690      	mov	r8, r2
 8001f94:	e716      	b.n	8001dc4 <__aeabi_ddiv+0x33c>
 8001f96:	428a      	cmp	r2, r1
 8001f98:	d800      	bhi.n	8001f9c <__aeabi_ddiv+0x514>
 8001f9a:	e6ea      	b.n	8001d72 <__aeabi_ddiv+0x2ea>
 8001f9c:	1e83      	subs	r3, r0, #2
 8001f9e:	1909      	adds	r1, r1, r4
 8001fa0:	e6e7      	b.n	8001d72 <__aeabi_ddiv+0x2ea>
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <__aeabi_ddiv+0x5c4>)
 8001fa4:	0028      	movs	r0, r5
 8001fa6:	445a      	add	r2, fp
 8001fa8:	4643      	mov	r3, r8
 8001faa:	4095      	lsls	r5, r2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	40c8      	lsrs	r0, r1
 8001fb0:	1e6a      	subs	r2, r5, #1
 8001fb2:	4195      	sbcs	r5, r2
 8001fb4:	4644      	mov	r4, r8
 8001fb6:	4303      	orrs	r3, r0
 8001fb8:	432b      	orrs	r3, r5
 8001fba:	40cc      	lsrs	r4, r1
 8001fbc:	075a      	lsls	r2, r3, #29
 8001fbe:	d092      	beq.n	8001ee6 <__aeabi_ddiv+0x45e>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d188      	bne.n	8001eda <__aeabi_ddiv+0x452>
 8001fc8:	e78d      	b.n	8001ee6 <__aeabi_ddiv+0x45e>
 8001fca:	0035      	movs	r5, r6
 8001fcc:	4281      	cmp	r1, r0
 8001fce:	d000      	beq.n	8001fd2 <__aeabi_ddiv+0x54a>
 8001fd0:	e74b      	b.n	8001e6a <__aeabi_ddiv+0x3e2>
 8001fd2:	9a00      	ldr	r2, [sp, #0]
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d000      	beq.n	8001fda <__aeabi_ddiv+0x552>
 8001fd8:	e747      	b.n	8001e6a <__aeabi_ddiv+0x3e2>
 8001fda:	e618      	b.n	8001c0e <__aeabi_ddiv+0x186>
 8001fdc:	42ae      	cmp	r6, r5
 8001fde:	d99c      	bls.n	8001f1a <__aeabi_ddiv+0x492>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	469c      	mov	ip, r3
 8001fe6:	9b00      	ldr	r3, [sp, #0]
 8001fe8:	44e0      	add	r8, ip
 8001fea:	469c      	mov	ip, r3
 8001fec:	4465      	add	r5, ip
 8001fee:	429d      	cmp	r5, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	191b      	adds	r3, r3, r4
 8001ff6:	18c9      	adds	r1, r1, r3
 8001ff8:	e6e4      	b.n	8001dc4 <__aeabi_ddiv+0x33c>
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <__aeabi_ddiv+0x5c8>)
 8001ffc:	445a      	add	r2, fp
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	dc00      	bgt.n	8002004 <__aeabi_ddiv+0x57c>
 8002002:	e744      	b.n	8001e8e <__aeabi_ddiv+0x406>
 8002004:	2301      	movs	r3, #1
 8002006:	2500      	movs	r5, #0
 8002008:	4498      	add	r8, r3
 800200a:	e609      	b.n	8001c20 <__aeabi_ddiv+0x198>
 800200c:	0765      	lsls	r5, r4, #29
 800200e:	0264      	lsls	r4, r4, #9
 8002010:	0b24      	lsrs	r4, r4, #12
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	431d      	orrs	r5, r3
 8002016:	2300      	movs	r3, #0
 8002018:	e590      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 800201a:	9e00      	ldr	r6, [sp, #0]
 800201c:	3d02      	subs	r5, #2
 800201e:	0072      	lsls	r2, r6, #1
 8002020:	42b2      	cmp	r2, r6
 8002022:	41bf      	sbcs	r7, r7
 8002024:	427f      	negs	r7, r7
 8002026:	193c      	adds	r4, r7, r4
 8002028:	1909      	adds	r1, r1, r4
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	e7ce      	b.n	8001fcc <__aeabi_ddiv+0x544>
 800202e:	2480      	movs	r4, #128	; 0x80
 8002030:	4643      	mov	r3, r8
 8002032:	0324      	lsls	r4, r4, #12
 8002034:	431c      	orrs	r4, r3
 8002036:	0324      	lsls	r4, r4, #12
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <__aeabi_ddiv+0x5cc>)
 800203a:	0b24      	lsrs	r4, r4, #12
 800203c:	e57e      	b.n	8001b3c <__aeabi_ddiv+0xb4>
 800203e:	9a00      	ldr	r2, [sp, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d3ea      	bcc.n	800201a <__aeabi_ddiv+0x592>
 8002044:	0035      	movs	r5, r6
 8002046:	e7c4      	b.n	8001fd2 <__aeabi_ddiv+0x54a>
 8002048:	0000043e 	.word	0x0000043e
 800204c:	0000041e 	.word	0x0000041e
 8002050:	000003ff 	.word	0x000003ff
 8002054:	000007ff 	.word	0x000007ff

08002058 <__eqdf2>:
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	464f      	mov	r7, r9
 800205c:	4646      	mov	r6, r8
 800205e:	46d6      	mov	lr, sl
 8002060:	4694      	mov	ip, r2
 8002062:	4691      	mov	r9, r2
 8002064:	031a      	lsls	r2, r3, #12
 8002066:	0b12      	lsrs	r2, r2, #12
 8002068:	4d18      	ldr	r5, [pc, #96]	; (80020cc <__eqdf2+0x74>)
 800206a:	b5c0      	push	{r6, r7, lr}
 800206c:	004c      	lsls	r4, r1, #1
 800206e:	030f      	lsls	r7, r1, #12
 8002070:	4692      	mov	sl, r2
 8002072:	005a      	lsls	r2, r3, #1
 8002074:	0006      	movs	r6, r0
 8002076:	4680      	mov	r8, r0
 8002078:	0b3f      	lsrs	r7, r7, #12
 800207a:	2001      	movs	r0, #1
 800207c:	0d64      	lsrs	r4, r4, #21
 800207e:	0fc9      	lsrs	r1, r1, #31
 8002080:	0d52      	lsrs	r2, r2, #21
 8002082:	0fdb      	lsrs	r3, r3, #31
 8002084:	42ac      	cmp	r4, r5
 8002086:	d00a      	beq.n	800209e <__eqdf2+0x46>
 8002088:	42aa      	cmp	r2, r5
 800208a:	d003      	beq.n	8002094 <__eqdf2+0x3c>
 800208c:	4294      	cmp	r4, r2
 800208e:	d101      	bne.n	8002094 <__eqdf2+0x3c>
 8002090:	4557      	cmp	r7, sl
 8002092:	d00d      	beq.n	80020b0 <__eqdf2+0x58>
 8002094:	bce0      	pop	{r5, r6, r7}
 8002096:	46ba      	mov	sl, r7
 8002098:	46b1      	mov	r9, r6
 800209a:	46a8      	mov	r8, r5
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209e:	003d      	movs	r5, r7
 80020a0:	4335      	orrs	r5, r6
 80020a2:	d1f7      	bne.n	8002094 <__eqdf2+0x3c>
 80020a4:	42a2      	cmp	r2, r4
 80020a6:	d1f5      	bne.n	8002094 <__eqdf2+0x3c>
 80020a8:	4652      	mov	r2, sl
 80020aa:	4665      	mov	r5, ip
 80020ac:	432a      	orrs	r2, r5
 80020ae:	d1f1      	bne.n	8002094 <__eqdf2+0x3c>
 80020b0:	2001      	movs	r0, #1
 80020b2:	45c8      	cmp	r8, r9
 80020b4:	d1ee      	bne.n	8002094 <__eqdf2+0x3c>
 80020b6:	4299      	cmp	r1, r3
 80020b8:	d006      	beq.n	80020c8 <__eqdf2+0x70>
 80020ba:	2c00      	cmp	r4, #0
 80020bc:	d1ea      	bne.n	8002094 <__eqdf2+0x3c>
 80020be:	433e      	orrs	r6, r7
 80020c0:	0030      	movs	r0, r6
 80020c2:	1e46      	subs	r6, r0, #1
 80020c4:	41b0      	sbcs	r0, r6
 80020c6:	e7e5      	b.n	8002094 <__eqdf2+0x3c>
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7e3      	b.n	8002094 <__eqdf2+0x3c>
 80020cc:	000007ff 	.word	0x000007ff

080020d0 <__gedf2>:
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	464e      	mov	r6, r9
 80020d4:	4645      	mov	r5, r8
 80020d6:	4657      	mov	r7, sl
 80020d8:	46de      	mov	lr, fp
 80020da:	0004      	movs	r4, r0
 80020dc:	0018      	movs	r0, r3
 80020de:	b5e0      	push	{r5, r6, r7, lr}
 80020e0:	0016      	movs	r6, r2
 80020e2:	031b      	lsls	r3, r3, #12
 80020e4:	0b1b      	lsrs	r3, r3, #12
 80020e6:	4d32      	ldr	r5, [pc, #200]	; (80021b0 <__gedf2+0xe0>)
 80020e8:	030f      	lsls	r7, r1, #12
 80020ea:	004a      	lsls	r2, r1, #1
 80020ec:	4699      	mov	r9, r3
 80020ee:	0043      	lsls	r3, r0, #1
 80020f0:	46a4      	mov	ip, r4
 80020f2:	46b0      	mov	r8, r6
 80020f4:	0b3f      	lsrs	r7, r7, #12
 80020f6:	0d52      	lsrs	r2, r2, #21
 80020f8:	0fc9      	lsrs	r1, r1, #31
 80020fa:	0d5b      	lsrs	r3, r3, #21
 80020fc:	0fc0      	lsrs	r0, r0, #31
 80020fe:	42aa      	cmp	r2, r5
 8002100:	d029      	beq.n	8002156 <__gedf2+0x86>
 8002102:	42ab      	cmp	r3, r5
 8002104:	d018      	beq.n	8002138 <__gedf2+0x68>
 8002106:	2a00      	cmp	r2, #0
 8002108:	d12a      	bne.n	8002160 <__gedf2+0x90>
 800210a:	433c      	orrs	r4, r7
 800210c:	46a3      	mov	fp, r4
 800210e:	4265      	negs	r5, r4
 8002110:	4165      	adcs	r5, r4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <__gedf2+0x4c>
 8002116:	464c      	mov	r4, r9
 8002118:	4326      	orrs	r6, r4
 800211a:	d027      	beq.n	800216c <__gedf2+0x9c>
 800211c:	2d00      	cmp	r5, #0
 800211e:	d115      	bne.n	800214c <__gedf2+0x7c>
 8002120:	4281      	cmp	r1, r0
 8002122:	d028      	beq.n	8002176 <__gedf2+0xa6>
 8002124:	2002      	movs	r0, #2
 8002126:	3901      	subs	r1, #1
 8002128:	4008      	ands	r0, r1
 800212a:	3801      	subs	r0, #1
 800212c:	bcf0      	pop	{r4, r5, r6, r7}
 800212e:	46bb      	mov	fp, r7
 8002130:	46b2      	mov	sl, r6
 8002132:	46a9      	mov	r9, r5
 8002134:	46a0      	mov	r8, r4
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	464d      	mov	r5, r9
 800213a:	432e      	orrs	r6, r5
 800213c:	d12f      	bne.n	800219e <__gedf2+0xce>
 800213e:	2a00      	cmp	r2, #0
 8002140:	d1ee      	bne.n	8002120 <__gedf2+0x50>
 8002142:	433c      	orrs	r4, r7
 8002144:	4265      	negs	r5, r4
 8002146:	4165      	adcs	r5, r4
 8002148:	2d00      	cmp	r5, #0
 800214a:	d0e9      	beq.n	8002120 <__gedf2+0x50>
 800214c:	2800      	cmp	r0, #0
 800214e:	d1ed      	bne.n	800212c <__gedf2+0x5c>
 8002150:	2001      	movs	r0, #1
 8002152:	4240      	negs	r0, r0
 8002154:	e7ea      	b.n	800212c <__gedf2+0x5c>
 8002156:	003d      	movs	r5, r7
 8002158:	4325      	orrs	r5, r4
 800215a:	d120      	bne.n	800219e <__gedf2+0xce>
 800215c:	4293      	cmp	r3, r2
 800215e:	d0eb      	beq.n	8002138 <__gedf2+0x68>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1dd      	bne.n	8002120 <__gedf2+0x50>
 8002164:	464c      	mov	r4, r9
 8002166:	4326      	orrs	r6, r4
 8002168:	d1da      	bne.n	8002120 <__gedf2+0x50>
 800216a:	e7db      	b.n	8002124 <__gedf2+0x54>
 800216c:	465b      	mov	r3, fp
 800216e:	2000      	movs	r0, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0db      	beq.n	800212c <__gedf2+0x5c>
 8002174:	e7d6      	b.n	8002124 <__gedf2+0x54>
 8002176:	429a      	cmp	r2, r3
 8002178:	dc0a      	bgt.n	8002190 <__gedf2+0xc0>
 800217a:	dbe7      	blt.n	800214c <__gedf2+0x7c>
 800217c:	454f      	cmp	r7, r9
 800217e:	d8d1      	bhi.n	8002124 <__gedf2+0x54>
 8002180:	d010      	beq.n	80021a4 <__gedf2+0xd4>
 8002182:	2000      	movs	r0, #0
 8002184:	454f      	cmp	r7, r9
 8002186:	d2d1      	bcs.n	800212c <__gedf2+0x5c>
 8002188:	2900      	cmp	r1, #0
 800218a:	d0e1      	beq.n	8002150 <__gedf2+0x80>
 800218c:	0008      	movs	r0, r1
 800218e:	e7cd      	b.n	800212c <__gedf2+0x5c>
 8002190:	4243      	negs	r3, r0
 8002192:	4158      	adcs	r0, r3
 8002194:	2302      	movs	r3, #2
 8002196:	4240      	negs	r0, r0
 8002198:	4018      	ands	r0, r3
 800219a:	3801      	subs	r0, #1
 800219c:	e7c6      	b.n	800212c <__gedf2+0x5c>
 800219e:	2002      	movs	r0, #2
 80021a0:	4240      	negs	r0, r0
 80021a2:	e7c3      	b.n	800212c <__gedf2+0x5c>
 80021a4:	45c4      	cmp	ip, r8
 80021a6:	d8bd      	bhi.n	8002124 <__gedf2+0x54>
 80021a8:	2000      	movs	r0, #0
 80021aa:	45c4      	cmp	ip, r8
 80021ac:	d2be      	bcs.n	800212c <__gedf2+0x5c>
 80021ae:	e7eb      	b.n	8002188 <__gedf2+0xb8>
 80021b0:	000007ff 	.word	0x000007ff

080021b4 <__ledf2>:
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	464e      	mov	r6, r9
 80021b8:	4645      	mov	r5, r8
 80021ba:	4657      	mov	r7, sl
 80021bc:	46de      	mov	lr, fp
 80021be:	0004      	movs	r4, r0
 80021c0:	0018      	movs	r0, r3
 80021c2:	b5e0      	push	{r5, r6, r7, lr}
 80021c4:	0016      	movs	r6, r2
 80021c6:	031b      	lsls	r3, r3, #12
 80021c8:	0b1b      	lsrs	r3, r3, #12
 80021ca:	4d31      	ldr	r5, [pc, #196]	; (8002290 <__ledf2+0xdc>)
 80021cc:	030f      	lsls	r7, r1, #12
 80021ce:	004a      	lsls	r2, r1, #1
 80021d0:	4699      	mov	r9, r3
 80021d2:	0043      	lsls	r3, r0, #1
 80021d4:	46a4      	mov	ip, r4
 80021d6:	46b0      	mov	r8, r6
 80021d8:	0b3f      	lsrs	r7, r7, #12
 80021da:	0d52      	lsrs	r2, r2, #21
 80021dc:	0fc9      	lsrs	r1, r1, #31
 80021de:	0d5b      	lsrs	r3, r3, #21
 80021e0:	0fc0      	lsrs	r0, r0, #31
 80021e2:	42aa      	cmp	r2, r5
 80021e4:	d011      	beq.n	800220a <__ledf2+0x56>
 80021e6:	42ab      	cmp	r3, r5
 80021e8:	d014      	beq.n	8002214 <__ledf2+0x60>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d12f      	bne.n	800224e <__ledf2+0x9a>
 80021ee:	433c      	orrs	r4, r7
 80021f0:	46a3      	mov	fp, r4
 80021f2:	4265      	negs	r5, r4
 80021f4:	4165      	adcs	r5, r4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d114      	bne.n	8002224 <__ledf2+0x70>
 80021fa:	464c      	mov	r4, r9
 80021fc:	4326      	orrs	r6, r4
 80021fe:	d111      	bne.n	8002224 <__ledf2+0x70>
 8002200:	465b      	mov	r3, fp
 8002202:	2000      	movs	r0, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d017      	beq.n	8002238 <__ledf2+0x84>
 8002208:	e010      	b.n	800222c <__ledf2+0x78>
 800220a:	003d      	movs	r5, r7
 800220c:	4325      	orrs	r5, r4
 800220e:	d112      	bne.n	8002236 <__ledf2+0x82>
 8002210:	4293      	cmp	r3, r2
 8002212:	d11c      	bne.n	800224e <__ledf2+0x9a>
 8002214:	464d      	mov	r5, r9
 8002216:	432e      	orrs	r6, r5
 8002218:	d10d      	bne.n	8002236 <__ledf2+0x82>
 800221a:	2a00      	cmp	r2, #0
 800221c:	d104      	bne.n	8002228 <__ledf2+0x74>
 800221e:	433c      	orrs	r4, r7
 8002220:	4265      	negs	r5, r4
 8002222:	4165      	adcs	r5, r4
 8002224:	2d00      	cmp	r5, #0
 8002226:	d10d      	bne.n	8002244 <__ledf2+0x90>
 8002228:	4281      	cmp	r1, r0
 800222a:	d016      	beq.n	800225a <__ledf2+0xa6>
 800222c:	2002      	movs	r0, #2
 800222e:	3901      	subs	r1, #1
 8002230:	4008      	ands	r0, r1
 8002232:	3801      	subs	r0, #1
 8002234:	e000      	b.n	8002238 <__ledf2+0x84>
 8002236:	2002      	movs	r0, #2
 8002238:	bcf0      	pop	{r4, r5, r6, r7}
 800223a:	46bb      	mov	fp, r7
 800223c:	46b2      	mov	sl, r6
 800223e:	46a9      	mov	r9, r5
 8002240:	46a0      	mov	r8, r4
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002244:	2800      	cmp	r0, #0
 8002246:	d1f7      	bne.n	8002238 <__ledf2+0x84>
 8002248:	2001      	movs	r0, #1
 800224a:	4240      	negs	r0, r0
 800224c:	e7f4      	b.n	8002238 <__ledf2+0x84>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ea      	bne.n	8002228 <__ledf2+0x74>
 8002252:	464c      	mov	r4, r9
 8002254:	4326      	orrs	r6, r4
 8002256:	d1e7      	bne.n	8002228 <__ledf2+0x74>
 8002258:	e7e8      	b.n	800222c <__ledf2+0x78>
 800225a:	429a      	cmp	r2, r3
 800225c:	dd06      	ble.n	800226c <__ledf2+0xb8>
 800225e:	4243      	negs	r3, r0
 8002260:	4158      	adcs	r0, r3
 8002262:	2302      	movs	r3, #2
 8002264:	4240      	negs	r0, r0
 8002266:	4018      	ands	r0, r3
 8002268:	3801      	subs	r0, #1
 800226a:	e7e5      	b.n	8002238 <__ledf2+0x84>
 800226c:	429a      	cmp	r2, r3
 800226e:	dbe9      	blt.n	8002244 <__ledf2+0x90>
 8002270:	454f      	cmp	r7, r9
 8002272:	d8db      	bhi.n	800222c <__ledf2+0x78>
 8002274:	d006      	beq.n	8002284 <__ledf2+0xd0>
 8002276:	2000      	movs	r0, #0
 8002278:	454f      	cmp	r7, r9
 800227a:	d2dd      	bcs.n	8002238 <__ledf2+0x84>
 800227c:	2900      	cmp	r1, #0
 800227e:	d0e3      	beq.n	8002248 <__ledf2+0x94>
 8002280:	0008      	movs	r0, r1
 8002282:	e7d9      	b.n	8002238 <__ledf2+0x84>
 8002284:	45c4      	cmp	ip, r8
 8002286:	d8d1      	bhi.n	800222c <__ledf2+0x78>
 8002288:	2000      	movs	r0, #0
 800228a:	45c4      	cmp	ip, r8
 800228c:	d2d4      	bcs.n	8002238 <__ledf2+0x84>
 800228e:	e7f5      	b.n	800227c <__ledf2+0xc8>
 8002290:	000007ff 	.word	0x000007ff

08002294 <__aeabi_dmul>:
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	4657      	mov	r7, sl
 8002298:	464e      	mov	r6, r9
 800229a:	4645      	mov	r5, r8
 800229c:	46de      	mov	lr, fp
 800229e:	b5e0      	push	{r5, r6, r7, lr}
 80022a0:	4698      	mov	r8, r3
 80022a2:	030c      	lsls	r4, r1, #12
 80022a4:	004b      	lsls	r3, r1, #1
 80022a6:	0006      	movs	r6, r0
 80022a8:	4692      	mov	sl, r2
 80022aa:	b087      	sub	sp, #28
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	0fcf      	lsrs	r7, r1, #31
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <__aeabi_dmul+0xfc>
 80022b6:	4add      	ldr	r2, [pc, #884]	; (800262c <__aeabi_dmul+0x398>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <__aeabi_dmul+0x2a>
 80022bc:	e086      	b.n	80023cc <__aeabi_dmul+0x138>
 80022be:	0f42      	lsrs	r2, r0, #29
 80022c0:	00e4      	lsls	r4, r4, #3
 80022c2:	4314      	orrs	r4, r2
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	0412      	lsls	r2, r2, #16
 80022c8:	4314      	orrs	r4, r2
 80022ca:	4ad9      	ldr	r2, [pc, #868]	; (8002630 <__aeabi_dmul+0x39c>)
 80022cc:	00c5      	lsls	r5, r0, #3
 80022ce:	4694      	mov	ip, r2
 80022d0:	4463      	add	r3, ip
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	4699      	mov	r9, r3
 80022d8:	469b      	mov	fp, r3
 80022da:	4643      	mov	r3, r8
 80022dc:	4642      	mov	r2, r8
 80022de:	031e      	lsls	r6, r3, #12
 80022e0:	0fd2      	lsrs	r2, r2, #31
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4650      	mov	r0, sl
 80022e6:	4690      	mov	r8, r2
 80022e8:	0b36      	lsrs	r6, r6, #12
 80022ea:	0d5b      	lsrs	r3, r3, #21
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dmul+0x5c>
 80022ee:	e078      	b.n	80023e2 <__aeabi_dmul+0x14e>
 80022f0:	4ace      	ldr	r2, [pc, #824]	; (800262c <__aeabi_dmul+0x398>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01d      	beq.n	8002332 <__aeabi_dmul+0x9e>
 80022f6:	49ce      	ldr	r1, [pc, #824]	; (8002630 <__aeabi_dmul+0x39c>)
 80022f8:	0f42      	lsrs	r2, r0, #29
 80022fa:	468c      	mov	ip, r1
 80022fc:	9900      	ldr	r1, [sp, #0]
 80022fe:	4463      	add	r3, ip
 8002300:	00f6      	lsls	r6, r6, #3
 8002302:	468c      	mov	ip, r1
 8002304:	4316      	orrs	r6, r2
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	449c      	add	ip, r3
 800230a:	0412      	lsls	r2, r2, #16
 800230c:	4663      	mov	r3, ip
 800230e:	4316      	orrs	r6, r2
 8002310:	00c2      	lsls	r2, r0, #3
 8002312:	2000      	movs	r0, #0
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	9900      	ldr	r1, [sp, #0]
 8002318:	4643      	mov	r3, r8
 800231a:	3101      	adds	r1, #1
 800231c:	468c      	mov	ip, r1
 800231e:	4649      	mov	r1, r9
 8002320:	407b      	eors	r3, r7
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	290f      	cmp	r1, #15
 8002326:	d900      	bls.n	800232a <__aeabi_dmul+0x96>
 8002328:	e07e      	b.n	8002428 <__aeabi_dmul+0x194>
 800232a:	4bc2      	ldr	r3, [pc, #776]	; (8002634 <__aeabi_dmul+0x3a0>)
 800232c:	0089      	lsls	r1, r1, #2
 800232e:	5859      	ldr	r1, [r3, r1]
 8002330:	468f      	mov	pc, r1
 8002332:	4652      	mov	r2, sl
 8002334:	9b00      	ldr	r3, [sp, #0]
 8002336:	4332      	orrs	r2, r6
 8002338:	d000      	beq.n	800233c <__aeabi_dmul+0xa8>
 800233a:	e156      	b.n	80025ea <__aeabi_dmul+0x356>
 800233c:	49bb      	ldr	r1, [pc, #748]	; (800262c <__aeabi_dmul+0x398>)
 800233e:	2600      	movs	r6, #0
 8002340:	468c      	mov	ip, r1
 8002342:	4463      	add	r3, ip
 8002344:	4649      	mov	r1, r9
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2302      	movs	r3, #2
 800234a:	4319      	orrs	r1, r3
 800234c:	4689      	mov	r9, r1
 800234e:	2002      	movs	r0, #2
 8002350:	e7e1      	b.n	8002316 <__aeabi_dmul+0x82>
 8002352:	4643      	mov	r3, r8
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	0034      	movs	r4, r6
 8002358:	0015      	movs	r5, r2
 800235a:	4683      	mov	fp, r0
 800235c:	465b      	mov	r3, fp
 800235e:	2b02      	cmp	r3, #2
 8002360:	d05e      	beq.n	8002420 <__aeabi_dmul+0x18c>
 8002362:	2b03      	cmp	r3, #3
 8002364:	d100      	bne.n	8002368 <__aeabi_dmul+0xd4>
 8002366:	e1f3      	b.n	8002750 <__aeabi_dmul+0x4bc>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d000      	beq.n	800236e <__aeabi_dmul+0xda>
 800236c:	e118      	b.n	80025a0 <__aeabi_dmul+0x30c>
 800236e:	2200      	movs	r2, #0
 8002370:	2400      	movs	r4, #0
 8002372:	2500      	movs	r5, #0
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	0512      	lsls	r2, r2, #20
 8002378:	4322      	orrs	r2, r4
 800237a:	07db      	lsls	r3, r3, #31
 800237c:	431a      	orrs	r2, r3
 800237e:	0028      	movs	r0, r5
 8002380:	0011      	movs	r1, r2
 8002382:	b007      	add	sp, #28
 8002384:	bcf0      	pop	{r4, r5, r6, r7}
 8002386:	46bb      	mov	fp, r7
 8002388:	46b2      	mov	sl, r6
 800238a:	46a9      	mov	r9, r5
 800238c:	46a0      	mov	r8, r4
 800238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002390:	0025      	movs	r5, r4
 8002392:	4305      	orrs	r5, r0
 8002394:	d100      	bne.n	8002398 <__aeabi_dmul+0x104>
 8002396:	e141      	b.n	800261c <__aeabi_dmul+0x388>
 8002398:	2c00      	cmp	r4, #0
 800239a:	d100      	bne.n	800239e <__aeabi_dmul+0x10a>
 800239c:	e1ad      	b.n	80026fa <__aeabi_dmul+0x466>
 800239e:	0020      	movs	r0, r4
 80023a0:	f000 ff2a 	bl	80031f8 <__clzsi2>
 80023a4:	0001      	movs	r1, r0
 80023a6:	0002      	movs	r2, r0
 80023a8:	390b      	subs	r1, #11
 80023aa:	231d      	movs	r3, #29
 80023ac:	0010      	movs	r0, r2
 80023ae:	1a5b      	subs	r3, r3, r1
 80023b0:	0031      	movs	r1, r6
 80023b2:	0035      	movs	r5, r6
 80023b4:	3808      	subs	r0, #8
 80023b6:	4084      	lsls	r4, r0
 80023b8:	40d9      	lsrs	r1, r3
 80023ba:	4085      	lsls	r5, r0
 80023bc:	430c      	orrs	r4, r1
 80023be:	489e      	ldr	r0, [pc, #632]	; (8002638 <__aeabi_dmul+0x3a4>)
 80023c0:	1a83      	subs	r3, r0, r2
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	4699      	mov	r9, r3
 80023c8:	469b      	mov	fp, r3
 80023ca:	e786      	b.n	80022da <__aeabi_dmul+0x46>
 80023cc:	0005      	movs	r5, r0
 80023ce:	4325      	orrs	r5, r4
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dmul+0x140>
 80023d2:	e11c      	b.n	800260e <__aeabi_dmul+0x37a>
 80023d4:	2208      	movs	r2, #8
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2302      	movs	r3, #2
 80023da:	2400      	movs	r4, #0
 80023dc:	4691      	mov	r9, r2
 80023de:	469b      	mov	fp, r3
 80023e0:	e77b      	b.n	80022da <__aeabi_dmul+0x46>
 80023e2:	4652      	mov	r2, sl
 80023e4:	4332      	orrs	r2, r6
 80023e6:	d100      	bne.n	80023ea <__aeabi_dmul+0x156>
 80023e8:	e10a      	b.n	8002600 <__aeabi_dmul+0x36c>
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dmul+0x15c>
 80023ee:	e176      	b.n	80026de <__aeabi_dmul+0x44a>
 80023f0:	0030      	movs	r0, r6
 80023f2:	f000 ff01 	bl	80031f8 <__clzsi2>
 80023f6:	0002      	movs	r2, r0
 80023f8:	3a0b      	subs	r2, #11
 80023fa:	231d      	movs	r3, #29
 80023fc:	0001      	movs	r1, r0
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	4652      	mov	r2, sl
 8002402:	3908      	subs	r1, #8
 8002404:	40da      	lsrs	r2, r3
 8002406:	408e      	lsls	r6, r1
 8002408:	4316      	orrs	r6, r2
 800240a:	4652      	mov	r2, sl
 800240c:	408a      	lsls	r2, r1
 800240e:	9b00      	ldr	r3, [sp, #0]
 8002410:	4989      	ldr	r1, [pc, #548]	; (8002638 <__aeabi_dmul+0x3a4>)
 8002412:	1a18      	subs	r0, r3, r0
 8002414:	0003      	movs	r3, r0
 8002416:	468c      	mov	ip, r1
 8002418:	4463      	add	r3, ip
 800241a:	2000      	movs	r0, #0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	e77a      	b.n	8002316 <__aeabi_dmul+0x82>
 8002420:	2400      	movs	r4, #0
 8002422:	2500      	movs	r5, #0
 8002424:	4a81      	ldr	r2, [pc, #516]	; (800262c <__aeabi_dmul+0x398>)
 8002426:	e7a5      	b.n	8002374 <__aeabi_dmul+0xe0>
 8002428:	0c2f      	lsrs	r7, r5, #16
 800242a:	042d      	lsls	r5, r5, #16
 800242c:	0c2d      	lsrs	r5, r5, #16
 800242e:	002b      	movs	r3, r5
 8002430:	0c11      	lsrs	r1, r2, #16
 8002432:	0412      	lsls	r2, r2, #16
 8002434:	0c12      	lsrs	r2, r2, #16
 8002436:	4353      	muls	r3, r2
 8002438:	4698      	mov	r8, r3
 800243a:	0013      	movs	r3, r2
 800243c:	0028      	movs	r0, r5
 800243e:	437b      	muls	r3, r7
 8002440:	4699      	mov	r9, r3
 8002442:	4348      	muls	r0, r1
 8002444:	4448      	add	r0, r9
 8002446:	4683      	mov	fp, r0
 8002448:	4640      	mov	r0, r8
 800244a:	000b      	movs	r3, r1
 800244c:	0c00      	lsrs	r0, r0, #16
 800244e:	4682      	mov	sl, r0
 8002450:	4658      	mov	r0, fp
 8002452:	437b      	muls	r3, r7
 8002454:	4450      	add	r0, sl
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	4581      	cmp	r9, r0
 800245a:	d906      	bls.n	800246a <__aeabi_dmul+0x1d6>
 800245c:	469a      	mov	sl, r3
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	4699      	mov	r9, r3
 8002464:	44ca      	add	sl, r9
 8002466:	4653      	mov	r3, sl
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	0c03      	lsrs	r3, r0, #16
 800246c:	469b      	mov	fp, r3
 800246e:	4643      	mov	r3, r8
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	0400      	lsls	r0, r0, #16
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	4698      	mov	r8, r3
 8002478:	0003      	movs	r3, r0
 800247a:	4443      	add	r3, r8
 800247c:	9304      	str	r3, [sp, #16]
 800247e:	0c33      	lsrs	r3, r6, #16
 8002480:	4699      	mov	r9, r3
 8002482:	002b      	movs	r3, r5
 8002484:	0436      	lsls	r6, r6, #16
 8002486:	0c36      	lsrs	r6, r6, #16
 8002488:	4373      	muls	r3, r6
 800248a:	4698      	mov	r8, r3
 800248c:	0033      	movs	r3, r6
 800248e:	437b      	muls	r3, r7
 8002490:	469a      	mov	sl, r3
 8002492:	464b      	mov	r3, r9
 8002494:	435d      	muls	r5, r3
 8002496:	435f      	muls	r7, r3
 8002498:	4643      	mov	r3, r8
 800249a:	4455      	add	r5, sl
 800249c:	0c18      	lsrs	r0, r3, #16
 800249e:	1940      	adds	r0, r0, r5
 80024a0:	4582      	cmp	sl, r0
 80024a2:	d903      	bls.n	80024ac <__aeabi_dmul+0x218>
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	469a      	mov	sl, r3
 80024aa:	4457      	add	r7, sl
 80024ac:	0c05      	lsrs	r5, r0, #16
 80024ae:	19eb      	adds	r3, r5, r7
 80024b0:	9305      	str	r3, [sp, #20]
 80024b2:	4643      	mov	r3, r8
 80024b4:	041d      	lsls	r5, r3, #16
 80024b6:	0c2d      	lsrs	r5, r5, #16
 80024b8:	0400      	lsls	r0, r0, #16
 80024ba:	1940      	adds	r0, r0, r5
 80024bc:	0c25      	lsrs	r5, r4, #16
 80024be:	0424      	lsls	r4, r4, #16
 80024c0:	0c24      	lsrs	r4, r4, #16
 80024c2:	0027      	movs	r7, r4
 80024c4:	4357      	muls	r7, r2
 80024c6:	436a      	muls	r2, r5
 80024c8:	4690      	mov	r8, r2
 80024ca:	002a      	movs	r2, r5
 80024cc:	0c3b      	lsrs	r3, r7, #16
 80024ce:	469a      	mov	sl, r3
 80024d0:	434a      	muls	r2, r1
 80024d2:	4361      	muls	r1, r4
 80024d4:	4441      	add	r1, r8
 80024d6:	4451      	add	r1, sl
 80024d8:	4483      	add	fp, r0
 80024da:	4588      	cmp	r8, r1
 80024dc:	d903      	bls.n	80024e6 <__aeabi_dmul+0x252>
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	4698      	mov	r8, r3
 80024e4:	4442      	add	r2, r8
 80024e6:	043f      	lsls	r7, r7, #16
 80024e8:	0c0b      	lsrs	r3, r1, #16
 80024ea:	0c3f      	lsrs	r7, r7, #16
 80024ec:	0409      	lsls	r1, r1, #16
 80024ee:	19c9      	adds	r1, r1, r7
 80024f0:	0027      	movs	r7, r4
 80024f2:	4698      	mov	r8, r3
 80024f4:	464b      	mov	r3, r9
 80024f6:	4377      	muls	r7, r6
 80024f8:	435c      	muls	r4, r3
 80024fa:	436e      	muls	r6, r5
 80024fc:	435d      	muls	r5, r3
 80024fe:	0c3b      	lsrs	r3, r7, #16
 8002500:	4699      	mov	r9, r3
 8002502:	19a4      	adds	r4, r4, r6
 8002504:	444c      	add	r4, r9
 8002506:	4442      	add	r2, r8
 8002508:	9503      	str	r5, [sp, #12]
 800250a:	42a6      	cmp	r6, r4
 800250c:	d904      	bls.n	8002518 <__aeabi_dmul+0x284>
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	025b      	lsls	r3, r3, #9
 8002512:	4698      	mov	r8, r3
 8002514:	4445      	add	r5, r8
 8002516:	9503      	str	r5, [sp, #12]
 8002518:	9b02      	ldr	r3, [sp, #8]
 800251a:	043f      	lsls	r7, r7, #16
 800251c:	445b      	add	r3, fp
 800251e:	001e      	movs	r6, r3
 8002520:	4283      	cmp	r3, r0
 8002522:	4180      	sbcs	r0, r0
 8002524:	0423      	lsls	r3, r4, #16
 8002526:	4698      	mov	r8, r3
 8002528:	9b05      	ldr	r3, [sp, #20]
 800252a:	0c3f      	lsrs	r7, r7, #16
 800252c:	4447      	add	r7, r8
 800252e:	4698      	mov	r8, r3
 8002530:	1876      	adds	r6, r6, r1
 8002532:	428e      	cmp	r6, r1
 8002534:	4189      	sbcs	r1, r1
 8002536:	4447      	add	r7, r8
 8002538:	4240      	negs	r0, r0
 800253a:	183d      	adds	r5, r7, r0
 800253c:	46a8      	mov	r8, r5
 800253e:	4693      	mov	fp, r2
 8002540:	4249      	negs	r1, r1
 8002542:	468a      	mov	sl, r1
 8002544:	44c3      	add	fp, r8
 8002546:	429f      	cmp	r7, r3
 8002548:	41bf      	sbcs	r7, r7
 800254a:	4580      	cmp	r8, r0
 800254c:	4180      	sbcs	r0, r0
 800254e:	9b03      	ldr	r3, [sp, #12]
 8002550:	44da      	add	sl, fp
 8002552:	4698      	mov	r8, r3
 8002554:	4653      	mov	r3, sl
 8002556:	4240      	negs	r0, r0
 8002558:	427f      	negs	r7, r7
 800255a:	4307      	orrs	r7, r0
 800255c:	0c24      	lsrs	r4, r4, #16
 800255e:	4593      	cmp	fp, r2
 8002560:	4192      	sbcs	r2, r2
 8002562:	458a      	cmp	sl, r1
 8002564:	4189      	sbcs	r1, r1
 8002566:	193f      	adds	r7, r7, r4
 8002568:	0ddc      	lsrs	r4, r3, #23
 800256a:	9b04      	ldr	r3, [sp, #16]
 800256c:	0275      	lsls	r5, r6, #9
 800256e:	431d      	orrs	r5, r3
 8002570:	1e68      	subs	r0, r5, #1
 8002572:	4185      	sbcs	r5, r0
 8002574:	4653      	mov	r3, sl
 8002576:	4252      	negs	r2, r2
 8002578:	4249      	negs	r1, r1
 800257a:	430a      	orrs	r2, r1
 800257c:	18bf      	adds	r7, r7, r2
 800257e:	4447      	add	r7, r8
 8002580:	0df6      	lsrs	r6, r6, #23
 8002582:	027f      	lsls	r7, r7, #9
 8002584:	4335      	orrs	r5, r6
 8002586:	025a      	lsls	r2, r3, #9
 8002588:	433c      	orrs	r4, r7
 800258a:	4315      	orrs	r5, r2
 800258c:	01fb      	lsls	r3, r7, #7
 800258e:	d400      	bmi.n	8002592 <__aeabi_dmul+0x2fe>
 8002590:	e0c1      	b.n	8002716 <__aeabi_dmul+0x482>
 8002592:	2101      	movs	r1, #1
 8002594:	086a      	lsrs	r2, r5, #1
 8002596:	400d      	ands	r5, r1
 8002598:	4315      	orrs	r5, r2
 800259a:	07e2      	lsls	r2, r4, #31
 800259c:	4315      	orrs	r5, r2
 800259e:	0864      	lsrs	r4, r4, #1
 80025a0:	4926      	ldr	r1, [pc, #152]	; (800263c <__aeabi_dmul+0x3a8>)
 80025a2:	4461      	add	r1, ip
 80025a4:	2900      	cmp	r1, #0
 80025a6:	dd56      	ble.n	8002656 <__aeabi_dmul+0x3c2>
 80025a8:	076b      	lsls	r3, r5, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dmul+0x32c>
 80025ac:	220f      	movs	r2, #15
 80025ae:	402a      	ands	r2, r5
 80025b0:	2a04      	cmp	r2, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dmul+0x32c>
 80025b4:	1d2a      	adds	r2, r5, #4
 80025b6:	42aa      	cmp	r2, r5
 80025b8:	41ad      	sbcs	r5, r5
 80025ba:	426d      	negs	r5, r5
 80025bc:	1964      	adds	r4, r4, r5
 80025be:	0015      	movs	r5, r2
 80025c0:	01e3      	lsls	r3, r4, #7
 80025c2:	d504      	bpl.n	80025ce <__aeabi_dmul+0x33a>
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <__aeabi_dmul+0x3ac>)
 80025c8:	00c9      	lsls	r1, r1, #3
 80025ca:	4014      	ands	r4, r2
 80025cc:	4461      	add	r1, ip
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <__aeabi_dmul+0x3b0>)
 80025d0:	4291      	cmp	r1, r2
 80025d2:	dd00      	ble.n	80025d6 <__aeabi_dmul+0x342>
 80025d4:	e724      	b.n	8002420 <__aeabi_dmul+0x18c>
 80025d6:	0762      	lsls	r2, r4, #29
 80025d8:	08ed      	lsrs	r5, r5, #3
 80025da:	0264      	lsls	r4, r4, #9
 80025dc:	0549      	lsls	r1, r1, #21
 80025de:	4315      	orrs	r5, r2
 80025e0:	0b24      	lsrs	r4, r4, #12
 80025e2:	0d4a      	lsrs	r2, r1, #21
 80025e4:	e6c6      	b.n	8002374 <__aeabi_dmul+0xe0>
 80025e6:	9701      	str	r7, [sp, #4]
 80025e8:	e6b8      	b.n	800235c <__aeabi_dmul+0xc8>
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <__aeabi_dmul+0x398>)
 80025ec:	2003      	movs	r0, #3
 80025ee:	4694      	mov	ip, r2
 80025f0:	4463      	add	r3, ip
 80025f2:	464a      	mov	r2, r9
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2303      	movs	r3, #3
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4691      	mov	r9, r2
 80025fc:	4652      	mov	r2, sl
 80025fe:	e68a      	b.n	8002316 <__aeabi_dmul+0x82>
 8002600:	4649      	mov	r1, r9
 8002602:	2301      	movs	r3, #1
 8002604:	4319      	orrs	r1, r3
 8002606:	4689      	mov	r9, r1
 8002608:	2600      	movs	r6, #0
 800260a:	2001      	movs	r0, #1
 800260c:	e683      	b.n	8002316 <__aeabi_dmul+0x82>
 800260e:	220c      	movs	r2, #12
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2303      	movs	r3, #3
 8002614:	0005      	movs	r5, r0
 8002616:	4691      	mov	r9, r2
 8002618:	469b      	mov	fp, r3
 800261a:	e65e      	b.n	80022da <__aeabi_dmul+0x46>
 800261c:	2304      	movs	r3, #4
 800261e:	4699      	mov	r9, r3
 8002620:	2300      	movs	r3, #0
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	2400      	movs	r4, #0
 8002628:	469b      	mov	fp, r3
 800262a:	e656      	b.n	80022da <__aeabi_dmul+0x46>
 800262c:	000007ff 	.word	0x000007ff
 8002630:	fffffc01 	.word	0xfffffc01
 8002634:	0800d5cc 	.word	0x0800d5cc
 8002638:	fffffc0d 	.word	0xfffffc0d
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	2300      	movs	r3, #0
 800264a:	2480      	movs	r4, #128	; 0x80
 800264c:	2500      	movs	r5, #0
 800264e:	4a44      	ldr	r2, [pc, #272]	; (8002760 <__aeabi_dmul+0x4cc>)
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	0324      	lsls	r4, r4, #12
 8002654:	e68e      	b.n	8002374 <__aeabi_dmul+0xe0>
 8002656:	2001      	movs	r0, #1
 8002658:	1a40      	subs	r0, r0, r1
 800265a:	2838      	cmp	r0, #56	; 0x38
 800265c:	dd00      	ble.n	8002660 <__aeabi_dmul+0x3cc>
 800265e:	e686      	b.n	800236e <__aeabi_dmul+0xda>
 8002660:	281f      	cmp	r0, #31
 8002662:	dd5b      	ble.n	800271c <__aeabi_dmul+0x488>
 8002664:	221f      	movs	r2, #31
 8002666:	0023      	movs	r3, r4
 8002668:	4252      	negs	r2, r2
 800266a:	1a51      	subs	r1, r2, r1
 800266c:	40cb      	lsrs	r3, r1
 800266e:	0019      	movs	r1, r3
 8002670:	2820      	cmp	r0, #32
 8002672:	d003      	beq.n	800267c <__aeabi_dmul+0x3e8>
 8002674:	4a3b      	ldr	r2, [pc, #236]	; (8002764 <__aeabi_dmul+0x4d0>)
 8002676:	4462      	add	r2, ip
 8002678:	4094      	lsls	r4, r2
 800267a:	4325      	orrs	r5, r4
 800267c:	1e6a      	subs	r2, r5, #1
 800267e:	4195      	sbcs	r5, r2
 8002680:	002a      	movs	r2, r5
 8002682:	430a      	orrs	r2, r1
 8002684:	2107      	movs	r1, #7
 8002686:	000d      	movs	r5, r1
 8002688:	2400      	movs	r4, #0
 800268a:	4015      	ands	r5, r2
 800268c:	4211      	tst	r1, r2
 800268e:	d05b      	beq.n	8002748 <__aeabi_dmul+0x4b4>
 8002690:	210f      	movs	r1, #15
 8002692:	2400      	movs	r4, #0
 8002694:	4011      	ands	r1, r2
 8002696:	2904      	cmp	r1, #4
 8002698:	d053      	beq.n	8002742 <__aeabi_dmul+0x4ae>
 800269a:	1d11      	adds	r1, r2, #4
 800269c:	4291      	cmp	r1, r2
 800269e:	4192      	sbcs	r2, r2
 80026a0:	4252      	negs	r2, r2
 80026a2:	18a4      	adds	r4, r4, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	0223      	lsls	r3, r4, #8
 80026a8:	d54b      	bpl.n	8002742 <__aeabi_dmul+0x4ae>
 80026aa:	2201      	movs	r2, #1
 80026ac:	2400      	movs	r4, #0
 80026ae:	2500      	movs	r5, #0
 80026b0:	e660      	b.n	8002374 <__aeabi_dmul+0xe0>
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	031b      	lsls	r3, r3, #12
 80026b6:	421c      	tst	r4, r3
 80026b8:	d009      	beq.n	80026ce <__aeabi_dmul+0x43a>
 80026ba:	421e      	tst	r6, r3
 80026bc:	d107      	bne.n	80026ce <__aeabi_dmul+0x43a>
 80026be:	4333      	orrs	r3, r6
 80026c0:	031c      	lsls	r4, r3, #12
 80026c2:	4643      	mov	r3, r8
 80026c4:	0015      	movs	r5, r2
 80026c6:	0b24      	lsrs	r4, r4, #12
 80026c8:	4a25      	ldr	r2, [pc, #148]	; (8002760 <__aeabi_dmul+0x4cc>)
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	e652      	b.n	8002374 <__aeabi_dmul+0xe0>
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	0312      	lsls	r2, r2, #12
 80026d2:	4314      	orrs	r4, r2
 80026d4:	0324      	lsls	r4, r4, #12
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <__aeabi_dmul+0x4cc>)
 80026d8:	0b24      	lsrs	r4, r4, #12
 80026da:	9701      	str	r7, [sp, #4]
 80026dc:	e64a      	b.n	8002374 <__aeabi_dmul+0xe0>
 80026de:	f000 fd8b 	bl	80031f8 <__clzsi2>
 80026e2:	0003      	movs	r3, r0
 80026e4:	001a      	movs	r2, r3
 80026e6:	3215      	adds	r2, #21
 80026e8:	3020      	adds	r0, #32
 80026ea:	2a1c      	cmp	r2, #28
 80026ec:	dc00      	bgt.n	80026f0 <__aeabi_dmul+0x45c>
 80026ee:	e684      	b.n	80023fa <__aeabi_dmul+0x166>
 80026f0:	4656      	mov	r6, sl
 80026f2:	3b08      	subs	r3, #8
 80026f4:	2200      	movs	r2, #0
 80026f6:	409e      	lsls	r6, r3
 80026f8:	e689      	b.n	800240e <__aeabi_dmul+0x17a>
 80026fa:	f000 fd7d 	bl	80031f8 <__clzsi2>
 80026fe:	0001      	movs	r1, r0
 8002700:	0002      	movs	r2, r0
 8002702:	3115      	adds	r1, #21
 8002704:	3220      	adds	r2, #32
 8002706:	291c      	cmp	r1, #28
 8002708:	dc00      	bgt.n	800270c <__aeabi_dmul+0x478>
 800270a:	e64e      	b.n	80023aa <__aeabi_dmul+0x116>
 800270c:	0034      	movs	r4, r6
 800270e:	3808      	subs	r0, #8
 8002710:	2500      	movs	r5, #0
 8002712:	4084      	lsls	r4, r0
 8002714:	e653      	b.n	80023be <__aeabi_dmul+0x12a>
 8002716:	9b00      	ldr	r3, [sp, #0]
 8002718:	469c      	mov	ip, r3
 800271a:	e741      	b.n	80025a0 <__aeabi_dmul+0x30c>
 800271c:	4912      	ldr	r1, [pc, #72]	; (8002768 <__aeabi_dmul+0x4d4>)
 800271e:	0022      	movs	r2, r4
 8002720:	4461      	add	r1, ip
 8002722:	002e      	movs	r6, r5
 8002724:	408d      	lsls	r5, r1
 8002726:	408a      	lsls	r2, r1
 8002728:	40c6      	lsrs	r6, r0
 800272a:	1e69      	subs	r1, r5, #1
 800272c:	418d      	sbcs	r5, r1
 800272e:	4332      	orrs	r2, r6
 8002730:	432a      	orrs	r2, r5
 8002732:	40c4      	lsrs	r4, r0
 8002734:	0753      	lsls	r3, r2, #29
 8002736:	d0b6      	beq.n	80026a6 <__aeabi_dmul+0x412>
 8002738:	210f      	movs	r1, #15
 800273a:	4011      	ands	r1, r2
 800273c:	2904      	cmp	r1, #4
 800273e:	d1ac      	bne.n	800269a <__aeabi_dmul+0x406>
 8002740:	e7b1      	b.n	80026a6 <__aeabi_dmul+0x412>
 8002742:	0765      	lsls	r5, r4, #29
 8002744:	0264      	lsls	r4, r4, #9
 8002746:	0b24      	lsrs	r4, r4, #12
 8002748:	08d2      	lsrs	r2, r2, #3
 800274a:	4315      	orrs	r5, r2
 800274c:	2200      	movs	r2, #0
 800274e:	e611      	b.n	8002374 <__aeabi_dmul+0xe0>
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0312      	lsls	r2, r2, #12
 8002754:	4314      	orrs	r4, r2
 8002756:	0324      	lsls	r4, r4, #12
 8002758:	4a01      	ldr	r2, [pc, #4]	; (8002760 <__aeabi_dmul+0x4cc>)
 800275a:	0b24      	lsrs	r4, r4, #12
 800275c:	e60a      	b.n	8002374 <__aeabi_dmul+0xe0>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	000007ff 	.word	0x000007ff
 8002764:	0000043e 	.word	0x0000043e
 8002768:	0000041e 	.word	0x0000041e

0800276c <__aeabi_dsub>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	4657      	mov	r7, sl
 8002770:	464e      	mov	r6, r9
 8002772:	4645      	mov	r5, r8
 8002774:	46de      	mov	lr, fp
 8002776:	0004      	movs	r4, r0
 8002778:	b5e0      	push	{r5, r6, r7, lr}
 800277a:	001f      	movs	r7, r3
 800277c:	0010      	movs	r0, r2
 800277e:	030b      	lsls	r3, r1, #12
 8002780:	0f62      	lsrs	r2, r4, #29
 8002782:	004e      	lsls	r6, r1, #1
 8002784:	0fcd      	lsrs	r5, r1, #31
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	0339      	lsls	r1, r7, #12
 800278a:	4313      	orrs	r3, r2
 800278c:	0a49      	lsrs	r1, r1, #9
 800278e:	00e2      	lsls	r2, r4, #3
 8002790:	0f44      	lsrs	r4, r0, #29
 8002792:	4321      	orrs	r1, r4
 8002794:	4cc2      	ldr	r4, [pc, #776]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002796:	4691      	mov	r9, r2
 8002798:	4692      	mov	sl, r2
 800279a:	00c0      	lsls	r0, r0, #3
 800279c:	007a      	lsls	r2, r7, #1
 800279e:	4680      	mov	r8, r0
 80027a0:	0d76      	lsrs	r6, r6, #21
 80027a2:	0d52      	lsrs	r2, r2, #21
 80027a4:	0fff      	lsrs	r7, r7, #31
 80027a6:	42a2      	cmp	r2, r4
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x40>
 80027aa:	e0b4      	b.n	8002916 <__aeabi_dsub+0x1aa>
 80027ac:	2401      	movs	r4, #1
 80027ae:	4067      	eors	r7, r4
 80027b0:	46bb      	mov	fp, r7
 80027b2:	42bd      	cmp	r5, r7
 80027b4:	d100      	bne.n	80027b8 <__aeabi_dsub+0x4c>
 80027b6:	e088      	b.n	80028ca <__aeabi_dsub+0x15e>
 80027b8:	1ab4      	subs	r4, r6, r2
 80027ba:	46a4      	mov	ip, r4
 80027bc:	2c00      	cmp	r4, #0
 80027be:	dc00      	bgt.n	80027c2 <__aeabi_dsub+0x56>
 80027c0:	e0b2      	b.n	8002928 <__aeabi_dsub+0x1bc>
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d100      	bne.n	80027c8 <__aeabi_dsub+0x5c>
 80027c6:	e0c5      	b.n	8002954 <__aeabi_dsub+0x1e8>
 80027c8:	4ab5      	ldr	r2, [pc, #724]	; (8002aa0 <__aeabi_dsub+0x334>)
 80027ca:	4296      	cmp	r6, r2
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x64>
 80027ce:	e28b      	b.n	8002ce8 <__aeabi_dsub+0x57c>
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	0412      	lsls	r2, r2, #16
 80027d4:	4311      	orrs	r1, r2
 80027d6:	4662      	mov	r2, ip
 80027d8:	2a38      	cmp	r2, #56	; 0x38
 80027da:	dd00      	ble.n	80027de <__aeabi_dsub+0x72>
 80027dc:	e1a1      	b.n	8002b22 <__aeabi_dsub+0x3b6>
 80027de:	2a1f      	cmp	r2, #31
 80027e0:	dd00      	ble.n	80027e4 <__aeabi_dsub+0x78>
 80027e2:	e216      	b.n	8002c12 <__aeabi_dsub+0x4a6>
 80027e4:	2720      	movs	r7, #32
 80027e6:	000c      	movs	r4, r1
 80027e8:	1abf      	subs	r7, r7, r2
 80027ea:	40bc      	lsls	r4, r7
 80027ec:	0002      	movs	r2, r0
 80027ee:	46a0      	mov	r8, r4
 80027f0:	4664      	mov	r4, ip
 80027f2:	40b8      	lsls	r0, r7
 80027f4:	40e2      	lsrs	r2, r4
 80027f6:	4644      	mov	r4, r8
 80027f8:	4314      	orrs	r4, r2
 80027fa:	0002      	movs	r2, r0
 80027fc:	1e50      	subs	r0, r2, #1
 80027fe:	4182      	sbcs	r2, r0
 8002800:	4660      	mov	r0, ip
 8002802:	40c1      	lsrs	r1, r0
 8002804:	4322      	orrs	r2, r4
 8002806:	1a5b      	subs	r3, r3, r1
 8002808:	4649      	mov	r1, r9
 800280a:	1a8c      	subs	r4, r1, r2
 800280c:	45a1      	cmp	r9, r4
 800280e:	4192      	sbcs	r2, r2
 8002810:	4252      	negs	r2, r2
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	4698      	mov	r8, r3
 8002816:	4643      	mov	r3, r8
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	d400      	bmi.n	800281e <__aeabi_dsub+0xb2>
 800281c:	e117      	b.n	8002a4e <__aeabi_dsub+0x2e2>
 800281e:	4643      	mov	r3, r8
 8002820:	025b      	lsls	r3, r3, #9
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	4698      	mov	r8, r3
 8002826:	4643      	mov	r3, r8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <__aeabi_dsub+0xc2>
 800282c:	e16c      	b.n	8002b08 <__aeabi_dsub+0x39c>
 800282e:	4640      	mov	r0, r8
 8002830:	f000 fce2 	bl	80031f8 <__clzsi2>
 8002834:	0002      	movs	r2, r0
 8002836:	3a08      	subs	r2, #8
 8002838:	2120      	movs	r1, #32
 800283a:	0020      	movs	r0, r4
 800283c:	4643      	mov	r3, r8
 800283e:	1a89      	subs	r1, r1, r2
 8002840:	4093      	lsls	r3, r2
 8002842:	40c8      	lsrs	r0, r1
 8002844:	4094      	lsls	r4, r2
 8002846:	4303      	orrs	r3, r0
 8002848:	4296      	cmp	r6, r2
 800284a:	dd00      	ble.n	800284e <__aeabi_dsub+0xe2>
 800284c:	e157      	b.n	8002afe <__aeabi_dsub+0x392>
 800284e:	1b96      	subs	r6, r2, r6
 8002850:	1c71      	adds	r1, r6, #1
 8002852:	291f      	cmp	r1, #31
 8002854:	dd00      	ble.n	8002858 <__aeabi_dsub+0xec>
 8002856:	e1cb      	b.n	8002bf0 <__aeabi_dsub+0x484>
 8002858:	2220      	movs	r2, #32
 800285a:	0018      	movs	r0, r3
 800285c:	0026      	movs	r6, r4
 800285e:	1a52      	subs	r2, r2, r1
 8002860:	4094      	lsls	r4, r2
 8002862:	4090      	lsls	r0, r2
 8002864:	40ce      	lsrs	r6, r1
 8002866:	40cb      	lsrs	r3, r1
 8002868:	1e62      	subs	r2, r4, #1
 800286a:	4194      	sbcs	r4, r2
 800286c:	4330      	orrs	r0, r6
 800286e:	4698      	mov	r8, r3
 8002870:	2600      	movs	r6, #0
 8002872:	4304      	orrs	r4, r0
 8002874:	0763      	lsls	r3, r4, #29
 8002876:	d009      	beq.n	800288c <__aeabi_dsub+0x120>
 8002878:	230f      	movs	r3, #15
 800287a:	4023      	ands	r3, r4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <__aeabi_dsub+0x120>
 8002880:	1d23      	adds	r3, r4, #4
 8002882:	42a3      	cmp	r3, r4
 8002884:	41a4      	sbcs	r4, r4
 8002886:	4264      	negs	r4, r4
 8002888:	44a0      	add	r8, r4
 800288a:	001c      	movs	r4, r3
 800288c:	4643      	mov	r3, r8
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	d400      	bmi.n	8002894 <__aeabi_dsub+0x128>
 8002892:	e0df      	b.n	8002a54 <__aeabi_dsub+0x2e8>
 8002894:	4b82      	ldr	r3, [pc, #520]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002896:	3601      	adds	r6, #1
 8002898:	429e      	cmp	r6, r3
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x132>
 800289c:	e0fb      	b.n	8002a96 <__aeabi_dsub+0x32a>
 800289e:	4642      	mov	r2, r8
 80028a0:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <__aeabi_dsub+0x338>)
 80028a2:	08e4      	lsrs	r4, r4, #3
 80028a4:	401a      	ands	r2, r3
 80028a6:	0013      	movs	r3, r2
 80028a8:	0571      	lsls	r1, r6, #21
 80028aa:	0752      	lsls	r2, r2, #29
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	4322      	orrs	r2, r4
 80028b0:	0b1b      	lsrs	r3, r3, #12
 80028b2:	0d49      	lsrs	r1, r1, #21
 80028b4:	0509      	lsls	r1, r1, #20
 80028b6:	07ed      	lsls	r5, r5, #31
 80028b8:	4319      	orrs	r1, r3
 80028ba:	4329      	orrs	r1, r5
 80028bc:	0010      	movs	r0, r2
 80028be:	bcf0      	pop	{r4, r5, r6, r7}
 80028c0:	46bb      	mov	fp, r7
 80028c2:	46b2      	mov	sl, r6
 80028c4:	46a9      	mov	r9, r5
 80028c6:	46a0      	mov	r8, r4
 80028c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ca:	1ab4      	subs	r4, r6, r2
 80028cc:	46a4      	mov	ip, r4
 80028ce:	2c00      	cmp	r4, #0
 80028d0:	dd58      	ble.n	8002984 <__aeabi_dsub+0x218>
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x16c>
 80028d6:	e09e      	b.n	8002a16 <__aeabi_dsub+0x2aa>
 80028d8:	4a71      	ldr	r2, [pc, #452]	; (8002aa0 <__aeabi_dsub+0x334>)
 80028da:	4296      	cmp	r6, r2
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x174>
 80028de:	e13b      	b.n	8002b58 <__aeabi_dsub+0x3ec>
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	0412      	lsls	r2, r2, #16
 80028e4:	4311      	orrs	r1, r2
 80028e6:	4662      	mov	r2, ip
 80028e8:	2a38      	cmp	r2, #56	; 0x38
 80028ea:	dd00      	ble.n	80028ee <__aeabi_dsub+0x182>
 80028ec:	e0c1      	b.n	8002a72 <__aeabi_dsub+0x306>
 80028ee:	2a1f      	cmp	r2, #31
 80028f0:	dc00      	bgt.n	80028f4 <__aeabi_dsub+0x188>
 80028f2:	e1bb      	b.n	8002c6c <__aeabi_dsub+0x500>
 80028f4:	000c      	movs	r4, r1
 80028f6:	3a20      	subs	r2, #32
 80028f8:	40d4      	lsrs	r4, r2
 80028fa:	0022      	movs	r2, r4
 80028fc:	4664      	mov	r4, ip
 80028fe:	2c20      	cmp	r4, #32
 8002900:	d004      	beq.n	800290c <__aeabi_dsub+0x1a0>
 8002902:	2740      	movs	r7, #64	; 0x40
 8002904:	1b3f      	subs	r7, r7, r4
 8002906:	40b9      	lsls	r1, r7
 8002908:	4308      	orrs	r0, r1
 800290a:	4680      	mov	r8, r0
 800290c:	4644      	mov	r4, r8
 800290e:	1e61      	subs	r1, r4, #1
 8002910:	418c      	sbcs	r4, r1
 8002912:	4314      	orrs	r4, r2
 8002914:	e0b1      	b.n	8002a7a <__aeabi_dsub+0x30e>
 8002916:	000c      	movs	r4, r1
 8002918:	4304      	orrs	r4, r0
 800291a:	d02a      	beq.n	8002972 <__aeabi_dsub+0x206>
 800291c:	46bb      	mov	fp, r7
 800291e:	42bd      	cmp	r5, r7
 8002920:	d02d      	beq.n	800297e <__aeabi_dsub+0x212>
 8002922:	4c61      	ldr	r4, [pc, #388]	; (8002aa8 <__aeabi_dsub+0x33c>)
 8002924:	46a4      	mov	ip, r4
 8002926:	44b4      	add	ip, r6
 8002928:	4664      	mov	r4, ip
 800292a:	2c00      	cmp	r4, #0
 800292c:	d05c      	beq.n	80029e8 <__aeabi_dsub+0x27c>
 800292e:	1b94      	subs	r4, r2, r6
 8002930:	46a4      	mov	ip, r4
 8002932:	2e00      	cmp	r6, #0
 8002934:	d000      	beq.n	8002938 <__aeabi_dsub+0x1cc>
 8002936:	e115      	b.n	8002b64 <__aeabi_dsub+0x3f8>
 8002938:	464d      	mov	r5, r9
 800293a:	431d      	orrs	r5, r3
 800293c:	d100      	bne.n	8002940 <__aeabi_dsub+0x1d4>
 800293e:	e1c3      	b.n	8002cc8 <__aeabi_dsub+0x55c>
 8002940:	1e65      	subs	r5, r4, #1
 8002942:	2c01      	cmp	r4, #1
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x1dc>
 8002946:	e20c      	b.n	8002d62 <__aeabi_dsub+0x5f6>
 8002948:	4e55      	ldr	r6, [pc, #340]	; (8002aa0 <__aeabi_dsub+0x334>)
 800294a:	42b4      	cmp	r4, r6
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x1e4>
 800294e:	e1f8      	b.n	8002d42 <__aeabi_dsub+0x5d6>
 8002950:	46ac      	mov	ip, r5
 8002952:	e10e      	b.n	8002b72 <__aeabi_dsub+0x406>
 8002954:	000a      	movs	r2, r1
 8002956:	4302      	orrs	r2, r0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x1f0>
 800295a:	e136      	b.n	8002bca <__aeabi_dsub+0x45e>
 800295c:	0022      	movs	r2, r4
 800295e:	3a01      	subs	r2, #1
 8002960:	2c01      	cmp	r4, #1
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x1fa>
 8002964:	e1c6      	b.n	8002cf4 <__aeabi_dsub+0x588>
 8002966:	4c4e      	ldr	r4, [pc, #312]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002968:	45a4      	cmp	ip, r4
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x202>
 800296c:	e0f4      	b.n	8002b58 <__aeabi_dsub+0x3ec>
 800296e:	4694      	mov	ip, r2
 8002970:	e731      	b.n	80027d6 <__aeabi_dsub+0x6a>
 8002972:	2401      	movs	r4, #1
 8002974:	4067      	eors	r7, r4
 8002976:	46bb      	mov	fp, r7
 8002978:	42bd      	cmp	r5, r7
 800297a:	d000      	beq.n	800297e <__aeabi_dsub+0x212>
 800297c:	e71c      	b.n	80027b8 <__aeabi_dsub+0x4c>
 800297e:	4c4a      	ldr	r4, [pc, #296]	; (8002aa8 <__aeabi_dsub+0x33c>)
 8002980:	46a4      	mov	ip, r4
 8002982:	44b4      	add	ip, r6
 8002984:	4664      	mov	r4, ip
 8002986:	2c00      	cmp	r4, #0
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x220>
 800298a:	e0cf      	b.n	8002b2c <__aeabi_dsub+0x3c0>
 800298c:	1b94      	subs	r4, r2, r6
 800298e:	46a4      	mov	ip, r4
 8002990:	2e00      	cmp	r6, #0
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x22a>
 8002994:	e15c      	b.n	8002c50 <__aeabi_dsub+0x4e4>
 8002996:	4e42      	ldr	r6, [pc, #264]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002998:	42b2      	cmp	r2, r6
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x232>
 800299c:	e1ec      	b.n	8002d78 <__aeabi_dsub+0x60c>
 800299e:	2680      	movs	r6, #128	; 0x80
 80029a0:	0436      	lsls	r6, r6, #16
 80029a2:	4333      	orrs	r3, r6
 80029a4:	4664      	mov	r4, ip
 80029a6:	2c38      	cmp	r4, #56	; 0x38
 80029a8:	dd00      	ble.n	80029ac <__aeabi_dsub+0x240>
 80029aa:	e1b3      	b.n	8002d14 <__aeabi_dsub+0x5a8>
 80029ac:	2c1f      	cmp	r4, #31
 80029ae:	dd00      	ble.n	80029b2 <__aeabi_dsub+0x246>
 80029b0:	e238      	b.n	8002e24 <__aeabi_dsub+0x6b8>
 80029b2:	2620      	movs	r6, #32
 80029b4:	1b36      	subs	r6, r6, r4
 80029b6:	001c      	movs	r4, r3
 80029b8:	40b4      	lsls	r4, r6
 80029ba:	464f      	mov	r7, r9
 80029bc:	46a0      	mov	r8, r4
 80029be:	4664      	mov	r4, ip
 80029c0:	40e7      	lsrs	r7, r4
 80029c2:	4644      	mov	r4, r8
 80029c4:	433c      	orrs	r4, r7
 80029c6:	464f      	mov	r7, r9
 80029c8:	40b7      	lsls	r7, r6
 80029ca:	003e      	movs	r6, r7
 80029cc:	1e77      	subs	r7, r6, #1
 80029ce:	41be      	sbcs	r6, r7
 80029d0:	4334      	orrs	r4, r6
 80029d2:	4666      	mov	r6, ip
 80029d4:	40f3      	lsrs	r3, r6
 80029d6:	18c9      	adds	r1, r1, r3
 80029d8:	1824      	adds	r4, r4, r0
 80029da:	4284      	cmp	r4, r0
 80029dc:	419b      	sbcs	r3, r3
 80029de:	425b      	negs	r3, r3
 80029e0:	4698      	mov	r8, r3
 80029e2:	0016      	movs	r6, r2
 80029e4:	4488      	add	r8, r1
 80029e6:	e04e      	b.n	8002a86 <__aeabi_dsub+0x31a>
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <__aeabi_dsub+0x340>)
 80029ea:	1c74      	adds	r4, r6, #1
 80029ec:	4214      	tst	r4, r2
 80029ee:	d000      	beq.n	80029f2 <__aeabi_dsub+0x286>
 80029f0:	e0d6      	b.n	8002ba0 <__aeabi_dsub+0x434>
 80029f2:	464a      	mov	r2, r9
 80029f4:	431a      	orrs	r2, r3
 80029f6:	2e00      	cmp	r6, #0
 80029f8:	d000      	beq.n	80029fc <__aeabi_dsub+0x290>
 80029fa:	e15b      	b.n	8002cb4 <__aeabi_dsub+0x548>
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x296>
 8002a00:	e1a5      	b.n	8002d4e <__aeabi_dsub+0x5e2>
 8002a02:	000a      	movs	r2, r1
 8002a04:	4302      	orrs	r2, r0
 8002a06:	d000      	beq.n	8002a0a <__aeabi_dsub+0x29e>
 8002a08:	e1bb      	b.n	8002d82 <__aeabi_dsub+0x616>
 8002a0a:	464a      	mov	r2, r9
 8002a0c:	0759      	lsls	r1, r3, #29
 8002a0e:	08d2      	lsrs	r2, r2, #3
 8002a10:	430a      	orrs	r2, r1
 8002a12:	08db      	lsrs	r3, r3, #3
 8002a14:	e027      	b.n	8002a66 <__aeabi_dsub+0x2fa>
 8002a16:	000a      	movs	r2, r1
 8002a18:	4302      	orrs	r2, r0
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x2b2>
 8002a1c:	e174      	b.n	8002d08 <__aeabi_dsub+0x59c>
 8002a1e:	0022      	movs	r2, r4
 8002a20:	3a01      	subs	r2, #1
 8002a22:	2c01      	cmp	r4, #1
 8002a24:	d005      	beq.n	8002a32 <__aeabi_dsub+0x2c6>
 8002a26:	4c1e      	ldr	r4, [pc, #120]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002a28:	45a4      	cmp	ip, r4
 8002a2a:	d100      	bne.n	8002a2e <__aeabi_dsub+0x2c2>
 8002a2c:	e094      	b.n	8002b58 <__aeabi_dsub+0x3ec>
 8002a2e:	4694      	mov	ip, r2
 8002a30:	e759      	b.n	80028e6 <__aeabi_dsub+0x17a>
 8002a32:	4448      	add	r0, r9
 8002a34:	4548      	cmp	r0, r9
 8002a36:	4192      	sbcs	r2, r2
 8002a38:	185b      	adds	r3, r3, r1
 8002a3a:	4698      	mov	r8, r3
 8002a3c:	0004      	movs	r4, r0
 8002a3e:	4252      	negs	r2, r2
 8002a40:	4490      	add	r8, r2
 8002a42:	4643      	mov	r3, r8
 8002a44:	2602      	movs	r6, #2
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	d500      	bpl.n	8002a4c <__aeabi_dsub+0x2e0>
 8002a4a:	e0c4      	b.n	8002bd6 <__aeabi_dsub+0x46a>
 8002a4c:	3e01      	subs	r6, #1
 8002a4e:	0763      	lsls	r3, r4, #29
 8002a50:	d000      	beq.n	8002a54 <__aeabi_dsub+0x2e8>
 8002a52:	e711      	b.n	8002878 <__aeabi_dsub+0x10c>
 8002a54:	4643      	mov	r3, r8
 8002a56:	46b4      	mov	ip, r6
 8002a58:	0759      	lsls	r1, r3, #29
 8002a5a:	08e2      	lsrs	r2, r4, #3
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	490f      	ldr	r1, [pc, #60]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002a62:	458c      	cmp	ip, r1
 8002a64:	d040      	beq.n	8002ae8 <__aeabi_dsub+0x37c>
 8002a66:	4661      	mov	r1, ip
 8002a68:	031b      	lsls	r3, r3, #12
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	0b1b      	lsrs	r3, r3, #12
 8002a6e:	0d49      	lsrs	r1, r1, #21
 8002a70:	e720      	b.n	80028b4 <__aeabi_dsub+0x148>
 8002a72:	4301      	orrs	r1, r0
 8002a74:	000c      	movs	r4, r1
 8002a76:	1e61      	subs	r1, r4, #1
 8002a78:	418c      	sbcs	r4, r1
 8002a7a:	444c      	add	r4, r9
 8002a7c:	454c      	cmp	r4, r9
 8002a7e:	4192      	sbcs	r2, r2
 8002a80:	4252      	negs	r2, r2
 8002a82:	4690      	mov	r8, r2
 8002a84:	4498      	add	r8, r3
 8002a86:	4643      	mov	r3, r8
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	d5e0      	bpl.n	8002a4e <__aeabi_dsub+0x2e2>
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__aeabi_dsub+0x334>)
 8002a8e:	3601      	adds	r6, #1
 8002a90:	429e      	cmp	r6, r3
 8002a92:	d000      	beq.n	8002a96 <__aeabi_dsub+0x32a>
 8002a94:	e09f      	b.n	8002bd6 <__aeabi_dsub+0x46a>
 8002a96:	0031      	movs	r1, r6
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	e70a      	b.n	80028b4 <__aeabi_dsub+0x148>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	000007ff 	.word	0x000007ff
 8002aa4:	ff7fffff 	.word	0xff7fffff
 8002aa8:	fffff801 	.word	0xfffff801
 8002aac:	000007fe 	.word	0x000007fe
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x34a>
 8002ab4:	e160      	b.n	8002d78 <__aeabi_dsub+0x60c>
 8002ab6:	000a      	movs	r2, r1
 8002ab8:	4302      	orrs	r2, r0
 8002aba:	d04d      	beq.n	8002b58 <__aeabi_dsub+0x3ec>
 8002abc:	464a      	mov	r2, r9
 8002abe:	075c      	lsls	r4, r3, #29
 8002ac0:	08d2      	lsrs	r2, r2, #3
 8002ac2:	4322      	orrs	r2, r4
 8002ac4:	2480      	movs	r4, #128	; 0x80
 8002ac6:	08db      	lsrs	r3, r3, #3
 8002ac8:	0324      	lsls	r4, r4, #12
 8002aca:	4223      	tst	r3, r4
 8002acc:	d007      	beq.n	8002ade <__aeabi_dsub+0x372>
 8002ace:	08ce      	lsrs	r6, r1, #3
 8002ad0:	4226      	tst	r6, r4
 8002ad2:	d104      	bne.n	8002ade <__aeabi_dsub+0x372>
 8002ad4:	465d      	mov	r5, fp
 8002ad6:	0033      	movs	r3, r6
 8002ad8:	08c2      	lsrs	r2, r0, #3
 8002ada:	0749      	lsls	r1, r1, #29
 8002adc:	430a      	orrs	r2, r1
 8002ade:	0f51      	lsrs	r1, r2, #29
 8002ae0:	00d2      	lsls	r2, r2, #3
 8002ae2:	08d2      	lsrs	r2, r2, #3
 8002ae4:	0749      	lsls	r1, r1, #29
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	0011      	movs	r1, r2
 8002aea:	4319      	orrs	r1, r3
 8002aec:	d100      	bne.n	8002af0 <__aeabi_dsub+0x384>
 8002aee:	e1c8      	b.n	8002e82 <__aeabi_dsub+0x716>
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0309      	lsls	r1, r1, #12
 8002af4:	430b      	orrs	r3, r1
 8002af6:	031b      	lsls	r3, r3, #12
 8002af8:	49d5      	ldr	r1, [pc, #852]	; (8002e50 <__aeabi_dsub+0x6e4>)
 8002afa:	0b1b      	lsrs	r3, r3, #12
 8002afc:	e6da      	b.n	80028b4 <__aeabi_dsub+0x148>
 8002afe:	49d5      	ldr	r1, [pc, #852]	; (8002e54 <__aeabi_dsub+0x6e8>)
 8002b00:	1ab6      	subs	r6, r6, r2
 8002b02:	400b      	ands	r3, r1
 8002b04:	4698      	mov	r8, r3
 8002b06:	e6b5      	b.n	8002874 <__aeabi_dsub+0x108>
 8002b08:	0020      	movs	r0, r4
 8002b0a:	f000 fb75 	bl	80031f8 <__clzsi2>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	3218      	adds	r2, #24
 8002b12:	2a1f      	cmp	r2, #31
 8002b14:	dc00      	bgt.n	8002b18 <__aeabi_dsub+0x3ac>
 8002b16:	e68f      	b.n	8002838 <__aeabi_dsub+0xcc>
 8002b18:	0023      	movs	r3, r4
 8002b1a:	3808      	subs	r0, #8
 8002b1c:	4083      	lsls	r3, r0
 8002b1e:	2400      	movs	r4, #0
 8002b20:	e692      	b.n	8002848 <__aeabi_dsub+0xdc>
 8002b22:	4308      	orrs	r0, r1
 8002b24:	0002      	movs	r2, r0
 8002b26:	1e50      	subs	r0, r2, #1
 8002b28:	4182      	sbcs	r2, r0
 8002b2a:	e66d      	b.n	8002808 <__aeabi_dsub+0x9c>
 8002b2c:	4cca      	ldr	r4, [pc, #808]	; (8002e58 <__aeabi_dsub+0x6ec>)
 8002b2e:	1c72      	adds	r2, r6, #1
 8002b30:	4222      	tst	r2, r4
 8002b32:	d000      	beq.n	8002b36 <__aeabi_dsub+0x3ca>
 8002b34:	e0ad      	b.n	8002c92 <__aeabi_dsub+0x526>
 8002b36:	464a      	mov	r2, r9
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	2e00      	cmp	r6, #0
 8002b3c:	d1b8      	bne.n	8002ab0 <__aeabi_dsub+0x344>
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x3d8>
 8002b42:	e158      	b.n	8002df6 <__aeabi_dsub+0x68a>
 8002b44:	000a      	movs	r2, r1
 8002b46:	4302      	orrs	r2, r0
 8002b48:	d000      	beq.n	8002b4c <__aeabi_dsub+0x3e0>
 8002b4a:	e159      	b.n	8002e00 <__aeabi_dsub+0x694>
 8002b4c:	464a      	mov	r2, r9
 8002b4e:	0759      	lsls	r1, r3, #29
 8002b50:	08d2      	lsrs	r2, r2, #3
 8002b52:	430a      	orrs	r2, r1
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	e786      	b.n	8002a66 <__aeabi_dsub+0x2fa>
 8002b58:	464a      	mov	r2, r9
 8002b5a:	0759      	lsls	r1, r3, #29
 8002b5c:	08d2      	lsrs	r2, r2, #3
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	e7c1      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002b64:	4dba      	ldr	r5, [pc, #744]	; (8002e50 <__aeabi_dsub+0x6e4>)
 8002b66:	42aa      	cmp	r2, r5
 8002b68:	d100      	bne.n	8002b6c <__aeabi_dsub+0x400>
 8002b6a:	e11e      	b.n	8002daa <__aeabi_dsub+0x63e>
 8002b6c:	2580      	movs	r5, #128	; 0x80
 8002b6e:	042d      	lsls	r5, r5, #16
 8002b70:	432b      	orrs	r3, r5
 8002b72:	4664      	mov	r4, ip
 8002b74:	2c38      	cmp	r4, #56	; 0x38
 8002b76:	dc5d      	bgt.n	8002c34 <__aeabi_dsub+0x4c8>
 8002b78:	2c1f      	cmp	r4, #31
 8002b7a:	dd00      	ble.n	8002b7e <__aeabi_dsub+0x412>
 8002b7c:	e0d0      	b.n	8002d20 <__aeabi_dsub+0x5b4>
 8002b7e:	2520      	movs	r5, #32
 8002b80:	4667      	mov	r7, ip
 8002b82:	1b2d      	subs	r5, r5, r4
 8002b84:	464e      	mov	r6, r9
 8002b86:	001c      	movs	r4, r3
 8002b88:	40fe      	lsrs	r6, r7
 8002b8a:	40ac      	lsls	r4, r5
 8002b8c:	4334      	orrs	r4, r6
 8002b8e:	464e      	mov	r6, r9
 8002b90:	40ae      	lsls	r6, r5
 8002b92:	0035      	movs	r5, r6
 8002b94:	40fb      	lsrs	r3, r7
 8002b96:	1e6e      	subs	r6, r5, #1
 8002b98:	41b5      	sbcs	r5, r6
 8002b9a:	1ac9      	subs	r1, r1, r3
 8002b9c:	432c      	orrs	r4, r5
 8002b9e:	e04e      	b.n	8002c3e <__aeabi_dsub+0x4d2>
 8002ba0:	464a      	mov	r2, r9
 8002ba2:	1a14      	subs	r4, r2, r0
 8002ba4:	45a1      	cmp	r9, r4
 8002ba6:	4192      	sbcs	r2, r2
 8002ba8:	4252      	negs	r2, r2
 8002baa:	4690      	mov	r8, r2
 8002bac:	1a5f      	subs	r7, r3, r1
 8002bae:	003a      	movs	r2, r7
 8002bb0:	4647      	mov	r7, r8
 8002bb2:	1bd2      	subs	r2, r2, r7
 8002bb4:	4690      	mov	r8, r2
 8002bb6:	0212      	lsls	r2, r2, #8
 8002bb8:	d500      	bpl.n	8002bbc <__aeabi_dsub+0x450>
 8002bba:	e08b      	b.n	8002cd4 <__aeabi_dsub+0x568>
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	4322      	orrs	r2, r4
 8002bc0:	d000      	beq.n	8002bc4 <__aeabi_dsub+0x458>
 8002bc2:	e630      	b.n	8002826 <__aeabi_dsub+0xba>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	e74d      	b.n	8002a66 <__aeabi_dsub+0x2fa>
 8002bca:	464a      	mov	r2, r9
 8002bcc:	0759      	lsls	r1, r3, #29
 8002bce:	08d2      	lsrs	r2, r2, #3
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	08db      	lsrs	r3, r3, #3
 8002bd4:	e744      	b.n	8002a60 <__aeabi_dsub+0x2f4>
 8002bd6:	4642      	mov	r2, r8
 8002bd8:	4b9e      	ldr	r3, [pc, #632]	; (8002e54 <__aeabi_dsub+0x6e8>)
 8002bda:	0861      	lsrs	r1, r4, #1
 8002bdc:	401a      	ands	r2, r3
 8002bde:	0013      	movs	r3, r2
 8002be0:	2201      	movs	r2, #1
 8002be2:	4014      	ands	r4, r2
 8002be4:	430c      	orrs	r4, r1
 8002be6:	07da      	lsls	r2, r3, #31
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	4698      	mov	r8, r3
 8002bec:	4314      	orrs	r4, r2
 8002bee:	e641      	b.n	8002874 <__aeabi_dsub+0x108>
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	3e1f      	subs	r6, #31
 8002bf4:	40f2      	lsrs	r2, r6
 8002bf6:	0016      	movs	r6, r2
 8002bf8:	2920      	cmp	r1, #32
 8002bfa:	d003      	beq.n	8002c04 <__aeabi_dsub+0x498>
 8002bfc:	2240      	movs	r2, #64	; 0x40
 8002bfe:	1a51      	subs	r1, r2, r1
 8002c00:	408b      	lsls	r3, r1
 8002c02:	431c      	orrs	r4, r3
 8002c04:	1e62      	subs	r2, r4, #1
 8002c06:	4194      	sbcs	r4, r2
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4334      	orrs	r4, r6
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	2600      	movs	r6, #0
 8002c10:	e71d      	b.n	8002a4e <__aeabi_dsub+0x2e2>
 8002c12:	000c      	movs	r4, r1
 8002c14:	3a20      	subs	r2, #32
 8002c16:	40d4      	lsrs	r4, r2
 8002c18:	0022      	movs	r2, r4
 8002c1a:	4664      	mov	r4, ip
 8002c1c:	2c20      	cmp	r4, #32
 8002c1e:	d004      	beq.n	8002c2a <__aeabi_dsub+0x4be>
 8002c20:	2740      	movs	r7, #64	; 0x40
 8002c22:	1b3f      	subs	r7, r7, r4
 8002c24:	40b9      	lsls	r1, r7
 8002c26:	4308      	orrs	r0, r1
 8002c28:	4680      	mov	r8, r0
 8002c2a:	4644      	mov	r4, r8
 8002c2c:	1e61      	subs	r1, r4, #1
 8002c2e:	418c      	sbcs	r4, r1
 8002c30:	4322      	orrs	r2, r4
 8002c32:	e5e9      	b.n	8002808 <__aeabi_dsub+0x9c>
 8002c34:	464c      	mov	r4, r9
 8002c36:	4323      	orrs	r3, r4
 8002c38:	001c      	movs	r4, r3
 8002c3a:	1e63      	subs	r3, r4, #1
 8002c3c:	419c      	sbcs	r4, r3
 8002c3e:	1b04      	subs	r4, r0, r4
 8002c40:	42a0      	cmp	r0, r4
 8002c42:	419b      	sbcs	r3, r3
 8002c44:	425b      	negs	r3, r3
 8002c46:	1acb      	subs	r3, r1, r3
 8002c48:	4698      	mov	r8, r3
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	0016      	movs	r6, r2
 8002c4e:	e5e2      	b.n	8002816 <__aeabi_dsub+0xaa>
 8002c50:	464e      	mov	r6, r9
 8002c52:	431e      	orrs	r6, r3
 8002c54:	d100      	bne.n	8002c58 <__aeabi_dsub+0x4ec>
 8002c56:	e0ae      	b.n	8002db6 <__aeabi_dsub+0x64a>
 8002c58:	1e66      	subs	r6, r4, #1
 8002c5a:	2c01      	cmp	r4, #1
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x4f4>
 8002c5e:	e0fd      	b.n	8002e5c <__aeabi_dsub+0x6f0>
 8002c60:	4f7b      	ldr	r7, [pc, #492]	; (8002e50 <__aeabi_dsub+0x6e4>)
 8002c62:	42bc      	cmp	r4, r7
 8002c64:	d100      	bne.n	8002c68 <__aeabi_dsub+0x4fc>
 8002c66:	e107      	b.n	8002e78 <__aeabi_dsub+0x70c>
 8002c68:	46b4      	mov	ip, r6
 8002c6a:	e69b      	b.n	80029a4 <__aeabi_dsub+0x238>
 8002c6c:	4664      	mov	r4, ip
 8002c6e:	2220      	movs	r2, #32
 8002c70:	1b12      	subs	r2, r2, r4
 8002c72:	000c      	movs	r4, r1
 8002c74:	4094      	lsls	r4, r2
 8002c76:	0007      	movs	r7, r0
 8002c78:	4090      	lsls	r0, r2
 8002c7a:	46a0      	mov	r8, r4
 8002c7c:	4664      	mov	r4, ip
 8002c7e:	1e42      	subs	r2, r0, #1
 8002c80:	4190      	sbcs	r0, r2
 8002c82:	4662      	mov	r2, ip
 8002c84:	40e7      	lsrs	r7, r4
 8002c86:	4644      	mov	r4, r8
 8002c88:	40d1      	lsrs	r1, r2
 8002c8a:	433c      	orrs	r4, r7
 8002c8c:	4304      	orrs	r4, r0
 8002c8e:	185b      	adds	r3, r3, r1
 8002c90:	e6f3      	b.n	8002a7a <__aeabi_dsub+0x30e>
 8002c92:	4c6f      	ldr	r4, [pc, #444]	; (8002e50 <__aeabi_dsub+0x6e4>)
 8002c94:	42a2      	cmp	r2, r4
 8002c96:	d100      	bne.n	8002c9a <__aeabi_dsub+0x52e>
 8002c98:	e0d5      	b.n	8002e46 <__aeabi_dsub+0x6da>
 8002c9a:	4448      	add	r0, r9
 8002c9c:	185b      	adds	r3, r3, r1
 8002c9e:	4548      	cmp	r0, r9
 8002ca0:	4189      	sbcs	r1, r1
 8002ca2:	4249      	negs	r1, r1
 8002ca4:	185b      	adds	r3, r3, r1
 8002ca6:	07dc      	lsls	r4, r3, #31
 8002ca8:	0840      	lsrs	r0, r0, #1
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	4698      	mov	r8, r3
 8002cae:	0016      	movs	r6, r2
 8002cb0:	4304      	orrs	r4, r0
 8002cb2:	e6cc      	b.n	8002a4e <__aeabi_dsub+0x2e2>
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	d000      	beq.n	8002cba <__aeabi_dsub+0x54e>
 8002cb8:	e082      	b.n	8002dc0 <__aeabi_dsub+0x654>
 8002cba:	000a      	movs	r2, r1
 8002cbc:	4302      	orrs	r2, r0
 8002cbe:	d140      	bne.n	8002d42 <__aeabi_dsub+0x5d6>
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	2500      	movs	r5, #0
 8002cc4:	031b      	lsls	r3, r3, #12
 8002cc6:	e713      	b.n	8002af0 <__aeabi_dsub+0x384>
 8002cc8:	074b      	lsls	r3, r1, #29
 8002cca:	08c2      	lsrs	r2, r0, #3
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	465d      	mov	r5, fp
 8002cd0:	08cb      	lsrs	r3, r1, #3
 8002cd2:	e6c5      	b.n	8002a60 <__aeabi_dsub+0x2f4>
 8002cd4:	464a      	mov	r2, r9
 8002cd6:	1a84      	subs	r4, r0, r2
 8002cd8:	42a0      	cmp	r0, r4
 8002cda:	4192      	sbcs	r2, r2
 8002cdc:	1acb      	subs	r3, r1, r3
 8002cde:	4252      	negs	r2, r2
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	465d      	mov	r5, fp
 8002ce6:	e59e      	b.n	8002826 <__aeabi_dsub+0xba>
 8002ce8:	464a      	mov	r2, r9
 8002cea:	0759      	lsls	r1, r3, #29
 8002cec:	08d2      	lsrs	r2, r2, #3
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	e6f9      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002cf4:	464a      	mov	r2, r9
 8002cf6:	1a14      	subs	r4, r2, r0
 8002cf8:	45a1      	cmp	r9, r4
 8002cfa:	4192      	sbcs	r2, r2
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	4252      	negs	r2, r2
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	4698      	mov	r8, r3
 8002d04:	2601      	movs	r6, #1
 8002d06:	e586      	b.n	8002816 <__aeabi_dsub+0xaa>
 8002d08:	464a      	mov	r2, r9
 8002d0a:	0759      	lsls	r1, r3, #29
 8002d0c:	08d2      	lsrs	r2, r2, #3
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	e6a5      	b.n	8002a60 <__aeabi_dsub+0x2f4>
 8002d14:	464c      	mov	r4, r9
 8002d16:	4323      	orrs	r3, r4
 8002d18:	001c      	movs	r4, r3
 8002d1a:	1e63      	subs	r3, r4, #1
 8002d1c:	419c      	sbcs	r4, r3
 8002d1e:	e65b      	b.n	80029d8 <__aeabi_dsub+0x26c>
 8002d20:	4665      	mov	r5, ip
 8002d22:	001e      	movs	r6, r3
 8002d24:	3d20      	subs	r5, #32
 8002d26:	40ee      	lsrs	r6, r5
 8002d28:	2c20      	cmp	r4, #32
 8002d2a:	d005      	beq.n	8002d38 <__aeabi_dsub+0x5cc>
 8002d2c:	2540      	movs	r5, #64	; 0x40
 8002d2e:	1b2d      	subs	r5, r5, r4
 8002d30:	40ab      	lsls	r3, r5
 8002d32:	464c      	mov	r4, r9
 8002d34:	431c      	orrs	r4, r3
 8002d36:	46a2      	mov	sl, r4
 8002d38:	4654      	mov	r4, sl
 8002d3a:	1e63      	subs	r3, r4, #1
 8002d3c:	419c      	sbcs	r4, r3
 8002d3e:	4334      	orrs	r4, r6
 8002d40:	e77d      	b.n	8002c3e <__aeabi_dsub+0x4d2>
 8002d42:	074b      	lsls	r3, r1, #29
 8002d44:	08c2      	lsrs	r2, r0, #3
 8002d46:	431a      	orrs	r2, r3
 8002d48:	465d      	mov	r5, fp
 8002d4a:	08cb      	lsrs	r3, r1, #3
 8002d4c:	e6cc      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002d4e:	000a      	movs	r2, r1
 8002d50:	4302      	orrs	r2, r0
 8002d52:	d100      	bne.n	8002d56 <__aeabi_dsub+0x5ea>
 8002d54:	e736      	b.n	8002bc4 <__aeabi_dsub+0x458>
 8002d56:	074b      	lsls	r3, r1, #29
 8002d58:	08c2      	lsrs	r2, r0, #3
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	465d      	mov	r5, fp
 8002d5e:	08cb      	lsrs	r3, r1, #3
 8002d60:	e681      	b.n	8002a66 <__aeabi_dsub+0x2fa>
 8002d62:	464a      	mov	r2, r9
 8002d64:	1a84      	subs	r4, r0, r2
 8002d66:	42a0      	cmp	r0, r4
 8002d68:	4192      	sbcs	r2, r2
 8002d6a:	1acb      	subs	r3, r1, r3
 8002d6c:	4252      	negs	r2, r2
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	4698      	mov	r8, r3
 8002d72:	465d      	mov	r5, fp
 8002d74:	2601      	movs	r6, #1
 8002d76:	e54e      	b.n	8002816 <__aeabi_dsub+0xaa>
 8002d78:	074b      	lsls	r3, r1, #29
 8002d7a:	08c2      	lsrs	r2, r0, #3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	08cb      	lsrs	r3, r1, #3
 8002d80:	e6b2      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002d82:	464a      	mov	r2, r9
 8002d84:	1a14      	subs	r4, r2, r0
 8002d86:	45a1      	cmp	r9, r4
 8002d88:	4192      	sbcs	r2, r2
 8002d8a:	1a5f      	subs	r7, r3, r1
 8002d8c:	4252      	negs	r2, r2
 8002d8e:	1aba      	subs	r2, r7, r2
 8002d90:	4690      	mov	r8, r2
 8002d92:	0212      	lsls	r2, r2, #8
 8002d94:	d56b      	bpl.n	8002e6e <__aeabi_dsub+0x702>
 8002d96:	464a      	mov	r2, r9
 8002d98:	1a84      	subs	r4, r0, r2
 8002d9a:	42a0      	cmp	r0, r4
 8002d9c:	4192      	sbcs	r2, r2
 8002d9e:	1acb      	subs	r3, r1, r3
 8002da0:	4252      	negs	r2, r2
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	4698      	mov	r8, r3
 8002da6:	465d      	mov	r5, fp
 8002da8:	e564      	b.n	8002874 <__aeabi_dsub+0x108>
 8002daa:	074b      	lsls	r3, r1, #29
 8002dac:	08c2      	lsrs	r2, r0, #3
 8002dae:	431a      	orrs	r2, r3
 8002db0:	465d      	mov	r5, fp
 8002db2:	08cb      	lsrs	r3, r1, #3
 8002db4:	e698      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002db6:	074b      	lsls	r3, r1, #29
 8002db8:	08c2      	lsrs	r2, r0, #3
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	08cb      	lsrs	r3, r1, #3
 8002dbe:	e64f      	b.n	8002a60 <__aeabi_dsub+0x2f4>
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	4302      	orrs	r2, r0
 8002dc4:	d090      	beq.n	8002ce8 <__aeabi_dsub+0x57c>
 8002dc6:	464a      	mov	r2, r9
 8002dc8:	075c      	lsls	r4, r3, #29
 8002dca:	08d2      	lsrs	r2, r2, #3
 8002dcc:	4314      	orrs	r4, r2
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	0312      	lsls	r2, r2, #12
 8002dd4:	4213      	tst	r3, r2
 8002dd6:	d008      	beq.n	8002dea <__aeabi_dsub+0x67e>
 8002dd8:	08ce      	lsrs	r6, r1, #3
 8002dda:	4216      	tst	r6, r2
 8002ddc:	d105      	bne.n	8002dea <__aeabi_dsub+0x67e>
 8002dde:	08c0      	lsrs	r0, r0, #3
 8002de0:	0749      	lsls	r1, r1, #29
 8002de2:	4308      	orrs	r0, r1
 8002de4:	0004      	movs	r4, r0
 8002de6:	465d      	mov	r5, fp
 8002de8:	0033      	movs	r3, r6
 8002dea:	0f61      	lsrs	r1, r4, #29
 8002dec:	00e2      	lsls	r2, r4, #3
 8002dee:	0749      	lsls	r1, r1, #29
 8002df0:	08d2      	lsrs	r2, r2, #3
 8002df2:	430a      	orrs	r2, r1
 8002df4:	e678      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002df6:	074b      	lsls	r3, r1, #29
 8002df8:	08c2      	lsrs	r2, r0, #3
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	08cb      	lsrs	r3, r1, #3
 8002dfe:	e632      	b.n	8002a66 <__aeabi_dsub+0x2fa>
 8002e00:	4448      	add	r0, r9
 8002e02:	185b      	adds	r3, r3, r1
 8002e04:	4548      	cmp	r0, r9
 8002e06:	4192      	sbcs	r2, r2
 8002e08:	4698      	mov	r8, r3
 8002e0a:	4252      	negs	r2, r2
 8002e0c:	4490      	add	r8, r2
 8002e0e:	4643      	mov	r3, r8
 8002e10:	0004      	movs	r4, r0
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	d400      	bmi.n	8002e18 <__aeabi_dsub+0x6ac>
 8002e16:	e61a      	b.n	8002a4e <__aeabi_dsub+0x2e2>
 8002e18:	4642      	mov	r2, r8
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <__aeabi_dsub+0x6e8>)
 8002e1c:	2601      	movs	r6, #1
 8002e1e:	401a      	ands	r2, r3
 8002e20:	4690      	mov	r8, r2
 8002e22:	e614      	b.n	8002a4e <__aeabi_dsub+0x2e2>
 8002e24:	4666      	mov	r6, ip
 8002e26:	001f      	movs	r7, r3
 8002e28:	3e20      	subs	r6, #32
 8002e2a:	40f7      	lsrs	r7, r6
 8002e2c:	2c20      	cmp	r4, #32
 8002e2e:	d005      	beq.n	8002e3c <__aeabi_dsub+0x6d0>
 8002e30:	2640      	movs	r6, #64	; 0x40
 8002e32:	1b36      	subs	r6, r6, r4
 8002e34:	40b3      	lsls	r3, r6
 8002e36:	464c      	mov	r4, r9
 8002e38:	431c      	orrs	r4, r3
 8002e3a:	46a2      	mov	sl, r4
 8002e3c:	4654      	mov	r4, sl
 8002e3e:	1e63      	subs	r3, r4, #1
 8002e40:	419c      	sbcs	r4, r3
 8002e42:	433c      	orrs	r4, r7
 8002e44:	e5c8      	b.n	80029d8 <__aeabi_dsub+0x26c>
 8002e46:	0011      	movs	r1, r2
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	e532      	b.n	80028b4 <__aeabi_dsub+0x148>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	000007ff 	.word	0x000007ff
 8002e54:	ff7fffff 	.word	0xff7fffff
 8002e58:	000007fe 	.word	0x000007fe
 8002e5c:	464a      	mov	r2, r9
 8002e5e:	1814      	adds	r4, r2, r0
 8002e60:	4284      	cmp	r4, r0
 8002e62:	4192      	sbcs	r2, r2
 8002e64:	185b      	adds	r3, r3, r1
 8002e66:	4698      	mov	r8, r3
 8002e68:	4252      	negs	r2, r2
 8002e6a:	4490      	add	r8, r2
 8002e6c:	e5e9      	b.n	8002a42 <__aeabi_dsub+0x2d6>
 8002e6e:	4642      	mov	r2, r8
 8002e70:	4322      	orrs	r2, r4
 8002e72:	d100      	bne.n	8002e76 <__aeabi_dsub+0x70a>
 8002e74:	e6a6      	b.n	8002bc4 <__aeabi_dsub+0x458>
 8002e76:	e5ea      	b.n	8002a4e <__aeabi_dsub+0x2e2>
 8002e78:	074b      	lsls	r3, r1, #29
 8002e7a:	08c2      	lsrs	r2, r0, #3
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	08cb      	lsrs	r3, r1, #3
 8002e80:	e632      	b.n	8002ae8 <__aeabi_dsub+0x37c>
 8002e82:	2200      	movs	r2, #0
 8002e84:	4901      	ldr	r1, [pc, #4]	; (8002e8c <__aeabi_dsub+0x720>)
 8002e86:	0013      	movs	r3, r2
 8002e88:	e514      	b.n	80028b4 <__aeabi_dsub+0x148>
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	000007ff 	.word	0x000007ff

08002e90 <__aeabi_dcmpun>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	0005      	movs	r5, r0
 8002e94:	480c      	ldr	r0, [pc, #48]	; (8002ec8 <__aeabi_dcmpun+0x38>)
 8002e96:	030c      	lsls	r4, r1, #12
 8002e98:	0016      	movs	r6, r2
 8002e9a:	0049      	lsls	r1, r1, #1
 8002e9c:	031a      	lsls	r2, r3, #12
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	0b24      	lsrs	r4, r4, #12
 8002ea2:	0d49      	lsrs	r1, r1, #21
 8002ea4:	0b12      	lsrs	r2, r2, #12
 8002ea6:	0d5b      	lsrs	r3, r3, #21
 8002ea8:	4281      	cmp	r1, r0
 8002eaa:	d008      	beq.n	8002ebe <__aeabi_dcmpun+0x2e>
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <__aeabi_dcmpun+0x38>)
 8002eae:	2000      	movs	r0, #0
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d103      	bne.n	8002ebc <__aeabi_dcmpun+0x2c>
 8002eb4:	4332      	orrs	r2, r6
 8002eb6:	0010      	movs	r0, r2
 8002eb8:	1e42      	subs	r2, r0, #1
 8002eba:	4190      	sbcs	r0, r2
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	432c      	orrs	r4, r5
 8002ec2:	d1fb      	bne.n	8002ebc <__aeabi_dcmpun+0x2c>
 8002ec4:	e7f2      	b.n	8002eac <__aeabi_dcmpun+0x1c>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	000007ff 	.word	0x000007ff

08002ecc <__aeabi_d2iz>:
 8002ecc:	000a      	movs	r2, r1
 8002ece:	b530      	push	{r4, r5, lr}
 8002ed0:	4c13      	ldr	r4, [pc, #76]	; (8002f20 <__aeabi_d2iz+0x54>)
 8002ed2:	0053      	lsls	r3, r2, #1
 8002ed4:	0309      	lsls	r1, r1, #12
 8002ed6:	0005      	movs	r5, r0
 8002ed8:	0b09      	lsrs	r1, r1, #12
 8002eda:	2000      	movs	r0, #0
 8002edc:	0d5b      	lsrs	r3, r3, #21
 8002ede:	0fd2      	lsrs	r2, r2, #31
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	dd04      	ble.n	8002eee <__aeabi_d2iz+0x22>
 8002ee4:	480f      	ldr	r0, [pc, #60]	; (8002f24 <__aeabi_d2iz+0x58>)
 8002ee6:	4283      	cmp	r3, r0
 8002ee8:	dd02      	ble.n	8002ef0 <__aeabi_d2iz+0x24>
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <__aeabi_d2iz+0x5c>)
 8002eec:	18d0      	adds	r0, r2, r3
 8002eee:	bd30      	pop	{r4, r5, pc}
 8002ef0:	2080      	movs	r0, #128	; 0x80
 8002ef2:	0340      	lsls	r0, r0, #13
 8002ef4:	4301      	orrs	r1, r0
 8002ef6:	480d      	ldr	r0, [pc, #52]	; (8002f2c <__aeabi_d2iz+0x60>)
 8002ef8:	1ac0      	subs	r0, r0, r3
 8002efa:	281f      	cmp	r0, #31
 8002efc:	dd08      	ble.n	8002f10 <__aeabi_d2iz+0x44>
 8002efe:	480c      	ldr	r0, [pc, #48]	; (8002f30 <__aeabi_d2iz+0x64>)
 8002f00:	1ac3      	subs	r3, r0, r3
 8002f02:	40d9      	lsrs	r1, r3
 8002f04:	000b      	movs	r3, r1
 8002f06:	4258      	negs	r0, r3
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d1f0      	bne.n	8002eee <__aeabi_d2iz+0x22>
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	e7ee      	b.n	8002eee <__aeabi_d2iz+0x22>
 8002f10:	4c08      	ldr	r4, [pc, #32]	; (8002f34 <__aeabi_d2iz+0x68>)
 8002f12:	40c5      	lsrs	r5, r0
 8002f14:	46a4      	mov	ip, r4
 8002f16:	4463      	add	r3, ip
 8002f18:	4099      	lsls	r1, r3
 8002f1a:	000b      	movs	r3, r1
 8002f1c:	432b      	orrs	r3, r5
 8002f1e:	e7f2      	b.n	8002f06 <__aeabi_d2iz+0x3a>
 8002f20:	000003fe 	.word	0x000003fe
 8002f24:	0000041d 	.word	0x0000041d
 8002f28:	7fffffff 	.word	0x7fffffff
 8002f2c:	00000433 	.word	0x00000433
 8002f30:	00000413 	.word	0x00000413
 8002f34:	fffffbed 	.word	0xfffffbed

08002f38 <__aeabi_i2d>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d016      	beq.n	8002f6c <__aeabi_i2d+0x34>
 8002f3e:	17c3      	asrs	r3, r0, #31
 8002f40:	18c5      	adds	r5, r0, r3
 8002f42:	405d      	eors	r5, r3
 8002f44:	0fc4      	lsrs	r4, r0, #31
 8002f46:	0028      	movs	r0, r5
 8002f48:	f000 f956 	bl	80031f8 <__clzsi2>
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <__aeabi_i2d+0x5c>)
 8002f4e:	1a12      	subs	r2, r2, r0
 8002f50:	280a      	cmp	r0, #10
 8002f52:	dc16      	bgt.n	8002f82 <__aeabi_i2d+0x4a>
 8002f54:	0003      	movs	r3, r0
 8002f56:	002e      	movs	r6, r5
 8002f58:	3315      	adds	r3, #21
 8002f5a:	409e      	lsls	r6, r3
 8002f5c:	230b      	movs	r3, #11
 8002f5e:	1a18      	subs	r0, r3, r0
 8002f60:	40c5      	lsrs	r5, r0
 8002f62:	0553      	lsls	r3, r2, #21
 8002f64:	032d      	lsls	r5, r5, #12
 8002f66:	0b2d      	lsrs	r5, r5, #12
 8002f68:	0d5b      	lsrs	r3, r3, #21
 8002f6a:	e003      	b.n	8002f74 <__aeabi_i2d+0x3c>
 8002f6c:	2400      	movs	r4, #0
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2500      	movs	r5, #0
 8002f72:	2600      	movs	r6, #0
 8002f74:	051b      	lsls	r3, r3, #20
 8002f76:	432b      	orrs	r3, r5
 8002f78:	07e4      	lsls	r4, r4, #31
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	0030      	movs	r0, r6
 8002f7e:	0019      	movs	r1, r3
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
 8002f82:	380b      	subs	r0, #11
 8002f84:	4085      	lsls	r5, r0
 8002f86:	0553      	lsls	r3, r2, #21
 8002f88:	032d      	lsls	r5, r5, #12
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	0b2d      	lsrs	r5, r5, #12
 8002f8e:	0d5b      	lsrs	r3, r3, #21
 8002f90:	e7f0      	b.n	8002f74 <__aeabi_i2d+0x3c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	0000041e 	.word	0x0000041e

08002f98 <__aeabi_ui2d>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	1e04      	subs	r4, r0, #0
 8002f9c:	d010      	beq.n	8002fc0 <__aeabi_ui2d+0x28>
 8002f9e:	f000 f92b 	bl	80031f8 <__clzsi2>
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <__aeabi_ui2d+0x48>)
 8002fa4:	1a1b      	subs	r3, r3, r0
 8002fa6:	280a      	cmp	r0, #10
 8002fa8:	dc11      	bgt.n	8002fce <__aeabi_ui2d+0x36>
 8002faa:	220b      	movs	r2, #11
 8002fac:	0021      	movs	r1, r4
 8002fae:	1a12      	subs	r2, r2, r0
 8002fb0:	40d1      	lsrs	r1, r2
 8002fb2:	3015      	adds	r0, #21
 8002fb4:	030a      	lsls	r2, r1, #12
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	4084      	lsls	r4, r0
 8002fba:	0b12      	lsrs	r2, r2, #12
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	e001      	b.n	8002fc4 <__aeabi_ui2d+0x2c>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	0020      	movs	r0, r4
 8002fca:	0019      	movs	r1, r3
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	0022      	movs	r2, r4
 8002fd0:	380b      	subs	r0, #11
 8002fd2:	4082      	lsls	r2, r0
 8002fd4:	055b      	lsls	r3, r3, #21
 8002fd6:	0312      	lsls	r2, r2, #12
 8002fd8:	2400      	movs	r4, #0
 8002fda:	0b12      	lsrs	r2, r2, #12
 8002fdc:	0d5b      	lsrs	r3, r3, #21
 8002fde:	e7f1      	b.n	8002fc4 <__aeabi_ui2d+0x2c>
 8002fe0:	0000041e 	.word	0x0000041e

08002fe4 <__aeabi_f2d>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	0043      	lsls	r3, r0, #1
 8002fe8:	0246      	lsls	r6, r0, #9
 8002fea:	0fc4      	lsrs	r4, r0, #31
 8002fec:	20fe      	movs	r0, #254	; 0xfe
 8002fee:	0e1b      	lsrs	r3, r3, #24
 8002ff0:	1c59      	adds	r1, r3, #1
 8002ff2:	0a75      	lsrs	r5, r6, #9
 8002ff4:	4208      	tst	r0, r1
 8002ff6:	d00c      	beq.n	8003012 <__aeabi_f2d+0x2e>
 8002ff8:	22e0      	movs	r2, #224	; 0xe0
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4694      	mov	ip, r2
 8002ffe:	076d      	lsls	r5, r5, #29
 8003000:	0b36      	lsrs	r6, r6, #12
 8003002:	4463      	add	r3, ip
 8003004:	051b      	lsls	r3, r3, #20
 8003006:	4333      	orrs	r3, r6
 8003008:	07e4      	lsls	r4, r4, #31
 800300a:	4323      	orrs	r3, r4
 800300c:	0028      	movs	r0, r5
 800300e:	0019      	movs	r1, r3
 8003010:	bd70      	pop	{r4, r5, r6, pc}
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <__aeabi_f2d+0x5c>
 8003016:	2d00      	cmp	r5, #0
 8003018:	d01b      	beq.n	8003052 <__aeabi_f2d+0x6e>
 800301a:	0028      	movs	r0, r5
 800301c:	f000 f8ec 	bl	80031f8 <__clzsi2>
 8003020:	280a      	cmp	r0, #10
 8003022:	dc1c      	bgt.n	800305e <__aeabi_f2d+0x7a>
 8003024:	230b      	movs	r3, #11
 8003026:	002a      	movs	r2, r5
 8003028:	1a1b      	subs	r3, r3, r0
 800302a:	40da      	lsrs	r2, r3
 800302c:	0003      	movs	r3, r0
 800302e:	3315      	adds	r3, #21
 8003030:	409d      	lsls	r5, r3
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <__aeabi_f2d+0x88>)
 8003034:	0312      	lsls	r2, r2, #12
 8003036:	1a1b      	subs	r3, r3, r0
 8003038:	055b      	lsls	r3, r3, #21
 800303a:	0b16      	lsrs	r6, r2, #12
 800303c:	0d5b      	lsrs	r3, r3, #21
 800303e:	e7e1      	b.n	8003004 <__aeabi_f2d+0x20>
 8003040:	2d00      	cmp	r5, #0
 8003042:	d009      	beq.n	8003058 <__aeabi_f2d+0x74>
 8003044:	0b32      	lsrs	r2, r6, #12
 8003046:	2680      	movs	r6, #128	; 0x80
 8003048:	0336      	lsls	r6, r6, #12
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <__aeabi_f2d+0x8c>)
 800304c:	076d      	lsls	r5, r5, #29
 800304e:	4316      	orrs	r6, r2
 8003050:	e7d8      	b.n	8003004 <__aeabi_f2d+0x20>
 8003052:	2300      	movs	r3, #0
 8003054:	2600      	movs	r6, #0
 8003056:	e7d5      	b.n	8003004 <__aeabi_f2d+0x20>
 8003058:	2600      	movs	r6, #0
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <__aeabi_f2d+0x8c>)
 800305c:	e7d2      	b.n	8003004 <__aeabi_f2d+0x20>
 800305e:	0003      	movs	r3, r0
 8003060:	002a      	movs	r2, r5
 8003062:	3b0b      	subs	r3, #11
 8003064:	409a      	lsls	r2, r3
 8003066:	2500      	movs	r5, #0
 8003068:	e7e3      	b.n	8003032 <__aeabi_f2d+0x4e>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	00000389 	.word	0x00000389
 8003070:	000007ff 	.word	0x000007ff

08003074 <__aeabi_d2f>:
 8003074:	0002      	movs	r2, r0
 8003076:	004b      	lsls	r3, r1, #1
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	0308      	lsls	r0, r1, #12
 800307c:	0d5b      	lsrs	r3, r3, #21
 800307e:	4e3d      	ldr	r6, [pc, #244]	; (8003174 <__aeabi_d2f+0x100>)
 8003080:	0fcc      	lsrs	r4, r1, #31
 8003082:	0a40      	lsrs	r0, r0, #9
 8003084:	0f51      	lsrs	r1, r2, #29
 8003086:	1c5f      	adds	r7, r3, #1
 8003088:	4308      	orrs	r0, r1
 800308a:	00d5      	lsls	r5, r2, #3
 800308c:	4237      	tst	r7, r6
 800308e:	d00a      	beq.n	80030a6 <__aeabi_d2f+0x32>
 8003090:	4939      	ldr	r1, [pc, #228]	; (8003178 <__aeabi_d2f+0x104>)
 8003092:	185e      	adds	r6, r3, r1
 8003094:	2efe      	cmp	r6, #254	; 0xfe
 8003096:	dd16      	ble.n	80030c6 <__aeabi_d2f+0x52>
 8003098:	23ff      	movs	r3, #255	; 0xff
 800309a:	2100      	movs	r1, #0
 800309c:	05db      	lsls	r3, r3, #23
 800309e:	430b      	orrs	r3, r1
 80030a0:	07e0      	lsls	r0, r4, #31
 80030a2:	4318      	orrs	r0, r3
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <__aeabi_d2f+0x44>
 80030aa:	4328      	orrs	r0, r5
 80030ac:	d027      	beq.n	80030fe <__aeabi_d2f+0x8a>
 80030ae:	2105      	movs	r1, #5
 80030b0:	0189      	lsls	r1, r1, #6
 80030b2:	0a49      	lsrs	r1, r1, #9
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e7f1      	b.n	800309c <__aeabi_d2f+0x28>
 80030b8:	4305      	orrs	r5, r0
 80030ba:	d0ed      	beq.n	8003098 <__aeabi_d2f+0x24>
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	03c9      	lsls	r1, r1, #15
 80030c0:	23ff      	movs	r3, #255	; 0xff
 80030c2:	4301      	orrs	r1, r0
 80030c4:	e7ea      	b.n	800309c <__aeabi_d2f+0x28>
 80030c6:	2e00      	cmp	r6, #0
 80030c8:	dd1c      	ble.n	8003104 <__aeabi_d2f+0x90>
 80030ca:	0192      	lsls	r2, r2, #6
 80030cc:	0011      	movs	r1, r2
 80030ce:	1e4a      	subs	r2, r1, #1
 80030d0:	4191      	sbcs	r1, r2
 80030d2:	00c0      	lsls	r0, r0, #3
 80030d4:	0f6d      	lsrs	r5, r5, #29
 80030d6:	4301      	orrs	r1, r0
 80030d8:	4329      	orrs	r1, r5
 80030da:	074b      	lsls	r3, r1, #29
 80030dc:	d048      	beq.n	8003170 <__aeabi_d2f+0xfc>
 80030de:	230f      	movs	r3, #15
 80030e0:	400b      	ands	r3, r1
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d000      	beq.n	80030e8 <__aeabi_d2f+0x74>
 80030e6:	3104      	adds	r1, #4
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	04db      	lsls	r3, r3, #19
 80030ec:	400b      	ands	r3, r1
 80030ee:	d03f      	beq.n	8003170 <__aeabi_d2f+0xfc>
 80030f0:	1c72      	adds	r2, r6, #1
 80030f2:	2efe      	cmp	r6, #254	; 0xfe
 80030f4:	d0d0      	beq.n	8003098 <__aeabi_d2f+0x24>
 80030f6:	0189      	lsls	r1, r1, #6
 80030f8:	0a49      	lsrs	r1, r1, #9
 80030fa:	b2d3      	uxtb	r3, r2
 80030fc:	e7ce      	b.n	800309c <__aeabi_d2f+0x28>
 80030fe:	2300      	movs	r3, #0
 8003100:	2100      	movs	r1, #0
 8003102:	e7cb      	b.n	800309c <__aeabi_d2f+0x28>
 8003104:	0032      	movs	r2, r6
 8003106:	3217      	adds	r2, #23
 8003108:	db22      	blt.n	8003150 <__aeabi_d2f+0xdc>
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	221e      	movs	r2, #30
 800310e:	0409      	lsls	r1, r1, #16
 8003110:	4308      	orrs	r0, r1
 8003112:	1b92      	subs	r2, r2, r6
 8003114:	2a1f      	cmp	r2, #31
 8003116:	dd1d      	ble.n	8003154 <__aeabi_d2f+0xe0>
 8003118:	2102      	movs	r1, #2
 800311a:	4249      	negs	r1, r1
 800311c:	1b8e      	subs	r6, r1, r6
 800311e:	0001      	movs	r1, r0
 8003120:	40f1      	lsrs	r1, r6
 8003122:	000e      	movs	r6, r1
 8003124:	2a20      	cmp	r2, #32
 8003126:	d004      	beq.n	8003132 <__aeabi_d2f+0xbe>
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <__aeabi_d2f+0x108>)
 800312a:	4694      	mov	ip, r2
 800312c:	4463      	add	r3, ip
 800312e:	4098      	lsls	r0, r3
 8003130:	4305      	orrs	r5, r0
 8003132:	0029      	movs	r1, r5
 8003134:	1e4d      	subs	r5, r1, #1
 8003136:	41a9      	sbcs	r1, r5
 8003138:	4331      	orrs	r1, r6
 800313a:	2600      	movs	r6, #0
 800313c:	074b      	lsls	r3, r1, #29
 800313e:	d1ce      	bne.n	80030de <__aeabi_d2f+0x6a>
 8003140:	2080      	movs	r0, #128	; 0x80
 8003142:	000b      	movs	r3, r1
 8003144:	04c0      	lsls	r0, r0, #19
 8003146:	2201      	movs	r2, #1
 8003148:	4003      	ands	r3, r0
 800314a:	4201      	tst	r1, r0
 800314c:	d1d3      	bne.n	80030f6 <__aeabi_d2f+0x82>
 800314e:	e7af      	b.n	80030b0 <__aeabi_d2f+0x3c>
 8003150:	2300      	movs	r3, #0
 8003152:	e7ac      	b.n	80030ae <__aeabi_d2f+0x3a>
 8003154:	490a      	ldr	r1, [pc, #40]	; (8003180 <__aeabi_d2f+0x10c>)
 8003156:	468c      	mov	ip, r1
 8003158:	0029      	movs	r1, r5
 800315a:	4463      	add	r3, ip
 800315c:	40d1      	lsrs	r1, r2
 800315e:	409d      	lsls	r5, r3
 8003160:	000a      	movs	r2, r1
 8003162:	0029      	movs	r1, r5
 8003164:	4098      	lsls	r0, r3
 8003166:	1e4d      	subs	r5, r1, #1
 8003168:	41a9      	sbcs	r1, r5
 800316a:	4301      	orrs	r1, r0
 800316c:	4311      	orrs	r1, r2
 800316e:	e7e4      	b.n	800313a <__aeabi_d2f+0xc6>
 8003170:	0033      	movs	r3, r6
 8003172:	e79d      	b.n	80030b0 <__aeabi_d2f+0x3c>
 8003174:	000007fe 	.word	0x000007fe
 8003178:	fffffc80 	.word	0xfffffc80
 800317c:	fffffca2 	.word	0xfffffca2
 8003180:	fffffc82 	.word	0xfffffc82

08003184 <__aeabi_cfrcmple>:
 8003184:	4684      	mov	ip, r0
 8003186:	1c08      	adds	r0, r1, #0
 8003188:	4661      	mov	r1, ip
 800318a:	e7ff      	b.n	800318c <__aeabi_cfcmpeq>

0800318c <__aeabi_cfcmpeq>:
 800318c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800318e:	f000 f9b7 	bl	8003500 <__lesf2>
 8003192:	2800      	cmp	r0, #0
 8003194:	d401      	bmi.n	800319a <__aeabi_cfcmpeq+0xe>
 8003196:	2100      	movs	r1, #0
 8003198:	42c8      	cmn	r0, r1
 800319a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800319c <__aeabi_fcmpeq>:
 800319c:	b510      	push	{r4, lr}
 800319e:	f000 f93b 	bl	8003418 <__eqsf2>
 80031a2:	4240      	negs	r0, r0
 80031a4:	3001      	adds	r0, #1
 80031a6:	bd10      	pop	{r4, pc}

080031a8 <__aeabi_fcmplt>:
 80031a8:	b510      	push	{r4, lr}
 80031aa:	f000 f9a9 	bl	8003500 <__lesf2>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	db01      	blt.n	80031b6 <__aeabi_fcmplt+0xe>
 80031b2:	2000      	movs	r0, #0
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	2001      	movs	r0, #1
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)

080031bc <__aeabi_fcmple>:
 80031bc:	b510      	push	{r4, lr}
 80031be:	f000 f99f 	bl	8003500 <__lesf2>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	dd01      	ble.n	80031ca <__aeabi_fcmple+0xe>
 80031c6:	2000      	movs	r0, #0
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	2001      	movs	r0, #1
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)

080031d0 <__aeabi_fcmpgt>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	f000 f949 	bl	8003468 <__gesf2>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	dc01      	bgt.n	80031de <__aeabi_fcmpgt+0xe>
 80031da:	2000      	movs	r0, #0
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	2001      	movs	r0, #1
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)

080031e4 <__aeabi_fcmpge>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	f000 f93f 	bl	8003468 <__gesf2>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	da01      	bge.n	80031f2 <__aeabi_fcmpge+0xe>
 80031ee:	2000      	movs	r0, #0
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	2001      	movs	r0, #1
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)

080031f8 <__clzsi2>:
 80031f8:	211c      	movs	r1, #28
 80031fa:	2301      	movs	r3, #1
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	4298      	cmp	r0, r3
 8003200:	d301      	bcc.n	8003206 <__clzsi2+0xe>
 8003202:	0c00      	lsrs	r0, r0, #16
 8003204:	3910      	subs	r1, #16
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	4298      	cmp	r0, r3
 800320a:	d301      	bcc.n	8003210 <__clzsi2+0x18>
 800320c:	0a00      	lsrs	r0, r0, #8
 800320e:	3908      	subs	r1, #8
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	4298      	cmp	r0, r3
 8003214:	d301      	bcc.n	800321a <__clzsi2+0x22>
 8003216:	0900      	lsrs	r0, r0, #4
 8003218:	3904      	subs	r1, #4
 800321a:	a202      	add	r2, pc, #8	; (adr r2, 8003224 <__clzsi2+0x2c>)
 800321c:	5c10      	ldrb	r0, [r2, r0]
 800321e:	1840      	adds	r0, r0, r1
 8003220:	4770      	bx	lr
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	02020304 	.word	0x02020304
 8003228:	01010101 	.word	0x01010101
	...

08003234 <__clzdi2>:
 8003234:	b510      	push	{r4, lr}
 8003236:	2900      	cmp	r1, #0
 8003238:	d103      	bne.n	8003242 <__clzdi2+0xe>
 800323a:	f7ff ffdd 	bl	80031f8 <__clzsi2>
 800323e:	3020      	adds	r0, #32
 8003240:	e002      	b.n	8003248 <__clzdi2+0x14>
 8003242:	1c08      	adds	r0, r1, #0
 8003244:	f7ff ffd8 	bl	80031f8 <__clzsi2>
 8003248:	bd10      	pop	{r4, pc}
 800324a:	46c0      	nop			; (mov r8, r8)

0800324c <__divdi3>:
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	4657      	mov	r7, sl
 8003250:	464e      	mov	r6, r9
 8003252:	4645      	mov	r5, r8
 8003254:	46de      	mov	lr, fp
 8003256:	b5e0      	push	{r5, r6, r7, lr}
 8003258:	000f      	movs	r7, r1
 800325a:	0019      	movs	r1, r3
 800325c:	2300      	movs	r3, #0
 800325e:	0006      	movs	r6, r0
 8003260:	4698      	mov	r8, r3
 8003262:	0010      	movs	r0, r2
 8003264:	b083      	sub	sp, #12
 8003266:	2f00      	cmp	r7, #0
 8003268:	da07      	bge.n	800327a <__divdi3+0x2e>
 800326a:	0033      	movs	r3, r6
 800326c:	003c      	movs	r4, r7
 800326e:	2700      	movs	r7, #0
 8003270:	425e      	negs	r6, r3
 8003272:	41a7      	sbcs	r7, r4
 8003274:	2301      	movs	r3, #1
 8003276:	425b      	negs	r3, r3
 8003278:	4698      	mov	r8, r3
 800327a:	2900      	cmp	r1, #0
 800327c:	da07      	bge.n	800328e <__divdi3+0x42>
 800327e:	4643      	mov	r3, r8
 8003280:	43db      	mvns	r3, r3
 8003282:	000c      	movs	r4, r1
 8003284:	4698      	mov	r8, r3
 8003286:	0003      	movs	r3, r0
 8003288:	2100      	movs	r1, #0
 800328a:	4258      	negs	r0, r3
 800328c:	41a1      	sbcs	r1, r4
 800328e:	0034      	movs	r4, r6
 8003290:	003d      	movs	r5, r7
 8003292:	4682      	mov	sl, r0
 8003294:	4689      	mov	r9, r1
 8003296:	42b9      	cmp	r1, r7
 8003298:	d86a      	bhi.n	8003370 <__divdi3+0x124>
 800329a:	d067      	beq.n	800336c <__divdi3+0x120>
 800329c:	4649      	mov	r1, r9
 800329e:	4650      	mov	r0, sl
 80032a0:	f7ff ffc8 	bl	8003234 <__clzdi2>
 80032a4:	4683      	mov	fp, r0
 80032a6:	0039      	movs	r1, r7
 80032a8:	0030      	movs	r0, r6
 80032aa:	f7ff ffc3 	bl	8003234 <__clzdi2>
 80032ae:	465b      	mov	r3, fp
 80032b0:	1a1b      	subs	r3, r3, r0
 80032b2:	469c      	mov	ip, r3
 80032b4:	3b20      	subs	r3, #32
 80032b6:	469b      	mov	fp, r3
 80032b8:	d46b      	bmi.n	8003392 <__divdi3+0x146>
 80032ba:	4658      	mov	r0, fp
 80032bc:	4651      	mov	r1, sl
 80032be:	4081      	lsls	r1, r0
 80032c0:	4660      	mov	r0, ip
 80032c2:	000b      	movs	r3, r1
 80032c4:	4651      	mov	r1, sl
 80032c6:	4081      	lsls	r1, r0
 80032c8:	000a      	movs	r2, r1
 80032ca:	42bb      	cmp	r3, r7
 80032cc:	d900      	bls.n	80032d0 <__divdi3+0x84>
 80032ce:	e072      	b.n	80033b6 <__divdi3+0x16a>
 80032d0:	42bb      	cmp	r3, r7
 80032d2:	d100      	bne.n	80032d6 <__divdi3+0x8a>
 80032d4:	e079      	b.n	80033ca <__divdi3+0x17e>
 80032d6:	0034      	movs	r4, r6
 80032d8:	003d      	movs	r5, r7
 80032da:	4659      	mov	r1, fp
 80032dc:	1aa4      	subs	r4, r4, r2
 80032de:	419d      	sbcs	r5, r3
 80032e0:	2900      	cmp	r1, #0
 80032e2:	da00      	bge.n	80032e6 <__divdi3+0x9a>
 80032e4:	e074      	b.n	80033d0 <__divdi3+0x184>
 80032e6:	2100      	movs	r1, #0
 80032e8:	2000      	movs	r0, #0
 80032ea:	2601      	movs	r6, #1
 80032ec:	9000      	str	r0, [sp, #0]
 80032ee:	9101      	str	r1, [sp, #4]
 80032f0:	4659      	mov	r1, fp
 80032f2:	408e      	lsls	r6, r1
 80032f4:	9601      	str	r6, [sp, #4]
 80032f6:	4661      	mov	r1, ip
 80032f8:	2601      	movs	r6, #1
 80032fa:	408e      	lsls	r6, r1
 80032fc:	4661      	mov	r1, ip
 80032fe:	9600      	str	r6, [sp, #0]
 8003300:	2900      	cmp	r1, #0
 8003302:	d05f      	beq.n	80033c4 <__divdi3+0x178>
 8003304:	07d9      	lsls	r1, r3, #31
 8003306:	0856      	lsrs	r6, r2, #1
 8003308:	430e      	orrs	r6, r1
 800330a:	085f      	lsrs	r7, r3, #1
 800330c:	4661      	mov	r1, ip
 800330e:	2201      	movs	r2, #1
 8003310:	2300      	movs	r3, #0
 8003312:	e00c      	b.n	800332e <__divdi3+0xe2>
 8003314:	42af      	cmp	r7, r5
 8003316:	d101      	bne.n	800331c <__divdi3+0xd0>
 8003318:	42a6      	cmp	r6, r4
 800331a:	d80a      	bhi.n	8003332 <__divdi3+0xe6>
 800331c:	1ba4      	subs	r4, r4, r6
 800331e:	41bd      	sbcs	r5, r7
 8003320:	1924      	adds	r4, r4, r4
 8003322:	416d      	adcs	r5, r5
 8003324:	3901      	subs	r1, #1
 8003326:	18a4      	adds	r4, r4, r2
 8003328:	415d      	adcs	r5, r3
 800332a:	2900      	cmp	r1, #0
 800332c:	d006      	beq.n	800333c <__divdi3+0xf0>
 800332e:	42af      	cmp	r7, r5
 8003330:	d9f0      	bls.n	8003314 <__divdi3+0xc8>
 8003332:	3901      	subs	r1, #1
 8003334:	1924      	adds	r4, r4, r4
 8003336:	416d      	adcs	r5, r5
 8003338:	2900      	cmp	r1, #0
 800333a:	d1f8      	bne.n	800332e <__divdi3+0xe2>
 800333c:	9800      	ldr	r0, [sp, #0]
 800333e:	9901      	ldr	r1, [sp, #4]
 8003340:	465b      	mov	r3, fp
 8003342:	1900      	adds	r0, r0, r4
 8003344:	4169      	adcs	r1, r5
 8003346:	2b00      	cmp	r3, #0
 8003348:	db4d      	blt.n	80033e6 <__divdi3+0x19a>
 800334a:	002e      	movs	r6, r5
 800334c:	002c      	movs	r4, r5
 800334e:	40de      	lsrs	r6, r3
 8003350:	4663      	mov	r3, ip
 8003352:	40dc      	lsrs	r4, r3
 8003354:	465b      	mov	r3, fp
 8003356:	2b00      	cmp	r3, #0
 8003358:	db55      	blt.n	8003406 <__divdi3+0x1ba>
 800335a:	0034      	movs	r4, r6
 800335c:	409c      	lsls	r4, r3
 800335e:	0023      	movs	r3, r4
 8003360:	4664      	mov	r4, ip
 8003362:	40a6      	lsls	r6, r4
 8003364:	0032      	movs	r2, r6
 8003366:	1a80      	subs	r0, r0, r2
 8003368:	4199      	sbcs	r1, r3
 800336a:	e003      	b.n	8003374 <__divdi3+0x128>
 800336c:	42b0      	cmp	r0, r6
 800336e:	d995      	bls.n	800329c <__divdi3+0x50>
 8003370:	2000      	movs	r0, #0
 8003372:	2100      	movs	r1, #0
 8003374:	4643      	mov	r3, r8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <__divdi3+0x138>
 800337a:	0003      	movs	r3, r0
 800337c:	000c      	movs	r4, r1
 800337e:	2100      	movs	r1, #0
 8003380:	4258      	negs	r0, r3
 8003382:	41a1      	sbcs	r1, r4
 8003384:	b003      	add	sp, #12
 8003386:	bcf0      	pop	{r4, r5, r6, r7}
 8003388:	46bb      	mov	fp, r7
 800338a:	46b2      	mov	sl, r6
 800338c:	46a9      	mov	r9, r5
 800338e:	46a0      	mov	r8, r4
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	4662      	mov	r2, ip
 8003394:	4648      	mov	r0, r9
 8003396:	2320      	movs	r3, #32
 8003398:	4651      	mov	r1, sl
 800339a:	4090      	lsls	r0, r2
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	40d9      	lsrs	r1, r3
 80033a0:	0003      	movs	r3, r0
 80033a2:	9100      	str	r1, [sp, #0]
 80033a4:	9900      	ldr	r1, [sp, #0]
 80033a6:	4660      	mov	r0, ip
 80033a8:	430b      	orrs	r3, r1
 80033aa:	4651      	mov	r1, sl
 80033ac:	4081      	lsls	r1, r0
 80033ae:	000a      	movs	r2, r1
 80033b0:	42bb      	cmp	r3, r7
 80033b2:	d800      	bhi.n	80033b6 <__divdi3+0x16a>
 80033b4:	e78c      	b.n	80032d0 <__divdi3+0x84>
 80033b6:	2100      	movs	r1, #0
 80033b8:	2000      	movs	r0, #0
 80033ba:	9000      	str	r0, [sp, #0]
 80033bc:	9101      	str	r1, [sp, #4]
 80033be:	4661      	mov	r1, ip
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d19f      	bne.n	8003304 <__divdi3+0xb8>
 80033c4:	9800      	ldr	r0, [sp, #0]
 80033c6:	9901      	ldr	r1, [sp, #4]
 80033c8:	e7d4      	b.n	8003374 <__divdi3+0x128>
 80033ca:	42b1      	cmp	r1, r6
 80033cc:	d8f3      	bhi.n	80033b6 <__divdi3+0x16a>
 80033ce:	e782      	b.n	80032d6 <__divdi3+0x8a>
 80033d0:	4661      	mov	r1, ip
 80033d2:	2620      	movs	r6, #32
 80033d4:	2701      	movs	r7, #1
 80033d6:	1a76      	subs	r6, r6, r1
 80033d8:	2000      	movs	r0, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	40f7      	lsrs	r7, r6
 80033de:	9000      	str	r0, [sp, #0]
 80033e0:	9101      	str	r1, [sp, #4]
 80033e2:	9701      	str	r7, [sp, #4]
 80033e4:	e787      	b.n	80032f6 <__divdi3+0xaa>
 80033e6:	4662      	mov	r2, ip
 80033e8:	2320      	movs	r3, #32
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	002a      	movs	r2, r5
 80033ee:	409a      	lsls	r2, r3
 80033f0:	0026      	movs	r6, r4
 80033f2:	0013      	movs	r3, r2
 80033f4:	4662      	mov	r2, ip
 80033f6:	40d6      	lsrs	r6, r2
 80033f8:	002c      	movs	r4, r5
 80033fa:	431e      	orrs	r6, r3
 80033fc:	4663      	mov	r3, ip
 80033fe:	40dc      	lsrs	r4, r3
 8003400:	465b      	mov	r3, fp
 8003402:	2b00      	cmp	r3, #0
 8003404:	daa9      	bge.n	800335a <__divdi3+0x10e>
 8003406:	4662      	mov	r2, ip
 8003408:	2320      	movs	r3, #32
 800340a:	0035      	movs	r5, r6
 800340c:	4094      	lsls	r4, r2
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	40dd      	lsrs	r5, r3
 8003412:	0023      	movs	r3, r4
 8003414:	432b      	orrs	r3, r5
 8003416:	e7a3      	b.n	8003360 <__divdi3+0x114>

08003418 <__eqsf2>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	0042      	lsls	r2, r0, #1
 800341c:	024e      	lsls	r6, r1, #9
 800341e:	004c      	lsls	r4, r1, #1
 8003420:	0245      	lsls	r5, r0, #9
 8003422:	0a6d      	lsrs	r5, r5, #9
 8003424:	0e12      	lsrs	r2, r2, #24
 8003426:	0fc3      	lsrs	r3, r0, #31
 8003428:	0a76      	lsrs	r6, r6, #9
 800342a:	0e24      	lsrs	r4, r4, #24
 800342c:	0fc9      	lsrs	r1, r1, #31
 800342e:	2aff      	cmp	r2, #255	; 0xff
 8003430:	d00f      	beq.n	8003452 <__eqsf2+0x3a>
 8003432:	2cff      	cmp	r4, #255	; 0xff
 8003434:	d011      	beq.n	800345a <__eqsf2+0x42>
 8003436:	2001      	movs	r0, #1
 8003438:	42a2      	cmp	r2, r4
 800343a:	d000      	beq.n	800343e <__eqsf2+0x26>
 800343c:	bd70      	pop	{r4, r5, r6, pc}
 800343e:	42b5      	cmp	r5, r6
 8003440:	d1fc      	bne.n	800343c <__eqsf2+0x24>
 8003442:	428b      	cmp	r3, r1
 8003444:	d00d      	beq.n	8003462 <__eqsf2+0x4a>
 8003446:	2a00      	cmp	r2, #0
 8003448:	d1f8      	bne.n	800343c <__eqsf2+0x24>
 800344a:	0028      	movs	r0, r5
 800344c:	1e45      	subs	r5, r0, #1
 800344e:	41a8      	sbcs	r0, r5
 8003450:	e7f4      	b.n	800343c <__eqsf2+0x24>
 8003452:	2001      	movs	r0, #1
 8003454:	2d00      	cmp	r5, #0
 8003456:	d1f1      	bne.n	800343c <__eqsf2+0x24>
 8003458:	e7eb      	b.n	8003432 <__eqsf2+0x1a>
 800345a:	2001      	movs	r0, #1
 800345c:	2e00      	cmp	r6, #0
 800345e:	d1ed      	bne.n	800343c <__eqsf2+0x24>
 8003460:	e7e9      	b.n	8003436 <__eqsf2+0x1e>
 8003462:	2000      	movs	r0, #0
 8003464:	e7ea      	b.n	800343c <__eqsf2+0x24>
 8003466:	46c0      	nop			; (mov r8, r8)

08003468 <__gesf2>:
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	0042      	lsls	r2, r0, #1
 800346c:	0246      	lsls	r6, r0, #9
 800346e:	024d      	lsls	r5, r1, #9
 8003470:	004c      	lsls	r4, r1, #1
 8003472:	0fc3      	lsrs	r3, r0, #31
 8003474:	0a76      	lsrs	r6, r6, #9
 8003476:	0e12      	lsrs	r2, r2, #24
 8003478:	0a6d      	lsrs	r5, r5, #9
 800347a:	0e24      	lsrs	r4, r4, #24
 800347c:	0fc8      	lsrs	r0, r1, #31
 800347e:	2aff      	cmp	r2, #255	; 0xff
 8003480:	d01f      	beq.n	80034c2 <__gesf2+0x5a>
 8003482:	2cff      	cmp	r4, #255	; 0xff
 8003484:	d010      	beq.n	80034a8 <__gesf2+0x40>
 8003486:	2a00      	cmp	r2, #0
 8003488:	d11f      	bne.n	80034ca <__gesf2+0x62>
 800348a:	4271      	negs	r1, r6
 800348c:	4171      	adcs	r1, r6
 800348e:	2c00      	cmp	r4, #0
 8003490:	d101      	bne.n	8003496 <__gesf2+0x2e>
 8003492:	2d00      	cmp	r5, #0
 8003494:	d01e      	beq.n	80034d4 <__gesf2+0x6c>
 8003496:	2900      	cmp	r1, #0
 8003498:	d10e      	bne.n	80034b8 <__gesf2+0x50>
 800349a:	4283      	cmp	r3, r0
 800349c:	d01e      	beq.n	80034dc <__gesf2+0x74>
 800349e:	2102      	movs	r1, #2
 80034a0:	1e58      	subs	r0, r3, #1
 80034a2:	4008      	ands	r0, r1
 80034a4:	3801      	subs	r0, #1
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	d126      	bne.n	80034fa <__gesf2+0x92>
 80034ac:	2a00      	cmp	r2, #0
 80034ae:	d1f4      	bne.n	800349a <__gesf2+0x32>
 80034b0:	4271      	negs	r1, r6
 80034b2:	4171      	adcs	r1, r6
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d0f0      	beq.n	800349a <__gesf2+0x32>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__gesf2+0x3e>
 80034bc:	2001      	movs	r0, #1
 80034be:	4240      	negs	r0, r0
 80034c0:	e7f1      	b.n	80034a6 <__gesf2+0x3e>
 80034c2:	2e00      	cmp	r6, #0
 80034c4:	d119      	bne.n	80034fa <__gesf2+0x92>
 80034c6:	2cff      	cmp	r4, #255	; 0xff
 80034c8:	d0ee      	beq.n	80034a8 <__gesf2+0x40>
 80034ca:	2c00      	cmp	r4, #0
 80034cc:	d1e5      	bne.n	800349a <__gesf2+0x32>
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	d1e3      	bne.n	800349a <__gesf2+0x32>
 80034d2:	e7e4      	b.n	800349e <__gesf2+0x36>
 80034d4:	2000      	movs	r0, #0
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d0e5      	beq.n	80034a6 <__gesf2+0x3e>
 80034da:	e7e0      	b.n	800349e <__gesf2+0x36>
 80034dc:	42a2      	cmp	r2, r4
 80034de:	dc05      	bgt.n	80034ec <__gesf2+0x84>
 80034e0:	dbea      	blt.n	80034b8 <__gesf2+0x50>
 80034e2:	42ae      	cmp	r6, r5
 80034e4:	d802      	bhi.n	80034ec <__gesf2+0x84>
 80034e6:	d3e7      	bcc.n	80034b8 <__gesf2+0x50>
 80034e8:	2000      	movs	r0, #0
 80034ea:	e7dc      	b.n	80034a6 <__gesf2+0x3e>
 80034ec:	4241      	negs	r1, r0
 80034ee:	4141      	adcs	r1, r0
 80034f0:	4248      	negs	r0, r1
 80034f2:	2102      	movs	r1, #2
 80034f4:	4008      	ands	r0, r1
 80034f6:	3801      	subs	r0, #1
 80034f8:	e7d5      	b.n	80034a6 <__gesf2+0x3e>
 80034fa:	2002      	movs	r0, #2
 80034fc:	4240      	negs	r0, r0
 80034fe:	e7d2      	b.n	80034a6 <__gesf2+0x3e>

08003500 <__lesf2>:
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	0042      	lsls	r2, r0, #1
 8003504:	0246      	lsls	r6, r0, #9
 8003506:	024d      	lsls	r5, r1, #9
 8003508:	004c      	lsls	r4, r1, #1
 800350a:	0fc3      	lsrs	r3, r0, #31
 800350c:	0a76      	lsrs	r6, r6, #9
 800350e:	0e12      	lsrs	r2, r2, #24
 8003510:	0a6d      	lsrs	r5, r5, #9
 8003512:	0e24      	lsrs	r4, r4, #24
 8003514:	0fc8      	lsrs	r0, r1, #31
 8003516:	2aff      	cmp	r2, #255	; 0xff
 8003518:	d00d      	beq.n	8003536 <__lesf2+0x36>
 800351a:	2cff      	cmp	r4, #255	; 0xff
 800351c:	d00f      	beq.n	800353e <__lesf2+0x3e>
 800351e:	2a00      	cmp	r2, #0
 8003520:	d123      	bne.n	800356a <__lesf2+0x6a>
 8003522:	4271      	negs	r1, r6
 8003524:	4171      	adcs	r1, r6
 8003526:	2c00      	cmp	r4, #0
 8003528:	d10f      	bne.n	800354a <__lesf2+0x4a>
 800352a:	2d00      	cmp	r5, #0
 800352c:	d10d      	bne.n	800354a <__lesf2+0x4a>
 800352e:	2000      	movs	r0, #0
 8003530:	2e00      	cmp	r6, #0
 8003532:	d014      	beq.n	800355e <__lesf2+0x5e>
 8003534:	e00d      	b.n	8003552 <__lesf2+0x52>
 8003536:	2e00      	cmp	r6, #0
 8003538:	d110      	bne.n	800355c <__lesf2+0x5c>
 800353a:	2cff      	cmp	r4, #255	; 0xff
 800353c:	d115      	bne.n	800356a <__lesf2+0x6a>
 800353e:	2d00      	cmp	r5, #0
 8003540:	d10c      	bne.n	800355c <__lesf2+0x5c>
 8003542:	2a00      	cmp	r2, #0
 8003544:	d103      	bne.n	800354e <__lesf2+0x4e>
 8003546:	4271      	negs	r1, r6
 8003548:	4171      	adcs	r1, r6
 800354a:	2900      	cmp	r1, #0
 800354c:	d108      	bne.n	8003560 <__lesf2+0x60>
 800354e:	4283      	cmp	r3, r0
 8003550:	d010      	beq.n	8003574 <__lesf2+0x74>
 8003552:	2102      	movs	r1, #2
 8003554:	1e58      	subs	r0, r3, #1
 8003556:	4008      	ands	r0, r1
 8003558:	3801      	subs	r0, #1
 800355a:	e000      	b.n	800355e <__lesf2+0x5e>
 800355c:	2002      	movs	r0, #2
 800355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003560:	2800      	cmp	r0, #0
 8003562:	d1fc      	bne.n	800355e <__lesf2+0x5e>
 8003564:	2001      	movs	r0, #1
 8003566:	4240      	negs	r0, r0
 8003568:	e7f9      	b.n	800355e <__lesf2+0x5e>
 800356a:	2c00      	cmp	r4, #0
 800356c:	d1ef      	bne.n	800354e <__lesf2+0x4e>
 800356e:	2d00      	cmp	r5, #0
 8003570:	d1ed      	bne.n	800354e <__lesf2+0x4e>
 8003572:	e7ee      	b.n	8003552 <__lesf2+0x52>
 8003574:	42a2      	cmp	r2, r4
 8003576:	dc05      	bgt.n	8003584 <__lesf2+0x84>
 8003578:	dbf2      	blt.n	8003560 <__lesf2+0x60>
 800357a:	42ae      	cmp	r6, r5
 800357c:	d802      	bhi.n	8003584 <__lesf2+0x84>
 800357e:	d3ef      	bcc.n	8003560 <__lesf2+0x60>
 8003580:	2000      	movs	r0, #0
 8003582:	e7ec      	b.n	800355e <__lesf2+0x5e>
 8003584:	4241      	negs	r1, r0
 8003586:	4141      	adcs	r1, r0
 8003588:	4248      	negs	r0, r1
 800358a:	2102      	movs	r1, #2
 800358c:	4008      	ands	r0, r1
 800358e:	3801      	subs	r0, #1
 8003590:	e7e5      	b.n	800355e <__lesf2+0x5e>
 8003592:	46c0      	nop			; (mov r8, r8)

08003594 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_Init+0x3c>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_Init+0x3c>)
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	0049      	lsls	r1, r1, #1
 80035aa:	430a      	orrs	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ae:	2003      	movs	r0, #3
 80035b0:	f000 f810 	bl	80035d4 <HAL_InitTick>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e001      	b.n	80035c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80035c0:	f008 fe40 	bl	800c244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	781b      	ldrb	r3, [r3, #0]
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40022000 	.word	0x40022000

080035d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035dc:	230f      	movs	r3, #15
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_InitTick+0x88>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02b      	beq.n	8003644 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_InitTick+0x8c>)
 80035ee:	681c      	ldr	r4, [r3, #0]
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_InitTick+0x88>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	0019      	movs	r1, r3
 80035f6:	23fa      	movs	r3, #250	; 0xfa
 80035f8:	0098      	lsls	r0, r3, #2
 80035fa:	f7fc fd8d 	bl	8000118 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	0019      	movs	r1, r3
 8003602:	0020      	movs	r0, r4
 8003604:	f7fc fd88 	bl	8000118 <__udivsi3>
 8003608:	0003      	movs	r3, r0
 800360a:	0018      	movs	r0, r3
 800360c:	f001 f8c1 	bl	8004792 <HAL_SYSTICK_Config>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d112      	bne.n	800363a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d80a      	bhi.n	8003630 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	2301      	movs	r3, #1
 800361e:	425b      	negs	r3, r3
 8003620:	2200      	movs	r2, #0
 8003622:	0018      	movs	r0, r3
 8003624:	f001 f890 	bl	8004748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_InitTick+0x90>)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e00d      	b.n	800364c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003630:	230f      	movs	r3, #15
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e008      	b.n	800364c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800363a:	230f      	movs	r3, #15
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e003      	b.n	800364c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003644:	230f      	movs	r3, #15
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800364c:	230f      	movs	r3, #15
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	781b      	ldrb	r3, [r3, #0]
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b005      	add	sp, #20
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20000004 	.word	0x20000004
 8003660:	20000008 	.word	0x20000008
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_IncTick+0x1c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	001a      	movs	r2, r3
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_IncTick+0x20>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	18d2      	adds	r2, r2, r3
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_IncTick+0x20>)
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	20000004 	.word	0x20000004
 8003688:	2000009c 	.word	0x2000009c

0800368c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  return uwTick;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <HAL_GetTick+0x10>)
 8003692:	681b      	ldr	r3, [r3, #0]
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	2000009c 	.word	0x2000009c

080036a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7ff fff0 	bl	800368c <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3301      	adds	r3, #1
 80036b8:	d005      	beq.n	80036c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_Delay+0x44>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	001a      	movs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	f7ff ffe0 	bl	800368c <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d8f7      	bhi.n	80036c8 <HAL_Delay+0x28>
  {
  }
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	40010000 	.word	0x40010000
 8003710:	fffff9ff 	.word	0xfffff9ff

08003714 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003724:	401a      	ands	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	fe3fffff 	.word	0xfe3fffff

0800373c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	23e0      	movs	r3, #224	; 0xe0
 800374a:	045b      	lsls	r3, r3, #17
 800374c:	4013      	ands	r3, r2
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}

08003756 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	2104      	movs	r1, #4
 800376a:	400a      	ands	r2, r1
 800376c:	2107      	movs	r1, #7
 800376e:	4091      	lsls	r1, r2
 8003770:	000a      	movs	r2, r1
 8003772:	43d2      	mvns	r2, r2
 8003774:	401a      	ands	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2104      	movs	r1, #4
 800377a:	400b      	ands	r3, r1
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4099      	lsls	r1, r3
 8003780:	000b      	movs	r3, r1
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}

08003790 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	23c0      	movs	r3, #192	; 0xc0
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4013      	ands	r3, r2
 80037a2:	d101      	bne.n	80037a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	211f      	movs	r1, #31
 80037c6:	400a      	ands	r2, r1
 80037c8:	210f      	movs	r1, #15
 80037ca:	4091      	lsls	r1, r2
 80037cc:	000a      	movs	r2, r1
 80037ce:	43d2      	mvns	r2, r2
 80037d0:	401a      	ands	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	210f      	movs	r1, #15
 80037d8:	4019      	ands	r1, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	201f      	movs	r0, #31
 80037de:	4003      	ands	r3, r0
 80037e0:	4099      	lsls	r1, r3
 80037e2:	000b      	movs	r3, r1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	035b      	lsls	r3, r3, #13
 8003804:	0b5b      	lsrs	r3, r3, #13
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	0352      	lsls	r2, r2, #13
 8003826:	0b52      	lsrs	r2, r2, #13
 8003828:	43d2      	mvns	r2, r2
 800382a:	401a      	ands	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	0212      	lsls	r2, r2, #8
 800384c:	43d2      	mvns	r2, r2
 800384e:	401a      	ands	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	400b      	ands	r3, r1
 8003858:	4904      	ldr	r1, [pc, #16]	; (800386c <LL_ADC_SetChannelSamplingTime+0x34>)
 800385a:	400b      	ands	r3, r1
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b004      	add	sp, #16
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	07ffff00 	.word	0x07ffff00

08003870 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a05      	ldr	r2, [pc, #20]	; (8003894 <LL_ADC_EnableInternalRegulator+0x24>)
 800387e:	4013      	ands	r3, r2
 8003880:	2280      	movs	r2, #128	; 0x80
 8003882:	0552      	lsls	r2, r2, #21
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b002      	add	sp, #8
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	6fffffe8 	.word	0x6fffffe8

08003898 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	055b      	lsls	r3, r3, #21
 80038a8:	401a      	ands	r2, r3
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	055b      	lsls	r3, r3, #21
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d101      	bne.n	80038b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}

080038c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <LL_ADC_Enable+0x20>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	2201      	movs	r2, #1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	7fffffe8 	.word	0x7fffffe8

080038e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a04      	ldr	r2, [pc, #16]	; (8003904 <LL_ADC_Disable+0x20>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	2202      	movs	r2, #2
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	7fffffe8 	.word	0x7fffffe8

08003908 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2201      	movs	r2, #1
 8003916:	4013      	ands	r3, r2
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <LL_ADC_IsEnabled+0x18>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <LL_ADC_IsEnabled+0x1a>
 8003920:	2300      	movs	r3, #0
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b002      	add	sp, #8
 8003928:	bd80      	pop	{r7, pc}

0800392a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d101      	bne.n	8003942 <LL_ADC_IsDisableOngoing+0x18>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <LL_ADC_IsDisableOngoing+0x1a>
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}

0800394c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <LL_ADC_REG_StartConversion+0x20>)
 800395a:	4013      	ands	r3, r2
 800395c:	2204      	movs	r2, #4
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	7fffffe8 	.word	0x7fffffe8

08003970 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2204      	movs	r2, #4
 800397e:	4013      	ands	r3, r2
 8003980:	2b04      	cmp	r3, #4
 8003982:	d101      	bne.n	8003988 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800399c:	231f      	movs	r3, #31
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1b1      	b.n	8003d1e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f008 fc65 	bl	800c294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2254      	movs	r2, #84	; 0x54
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff5b 	bl	8003898 <LL_ADC_IsInternalRegulatorEnabled>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d115      	bne.n	8003a12 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ff40 	bl	8003870 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f0:	4bcd      	ldr	r3, [pc, #820]	; (8003d28 <HAL_ADC_Init+0x394>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	49cd      	ldr	r1, [pc, #820]	; (8003d2c <HAL_ADC_Init+0x398>)
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fc fb8e 	bl	8000118 <__udivsi3>
 80039fc:	0003      	movs	r3, r0
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff ff3e 	bl	8003898 <LL_ADC_IsInternalRegulatorEnabled>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d10f      	bne.n	8003a40 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	2210      	movs	r2, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2201      	movs	r2, #1
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a38:	231f      	movs	r3, #31
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff ff93 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	2210      	movs	r2, #16
 8003a54:	4013      	ands	r3, r2
 8003a56:	d000      	beq.n	8003a5a <HAL_ADC_Init+0xc6>
 8003a58:	e154      	b.n	8003d04 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d000      	beq.n	8003a62 <HAL_ADC_Init+0xce>
 8003a60:	e150      	b.n	8003d04 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4ab2      	ldr	r2, [pc, #712]	; (8003d30 <HAL_ADC_Init+0x39c>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff ff46 	bl	8003908 <LL_ADC_IsEnabled>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d156      	bne.n	8003b2e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2218      	movs	r2, #24
 8003a88:	4393      	bics	r3, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0f9b      	lsrs	r3, r3, #30
 8003a9e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	223c      	movs	r2, #60	; 0x3c
 8003ab0:	5c9b      	ldrb	r3, [r3, r2]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d111      	bne.n	8003ada <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0f9b      	lsrs	r3, r3, #30
 8003abc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ac2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003ac8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003ace:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	4a94      	ldr	r2, [pc, #592]	; (8003d34 <HAL_ADC_Init+0x3a0>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	23c0      	movs	r3, #192	; 0xc0
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d018      	beq.n	8003b2e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	05db      	lsls	r3, r3, #23
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d012      	beq.n	8003b2e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d00c      	beq.n	8003b2e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003b14:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_ADC_Init+0x3a4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a88      	ldr	r2, [pc, #544]	; (8003d3c <HAL_ADC_Init+0x3a8>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	23f0      	movs	r3, #240	; 0xf0
 8003b24:	039b      	lsls	r3, r3, #14
 8003b26:	401a      	ands	r2, r3
 8003b28:	4b83      	ldr	r3, [pc, #524]	; (8003d38 <HAL_ADC_Init+0x3a4>)
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7e1b      	ldrb	r3, [r3, #24]
 8003b32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7e5b      	ldrb	r3, [r3, #25]
 8003b38:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7e9b      	ldrb	r3, [r3, #26]
 8003b40:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b42:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_ADC_Init+0x1be>
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	e000      	b.n	8003b54 <HAL_ADC_Init+0x1c0>
 8003b52:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b54:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b5a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da04      	bge.n	8003b6e <HAL_ADC_Init+0x1da>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	e001      	b.n	8003b72 <HAL_ADC_Init+0x1de>
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003b72:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	5c5b      	ldrb	r3, [r3, r1]
 8003b7a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b7c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	5c9b      	ldrb	r3, [r3, r2]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d115      	bne.n	8003bba <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	7e9b      	ldrb	r3, [r3, #26]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	0252      	lsls	r2, r2, #9
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e00b      	b.n	8003bba <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc6:	23e0      	movs	r3, #224	; 0xe0
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_ADC_Init+0x3ac>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	4a53      	ldr	r2, [pc, #332]	; (8003d44 <HAL_ADC_Init+0x3b0>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	001a      	movs	r2, r3
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f7ff fda1 	bl	8003756 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	494a      	ldr	r1, [pc, #296]	; (8003d48 <HAL_ADC_Init+0x3b4>)
 8003c1e:	001a      	movs	r2, r3
 8003c20:	f7ff fd99 	bl	8003756 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2110      	movs	r1, #16
 8003c38:	4249      	negs	r1, r1
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
 8003c3e:	e03a      	b.n	8003cb6 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	039b      	lsls	r3, r3, #14
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d134      	bne.n	8003cb6 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e00c      	b.n	8003c6c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	40da      	lsrs	r2, r3
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b0f      	cmp	r3, #15
 8003c64:	d006      	beq.n	8003c74 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b07      	cmp	r3, #7
 8003c70:	d9ef      	bls.n	8003c52 <HAL_ADC_Init+0x2be>
 8003c72:	e000      	b.n	8003c76 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003c74:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d109      	bne.n	8003c90 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2110      	movs	r1, #16
 8003c88:	4249      	negs	r1, r1
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8003c8e:	e012      	b.n	8003cb6 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	221c      	movs	r2, #28
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	4252      	negs	r2, r2
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	0011      	movs	r1, r2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_ADC_Init+0x3b8>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10b      	bne.n	8003cde <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4393      	bics	r3, r2
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003cdc:	e01c      	b.n	8003d18 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	2212      	movs	r2, #18
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003cfa:	231f      	movs	r3, #31
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003d02:	e009      	b.n	8003d18 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	2210      	movs	r2, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d10:	231f      	movs	r3, #31
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003d18:	231f      	movs	r3, #31
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b008      	add	sp, #32
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	20000008 	.word	0x20000008
 8003d2c:	00030d40 	.word	0x00030d40
 8003d30:	fffffefd 	.word	0xfffffefd
 8003d34:	1ffffc02 	.word	0x1ffffc02
 8003d38:	40012708 	.word	0x40012708
 8003d3c:	ffc3ffff 	.word	0xffc3ffff
 8003d40:	fffe0219 	.word	0xfffe0219
 8003d44:	dffffc02 	.word	0xdffffc02
 8003d48:	07ffff04 	.word	0x07ffff04
 8003d4c:	833fffe7 	.word	0x833fffe7

08003d50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d50:	b5b0      	push	{r4, r5, r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff fe07 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003d62:	1e03      	subs	r3, r0, #0
 8003d64:	d135      	bne.n	8003dd2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2254      	movs	r2, #84	; 0x54
 8003d6a:	5c9b      	ldrb	r3, [r3, r2]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_Start+0x24>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e035      	b.n	8003de0 <HAL_ADC_Start+0x90>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2254      	movs	r2, #84	; 0x54
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d7c:	250f      	movs	r5, #15
 8003d7e:	197c      	adds	r4, r7, r5
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 faaa 	bl	80042dc <ADC_Enable>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d8c:	197b      	adds	r3, r7, r5
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d119      	bne.n	8003dc8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <HAL_ADC_Start+0x98>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2280      	movs	r2, #128	; 0x80
 8003d9e:	0052      	lsls	r2, r2, #1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	221c      	movs	r2, #28
 8003db2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2254      	movs	r2, #84	; 0x54
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7ff fdc3 	bl	800394c <LL_ADC_REG_StartConversion>
 8003dc6:	e008      	b.n	8003dda <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2254      	movs	r2, #84	; 0x54
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5499      	strb	r1, [r3, r2]
 8003dd0:	e003      	b.n	8003dda <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dd2:	230f      	movs	r3, #15
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bdb0      	pop	{r4, r5, r7, pc}
 8003de8:	fffff0fe 	.word	0xfffff0fe

08003dec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d102      	bne.n	8003e04 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003dfe:	2308      	movs	r3, #8
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e00f      	b.n	8003e24 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	2220      	movs	r2, #32
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e072      	b.n	8003f06 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003e20:	2304      	movs	r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e24:	f7ff fc32 	bl	800368c <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e2c:	e01f      	b.n	8003e6e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	d01c      	beq.n	8003e6e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e34:	f7ff fc2a 	bl	800368c <HAL_GetTick>
 8003e38:	0002      	movs	r2, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <HAL_ADC_PollForConversion+0x5e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d111      	bne.n	8003e6e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4013      	ands	r3, r2
 8003e54:	d10b      	bne.n	8003e6e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2254      	movs	r2, #84	; 0x54
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e04b      	b.n	8003f06 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	d0d9      	beq.n	8003e2e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fc7f 	bl	8003790 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d02e      	beq.n	8003ef4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7e9b      	ldrb	r3, [r3, #26]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d12a      	bne.n	8003ef4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d123      	bne.n	8003ef4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fd5d 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d110      	bne.n	8003edc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	210c      	movs	r1, #12
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <HAL_ADC_PollForConversion+0x124>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	659a      	str	r2, [r3, #88]	; 0x58
 8003eda:	e00b      	b.n	8003ef4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2201      	movs	r2, #1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7e1b      	ldrb	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	220c      	movs	r2, #12
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	fffffefe 	.word	0xfffffefe

08003f14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b002      	add	sp, #8
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2254      	movs	r2, #84	; 0x54
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x24>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e1c0      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x3a6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2254      	movs	r2, #84	; 0x54
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff fd07 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d000      	beq.n	8003f68 <HAL_ADC_ConfigChannel+0x3c>
 8003f66:	e1a3      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d100      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x46>
 8003f70:	e143      	b.n	80041fa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d004      	beq.n	8003f88 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f82:	4ac1      	ldr	r2, [pc, #772]	; (8004288 <HAL_ADC_ConfigChannel+0x35c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d108      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0019      	movs	r1, r3
 8003f92:	0010      	movs	r0, r2
 8003f94:	f7ff fc2d 	bl	80037f2 <LL_ADC_REG_SetSequencerChAdd>
 8003f98:	e0c9      	b.n	800412e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	211f      	movs	r1, #31
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	4099      	lsls	r1, r3
 8003faa:	000b      	movs	r3, r1
 8003fac:	43db      	mvns	r3, r3
 8003fae:	4013      	ands	r3, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	035b      	lsls	r3, r3, #13
 8003fb8:	0b5b      	lsrs	r3, r3, #13
 8003fba:	d105      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x9c>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	221f      	movs	r2, #31
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	e098      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d000      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0xa8>
 8003fd2:	e091      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x1cc>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d000      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0xb4>
 8003fde:	e089      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x1c8>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d000      	beq.n	8003fec <HAL_ADC_ConfigChannel+0xc0>
 8003fea:	e081      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x1c4>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d000      	beq.n	8003ff8 <HAL_ADC_ConfigChannel+0xcc>
 8003ff6:	e079      	b.n	80040ec <HAL_ADC_ConfigChannel+0x1c0>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	4013      	ands	r3, r2
 8004000:	d000      	beq.n	8004004 <HAL_ADC_ConfigChannel+0xd8>
 8004002:	e071      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x1bc>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2220      	movs	r2, #32
 800400a:	4013      	ands	r3, r2
 800400c:	d000      	beq.n	8004010 <HAL_ADC_ConfigChannel+0xe4>
 800400e:	e069      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1b8>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	4013      	ands	r3, r2
 8004018:	d000      	beq.n	800401c <HAL_ADC_ConfigChannel+0xf0>
 800401a:	e061      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x1b4>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	4013      	ands	r3, r2
 8004024:	d000      	beq.n	8004028 <HAL_ADC_ConfigChannel+0xfc>
 8004026:	e059      	b.n	80040dc <HAL_ADC_ConfigChannel+0x1b0>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4013      	ands	r3, r2
 8004032:	d151      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1ac>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d149      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1a8>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4013      	ands	r3, r2
 800404a:	d141      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1a4>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	4013      	ands	r3, r2
 8004056:	d139      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1a0>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	015b      	lsls	r3, r3, #5
 8004060:	4013      	ands	r3, r2
 8004062:	d131      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x19c>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	019b      	lsls	r3, r3, #6
 800406c:	4013      	ands	r3, r2
 800406e:	d129      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x198>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	01db      	lsls	r3, r3, #7
 8004078:	4013      	ands	r3, r2
 800407a:	d121      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x194>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4013      	ands	r3, r2
 8004086:	d119      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x190>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	025b      	lsls	r3, r3, #9
 8004090:	4013      	ands	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x18c>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	4013      	ands	r3, r2
 800409e:	d109      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x188>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	02db      	lsls	r3, r3, #11
 80040a8:	4013      	ands	r3, r2
 80040aa:	d001      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0x184>
 80040ac:	2312      	movs	r3, #18
 80040ae:	e024      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040b0:	2300      	movs	r3, #0
 80040b2:	e022      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040b4:	2311      	movs	r3, #17
 80040b6:	e020      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040b8:	2310      	movs	r3, #16
 80040ba:	e01e      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040bc:	230f      	movs	r3, #15
 80040be:	e01c      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040c0:	230e      	movs	r3, #14
 80040c2:	e01a      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040c4:	230d      	movs	r3, #13
 80040c6:	e018      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040c8:	230c      	movs	r3, #12
 80040ca:	e016      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040cc:	230b      	movs	r3, #11
 80040ce:	e014      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040d0:	230a      	movs	r3, #10
 80040d2:	e012      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040d4:	2309      	movs	r3, #9
 80040d6:	e010      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040d8:	2308      	movs	r3, #8
 80040da:	e00e      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040dc:	2307      	movs	r3, #7
 80040de:	e00c      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040e0:	2306      	movs	r3, #6
 80040e2:	e00a      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040e4:	2305      	movs	r3, #5
 80040e6:	e008      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040e8:	2304      	movs	r3, #4
 80040ea:	e006      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040ec:	2303      	movs	r3, #3
 80040ee:	e004      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e002      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_ADC_ConfigChannel+0x1ce>
 80040f8:	2300      	movs	r3, #0
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	6852      	ldr	r2, [r2, #4]
 80040fe:	201f      	movs	r0, #31
 8004100:	4002      	ands	r2, r0
 8004102:	4093      	lsls	r3, r2
 8004104:	000a      	movs	r2, r1
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	429a      	cmp	r2, r3
 800411a:	d808      	bhi.n	800412e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	001a      	movs	r2, r3
 800412a:	f7ff fb42 	bl	80037b2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	001a      	movs	r2, r3
 800413c:	f7ff fb7c 	bl	8003838 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	db00      	blt.n	800414a <HAL_ADC_ConfigChannel+0x21e>
 8004148:	e0bc      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800414a:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff faf5 	bl	800373c <LL_ADC_GetCommonPathInternalCh>
 8004152:	0003      	movs	r3, r0
 8004154:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4d      	ldr	r2, [pc, #308]	; (8004290 <HAL_ADC_ConfigChannel+0x364>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d122      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004168:	d11d      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	0412      	lsls	r2, r2, #16
 8004170:	4313      	orrs	r3, r2
 8004172:	4a46      	ldr	r2, [pc, #280]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 8004174:	0019      	movs	r1, r3
 8004176:	0010      	movs	r0, r2
 8004178:	f7ff facc 	bl	8003714 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800417c:	4b45      	ldr	r3, [pc, #276]	; (8004294 <HAL_ADC_ConfigChannel+0x368>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4945      	ldr	r1, [pc, #276]	; (8004298 <HAL_ADC_ConfigChannel+0x36c>)
 8004182:	0018      	movs	r0, r3
 8004184:	f7fb ffc8 	bl	8000118 <__udivsi3>
 8004188:	0003      	movs	r3, r0
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	0013      	movs	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	189b      	adds	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004196:	e002      	b.n	800419e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f9      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041a4:	e08e      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3c      	ldr	r2, [pc, #240]	; (800429c <HAL_ADC_ConfigChannel+0x370>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10e      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x2a2>
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	045b      	lsls	r3, r3, #17
 80041b6:	4013      	ands	r3, r2
 80041b8:	d109      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	0452      	lsls	r2, r2, #17
 80041c0:	4313      	orrs	r3, r2
 80041c2:	4a32      	ldr	r2, [pc, #200]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 80041c4:	0019      	movs	r1, r3
 80041c6:	0010      	movs	r0, r2
 80041c8:	f7ff faa4 	bl	8003714 <LL_ADC_SetCommonPathInternalCh>
 80041cc:	e07a      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a33      	ldr	r2, [pc, #204]	; (80042a0 <HAL_ADC_ConfigChannel+0x374>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d000      	beq.n	80041da <HAL_ADC_ConfigChannel+0x2ae>
 80041d8:	e074      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	03db      	lsls	r3, r3, #15
 80041e0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041e2:	d000      	beq.n	80041e6 <HAL_ADC_ConfigChannel+0x2ba>
 80041e4:	e06e      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	03d2      	lsls	r2, r2, #15
 80041ec:	4313      	orrs	r3, r2
 80041ee:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 80041f0:	0019      	movs	r1, r3
 80041f2:	0010      	movs	r0, r2
 80041f4:	f7ff fa8e 	bl	8003714 <LL_ADC_SetCommonPathInternalCh>
 80041f8:	e064      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	429a      	cmp	r2, r3
 8004204:	d004      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800420a:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_ADC_ConfigChannel+0x35c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d107      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0019      	movs	r1, r3
 800421a:	0010      	movs	r0, r2
 800421c:	f7ff fafa 	bl	8003814 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	da4d      	bge.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff fa86 	bl	800373c <LL_ADC_GetCommonPathInternalCh>
 8004230:	0003      	movs	r3, r0
 8004232:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_ADC_ConfigChannel+0x364>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_ADC_ConfigChannel+0x378>)
 8004242:	4013      	ands	r3, r2
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 8004246:	0019      	movs	r1, r3
 8004248:	0010      	movs	r0, r2
 800424a:	f7ff fa63 	bl	8003714 <LL_ADC_SetCommonPathInternalCh>
 800424e:	e039      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a11      	ldr	r2, [pc, #68]	; (800429c <HAL_ADC_ConfigChannel+0x370>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d108      	bne.n	800426c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <HAL_ADC_ConfigChannel+0x37c>)
 800425e:	4013      	ands	r3, r2
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 8004262:	0019      	movs	r1, r3
 8004264:	0010      	movs	r0, r2
 8004266:	f7ff fa55 	bl	8003714 <LL_ADC_SetCommonPathInternalCh>
 800426a:	e02b      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <HAL_ADC_ConfigChannel+0x374>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d126      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4a0c      	ldr	r2, [pc, #48]	; (80042ac <HAL_ADC_ConfigChannel+0x380>)
 800427a:	4013      	ands	r3, r2
 800427c:	4a03      	ldr	r2, [pc, #12]	; (800428c <HAL_ADC_ConfigChannel+0x360>)
 800427e:	0019      	movs	r1, r3
 8004280:	0010      	movs	r0, r2
 8004282:	f7ff fa47 	bl	8003714 <LL_ADC_SetCommonPathInternalCh>
 8004286:	e01d      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x398>
 8004288:	80000004 	.word	0x80000004
 800428c:	40012708 	.word	0x40012708
 8004290:	b0001000 	.word	0xb0001000
 8004294:	20000008 	.word	0x20000008
 8004298:	00030d40 	.word	0x00030d40
 800429c:	b8004000 	.word	0xb8004000
 80042a0:	b4002000 	.word	0xb4002000
 80042a4:	ff7fffff 	.word	0xff7fffff
 80042a8:	feffffff 	.word	0xfeffffff
 80042ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	2220      	movs	r2, #32
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042bc:	2317      	movs	r3, #23
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2254      	movs	r2, #84	; 0x54
 80042c8:	2100      	movs	r1, #0
 80042ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80042cc:	2317      	movs	r3, #23
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)

080042dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7ff fb0b 	bl	8003908 <LL_ADC_IsEnabled>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d000      	beq.n	80042f8 <ADC_Enable+0x1c>
 80042f6:	e069      	b.n	80043cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	4a36      	ldr	r2, [pc, #216]	; (80043d8 <ADC_Enable+0xfc>)
 8004300:	4013      	ands	r3, r2
 8004302:	d00d      	beq.n	8004320 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	2210      	movs	r2, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	2201      	movs	r2, #1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e056      	b.n	80043ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff facb 	bl	80038c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800432a:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <ADC_Enable+0x100>)
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff fa05 	bl	800373c <LL_ADC_GetCommonPathInternalCh>
 8004332:	0002      	movs	r2, r0
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	4013      	ands	r3, r2
 800433a:	d00f      	beq.n	800435c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <ADC_Enable+0x104>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4928      	ldr	r1, [pc, #160]	; (80043e4 <ADC_Enable+0x108>)
 8004342:	0018      	movs	r0, r3
 8004344:	f7fb fee8 	bl	8000118 <__udivsi3>
 8004348:	0003      	movs	r3, r0
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800434e:	e002      	b.n	8004356 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3b01      	subs	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f9      	bne.n	8004350 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7e5b      	ldrb	r3, [r3, #25]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d033      	beq.n	80043cc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004364:	f7ff f992 	bl	800368c <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800436c:	e027      	b.n	80043be <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fac8 	bl	8003908 <LL_ADC_IsEnabled>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d104      	bne.n	8004386 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fa9d 	bl	80038c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004386:	f7ff f981 	bl	800368c <HAL_GetTick>
 800438a:	0002      	movs	r2, r0
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d914      	bls.n	80043be <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	4013      	ands	r3, r2
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d00d      	beq.n	80043be <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	2210      	movs	r2, #16
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	2201      	movs	r2, #1
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d1d0      	bne.n	800436e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b004      	add	sp, #16
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	80000017 	.word	0x80000017
 80043dc:	40012708 	.word	0x40012708
 80043e0:	20000008 	.word	0x20000008
 80043e4:	00030d40 	.word	0x00030d40

080043e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7ff fa98 	bl	800392a <LL_ADC_IsDisableOngoing>
 80043fa:	0003      	movs	r3, r0
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	0018      	movs	r0, r3
 8004404:	f7ff fa80 	bl	8003908 <LL_ADC_IsEnabled>
 8004408:	1e03      	subs	r3, r0, #0
 800440a:	d046      	beq.n	800449a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d143      	bne.n	800449a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2205      	movs	r2, #5
 800441a:	4013      	ands	r3, r2
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10d      	bne.n	800443c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0018      	movs	r0, r3
 8004426:	f7ff fa5d 	bl	80038e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2203      	movs	r2, #3
 8004430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004432:	f7ff f92b 	bl	800368c <HAL_GetTick>
 8004436:	0003      	movs	r3, r0
 8004438:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800443a:	e028      	b.n	800448e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	2210      	movs	r2, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2201      	movs	r2, #1
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e021      	b.n	800449c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004458:	f7ff f918 	bl	800368c <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d913      	bls.n	800448e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2201      	movs	r2, #1
 800446e:	4013      	ands	r3, r2
 8004470:	d00d      	beq.n	800448e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	2210      	movs	r2, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2201      	movs	r2, #1
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e006      	b.n	800449c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	d1de      	bne.n	8004458 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b004      	add	sp, #16
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <LL_ADC_IsEnabled>:
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2201      	movs	r2, #1
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <LL_ADC_IsEnabled+0x18>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <LL_ADC_IsEnabled+0x1a>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	0018      	movs	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b002      	add	sp, #8
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <LL_ADC_IsCalibrationOnGoing>:
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0fdb      	lsrs	r3, r3, #31
 80044d4:	07da      	lsls	r2, r3, #31
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	429a      	cmp	r2, r3
 80044dc:	d101      	bne.n	80044e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2254      	movs	r2, #84	; 0x54
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_ADCEx_Calibration_Start+0x1a>
 8004502:	2302      	movs	r3, #2
 8004504:	e06c      	b.n	80045e0 <HAL_ADCEx_Calibration_Start+0xf4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2254      	movs	r2, #84	; 0x54
 800450a:	2101      	movs	r1, #1
 800450c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800450e:	2317      	movs	r3, #23
 8004510:	18fc      	adds	r4, r7, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0018      	movs	r0, r3
 8004516:	f7ff ff67 	bl	80043e8 <ADC_Disable>
 800451a:	0003      	movs	r3, r0
 800451c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0018      	movs	r0, r3
 8004524:	f7ff ffbe 	bl	80044a4 <LL_ADC_IsEnabled>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d14c      	bne.n	80045c6 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <HAL_ADCEx_Calibration_Start+0xfc>)
 8004532:	4013      	ands	r3, r2
 8004534:	2202      	movs	r2, #2
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2203      	movs	r2, #3
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2103      	movs	r1, #3
 8004554:	438a      	bics	r2, r1
 8004556:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	0609      	lsls	r1, r1, #24
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800456a:	e014      	b.n	8004596 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <HAL_ADCEx_Calibration_Start+0x100>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90d      	bls.n	8004596 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	2212      	movs	r2, #18
 8004580:	4393      	bics	r3, r2
 8004582:	2210      	movs	r2, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2254      	movs	r2, #84	; 0x54
 800458e:	2100      	movs	r1, #0
 8004590:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e024      	b.n	80045e0 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0018      	movs	r0, r3
 800459c:	f7ff ff93 	bl	80044c6 <LL_ADC_IsCalibrationOnGoing>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d1e3      	bne.n	800456c <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68d9      	ldr	r1, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	2203      	movs	r2, #3
 80045ba:	4393      	bics	r3, r2
 80045bc:	2201      	movs	r2, #1
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	659a      	str	r2, [r3, #88]	; 0x58
 80045c4:	e005      	b.n	80045d2 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	2210      	movs	r2, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2254      	movs	r2, #84	; 0x54
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80045da:	2317      	movs	r3, #23
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	781b      	ldrb	r3, [r3, #0]
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b007      	add	sp, #28
 80045e6:	bd90      	pop	{r4, r7, pc}
 80045e8:	fffffefd 	.word	0xfffffefd
 80045ec:	0002f1ff 	.word	0x0002f1ff

080045f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	0002      	movs	r2, r0
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b7f      	cmp	r3, #127	; 0x7f
 8004602:	d809      	bhi.n	8004618 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004604:	1dfb      	adds	r3, r7, #7
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	001a      	movs	r2, r3
 800460a:	231f      	movs	r3, #31
 800460c:	401a      	ands	r2, r3
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <__NVIC_EnableIRQ+0x30>)
 8004610:	2101      	movs	r1, #1
 8004612:	4091      	lsls	r1, r2
 8004614:	000a      	movs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}
 8004620:	e000e100 	.word	0xe000e100

08004624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	0002      	movs	r2, r0
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	1dfb      	adds	r3, r7, #7
 8004630:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004632:	1dfb      	adds	r3, r7, #7
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b7f      	cmp	r3, #127	; 0x7f
 8004638:	d828      	bhi.n	800468c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800463a:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <__NVIC_SetPriority+0xd4>)
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b25b      	sxtb	r3, r3
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	33c0      	adds	r3, #192	; 0xc0
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	589b      	ldr	r3, [r3, r2]
 800464a:	1dfa      	adds	r2, r7, #7
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	0011      	movs	r1, r2
 8004650:	2203      	movs	r2, #3
 8004652:	400a      	ands	r2, r1
 8004654:	00d2      	lsls	r2, r2, #3
 8004656:	21ff      	movs	r1, #255	; 0xff
 8004658:	4091      	lsls	r1, r2
 800465a:	000a      	movs	r2, r1
 800465c:	43d2      	mvns	r2, r2
 800465e:	401a      	ands	r2, r3
 8004660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	019b      	lsls	r3, r3, #6
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	401a      	ands	r2, r3
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	0018      	movs	r0, r3
 8004670:	2303      	movs	r3, #3
 8004672:	4003      	ands	r3, r0
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004678:	481f      	ldr	r0, [pc, #124]	; (80046f8 <__NVIC_SetPriority+0xd4>)
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b25b      	sxtb	r3, r3
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	430a      	orrs	r2, r1
 8004684:	33c0      	adds	r3, #192	; 0xc0
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800468a:	e031      	b.n	80046f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800468c:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <__NVIC_SetPriority+0xd8>)
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	0019      	movs	r1, r3
 8004694:	230f      	movs	r3, #15
 8004696:	400b      	ands	r3, r1
 8004698:	3b08      	subs	r3, #8
 800469a:	089b      	lsrs	r3, r3, #2
 800469c:	3306      	adds	r3, #6
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	3304      	adds	r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1dfa      	adds	r2, r7, #7
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	0011      	movs	r1, r2
 80046ac:	2203      	movs	r2, #3
 80046ae:	400a      	ands	r2, r1
 80046b0:	00d2      	lsls	r2, r2, #3
 80046b2:	21ff      	movs	r1, #255	; 0xff
 80046b4:	4091      	lsls	r1, r2
 80046b6:	000a      	movs	r2, r1
 80046b8:	43d2      	mvns	r2, r2
 80046ba:	401a      	ands	r2, r3
 80046bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	019b      	lsls	r3, r3, #6
 80046c2:	22ff      	movs	r2, #255	; 0xff
 80046c4:	401a      	ands	r2, r3
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	0018      	movs	r0, r3
 80046cc:	2303      	movs	r3, #3
 80046ce:	4003      	ands	r3, r0
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046d4:	4809      	ldr	r0, [pc, #36]	; (80046fc <__NVIC_SetPriority+0xd8>)
 80046d6:	1dfb      	adds	r3, r7, #7
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	001c      	movs	r4, r3
 80046dc:	230f      	movs	r3, #15
 80046de:	4023      	ands	r3, r4
 80046e0:	3b08      	subs	r3, #8
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	430a      	orrs	r2, r1
 80046e6:	3306      	adds	r3, #6
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	18c3      	adds	r3, r0, r3
 80046ec:	3304      	adds	r3, #4
 80046ee:	601a      	str	r2, [r3, #0]
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b003      	add	sp, #12
 80046f6:	bd90      	pop	{r4, r7, pc}
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	045b      	lsls	r3, r3, #17
 8004710:	429a      	cmp	r2, r3
 8004712:	d301      	bcc.n	8004718 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004714:	2301      	movs	r3, #1
 8004716:	e010      	b.n	800473a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <SysTick_Config+0x44>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	3a01      	subs	r2, #1
 800471e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004720:	2301      	movs	r3, #1
 8004722:	425b      	negs	r3, r3
 8004724:	2103      	movs	r1, #3
 8004726:	0018      	movs	r0, r3
 8004728:	f7ff ff7c 	bl	8004624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <SysTick_Config+0x44>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <SysTick_Config+0x44>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004738:	2300      	movs	r3, #0
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b002      	add	sp, #8
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	e000e010 	.word	0xe000e010

08004748 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	210f      	movs	r1, #15
 8004754:	187b      	adds	r3, r7, r1
 8004756:	1c02      	adds	r2, r0, #0
 8004758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	187b      	adds	r3, r7, r1
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b25b      	sxtb	r3, r3
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff ff5d 	bl	8004624 <__NVIC_SetPriority>
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	0002      	movs	r2, r0
 800477a:	1dfb      	adds	r3, r7, #7
 800477c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b25b      	sxtb	r3, r3
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff ff33 	bl	80045f0 <__NVIC_EnableIRQ>
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f7ff ffaf 	bl	8004700 <SysTick_Config>
 80047a2:	0003      	movs	r3, r0
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ba:	e147      	b.n	8004a4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4091      	lsls	r1, r2
 80047c6:	000a      	movs	r2, r1
 80047c8:	4013      	ands	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d100      	bne.n	80047d4 <HAL_GPIO_Init+0x28>
 80047d2:	e138      	b.n	8004a46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2203      	movs	r2, #3
 80047da:	4013      	ands	r3, r2
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d005      	beq.n	80047ec <HAL_GPIO_Init+0x40>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d130      	bne.n	800484e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	409a      	lsls	r2, r3
 80047fa:	0013      	movs	r3, r2
 80047fc:	43da      	mvns	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	409a      	lsls	r2, r3
 800480e:	0013      	movs	r3, r2
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004822:	2201      	movs	r2, #1
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	409a      	lsls	r2, r3
 8004828:	0013      	movs	r3, r2
 800482a:	43da      	mvns	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	2201      	movs	r2, #1
 800483a:	401a      	ands	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
 8004840:	0013      	movs	r3, r2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2203      	movs	r2, #3
 8004854:	4013      	ands	r3, r2
 8004856:	2b03      	cmp	r3, #3
 8004858:	d017      	beq.n	800488a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	409a      	lsls	r2, r3
 8004868:	0013      	movs	r3, r2
 800486a:	43da      	mvns	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	409a      	lsls	r2, r3
 800487c:	0013      	movs	r3, r2
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2203      	movs	r2, #3
 8004890:	4013      	ands	r3, r2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d123      	bne.n	80048de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	08da      	lsrs	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3208      	adds	r2, #8
 800489e:	0092      	lsls	r2, r2, #2
 80048a0:	58d3      	ldr	r3, [r2, r3]
 80048a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2207      	movs	r2, #7
 80048a8:	4013      	ands	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	220f      	movs	r2, #15
 80048ae:	409a      	lsls	r2, r3
 80048b0:	0013      	movs	r3, r2
 80048b2:	43da      	mvns	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2107      	movs	r1, #7
 80048c2:	400b      	ands	r3, r1
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	409a      	lsls	r2, r3
 80048c8:	0013      	movs	r3, r2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	08da      	lsrs	r2, r3, #3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3208      	adds	r2, #8
 80048d8:	0092      	lsls	r2, r2, #2
 80048da:	6939      	ldr	r1, [r7, #16]
 80048dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	2203      	movs	r2, #3
 80048ea:	409a      	lsls	r2, r3
 80048ec:	0013      	movs	r3, r2
 80048ee:	43da      	mvns	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2203      	movs	r2, #3
 80048fc:	401a      	ands	r2, r3
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	409a      	lsls	r2, r3
 8004904:	0013      	movs	r3, r2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	23c0      	movs	r3, #192	; 0xc0
 8004918:	029b      	lsls	r3, r3, #10
 800491a:	4013      	ands	r3, r2
 800491c:	d100      	bne.n	8004920 <HAL_GPIO_Init+0x174>
 800491e:	e092      	b.n	8004a46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004920:	4a50      	ldr	r2, [pc, #320]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	3318      	adds	r3, #24
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	589b      	ldr	r3, [r3, r2]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2203      	movs	r2, #3
 8004932:	4013      	ands	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	220f      	movs	r2, #15
 8004938:	409a      	lsls	r2, r3
 800493a:	0013      	movs	r3, r2
 800493c:	43da      	mvns	r2, r3
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4013      	ands	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	23a0      	movs	r3, #160	; 0xa0
 8004948:	05db      	lsls	r3, r3, #23
 800494a:	429a      	cmp	r2, r3
 800494c:	d013      	beq.n	8004976 <HAL_GPIO_Init+0x1ca>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a45      	ldr	r2, [pc, #276]	; (8004a68 <HAL_GPIO_Init+0x2bc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00d      	beq.n	8004972 <HAL_GPIO_Init+0x1c6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a44      	ldr	r2, [pc, #272]	; (8004a6c <HAL_GPIO_Init+0x2c0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <HAL_GPIO_Init+0x1c2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a43      	ldr	r2, [pc, #268]	; (8004a70 <HAL_GPIO_Init+0x2c4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <HAL_GPIO_Init+0x1be>
 8004966:	2303      	movs	r3, #3
 8004968:	e006      	b.n	8004978 <HAL_GPIO_Init+0x1cc>
 800496a:	2305      	movs	r3, #5
 800496c:	e004      	b.n	8004978 <HAL_GPIO_Init+0x1cc>
 800496e:	2302      	movs	r3, #2
 8004970:	e002      	b.n	8004978 <HAL_GPIO_Init+0x1cc>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_GPIO_Init+0x1cc>
 8004976:	2300      	movs	r3, #0
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	2103      	movs	r1, #3
 800497c:	400a      	ands	r2, r1
 800497e:	00d2      	lsls	r2, r2, #3
 8004980:	4093      	lsls	r3, r2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004988:	4936      	ldr	r1, [pc, #216]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	089b      	lsrs	r3, r3, #2
 800498e:	3318      	adds	r3, #24
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004996:	4a33      	ldr	r2, [pc, #204]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	58d3      	ldr	r3, [r2, r3]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	43da      	mvns	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	025b      	lsls	r3, r3, #9
 80049b0:	4013      	ands	r3, r2
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049bc:	4929      	ldr	r1, [pc, #164]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 80049be:	2280      	movs	r2, #128	; 0x80
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 80049c6:	2384      	movs	r3, #132	; 0x84
 80049c8:	58d3      	ldr	r3, [r2, r3]
 80049ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43da      	mvns	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	029b      	lsls	r3, r3, #10
 80049de:	4013      	ands	r3, r2
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049ea:	491e      	ldr	r1, [pc, #120]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 80049ec:	2284      	movs	r2, #132	; 0x84
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43da      	mvns	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	035b      	lsls	r3, r3, #13
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43da      	mvns	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	039b      	lsls	r3, r3, #14
 8004a34:	4013      	ands	r3, r2
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a40:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <HAL_GPIO_Init+0x2b8>)
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	40da      	lsrs	r2, r3
 8004a54:	1e13      	subs	r3, r2, #0
 8004a56:	d000      	beq.n	8004a5a <HAL_GPIO_Init+0x2ae>
 8004a58:	e6b0      	b.n	80047bc <HAL_GPIO_Init+0x10>
  }
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b006      	add	sp, #24
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021800 	.word	0x40021800
 8004a68:	50000400 	.word	0x50000400
 8004a6c:	50000800 	.word	0x50000800
 8004a70:	50000c00 	.word	0x50000c00

08004a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	000a      	movs	r2, r1
 8004a7e:	1cbb      	adds	r3, r7, #2
 8004a80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	1cba      	adds	r2, r7, #2
 8004a88:	8812      	ldrh	r2, [r2, #0]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a8e:	230f      	movs	r3, #15
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e003      	b.n	8004aa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a98:	230f      	movs	r3, #15
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004aa0:	230f      	movs	r3, #15
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	0008      	movs	r0, r1
 8004ab8:	0011      	movs	r1, r2
 8004aba:	1cbb      	adds	r3, r7, #2
 8004abc:	1c02      	adds	r2, r0, #0
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	1c7b      	adds	r3, r7, #1
 8004ac2:	1c0a      	adds	r2, r1, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ac6:	1c7b      	adds	r3, r7, #1
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ace:	1cbb      	adds	r3, r7, #2
 8004ad0:	881a      	ldrh	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ad6:	e003      	b.n	8004ae0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ad8:	1cbb      	adds	r3, r7, #2
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	0002      	movs	r2, r0
 8004af0:	1dbb      	adds	r3, r7, #6
 8004af2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004af4:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	1dba      	adds	r2, r7, #6
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	4013      	ands	r3, r2
 8004afe:	d008      	beq.n	8004b12 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b02:	1dba      	adds	r2, r7, #6
 8004b04:	8812      	ldrh	r2, [r2, #0]
 8004b06:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004b08:	1dbb      	adds	r3, r7, #6
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f005 fb7a 	bl	800a206 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	1dba      	adds	r2, r7, #6
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d008      	beq.n	8004b30 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b20:	1dba      	adds	r2, r7, #6
 8004b22:	8812      	ldrh	r2, [r2, #0]
 8004b24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004b26:	1dbb      	adds	r3, r7, #6
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f005 fb5c 	bl	800a1e8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021800 	.word	0x40021800

08004b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e082      	b.n	8004c54 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2241      	movs	r2, #65	; 0x41
 8004b52:	5c9b      	ldrb	r3, [r3, r2]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2240      	movs	r2, #64	; 0x40
 8004b5e:	2100      	movs	r1, #0
 8004b60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f007 fbf1 	bl	800c34c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2241      	movs	r2, #65	; 0x41
 8004b6e:	2124      	movs	r1, #36	; 0x24
 8004b70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	438a      	bics	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4934      	ldr	r1, [pc, #208]	; (8004c5c <HAL_I2C_Init+0x120>)
 8004b8c:	400a      	ands	r2, r1
 8004b8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4931      	ldr	r1, [pc, #196]	; (8004c60 <HAL_I2C_Init+0x124>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d108      	bne.n	8004bba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	0209      	lsls	r1, r1, #8
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	e007      	b.n	8004bca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2184      	movs	r1, #132	; 0x84
 8004bc4:	0209      	lsls	r1, r1, #8
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d104      	bne.n	8004bdc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2280      	movs	r2, #128	; 0x80
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	491f      	ldr	r1, [pc, #124]	; (8004c64 <HAL_I2C_Init+0x128>)
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	491a      	ldr	r1, [pc, #104]	; (8004c60 <HAL_I2C_Init+0x124>)
 8004bf8:	400a      	ands	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69d9      	ldr	r1, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2101      	movs	r1, #1
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2241      	movs	r2, #65	; 0x41
 8004c40:	2120      	movs	r1, #32
 8004c42:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2242      	movs	r2, #66	; 0x42
 8004c4e:	2100      	movs	r1, #0
 8004c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	f0ffffff 	.word	0xf0ffffff
 8004c60:	ffff7fff 	.word	0xffff7fff
 8004c64:	02008000 	.word	0x02008000

08004c68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	000c      	movs	r4, r1
 8004c72:	0010      	movs	r0, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	230a      	movs	r3, #10
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	1c22      	adds	r2, r4, #0
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	2308      	movs	r3, #8
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	1c02      	adds	r2, r0, #0
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	1dbb      	adds	r3, r7, #6
 8004c88:	1c0a      	adds	r2, r1, #0
 8004c8a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2241      	movs	r2, #65	; 0x41
 8004c90:	5c9b      	ldrb	r3, [r3, r2]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d000      	beq.n	8004c9a <HAL_I2C_Mem_Write+0x32>
 8004c98:	e10c      	b.n	8004eb4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_I2C_Mem_Write+0x42>
 8004ca0:	232c      	movs	r3, #44	; 0x2c
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	0092      	lsls	r2, r2, #2
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0ff      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2240      	movs	r2, #64	; 0x40
 8004cba:	5c9b      	ldrb	r3, [r3, r2]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_I2C_Mem_Write+0x5c>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e0f8      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	2101      	movs	r1, #1
 8004cca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ccc:	f7fe fcde 	bl	800368c <HAL_GetTick>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	0219      	lsls	r1, r3, #8
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	2319      	movs	r3, #25
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f000 fb0b 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0e3      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2241      	movs	r2, #65	; 0x41
 8004cf2:	2121      	movs	r1, #33	; 0x21
 8004cf4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2242      	movs	r2, #66	; 0x42
 8004cfa:	2140      	movs	r1, #64	; 0x40
 8004cfc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	222c      	movs	r2, #44	; 0x2c
 8004d0e:	18ba      	adds	r2, r7, r2
 8004d10:	8812      	ldrh	r2, [r2, #0]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d1a:	1dbb      	adds	r3, r7, #6
 8004d1c:	881c      	ldrh	r4, [r3, #0]
 8004d1e:	2308      	movs	r3, #8
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	230a      	movs	r3, #10
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	8819      	ldrh	r1, [r3, #0]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	0023      	movs	r3, r4
 8004d36:	f000 f9f9 	bl	800512c <I2C_RequestMemoryWrite>
 8004d3a:	1e03      	subs	r3, r0, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2240      	movs	r2, #64	; 0x40
 8004d42:	2100      	movs	r1, #0
 8004d44:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0b5      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2bff      	cmp	r3, #255	; 0xff
 8004d52:	d911      	bls.n	8004d78 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	045c      	lsls	r4, r3, #17
 8004d64:	230a      	movs	r3, #10
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	8819      	ldrh	r1, [r3, #0]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	0023      	movs	r3, r4
 8004d72:	f000 fbf7 	bl	8005564 <I2C_TransferConfig>
 8004d76:	e012      	b.n	8004d9e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	049c      	lsls	r4, r3, #18
 8004d8c:	230a      	movs	r3, #10
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	8819      	ldrh	r1, [r3, #0]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	2300      	movs	r3, #0
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	0023      	movs	r3, r4
 8004d9a:	f000 fbe3 	bl	8005564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fae8 	bl	800537a <I2C_WaitOnTXISFlagUntilTimeout>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e081      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d03a      	beq.n	8004e62 <HAL_I2C_Mem_Write+0x1fa>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d136      	bne.n	8004e62 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	0013      	movs	r3, r2
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	f000 fa7b 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 8004e06:	1e03      	subs	r3, r0, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e053      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2bff      	cmp	r3, #255	; 0xff
 8004e16:	d911      	bls.n	8004e3c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	22ff      	movs	r2, #255	; 0xff
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	045c      	lsls	r4, r3, #17
 8004e28:	230a      	movs	r3, #10
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	8819      	ldrh	r1, [r3, #0]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	2300      	movs	r3, #0
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	0023      	movs	r3, r4
 8004e36:	f000 fb95 	bl	8005564 <I2C_TransferConfig>
 8004e3a:	e012      	b.n	8004e62 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	049c      	lsls	r4, r3, #18
 8004e50:	230a      	movs	r3, #10
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	8819      	ldrh	r1, [r3, #0]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	0023      	movs	r3, r4
 8004e5e:	f000 fb81 	bl	8005564 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d198      	bne.n	8004d9e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fac0 	bl	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e01a      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2220      	movs	r2, #32
 8004e86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <HAL_I2C_Mem_Write+0x258>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2241      	movs	r2, #65	; 0x41
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2242      	movs	r2, #66	; 0x42
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2240      	movs	r2, #64	; 0x40
 8004eac:	2100      	movs	r1, #0
 8004eae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b007      	add	sp, #28
 8004ebc:	bd90      	pop	{r4, r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	fe00e800 	.word	0xfe00e800

08004ec4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b089      	sub	sp, #36	; 0x24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	000c      	movs	r4, r1
 8004ece:	0010      	movs	r0, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	1c22      	adds	r2, r4, #0
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	2308      	movs	r3, #8
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	1c02      	adds	r2, r0, #0
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	1dbb      	adds	r3, r7, #6
 8004ee4:	1c0a      	adds	r2, r1, #0
 8004ee6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2241      	movs	r2, #65	; 0x41
 8004eec:	5c9b      	ldrb	r3, [r3, r2]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d000      	beq.n	8004ef6 <HAL_I2C_Mem_Read+0x32>
 8004ef4:	e110      	b.n	8005118 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <HAL_I2C_Mem_Read+0x42>
 8004efc:	232c      	movs	r3, #44	; 0x2c
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2280      	movs	r2, #128	; 0x80
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e103      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2240      	movs	r2, #64	; 0x40
 8004f16:	5c9b      	ldrb	r3, [r3, r2]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_I2C_Mem_Read+0x5c>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e0fc      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2240      	movs	r2, #64	; 0x40
 8004f24:	2101      	movs	r1, #1
 8004f26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f28:	f7fe fbb0 	bl	800368c <HAL_GetTick>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	0219      	lsls	r1, r3, #8
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2319      	movs	r3, #25
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f000 f9dd 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0e7      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2241      	movs	r2, #65	; 0x41
 8004f4e:	2122      	movs	r1, #34	; 0x22
 8004f50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2242      	movs	r2, #66	; 0x42
 8004f56:	2140      	movs	r1, #64	; 0x40
 8004f58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	222c      	movs	r2, #44	; 0x2c
 8004f6a:	18ba      	adds	r2, r7, r2
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f76:	1dbb      	adds	r3, r7, #6
 8004f78:	881c      	ldrh	r4, [r3, #0]
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	230a      	movs	r3, #10
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	8819      	ldrh	r1, [r3, #0]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	0023      	movs	r3, r4
 8004f92:	f000 f92f 	bl	80051f4 <I2C_RequestMemoryRead>
 8004f96:	1e03      	subs	r3, r0, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2240      	movs	r2, #64	; 0x40
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0b9      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2bff      	cmp	r3, #255	; 0xff
 8004fae:	d911      	bls.n	8004fd4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	22ff      	movs	r2, #255	; 0xff
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	045c      	lsls	r4, r3, #17
 8004fc0:	230a      	movs	r3, #10
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	8819      	ldrh	r1, [r3, #0]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	4b56      	ldr	r3, [pc, #344]	; (8005124 <HAL_I2C_Mem_Read+0x260>)
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	0023      	movs	r3, r4
 8004fce:	f000 fac9 	bl	8005564 <I2C_TransferConfig>
 8004fd2:	e012      	b.n	8004ffa <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	049c      	lsls	r4, r3, #18
 8004fe8:	230a      	movs	r3, #10
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	8819      	ldrh	r1, [r3, #0]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_I2C_Mem_Read+0x260>)
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	0023      	movs	r3, r4
 8004ff6:	f000 fab5 	bl	8005564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	0013      	movs	r3, r2
 8005004:	2200      	movs	r2, #0
 8005006:	2104      	movs	r1, #4
 8005008:	f000 f978 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 800500c:	1e03      	subs	r3, r0, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e082      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d03a      	beq.n	80050c6 <HAL_I2C_Mem_Read+0x202>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d136      	bne.n	80050c6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	0013      	movs	r3, r2
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	f000 f949 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e053      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	2bff      	cmp	r3, #255	; 0xff
 800507a:	d911      	bls.n	80050a0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	22ff      	movs	r2, #255	; 0xff
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	b2da      	uxtb	r2, r3
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	045c      	lsls	r4, r3, #17
 800508c:	230a      	movs	r3, #10
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	8819      	ldrh	r1, [r3, #0]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	2300      	movs	r3, #0
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	0023      	movs	r3, r4
 800509a:	f000 fa63 	bl	8005564 <I2C_TransferConfig>
 800509e:	e012      	b.n	80050c6 <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	049c      	lsls	r4, r3, #18
 80050b4:	230a      	movs	r3, #10
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	8819      	ldrh	r1, [r3, #0]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	2300      	movs	r3, #0
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	0023      	movs	r3, r4
 80050c2:	f000 fa4f 	bl	8005564 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d194      	bne.n	8004ffa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	0018      	movs	r0, r3
 80050d8:	f000 f98e 	bl	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d001      	beq.n	80050e4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e01a      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2220      	movs	r2, #32
 80050ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	490c      	ldr	r1, [pc, #48]	; (8005128 <HAL_I2C_Mem_Read+0x264>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2241      	movs	r2, #65	; 0x41
 8005100:	2120      	movs	r1, #32
 8005102:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2242      	movs	r2, #66	; 0x42
 8005108:	2100      	movs	r1, #0
 800510a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	2100      	movs	r1, #0
 8005112:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	e000      	b.n	800511a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
  }
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b007      	add	sp, #28
 8005120:	bd90      	pop	{r4, r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	80002400 	.word	0x80002400
 8005128:	fe00e800 	.word	0xfe00e800

0800512c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	000c      	movs	r4, r1
 8005136:	0010      	movs	r0, r2
 8005138:	0019      	movs	r1, r3
 800513a:	250a      	movs	r5, #10
 800513c:	197b      	adds	r3, r7, r5
 800513e:	1c22      	adds	r2, r4, #0
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	2308      	movs	r3, #8
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	1c02      	adds	r2, r0, #0
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	1dbb      	adds	r3, r7, #6
 800514c:	1c0a      	adds	r2, r1, #0
 800514e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005150:	1dbb      	adds	r3, r7, #6
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	045c      	lsls	r4, r3, #17
 800515a:	197b      	adds	r3, r7, r5
 800515c:	8819      	ldrh	r1, [r3, #0]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	4b23      	ldr	r3, [pc, #140]	; (80051f0 <I2C_RequestMemoryWrite+0xc4>)
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	0023      	movs	r3, r4
 8005166:	f000 f9fd 	bl	8005564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	6a39      	ldr	r1, [r7, #32]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 f902 	bl	800537a <I2C_WaitOnTXISFlagUntilTimeout>
 8005176:	1e03      	subs	r3, r0, #0
 8005178:	d001      	beq.n	800517e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e033      	b.n	80051e6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517e:	1dbb      	adds	r3, r7, #6
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d107      	bne.n	8005196 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005186:	2308      	movs	r3, #8
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
 8005194:	e019      	b.n	80051ca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005196:	2308      	movs	r3, #8
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	b29b      	uxth	r3, r3
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	6a39      	ldr	r1, [r7, #32]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f000 f8e3 	bl	800537a <I2C_WaitOnTXISFlagUntilTimeout>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d001      	beq.n	80051bc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e014      	b.n	80051e6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051bc:	2308      	movs	r3, #8
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	0013      	movs	r3, r2
 80051d4:	2200      	movs	r2, #0
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	f000 f890 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d001      	beq.n	80051e4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b004      	add	sp, #16
 80051ec:	bdb0      	pop	{r4, r5, r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	80002000 	.word	0x80002000

080051f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80051f4:	b5b0      	push	{r4, r5, r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	000c      	movs	r4, r1
 80051fe:	0010      	movs	r0, r2
 8005200:	0019      	movs	r1, r3
 8005202:	250a      	movs	r5, #10
 8005204:	197b      	adds	r3, r7, r5
 8005206:	1c22      	adds	r2, r4, #0
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	2308      	movs	r3, #8
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	1c02      	adds	r2, r0, #0
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	1dbb      	adds	r3, r7, #6
 8005214:	1c0a      	adds	r2, r1, #0
 8005216:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	197b      	adds	r3, r7, r5
 8005220:	8819      	ldrh	r1, [r3, #0]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <I2C_RequestMemoryRead+0xc0>)
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2300      	movs	r3, #0
 800522a:	f000 f99b 	bl	8005564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	6a39      	ldr	r1, [r7, #32]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 f8a0 	bl	800537a <I2C_WaitOnTXISFlagUntilTimeout>
 800523a:	1e03      	subs	r3, r0, #0
 800523c:	d001      	beq.n	8005242 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e033      	b.n	80052aa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005242:	1dbb      	adds	r3, r7, #6
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800524a:	2308      	movs	r3, #8
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
 8005258:	e019      	b.n	800528e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800525a:	2308      	movs	r3, #8
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	b29b      	uxth	r3, r3
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526e:	6a39      	ldr	r1, [r7, #32]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	0018      	movs	r0, r3
 8005274:	f000 f881 	bl	800537a <I2C_WaitOnTXISFlagUntilTimeout>
 8005278:	1e03      	subs	r3, r0, #0
 800527a:	d001      	beq.n	8005280 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e014      	b.n	80052aa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005280:	2308      	movs	r3, #8
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800528e:	6a3a      	ldr	r2, [r7, #32]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	0013      	movs	r3, r2
 8005298:	2200      	movs	r2, #0
 800529a:	2140      	movs	r1, #64	; 0x40
 800529c:	f000 f82e 	bl	80052fc <I2C_WaitOnFlagUntilTimeout>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d001      	beq.n	80052a8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b004      	add	sp, #16
 80052b0:	bdb0      	pop	{r4, r5, r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	80002000 	.word	0x80002000

080052b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2202      	movs	r2, #2
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d103      	bne.n	80052d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2201      	movs	r2, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d007      	beq.n	80052f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2101      	movs	r1, #1
 80052f0:	430a      	orrs	r2, r1
 80052f2:	619a      	str	r2, [r3, #24]
  }
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800530c:	e021      	b.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	d01e      	beq.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fe f9ba 	bl	800368c <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d113      	bne.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	2220      	movs	r2, #32
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2241      	movs	r2, #65	; 0x41
 800533a:	2120      	movs	r1, #32
 800533c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2242      	movs	r2, #66	; 0x42
 8005342:	2100      	movs	r1, #0
 8005344:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	2100      	movs	r1, #0
 800534c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e00f      	b.n	8005372 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	4013      	ands	r3, r2
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	425a      	negs	r2, r3
 8005362:	4153      	adcs	r3, r2
 8005364:	b2db      	uxtb	r3, r3
 8005366:	001a      	movs	r2, r3
 8005368:	1dfb      	adds	r3, r7, #7
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d0ce      	beq.n	800530e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b004      	add	sp, #16
 8005378:	bd80      	pop	{r7, pc}

0800537a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005386:	e02b      	b.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	0018      	movs	r0, r3
 8005390:	f000 f86e 	bl	8005470 <I2C_IsAcknowledgeFailed>
 8005394:	1e03      	subs	r3, r0, #0
 8005396:	d001      	beq.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e029      	b.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	3301      	adds	r3, #1
 80053a0:	d01e      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a2:	f7fe f973 	bl	800368c <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d113      	bne.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	2220      	movs	r2, #32
 80053be:	431a      	orrs	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2241      	movs	r2, #65	; 0x41
 80053c8:	2120      	movs	r1, #32
 80053ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2242      	movs	r2, #66	; 0x42
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2240      	movs	r2, #64	; 0x40
 80053d8:	2100      	movs	r1, #0
 80053da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2202      	movs	r2, #2
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d1cc      	bne.n	8005388 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b004      	add	sp, #16
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005404:	e028      	b.n	8005458 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 f82f 	bl	8005470 <I2C_IsAcknowledgeFailed>
 8005412:	1e03      	subs	r3, r0, #0
 8005414:	d001      	beq.n	800541a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e026      	b.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fe f937 	bl	800368c <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	2220      	movs	r2, #32
 8005436:	431a      	orrs	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2241      	movs	r2, #65	; 0x41
 8005440:	2120      	movs	r1, #32
 8005442:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2242      	movs	r2, #66	; 0x42
 8005448:	2100      	movs	r1, #0
 800544a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	2100      	movs	r1, #0
 8005452:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e007      	b.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2220      	movs	r2, #32
 8005460:	4013      	ands	r3, r2
 8005462:	2b20      	cmp	r3, #32
 8005464:	d1cf      	bne.n	8005406 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b004      	add	sp, #16
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2210      	movs	r2, #16
 8005484:	4013      	ands	r3, r2
 8005486:	2b10      	cmp	r3, #16
 8005488:	d164      	bne.n	8005554 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	049b      	lsls	r3, r3, #18
 8005494:	401a      	ands	r2, r3
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	049b      	lsls	r3, r3, #18
 800549a:	429a      	cmp	r2, r3
 800549c:	d02b      	beq.n	80054f6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	01c9      	lsls	r1, r1, #7
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b0:	e021      	b.n	80054f6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	3301      	adds	r3, #1
 80054b6:	d01e      	beq.n	80054f6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fe f8e8 	bl	800368c <HAL_GetTick>
 80054bc:	0002      	movs	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_IsAcknowledgeFailed+0x5e>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d113      	bne.n	80054f6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	2220      	movs	r2, #32
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2241      	movs	r2, #65	; 0x41
 80054de:	2120      	movs	r1, #32
 80054e0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2242      	movs	r2, #66	; 0x42
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2240      	movs	r2, #64	; 0x40
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e02f      	b.n	8005556 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2220      	movs	r2, #32
 80054fe:	4013      	ands	r3, r2
 8005500:	2b20      	cmp	r3, #32
 8005502:	d1d6      	bne.n	80054b2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2210      	movs	r2, #16
 800550a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2220      	movs	r2, #32
 8005512:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	0018      	movs	r0, r3
 8005518:	f7ff fece 	bl	80052b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	490e      	ldr	r1, [pc, #56]	; (8005560 <I2C_IsAcknowledgeFailed+0xf0>)
 8005528:	400a      	ands	r2, r1
 800552a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	2204      	movs	r2, #4
 8005532:	431a      	orrs	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2241      	movs	r2, #65	; 0x41
 800553c:	2120      	movs	r1, #32
 800553e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2242      	movs	r2, #66	; 0x42
 8005544:	2100      	movs	r1, #0
 8005546:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2240      	movs	r2, #64	; 0x40
 800554c:	2100      	movs	r1, #0
 800554e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b004      	add	sp, #16
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	fe00e800 	.word	0xfe00e800

08005564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	0008      	movs	r0, r1
 800556e:	0011      	movs	r1, r2
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	240a      	movs	r4, #10
 8005574:	193b      	adds	r3, r7, r4
 8005576:	1c02      	adds	r2, r0, #0
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	2009      	movs	r0, #9
 800557c:	183b      	adds	r3, r7, r0
 800557e:	1c0a      	adds	r2, r1, #0
 8005580:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	0d51      	lsrs	r1, r2, #21
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	00d2      	lsls	r2, r2, #3
 8005590:	400a      	ands	r2, r1
 8005592:	490e      	ldr	r1, [pc, #56]	; (80055cc <I2C_TransferConfig+0x68>)
 8005594:	430a      	orrs	r2, r1
 8005596:	43d2      	mvns	r2, r2
 8005598:	401a      	ands	r2, r3
 800559a:	0011      	movs	r1, r2
 800559c:	193b      	adds	r3, r7, r4
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	059b      	lsls	r3, r3, #22
 80055a2:	0d9a      	lsrs	r2, r3, #22
 80055a4:	183b      	adds	r3, r7, r0
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	0418      	lsls	r0, r3, #16
 80055aa:	23ff      	movs	r3, #255	; 0xff
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	4003      	ands	r3, r0
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b005      	add	sp, #20
 80055c8:	bd90      	pop	{r4, r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	03ff63ff 	.word	0x03ff63ff

080055d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2241      	movs	r2, #65	; 0x41
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d138      	bne.n	8005658 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2240      	movs	r2, #64	; 0x40
 80055ea:	5c9b      	ldrb	r3, [r3, r2]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e032      	b.n	800565a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2240      	movs	r2, #64	; 0x40
 80055f8:	2101      	movs	r1, #1
 80055fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2241      	movs	r2, #65	; 0x41
 8005600:	2124      	movs	r1, #36	; 0x24
 8005602:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2101      	movs	r1, #1
 8005610:	438a      	bics	r2, r1
 8005612:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4911      	ldr	r1, [pc, #68]	; (8005664 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005620:	400a      	ands	r2, r1
 8005622:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2101      	movs	r1, #1
 8005640:	430a      	orrs	r2, r1
 8005642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2241      	movs	r2, #65	; 0x41
 8005648:	2120      	movs	r1, #32
 800564a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	e000      	b.n	800565a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
  }
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b002      	add	sp, #8
 8005660:	bd80      	pop	{r7, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	ffffefff 	.word	0xffffefff

08005668 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2241      	movs	r2, #65	; 0x41
 8005676:	5c9b      	ldrb	r3, [r3, r2]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b20      	cmp	r3, #32
 800567c:	d139      	bne.n	80056f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2240      	movs	r2, #64	; 0x40
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005688:	2302      	movs	r3, #2
 800568a:	e033      	b.n	80056f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	2101      	movs	r1, #1
 8005692:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2241      	movs	r2, #65	; 0x41
 8005698:	2124      	movs	r1, #36	; 0x24
 800569a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	438a      	bics	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2101      	movs	r1, #1
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2241      	movs	r2, #65	; 0x41
 80056e2:	2120      	movs	r1, #32
 80056e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	2100      	movs	r1, #0
 80056ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b004      	add	sp, #16
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	fffff0ff 	.word	0xfffff0ff

08005700 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <HAL_PWR_EnableBkUpAccess+0x18>)
 800570a:	2180      	movs	r1, #128	; 0x80
 800570c:	0049      	lsls	r1, r1, #1
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]
}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40007000 	.word	0x40007000

0800571c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	000a      	movs	r2, r1
 8005726:	1cfb      	adds	r3, r7, #3
 8005728:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005730:	4b14      	ldr	r3, [pc, #80]	; (8005784 <HAL_PWR_EnterSTOPMode+0x68>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2207      	movs	r2, #7
 8005736:	4393      	bics	r3, r2
 8005738:	001a      	movs	r2, r3
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <HAL_PWR_EnterSTOPMode+0x68>)
 800573c:	2101      	movs	r1, #1
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e005      	b.n	8005750 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <HAL_PWR_EnterSTOPMode+0x68>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_PWR_EnterSTOPMode+0x68>)
 800574a:	2107      	movs	r1, #7
 800574c:	438a      	bics	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005756:	2104      	movs	r1, #4
 8005758:	430a      	orrs	r2, r1
 800575a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800575c:	1cfb      	adds	r3, r7, #3
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005764:	bf30      	wfi
 8005766:	e002      	b.n	800576e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005768:	bf40      	sev
    __WFE();
 800576a:	bf20      	wfe
    __WFE();
 800576c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005774:	2104      	movs	r1, #4
 8005776:	438a      	bics	r2, r1
 8005778:	611a      	str	r2, [r3, #16]
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b002      	add	sp, #8
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	40007000 	.word	0x40007000
 8005788:	e000ed00 	.word	0xe000ed00

0800578c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005794:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a19      	ldr	r2, [pc, #100]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800579a:	4013      	ands	r3, r2
 800579c:	0019      	movs	r1, r3
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d11f      	bne.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	0013      	movs	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	4912      	ldr	r1, [pc, #72]	; (8005808 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80057be:	0018      	movs	r0, r3
 80057c0:	f7fa fcaa 	bl	8000118 <__udivsi3>
 80057c4:	0003      	movs	r3, r0
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ca:	e008      	b.n	80057de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e001      	b.n	80057de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e009      	b.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	401a      	ands	r2, r3
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d0ed      	beq.n	80057cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b004      	add	sp, #16
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	40007000 	.word	0x40007000
 8005800:	fffff9ff 	.word	0xfffff9ff
 8005804:	20000008 	.word	0x20000008
 8005808:	000f4240 	.word	0x000f4240

0800580c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	23e0      	movs	r3, #224	; 0xe0
 8005816:	01db      	lsls	r3, r3, #7
 8005818:	4013      	ands	r3, r2
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40021000 	.word	0x40021000

08005824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e304      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2201      	movs	r2, #1
 800583c:	4013      	ands	r3, r2
 800583e:	d100      	bne.n	8005842 <HAL_RCC_OscConfig+0x1e>
 8005840:	e07c      	b.n	800593c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005842:	4bc3      	ldr	r3, [pc, #780]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2238      	movs	r2, #56	; 0x38
 8005848:	4013      	ands	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800584c:	4bc0      	ldr	r3, [pc, #768]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2203      	movs	r2, #3
 8005852:	4013      	ands	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d102      	bne.n	8005862 <HAL_RCC_OscConfig+0x3e>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d002      	beq.n	8005868 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d10b      	bne.n	8005880 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005868:	4bb9      	ldr	r3, [pc, #740]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	4013      	ands	r3, r2
 8005872:	d062      	beq.n	800593a <HAL_RCC_OscConfig+0x116>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d15e      	bne.n	800593a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e2df      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	025b      	lsls	r3, r3, #9
 8005888:	429a      	cmp	r2, r3
 800588a:	d107      	bne.n	800589c <HAL_RCC_OscConfig+0x78>
 800588c:	4bb0      	ldr	r3, [pc, #704]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4baf      	ldr	r3, [pc, #700]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	0249      	lsls	r1, r1, #9
 8005896:	430a      	orrs	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e020      	b.n	80058de <HAL_RCC_OscConfig+0xba>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	23a0      	movs	r3, #160	; 0xa0
 80058a2:	02db      	lsls	r3, r3, #11
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d10e      	bne.n	80058c6 <HAL_RCC_OscConfig+0xa2>
 80058a8:	4ba9      	ldr	r3, [pc, #676]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4ba8      	ldr	r3, [pc, #672]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	02c9      	lsls	r1, r1, #11
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	4ba6      	ldr	r3, [pc, #664]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4ba5      	ldr	r3, [pc, #660]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058bc:	2180      	movs	r1, #128	; 0x80
 80058be:	0249      	lsls	r1, r1, #9
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e00b      	b.n	80058de <HAL_RCC_OscConfig+0xba>
 80058c6:	4ba2      	ldr	r3, [pc, #648]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4ba1      	ldr	r3, [pc, #644]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058cc:	49a1      	ldr	r1, [pc, #644]	; (8005b54 <HAL_RCC_OscConfig+0x330>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	4b9f      	ldr	r3, [pc, #636]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b9e      	ldr	r3, [pc, #632]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80058d8:	499f      	ldr	r1, [pc, #636]	; (8005b58 <HAL_RCC_OscConfig+0x334>)
 80058da:	400a      	ands	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e6:	f7fd fed1 	bl	800368c <HAL_GetTick>
 80058ea:	0003      	movs	r3, r0
 80058ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fd fecc 	bl	800368c <HAL_GetTick>
 80058f4:	0002      	movs	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e29e      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005902:	4b93      	ldr	r3, [pc, #588]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	029b      	lsls	r3, r3, #10
 800590a:	4013      	ands	r3, r2
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0xcc>
 800590e:	e015      	b.n	800593c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fd febc 	bl	800368c <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800591a:	f7fd feb7 	bl	800368c <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b64      	cmp	r3, #100	; 0x64
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e289      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800592c:	4b88      	ldr	r3, [pc, #544]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	4013      	ands	r3, r2
 8005936:	d1f0      	bne.n	800591a <HAL_RCC_OscConfig+0xf6>
 8005938:	e000      	b.n	800593c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	d100      	bne.n	8005948 <HAL_RCC_OscConfig+0x124>
 8005946:	e099      	b.n	8005a7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005948:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2238      	movs	r2, #56	; 0x38
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005952:	4b7f      	ldr	r3, [pc, #508]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2203      	movs	r2, #3
 8005958:	4013      	ands	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b10      	cmp	r3, #16
 8005960:	d102      	bne.n	8005968 <HAL_RCC_OscConfig+0x144>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d002      	beq.n	800596e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d135      	bne.n	80059da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800596e:	4b78      	ldr	r3, [pc, #480]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4013      	ands	r3, r2
 8005978:	d005      	beq.n	8005986 <HAL_RCC_OscConfig+0x162>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e25c      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005986:	4b72      	ldr	r3, [pc, #456]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4a74      	ldr	r2, [pc, #464]	; (8005b5c <HAL_RCC_OscConfig+0x338>)
 800598c:	4013      	ands	r3, r2
 800598e:	0019      	movs	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	021a      	lsls	r2, r3, #8
 8005996:	4b6e      	ldr	r3, [pc, #440]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d112      	bne.n	80059c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059a2:	4b6b      	ldr	r3, [pc, #428]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6e      	ldr	r2, [pc, #440]	; (8005b60 <HAL_RCC_OscConfig+0x33c>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059b2:	430a      	orrs	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80059b6:	4b66      	ldr	r3, [pc, #408]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	0adb      	lsrs	r3, r3, #11
 80059bc:	2207      	movs	r2, #7
 80059be:	4013      	ands	r3, r2
 80059c0:	4a68      	ldr	r2, [pc, #416]	; (8005b64 <HAL_RCC_OscConfig+0x340>)
 80059c2:	40da      	lsrs	r2, r3
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_OscConfig+0x344>)
 80059c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059c8:	4b68      	ldr	r3, [pc, #416]	; (8005b6c <HAL_RCC_OscConfig+0x348>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fd fe01 	bl	80035d4 <HAL_InitTick>
 80059d2:	1e03      	subs	r3, r0, #0
 80059d4:	d051      	beq.n	8005a7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e232      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d030      	beq.n	8005a44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059e2:	4b5b      	ldr	r3, [pc, #364]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a5e      	ldr	r2, [pc, #376]	; (8005b60 <HAL_RCC_OscConfig+0x33c>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	4b57      	ldr	r3, [pc, #348]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80059f6:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	0049      	lsls	r1, r1, #1
 8005a00:	430a      	orrs	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fd fe42 	bl	800368c <HAL_GetTick>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0e:	f7fd fe3d 	bl	800368c <HAL_GetTick>
 8005a12:	0002      	movs	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e20f      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a20:	4b4b      	ldr	r3, [pc, #300]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d0f0      	beq.n	8005a0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2c:	4b48      	ldr	r3, [pc, #288]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a4a      	ldr	r2, [pc, #296]	; (8005b5c <HAL_RCC_OscConfig+0x338>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	4b44      	ldr	r3, [pc, #272]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	e01b      	b.n	8005a7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005a44:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b41      	ldr	r3, [pc, #260]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a4a:	4949      	ldr	r1, [pc, #292]	; (8005b70 <HAL_RCC_OscConfig+0x34c>)
 8005a4c:	400a      	ands	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fd fe1c 	bl	800368c <HAL_GetTick>
 8005a54:	0003      	movs	r3, r0
 8005a56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5a:	f7fd fe17 	bl	800368c <HAL_GetTick>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e1e9      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a6c:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4013      	ands	r3, r2
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x236>
 8005a78:	e000      	b.n	8005a7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2208      	movs	r2, #8
 8005a82:	4013      	ands	r3, r2
 8005a84:	d047      	beq.n	8005b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a86:	4b32      	ldr	r3, [pc, #200]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2238      	movs	r2, #56	; 0x38
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b18      	cmp	r3, #24
 8005a90:	d10a      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005a92:	4b2f      	ldr	r3, [pc, #188]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a96:	2202      	movs	r2, #2
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d03c      	beq.n	8005b16 <HAL_RCC_OscConfig+0x2f2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d138      	bne.n	8005b16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e1cb      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d019      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005ab2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ab4:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fd fde6 	bl	800368c <HAL_GetTick>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac6:	f7fd fde1 	bl	800368c <HAL_GetTick>
 8005aca:	0002      	movs	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1b3      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005adc:	2202      	movs	r2, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d0f1      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x2a2>
 8005ae2:	e018      	b.n	8005b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005aea:	2101      	movs	r1, #1
 8005aec:	438a      	bics	r2, r1
 8005aee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd fdcc 	bl	800368c <HAL_GetTick>
 8005af4:	0003      	movs	r3, r0
 8005af6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005afa:	f7fd fdc7 	bl	800368c <HAL_GetTick>
 8005afe:	0002      	movs	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e199      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b0c:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b10:	2202      	movs	r2, #2
 8005b12:	4013      	ands	r3, r2
 8005b14:	d1f1      	bne.n	8005afa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d100      	bne.n	8005b22 <HAL_RCC_OscConfig+0x2fe>
 8005b20:	e0c6      	b.n	8005cb0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b22:	231f      	movs	r3, #31
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2238      	movs	r2, #56	; 0x38
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d11e      	bne.n	8005b74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005b36:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <HAL_RCC_OscConfig+0x32c>)
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d100      	bne.n	8005b42 <HAL_RCC_OscConfig+0x31e>
 8005b40:	e0b6      	b.n	8005cb0 <HAL_RCC_OscConfig+0x48c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d000      	beq.n	8005b4c <HAL_RCC_OscConfig+0x328>
 8005b4a:	e0b1      	b.n	8005cb0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e177      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
 8005b50:	40021000 	.word	0x40021000
 8005b54:	fffeffff 	.word	0xfffeffff
 8005b58:	fffbffff 	.word	0xfffbffff
 8005b5c:	ffff80ff 	.word	0xffff80ff
 8005b60:	ffffc7ff 	.word	0xffffc7ff
 8005b64:	00f42400 	.word	0x00f42400
 8005b68:	20000008 	.word	0x20000008
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b74:	4bb4      	ldr	r3, [pc, #720]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	055b      	lsls	r3, r3, #21
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <HAL_RCC_OscConfig+0x360>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x362>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	4baf      	ldr	r3, [pc, #700]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b8e:	4bae      	ldr	r3, [pc, #696]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	0549      	lsls	r1, r1, #21
 8005b94:	430a      	orrs	r2, r1
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b98:	4bab      	ldr	r3, [pc, #684]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	055b      	lsls	r3, r3, #21
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005ba6:	231f      	movs	r3, #31
 8005ba8:	18fb      	adds	r3, r7, r3
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bae:	4ba7      	ldr	r3, [pc, #668]	; (8005e4c <HAL_RCC_OscConfig+0x628>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	2380      	movs	r3, #128	; 0x80
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d11a      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bba:	4ba4      	ldr	r3, [pc, #656]	; (8005e4c <HAL_RCC_OscConfig+0x628>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4ba3      	ldr	r3, [pc, #652]	; (8005e4c <HAL_RCC_OscConfig+0x628>)
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	0049      	lsls	r1, r1, #1
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005bc8:	f7fd fd60 	bl	800368c <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd2:	f7fd fd5b 	bl	800368c <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e12d      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be4:	4b99      	ldr	r3, [pc, #612]	; (8005e4c <HAL_RCC_OscConfig+0x628>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4013      	ands	r3, r2
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d106      	bne.n	8005c06 <HAL_RCC_OscConfig+0x3e2>
 8005bf8:	4b93      	ldr	r3, [pc, #588]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bfc:	4b92      	ldr	r3, [pc, #584]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005bfe:	2101      	movs	r1, #1
 8005c00:	430a      	orrs	r2, r1
 8005c02:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c04:	e01c      	b.n	8005c40 <HAL_RCC_OscConfig+0x41c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d10c      	bne.n	8005c28 <HAL_RCC_OscConfig+0x404>
 8005c0e:	4b8e      	ldr	r3, [pc, #568]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c12:	4b8d      	ldr	r3, [pc, #564]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c14:	2104      	movs	r1, #4
 8005c16:	430a      	orrs	r2, r1
 8005c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c1a:	4b8b      	ldr	r3, [pc, #556]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c1e:	4b8a      	ldr	r3, [pc, #552]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c20:	2101      	movs	r1, #1
 8005c22:	430a      	orrs	r2, r1
 8005c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c26:	e00b      	b.n	8005c40 <HAL_RCC_OscConfig+0x41c>
 8005c28:	4b87      	ldr	r3, [pc, #540]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c2c:	4b86      	ldr	r3, [pc, #536]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c2e:	2101      	movs	r1, #1
 8005c30:	438a      	bics	r2, r1
 8005c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c34:	4b84      	ldr	r3, [pc, #528]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c38:	4b83      	ldr	r3, [pc, #524]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c3a:	2104      	movs	r1, #4
 8005c3c:	438a      	bics	r2, r1
 8005c3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d014      	beq.n	8005c72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fd fd20 	bl	800368c <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c50:	e009      	b.n	8005c66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c52:	f7fd fd1b 	bl	800368c <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	4a7c      	ldr	r2, [pc, #496]	; (8005e50 <HAL_RCC_OscConfig+0x62c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e0ec      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c66:	4b78      	ldr	r3, [pc, #480]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x42e>
 8005c70:	e013      	b.n	8005c9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fd fd0b 	bl	800368c <HAL_GetTick>
 8005c76:	0003      	movs	r3, r0
 8005c78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c7a:	e009      	b.n	8005c90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7c:	f7fd fd06 	bl	800368c <HAL_GetTick>
 8005c80:	0002      	movs	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	4a72      	ldr	r2, [pc, #456]	; (8005e50 <HAL_RCC_OscConfig+0x62c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e0d7      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c90:	4b6d      	ldr	r3, [pc, #436]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	2202      	movs	r2, #2
 8005c96:	4013      	ands	r3, r2
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005c9a:	231f      	movs	r3, #31
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d105      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005ca4:	4b68      	ldr	r3, [pc, #416]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca8:	4b67      	ldr	r3, [pc, #412]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005caa:	496a      	ldr	r1, [pc, #424]	; (8005e54 <HAL_RCC_OscConfig+0x630>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d100      	bne.n	8005cba <HAL_RCC_OscConfig+0x496>
 8005cb8:	e0c1      	b.n	8005e3e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cba:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2238      	movs	r2, #56	; 0x38
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d100      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4a4>
 8005cc6:	e081      	b.n	8005dcc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d156      	bne.n	8005d7e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd0:	4b5d      	ldr	r3, [pc, #372]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b5c      	ldr	r3, [pc, #368]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005cd6:	4960      	ldr	r1, [pc, #384]	; (8005e58 <HAL_RCC_OscConfig+0x634>)
 8005cd8:	400a      	ands	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fd fcd6 	bl	800368c <HAL_GetTick>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fd fcd1 	bl	800368c <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e0a3      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf8:	4b53      	ldr	r3, [pc, #332]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	049b      	lsls	r3, r3, #18
 8005d00:	4013      	ands	r3, r2
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d04:	4b50      	ldr	r3, [pc, #320]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a54      	ldr	r2, [pc, #336]	; (8005e5c <HAL_RCC_OscConfig+0x638>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1a      	ldr	r2, [r3, #32]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	431a      	orrs	r2, r3
 8005d32:	4b45      	ldr	r3, [pc, #276]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d38:	4b43      	ldr	r3, [pc, #268]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	0449      	lsls	r1, r1, #17
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005d46:	4b40      	ldr	r3, [pc, #256]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	0549      	lsls	r1, r1, #21
 8005d50:	430a      	orrs	r2, r1
 8005d52:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fd fc9a 	bl	800368c <HAL_GetTick>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5e:	f7fd fc95 	bl	800368c <HAL_GetTick>
 8005d62:	0002      	movs	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e067      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d70:	4b35      	ldr	r3, [pc, #212]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	049b      	lsls	r3, r3, #18
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x53a>
 8005d7c:	e05f      	b.n	8005e3e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7e:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d84:	4934      	ldr	r1, [pc, #208]	; (8005e58 <HAL_RCC_OscConfig+0x634>)
 8005d86:	400a      	ands	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d90:	2103      	movs	r1, #3
 8005d92:	438a      	bics	r2, r1
 8005d94:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005d96:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005d9c:	4930      	ldr	r1, [pc, #192]	; (8005e60 <HAL_RCC_OscConfig+0x63c>)
 8005d9e:	400a      	ands	r2, r1
 8005da0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fd fc73 	bl	800368c <HAL_GetTick>
 8005da6:	0003      	movs	r3, r0
 8005da8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dac:	f7fd fc6e 	bl	800368c <HAL_GetTick>
 8005db0:	0002      	movs	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e040      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dbe:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	049b      	lsls	r3, r3, #18
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x588>
 8005dca:	e038      	b.n	8005e3e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e033      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x624>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2203      	movs	r2, #3
 8005de2:	401a      	ands	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d126      	bne.n	8005e3a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2270      	movs	r2, #112	; 0x70
 8005df0:	401a      	ands	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d11f      	bne.n	8005e3a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	23fe      	movs	r3, #254	; 0xfe
 8005dfe:	01db      	lsls	r3, r3, #7
 8005e00:	401a      	ands	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d116      	bne.n	8005e3a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	23f8      	movs	r3, #248	; 0xf8
 8005e10:	039b      	lsls	r3, r3, #14
 8005e12:	401a      	ands	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d10e      	bne.n	8005e3a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	23e0      	movs	r3, #224	; 0xe0
 8005e20:	051b      	lsls	r3, r3, #20
 8005e22:	401a      	ands	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	0f5b      	lsrs	r3, r3, #29
 8005e30:	075a      	lsls	r2, r3, #29
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d001      	beq.n	8005e3e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b008      	add	sp, #32
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	00001388 	.word	0x00001388
 8005e54:	efffffff 	.word	0xefffffff
 8005e58:	feffffff 	.word	0xfeffffff
 8005e5c:	11c1808c 	.word	0x11c1808c
 8005e60:	eefeffff 	.word	0xeefeffff

08005e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0e9      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e78:	4b76      	ldr	r3, [pc, #472]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2207      	movs	r2, #7
 8005e7e:	4013      	ands	r3, r2
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d91e      	bls.n	8005ec4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e86:	4b73      	ldr	r3, [pc, #460]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	4393      	bics	r3, r2
 8005e8e:	0019      	movs	r1, r3
 8005e90:	4b70      	ldr	r3, [pc, #448]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e98:	f7fd fbf8 	bl	800368c <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ea0:	e009      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea2:	f7fd fbf3 	bl	800368c <HAL_GetTick>
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	4a6a      	ldr	r2, [pc, #424]	; (8006058 <HAL_RCC_ClockConfig+0x1f4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e0ca      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005eb6:	4b67      	ldr	r3, [pc, #412]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2207      	movs	r2, #7
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d1ee      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d015      	beq.n	8005efa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d006      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ed8:	4b60      	ldr	r3, [pc, #384]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	4b5f      	ldr	r3, [pc, #380]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005ede:	21e0      	movs	r1, #224	; 0xe0
 8005ee0:	01c9      	lsls	r1, r1, #7
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee6:	4b5d      	ldr	r3, [pc, #372]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	4a5d      	ldr	r2, [pc, #372]	; (8006060 <HAL_RCC_ClockConfig+0x1fc>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	0019      	movs	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2201      	movs	r2, #1
 8005f00:	4013      	ands	r3, r2
 8005f02:	d057      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f0c:	4b53      	ldr	r3, [pc, #332]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	4013      	ands	r3, r2
 8005f16:	d12b      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e097      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f24:	4b4d      	ldr	r3, [pc, #308]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	049b      	lsls	r3, r3, #18
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d11f      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e08b      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3c:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4013      	ands	r3, r2
 8005f46:	d113      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e07f      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d106      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f54:	4b41      	ldr	r3, [pc, #260]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f58:	2202      	movs	r2, #2
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e074      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f62:	4b3e      	ldr	r3, [pc, #248]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f66:	2202      	movs	r2, #2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d101      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e06d      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f70:	4b3a      	ldr	r3, [pc, #232]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2207      	movs	r2, #7
 8005f76:	4393      	bics	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f80:	430a      	orrs	r2, r1
 8005f82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f84:	f7fd fb82 	bl	800368c <HAL_GetTick>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8c:	e009      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8e:	f7fd fb7d 	bl	800368c <HAL_GetTick>
 8005f92:	0002      	movs	r2, r0
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	4a2f      	ldr	r2, [pc, #188]	; (8006058 <HAL_RCC_ClockConfig+0x1f4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e054      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	4b2e      	ldr	r3, [pc, #184]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2238      	movs	r2, #56	; 0x38
 8005fa8:	401a      	ands	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d1ec      	bne.n	8005f8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b27      	ldr	r3, [pc, #156]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2207      	movs	r2, #7
 8005fba:	4013      	ands	r3, r2
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d21e      	bcs.n	8006000 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2207      	movs	r2, #7
 8005fc8:	4393      	bics	r3, r2
 8005fca:	0019      	movs	r1, r3
 8005fcc:	4b21      	ldr	r3, [pc, #132]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fd4:	f7fd fb5a 	bl	800368c <HAL_GetTick>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fdc:	e009      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fde:	f7fd fb55 	bl	800368c <HAL_GetTick>
 8005fe2:	0002      	movs	r2, r0
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <HAL_RCC_ClockConfig+0x1f4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e02c      	b.n	800604c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ff2:	4b18      	ldr	r3, [pc, #96]	; (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2207      	movs	r2, #7
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d1ee      	bne.n	8005fde <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2204      	movs	r2, #4
 8006006:	4013      	ands	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <HAL_RCC_ClockConfig+0x200>)
 8006010:	4013      	ands	r3, r2
 8006012:	0019      	movs	r1, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	4b10      	ldr	r3, [pc, #64]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800601e:	f000 f829 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 8006022:	0001      	movs	r1, r0
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	220f      	movs	r2, #15
 800602c:	401a      	ands	r2, r3
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <HAL_RCC_ClockConfig+0x204>)
 8006030:	0092      	lsls	r2, r2, #2
 8006032:	58d3      	ldr	r3, [r2, r3]
 8006034:	221f      	movs	r2, #31
 8006036:	4013      	ands	r3, r2
 8006038:	000a      	movs	r2, r1
 800603a:	40da      	lsrs	r2, r3
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <HAL_RCC_ClockConfig+0x208>)
 800603e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCC_ClockConfig+0x20c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0018      	movs	r0, r3
 8006046:	f7fd fac5 	bl	80035d4 <HAL_InitTick>
 800604a:	0003      	movs	r3, r0
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	b004      	add	sp, #16
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40022000 	.word	0x40022000
 8006058:	00001388 	.word	0x00001388
 800605c:	40021000 	.word	0x40021000
 8006060:	fffff0ff 	.word	0xfffff0ff
 8006064:	ffff8fff 	.word	0xffff8fff
 8006068:	0800d7ec 	.word	0x0800d7ec
 800606c:	20000008 	.word	0x20000008
 8006070:	20000000 	.word	0x20000000

08006074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800607a:	4b3c      	ldr	r3, [pc, #240]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2238      	movs	r2, #56	; 0x38
 8006080:	4013      	ands	r3, r2
 8006082:	d10f      	bne.n	80060a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006084:	4b39      	ldr	r3, [pc, #228]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	0adb      	lsrs	r3, r3, #11
 800608a:	2207      	movs	r2, #7
 800608c:	4013      	ands	r3, r2
 800608e:	2201      	movs	r2, #1
 8006090:	409a      	lsls	r2, r3
 8006092:	0013      	movs	r3, r2
 8006094:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	4835      	ldr	r0, [pc, #212]	; (8006170 <HAL_RCC_GetSysClockFreq+0xfc>)
 800609a:	f7fa f83d 	bl	8000118 <__udivsi3>
 800609e:	0003      	movs	r3, r0
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	e05d      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060a4:	4b31      	ldr	r3, [pc, #196]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2238      	movs	r2, #56	; 0x38
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d102      	bne.n	80060b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060b0:	4b30      	ldr	r3, [pc, #192]	; (8006174 <HAL_RCC_GetSysClockFreq+0x100>)
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	e054      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b6:	4b2d      	ldr	r3, [pc, #180]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2238      	movs	r2, #56	; 0x38
 80060bc:	4013      	ands	r3, r2
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d138      	bne.n	8006134 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80060c2:	4b2a      	ldr	r3, [pc, #168]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2203      	movs	r2, #3
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060cc:	4b27      	ldr	r3, [pc, #156]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	2207      	movs	r2, #7
 80060d4:	4013      	ands	r3, r2
 80060d6:	3301      	adds	r3, #1
 80060d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d10d      	bne.n	80060fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4824      	ldr	r0, [pc, #144]	; (8006174 <HAL_RCC_GetSysClockFreq+0x100>)
 80060e4:	f7fa f818 	bl	8000118 <__udivsi3>
 80060e8:	0003      	movs	r3, r0
 80060ea:	0019      	movs	r1, r3
 80060ec:	4b1f      	ldr	r3, [pc, #124]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	227f      	movs	r2, #127	; 0x7f
 80060f4:	4013      	ands	r3, r2
 80060f6:	434b      	muls	r3, r1
 80060f8:	617b      	str	r3, [r7, #20]
        break;
 80060fa:	e00d      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	481c      	ldr	r0, [pc, #112]	; (8006170 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006100:	f7fa f80a 	bl	8000118 <__udivsi3>
 8006104:	0003      	movs	r3, r0
 8006106:	0019      	movs	r1, r3
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	0a1b      	lsrs	r3, r3, #8
 800610e:	227f      	movs	r2, #127	; 0x7f
 8006110:	4013      	ands	r3, r2
 8006112:	434b      	muls	r3, r1
 8006114:	617b      	str	r3, [r7, #20]
        break;
 8006116:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006118:	4b14      	ldr	r3, [pc, #80]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	0f5b      	lsrs	r3, r3, #29
 800611e:	2207      	movs	r2, #7
 8006120:	4013      	ands	r3, r2
 8006122:	3301      	adds	r3, #1
 8006124:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	6978      	ldr	r0, [r7, #20]
 800612a:	f7f9 fff5 	bl	8000118 <__udivsi3>
 800612e:	0003      	movs	r3, r0
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	e015      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2238      	movs	r2, #56	; 0x38
 800613a:	4013      	ands	r3, r2
 800613c:	2b20      	cmp	r3, #32
 800613e:	d103      	bne.n	8006148 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e00b      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006148:	4b08      	ldr	r3, [pc, #32]	; (800616c <HAL_RCC_GetSysClockFreq+0xf8>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2238      	movs	r2, #56	; 0x38
 800614e:	4013      	ands	r3, r2
 8006150:	2b18      	cmp	r3, #24
 8006152:	d103      	bne.n	800615c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006154:	23fa      	movs	r3, #250	; 0xfa
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	e001      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006160:	693b      	ldr	r3, [r7, #16]
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b006      	add	sp, #24
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	40021000 	.word	0x40021000
 8006170:	00f42400 	.word	0x00f42400
 8006174:	007a1200 	.word	0x007a1200

08006178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <HAL_RCC_GetHCLKFreq+0x10>)
 800617e:	681b      	ldr	r3, [r3, #0]
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	20000008 	.word	0x20000008

0800618c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800618c:	b5b0      	push	{r4, r5, r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006190:	f7ff fff2 	bl	8006178 <HAL_RCC_GetHCLKFreq>
 8006194:	0004      	movs	r4, r0
 8006196:	f7ff fb39 	bl	800580c <LL_RCC_GetAPB1Prescaler>
 800619a:	0003      	movs	r3, r0
 800619c:	0b1a      	lsrs	r2, r3, #12
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061a0:	0092      	lsls	r2, r2, #2
 80061a2:	58d3      	ldr	r3, [r2, r3]
 80061a4:	221f      	movs	r2, #31
 80061a6:	4013      	ands	r3, r2
 80061a8:	40dc      	lsrs	r4, r3
 80061aa:	0023      	movs	r3, r4
}
 80061ac:	0018      	movs	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bdb0      	pop	{r4, r5, r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	0800d82c 	.word	0x0800d82c

080061b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80061c0:	2313      	movs	r3, #19
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061c8:	2312      	movs	r3, #18
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	4013      	ands	r3, r2
 80061da:	d100      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80061dc:	e0a3      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061de:	2011      	movs	r0, #17
 80061e0:	183b      	adds	r3, r7, r0
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e6:	4bc3      	ldr	r3, [pc, #780]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ea:	2380      	movs	r3, #128	; 0x80
 80061ec:	055b      	lsls	r3, r3, #21
 80061ee:	4013      	ands	r3, r2
 80061f0:	d110      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f2:	4bc0      	ldr	r3, [pc, #768]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f6:	4bbf      	ldr	r3, [pc, #764]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	0549      	lsls	r1, r1, #21
 80061fc:	430a      	orrs	r2, r1
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8006200:	4bbc      	ldr	r3, [pc, #752]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	055b      	lsls	r3, r3, #21
 8006208:	4013      	ands	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	183b      	adds	r3, r7, r0
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006214:	4bb8      	ldr	r3, [pc, #736]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4bb7      	ldr	r3, [pc, #732]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	0049      	lsls	r1, r1, #1
 800621e:	430a      	orrs	r2, r1
 8006220:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006222:	f7fd fa33 	bl	800368c <HAL_GetTick>
 8006226:	0003      	movs	r3, r0
 8006228:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800622a:	e00b      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622c:	f7fd fa2e 	bl	800368c <HAL_GetTick>
 8006230:	0002      	movs	r2, r0
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d904      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800623a:	2313      	movs	r3, #19
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	2203      	movs	r2, #3
 8006240:	701a      	strb	r2, [r3, #0]
        break;
 8006242:	e005      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006244:	4bac      	ldr	r3, [pc, #688]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4013      	ands	r3, r2
 800624e:	d0ed      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006250:	2313      	movs	r3, #19
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d154      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800625a:	4ba6      	ldr	r3, [pc, #664]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800625c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800625e:	23c0      	movs	r3, #192	; 0xc0
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4013      	ands	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	429a      	cmp	r2, r3
 8006274:	d014      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006276:	4b9f      	ldr	r3, [pc, #636]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627a:	4aa0      	ldr	r2, [pc, #640]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800627c:	4013      	ands	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006280:	4b9c      	ldr	r3, [pc, #624]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006284:	4b9b      	ldr	r3, [pc, #620]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	0249      	lsls	r1, r1, #9
 800628a:	430a      	orrs	r2, r1
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800628e:	4b99      	ldr	r3, [pc, #612]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006292:	4b98      	ldr	r3, [pc, #608]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006294:	499a      	ldr	r1, [pc, #616]	; (8006500 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006296:	400a      	ands	r2, r1
 8006298:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800629a:	4b96      	ldr	r3, [pc, #600]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2201      	movs	r2, #1
 80062a4:	4013      	ands	r3, r2
 80062a6:	d016      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fd f9f0 	bl	800368c <HAL_GetTick>
 80062ac:	0003      	movs	r3, r0
 80062ae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062b0:	e00c      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b2:	f7fd f9eb 	bl	800368c <HAL_GetTick>
 80062b6:	0002      	movs	r2, r0
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	4a91      	ldr	r2, [pc, #580]	; (8006504 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d904      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80062c2:	2313      	movs	r3, #19
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2203      	movs	r2, #3
 80062c8:	701a      	strb	r2, [r3, #0]
            break;
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062cc:	4b89      	ldr	r3, [pc, #548]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	2202      	movs	r2, #2
 80062d2:	4013      	ands	r3, r2
 80062d4:	d0ed      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80062d6:	2313      	movs	r3, #19
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062e0:	4b84      	ldr	r3, [pc, #528]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	4a85      	ldr	r2, [pc, #532]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	0019      	movs	r1, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ee:	4b81      	ldr	r3, [pc, #516]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062f0:	430a      	orrs	r2, r1
 80062f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80062f4:	e00c      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f6:	2312      	movs	r3, #18
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2213      	movs	r2, #19
 80062fc:	18ba      	adds	r2, r7, r2
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e005      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	2312      	movs	r3, #18
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	2213      	movs	r2, #19
 800630a:	18ba      	adds	r2, r7, r2
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006310:	2311      	movs	r3, #17
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d105      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800631a:	4b76      	ldr	r3, [pc, #472]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800631c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800631e:	4b75      	ldr	r3, [pc, #468]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006320:	4979      	ldr	r1, [pc, #484]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006322:	400a      	ands	r2, r1
 8006324:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2201      	movs	r2, #1
 800632c:	4013      	ands	r3, r2
 800632e:	d009      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006330:	4b70      	ldr	r3, [pc, #448]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	2203      	movs	r2, #3
 8006336:	4393      	bics	r3, r2
 8006338:	0019      	movs	r1, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	4b6d      	ldr	r3, [pc, #436]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006340:	430a      	orrs	r2, r1
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2202      	movs	r2, #2
 800634a:	4013      	ands	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800634e:	4b69      	ldr	r3, [pc, #420]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006352:	220c      	movs	r2, #12
 8006354:	4393      	bics	r3, r2
 8006356:	0019      	movs	r1, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	4b65      	ldr	r3, [pc, #404]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800635e:	430a      	orrs	r2, r1
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2210      	movs	r2, #16
 8006368:	4013      	ands	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800636c:	4b61      	ldr	r3, [pc, #388]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	4a66      	ldr	r2, [pc, #408]	; (800650c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	4b5e      	ldr	r3, [pc, #376]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800637c:	430a      	orrs	r2, r1
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	2380      	movs	r3, #128	; 0x80
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4013      	ands	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800638c:	4b59      	ldr	r3, [pc, #356]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800638e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006390:	4a5f      	ldr	r2, [pc, #380]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006392:	4013      	ands	r3, r2
 8006394:	0019      	movs	r1, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	4b56      	ldr	r3, [pc, #344]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800639c:	430a      	orrs	r2, r1
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4013      	ands	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063ac:	4b51      	ldr	r3, [pc, #324]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	4a58      	ldr	r2, [pc, #352]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	0019      	movs	r1, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69da      	ldr	r2, [r3, #28]
 80063ba:	4b4e      	ldr	r3, [pc, #312]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063bc:	430a      	orrs	r2, r1
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2220      	movs	r2, #32
 80063c6:	4013      	ands	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ca:	4b4a      	ldr	r3, [pc, #296]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	4a52      	ldr	r2, [pc, #328]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	0019      	movs	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	4b46      	ldr	r3, [pc, #280]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063da:	430a      	orrs	r2, r1
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	01db      	lsls	r3, r3, #7
 80063e6:	4013      	ands	r3, r2
 80063e8:	d015      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063ea:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	0899      	lsrs	r1, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1a      	ldr	r2, [r3, #32]
 80063f6:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063f8:	430a      	orrs	r2, r1
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	05db      	lsls	r3, r3, #23
 8006404:	429a      	cmp	r2, r3
 8006406:	d106      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006408:	4b3a      	ldr	r3, [pc, #232]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	4b39      	ldr	r3, [pc, #228]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800640e:	2180      	movs	r1, #128	; 0x80
 8006410:	0249      	lsls	r1, r1, #9
 8006412:	430a      	orrs	r2, r1
 8006414:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	031b      	lsls	r3, r3, #12
 800641e:	4013      	ands	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	2240      	movs	r2, #64	; 0x40
 8006428:	4393      	bics	r3, r2
 800642a:	0019      	movs	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006430:	4b30      	ldr	r3, [pc, #192]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006432:	430a      	orrs	r2, r1
 8006434:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	039b      	lsls	r3, r3, #14
 800643e:	4013      	ands	r3, r2
 8006440:	d016      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006442:	4b2c      	ldr	r3, [pc, #176]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	4a35      	ldr	r2, [pc, #212]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006448:	4013      	ands	r3, r2
 800644a:	0019      	movs	r1, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006450:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006452:	430a      	orrs	r2, r1
 8006454:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645a:	2380      	movs	r3, #128	; 0x80
 800645c:	03db      	lsls	r3, r3, #15
 800645e:	429a      	cmp	r2, r3
 8006460:	d106      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006462:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	4b23      	ldr	r3, [pc, #140]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006468:	2180      	movs	r1, #128	; 0x80
 800646a:	0449      	lsls	r1, r1, #17
 800646c:	430a      	orrs	r2, r1
 800646e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	03db      	lsls	r3, r3, #15
 8006478:	4013      	ands	r3, r2
 800647a:	d016      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006482:	4013      	ands	r3, r2
 8006484:	0019      	movs	r1, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800648c:	430a      	orrs	r2, r1
 800648e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	045b      	lsls	r3, r3, #17
 8006498:	429a      	cmp	r2, r3
 800649a:	d106      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800649c:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064a2:	2180      	movs	r1, #128	; 0x80
 80064a4:	0449      	lsls	r1, r1, #17
 80064a6:	430a      	orrs	r2, r1
 80064a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	4013      	ands	r3, r2
 80064b4:	d016      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80064bc:	4013      	ands	r3, r2
 80064be:	0019      	movs	r1, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064c6:	430a      	orrs	r2, r1
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	01db      	lsls	r3, r3, #7
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d106      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064dc:	2180      	movs	r1, #128	; 0x80
 80064de:	0249      	lsls	r1, r1, #9
 80064e0:	430a      	orrs	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80064e4:	2312      	movs	r3, #18
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	781b      	ldrb	r3, [r3, #0]
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b006      	add	sp, #24
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	40021000 	.word	0x40021000
 80064f8:	40007000 	.word	0x40007000
 80064fc:	fffffcff 	.word	0xfffffcff
 8006500:	fffeffff 	.word	0xfffeffff
 8006504:	00001388 	.word	0x00001388
 8006508:	efffffff 	.word	0xefffffff
 800650c:	fffff3ff 	.word	0xfffff3ff
 8006510:	fff3ffff 	.word	0xfff3ffff
 8006514:	ffcfffff 	.word	0xffcfffff
 8006518:	ffffcfff 	.word	0xffffcfff
 800651c:	ffbfffff 	.word	0xffbfffff
 8006520:	feffffff 	.word	0xfeffffff
 8006524:	ffff3fff 	.word	0xffff3fff

08006528 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006530:	230f      	movs	r3, #15
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d100      	bne.n	8006540 <HAL_RTC_Init+0x18>
 800653e:	e080      	b.n	8006642 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2229      	movs	r2, #41	; 0x29
 8006544:	5c9b      	ldrb	r3, [r3, r2]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2228      	movs	r2, #40	; 0x28
 8006550:	2100      	movs	r1, #0
 8006552:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2288      	movs	r2, #136	; 0x88
 8006558:	0212      	lsls	r2, r2, #8
 800655a:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0018      	movs	r0, r3
 8006560:	f005 ff56 	bl	800c410 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2229      	movs	r2, #41	; 0x29
 8006568:	2102      	movs	r1, #2
 800656a:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	22ca      	movs	r2, #202	; 0xca
 8006572:	625a      	str	r2, [r3, #36]	; 0x24
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2253      	movs	r2, #83	; 0x53
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800657c:	250f      	movs	r5, #15
 800657e:	197c      	adds	r4, r7, r5
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	0018      	movs	r0, r3
 8006584:	f000 fa71 	bl	8006a6a <RTC_EnterInitMode>
 8006588:	0003      	movs	r3, r0
 800658a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800658c:	0028      	movs	r0, r5
 800658e:	183b      	adds	r3, r7, r0
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d148      	bne.n	8006628 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	492b      	ldr	r1, [pc, #172]	; (8006650 <HAL_RTC_Init+0x128>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6999      	ldr	r1, [r3, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6912      	ldr	r2, [r2, #16]
 80065cc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6919      	ldr	r1, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	041a      	lsls	r2, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80065e2:	0005      	movs	r5, r0
 80065e4:	183c      	adds	r4, r7, r0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 fa81 	bl	8006af0 <RTC_ExitInitMode>
 80065ee:	0003      	movs	r3, r0
 80065f0:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80065f2:	197b      	adds	r3, r7, r5
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d116      	bne.n	8006628 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	00d2      	lsls	r2, r2, #3
 8006606:	08d2      	lsrs	r2, r2, #3
 8006608:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6999      	ldr	r1, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	22ff      	movs	r2, #255	; 0xff
 800662e:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006630:	230f      	movs	r3, #15
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2229      	movs	r2, #41	; 0x29
 800663e:	2101      	movs	r1, #1
 8006640:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006642:	230f      	movs	r3, #15
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	781b      	ldrb	r3, [r3, #0]
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b004      	add	sp, #16
 800664e:	bdb0      	pop	{r4, r5, r7, pc}
 8006650:	fb8fffbf 	.word	0xfb8fffbf

08006654 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006654:	b5b0      	push	{r4, r5, r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2228      	movs	r2, #40	; 0x28
 8006664:	5c9b      	ldrb	r3, [r3, r2]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_RTC_SetTime+0x1a>
 800666a:	2302      	movs	r3, #2
 800666c:	e092      	b.n	8006794 <HAL_RTC_SetTime+0x140>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2228      	movs	r2, #40	; 0x28
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2229      	movs	r2, #41	; 0x29
 800667a:	2102      	movs	r1, #2
 800667c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	22ca      	movs	r2, #202	; 0xca
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2253      	movs	r2, #83	; 0x53
 800668c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800668e:	2513      	movs	r5, #19
 8006690:	197c      	adds	r4, r7, r5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	0018      	movs	r0, r3
 8006696:	f000 f9e8 	bl	8006a6a <RTC_EnterInitMode>
 800669a:	0003      	movs	r3, r0
 800669c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800669e:	197b      	adds	r3, r7, r5
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d162      	bne.n	800676c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d125      	bne.n	80066f8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	2240      	movs	r2, #64	; 0x40
 80066b4:	4013      	ands	r3, r2
 80066b6:	d102      	bne.n	80066be <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2200      	movs	r2, #0
 80066bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 fa58 	bl	8006b78 <RTC_ByteToBcd2>
 80066c8:	0003      	movs	r3, r0
 80066ca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fa51 	bl	8006b78 <RTC_ByteToBcd2>
 80066d6:	0003      	movs	r3, r0
 80066d8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066da:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	789b      	ldrb	r3, [r3, #2]
 80066e0:	0018      	movs	r0, r3
 80066e2:	f000 fa49 	bl	8006b78 <RTC_ByteToBcd2>
 80066e6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066e8:	0022      	movs	r2, r4
 80066ea:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	78db      	ldrb	r3, [r3, #3]
 80066f0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e017      	b.n	8006728 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2240      	movs	r2, #64	; 0x40
 8006700:	4013      	ands	r3, r2
 8006702:	d102      	bne.n	800670a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006716:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800671c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	78db      	ldrb	r3, [r3, #3]
 8006722:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	491b      	ldr	r1, [pc, #108]	; (800679c <HAL_RTC_SetTime+0x148>)
 8006730:	400a      	ands	r2, r1
 8006732:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4918      	ldr	r1, [pc, #96]	; (80067a0 <HAL_RTC_SetTime+0x14c>)
 8006740:	400a      	ands	r2, r1
 8006742:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	431a      	orrs	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800675c:	2313      	movs	r3, #19
 800675e:	18fc      	adds	r4, r7, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	0018      	movs	r0, r3
 8006764:	f000 f9c4 	bl	8006af0 <RTC_ExitInitMode>
 8006768:	0003      	movs	r3, r0
 800676a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	22ff      	movs	r2, #255	; 0xff
 8006772:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8006774:	2313      	movs	r3, #19
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2229      	movs	r2, #41	; 0x29
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2228      	movs	r2, #40	; 0x28
 800678a:	2100      	movs	r1, #0
 800678c:	5499      	strb	r1, [r3, r2]

  return status;
 800678e:	2313      	movs	r3, #19
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	781b      	ldrb	r3, [r3, #0]
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b006      	add	sp, #24
 800679a:	bdb0      	pop	{r4, r5, r7, pc}
 800679c:	007f7f7f 	.word	0x007f7f7f
 80067a0:	fffbffff 	.word	0xfffbffff

080067a4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	045b      	lsls	r3, r3, #17
 80067c2:	0c5a      	lsrs	r2, r3, #17
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a22      	ldr	r2, [pc, #136]	; (8006858 <HAL_RTC_GetTime+0xb4>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	0c1b      	lsrs	r3, r3, #16
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	223f      	movs	r2, #63	; 0x3f
 80067dc:	4013      	ands	r3, r2
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	0a1b      	lsrs	r3, r3, #8
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	227f      	movs	r2, #127	; 0x7f
 80067ec:	4013      	ands	r3, r2
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	227f      	movs	r2, #127	; 0x7f
 80067fa:	4013      	ands	r3, r2
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	0d9b      	lsrs	r3, r3, #22
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2201      	movs	r2, #1
 800680a:	4013      	ands	r3, r2
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11a      	bne.n	800684e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f9d3 	bl	8006bc8 <RTC_Bcd2ToByte>
 8006822:	0003      	movs	r3, r0
 8006824:	001a      	movs	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	0018      	movs	r0, r3
 8006830:	f000 f9ca 	bl	8006bc8 <RTC_Bcd2ToByte>
 8006834:	0003      	movs	r3, r0
 8006836:	001a      	movs	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	789b      	ldrb	r3, [r3, #2]
 8006840:	0018      	movs	r0, r3
 8006842:	f000 f9c1 	bl	8006bc8 <RTC_Bcd2ToByte>
 8006846:	0003      	movs	r3, r0
 8006848:	001a      	movs	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	0018      	movs	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	b006      	add	sp, #24
 8006856:	bd80      	pop	{r7, pc}
 8006858:	007f7f7f 	.word	0x007f7f7f

0800685c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2228      	movs	r2, #40	; 0x28
 800686c:	5c9b      	ldrb	r3, [r3, r2]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_RTC_SetDate+0x1a>
 8006872:	2302      	movs	r3, #2
 8006874:	e07e      	b.n	8006974 <HAL_RTC_SetDate+0x118>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2228      	movs	r2, #40	; 0x28
 800687a:	2101      	movs	r1, #1
 800687c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2229      	movs	r2, #41	; 0x29
 8006882:	2102      	movs	r1, #2
 8006884:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10e      	bne.n	80068aa <HAL_RTC_SetDate+0x4e>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	001a      	movs	r2, r3
 8006892:	2310      	movs	r3, #16
 8006894:	4013      	ands	r3, r2
 8006896:	d008      	beq.n	80068aa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2210      	movs	r2, #16
 800689e:	4393      	bics	r3, r2
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	330a      	adds	r3, #10
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11c      	bne.n	80068ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	78db      	ldrb	r3, [r3, #3]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f95f 	bl	8006b78 <RTC_ByteToBcd2>
 80068ba:	0003      	movs	r3, r0
 80068bc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 f958 	bl	8006b78 <RTC_ByteToBcd2>
 80068c8:	0003      	movs	r3, r0
 80068ca:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068cc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	789b      	ldrb	r3, [r3, #2]
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 f950 	bl	8006b78 <RTC_ByteToBcd2>
 80068d8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068da:	0022      	movs	r2, r4
 80068dc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e00e      	b.n	8006908 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80068f6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80068fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	22ca      	movs	r2, #202	; 0xca
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2253      	movs	r2, #83	; 0x53
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006918:	2513      	movs	r5, #19
 800691a:	197c      	adds	r4, r7, r5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	0018      	movs	r0, r3
 8006920:	f000 f8a3 	bl	8006a6a <RTC_EnterInitMode>
 8006924:	0003      	movs	r3, r0
 8006926:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006928:	0028      	movs	r0, r5
 800692a:	183b      	adds	r3, r7, r0
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10c      	bne.n	800694c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4910      	ldr	r1, [pc, #64]	; (800697c <HAL_RTC_SetDate+0x120>)
 800693a:	400a      	ands	r2, r1
 800693c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800693e:	183c      	adds	r4, r7, r0
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0018      	movs	r0, r3
 8006944:	f000 f8d4 	bl	8006af0 <RTC_ExitInitMode>
 8006948:	0003      	movs	r3, r0
 800694a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	22ff      	movs	r2, #255	; 0xff
 8006952:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006954:	2313      	movs	r3, #19
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2229      	movs	r2, #41	; 0x29
 8006962:	2101      	movs	r1, #1
 8006964:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2228      	movs	r2, #40	; 0x28
 800696a:	2100      	movs	r1, #0
 800696c:	5499      	strb	r1, [r3, r2]

  return status;
 800696e:	2313      	movs	r3, #19
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	781b      	ldrb	r3, [r3, #0]
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b006      	add	sp, #24
 800697a:	bdb0      	pop	{r4, r5, r7, pc}
 800697c:	00ffff3f 	.word	0x00ffff3f

08006980 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <HAL_RTC_GetDate+0x98>)
 8006994:	4013      	ands	r3, r2
 8006996:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	b2da      	uxtb	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	221f      	movs	r2, #31
 80069aa:	4013      	ands	r3, r2
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	223f      	movs	r2, #63	; 0x3f
 80069b8:	4013      	ands	r3, r2
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	0b5b      	lsrs	r3, r3, #13
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2207      	movs	r2, #7
 80069c8:	4013      	ands	r3, r2
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11a      	bne.n	8006a0c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	78db      	ldrb	r3, [r3, #3]
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 f8f4 	bl	8006bc8 <RTC_Bcd2ToByte>
 80069e0:	0003      	movs	r3, r0
 80069e2:	001a      	movs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 f8eb 	bl	8006bc8 <RTC_Bcd2ToByte>
 80069f2:	0003      	movs	r3, r0
 80069f4:	001a      	movs	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	789b      	ldrb	r3, [r3, #2]
 80069fe:	0018      	movs	r0, r3
 8006a00:	f000 f8e2 	bl	8006bc8 <RTC_Bcd2ToByte>
 8006a04:	0003      	movs	r3, r0
 8006a06:	001a      	movs	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	0018      	movs	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b006      	add	sp, #24
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	00ffff3f 	.word	0x00ffff3f

08006a1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	21a0      	movs	r1, #160	; 0xa0
 8006a30:	438a      	bics	r2, r1
 8006a32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a34:	f7fc fe2a 	bl	800368c <HAL_GetTick>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a3e:	f7fc fe25 	bl	800368c <HAL_GetTick>
 8006a42:	0002      	movs	r2, r0
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	23fa      	movs	r3, #250	; 0xfa
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d901      	bls.n	8006a54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e006      	b.n	8006a62 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d0ee      	beq.n	8006a3e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	0018      	movs	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b004      	add	sp, #16
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006a72:	230f      	movs	r3, #15
 8006a74:	18fb      	adds	r3, r7, r3
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	2240      	movs	r2, #64	; 0x40
 8006a82:	4013      	ands	r3, r2
 8006a84:	d12c      	bne.n	8006ae0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2180      	movs	r1, #128	; 0x80
 8006a92:	430a      	orrs	r2, r1
 8006a94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a96:	f7fc fdf9 	bl	800368c <HAL_GetTick>
 8006a9a:	0003      	movs	r3, r0
 8006a9c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a9e:	e014      	b.n	8006aca <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006aa0:	f7fc fdf4 	bl	800368c <HAL_GetTick>
 8006aa4:	0002      	movs	r2, r0
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	1ad2      	subs	r2, r2, r3
 8006aaa:	200f      	movs	r0, #15
 8006aac:	183b      	adds	r3, r7, r0
 8006aae:	1839      	adds	r1, r7, r0
 8006ab0:	7809      	ldrb	r1, [r1, #0]
 8006ab2:	7019      	strb	r1, [r3, #0]
 8006ab4:	23fa      	movs	r3, #250	; 0xfa
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d906      	bls.n	8006aca <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006abc:	183b      	adds	r3, r7, r0
 8006abe:	2203      	movs	r2, #3
 8006ac0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2229      	movs	r2, #41	; 0x29
 8006ac6:	2103      	movs	r1, #3
 8006ac8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2240      	movs	r2, #64	; 0x40
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d104      	bne.n	8006ae0 <RTC_EnterInitMode+0x76>
 8006ad6:	230f      	movs	r3, #15
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d1df      	bne.n	8006aa0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006ae0:	230f      	movs	r3, #15
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	781b      	ldrb	r3, [r3, #0]
}
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b004      	add	sp, #16
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006af0:	b590      	push	{r4, r7, lr}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	240f      	movs	r4, #15
 8006afa:	193b      	adds	r3, r7, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b00:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	4b1b      	ldr	r3, [pc, #108]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b06:	2180      	movs	r1, #128	; 0x80
 8006b08:	438a      	bics	r2, r1
 8006b0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b0c:	4b19      	ldr	r3, [pc, #100]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2220      	movs	r2, #32
 8006b12:	4013      	ands	r3, r2
 8006b14:	d10d      	bne.n	8006b32 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7ff ff7f 	bl	8006a1c <HAL_RTC_WaitForSynchro>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d021      	beq.n	8006b66 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2229      	movs	r2, #41	; 0x29
 8006b26:	2103      	movs	r1, #3
 8006b28:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b2a:	193b      	adds	r3, r7, r4
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e019      	b.n	8006b66 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b32:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b38:	2120      	movs	r1, #32
 8006b3a:	438a      	bics	r2, r1
 8006b3c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f7ff ff6b 	bl	8006a1c <HAL_RTC_WaitForSynchro>
 8006b46:	1e03      	subs	r3, r0, #0
 8006b48:	d007      	beq.n	8006b5a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2229      	movs	r2, #41	; 0x29
 8006b4e:	2103      	movs	r1, #3
 8006b50:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b52:	230f      	movs	r3, #15
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	2203      	movs	r2, #3
 8006b58:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b5a:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <RTC_ExitInitMode+0x84>)
 8006b60:	2120      	movs	r1, #32
 8006b62:	430a      	orrs	r2, r1
 8006b64:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006b66:	230f      	movs	r3, #15
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	781b      	ldrb	r3, [r3, #0]
}
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b005      	add	sp, #20
 8006b72:	bd90      	pop	{r4, r7, pc}
 8006b74:	40002800 	.word	0x40002800

08006b78 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	0002      	movs	r2, r0
 8006b80:	1dfb      	adds	r3, r7, #7
 8006b82:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006b88:	230b      	movs	r3, #11
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	1dfa      	adds	r2, r7, #7
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006b92:	e008      	b.n	8006ba6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006b9a:	220b      	movs	r2, #11
 8006b9c:	18bb      	adds	r3, r7, r2
 8006b9e:	18ba      	adds	r2, r7, r2
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	3a0a      	subs	r2, #10
 8006ba4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006ba6:	210b      	movs	r1, #11
 8006ba8:	187b      	adds	r3, r7, r1
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	d8f1      	bhi.n	8006b94 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	b2db      	uxtb	r3, r3
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b004      	add	sp, #16
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	0002      	movs	r2, r0
 8006bd0:	1dfb      	adds	r3, r7, #7
 8006bd2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006bd4:	1dfb      	adds	r3, r7, #7
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	001a      	movs	r2, r3
 8006bde:	0013      	movs	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	189b      	adds	r3, r3, r2
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	1dfb      	adds	r3, r7, #7
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	210f      	movs	r1, #15
 8006bf2:	400b      	ands	r3, r1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	18d3      	adds	r3, r2, r3
 8006bf8:	b2db      	uxtb	r3, r3
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b004      	add	sp, #16
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e04a      	b.n	8006caa <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	223d      	movs	r2, #61	; 0x3d
 8006c18:	5c9b      	ldrb	r3, [r3, r2]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	223c      	movs	r2, #60	; 0x3c
 8006c24:	2100      	movs	r1, #0
 8006c26:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f005 fc2e 	bl	800c48c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	223d      	movs	r2, #61	; 0x3d
 8006c34:	2102      	movs	r1, #2
 8006c36:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	0019      	movs	r1, r3
 8006c42:	0010      	movs	r0, r2
 8006c44:	f000 fade 	bl	8007204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2248      	movs	r2, #72	; 0x48
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	223e      	movs	r2, #62	; 0x3e
 8006c54:	2101      	movs	r1, #1
 8006c56:	5499      	strb	r1, [r3, r2]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	223f      	movs	r2, #63	; 0x3f
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	5499      	strb	r1, [r3, r2]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	2101      	movs	r1, #1
 8006c66:	5499      	strb	r1, [r3, r2]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2241      	movs	r2, #65	; 0x41
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	5499      	strb	r1, [r3, r2]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2242      	movs	r2, #66	; 0x42
 8006c74:	2101      	movs	r1, #1
 8006c76:	5499      	strb	r1, [r3, r2]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2243      	movs	r2, #67	; 0x43
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2244      	movs	r2, #68	; 0x44
 8006c84:	2101      	movs	r1, #1
 8006c86:	5499      	strb	r1, [r3, r2]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2245      	movs	r2, #69	; 0x45
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	5499      	strb	r1, [r3, r2]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2246      	movs	r2, #70	; 0x46
 8006c94:	2101      	movs	r1, #1
 8006c96:	5499      	strb	r1, [r3, r2]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2247      	movs	r2, #71	; 0x47
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	223d      	movs	r2, #61	; 0x3d
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b002      	add	sp, #8
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	223d      	movs	r2, #61	; 0x3d
 8006cc0:	5c9b      	ldrb	r3, [r3, r2]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d001      	beq.n	8006ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e042      	b.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	223d      	movs	r2, #61	; 0x3d
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2101      	movs	r1, #1
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <HAL_TIM_Base_Start_IT+0xa8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00f      	beq.n	8006d0e <HAL_TIM_Base_Start_IT+0x5a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	2380      	movs	r3, #128	; 0x80
 8006cf4:	05db      	lsls	r3, r3, #23
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d009      	beq.n	8006d0e <HAL_TIM_Base_Start_IT+0x5a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <HAL_TIM_Base_Start_IT+0xac>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_TIM_Base_Start_IT+0x5a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d116      	bne.n	8006d3c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <HAL_TIM_Base_Start_IT+0xb4>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b06      	cmp	r3, #6
 8006d1e:	d016      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x9a>
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	2380      	movs	r3, #128	; 0x80
 8006d24:	025b      	lsls	r3, r3, #9
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d011      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2101      	movs	r1, #1
 8006d36:	430a      	orrs	r2, r1
 8006d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	e008      	b.n	8006d4e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2101      	movs	r1, #1
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e000      	b.n	8006d50 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b004      	add	sp, #16
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	40012c00 	.word	0x40012c00
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40014000 	.word	0x40014000
 8006d68:	00010007 	.word	0x00010007

08006d6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	438a      	bics	r2, r1
 8006d82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	4a0d      	ldr	r2, [pc, #52]	; (8006dc0 <HAL_TIM_Base_Stop_IT+0x54>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d10d      	bne.n	8006dac <HAL_TIM_Base_Stop_IT+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	4a0b      	ldr	r2, [pc, #44]	; (8006dc4 <HAL_TIM_Base_Stop_IT+0x58>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d107      	bne.n	8006dac <HAL_TIM_Base_Stop_IT+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2101      	movs	r1, #1
 8006da8:	438a      	bics	r2, r1
 8006daa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	223d      	movs	r2, #61	; 0x3d
 8006db0:	2101      	movs	r1, #1
 8006db2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	0018      	movs	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	b002      	add	sp, #8
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	00001111 	.word	0x00001111
 8006dc4:	00000444 	.word	0x00000444

08006dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d124      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2202      	movs	r2, #2
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d11d      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2203      	movs	r2, #3
 8006df2:	4252      	negs	r2, r2
 8006df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2203      	movs	r2, #3
 8006e04:	4013      	ands	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f000 f9e2 	bl	80071d4 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e007      	b.n	8006e22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f000 f9d5 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 f9e1 	bl	80071e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d125      	bne.n	8006e82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d11e      	bne.n	8006e82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2205      	movs	r2, #5
 8006e4a:	4252      	negs	r2, r2
 8006e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	23c0      	movs	r3, #192	; 0xc0
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 f9b5 	bl	80071d4 <HAL_TIM_IC_CaptureCallback>
 8006e6a:	e007      	b.n	8006e7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f000 f9a8 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	0018      	movs	r0, r3
 8006e78:	f000 f9b4 	bl	80071e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d124      	bne.n	8006eda <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2208      	movs	r2, #8
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d11d      	bne.n	8006eda <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2209      	movs	r2, #9
 8006ea4:	4252      	negs	r2, r2
 8006ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f989 	bl	80071d4 <HAL_TIM_IC_CaptureCallback>
 8006ec2:	e007      	b.n	8006ed4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 f97c 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f000 f988 	bl	80071e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b10      	cmp	r3, #16
 8006ee6:	d125      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d11e      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2211      	movs	r2, #17
 8006efc:	4252      	negs	r2, r2
 8006efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2208      	movs	r2, #8
 8006f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	23c0      	movs	r3, #192	; 0xc0
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4013      	ands	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f95c 	bl	80071d4 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e007      	b.n	8006f2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 f94f 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f000 f95b 	bl	80071e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d10f      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d108      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2202      	movs	r2, #2
 8006f56:	4252      	negs	r2, r2
 8006f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f003 f961 	bl	800a224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2280      	movs	r2, #128	; 0x80
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d10f      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2280      	movs	r2, #128	; 0x80
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2b80      	cmp	r3, #128	; 0x80
 8006f7c:	d108      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2281      	movs	r2, #129	; 0x81
 8006f84:	4252      	negs	r2, r2
 8006f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f000 facc 	bl	8007528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	2380      	movs	r3, #128	; 0x80
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d10e      	bne.n	8006fc2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d107      	bne.n	8006fc2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <HAL_TIM_IRQHandler+0x260>)
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 fabb 	bl	8007538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2240      	movs	r2, #64	; 0x40
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d10f      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	2240      	movs	r2, #64	; 0x40
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d108      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2241      	movs	r2, #65	; 0x41
 8006fe4:	4252      	negs	r2, r2
 8006fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	0018      	movs	r0, r3
 8006fec:	f000 f902 	bl	80071f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d10f      	bne.n	800701e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	4013      	ands	r3, r2
 8007008:	2b20      	cmp	r3, #32
 800700a:	d108      	bne.n	800701e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2221      	movs	r2, #33	; 0x21
 8007012:	4252      	negs	r2, r2
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f000 fa7d 	bl	8007518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	b002      	add	sp, #8
 8007024:	bd80      	pop	{r7, pc}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	fffffeff 	.word	0xfffffeff

0800702c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	223c      	movs	r2, #60	; 0x3c
 800703a:	5c9b      	ldrb	r3, [r3, r2]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_TIM_ConfigClockSource+0x18>
 8007040:	2302      	movs	r3, #2
 8007042:	e0b7      	b.n	80071b4 <HAL_TIM_ConfigClockSource+0x188>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	223c      	movs	r2, #60	; 0x3c
 8007048:	2101      	movs	r1, #1
 800704a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	223d      	movs	r2, #61	; 0x3d
 8007050:	2102      	movs	r1, #2
 8007052:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a57      	ldr	r2, [pc, #348]	; (80071bc <HAL_TIM_ConfigClockSource+0x190>)
 8007060:	4013      	ands	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a56      	ldr	r2, [pc, #344]	; (80071c0 <HAL_TIM_ConfigClockSource+0x194>)
 8007068:	4013      	ands	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2280      	movs	r2, #128	; 0x80
 800707a:	0192      	lsls	r2, r2, #6
 800707c:	4293      	cmp	r3, r2
 800707e:	d040      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0xd6>
 8007080:	2280      	movs	r2, #128	; 0x80
 8007082:	0192      	lsls	r2, r2, #6
 8007084:	4293      	cmp	r3, r2
 8007086:	d900      	bls.n	800708a <HAL_TIM_ConfigClockSource+0x5e>
 8007088:	e088      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 800708a:	2280      	movs	r2, #128	; 0x80
 800708c:	0152      	lsls	r2, r2, #5
 800708e:	4293      	cmp	r3, r2
 8007090:	d100      	bne.n	8007094 <HAL_TIM_ConfigClockSource+0x68>
 8007092:	e085      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x174>
 8007094:	2280      	movs	r2, #128	; 0x80
 8007096:	0152      	lsls	r2, r2, #5
 8007098:	4293      	cmp	r3, r2
 800709a:	d900      	bls.n	800709e <HAL_TIM_ConfigClockSource+0x72>
 800709c:	e07e      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 800709e:	2b70      	cmp	r3, #112	; 0x70
 80070a0:	d018      	beq.n	80070d4 <HAL_TIM_ConfigClockSource+0xa8>
 80070a2:	d900      	bls.n	80070a6 <HAL_TIM_ConfigClockSource+0x7a>
 80070a4:	e07a      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 80070a6:	2b60      	cmp	r3, #96	; 0x60
 80070a8:	d04f      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x11e>
 80070aa:	d900      	bls.n	80070ae <HAL_TIM_ConfigClockSource+0x82>
 80070ac:	e076      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 80070ae:	2b50      	cmp	r3, #80	; 0x50
 80070b0:	d03b      	beq.n	800712a <HAL_TIM_ConfigClockSource+0xfe>
 80070b2:	d900      	bls.n	80070b6 <HAL_TIM_ConfigClockSource+0x8a>
 80070b4:	e072      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d057      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x13e>
 80070ba:	d900      	bls.n	80070be <HAL_TIM_ConfigClockSource+0x92>
 80070bc:	e06e      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 80070be:	2b30      	cmp	r3, #48	; 0x30
 80070c0:	d063      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x15e>
 80070c2:	d86b      	bhi.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d060      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x15e>
 80070c8:	d868      	bhi.n	800719c <HAL_TIM_ConfigClockSource+0x170>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d05d      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x15e>
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d05b      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80070d2:	e063      	b.n	800719c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	6899      	ldr	r1, [r3, #8]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f000 f98a 	bl	80073fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2277      	movs	r2, #119	; 0x77
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	609a      	str	r2, [r3, #8]
      break;
 8007100:	e04f      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6899      	ldr	r1, [r3, #8]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f000 f973 	bl	80073fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	01c9      	lsls	r1, r1, #7
 8007124:	430a      	orrs	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
      break;
 8007128:	e03b      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6859      	ldr	r1, [r3, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	001a      	movs	r2, r3
 8007138:	f000 f8e4 	bl	8007304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2150      	movs	r1, #80	; 0x50
 8007142:	0018      	movs	r0, r3
 8007144:	f000 f93e 	bl	80073c4 <TIM_ITRx_SetConfig>
      break;
 8007148:	e02b      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6859      	ldr	r1, [r3, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	001a      	movs	r2, r3
 8007158:	f000 f902 	bl	8007360 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2160      	movs	r1, #96	; 0x60
 8007162:	0018      	movs	r0, r3
 8007164:	f000 f92e 	bl	80073c4 <TIM_ITRx_SetConfig>
      break;
 8007168:	e01b      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6859      	ldr	r1, [r3, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	001a      	movs	r2, r3
 8007178:	f000 f8c4 	bl	8007304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2140      	movs	r1, #64	; 0x40
 8007182:	0018      	movs	r0, r3
 8007184:	f000 f91e 	bl	80073c4 <TIM_ITRx_SetConfig>
      break;
 8007188:	e00b      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	0019      	movs	r1, r3
 8007194:	0010      	movs	r0, r2
 8007196:	f000 f915 	bl	80073c4 <TIM_ITRx_SetConfig>
        break;
 800719a:	e002      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	e000      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80071a0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	223d      	movs	r2, #61	; 0x3d
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	223c      	movs	r2, #60	; 0x3c
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	0018      	movs	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	b004      	add	sp, #16
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	ffceff88 	.word	0xffceff88
 80071c0:	ffff00ff 	.word	0xffff00ff

080071c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b002      	add	sp, #8
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b002      	add	sp, #8
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ec:	46c0      	nop			; (mov r8, r8)
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b002      	add	sp, #8
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071fc:	46c0      	nop			; (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b002      	add	sp, #8
 8007202:	bd80      	pop	{r7, pc}

08007204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a34      	ldr	r2, [pc, #208]	; (80072e8 <TIM_Base_SetConfig+0xe4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d008      	beq.n	800722e <TIM_Base_SetConfig+0x2a>
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	2380      	movs	r3, #128	; 0x80
 8007220:	05db      	lsls	r3, r3, #23
 8007222:	429a      	cmp	r2, r3
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0x2a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a30      	ldr	r2, [pc, #192]	; (80072ec <TIM_Base_SetConfig+0xe8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2270      	movs	r2, #112	; 0x70
 8007232:	4393      	bics	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a29      	ldr	r2, [pc, #164]	; (80072e8 <TIM_Base_SetConfig+0xe4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d018      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	05db      	lsls	r3, r3, #23
 800724e:	429a      	cmp	r2, r3
 8007250:	d013      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a25      	ldr	r2, [pc, #148]	; (80072ec <TIM_Base_SetConfig+0xe8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <TIM_Base_SetConfig+0xec>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <TIM_Base_SetConfig+0xf0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <TIM_Base_SetConfig+0xf4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a21      	ldr	r2, [pc, #132]	; (80072fc <TIM_Base_SetConfig+0xf8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a20      	ldr	r2, [pc, #128]	; (8007300 <TIM_Base_SetConfig+0xfc>)
 800727e:	4013      	ands	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2280      	movs	r2, #128	; 0x80
 8007290:	4393      	bics	r3, r2
 8007292:	001a      	movs	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <TIM_Base_SetConfig+0xe4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00b      	beq.n	80072d2 <TIM_Base_SetConfig+0xce>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a0d      	ldr	r2, [pc, #52]	; (80072f4 <TIM_Base_SetConfig+0xf0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d007      	beq.n	80072d2 <TIM_Base_SetConfig+0xce>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <TIM_Base_SetConfig+0xf4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d003      	beq.n	80072d2 <TIM_Base_SetConfig+0xce>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <TIM_Base_SetConfig+0xf8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d103      	bne.n	80072da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	615a      	str	r2, [r3, #20]
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b004      	add	sp, #16
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40002000 	.word	0x40002000
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800
 8007300:	fffffcff 	.word	0xfffffcff

08007304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	2201      	movs	r2, #1
 800731c:	4393      	bics	r3, r2
 800731e:	001a      	movs	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	22f0      	movs	r2, #240	; 0xf0
 800732e:	4393      	bics	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	220a      	movs	r2, #10
 8007340:	4393      	bics	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	621a      	str	r2, [r3, #32]
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	46bd      	mov	sp, r7
 800735c:	b006      	add	sp, #24
 800735e:	bd80      	pop	{r7, pc}

08007360 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	2210      	movs	r2, #16
 8007372:	4393      	bics	r3, r2
 8007374:	001a      	movs	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	4a0d      	ldr	r2, [pc, #52]	; (80073c0 <TIM_TI2_ConfigInputStage+0x60>)
 800738a:	4013      	ands	r3, r2
 800738c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	031b      	lsls	r3, r3, #12
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	22a0      	movs	r2, #160	; 0xa0
 800739c:	4393      	bics	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b006      	add	sp, #24
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	ffff0fff 	.word	0xffff0fff

080073c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <TIM_ITRx_SetConfig+0x34>)
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	2207      	movs	r2, #7
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	609a      	str	r2, [r3, #8]
}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b004      	add	sp, #16
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	ffcfff8f 	.word	0xffcfff8f

080073fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	4a09      	ldr	r2, [pc, #36]	; (8007438 <TIM_ETR_SetConfig+0x3c>)
 8007414:	4013      	ands	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	021a      	lsls	r2, r3, #8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	431a      	orrs	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4313      	orrs	r3, r2
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	609a      	str	r2, [r3, #8]
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46bd      	mov	sp, r7
 8007434:	b006      	add	sp, #24
 8007436:	bd80      	pop	{r7, pc}
 8007438:	ffff00ff 	.word	0xffff00ff

0800743c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	223c      	movs	r2, #60	; 0x3c
 800744a:	5c9b      	ldrb	r3, [r3, r2]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007450:	2302      	movs	r3, #2
 8007452:	e055      	b.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	223c      	movs	r2, #60	; 0x3c
 8007458:	2101      	movs	r1, #1
 800745a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	223d      	movs	r2, #61	; 0x3d
 8007460:	2102      	movs	r1, #2
 8007462:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a23      	ldr	r2, [pc, #140]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d108      	bne.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4a22      	ldr	r2, [pc, #136]	; (800750c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007482:	4013      	ands	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2270      	movs	r2, #112	; 0x70
 8007494:	4393      	bics	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a16      	ldr	r2, [pc, #88]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00f      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	05db      	lsls	r3, r3, #23
 80074bc:	429a      	cmp	r2, r3
 80074be:	d009      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a12      	ldr	r2, [pc, #72]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d004      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a11      	ldr	r2, [pc, #68]	; (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d10c      	bne.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2280      	movs	r2, #128	; 0x80
 80074d8:	4393      	bics	r3, r2
 80074da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	223d      	movs	r2, #61	; 0x3d
 80074f2:	2101      	movs	r1, #1
 80074f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	223c      	movs	r2, #60	; 0x3c
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	0018      	movs	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	b004      	add	sp, #16
 8007506:	bd80      	pop	{r7, pc}
 8007508:	40012c00 	.word	0x40012c00
 800750c:	ff0fffff 	.word	0xff0fffff
 8007510:	40000400 	.word	0x40000400
 8007514:	40014000 	.word	0x40014000

08007518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	b002      	add	sp, #8
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e046      	b.n	80075e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2284      	movs	r2, #132	; 0x84
 800755e:	589b      	ldr	r3, [r3, r2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d107      	bne.n	8007574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2280      	movs	r2, #128	; 0x80
 8007568:	2100      	movs	r1, #0
 800756a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	0018      	movs	r0, r3
 8007570:	f005 f80a 	bl	800c588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2284      	movs	r2, #132	; 0x84
 8007578:	2124      	movs	r1, #36	; 0x24
 800757a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2101      	movs	r1, #1
 8007588:	438a      	bics	r2, r1
 800758a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	0018      	movs	r0, r3
 8007590:	f000 f830 	bl	80075f4 <UART_SetConfig>
 8007594:	0003      	movs	r3, r0
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e024      	b.n	80075e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 fb01 	bl	8007bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	490d      	ldr	r1, [pc, #52]	; (80075f0 <HAL_UART_Init+0xa8>)
 80075ba:	400a      	ands	r2, r1
 80075bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	212a      	movs	r1, #42	; 0x2a
 80075ca:	438a      	bics	r2, r1
 80075cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2101      	movs	r1, #1
 80075da:	430a      	orrs	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 fb99 	bl	8007d18 <UART_CheckIdleState>
 80075e6:	0003      	movs	r3, r0
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b002      	add	sp, #8
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	ffffb7ff 	.word	0xffffb7ff

080075f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f4:	b5b0      	push	{r4, r5, r7, lr}
 80075f6:	b090      	sub	sp, #64	; 0x40
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075fc:	231a      	movs	r3, #26
 80075fe:	2220      	movs	r2, #32
 8007600:	4694      	mov	ip, r2
 8007602:	44bc      	add	ip, r7
 8007604:	4463      	add	r3, ip
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	431a      	orrs	r2, r3
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	431a      	orrs	r2, r3
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	4313      	orrs	r3, r2
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4ab9      	ldr	r2, [pc, #740]	; (8007910 <UART_SetConfig+0x31c>)
 800762a:	4013      	ands	r3, r2
 800762c:	0019      	movs	r1, r3
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007634:	430b      	orrs	r3, r1
 8007636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	4ab5      	ldr	r2, [pc, #724]	; (8007914 <UART_SetConfig+0x320>)
 8007640:	4013      	ands	r3, r2
 8007642:	0018      	movs	r0, r3
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	68d9      	ldr	r1, [r3, #12]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	0003      	movs	r3, r0
 800764e:	430b      	orrs	r3, r1
 8007650:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4aae      	ldr	r2, [pc, #696]	; (8007918 <UART_SetConfig+0x324>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007668:	4313      	orrs	r3, r2
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	4aaa      	ldr	r2, [pc, #680]	; (800791c <UART_SetConfig+0x328>)
 8007674:	4013      	ands	r3, r2
 8007676:	0019      	movs	r1, r3
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767e:	430b      	orrs	r3, r1
 8007680:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	220f      	movs	r2, #15
 800768a:	4393      	bics	r3, r2
 800768c:	0018      	movs	r0, r3
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	0003      	movs	r3, r0
 8007698:	430b      	orrs	r3, r1
 800769a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a9f      	ldr	r2, [pc, #636]	; (8007920 <UART_SetConfig+0x32c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d136      	bne.n	8007714 <UART_SetConfig+0x120>
 80076a6:	4b9f      	ldr	r3, [pc, #636]	; (8007924 <UART_SetConfig+0x330>)
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	2203      	movs	r2, #3
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d020      	beq.n	80076f4 <UART_SetConfig+0x100>
 80076b2:	d827      	bhi.n	8007704 <UART_SetConfig+0x110>
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d00d      	beq.n	80076d4 <UART_SetConfig+0xe0>
 80076b8:	d824      	bhi.n	8007704 <UART_SetConfig+0x110>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <UART_SetConfig+0xd0>
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d010      	beq.n	80076e4 <UART_SetConfig+0xf0>
 80076c2:	e01f      	b.n	8007704 <UART_SetConfig+0x110>
 80076c4:	231b      	movs	r3, #27
 80076c6:	2220      	movs	r2, #32
 80076c8:	4694      	mov	ip, r2
 80076ca:	44bc      	add	ip, r7
 80076cc:	4463      	add	r3, ip
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	e0c5      	b.n	8007860 <UART_SetConfig+0x26c>
 80076d4:	231b      	movs	r3, #27
 80076d6:	2220      	movs	r2, #32
 80076d8:	4694      	mov	ip, r2
 80076da:	44bc      	add	ip, r7
 80076dc:	4463      	add	r3, ip
 80076de:	2202      	movs	r2, #2
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	e0bd      	b.n	8007860 <UART_SetConfig+0x26c>
 80076e4:	231b      	movs	r3, #27
 80076e6:	2220      	movs	r2, #32
 80076e8:	4694      	mov	ip, r2
 80076ea:	44bc      	add	ip, r7
 80076ec:	4463      	add	r3, ip
 80076ee:	2204      	movs	r2, #4
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e0b5      	b.n	8007860 <UART_SetConfig+0x26c>
 80076f4:	231b      	movs	r3, #27
 80076f6:	2220      	movs	r2, #32
 80076f8:	4694      	mov	ip, r2
 80076fa:	44bc      	add	ip, r7
 80076fc:	4463      	add	r3, ip
 80076fe:	2208      	movs	r2, #8
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	e0ad      	b.n	8007860 <UART_SetConfig+0x26c>
 8007704:	231b      	movs	r3, #27
 8007706:	2220      	movs	r2, #32
 8007708:	4694      	mov	ip, r2
 800770a:	44bc      	add	ip, r7
 800770c:	4463      	add	r3, ip
 800770e:	2210      	movs	r2, #16
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e0a5      	b.n	8007860 <UART_SetConfig+0x26c>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a83      	ldr	r2, [pc, #524]	; (8007928 <UART_SetConfig+0x334>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d136      	bne.n	800778c <UART_SetConfig+0x198>
 800771e:	4b81      	ldr	r3, [pc, #516]	; (8007924 <UART_SetConfig+0x330>)
 8007720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007722:	220c      	movs	r2, #12
 8007724:	4013      	ands	r3, r2
 8007726:	2b0c      	cmp	r3, #12
 8007728:	d020      	beq.n	800776c <UART_SetConfig+0x178>
 800772a:	d827      	bhi.n	800777c <UART_SetConfig+0x188>
 800772c:	2b08      	cmp	r3, #8
 800772e:	d00d      	beq.n	800774c <UART_SetConfig+0x158>
 8007730:	d824      	bhi.n	800777c <UART_SetConfig+0x188>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <UART_SetConfig+0x148>
 8007736:	2b04      	cmp	r3, #4
 8007738:	d010      	beq.n	800775c <UART_SetConfig+0x168>
 800773a:	e01f      	b.n	800777c <UART_SetConfig+0x188>
 800773c:	231b      	movs	r3, #27
 800773e:	2220      	movs	r2, #32
 8007740:	4694      	mov	ip, r2
 8007742:	44bc      	add	ip, r7
 8007744:	4463      	add	r3, ip
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	e089      	b.n	8007860 <UART_SetConfig+0x26c>
 800774c:	231b      	movs	r3, #27
 800774e:	2220      	movs	r2, #32
 8007750:	4694      	mov	ip, r2
 8007752:	44bc      	add	ip, r7
 8007754:	4463      	add	r3, ip
 8007756:	2202      	movs	r2, #2
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e081      	b.n	8007860 <UART_SetConfig+0x26c>
 800775c:	231b      	movs	r3, #27
 800775e:	2220      	movs	r2, #32
 8007760:	4694      	mov	ip, r2
 8007762:	44bc      	add	ip, r7
 8007764:	4463      	add	r3, ip
 8007766:	2204      	movs	r2, #4
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e079      	b.n	8007860 <UART_SetConfig+0x26c>
 800776c:	231b      	movs	r3, #27
 800776e:	2220      	movs	r2, #32
 8007770:	4694      	mov	ip, r2
 8007772:	44bc      	add	ip, r7
 8007774:	4463      	add	r3, ip
 8007776:	2208      	movs	r2, #8
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	e071      	b.n	8007860 <UART_SetConfig+0x26c>
 800777c:	231b      	movs	r3, #27
 800777e:	2220      	movs	r2, #32
 8007780:	4694      	mov	ip, r2
 8007782:	44bc      	add	ip, r7
 8007784:	4463      	add	r3, ip
 8007786:	2210      	movs	r2, #16
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e069      	b.n	8007860 <UART_SetConfig+0x26c>
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a66      	ldr	r2, [pc, #408]	; (800792c <UART_SetConfig+0x338>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d107      	bne.n	80077a6 <UART_SetConfig+0x1b2>
 8007796:	231b      	movs	r3, #27
 8007798:	2220      	movs	r2, #32
 800779a:	4694      	mov	ip, r2
 800779c:	44bc      	add	ip, r7
 800779e:	4463      	add	r3, ip
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e05c      	b.n	8007860 <UART_SetConfig+0x26c>
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a61      	ldr	r2, [pc, #388]	; (8007930 <UART_SetConfig+0x33c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d107      	bne.n	80077c0 <UART_SetConfig+0x1cc>
 80077b0:	231b      	movs	r3, #27
 80077b2:	2220      	movs	r2, #32
 80077b4:	4694      	mov	ip, r2
 80077b6:	44bc      	add	ip, r7
 80077b8:	4463      	add	r3, ip
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e04f      	b.n	8007860 <UART_SetConfig+0x26c>
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a54      	ldr	r2, [pc, #336]	; (8007918 <UART_SetConfig+0x324>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d143      	bne.n	8007852 <UART_SetConfig+0x25e>
 80077ca:	4b56      	ldr	r3, [pc, #344]	; (8007924 <UART_SetConfig+0x330>)
 80077cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ce:	23c0      	movs	r3, #192	; 0xc0
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4013      	ands	r3, r2
 80077d4:	22c0      	movs	r2, #192	; 0xc0
 80077d6:	0112      	lsls	r2, r2, #4
 80077d8:	4293      	cmp	r3, r2
 80077da:	d02a      	beq.n	8007832 <UART_SetConfig+0x23e>
 80077dc:	22c0      	movs	r2, #192	; 0xc0
 80077de:	0112      	lsls	r2, r2, #4
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d82e      	bhi.n	8007842 <UART_SetConfig+0x24e>
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	0112      	lsls	r2, r2, #4
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d012      	beq.n	8007812 <UART_SetConfig+0x21e>
 80077ec:	2280      	movs	r2, #128	; 0x80
 80077ee:	0112      	lsls	r2, r2, #4
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d826      	bhi.n	8007842 <UART_SetConfig+0x24e>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <UART_SetConfig+0x20e>
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	00d2      	lsls	r2, r2, #3
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d010      	beq.n	8007822 <UART_SetConfig+0x22e>
 8007800:	e01f      	b.n	8007842 <UART_SetConfig+0x24e>
 8007802:	231b      	movs	r3, #27
 8007804:	2220      	movs	r2, #32
 8007806:	4694      	mov	ip, r2
 8007808:	44bc      	add	ip, r7
 800780a:	4463      	add	r3, ip
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e026      	b.n	8007860 <UART_SetConfig+0x26c>
 8007812:	231b      	movs	r3, #27
 8007814:	2220      	movs	r2, #32
 8007816:	4694      	mov	ip, r2
 8007818:	44bc      	add	ip, r7
 800781a:	4463      	add	r3, ip
 800781c:	2202      	movs	r2, #2
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e01e      	b.n	8007860 <UART_SetConfig+0x26c>
 8007822:	231b      	movs	r3, #27
 8007824:	2220      	movs	r2, #32
 8007826:	4694      	mov	ip, r2
 8007828:	44bc      	add	ip, r7
 800782a:	4463      	add	r3, ip
 800782c:	2204      	movs	r2, #4
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e016      	b.n	8007860 <UART_SetConfig+0x26c>
 8007832:	231b      	movs	r3, #27
 8007834:	2220      	movs	r2, #32
 8007836:	4694      	mov	ip, r2
 8007838:	44bc      	add	ip, r7
 800783a:	4463      	add	r3, ip
 800783c:	2208      	movs	r2, #8
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e00e      	b.n	8007860 <UART_SetConfig+0x26c>
 8007842:	231b      	movs	r3, #27
 8007844:	2220      	movs	r2, #32
 8007846:	4694      	mov	ip, r2
 8007848:	44bc      	add	ip, r7
 800784a:	4463      	add	r3, ip
 800784c:	2210      	movs	r2, #16
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e006      	b.n	8007860 <UART_SetConfig+0x26c>
 8007852:	231b      	movs	r3, #27
 8007854:	2220      	movs	r2, #32
 8007856:	4694      	mov	ip, r2
 8007858:	44bc      	add	ip, r7
 800785a:	4463      	add	r3, ip
 800785c:	2210      	movs	r2, #16
 800785e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <UART_SetConfig+0x324>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d000      	beq.n	800786c <UART_SetConfig+0x278>
 800786a:	e0ad      	b.n	80079c8 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800786c:	231b      	movs	r3, #27
 800786e:	2220      	movs	r2, #32
 8007870:	4694      	mov	ip, r2
 8007872:	44bc      	add	ip, r7
 8007874:	4463      	add	r3, ip
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b08      	cmp	r3, #8
 800787a:	d015      	beq.n	80078a8 <UART_SetConfig+0x2b4>
 800787c:	dc18      	bgt.n	80078b0 <UART_SetConfig+0x2bc>
 800787e:	2b04      	cmp	r3, #4
 8007880:	d00d      	beq.n	800789e <UART_SetConfig+0x2aa>
 8007882:	dc15      	bgt.n	80078b0 <UART_SetConfig+0x2bc>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <UART_SetConfig+0x29a>
 8007888:	2b02      	cmp	r3, #2
 800788a:	d005      	beq.n	8007898 <UART_SetConfig+0x2a4>
 800788c:	e010      	b.n	80078b0 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800788e:	f7fe fc7d 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 8007892:	0003      	movs	r3, r0
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007896:	e015      	b.n	80078c4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007898:	4b26      	ldr	r3, [pc, #152]	; (8007934 <UART_SetConfig+0x340>)
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800789c:	e012      	b.n	80078c4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789e:	f7fe fbe9 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 80078a2:	0003      	movs	r3, r0
 80078a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a6:	e00d      	b.n	80078c4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ae:	e009      	b.n	80078c4 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80078b4:	231a      	movs	r3, #26
 80078b6:	2220      	movs	r2, #32
 80078b8:	4694      	mov	ip, r2
 80078ba:	44bc      	add	ip, r7
 80078bc:	4463      	add	r3, ip
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
        break;
 80078c2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d100      	bne.n	80078cc <UART_SetConfig+0x2d8>
 80078ca:	e154      	b.n	8007b76 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d0:	4b19      	ldr	r3, [pc, #100]	; (8007938 <UART_SetConfig+0x344>)
 80078d2:	0052      	lsls	r2, r2, #1
 80078d4:	5ad3      	ldrh	r3, [r2, r3]
 80078d6:	0019      	movs	r1, r3
 80078d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80078da:	f7f8 fc1d 	bl	8000118 <__udivsi3>
 80078de:	0003      	movs	r3, r0
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	0013      	movs	r3, r2
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	189b      	adds	r3, r3, r2
 80078ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d305      	bcc.n	80078fe <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d91e      	bls.n	800793c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80078fe:	231a      	movs	r3, #26
 8007900:	2220      	movs	r2, #32
 8007902:	4694      	mov	ip, r2
 8007904:	44bc      	add	ip, r7
 8007906:	4463      	add	r3, ip
 8007908:	2201      	movs	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e133      	b.n	8007b76 <UART_SetConfig+0x582>
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	cfff69f3 	.word	0xcfff69f3
 8007914:	ffffcfff 	.word	0xffffcfff
 8007918:	40008000 	.word	0x40008000
 800791c:	11fff4ff 	.word	0x11fff4ff
 8007920:	40013800 	.word	0x40013800
 8007924:	40021000 	.word	0x40021000
 8007928:	40004400 	.word	0x40004400
 800792c:	40004800 	.word	0x40004800
 8007930:	40004c00 	.word	0x40004c00
 8007934:	00f42400 	.word	0x00f42400
 8007938:	0800d60c 	.word	0x0800d60c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	2300      	movs	r3, #0
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007948:	4b97      	ldr	r3, [pc, #604]	; (8007ba8 <UART_SetConfig+0x5b4>)
 800794a:	0052      	lsls	r2, r2, #1
 800794c:	5ad3      	ldrh	r3, [r2, r3]
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	69b8      	ldr	r0, [r7, #24]
 800795a:	69f9      	ldr	r1, [r7, #28]
 800795c:	f7f8 fdb4 	bl	80004c8 <__aeabi_uldivmod>
 8007960:	0002      	movs	r2, r0
 8007962:	000b      	movs	r3, r1
 8007964:	0e11      	lsrs	r1, r2, #24
 8007966:	021d      	lsls	r5, r3, #8
 8007968:	430d      	orrs	r5, r1
 800796a:	0214      	lsls	r4, r2, #8
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	60bb      	str	r3, [r7, #8]
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68b8      	ldr	r0, [r7, #8]
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	1900      	adds	r0, r0, r4
 800797e:	4169      	adcs	r1, r5
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f7f8 fd9b 	bl	80004c8 <__aeabi_uldivmod>
 8007992:	0002      	movs	r2, r0
 8007994:	000b      	movs	r3, r1
 8007996:	0013      	movs	r3, r2
 8007998:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800799a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799c:	23c0      	movs	r3, #192	; 0xc0
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d309      	bcc.n	80079b8 <UART_SetConfig+0x3c4>
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	2380      	movs	r3, #128	; 0x80
 80079a8:	035b      	lsls	r3, r3, #13
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d204      	bcs.n	80079b8 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b4:	60da      	str	r2, [r3, #12]
 80079b6:	e0de      	b.n	8007b76 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 80079b8:	231a      	movs	r3, #26
 80079ba:	2220      	movs	r2, #32
 80079bc:	4694      	mov	ip, r2
 80079be:	44bc      	add	ip, r7
 80079c0:	4463      	add	r3, ip
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e0d6      	b.n	8007b76 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d000      	beq.n	80079d6 <UART_SetConfig+0x3e2>
 80079d4:	e074      	b.n	8007ac0 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80079d6:	231b      	movs	r3, #27
 80079d8:	2220      	movs	r2, #32
 80079da:	4694      	mov	ip, r2
 80079dc:	44bc      	add	ip, r7
 80079de:	4463      	add	r3, ip
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d015      	beq.n	8007a12 <UART_SetConfig+0x41e>
 80079e6:	dc18      	bgt.n	8007a1a <UART_SetConfig+0x426>
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d00d      	beq.n	8007a08 <UART_SetConfig+0x414>
 80079ec:	dc15      	bgt.n	8007a1a <UART_SetConfig+0x426>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <UART_SetConfig+0x404>
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d005      	beq.n	8007a02 <UART_SetConfig+0x40e>
 80079f6:	e010      	b.n	8007a1a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f8:	f7fe fbc8 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 80079fc:	0003      	movs	r3, r0
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a00:	e015      	b.n	8007a2e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a02:	4b6a      	ldr	r3, [pc, #424]	; (8007bac <UART_SetConfig+0x5b8>)
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a06:	e012      	b.n	8007a2e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a08:	f7fe fb34 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a10:	e00d      	b.n	8007a2e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a12:	2380      	movs	r3, #128	; 0x80
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a18:	e009      	b.n	8007a2e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007a1e:	231a      	movs	r3, #26
 8007a20:	2220      	movs	r2, #32
 8007a22:	4694      	mov	ip, r2
 8007a24:	44bc      	add	ip, r7
 8007a26:	4463      	add	r3, ip
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
        break;
 8007a2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d100      	bne.n	8007a36 <UART_SetConfig+0x442>
 8007a34:	e09f      	b.n	8007b76 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ba8 <UART_SetConfig+0x5b4>)
 8007a3c:	0052      	lsls	r2, r2, #1
 8007a3e:	5ad3      	ldrh	r3, [r2, r3]
 8007a40:	0019      	movs	r1, r3
 8007a42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a44:	f7f8 fb68 	bl	8000118 <__udivsi3>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	005a      	lsls	r2, r3, #1
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	18d2      	adds	r2, r2, r3
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	0019      	movs	r1, r3
 8007a5a:	0010      	movs	r0, r2
 8007a5c:	f7f8 fb5c 	bl	8000118 <__udivsi3>
 8007a60:	0003      	movs	r3, r0
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b0f      	cmp	r3, #15
 8007a6a:	d921      	bls.n	8007ab0 <UART_SetConfig+0x4bc>
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	2380      	movs	r3, #128	; 0x80
 8007a70:	025b      	lsls	r3, r3, #9
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d21c      	bcs.n	8007ab0 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	200e      	movs	r0, #14
 8007a7c:	2420      	movs	r4, #32
 8007a7e:	193b      	adds	r3, r7, r4
 8007a80:	181b      	adds	r3, r3, r0
 8007a82:	210f      	movs	r1, #15
 8007a84:	438a      	bics	r2, r1
 8007a86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2207      	movs	r2, #7
 8007a90:	4013      	ands	r3, r2
 8007a92:	b299      	uxth	r1, r3
 8007a94:	193b      	adds	r3, r7, r4
 8007a96:	181b      	adds	r3, r3, r0
 8007a98:	193a      	adds	r2, r7, r4
 8007a9a:	1812      	adds	r2, r2, r0
 8007a9c:	8812      	ldrh	r2, [r2, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	193a      	adds	r2, r7, r4
 8007aa8:	1812      	adds	r2, r2, r0
 8007aaa:	8812      	ldrh	r2, [r2, #0]
 8007aac:	60da      	str	r2, [r3, #12]
 8007aae:	e062      	b.n	8007b76 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007ab0:	231a      	movs	r3, #26
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	4694      	mov	ip, r2
 8007ab6:	44bc      	add	ip, r7
 8007ab8:	4463      	add	r3, ip
 8007aba:	2201      	movs	r2, #1
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e05a      	b.n	8007b76 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ac0:	231b      	movs	r3, #27
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	4694      	mov	ip, r2
 8007ac6:	44bc      	add	ip, r7
 8007ac8:	4463      	add	r3, ip
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d015      	beq.n	8007afc <UART_SetConfig+0x508>
 8007ad0:	dc18      	bgt.n	8007b04 <UART_SetConfig+0x510>
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d00d      	beq.n	8007af2 <UART_SetConfig+0x4fe>
 8007ad6:	dc15      	bgt.n	8007b04 <UART_SetConfig+0x510>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <UART_SetConfig+0x4ee>
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d005      	beq.n	8007aec <UART_SetConfig+0x4f8>
 8007ae0:	e010      	b.n	8007b04 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae2:	f7fe fb53 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aea:	e015      	b.n	8007b18 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aec:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <UART_SetConfig+0x5b8>)
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007af0:	e012      	b.n	8007b18 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af2:	f7fe fabf 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 8007af6:	0003      	movs	r3, r0
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007afa:	e00d      	b.n	8007b18 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b02:	e009      	b.n	8007b18 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007b08:	231a      	movs	r3, #26
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	4694      	mov	ip, r2
 8007b0e:	44bc      	add	ip, r7
 8007b10:	4463      	add	r3, ip
 8007b12:	2201      	movs	r2, #1
 8007b14:	701a      	strb	r2, [r3, #0]
        break;
 8007b16:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d02b      	beq.n	8007b76 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b22:	4b21      	ldr	r3, [pc, #132]	; (8007ba8 <UART_SetConfig+0x5b4>)
 8007b24:	0052      	lsls	r2, r2, #1
 8007b26:	5ad3      	ldrh	r3, [r2, r3]
 8007b28:	0019      	movs	r1, r3
 8007b2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b2c:	f7f8 faf4 	bl	8000118 <__udivsi3>
 8007b30:	0003      	movs	r3, r0
 8007b32:	001a      	movs	r2, r3
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	18d2      	adds	r2, r2, r3
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	0019      	movs	r1, r3
 8007b42:	0010      	movs	r0, r2
 8007b44:	f7f8 fae8 	bl	8000118 <__udivsi3>
 8007b48:	0003      	movs	r3, r0
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b0f      	cmp	r3, #15
 8007b52:	d909      	bls.n	8007b68 <UART_SetConfig+0x574>
 8007b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	025b      	lsls	r3, r3, #9
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d204      	bcs.n	8007b68 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	e006      	b.n	8007b76 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007b68:	231a      	movs	r3, #26
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	4694      	mov	ip, r2
 8007b6e:	44bc      	add	ip, r7
 8007b70:	4463      	add	r3, ip
 8007b72:	2201      	movs	r2, #1
 8007b74:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	226a      	movs	r2, #106	; 0x6a
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	2268      	movs	r2, #104	; 0x68
 8007b82:	2101      	movs	r1, #1
 8007b84:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	2200      	movs	r2, #0
 8007b8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	2200      	movs	r2, #0
 8007b90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b92:	231a      	movs	r3, #26
 8007b94:	2220      	movs	r2, #32
 8007b96:	4694      	mov	ip, r2
 8007b98:	44bc      	add	ip, r7
 8007b9a:	4463      	add	r3, ip
 8007b9c:	781b      	ldrb	r3, [r3, #0]
}
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b010      	add	sp, #64	; 0x40
 8007ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	0800d60c 	.word	0x0800d60c
 8007bac:	00f42400 	.word	0x00f42400

08007bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4a4a      	ldr	r2, [pc, #296]	; (8007cf4 <UART_AdvFeatureConfig+0x144>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	0019      	movs	r1, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	2202      	movs	r2, #2
 8007be0:	4013      	ands	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	4a43      	ldr	r2, [pc, #268]	; (8007cf8 <UART_AdvFeatureConfig+0x148>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	0019      	movs	r1, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c00:	2204      	movs	r2, #4
 8007c02:	4013      	ands	r3, r2
 8007c04:	d00b      	beq.n	8007c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	4a3b      	ldr	r2, [pc, #236]	; (8007cfc <UART_AdvFeatureConfig+0x14c>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	2208      	movs	r2, #8
 8007c24:	4013      	ands	r3, r2
 8007c26:	d00b      	beq.n	8007c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4a34      	ldr	r2, [pc, #208]	; (8007d00 <UART_AdvFeatureConfig+0x150>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	0019      	movs	r1, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	2210      	movs	r2, #16
 8007c46:	4013      	ands	r3, r2
 8007c48:	d00b      	beq.n	8007c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4a2c      	ldr	r2, [pc, #176]	; (8007d04 <UART_AdvFeatureConfig+0x154>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	0019      	movs	r1, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	2220      	movs	r2, #32
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	4a25      	ldr	r2, [pc, #148]	; (8007d08 <UART_AdvFeatureConfig+0x158>)
 8007c74:	4013      	ands	r3, r2
 8007c76:	0019      	movs	r1, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	2240      	movs	r2, #64	; 0x40
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	d01d      	beq.n	8007cca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4a1d      	ldr	r2, [pc, #116]	; (8007d0c <UART_AdvFeatureConfig+0x15c>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	0019      	movs	r1, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007caa:	2380      	movs	r3, #128	; 0x80
 8007cac:	035b      	lsls	r3, r3, #13
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d10b      	bne.n	8007cca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a15      	ldr	r2, [pc, #84]	; (8007d10 <UART_AdvFeatureConfig+0x160>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	2280      	movs	r2, #128	; 0x80
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	d00b      	beq.n	8007cec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <UART_AdvFeatureConfig+0x164>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	0019      	movs	r1, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }
}
 8007cec:	46c0      	nop			; (mov r8, r8)
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	fffdffff 	.word	0xfffdffff
 8007cf8:	fffeffff 	.word	0xfffeffff
 8007cfc:	fffbffff 	.word	0xfffbffff
 8007d00:	ffff7fff 	.word	0xffff7fff
 8007d04:	ffffefff 	.word	0xffffefff
 8007d08:	ffffdfff 	.word	0xffffdfff
 8007d0c:	ffefffff 	.word	0xffefffff
 8007d10:	ff9fffff 	.word	0xff9fffff
 8007d14:	fff7ffff 	.word	0xfff7ffff

08007d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	228c      	movs	r2, #140	; 0x8c
 8007d24:	2100      	movs	r1, #0
 8007d26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d28:	f7fb fcb0 	bl	800368c <HAL_GetTick>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2208      	movs	r2, #8
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d10c      	bne.n	8007d58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2280      	movs	r2, #128	; 0x80
 8007d42:	0391      	lsls	r1, r2, #14
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <UART_CheckIdleState+0x90>)
 8007d48:	9200      	str	r2, [sp, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f000 f82e 	bl	8007dac <UART_WaitOnFlagUntilTimeout>
 8007d50:	1e03      	subs	r3, r0, #0
 8007d52:	d001      	beq.n	8007d58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e023      	b.n	8007da0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d10c      	bne.n	8007d80 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2280      	movs	r2, #128	; 0x80
 8007d6a:	03d1      	lsls	r1, r2, #15
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4a0e      	ldr	r2, [pc, #56]	; (8007da8 <UART_CheckIdleState+0x90>)
 8007d70:	9200      	str	r2, [sp, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f000 f81a 	bl	8007dac <UART_WaitOnFlagUntilTimeout>
 8007d78:	1e03      	subs	r3, r0, #0
 8007d7a:	d001      	beq.n	8007d80 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e00f      	b.n	8007da0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2284      	movs	r2, #132	; 0x84
 8007d84:	2120      	movs	r1, #32
 8007d86:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2288      	movs	r2, #136	; 0x88
 8007d8c:	2120      	movs	r1, #32
 8007d8e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2280      	movs	r2, #128	; 0x80
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	0018      	movs	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b004      	add	sp, #16
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	01ffffff 	.word	0x01ffffff

08007dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b094      	sub	sp, #80	; 0x50
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	1dfb      	adds	r3, r7, #7
 8007dba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dbc:	e0a7      	b.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	d100      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007dc4:	e0a3      	b.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc6:	f7fb fc61 	bl	800368c <HAL_GetTick>
 8007dca:	0002      	movs	r2, r0
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d302      	bcc.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d13f      	bne.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007de4:	647b      	str	r3, [r7, #68]	; 0x44
 8007de6:	2301      	movs	r3, #1
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	f383 8810 	msr	PRIMASK, r3
}
 8007df0:	46c0      	nop			; (mov r8, r8)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	494e      	ldr	r1, [pc, #312]	; (8007f38 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007dfe:	400a      	ands	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	f383 8810 	msr	PRIMASK, r3
}
 8007e0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e16:	643b      	str	r3, [r7, #64]	; 0x40
 8007e18:	2301      	movs	r3, #1
 8007e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	f383 8810 	msr	PRIMASK, r3
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2101      	movs	r1, #1
 8007e30:	438a      	bics	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	f383 8810 	msr	PRIMASK, r3
}
 8007e3e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2284      	movs	r2, #132	; 0x84
 8007e44:	2120      	movs	r1, #32
 8007e46:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2288      	movs	r2, #136	; 0x88
 8007e4c:	2120      	movs	r1, #32
 8007e4e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2280      	movs	r2, #128	; 0x80
 8007e54:	2100      	movs	r1, #0
 8007e56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e069      	b.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2204      	movs	r2, #4
 8007e64:	4013      	ands	r3, r2
 8007e66:	d052      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	2380      	movs	r3, #128	; 0x80
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	401a      	ands	r2, r3
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d148      	bne.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2280      	movs	r2, #128	; 0x80
 8007e82:	0112      	lsls	r2, r2, #4
 8007e84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e86:	f3ef 8310 	mrs	r3, PRIMASK
 8007e8a:	613b      	str	r3, [r7, #16]
  return(result);
 8007e8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f383 8810 	msr	PRIMASK, r3
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4924      	ldr	r1, [pc, #144]	; (8007f38 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007ea8:	400a      	ands	r2, r1
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f383 8810 	msr	PRIMASK, r3
}
 8007eb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ebc:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ebe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2101      	movs	r1, #1
 8007eda:	438a      	bics	r2, r1
 8007edc:	609a      	str	r2, [r3, #8]
 8007ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	f383 8810 	msr	PRIMASK, r3
}
 8007ee8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2284      	movs	r2, #132	; 0x84
 8007eee:	2120      	movs	r1, #32
 8007ef0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2288      	movs	r2, #136	; 0x88
 8007ef6:	2120      	movs	r1, #32
 8007ef8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	228c      	movs	r2, #140	; 0x8c
 8007efe:	2120      	movs	r1, #32
 8007f00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2280      	movs	r2, #128	; 0x80
 8007f06:	2100      	movs	r1, #0
 8007f08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e010      	b.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	4013      	ands	r3, r2
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	425a      	negs	r2, r3
 8007f1e:	4153      	adcs	r3, r2
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	001a      	movs	r2, r3
 8007f24:	1dfb      	adds	r3, r7, #7
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d100      	bne.n	8007f2e <UART_WaitOnFlagUntilTimeout+0x182>
 8007f2c:	e747      	b.n	8007dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b014      	add	sp, #80	; 0x50
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	fffffe5f 	.word	0xfffffe5f

08007f3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2280      	movs	r2, #128	; 0x80
 8007f48:	5c9b      	ldrb	r3, [r3, r2]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e027      	b.n	8007fa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	2101      	movs	r1, #1
 8007f58:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2284      	movs	r2, #132	; 0x84
 8007f5e:	2124      	movs	r1, #36	; 0x24
 8007f60:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2101      	movs	r1, #1
 8007f76:	438a      	bics	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4a0b      	ldr	r2, [pc, #44]	; (8007fac <HAL_UARTEx_DisableFifoMode+0x70>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2284      	movs	r2, #132	; 0x84
 8007f94:	2120      	movs	r1, #32
 8007f96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2280      	movs	r2, #128	; 0x80
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	b004      	add	sp, #16
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	dfffffff 	.word	0xdfffffff

08007fb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2280      	movs	r2, #128	; 0x80
 8007fbe:	5c9b      	ldrb	r3, [r3, r2]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e02e      	b.n	8008026 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2280      	movs	r2, #128	; 0x80
 8007fcc:	2101      	movs	r1, #1
 8007fce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2284      	movs	r2, #132	; 0x84
 8007fd4:	2124      	movs	r1, #36	; 0x24
 8007fd6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2101      	movs	r1, #1
 8007fec:	438a      	bics	r2, r1
 8007fee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	08d9      	lsrs	r1, r3, #3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	0018      	movs	r0, r3
 8008008:	f000 f854 	bl	80080b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2284      	movs	r2, #132	; 0x84
 8008018:	2120      	movs	r1, #32
 800801a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2280      	movs	r2, #128	; 0x80
 8008020:	2100      	movs	r1, #0
 8008022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	0018      	movs	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	b004      	add	sp, #16
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	5c9b      	ldrb	r3, [r3, r2]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d101      	bne.n	8008048 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008044:	2302      	movs	r3, #2
 8008046:	e02f      	b.n	80080a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2280      	movs	r2, #128	; 0x80
 800804c:	2101      	movs	r1, #1
 800804e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2284      	movs	r2, #132	; 0x84
 8008054:	2124      	movs	r1, #36	; 0x24
 8008056:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2101      	movs	r1, #1
 800806c:	438a      	bics	r2, r1
 800806e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008078:	4013      	ands	r3, r2
 800807a:	0019      	movs	r1, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	0018      	movs	r0, r3
 800808a:	f000 f813 	bl	80080b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2284      	movs	r2, #132	; 0x84
 800809a:	2120      	movs	r1, #32
 800809c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	2100      	movs	r1, #0
 80080a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b004      	add	sp, #16
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	f1ffffff 	.word	0xf1ffffff

080080b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	226a      	movs	r2, #106	; 0x6a
 80080c8:	2101      	movs	r1, #1
 80080ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2268      	movs	r2, #104	; 0x68
 80080d0:	2101      	movs	r1, #1
 80080d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080d4:	e043      	b.n	800815e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080d6:	260f      	movs	r6, #15
 80080d8:	19bb      	adds	r3, r7, r6
 80080da:	2208      	movs	r2, #8
 80080dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080de:	200e      	movs	r0, #14
 80080e0:	183b      	adds	r3, r7, r0
 80080e2:	2208      	movs	r2, #8
 80080e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	0e5b      	lsrs	r3, r3, #25
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	240d      	movs	r4, #13
 80080f2:	193b      	adds	r3, r7, r4
 80080f4:	2107      	movs	r1, #7
 80080f6:	400a      	ands	r2, r1
 80080f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	0f5b      	lsrs	r3, r3, #29
 8008102:	b2da      	uxtb	r2, r3
 8008104:	250c      	movs	r5, #12
 8008106:	197b      	adds	r3, r7, r5
 8008108:	2107      	movs	r1, #7
 800810a:	400a      	ands	r2, r1
 800810c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800810e:	183b      	adds	r3, r7, r0
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	197a      	adds	r2, r7, r5
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	4914      	ldr	r1, [pc, #80]	; (8008168 <UARTEx_SetNbDataToProcess+0xb4>)
 8008118:	5c8a      	ldrb	r2, [r1, r2]
 800811a:	435a      	muls	r2, r3
 800811c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800811e:	197b      	adds	r3, r7, r5
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	4a12      	ldr	r2, [pc, #72]	; (800816c <UARTEx_SetNbDataToProcess+0xb8>)
 8008124:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008126:	0019      	movs	r1, r3
 8008128:	f7f8 f880 	bl	800022c <__divsi3>
 800812c:	0003      	movs	r3, r0
 800812e:	b299      	uxth	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	226a      	movs	r2, #106	; 0x6a
 8008134:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008136:	19bb      	adds	r3, r7, r6
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	193a      	adds	r2, r7, r4
 800813c:	7812      	ldrb	r2, [r2, #0]
 800813e:	490a      	ldr	r1, [pc, #40]	; (8008168 <UARTEx_SetNbDataToProcess+0xb4>)
 8008140:	5c8a      	ldrb	r2, [r1, r2]
 8008142:	435a      	muls	r2, r3
 8008144:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008146:	193b      	adds	r3, r7, r4
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	4a08      	ldr	r2, [pc, #32]	; (800816c <UARTEx_SetNbDataToProcess+0xb8>)
 800814c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800814e:	0019      	movs	r1, r3
 8008150:	f7f8 f86c 	bl	800022c <__divsi3>
 8008154:	0003      	movs	r3, r0
 8008156:	b299      	uxth	r1, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2268      	movs	r2, #104	; 0x68
 800815c:	5299      	strh	r1, [r3, r2]
}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	46bd      	mov	sp, r7
 8008162:	b005      	add	sp, #20
 8008164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008166:	46c0      	nop			; (mov r8, r8)
 8008168:	0800d624 	.word	0x0800d624
 800816c:	0800d62c 	.word	0x0800d62c

08008170 <LEDmultiplexing>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 8008170:	b590      	push	{r4, r7, lr}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	0018      	movs	r0, r3
 800817c:	f000 f9ba 	bl	80084f4 <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2265      	movs	r2, #101	; 0x65
 8008184:	5c9a      	ldrb	r2, [r3, r2]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0011      	movs	r1, r2
 800818a:	0018      	movs	r0, r3
 800818c:	f000 f970 	bl	8008470 <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2265      	movs	r2, #101	; 0x65
 8008194:	5c9b      	ldrb	r3, [r3, r2]
 8008196:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2260      	movs	r2, #96	; 0x60
 800819c:	185b      	adds	r3, r3, r1
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	781a      	ldrb	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	0011      	movs	r1, r2
 80081a6:	0018      	movs	r0, r3
 80081a8:	f000 fa10 	bl	80085cc <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2264      	movs	r2, #100	; 0x64
 80081b0:	5c9a      	ldrb	r2, [r3, r2]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2165      	movs	r1, #101	; 0x65
 80081b6:	5c5b      	ldrb	r3, [r3, r1]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d107      	bne.n	80081cc <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80081c4:	2200      	movs	r2, #0
 80081c6:	0019      	movs	r1, r3
 80081c8:	f7fc fc71 	bl	8004aae <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2265      	movs	r2, #101	; 0x65
 80081d0:	5c9b      	ldrb	r3, [r3, r2]
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2d9      	uxtb	r1, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2265      	movs	r2, #101	; 0x65
 80081da:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2265      	movs	r2, #101	; 0x65
 80081e0:	5c9b      	ldrb	r3, [r3, r2]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d903      	bls.n	80081ee <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2265      	movs	r2, #101	; 0x65
 80081ea:	2100      	movs	r1, #0
 80081ec:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	226c      	movs	r2, #108	; 0x6c
 80081f2:	5a9b      	ldrh	r3, [r3, r2]
 80081f4:	3301      	adds	r3, #1
 80081f6:	b299      	uxth	r1, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	226c      	movs	r2, #108	; 0x6c
 80081fc:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	226c      	movs	r2, #108	; 0x6c
 8008202:	5a9b      	ldrh	r3, [r3, r2]
 8008204:	2105      	movs	r1, #5
 8008206:	0018      	movs	r0, r3
 8008208:	f7f8 f80c 	bl	8000224 <__aeabi_uidivmod>
 800820c:	000b      	movs	r3, r1
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d000      	beq.n	8008216 <LEDmultiplexing+0xa6>
 8008214:	e0a2      	b.n	800835c <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2267      	movs	r2, #103	; 0x67
 800821a:	5c9b      	ldrb	r3, [r3, r2]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d100      	bne.n	8008222 <LEDmultiplexing+0xb2>
 8008220:	e09c      	b.n	800835c <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2267      	movs	r2, #103	; 0x67
 8008226:	5c9b      	ldrb	r3, [r3, r2]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d13f      	bne.n	80082ac <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 800822c:	230f      	movs	r3, #15
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	2203      	movs	r2, #3
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	e015      	b.n	8008262 <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 8008236:	240f      	movs	r4, #15
 8008238:	193b      	adds	r3, r7, r4
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	1e5a      	subs	r2, r3, #1
 800823e:	193b      	adds	r3, r7, r4
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	2060      	movs	r0, #96	; 0x60
 8008246:	188a      	adds	r2, r1, r2
 8008248:	1812      	adds	r2, r2, r0
 800824a:	7810      	ldrb	r0, [r2, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	2160      	movs	r1, #96	; 0x60
 8008250:	18d3      	adds	r3, r2, r3
 8008252:	185b      	adds	r3, r3, r1
 8008254:	1c02      	adds	r2, r0, #0
 8008256:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8008258:	193b      	adds	r3, r7, r4
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	193b      	adds	r3, r7, r4
 800825e:	3a01      	subs	r2, #1
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	230f      	movs	r3, #15
 8008264:	18fb      	adds	r3, r7, r3
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e4      	bne.n	8008236 <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2266      	movs	r2, #102	; 0x66
 8008270:	5c9b      	ldrb	r3, [r3, r2]
 8008272:	2b03      	cmp	r3, #3
 8008274:	d80c      	bhi.n	8008290 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2266      	movs	r2, #102	; 0x66
 800827a:	5c9b      	ldrb	r3, [r3, r2]
 800827c:	0019      	movs	r1, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2268      	movs	r2, #104	; 0x68
 8008282:	185b      	adds	r3, r3, r1
 8008284:	189b      	adds	r3, r3, r2
 8008286:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2260      	movs	r2, #96	; 0x60
 800828c:	5499      	strb	r1, [r3, r2]
 800828e:	e00d      	b.n	80082ac <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2266      	movs	r2, #102	; 0x66
 8008294:	5c9b      	ldrb	r3, [r3, r2]
 8008296:	001a      	movs	r2, r3
 8008298:	2307      	movs	r3, #7
 800829a:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	216e      	movs	r1, #110	; 0x6e
 80082a0:	18d3      	adds	r3, r2, r3
 80082a2:	185b      	adds	r3, r3, r1
 80082a4:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2260      	movs	r2, #96	; 0x60
 80082aa:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2267      	movs	r2, #103	; 0x67
 80082b0:	5c9b      	ldrb	r3, [r3, r2]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d13d      	bne.n	8008332 <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 80082b6:	230e      	movs	r3, #14
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e015      	b.n	80082ec <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 80082c0:	240e      	movs	r4, #14
 80082c2:	193b      	adds	r3, r7, r4
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	193b      	adds	r3, r7, r4
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	2060      	movs	r0, #96	; 0x60
 80082d0:	188a      	adds	r2, r1, r2
 80082d2:	1812      	adds	r2, r2, r0
 80082d4:	7810      	ldrb	r0, [r2, #0]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	2160      	movs	r1, #96	; 0x60
 80082da:	18d3      	adds	r3, r2, r3
 80082dc:	185b      	adds	r3, r3, r1
 80082de:	1c02      	adds	r2, r0, #0
 80082e0:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 80082e2:	193b      	adds	r3, r7, r4
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	193b      	adds	r3, r7, r4
 80082e8:	3201      	adds	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	230e      	movs	r3, #14
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d9e4      	bls.n	80082c0 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2266      	movs	r2, #102	; 0x66
 80082fa:	5c9b      	ldrb	r3, [r3, r2]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d80c      	bhi.n	800831a <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2266      	movs	r2, #102	; 0x66
 8008304:	5c9b      	ldrb	r3, [r3, r2]
 8008306:	0019      	movs	r1, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2268      	movs	r2, #104	; 0x68
 800830c:	185b      	adds	r3, r3, r1
 800830e:	189b      	adds	r3, r3, r2
 8008310:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2263      	movs	r2, #99	; 0x63
 8008316:	5499      	strb	r1, [r3, r2]
 8008318:	e00b      	b.n	8008332 <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2266      	movs	r2, #102	; 0x66
 800831e:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 8008320:	3b04      	subs	r3, #4
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	216e      	movs	r1, #110	; 0x6e
 8008326:	18d3      	adds	r3, r2, r3
 8008328:	185b      	adds	r3, r3, r1
 800832a:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2263      	movs	r2, #99	; 0x63
 8008330:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2266      	movs	r2, #102	; 0x66
 8008336:	5c9b      	ldrb	r3, [r3, r2]
 8008338:	3301      	adds	r3, #1
 800833a:	b2d9      	uxtb	r1, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2266      	movs	r2, #102	; 0x66
 8008340:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2266      	movs	r2, #102	; 0x66
 8008346:	5c9b      	ldrb	r3, [r3, r2]
 8008348:	2b07      	cmp	r3, #7
 800834a:	d907      	bls.n	800835c <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2266      	movs	r2, #102	; 0x66
 8008350:	2100      	movs	r1, #0
 8008352:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2267      	movs	r2, #103	; 0x67
 8008358:	2100      	movs	r1, #0
 800835a:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 800835c:	46c0      	nop			; (mov r8, r8)
 800835e:	46bd      	mov	sp, r7
 8008360:	b005      	add	sp, #20
 8008362:	bd90      	pop	{r4, r7, pc}

08008364 <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	000a      	movs	r2, r1
 800836e:	1cfb      	adds	r3, r7, #3
 8008370:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1cfa      	adds	r2, r7, #3
 8008376:	2167      	movs	r1, #103	; 0x67
 8008378:	7812      	ldrb	r2, [r2, #0]
 800837a:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2266      	movs	r2, #102	; 0x66
 8008380:	2100      	movs	r1, #0
 8008382:	5499      	strb	r1, [r3, r2]

}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	b002      	add	sp, #8
 800838a:	bd80      	pop	{r7, pc}

0800838c <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	000a      	movs	r2, r1
 8008396:	1cfb      	adds	r3, r7, #3
 8008398:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 800839a:	1cfb      	adds	r3, r7, #3
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d108      	bne.n	80083b4 <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6858      	ldr	r0, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	0019      	movs	r1, r3
 80083ae:	f7fc fb7e 	bl	8004aae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 80083b2:	e059      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 80083b4:	1cfb      	adds	r3, r7, #3
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d108      	bne.n	80083ce <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68d8      	ldr	r0, [r3, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	891b      	ldrh	r3, [r3, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	0019      	movs	r1, r3
 80083c8:	f7fc fb71 	bl	8004aae <HAL_GPIO_WritePin>
}
 80083cc:	e04c      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 80083ce:	1cfb      	adds	r3, r7, #3
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d108      	bne.n	80083e8 <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6958      	ldr	r0, [r3, #20]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8a1b      	ldrh	r3, [r3, #16]
 80083de:	2200      	movs	r2, #0
 80083e0:	0019      	movs	r1, r3
 80083e2:	f7fc fb64 	bl	8004aae <HAL_GPIO_WritePin>
}
 80083e6:	e03f      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 80083e8:	1cfb      	adds	r3, r7, #3
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d108      	bne.n	8008402 <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	69d8      	ldr	r0, [r3, #28]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8b1b      	ldrh	r3, [r3, #24]
 80083f8:	2200      	movs	r2, #0
 80083fa:	0019      	movs	r1, r3
 80083fc:	f7fc fb57 	bl	8004aae <HAL_GPIO_WritePin>
}
 8008400:	e032      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 8008402:	1cfb      	adds	r3, r7, #3
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b05      	cmp	r3, #5
 8008408:	d108      	bne.n	800841c <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8c1b      	ldrh	r3, [r3, #32]
 8008412:	2200      	movs	r2, #0
 8008414:	0019      	movs	r1, r3
 8008416:	f7fc fb4a 	bl	8004aae <HAL_GPIO_WritePin>
}
 800841a:	e025      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 800841c:	1cfb      	adds	r3, r7, #3
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b06      	cmp	r3, #6
 8008422:	d108      	bne.n	8008436 <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842c:	2200      	movs	r2, #0
 800842e:	0019      	movs	r1, r3
 8008430:	f7fc fb3d 	bl	8004aae <HAL_GPIO_WritePin>
}
 8008434:	e018      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 8008436:	1cfb      	adds	r3, r7, #3
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b07      	cmp	r3, #7
 800843c:	d108      	bne.n	8008450 <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008446:	2200      	movs	r2, #0
 8008448:	0019      	movs	r1, r3
 800844a:	f7fc fb30 	bl	8004aae <HAL_GPIO_WritePin>
}
 800844e:	e00b      	b.n	8008468 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 8008450:	1cfb      	adds	r3, r7, #3
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b08      	cmp	r3, #8
 8008456:	d107      	bne.n	8008468 <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008460:	2200      	movs	r2, #0
 8008462:	0019      	movs	r1, r3
 8008464:	f7fc fb23 	bl	8004aae <HAL_GPIO_WritePin>
}
 8008468:	46c0      	nop			; (mov r8, r8)
 800846a:	46bd      	mov	sp, r7
 800846c:	b002      	add	sp, #8
 800846e:	bd80      	pop	{r7, pc}

08008470 <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	000a      	movs	r2, r1
 800847a:	1cfb      	adds	r3, r7, #3
 800847c:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 800847e:	1cfb      	adds	r3, r7, #3
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2240      	movs	r2, #64	; 0x40
 800848e:	5a9b      	ldrh	r3, [r3, r2]
 8008490:	2200      	movs	r2, #0
 8008492:	0019      	movs	r1, r3
 8008494:	f7fc fb0b 	bl	8004aae <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 8008498:	e028      	b.n	80084ec <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 800849a:	1cfb      	adds	r3, r7, #3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d109      	bne.n	80084b6 <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2248      	movs	r2, #72	; 0x48
 80084aa:	5a9b      	ldrh	r3, [r3, r2]
 80084ac:	2200      	movs	r2, #0
 80084ae:	0019      	movs	r1, r3
 80084b0:	f7fc fafd 	bl	8004aae <HAL_GPIO_WritePin>
}
 80084b4:	e01a      	b.n	80084ec <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 80084b6:	1cfb      	adds	r3, r7, #3
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d109      	bne.n	80084d2 <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2250      	movs	r2, #80	; 0x50
 80084c6:	5a9b      	ldrh	r3, [r3, r2]
 80084c8:	2200      	movs	r2, #0
 80084ca:	0019      	movs	r1, r3
 80084cc:	f7fc faef 	bl	8004aae <HAL_GPIO_WritePin>
}
 80084d0:	e00c      	b.n	80084ec <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 80084d2:	1cfb      	adds	r3, r7, #3
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d108      	bne.n	80084ec <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2258      	movs	r2, #88	; 0x58
 80084e2:	5a9b      	ldrh	r3, [r3, r2]
 80084e4:	2200      	movs	r2, #0
 80084e6:	0019      	movs	r1, r3
 80084e8:	f7fc fae1 	bl	8004aae <HAL_GPIO_WritePin>
}
 80084ec:	46c0      	nop			; (mov r8, r8)
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b002      	add	sp, #8
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, LED_FIELD_OFF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2240      	movs	r2, #64	; 0x40
 8008504:	5a9b      	ldrh	r3, [r3, r2]
 8008506:	2201      	movs	r2, #1
 8008508:	0019      	movs	r1, r3
 800850a:	f7fc fad0 	bl	8004aae <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, LED_FIELD_OFF);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2248      	movs	r2, #72	; 0x48
 8008516:	5a9b      	ldrh	r3, [r3, r2]
 8008518:	2201      	movs	r2, #1
 800851a:	0019      	movs	r1, r3
 800851c:	f7fc fac7 	bl	8004aae <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, LED_FIELD_OFF);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2250      	movs	r2, #80	; 0x50
 8008528:	5a9b      	ldrh	r3, [r3, r2]
 800852a:	2201      	movs	r2, #1
 800852c:	0019      	movs	r1, r3
 800852e:	f7fc fabe 	bl	8004aae <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, LED_FIELD_OFF);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2258      	movs	r2, #88	; 0x58
 800853a:	5a9b      	ldrh	r3, [r3, r2]
 800853c:	2201      	movs	r2, #1
 800853e:	0019      	movs	r1, r3
 8008540:	f7fc fab5 	bl	8004aae <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, LED_SEGMENT_OFF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6858      	ldr	r0, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	0019      	movs	r1, r3
 8008550:	f7fc faad 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, LED_SEGMENT_OFF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68d8      	ldr	r0, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	891b      	ldrh	r3, [r3, #8]
 800855c:	2201      	movs	r2, #1
 800855e:	0019      	movs	r1, r3
 8008560:	f7fc faa5 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, LED_SEGMENT_OFF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6958      	ldr	r0, [r3, #20]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8a1b      	ldrh	r3, [r3, #16]
 800856c:	2201      	movs	r2, #1
 800856e:	0019      	movs	r1, r3
 8008570:	f7fc fa9d 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, LED_SEGMENT_OFF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69d8      	ldr	r0, [r3, #28]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8b1b      	ldrh	r3, [r3, #24]
 800857c:	2201      	movs	r2, #1
 800857e:	0019      	movs	r1, r3
 8008580:	f7fc fa95 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, LED_SEGMENT_OFF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8c1b      	ldrh	r3, [r3, #32]
 800858c:	2201      	movs	r2, #1
 800858e:	0019      	movs	r1, r3
 8008590:	f7fc fa8d 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, LED_SEGMENT_OFF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859c:	2201      	movs	r2, #1
 800859e:	0019      	movs	r1, r3
 80085a0:	f7fc fa85 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, LED_SEGMENT_OFF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80085ac:	2201      	movs	r2, #1
 80085ae:	0019      	movs	r1, r3
 80085b0:	f7fc fa7d 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80085bc:	2201      	movs	r2, #1
 80085be:	0019      	movs	r1, r3
 80085c0:	f7fc fa75 	bl	8004aae <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 80085c4:	46c0      	nop			; (mov r8, r8)
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b002      	add	sp, #8
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	000a      	movs	r2, r1
 80085d6:	1cfb      	adds	r3, r7, #3
 80085d8:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 80085da:	1cfb      	adds	r3, r7, #3
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b2f      	cmp	r3, #47	; 0x2f
 80085e0:	d800      	bhi.n	80085e4 <_LEDwriteCharacter+0x18>
 80085e2:	e10f      	b.n	8008804 <_LEDwriteCharacter+0x238>
 80085e4:	1cfb      	adds	r3, r7, #3
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b39      	cmp	r3, #57	; 0x39
 80085ea:	d900      	bls.n	80085ee <_LEDwriteCharacter+0x22>
 80085ec:	e10a      	b.n	8008804 <_LEDwriteCharacter+0x238>
		switch (character) {
 80085ee:	1cfb      	adds	r3, r7, #3
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	3b30      	subs	r3, #48	; 0x30
 80085f4:	2b09      	cmp	r3, #9
 80085f6:	d900      	bls.n	80085fa <_LEDwriteCharacter+0x2e>
 80085f8:	e2e7      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
 80085fa:	009a      	lsls	r2, r3, #2
 80085fc:	4bea      	ldr	r3, [pc, #936]	; (80089a8 <_LEDwriteCharacter+0x3dc>)
 80085fe:	18d3      	adds	r3, r2, r3
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2102      	movs	r1, #2
 8008608:	0018      	movs	r0, r3
 800860a:	f7ff febf 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2103      	movs	r1, #3
 8008612:	0018      	movs	r0, r3
 8008614:	f7ff feba 	bl	800838c <_LEDsegmentOn>
			break;
 8008618:	e0f3      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2101      	movs	r1, #1
 800861e:	0018      	movs	r0, r3
 8008620:	f7ff feb4 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2102      	movs	r1, #2
 8008628:	0018      	movs	r0, r3
 800862a:	f7ff feaf 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2107      	movs	r1, #7
 8008632:	0018      	movs	r0, r3
 8008634:	f7ff feaa 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2105      	movs	r1, #5
 800863c:	0018      	movs	r0, r3
 800863e:	f7ff fea5 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2104      	movs	r1, #4
 8008646:	0018      	movs	r0, r3
 8008648:	f7ff fea0 	bl	800838c <_LEDsegmentOn>
			break;
 800864c:	e0d9      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2101      	movs	r1, #1
 8008652:	0018      	movs	r0, r3
 8008654:	f7ff fe9a 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2102      	movs	r1, #2
 800865c:	0018      	movs	r0, r3
 800865e:	f7ff fe95 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2107      	movs	r1, #7
 8008666:	0018      	movs	r0, r3
 8008668:	f7ff fe90 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2103      	movs	r1, #3
 8008670:	0018      	movs	r0, r3
 8008672:	f7ff fe8b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2104      	movs	r1, #4
 800867a:	0018      	movs	r0, r3
 800867c:	f7ff fe86 	bl	800838c <_LEDsegmentOn>
			break;
 8008680:	e0bf      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2106      	movs	r1, #6
 8008686:	0018      	movs	r0, r3
 8008688:	f7ff fe80 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2107      	movs	r1, #7
 8008690:	0018      	movs	r0, r3
 8008692:	f7ff fe7b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2102      	movs	r1, #2
 800869a:	0018      	movs	r0, r3
 800869c:	f7ff fe76 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2103      	movs	r1, #3
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7ff fe71 	bl	800838c <_LEDsegmentOn>
			break;
 80086aa:	e0aa      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2101      	movs	r1, #1
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7ff fe6b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2106      	movs	r1, #6
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7ff fe66 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2107      	movs	r1, #7
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7ff fe61 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2103      	movs	r1, #3
 80086ce:	0018      	movs	r0, r3
 80086d0:	f7ff fe5c 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2104      	movs	r1, #4
 80086d8:	0018      	movs	r0, r3
 80086da:	f7ff fe57 	bl	800838c <_LEDsegmentOn>
			break;
 80086de:	e090      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2101      	movs	r1, #1
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7ff fe51 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2103      	movs	r1, #3
 80086ee:	0018      	movs	r0, r3
 80086f0:	f7ff fe4c 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2104      	movs	r1, #4
 80086f8:	0018      	movs	r0, r3
 80086fa:	f7ff fe47 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2105      	movs	r1, #5
 8008702:	0018      	movs	r0, r3
 8008704:	f7ff fe42 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2106      	movs	r1, #6
 800870c:	0018      	movs	r0, r3
 800870e:	f7ff fe3d 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2107      	movs	r1, #7
 8008716:	0018      	movs	r0, r3
 8008718:	f7ff fe38 	bl	800838c <_LEDsegmentOn>
			break;
 800871c:	e071      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2101      	movs	r1, #1
 8008722:	0018      	movs	r0, r3
 8008724:	f7ff fe32 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2102      	movs	r1, #2
 800872c:	0018      	movs	r0, r3
 800872e:	f7ff fe2d 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2103      	movs	r1, #3
 8008736:	0018      	movs	r0, r3
 8008738:	f7ff fe28 	bl	800838c <_LEDsegmentOn>
			break;
 800873c:	e061      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2101      	movs	r1, #1
 8008742:	0018      	movs	r0, r3
 8008744:	f7ff fe22 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2102      	movs	r1, #2
 800874c:	0018      	movs	r0, r3
 800874e:	f7ff fe1d 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2103      	movs	r1, #3
 8008756:	0018      	movs	r0, r3
 8008758:	f7ff fe18 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2104      	movs	r1, #4
 8008760:	0018      	movs	r0, r3
 8008762:	f7ff fe13 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2105      	movs	r1, #5
 800876a:	0018      	movs	r0, r3
 800876c:	f7ff fe0e 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2106      	movs	r1, #6
 8008774:	0018      	movs	r0, r3
 8008776:	f7ff fe09 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2107      	movs	r1, #7
 800877e:	0018      	movs	r0, r3
 8008780:	f7ff fe04 	bl	800838c <_LEDsegmentOn>
			break;
 8008784:	e03d      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2101      	movs	r1, #1
 800878a:	0018      	movs	r0, r3
 800878c:	f7ff fdfe 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2102      	movs	r1, #2
 8008794:	0018      	movs	r0, r3
 8008796:	f7ff fdf9 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2103      	movs	r1, #3
 800879e:	0018      	movs	r0, r3
 80087a0:	f7ff fdf4 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2104      	movs	r1, #4
 80087a8:	0018      	movs	r0, r3
 80087aa:	f7ff fdef 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2106      	movs	r1, #6
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff fdea 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2107      	movs	r1, #7
 80087bc:	0018      	movs	r0, r3
 80087be:	f7ff fde5 	bl	800838c <_LEDsegmentOn>
			break;
 80087c2:	e01e      	b.n	8008802 <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2101      	movs	r1, #1
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7ff fddf 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2102      	movs	r1, #2
 80087d2:	0018      	movs	r0, r3
 80087d4:	f7ff fdda 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2103      	movs	r1, #3
 80087dc:	0018      	movs	r0, r3
 80087de:	f7ff fdd5 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2104      	movs	r1, #4
 80087e6:	0018      	movs	r0, r3
 80087e8:	f7ff fdd0 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2105      	movs	r1, #5
 80087f0:	0018      	movs	r0, r3
 80087f2:	f7ff fdcb 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2106      	movs	r1, #6
 80087fa:	0018      	movs	r0, r3
 80087fc:	f7ff fdc6 	bl	800838c <_LEDsegmentOn>
			break;
 8008800:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 8008802:	e1e2      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		}
	} else {
		switch (character) {
 8008804:	1cfb      	adds	r3, r7, #3
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	3b2d      	subs	r3, #45	; 0x2d
 800880a:	2b47      	cmp	r3, #71	; 0x47
 800880c:	d900      	bls.n	8008810 <_LEDwriteCharacter+0x244>
 800880e:	e1dc      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
 8008810:	009a      	lsls	r2, r3, #2
 8008812:	4b66      	ldr	r3, [pc, #408]	; (80089ac <_LEDwriteCharacter+0x3e0>)
 8008814:	18d3      	adds	r3, r2, r3
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2101      	movs	r1, #1
 800881e:	0018      	movs	r0, r3
 8008820:	f7ff fdb4 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2102      	movs	r1, #2
 8008828:	0018      	movs	r0, r3
 800882a:	f7ff fdaf 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2103      	movs	r1, #3
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff fdaa 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2105      	movs	r1, #5
 800883c:	0018      	movs	r0, r3
 800883e:	f7ff fda5 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2106      	movs	r1, #6
 8008846:	0018      	movs	r0, r3
 8008848:	f7ff fda0 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2107      	movs	r1, #7
 8008850:	0018      	movs	r0, r3
 8008852:	f7ff fd9b 	bl	800838c <_LEDsegmentOn>
			break;
 8008856:	e1b8      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2103      	movs	r1, #3
 800885c:	0018      	movs	r0, r3
 800885e:	f7ff fd95 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2104      	movs	r1, #4
 8008866:	0018      	movs	r0, r3
 8008868:	f7ff fd90 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2105      	movs	r1, #5
 8008870:	0018      	movs	r0, r3
 8008872:	f7ff fd8b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2106      	movs	r1, #6
 800887a:	0018      	movs	r0, r3
 800887c:	f7ff fd86 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2107      	movs	r1, #7
 8008884:	0018      	movs	r0, r3
 8008886:	f7ff fd81 	bl	800838c <_LEDsegmentOn>
			break;
 800888a:	e19e      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2101      	movs	r1, #1
 8008890:	0018      	movs	r0, r3
 8008892:	f7ff fd7b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2104      	movs	r1, #4
 800889a:	0018      	movs	r0, r3
 800889c:	f7ff fd76 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2105      	movs	r1, #5
 80088a4:	0018      	movs	r0, r3
 80088a6:	f7ff fd71 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2106      	movs	r1, #6
 80088ae:	0018      	movs	r0, r3
 80088b0:	f7ff fd6c 	bl	800838c <_LEDsegmentOn>
			break;
 80088b4:	e189      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2104      	movs	r1, #4
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7ff fd66 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2105      	movs	r1, #5
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7ff fd61 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2107      	movs	r1, #7
 80088ce:	0018      	movs	r0, r3
 80088d0:	f7ff fd5c 	bl	800838c <_LEDsegmentOn>
			break;
 80088d4:	e179      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2101      	movs	r1, #1
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff fd56 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2102      	movs	r1, #2
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7ff fd51 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2103      	movs	r1, #3
 80088ee:	0018      	movs	r0, r3
 80088f0:	f7ff fd4c 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2104      	movs	r1, #4
 80088f8:	0018      	movs	r0, r3
 80088fa:	f7ff fd47 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2105      	movs	r1, #5
 8008902:	0018      	movs	r0, r3
 8008904:	f7ff fd42 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2106      	movs	r1, #6
 800890c:	0018      	movs	r0, r3
 800890e:	f7ff fd3d 	bl	800838c <_LEDsegmentOn>
			break;
 8008912:	e15a      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2102      	movs	r1, #2
 8008918:	0018      	movs	r0, r3
 800891a:	f7ff fd37 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2103      	movs	r1, #3
 8008922:	0018      	movs	r0, r3
 8008924:	f7ff fd32 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2104      	movs	r1, #4
 800892c:	0018      	movs	r0, r3
 800892e:	f7ff fd2d 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2105      	movs	r1, #5
 8008936:	0018      	movs	r0, r3
 8008938:	f7ff fd28 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2107      	movs	r1, #7
 8008940:	0018      	movs	r0, r3
 8008942:	f7ff fd23 	bl	800838c <_LEDsegmentOn>
			break;
 8008946:	e140      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2101      	movs	r1, #1
 800894c:	0018      	movs	r0, r3
 800894e:	f7ff fd1d 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2104      	movs	r1, #4
 8008956:	0018      	movs	r0, r3
 8008958:	f7ff fd18 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2105      	movs	r1, #5
 8008960:	0018      	movs	r0, r3
 8008962:	f7ff fd13 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2106      	movs	r1, #6
 800896a:	0018      	movs	r0, r3
 800896c:	f7ff fd0e 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2107      	movs	r1, #7
 8008974:	0018      	movs	r0, r3
 8008976:	f7ff fd09 	bl	800838c <_LEDsegmentOn>
			break;
 800897a:	e126      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2101      	movs	r1, #1
 8008980:	0018      	movs	r0, r3
 8008982:	f7ff fd03 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2105      	movs	r1, #5
 800898a:	0018      	movs	r0, r3
 800898c:	f7ff fcfe 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2106      	movs	r1, #6
 8008994:	0018      	movs	r0, r3
 8008996:	f7ff fcf9 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2107      	movs	r1, #7
 800899e:	0018      	movs	r0, r3
 80089a0:	f7ff fcf4 	bl	800838c <_LEDsegmentOn>
			break;
 80089a4:	e111      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	0800d634 	.word	0x0800d634
 80089ac:	0800d65c 	.word	0x0800d65c
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2102      	movs	r1, #2
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7ff fce9 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2103      	movs	r1, #3
 80089be:	0018      	movs	r0, r3
 80089c0:	f7ff fce4 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2105      	movs	r1, #5
 80089c8:	0018      	movs	r0, r3
 80089ca:	f7ff fcdf 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2106      	movs	r1, #6
 80089d2:	0018      	movs	r0, r3
 80089d4:	f7ff fcda 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2107      	movs	r1, #7
 80089dc:	0018      	movs	r0, r3
 80089de:	f7ff fcd5 	bl	800838c <_LEDsegmentOn>
			break;
 80089e2:	e0f2      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2103      	movs	r1, #3
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7ff fccf 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2105      	movs	r1, #5
 80089f2:	0018      	movs	r0, r3
 80089f4:	f7ff fcca 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2106      	movs	r1, #6
 80089fc:	0018      	movs	r0, r3
 80089fe:	f7ff fcc5 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2107      	movs	r1, #7
 8008a06:	0018      	movs	r0, r3
 8008a08:	f7ff fcc0 	bl	800838c <_LEDsegmentOn>
			break;
 8008a0c:	e0dd      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2102      	movs	r1, #2
 8008a12:	0018      	movs	r0, r3
 8008a14:	f7ff fcba 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2103      	movs	r1, #3
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7ff fcb5 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2104      	movs	r1, #4
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7ff fcb0 	bl	800838c <_LEDsegmentOn>
			break;
 8008a2c:	e0cd      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2104      	movs	r1, #4
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7ff fcaa 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2105      	movs	r1, #5
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff fca5 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2106      	movs	r1, #6
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7ff fca0 	bl	800838c <_LEDsegmentOn>
			break;
 8008a4c:	e0bd      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2101      	movs	r1, #1
 8008a52:	0018      	movs	r0, r3
 8008a54:	f7ff fc9a 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2102      	movs	r1, #2
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7ff fc95 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2103      	movs	r1, #3
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7ff fc90 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2104      	movs	r1, #4
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff fc8b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2105      	movs	r1, #5
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7ff fc86 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2106      	movs	r1, #6
 8008a84:	0018      	movs	r0, r3
 8008a86:	f7ff fc81 	bl	800838c <_LEDsegmentOn>
			break;
 8008a8a:	e09e      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2103      	movs	r1, #3
 8008a90:	0018      	movs	r0, r3
 8008a92:	f7ff fc7b 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2104      	movs	r1, #4
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f7ff fc76 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2105      	movs	r1, #5
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff fc71 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2107      	movs	r1, #7
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7ff fc6c 	bl	800838c <_LEDsegmentOn>
			break;
 8008ab4:	e089      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2101      	movs	r1, #1
 8008aba:	0018      	movs	r0, r3
 8008abc:	f7ff fc66 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f7ff fc61 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2105      	movs	r1, #5
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7ff fc5c 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2106      	movs	r1, #6
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fc57 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2107      	movs	r1, #7
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7ff fc52 	bl	800838c <_LEDsegmentOn>
			break;
 8008ae8:	e06f      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2105      	movs	r1, #5
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7ff fc4c 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2107      	movs	r1, #7
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff fc47 	bl	800838c <_LEDsegmentOn>
			break;
 8008afe:	e064      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2101      	movs	r1, #1
 8008b04:	0018      	movs	r0, r3
 8008b06:	f7ff fc41 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2106      	movs	r1, #6
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f7ff fc3c 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2107      	movs	r1, #7
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f7ff fc37 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2103      	movs	r1, #3
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7ff fc32 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2104      	movs	r1, #4
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff fc2d 	bl	800838c <_LEDsegmentOn>
			break;
 8008b32:	e04a      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2105      	movs	r1, #5
 8008b38:	0018      	movs	r0, r3
 8008b3a:	f7ff fc27 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2106      	movs	r1, #6
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff fc22 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2107      	movs	r1, #7
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f7ff fc1d 	bl	800838c <_LEDsegmentOn>
			break;
 8008b52:	e03a      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2102      	movs	r1, #2
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f7ff fc17 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2103      	movs	r1, #3
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7ff fc12 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f7ff fc0d 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2105      	movs	r1, #5
 8008b76:	0018      	movs	r0, r3
 8008b78:	f7ff fc08 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2106      	movs	r1, #6
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff fc03 	bl	800838c <_LEDsegmentOn>
			break;
 8008b86:	e020      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2107      	movs	r1, #7
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7ff fbfd 	bl	800838c <_LEDsegmentOn>
			break;
 8008b92:	e01a      	b.n	8008bca <_LEDwriteCharacter+0x5fe>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2104      	movs	r1, #4
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7ff fbf7 	bl	800838c <_LEDsegmentOn>
			break;
 8008b9e:	e014      	b.n	8008bca <_LEDwriteCharacter+0x5fe>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f7ff fbf1 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2102      	movs	r1, #2
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7ff fbec 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2106      	movs	r1, #6
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f7ff fbe7 	bl	800838c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2107      	movs	r1, #7
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f7ff fbe2 	bl	800838c <_LEDsegmentOn>
			break;
 8008bc8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b002      	add	sp, #8
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)

08008bd4 <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	1dbb      	adds	r3, r7, #6
 8008be2:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1dba      	adds	r2, r7, #6
 8008bee:	2140      	movs	r1, #64	; 0x40
 8008bf0:	8812      	ldrh	r2, [r2, #0]
 8008bf2:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	2318      	movs	r3, #24
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	2148      	movs	r1, #72	; 0x48
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	18ba      	adds	r2, r7, r2
 8008c12:	2150      	movs	r1, #80	; 0x50
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1c:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2228      	movs	r2, #40	; 0x28
 8008c22:	18ba      	adds	r2, r7, r2
 8008c24:	2158      	movs	r1, #88	; 0x58
 8008c26:	8812      	ldrh	r2, [r2, #0]
 8008c28:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2e:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2230      	movs	r2, #48	; 0x30
 8008c34:	18ba      	adds	r2, r7, r2
 8008c36:	8812      	ldrh	r2, [r2, #0]
 8008c38:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3e:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2238      	movs	r2, #56	; 0x38
 8008c44:	18ba      	adds	r2, r7, r2
 8008c46:	8812      	ldrh	r2, [r2, #0]
 8008c48:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c4e:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2240      	movs	r2, #64	; 0x40
 8008c54:	18ba      	adds	r2, r7, r2
 8008c56:	8812      	ldrh	r2, [r2, #0]
 8008c58:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5e:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2248      	movs	r2, #72	; 0x48
 8008c64:	18ba      	adds	r2, r7, r2
 8008c66:	8812      	ldrh	r2, [r2, #0]
 8008c68:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c6e:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2250      	movs	r2, #80	; 0x50
 8008c74:	18ba      	adds	r2, r7, r2
 8008c76:	8812      	ldrh	r2, [r2, #0]
 8008c78:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2240      	movs	r2, #64	; 0x40
 8008c84:	2118      	movs	r1, #24
 8008c86:	468c      	mov	ip, r1
 8008c88:	44bc      	add	ip, r7
 8008c8a:	4462      	add	r2, ip
 8008c8c:	8812      	ldrh	r2, [r2, #0]
 8008c8e:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c94:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2248      	movs	r2, #72	; 0x48
 8008c9a:	2118      	movs	r1, #24
 8008c9c:	468c      	mov	ip, r1
 8008c9e:	44bc      	add	ip, r7
 8008ca0:	4462      	add	r2, ip
 8008ca2:	8812      	ldrh	r2, [r2, #0]
 8008ca4:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008caa:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2250      	movs	r2, #80	; 0x50
 8008cb0:	2118      	movs	r1, #24
 8008cb2:	468c      	mov	ip, r1
 8008cb4:	44bc      	add	ip, r7
 8008cb6:	4462      	add	r2, ip
 8008cb8:	8812      	ldrh	r2, [r2, #0]
 8008cba:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f000 f82f 	bl	8008d22 <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2265      	movs	r2, #101	; 0x65
 8008cc8:	2100      	movs	r1, #0
 8008cca:	5499      	strb	r1, [r3, r2]
}
 8008ccc:	46c0      	nop			; (mov r8, r8)
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b004      	add	sp, #16
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char* separator){
 8008cd4:	b590      	push	{r4, r7, lr}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8008cde:	230f      	movs	r3, #15
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e012      	b.n	8008d0e <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 8008ce8:	240f      	movs	r4, #15
 8008cea:	193b      	adds	r3, r7, r4
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	18d2      	adds	r2, r2, r3
 8008cf2:	193b      	adds	r3, r7, r4
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	7810      	ldrb	r0, [r2, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	2168      	movs	r1, #104	; 0x68
 8008cfc:	18d3      	adds	r3, r2, r3
 8008cfe:	185b      	adds	r3, r3, r1
 8008d00:	1c02      	adds	r2, r0, #0
 8008d02:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8008d04:	193b      	adds	r3, r7, r4
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	193b      	adds	r3, r7, r4
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
 8008d0e:	230f      	movs	r3, #15
 8008d10:	18fb      	adds	r3, r7, r3
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d9e7      	bls.n	8008ce8 <LEDseparator+0x14>
	}
}
 8008d18:	46c0      	nop			; (mov r8, r8)
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	b005      	add	sp, #20
 8008d20:	bd90      	pop	{r4, r7, pc}

08008d22 <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3360      	adds	r3, #96	; 0x60
 8008d2e:	2204      	movs	r2, #4
 8008d30:	2120      	movs	r1, #32
 8008d32:	0018      	movs	r0, r3
 8008d34:	f003 fd81 	bl	800c83a <memset>
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2264      	movs	r2, #100	; 0x64
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	5499      	strb	r1, [r3, r2]
	_LEDallOff(LEDdisplay);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	0018      	movs	r0, r3
 8008d44:	f7ff fbd6 	bl	80084f4 <_LEDallOff>
}
 8008d48:	46c0      	nop			; (mov r8, r8)
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	b002      	add	sp, #8
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	0008      	movs	r0, r1
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	0019      	movs	r1, r3
 8008d5e:	230b      	movs	r3, #11
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	1c02      	adds	r2, r0, #0
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	230a      	movs	r3, #10
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	1c0a      	adds	r2, r1, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8008d6e:	2317      	movs	r3, #23
 8008d70:	18fb      	adds	r3, r7, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	e02f      	b.n	8008dd8 <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 8008d78:	230a      	movs	r3, #10
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10e      	bne.n	8008da0 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 8008d82:	2117      	movs	r1, #23
 8008d84:	187b      	adds	r3, r7, r1
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	18d2      	adds	r2, r2, r3
 8008d8c:	187b      	adds	r3, r7, r1
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	7810      	ldrb	r0, [r2, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	2160      	movs	r1, #96	; 0x60
 8008d96:	18d3      	adds	r3, r2, r3
 8008d98:	185b      	adds	r3, r3, r1
 8008d9a:	1c02      	adds	r2, r0, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	e015      	b.n	8008dcc <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8008da0:	2117      	movs	r1, #23
 8008da2:	187b      	adds	r3, r7, r1
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	18d2      	adds	r2, r2, r3
 8008daa:	187b      	adds	r3, r7, r1
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	7810      	ldrb	r0, [r2, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	216e      	movs	r1, #110	; 0x6e
 8008db4:	18d3      	adds	r3, r2, r3
 8008db6:	185b      	adds	r3, r3, r1
 8008db8:	1c02      	adds	r2, r0, #0
 8008dba:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8008dbc:	230a      	movs	r3, #10
 8008dbe:	18fb      	adds	r3, r7, r3
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	0011      	movs	r1, r2
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f7ff facc 	bl	8008364 <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8008dcc:	2117      	movs	r1, #23
 8008dce:	187b      	adds	r3, r7, r1
 8008dd0:	781a      	ldrb	r2, [r3, #0]
 8008dd2:	187b      	adds	r3, r7, r1
 8008dd4:	3201      	adds	r2, #1
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	2317      	movs	r3, #23
 8008dda:	18fb      	adds	r3, r7, r3
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d9ca      	bls.n	8008d78 <LEDstr+0x28>
		}

	}
}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46c0      	nop			; (mov r8, r8)
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b006      	add	sp, #24
 8008dea:	bd80      	pop	{r7, pc}

08008dec <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	000a      	movs	r2, r1
 8008df6:	1cfb      	adds	r3, r7, #3
 8008df8:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	1cfa      	adds	r2, r7, #3
 8008dfe:	2164      	movs	r1, #100	; 0x64
 8008e00:	7812      	ldrb	r2, [r2, #0]
 8008e02:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8008e04:	46c0      	nop			; (mov r8, r8)
 8008e06:	46bd      	mov	sp, r7
 8008e08:	b002      	add	sp, #8
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <adcInit>:
 *
 * @param  adc handler
 *
 * @retval None
 */
void adcInit(ADC_HandleTypeDef *adcHandler){
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(adcHandler);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	0018      	movs	r0, r3
 8008e18:	f7fb fb68 	bl	80044ec <HAL_ADCEx_Calibration_Start>
}
 8008e1c:	46c0      	nop			; (mov r8, r8)
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b002      	add	sp, #8
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <adcSetChannel>:
 *
 * @param adc channel- e.g. ADC_CHANNEL_0, ADC_CHANNEL_TEMPSENSOR
 *
 * @retval None
 */
void adcSetChannel(ADC_HandleTypeDef *adcHandler, uint32_t channel) {
 8008e24:	b590      	push	{r4, r7, lr}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef chConf = { 0 };
 8008e2e:	240c      	movs	r4, #12
 8008e30:	193b      	adds	r3, r7, r4
 8008e32:	0018      	movs	r0, r3
 8008e34:	230c      	movs	r3, #12
 8008e36:	001a      	movs	r2, r3
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f003 fcfe 	bl	800c83a <memset>
	chConf.Channel = channel;
 8008e3e:	193b      	adds	r3, r7, r4
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	601a      	str	r2, [r3, #0]
	chConf.Rank = ADC_REGULAR_RANK_1;
 8008e44:	193b      	adds	r3, r7, r4
 8008e46:	2200      	movs	r2, #0
 8008e48:	605a      	str	r2, [r3, #4]
	chConf.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8008e4a:	193b      	adds	r3, r7, r4
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(adcHandler, &chConf) != HAL_OK) {
 8008e50:	193a      	adds	r2, r7, r4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	0011      	movs	r1, r2
 8008e56:	0018      	movs	r0, r3
 8008e58:	f7fb f868 	bl	8003f2c <HAL_ADC_ConfigChannel>
 8008e5c:	1e03      	subs	r3, r0, #0
 8008e5e:	d001      	beq.n	8008e64 <adcSetChannel+0x40>
		Error_Handler();
 8008e60:	f002 f80c 	bl	800ae7c <Error_Handler>
	}

}
 8008e64:	46c0      	nop			; (mov r8, r8)
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b007      	add	sp, #28
 8008e6a:	bd90      	pop	{r4, r7, pc}

08008e6c <adcRead>:
 *
 * @param  adc handler
 *
 * @retval raw adc reading
 */
uint32_t adcRead(ADC_HandleTypeDef *adcHandler){
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adcHandler);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	0018      	movs	r0, r3
 8008e78:	f7fa ff6a 	bl	8003d50 <HAL_ADC_Start>

	while(HAL_ADC_PollForConversion(adcHandler, 100) != HAL_OK);
 8008e7c:	46c0      	nop			; (mov r8, r8)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2164      	movs	r1, #100	; 0x64
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7fa ffb2 	bl	8003dec <HAL_ADC_PollForConversion>
 8008e88:	1e03      	subs	r3, r0, #0
 8008e8a:	d1f8      	bne.n	8008e7e <adcRead+0x12>
	return HAL_ADC_GetValue(adcHandler);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7fb f840 	bl	8003f14 <HAL_ADC_GetValue>
 8008e94:	0003      	movs	r3, r0


}
 8008e96:	0018      	movs	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b002      	add	sp, #8
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <adcTemperature>:
 *
 * @param  adc handler
 *
 * @retval temperature in Celcius degree
 */
uint32_t adcTemperature(uint32_t adcReading, uint32_t reference){
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
	return __HAL_ADC_CALC_TEMPERATURE(reference, adcReading, ADC_RESOLUTION_12B);
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <adcTemperature+0x58>)
 8008eac:	881a      	ldrh	r2, [r3, #0]
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <adcTemperature+0x5c>)
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d01a      	beq.n	8008eec <adcTemperature+0x4c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	4353      	muls	r3, r2
 8008ebc:	4910      	ldr	r1, [pc, #64]	; (8008f00 <adcTemperature+0x60>)
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f7f7 f92a 	bl	8000118 <__udivsi3>
 8008ec4:	0003      	movs	r3, r0
 8008ec6:	001a      	movs	r2, r3
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <adcTemperature+0x5c>)
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2264      	movs	r2, #100	; 0x64
 8008ed0:	4353      	muls	r3, r2
 8008ed2:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <adcTemperature+0x58>)
 8008ed4:	8812      	ldrh	r2, [r2, #0]
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	4a08      	ldr	r2, [pc, #32]	; (8008efc <adcTemperature+0x5c>)
 8008eda:	8812      	ldrh	r2, [r2, #0]
 8008edc:	1a8a      	subs	r2, r1, r2
 8008ede:	0011      	movs	r1, r2
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	f7f7 f9a3 	bl	800022c <__divsi3>
 8008ee6:	0003      	movs	r3, r0
 8008ee8:	331e      	adds	r3, #30
 8008eea:	e000      	b.n	8008eee <adcTemperature+0x4e>
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <adcTemperature+0x64>)
}
 8008eee:	0018      	movs	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	b002      	add	sp, #8
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	46c0      	nop			; (mov r8, r8)
 8008ef8:	1fff75ca 	.word	0x1fff75ca
 8008efc:	1fff75a8 	.word	0x1fff75a8
 8008f00:	00000bb8 	.word	0x00000bb8
 8008f04:	00007fff 	.word	0x00007fff

08008f08 <adcVoltage>:
 *
 * @param  adc handler
 *
 * @retval voltage in mV
 */
uint32_t adcVoltage(uint32_t adcReading){
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
//	return (3300*1000)/4095;
	return __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcReading, ADC_RESOLUTION_12B);
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <adcVoltage+0x24>)
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	001a      	movs	r2, r3
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <adcVoltage+0x28>)
 8008f18:	4353      	muls	r3, r2
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f7f7 f8fb 	bl	8000118 <__udivsi3>
 8008f22:	0003      	movs	r3, r0
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b002      	add	sp, #8
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	1fff75aa 	.word	0x1fff75aa
 8008f30:	00000bb8 	.word	0x00000bb8

08008f34 <bme280Init>:
 *
 * @param  i2C handler
 *
 * @retval None
 */
void bme280Init(bme280TypeDef *bme280, I2C_HandleTypeDef *I2Chandler) {
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b091      	sub	sp, #68	; 0x44
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]

	bme280->I2Chandler = I2Chandler;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	645a      	str	r2, [r3, #68]	; 0x44

	bme280->i2cTimeout = BME280_I2C_TIMEOUT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2264      	movs	r2, #100	; 0x64
 8008f48:	76da      	strb	r2, [r3, #27]
//	bme280->ctrlHum = 0x01; //oversampling for humidity disabled
////	bme280->ctrlMeas = 0x24; //oversampling for temp, pressure disabled
//	bme280->ctrlMeas = 0x34; //pressure oversampling x16

//set oversampling
	bme280->ctrlMeas = (BME280_OVERSAMPLING_TEM << 5)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	22b4      	movs	r2, #180	; 0xb4
 8008f4e:	761a      	strb	r2, [r3, #24]
			| (BME280_OVERSAMPLING_PRE << 2);
	bme280->ctrlHum = BME280_OVERSAMPLING_HUM;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2205      	movs	r2, #5
 8008f54:	765a      	strb	r2, [r3, #25]
	bme280->config = BME280_IIR_FILTER << 2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2208      	movs	r2, #8
 8008f5a:	769a      	strb	r2, [r3, #26]
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								READING CALIBRATION DATA

	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_T, 6, bme280->i2cTimeout) != HAL_OK) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7edb      	ldrb	r3, [r3, #27]
	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 8008f64:	9302      	str	r3, [sp, #8]
 8008f66:	2306      	movs	r3, #6
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	2428      	movs	r4, #40	; 0x28
 8008f6c:	193b      	adds	r3, r7, r4
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	2301      	movs	r3, #1
 8008f72:	2288      	movs	r2, #136	; 0x88
 8008f74:	21ee      	movs	r1, #238	; 0xee
 8008f76:	f7fb ffa5 	bl	8004ec4 <HAL_I2C_Mem_Read>

	}
	bme280->dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 8008f7a:	0021      	movs	r1, r4
 8008f7c:	187b      	adds	r3, r7, r1
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b21a      	sxth	r2, r3
 8008f82:	187b      	adds	r3, r7, r1
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	b21b      	sxth	r3, r3
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	b21b      	sxth	r3, r3
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	839a      	strh	r2, [r3, #28]
	bme280->dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 8008f94:	187b      	adds	r3, r7, r1
 8008f96:	789b      	ldrb	r3, [r3, #2]
 8008f98:	b21a      	sxth	r2, r3
 8008f9a:	187b      	adds	r3, r7, r1
 8008f9c:	78db      	ldrb	r3, [r3, #3]
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	b21b      	sxth	r3, r3
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	b21a      	sxth	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	83da      	strh	r2, [r3, #30]
	bme280->dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 8008faa:	187b      	adds	r3, r7, r1
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	b21a      	sxth	r2, r3
 8008fb0:	187b      	adds	r3, r7, r1
 8008fb2:	791b      	ldrb	r3, [r3, #4]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	b21b      	sxth	r3, r3
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	b21a      	sxth	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	841a      	strh	r2, [r3, #32]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_P, 18, bme280->i2cTimeout);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 8008fc8:	9302      	str	r3, [sp, #8]
 8008fca:	2312      	movs	r3, #18
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	2414      	movs	r4, #20
 8008fd0:	193b      	adds	r3, r7, r4
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	228e      	movs	r2, #142	; 0x8e
 8008fd8:	21ee      	movs	r1, #238	; 0xee
 8008fda:	f7fb ff73 	bl	8004ec4 <HAL_I2C_Mem_Read>
	bme280->dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 8008fde:	0021      	movs	r1, r4
 8008fe0:	187b      	adds	r3, r7, r1
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b21a      	sxth	r2, r3
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	785b      	ldrb	r3, [r3, #1]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	b21b      	sxth	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b21b      	sxth	r3, r3
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280->dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 8008ff8:	187b      	adds	r3, r7, r1
 8008ffa:	789b      	ldrb	r3, [r3, #2]
 8008ffc:	b21a      	sxth	r2, r3
 8008ffe:	187b      	adds	r3, r7, r1
 8009000:	78db      	ldrb	r3, [r3, #3]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	b21b      	sxth	r3, r3
 8009006:	4313      	orrs	r3, r2
 8009008:	b21a      	sxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280->dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800900e:	187b      	adds	r3, r7, r1
 8009010:	791b      	ldrb	r3, [r3, #4]
 8009012:	b21a      	sxth	r2, r3
 8009014:	187b      	adds	r3, r7, r1
 8009016:	795b      	ldrb	r3, [r3, #5]
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	b21b      	sxth	r3, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	b21a      	sxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280->dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 8009024:	187b      	adds	r3, r7, r1
 8009026:	799b      	ldrb	r3, [r3, #6]
 8009028:	b21a      	sxth	r2, r3
 800902a:	187b      	adds	r3, r7, r1
 800902c:	79db      	ldrb	r3, [r3, #7]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	b21b      	sxth	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b21a      	sxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280->dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 800903a:	187b      	adds	r3, r7, r1
 800903c:	7a1b      	ldrb	r3, [r3, #8]
 800903e:	b21a      	sxth	r2, r3
 8009040:	187b      	adds	r3, r7, r1
 8009042:	7a5b      	ldrb	r3, [r3, #9]
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b21b      	sxth	r3, r3
 8009048:	4313      	orrs	r3, r2
 800904a:	b21a      	sxth	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280->dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 8009050:	187b      	adds	r3, r7, r1
 8009052:	7a9b      	ldrb	r3, [r3, #10]
 8009054:	b21a      	sxth	r2, r3
 8009056:	187b      	adds	r3, r7, r1
 8009058:	7adb      	ldrb	r3, [r3, #11]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	b21b      	sxth	r3, r3
 800905e:	4313      	orrs	r3, r2
 8009060:	b21a      	sxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280->dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 8009066:	187b      	adds	r3, r7, r1
 8009068:	7b1b      	ldrb	r3, [r3, #12]
 800906a:	b21a      	sxth	r2, r3
 800906c:	187b      	adds	r3, r7, r1
 800906e:	7b5b      	ldrb	r3, [r3, #13]
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	b21b      	sxth	r3, r3
 8009074:	4313      	orrs	r3, r2
 8009076:	b21a      	sxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	85da      	strh	r2, [r3, #46]	; 0x2e
	bme280->dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 800907c:	187b      	adds	r3, r7, r1
 800907e:	7b9b      	ldrb	r3, [r3, #14]
 8009080:	b21a      	sxth	r2, r3
 8009082:	187b      	adds	r3, r7, r1
 8009084:	7bdb      	ldrb	r3, [r3, #15]
 8009086:	021b      	lsls	r3, r3, #8
 8009088:	b21b      	sxth	r3, r3
 800908a:	4313      	orrs	r3, r2
 800908c:	b21a      	sxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	861a      	strh	r2, [r3, #48]	; 0x30
	bme280->dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 8009092:	187b      	adds	r3, r7, r1
 8009094:	7c1b      	ldrb	r3, [r3, #16]
 8009096:	b21a      	sxth	r2, r3
 8009098:	187b      	adds	r3, r7, r1
 800909a:	7c5b      	ldrb	r3, [r3, #17]
 800909c:	021b      	lsls	r3, r3, #8
 800909e:	b21b      	sxth	r3, r3
 80090a0:	4313      	orrs	r3, r2
 80090a2:	b21a      	sxth	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	865a      	strh	r2, [r3, #50]	; 0x32

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c58      	ldr	r0, [r3, #68]	; 0x44
			&dig_H_1, 1, bme280->i2cTimeout);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	2301      	movs	r3, #1
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	2413      	movs	r4, #19
 80090b8:	193b      	adds	r3, r7, r4
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2301      	movs	r3, #1
 80090be:	22a1      	movs	r2, #161	; 0xa1
 80090c0:	21ee      	movs	r1, #238	; 0xee
 80090c2:	f7fb feff 	bl	8004ec4 <HAL_I2C_Mem_Read>
	bme280->dig_H1 = ((unsigned char) dig_H_1);
 80090c6:	193b      	adds	r3, r7, r4
 80090c8:	7819      	ldrb	r1, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2234      	movs	r2, #52	; 0x34
 80090ce:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_H_2_6, 7, bme280->i2cTimeout);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 80090d8:	9302      	str	r3, [sp, #8]
 80090da:	2307      	movs	r3, #7
 80090dc:	9301      	str	r3, [sp, #4]
 80090de:	240c      	movs	r4, #12
 80090e0:	193b      	adds	r3, r7, r4
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	2301      	movs	r3, #1
 80090e6:	22e1      	movs	r2, #225	; 0xe1
 80090e8:	21ee      	movs	r1, #238	; 0xee
 80090ea:	f7fb feeb 	bl	8004ec4 <HAL_I2C_Mem_Read>
	bme280->dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 80090ee:	0020      	movs	r0, r4
 80090f0:	183b      	adds	r3, r7, r0
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b21a      	sxth	r2, r3
 80090f6:	183b      	adds	r3, r7, r0
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	b21b      	sxth	r3, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	b21a      	sxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	86da      	strh	r2, [r3, #54]	; 0x36
	bme280->dig_H3 = ((unsigned char) dig_H_2_6[2]);
 8009106:	183b      	adds	r3, r7, r0
 8009108:	7899      	ldrb	r1, [r3, #2]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2238      	movs	r2, #56	; 0x38
 800910e:	5499      	strb	r1, [r3, r2]

	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 8009110:	183b      	adds	r3, r7, r0
 8009112:	78db      	ldrb	r3, [r3, #3]
 8009114:	011b      	lsls	r3, r3, #4
			| (((int16_t) dig_H_2_6[4]) & 0x0f));
 8009116:	b21a      	sxth	r2, r3
 8009118:	183b      	adds	r3, r7, r0
 800911a:	791b      	ldrb	r3, [r3, #4]
 800911c:	b21b      	sxth	r3, r3
 800911e:	210f      	movs	r1, #15
 8009120:	400b      	ands	r3, r1
 8009122:	b21b      	sxth	r3, r3
 8009124:	4313      	orrs	r3, r2
 8009126:	b21a      	sxth	r2, r3
	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	875a      	strh	r2, [r3, #58]	; 0x3a
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 800912c:	183b      	adds	r3, r7, r0
 800912e:	791b      	ldrb	r3, [r3, #4]
			| ((int16_t) dig_H_2_6[5]) << 4);
 8009130:	091b      	lsrs	r3, r3, #4
 8009132:	b2db      	uxtb	r3, r3
 8009134:	b21a      	sxth	r2, r3
 8009136:	183b      	adds	r3, r7, r0
 8009138:	795b      	ldrb	r3, [r3, #5]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	b21b      	sxth	r3, r3
 800913e:	4313      	orrs	r3, r2
 8009140:	b21a      	sxth	r2, r3
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	879a      	strh	r2, [r3, #60]	; 0x3c
	bme280->dig_H6 = ((unsigned char) dig_H_2_6[6]);
 8009146:	183b      	adds	r3, r7, r0
 8009148:	7999      	ldrb	r1, [r3, #6]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	223e      	movs	r2, #62	; 0x3e
 800914e:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3318      	adds	r3, #24
			&bme280->ctrlMeas, 1, bme280->i2cTimeout); //write temp and press oversampling
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800915c:	9202      	str	r2, [sp, #8]
 800915e:	2201      	movs	r2, #1
 8009160:	9201      	str	r2, [sp, #4]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2301      	movs	r3, #1
 8009166:	22f4      	movs	r2, #244	; 0xf4
 8009168:	21ee      	movs	r1, #238	; 0xee
 800916a:	f7fb fd7d 	bl	8004c68 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3319      	adds	r3, #25
			&bme280->ctrlHum, 1, bme280->i2cTimeout); //write humidity oversampling
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800917a:	9202      	str	r2, [sp, #8]
 800917c:	2201      	movs	r2, #1
 800917e:	9201      	str	r2, [sp, #4]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2301      	movs	r3, #1
 8009184:	22f2      	movs	r2, #242	; 0xf2
 8009186:	21ee      	movs	r1, #238	; 0xee
 8009188:	f7fb fd6e 	bl	8004c68 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	331a      	adds	r3, #26
				&bme280->config, 1, bme280->i2cTimeout); //write iir filter config
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	2201      	movs	r2, #1
 800919c:	9201      	str	r2, [sp, #4]
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2301      	movs	r3, #1
 80091a2:	22f5      	movs	r2, #245	; 0xf5
 80091a4:	21ee      	movs	r1, #238	; 0xee
 80091a6:	f7fb fd5f 	bl	8004c68 <HAL_I2C_Mem_Write>


}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b00d      	add	sp, #52	; 0x34
 80091b0:	bd90      	pop	{r4, r7, pc}
	...

080091b4 <bme280Read>:
 *
 * @param  BME280 handler
 *
 * @retval None
 */
void bme280Read(bme280TypeDef *bme280) {
 80091b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091b6:	b08d      	sub	sp, #52	; 0x34
 80091b8:	af04      	add	r7, sp, #16
 80091ba:	6078      	str	r0, [r7, #4]

	uint8_t readings[8] = {0};
 80091bc:	230c      	movs	r3, #12
 80091be:	18fb      	adds	r3, r7, r3
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	605a      	str	r2, [r3, #4]

	//adc data
	int32_t temperatureADC = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]
	int32_t pressureADC = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61bb      	str	r3, [r7, #24]
	int32_t humidityADC = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]

	//start measure by setting las bit of ctrlMeas register
	uint8_t startConversion = (bme280->ctrlMeas) + 1;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7e1b      	ldrb	r3, [r3, #24]
 80091d8:	3301      	adds	r3, #1
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	210b      	movs	r1, #11
 80091de:	187b      	adds	r3, r7, r1
 80091e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c58      	ldr	r0, [r3, #68]	; 0x44
			&startConversion, 1, bme280->i2cTimeout);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	2301      	movs	r3, #1
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	187b      	adds	r3, r7, r1
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	2301      	movs	r3, #1
 80091f6:	22f4      	movs	r2, #244	; 0xf4
 80091f8:	21ee      	movs	r1, #238	; 0xee
 80091fa:	f7fb fd35 	bl	8004c68 <HAL_I2C_Mem_Write>

	//wait for measurement
	uint8_t status = 0;
 80091fe:	230a      	movs	r3, #10
 8009200:	18fb      	adds	r3, r7, r3
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
	do {
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c58      	ldr	r0, [r3, #68]	; 0x44
				&status, 1, bme280->i2cTimeout);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7edb      	ldrb	r3, [r3, #27]
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	2301      	movs	r3, #1
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	260a      	movs	r6, #10
 8009216:	19bb      	adds	r3, r7, r6
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	2301      	movs	r3, #1
 800921c:	22f3      	movs	r2, #243	; 0xf3
 800921e:	21ee      	movs	r1, #238	; 0xee
 8009220:	f7fb fe50 	bl	8004ec4 <HAL_I2C_Mem_Read>
	} while (((status >> 3) & 1) == 1);
 8009224:	19bb      	adds	r3, r7, r6
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	08db      	lsrs	r3, r3, #3
 800922a:	b2db      	uxtb	r3, r3
 800922c:	001a      	movs	r2, r3
 800922e:	2301      	movs	r3, #1
 8009230:	4013      	ands	r3, r2
 8009232:	d1e8      	bne.n	8009206 <bme280Read+0x52>

	//read output registers
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6c58      	ldr	r0, [r3, #68]	; 0x44
			readings, 8, bme280->i2cTimeout);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 800923c:	9302      	str	r3, [sp, #8]
 800923e:	2308      	movs	r3, #8
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	260c      	movs	r6, #12
 8009244:	19bb      	adds	r3, r7, r6
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	2301      	movs	r3, #1
 800924a:	22f7      	movs	r2, #247	; 0xf7
 800924c:	21ee      	movs	r1, #238	; 0xee
 800924e:	f7fb fe39 	bl	8004ec4 <HAL_I2C_Mem_Read>


	//TEMPERATURE
	temperatureADC = ((((int32_t) readings[3] << 12)
 8009252:	19bb      	adds	r3, r7, r6
 8009254:	78db      	ldrb	r3, [r3, #3]
 8009256:	031a      	lsls	r2, r3, #12
			| ((int32_t) readings[4] << 4) | ((int32_t) readings[5] >> 4)));
 8009258:	19bb      	adds	r3, r7, r6
 800925a:	791b      	ldrb	r3, [r3, #4]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	4313      	orrs	r3, r2
 8009260:	19ba      	adds	r2, r7, r6
 8009262:	7952      	ldrb	r2, [r2, #5]
 8009264:	0912      	lsrs	r2, r2, #4
 8009266:	b2d2      	uxtb	r2, r2
	temperatureADC = ((((int32_t) readings[3] << 12)
 8009268:	4313      	orrs	r3, r2
 800926a:	61fb      	str	r3, [r7, #28]

	bme280->temperatureValue = (_BME280_compensate_T_int32(bme280,
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	0011      	movs	r1, r2
 8009272:	0018      	movs	r0, r3
 8009274:	f000 f8a0 	bl	80093b8 <_BME280_compensate_T_int32>
 8009278:	0002      	movs	r2, r0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	605a      	str	r2, [r3, #4]
			temperatureADC));

	//PRESSURE
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 800927e:	19bb      	adds	r3, r7, r6
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	031a      	lsls	r2, r3, #12
 8009284:	19bb      	adds	r3, r7, r6
 8009286:	785b      	ldrb	r3, [r3, #1]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	4313      	orrs	r3, r2
			| ((int32_t) readings[2] >> 4)));
 800928c:	19ba      	adds	r2, r7, r6
 800928e:	7892      	ldrb	r2, [r2, #2]
 8009290:	0912      	lsrs	r2, r2, #4
 8009292:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 8009294:	4313      	orrs	r3, r2
 8009296:	61bb      	str	r3, [r7, #24]

	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	0011      	movs	r1, r2
 800929e:	0018      	movs	r0, r3
 80092a0:	f000 f8c0 	bl	8009424 <_BME280_compensate_P_int64>
 80092a4:	0003      	movs	r3, r0
			/ 256;
 80092a6:	0a1a      	lsrs	r2, r3, #8
	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	609a      	str	r2, [r3, #8]

	//HUMIDITY
	humidityADC = (((int32_t) readings[6] << 8) | (int32_t) readings[7]);
 80092ac:	19bb      	adds	r3, r7, r6
 80092ae:	799b      	ldrb	r3, [r3, #6]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	19ba      	adds	r2, r7, r6
 80092b4:	79d2      	ldrb	r2, [r2, #7]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]

	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0011      	movs	r1, r2
 80092c0:	0018      	movs	r0, r3
 80092c2:	f000 fa5f 	bl	8009784 <_BME280_compensate_H_int32>
 80092c6:	0003      	movs	r3, r0
			/ 1024;
 80092c8:	0a9a      	lsrs	r2, r3, #10
	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60da      	str	r2, [r3, #12]
	 * T- air temperature[K]
	 *
	 */

	bme280->altitudeValue = (-((8.314
			* ((((float) bme280->temperatureValue) / 100) + 273.15))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7f7 ffec 	bl	80012b0 <__aeabi_i2f>
 80092d8:	1c03      	adds	r3, r0, #0
 80092da:	492f      	ldr	r1, [pc, #188]	; (8009398 <bme280Read+0x1e4>)
 80092dc:	1c18      	adds	r0, r3, #0
 80092de:	f7f7 fbd9 	bl	8000a94 <__aeabi_fdiv>
 80092e2:	1c03      	adds	r3, r0, #0
 80092e4:	1c18      	adds	r0, r3, #0
 80092e6:	f7f9 fe7d 	bl	8002fe4 <__aeabi_f2d>
 80092ea:	4a2c      	ldr	r2, [pc, #176]	; (800939c <bme280Read+0x1e8>)
 80092ec:	4b2c      	ldr	r3, [pc, #176]	; (80093a0 <bme280Read+0x1ec>)
 80092ee:	f7f8 f861 	bl	80013b4 <__aeabi_dadd>
 80092f2:	0002      	movs	r2, r0
 80092f4:	000b      	movs	r3, r1
 80092f6:	0010      	movs	r0, r2
 80092f8:	0019      	movs	r1, r3
 80092fa:	4a2a      	ldr	r2, [pc, #168]	; (80093a4 <bme280Read+0x1f0>)
 80092fc:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <bme280Read+0x1f4>)
 80092fe:	f7f8 ffc9 	bl	8002294 <__aeabi_dmul>
 8009302:	0002      	movs	r2, r0
 8009304:	000b      	movs	r3, r1
 8009306:	0010      	movs	r0, r2
 8009308:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 800930a:	4a28      	ldr	r2, [pc, #160]	; (80093ac <bme280Read+0x1f8>)
 800930c:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <bme280Read+0x1fc>)
 800930e:	f7f8 fbbb 	bl	8001a88 <__aeabi_ddiv>
 8009312:	0002      	movs	r2, r0
 8009314:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 8009316:	0011      	movs	r1, r2
 8009318:	000c      	movs	r4, r1
 800931a:	2180      	movs	r1, #128	; 0x80
 800931c:	0609      	lsls	r1, r1, #24
 800931e:	4059      	eors	r1, r3
 8009320:	000d      	movs	r5, r1
			* log(
					(float) bme280->pressureValue
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	0018      	movs	r0, r3
 8009328:	f7f8 f808 	bl	800133c <__aeabi_ui2f>
 800932c:	1c06      	adds	r6, r0, #0
							/ (((float) bme280->pressureReference) * 100)))*100;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	0018      	movs	r0, r3
 8009334:	f7f8 f802 	bl	800133c <__aeabi_ui2f>
 8009338:	1c03      	adds	r3, r0, #0
 800933a:	4917      	ldr	r1, [pc, #92]	; (8009398 <bme280Read+0x1e4>)
 800933c:	1c18      	adds	r0, r3, #0
 800933e:	f7f7 fcb5 	bl	8000cac <__aeabi_fmul>
 8009342:	1c03      	adds	r3, r0, #0
 8009344:	1c19      	adds	r1, r3, #0
 8009346:	1c30      	adds	r0, r6, #0
 8009348:	f7f7 fba4 	bl	8000a94 <__aeabi_fdiv>
 800934c:	1c03      	adds	r3, r0, #0
			* log(
 800934e:	1c18      	adds	r0, r3, #0
 8009350:	f7f9 fe48 	bl	8002fe4 <__aeabi_f2d>
 8009354:	0002      	movs	r2, r0
 8009356:	000b      	movs	r3, r1
 8009358:	0010      	movs	r0, r2
 800935a:	0019      	movs	r1, r3
 800935c:	f003 fe92 	bl	800d084 <log>
 8009360:	0002      	movs	r2, r0
 8009362:	000b      	movs	r3, r1
 8009364:	0020      	movs	r0, r4
 8009366:	0029      	movs	r1, r5
 8009368:	f7f8 ff94 	bl	8002294 <__aeabi_dmul>
 800936c:	0002      	movs	r2, r0
 800936e:	000b      	movs	r3, r1
 8009370:	0010      	movs	r0, r2
 8009372:	0019      	movs	r1, r3
							/ (((float) bme280->pressureReference) * 100)))*100;
 8009374:	2200      	movs	r2, #0
 8009376:	4b0f      	ldr	r3, [pc, #60]	; (80093b4 <bme280Read+0x200>)
 8009378:	f7f8 ff8c 	bl	8002294 <__aeabi_dmul>
 800937c:	0002      	movs	r2, r0
 800937e:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 8009380:	0010      	movs	r0, r2
 8009382:	0019      	movs	r1, r3
 8009384:	f7f9 fda2 	bl	8002ecc <__aeabi_d2iz>
 8009388:	0002      	movs	r2, r0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	611a      	str	r2, [r3, #16]
}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	46bd      	mov	sp, r7
 8009392:	b009      	add	sp, #36	; 0x24
 8009394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	42c80000 	.word	0x42c80000
 800939c:	66666666 	.word	0x66666666
 80093a0:	40711266 	.word	0x40711266
 80093a4:	9ba5e354 	.word	0x9ba5e354
 80093a8:	4020a0c4 	.word	0x4020a0c4
 80093ac:	db22d0e5 	.word	0xdb22d0e5
 80093b0:	3fd27ef9 	.word	0x3fd27ef9
 80093b4:	40590000 	.word	0x40590000

080093b8 <_BME280_compensate_T_int32>:
//									COMP FUNCTIONS DEFINITIONS

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T) {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	10da      	asrs	r2, r3, #3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	8b9b      	ldrh	r3, [r3, #28]
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	1ad3      	subs	r3, r2, r3
			* ((int32_t) bme280->dig_T2)) >> 11;
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	211e      	movs	r1, #30
 80093d2:	5e52      	ldrsh	r2, [r2, r1]
 80093d4:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 80093d6:	12db      	asrs	r3, r3, #11
 80093d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	111b      	asrs	r3, r3, #4
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	8b92      	ldrh	r2, [r2, #28]
 80093e2:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((int32_t) bme280->dig_T1))) >> 12)
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	1112      	asrs	r2, r2, #4
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	8b89      	ldrh	r1, [r1, #28]
 80093ec:	1a52      	subs	r2, r2, r1
 80093ee:	4353      	muls	r3, r2
 80093f0:	131b      	asrs	r3, r3, #12
			* ((int32_t) bme280->dig_T3)) >> 14;
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	2120      	movs	r1, #32
 80093f6:	5e52      	ldrsh	r2, [r2, r1]
 80093f8:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 80093fa:	139b      	asrs	r3, r3, #14
 80093fc:	613b      	str	r3, [r7, #16]
	bme280->t_fine = var1 + var2;
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	18d2      	adds	r2, r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	641a      	str	r2, [r3, #64]	; 0x40
	T = (bme280->t_fine * 5 + 128) >> 8;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800940c:	0013      	movs	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	189b      	adds	r3, r3, r2
 8009412:	3380      	adds	r3, #128	; 0x80
 8009414:	121b      	asrs	r3, r3, #8
 8009416:	60fb      	str	r3, [r7, #12]
	return T;
 8009418:	68fb      	ldr	r3, [r7, #12]
}
 800941a:	0018      	movs	r0, r3
 800941c:	46bd      	mov	sp, r7
 800941e:	b006      	add	sp, #24
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <_BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P) {
 8009424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009426:	b0ad      	sub	sp, #180	; 0xb4
 8009428:	af00      	add	r7, sp, #0
 800942a:	2394      	movs	r3, #148	; 0x94
 800942c:	18fa      	adds	r2, r7, r3
 800942e:	6010      	str	r0, [r2, #0]
 8009430:	2290      	movs	r2, #144	; 0x90
 8009432:	18ba      	adds	r2, r7, r2
 8009434:	6011      	str	r1, [r2, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t) bme280->t_fine) - 128000;
 8009436:	18fa      	adds	r2, r7, r3
 8009438:	6813      	ldr	r3, [r2, #0]
 800943a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943c:	65bb      	str	r3, [r7, #88]	; 0x58
 800943e:	17db      	asrs	r3, r3, #31
 8009440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009442:	4ace      	ldr	r2, [pc, #824]	; (800977c <_BME280_compensate_P_int64+0x358>)
 8009444:	2301      	movs	r3, #1
 8009446:	425b      	negs	r3, r3
 8009448:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800944a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800944c:	1880      	adds	r0, r0, r2
 800944e:	4159      	adcs	r1, r3
 8009450:	0002      	movs	r2, r0
 8009452:	000b      	movs	r3, r1
 8009454:	26a8      	movs	r6, #168	; 0xa8
 8009456:	19b9      	adds	r1, r7, r6
 8009458:	600a      	str	r2, [r1, #0]
 800945a:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) bme280->dig_P6;
 800945c:	19ba      	adds	r2, r7, r6
 800945e:	6853      	ldr	r3, [r2, #4]
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	19b9      	adds	r1, r7, r6
 8009464:	6808      	ldr	r0, [r1, #0]
 8009466:	6849      	ldr	r1, [r1, #4]
 8009468:	f7f7 f84e 	bl	8000508 <__aeabi_lmul>
 800946c:	0002      	movs	r2, r0
 800946e:	000b      	movs	r3, r1
 8009470:	0010      	movs	r0, r2
 8009472:	0019      	movs	r1, r3
 8009474:	2394      	movs	r3, #148	; 0x94
 8009476:	18fa      	adds	r2, r7, r3
 8009478:	6813      	ldr	r3, [r2, #0]
 800947a:	222c      	movs	r2, #44	; 0x2c
 800947c:	5e9b      	ldrsh	r3, [r3, r2]
 800947e:	653b      	str	r3, [r7, #80]	; 0x50
 8009480:	17db      	asrs	r3, r3, #31
 8009482:	657b      	str	r3, [r7, #84]	; 0x54
 8009484:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009488:	f7f7 f83e 	bl	8000508 <__aeabi_lmul>
 800948c:	0002      	movs	r2, r0
 800948e:	000b      	movs	r3, r1
 8009490:	21a0      	movs	r1, #160	; 0xa0
 8009492:	1878      	adds	r0, r7, r1
 8009494:	6002      	str	r2, [r0, #0]
 8009496:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) bme280->dig_P5) << 17);
 8009498:	2394      	movs	r3, #148	; 0x94
 800949a:	18fa      	adds	r2, r7, r3
 800949c:	6813      	ldr	r3, [r2, #0]
 800949e:	222a      	movs	r2, #42	; 0x2a
 80094a0:	5e9b      	ldrsh	r3, [r3, r2]
 80094a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a4:	17db      	asrs	r3, r3, #31
 80094a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094a8:	19ba      	adds	r2, r7, r6
 80094aa:	6853      	ldr	r3, [r2, #4]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80094b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094b2:	f7f7 f829 	bl	8000508 <__aeabi_lmul>
 80094b6:	0002      	movs	r2, r0
 80094b8:	000b      	movs	r3, r1
 80094ba:	0bd1      	lsrs	r1, r2, #15
 80094bc:	045d      	lsls	r5, r3, #17
 80094be:	430d      	orrs	r5, r1
 80094c0:	0454      	lsls	r4, r2, #17
 80094c2:	21a0      	movs	r1, #160	; 0xa0
 80094c4:	187a      	adds	r2, r7, r1
 80094c6:	6853      	ldr	r3, [r2, #4]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	1912      	adds	r2, r2, r4
 80094cc:	416b      	adcs	r3, r5
 80094ce:	1878      	adds	r0, r7, r1
 80094d0:	6002      	str	r2, [r0, #0]
 80094d2:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) bme280->dig_P4) << 35);
 80094d4:	2594      	movs	r5, #148	; 0x94
 80094d6:	197b      	adds	r3, r7, r5
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2228      	movs	r2, #40	; 0x28
 80094dc:	5e9b      	ldrsh	r3, [r3, r2]
 80094de:	643b      	str	r3, [r7, #64]	; 0x40
 80094e0:	17db      	asrs	r3, r3, #31
 80094e2:	647b      	str	r3, [r7, #68]	; 0x44
 80094e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ea:	2300      	movs	r3, #0
 80094ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80094ee:	000c      	movs	r4, r1
 80094f0:	187b      	adds	r3, r7, r1
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094fa:	1812      	adds	r2, r2, r0
 80094fc:	414b      	adcs	r3, r1
 80094fe:	1939      	adds	r1, r7, r4
 8009500:	600a      	str	r2, [r1, #0]
 8009502:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 8009504:	0034      	movs	r4, r6
 8009506:	193b      	adds	r3, r7, r4
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	1939      	adds	r1, r7, r4
 800950e:	6808      	ldr	r0, [r1, #0]
 8009510:	6849      	ldr	r1, [r1, #4]
 8009512:	f7f6 fff9 	bl	8000508 <__aeabi_lmul>
 8009516:	0002      	movs	r2, r0
 8009518:	000b      	movs	r3, r1
 800951a:	0010      	movs	r0, r2
 800951c:	0019      	movs	r1, r3
 800951e:	197b      	adds	r3, r7, r5
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2226      	movs	r2, #38	; 0x26
 8009524:	5e9b      	ldrsh	r3, [r3, r2]
 8009526:	633b      	str	r3, [r7, #48]	; 0x30
 8009528:	17db      	asrs	r3, r3, #31
 800952a:	637b      	str	r3, [r7, #52]	; 0x34
 800952c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	f7f6 ffea 	bl	8000508 <__aeabi_lmul>
 8009534:	0002      	movs	r2, r0
 8009536:	000b      	movs	r3, r1
 8009538:	0619      	lsls	r1, r3, #24
 800953a:	468c      	mov	ip, r1
 800953c:	0a10      	lsrs	r0, r2, #8
 800953e:	2688      	movs	r6, #136	; 0x88
 8009540:	19b9      	adds	r1, r7, r6
 8009542:	6008      	str	r0, [r1, #0]
 8009544:	19b8      	adds	r0, r7, r6
 8009546:	6800      	ldr	r0, [r0, #0]
 8009548:	4661      	mov	r1, ip
 800954a:	4308      	orrs	r0, r1
 800954c:	19b9      	adds	r1, r7, r6
 800954e:	6008      	str	r0, [r1, #0]
 8009550:	121b      	asrs	r3, r3, #8
 8009552:	228c      	movs	r2, #140	; 0x8c
 8009554:	18ba      	adds	r2, r7, r2
 8009556:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) bme280->dig_P2) << 12);
 8009558:	197b      	adds	r3, r7, r5
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2224      	movs	r2, #36	; 0x24
 800955e:	5e9b      	ldrsh	r3, [r3, r2]
 8009560:	62bb      	str	r3, [r7, #40]	; 0x28
 8009562:	17db      	asrs	r3, r3, #31
 8009564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009566:	193b      	adds	r3, r7, r4
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009570:	f7f6 ffca 	bl	8000508 <__aeabi_lmul>
 8009574:	0002      	movs	r2, r0
 8009576:	000b      	movs	r3, r1
 8009578:	0d11      	lsrs	r1, r2, #20
 800957a:	468c      	mov	ip, r1
 800957c:	0318      	lsls	r0, r3, #12
 800957e:	2184      	movs	r1, #132	; 0x84
 8009580:	1879      	adds	r1, r7, r1
 8009582:	6008      	str	r0, [r1, #0]
 8009584:	2084      	movs	r0, #132	; 0x84
 8009586:	1839      	adds	r1, r7, r0
 8009588:	6808      	ldr	r0, [r1, #0]
 800958a:	4661      	mov	r1, ip
 800958c:	4308      	orrs	r0, r1
 800958e:	2184      	movs	r1, #132	; 0x84
 8009590:	1879      	adds	r1, r7, r1
 8009592:	6008      	str	r0, [r1, #0]
 8009594:	0313      	lsls	r3, r2, #12
 8009596:	2180      	movs	r1, #128	; 0x80
 8009598:	187a      	adds	r2, r7, r1
 800959a:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 800959c:	19bb      	adds	r3, r7, r6
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	1879      	adds	r1, r7, r1
 80095a4:	6808      	ldr	r0, [r1, #0]
 80095a6:	6849      	ldr	r1, [r1, #4]
 80095a8:	1812      	adds	r2, r2, r0
 80095aa:	414b      	adcs	r3, r1
 80095ac:	1939      	adds	r1, r7, r4
 80095ae:	600a      	str	r2, [r1, #0]
 80095b0:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) bme280->dig_P1) >> 33;
 80095b2:	193b      	adds	r3, r7, r4
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	6859      	ldr	r1, [r3, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	2380      	movs	r3, #128	; 0x80
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	1880      	adds	r0, r0, r2
 80095c0:	4159      	adcs	r1, r3
 80095c2:	197b      	adds	r3, r7, r5
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80095c8:	623b      	str	r3, [r7, #32]
 80095ca:	2300      	movs	r3, #0
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
 80095ce:	6a3a      	ldr	r2, [r7, #32]
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	f7f6 ff99 	bl	8000508 <__aeabi_lmul>
 80095d6:	0002      	movs	r2, r0
 80095d8:	000b      	movs	r3, r1
 80095da:	1059      	asrs	r1, r3, #1
 80095dc:	1938      	adds	r0, r7, r4
 80095de:	6001      	str	r1, [r0, #0]
 80095e0:	17db      	asrs	r3, r3, #31
 80095e2:	21ac      	movs	r1, #172	; 0xac
 80095e4:	187a      	adds	r2, r7, r1
 80095e6:	6013      	str	r3, [r2, #0]
	if (var1 == 0) {
 80095e8:	193b      	adds	r3, r7, r4
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	187b      	adds	r3, r7, r1
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	431a      	orrs	r2, r3
 80095f2:	d101      	bne.n	80095f8 <_BME280_compensate_P_int64+0x1d4>
		return 0; // avoid exception caused by division by zero
 80095f4:	2300      	movs	r3, #0
 80095f6:	e0bc      	b.n	8009772 <_BME280_compensate_P_int64+0x34e>
	}
	p = 1048576 - adc_P;
 80095f8:	2390      	movs	r3, #144	; 0x90
 80095fa:	18fb      	adds	r3, r7, r3
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	2380      	movs	r3, #128	; 0x80
 8009600:	035b      	lsls	r3, r3, #13
 8009602:	1a9b      	subs	r3, r3, r2
 8009604:	2498      	movs	r4, #152	; 0x98
 8009606:	193a      	adds	r2, r7, r4
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	17db      	asrs	r3, r3, #31
 800960c:	259c      	movs	r5, #156	; 0x9c
 800960e:	197a      	adds	r2, r7, r5
 8009610:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8009612:	193b      	adds	r3, r7, r4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	105b      	asrs	r3, r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	193b      	adds	r3, r7, r4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	07db      	lsls	r3, r3, #31
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	20a0      	movs	r0, #160	; 0xa0
 8009624:	183a      	adds	r2, r7, r0
 8009626:	6853      	ldr	r3, [r2, #4]
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	69b8      	ldr	r0, [r7, #24]
 800962c:	69f9      	ldr	r1, [r7, #28]
 800962e:	1a80      	subs	r0, r0, r2
 8009630:	4199      	sbcs	r1, r3
 8009632:	4a53      	ldr	r2, [pc, #332]	; (8009780 <_BME280_compensate_P_int64+0x35c>)
 8009634:	2300      	movs	r3, #0
 8009636:	f7f6 ff67 	bl	8000508 <__aeabi_lmul>
 800963a:	0002      	movs	r2, r0
 800963c:	000b      	movs	r3, r1
 800963e:	0010      	movs	r0, r2
 8009640:	0019      	movs	r1, r3
 8009642:	23a8      	movs	r3, #168	; 0xa8
 8009644:	18fa      	adds	r2, r7, r3
 8009646:	6853      	ldr	r3, [r2, #4]
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	f7f6 ff19 	bl	8000480 <__aeabi_ldivmod>
 800964e:	0002      	movs	r2, r0
 8009650:	000b      	movs	r3, r1
 8009652:	1939      	adds	r1, r7, r4
 8009654:	600a      	str	r2, [r1, #0]
 8009656:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) bme280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8009658:	2694      	movs	r6, #148	; 0x94
 800965a:	19ba      	adds	r2, r7, r6
 800965c:	6813      	ldr	r3, [r2, #0]
 800965e:	2232      	movs	r2, #50	; 0x32
 8009660:	5e9b      	ldrsh	r3, [r3, r2]
 8009662:	613b      	str	r3, [r7, #16]
 8009664:	17db      	asrs	r3, r3, #31
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	197a      	adds	r2, r7, r5
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	04da      	lsls	r2, r3, #19
 800966e:	1939      	adds	r1, r7, r4
 8009670:	680b      	ldr	r3, [r1, #0]
 8009672:	0b5b      	lsrs	r3, r3, #13
 8009674:	67bb      	str	r3, [r7, #120]	; 0x78
 8009676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009678:	4313      	orrs	r3, r2
 800967a:	67bb      	str	r3, [r7, #120]	; 0x78
 800967c:	197a      	adds	r2, r7, r5
 800967e:	6813      	ldr	r3, [r2, #0]
 8009680:	135b      	asrs	r3, r3, #13
 8009682:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009684:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009688:	6938      	ldr	r0, [r7, #16]
 800968a:	6979      	ldr	r1, [r7, #20]
 800968c:	f7f6 ff3c 	bl	8000508 <__aeabi_lmul>
 8009690:	0002      	movs	r2, r0
 8009692:	000b      	movs	r3, r1
 8009694:	0010      	movs	r0, r2
 8009696:	0019      	movs	r1, r3
 8009698:	197a      	adds	r2, r7, r5
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	04da      	lsls	r2, r3, #19
 800969e:	193b      	adds	r3, r7, r4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	0b5b      	lsrs	r3, r3, #13
 80096a4:	673b      	str	r3, [r7, #112]	; 0x70
 80096a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a8:	4313      	orrs	r3, r2
 80096aa:	673b      	str	r3, [r7, #112]	; 0x70
 80096ac:	197a      	adds	r2, r7, r5
 80096ae:	6813      	ldr	r3, [r2, #0]
 80096b0:	135b      	asrs	r3, r3, #13
 80096b2:	677b      	str	r3, [r7, #116]	; 0x74
 80096b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096b8:	f7f6 ff26 	bl	8000508 <__aeabi_lmul>
 80096bc:	0002      	movs	r2, r0
 80096be:	000b      	movs	r3, r1
 80096c0:	01d9      	lsls	r1, r3, #7
 80096c2:	0e50      	lsrs	r0, r2, #25
 80096c4:	4301      	orrs	r1, r0
 80096c6:	25a8      	movs	r5, #168	; 0xa8
 80096c8:	1978      	adds	r0, r7, r5
 80096ca:	6001      	str	r1, [r0, #0]
 80096cc:	165b      	asrs	r3, r3, #25
 80096ce:	22ac      	movs	r2, #172	; 0xac
 80096d0:	18ba      	adds	r2, r7, r2
 80096d2:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) bme280->dig_P8) * p) >> 19;
 80096d4:	19ba      	adds	r2, r7, r6
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	2230      	movs	r2, #48	; 0x30
 80096da:	5e9b      	ldrsh	r3, [r3, r2]
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	17db      	asrs	r3, r3, #31
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	193a      	adds	r2, r7, r4
 80096e4:	6853      	ldr	r3, [r2, #4]
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	68b8      	ldr	r0, [r7, #8]
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	f7f6 ff0c 	bl	8000508 <__aeabi_lmul>
 80096f0:	0002      	movs	r2, r0
 80096f2:	000b      	movs	r3, r1
 80096f4:	0359      	lsls	r1, r3, #13
 80096f6:	0cd0      	lsrs	r0, r2, #19
 80096f8:	4301      	orrs	r1, r0
 80096fa:	20a0      	movs	r0, #160	; 0xa0
 80096fc:	1838      	adds	r0, r7, r0
 80096fe:	6001      	str	r1, [r0, #0]
 8009700:	14db      	asrs	r3, r3, #19
 8009702:	22a4      	movs	r2, #164	; 0xa4
 8009704:	18ba      	adds	r2, r7, r2
 8009706:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t) bme280->dig_P7) << 4);
 8009708:	193a      	adds	r2, r7, r4
 800970a:	6810      	ldr	r0, [r2, #0]
 800970c:	6851      	ldr	r1, [r2, #4]
 800970e:	197a      	adds	r2, r7, r5
 8009710:	6853      	ldr	r3, [r2, #4]
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	1880      	adds	r0, r0, r2
 8009716:	4159      	adcs	r1, r3
 8009718:	23a0      	movs	r3, #160	; 0xa0
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	1812      	adds	r2, r2, r0
 8009722:	414b      	adcs	r3, r1
 8009724:	0619      	lsls	r1, r3, #24
 8009726:	0a10      	lsrs	r0, r2, #8
 8009728:	66b8      	str	r0, [r7, #104]	; 0x68
 800972a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800972c:	4308      	orrs	r0, r1
 800972e:	66b8      	str	r0, [r7, #104]	; 0x68
 8009730:	121b      	asrs	r3, r3, #8
 8009732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009734:	19bb      	adds	r3, r7, r6
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	222e      	movs	r2, #46	; 0x2e
 800973a:	5e9b      	ldrsh	r3, [r3, r2]
 800973c:	603b      	str	r3, [r7, #0]
 800973e:	17db      	asrs	r3, r3, #31
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	000b      	movs	r3, r1
 8009748:	0f1b      	lsrs	r3, r3, #28
 800974a:	0010      	movs	r0, r2
 800974c:	0100      	lsls	r0, r0, #4
 800974e:	6678      	str	r0, [r7, #100]	; 0x64
 8009750:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009752:	4318      	orrs	r0, r3
 8009754:	6678      	str	r0, [r7, #100]	; 0x64
 8009756:	000b      	movs	r3, r1
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	663b      	str	r3, [r7, #96]	; 0x60
 800975c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800975e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009760:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009762:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009764:	1812      	adds	r2, r2, r0
 8009766:	414b      	adcs	r3, r1
 8009768:	1939      	adds	r1, r7, r4
 800976a:	600a      	str	r2, [r1, #0]
 800976c:	604b      	str	r3, [r1, #4]
	return (uint32_t) p;
 800976e:	193b      	adds	r3, r7, r4
 8009770:	681b      	ldr	r3, [r3, #0]
}
 8009772:	0018      	movs	r0, r3
 8009774:	46bd      	mov	sp, r7
 8009776:	b02d      	add	sp, #180	; 0xb4
 8009778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977a:	46c0      	nop			; (mov r8, r8)
 800977c:	fffe0c00 	.word	0xfffe0c00
 8009780:	00000c35 	.word	0x00000c35

08009784 <_BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H) {
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;
	v_x1_u32r = (bme280->t_fine - ((int32_t) 76800));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009792:	4a2d      	ldr	r2, [pc, #180]	; (8009848 <_BME280_compensate_H_int32+0xc4>)
 8009794:	4694      	mov	ip, r2
 8009796:	4463      	add	r3, ip
 8009798:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	039a      	lsls	r2, r3, #14
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	213a      	movs	r1, #58	; 0x3a
 80097a2:	5e5b      	ldrsh	r3, [r3, r1]
 80097a4:	051b      	lsls	r3, r3, #20
 80097a6:	1ad2      	subs	r2, r2, r3
			- (((int32_t) bme280->dig_H5) * v_x1_u32r)) + ((int32_t) 16384))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	213c      	movs	r1, #60	; 0x3c
 80097ac:	5e5b      	ldrsh	r3, [r3, r1]
 80097ae:	0019      	movs	r1, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	434b      	muls	r3, r1
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2280      	movs	r2, #128	; 0x80
 80097b8:	01d2      	lsls	r2, r2, #7
 80097ba:	4694      	mov	ip, r2
 80097bc:	4463      	add	r3, ip
			>> 15)
 80097be:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * ((int32_t) bme280->dig_H6)) >> 10)
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	213e      	movs	r1, #62	; 0x3e
 80097c4:	5c52      	ldrb	r2, [r2, r1]
 80097c6:	0011      	movs	r1, r2
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	434a      	muls	r2, r1
 80097cc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	2038      	movs	r0, #56	; 0x38
 80097d2:	5c09      	ldrb	r1, [r1, r0]
 80097d4:	0008      	movs	r0, r1
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	4341      	muls	r1, r0
 80097da:	12c9      	asrs	r1, r1, #11
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 80097dc:	2080      	movs	r0, #128	; 0x80
 80097de:	0200      	lsls	r0, r0, #8
 80097e0:	4684      	mov	ip, r0
 80097e2:	4461      	add	r1, ip
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 80097e4:	434a      	muls	r2, r1
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 80097e6:	1292      	asrs	r2, r2, #10
 80097e8:	2180      	movs	r1, #128	; 0x80
 80097ea:	0389      	lsls	r1, r1, #14
 80097ec:	468c      	mov	ip, r1
 80097ee:	4462      	add	r2, ip
					* ((int32_t) bme280->dig_H2) + 8192) >> 14));
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	2036      	movs	r0, #54	; 0x36
 80097f4:	5e09      	ldrsh	r1, [r1, r0]
 80097f6:	434a      	muls	r2, r1
 80097f8:	2180      	movs	r1, #128	; 0x80
 80097fa:	0189      	lsls	r1, r1, #6
 80097fc:	468c      	mov	ip, r1
 80097fe:	4462      	add	r2, ip
 8009800:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 8009802:	4353      	muls	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	13db      	asrs	r3, r3, #15
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	13d2      	asrs	r2, r2, #15
 800980e:	4353      	muls	r3, r2
 8009810:	11db      	asrs	r3, r3, #7
					* ((int32_t) bme280->dig_H1)) >> 4));
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	2134      	movs	r1, #52	; 0x34
 8009816:	5c52      	ldrb	r2, [r2, r1]
 8009818:	4353      	muls	r3, r2
 800981a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	da00      	bge.n	800982a <_BME280_compensate_H_int32+0xa6>
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	22c8      	movs	r2, #200	; 0xc8
 8009830:	0552      	lsls	r2, r2, #21
 8009832:	4293      	cmp	r3, r2
 8009834:	dd01      	ble.n	800983a <_BME280_compensate_H_int32+0xb6>
 8009836:	23c8      	movs	r3, #200	; 0xc8
 8009838:	055b      	lsls	r3, r3, #21
 800983a:	60fb      	str	r3, [r7, #12]
	return (uint32_t) (v_x1_u32r >> 12);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	131b      	asrs	r3, r3, #12
}
 8009840:	0018      	movs	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	b004      	add	sp, #16
 8009846:	bd80      	pop	{r7, pc}
 8009848:	fffed400 	.word	0xfffed400

0800984c <interfaceWrite>:
#include "interface.h"

void _interfaceIntToArray(char *destination, uint8_t offset, int16_t integer);
void _interfaceClear(char *buffer);

void interfaceWrite(void) {
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af02      	add	r7, sp, #8

	//								WRITE DATA TO CLOCK

	_interfaceClear(buffer);
 8009852:	4b27      	ldr	r3, [pc, #156]	; (80098f0 <interfaceWrite+0xa4>)
 8009854:	0018      	movs	r0, r3
 8009856:	f000 fad5 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.hour);
 800985a:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <interfaceWrite+0xa8>)
 800985c:	78db      	ldrb	r3, [r3, #3]
 800985e:	b25b      	sxtb	r3, r3
 8009860:	b21a      	sxth	r2, r3
 8009862:	4b23      	ldr	r3, [pc, #140]	; (80098f0 <interfaceWrite+0xa4>)
 8009864:	2100      	movs	r1, #0
 8009866:	0018      	movs	r0, r3
 8009868:	f000 fa90 	bl	8009d8c <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.actual.minute);
 800986c:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <interfaceWrite+0xa8>)
 800986e:	791b      	ldrb	r3, [r3, #4]
 8009870:	b25b      	sxtb	r3, r3
 8009872:	b21a      	sxth	r2, r3
 8009874:	4b1e      	ldr	r3, [pc, #120]	; (80098f0 <interfaceWrite+0xa4>)
 8009876:	2102      	movs	r1, #2
 8009878:	0018      	movs	r0, r3
 800987a:	f000 fa87 	bl	8009d8c <_interfaceIntToArray>

	if (rtcBlink(&chronograph)) {
 800987e:	4b1d      	ldr	r3, [pc, #116]	; (80098f4 <interfaceWrite+0xa8>)
 8009880:	0018      	movs	r0, r3
 8009882:	f002 fcb3 	bl	800c1ec <rtcBlink>
 8009886:	1e03      	subs	r3, r0, #0
 8009888:	d00a      	beq.n	80098a0 <interfaceWrite+0x54>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON, NOT_EDITABLE);
 800988a:	4b19      	ldr	r3, [pc, #100]	; (80098f0 <interfaceWrite+0xa4>)
 800988c:	481a      	ldr	r0, [pc, #104]	; (80098f8 <interfaceWrite+0xac>)
 800988e:	2200      	movs	r2, #0
 8009890:	9201      	str	r2, [sp, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	9200      	str	r2, [sp, #0]
 8009896:	2200      	movs	r2, #0
 8009898:	2100      	movs	r1, #0
 800989a:	f001 fb1d 	bl	800aed8 <menuItemChangeValue>
 800989e:	e009      	b.n	80098b4 <interfaceWrite+0x68>
	} else {
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_DISABLED,
 80098a0:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <interfaceWrite+0xa4>)
 80098a2:	4815      	ldr	r0, [pc, #84]	; (80098f8 <interfaceWrite+0xac>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	9201      	str	r2, [sp, #4]
 80098a8:	2204      	movs	r2, #4
 80098aa:	9200      	str	r2, [sp, #0]
 80098ac:	2200      	movs	r2, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	f001 fb12 	bl	800aed8 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	_interfaceClear(buffer);
 80098b4:	4b0e      	ldr	r3, [pc, #56]	; (80098f0 <interfaceWrite+0xa4>)
 80098b6:	0018      	movs	r0, r3
 80098b8:	f000 faa4 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.second);
 80098bc:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <interfaceWrite+0xa8>)
 80098be:	795b      	ldrb	r3, [r3, #5]
 80098c0:	b25b      	sxtb	r3, r3
 80098c2:	b21a      	sxth	r2, r3
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <interfaceWrite+0xa4>)
 80098c6:	2102      	movs	r1, #2
 80098c8:	0018      	movs	r0, r3
 80098ca:	f000 fa5f 	bl	8009d8c <_interfaceIntToArray>
	if (rtcBlink(&chronograph)) {
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <interfaceWrite+0xa8>)
 80098d0:	0018      	movs	r0, r3
 80098d2:	f002 fc8b 	bl	800c1ec <rtcBlink>
 80098d6:	1e03      	subs	r3, r0, #0
 80098d8:	d010      	beq.n	80098fc <interfaceWrite+0xb0>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON,
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <interfaceWrite+0xa4>)
 80098dc:	4806      	ldr	r0, [pc, #24]	; (80098f8 <interfaceWrite+0xac>)
 80098de:	2200      	movs	r2, #0
 80098e0:	9201      	str	r2, [sp, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	9200      	str	r2, [sp, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	2101      	movs	r1, #1
 80098ea:	f001 faf5 	bl	800aed8 <menuItemChangeValue>
 80098ee:	e00f      	b.n	8009910 <interfaceWrite+0xc4>
 80098f0:	200000a8 	.word	0x200000a8
 80098f4:	20000270 	.word	0x20000270
 80098f8:	200000cc 	.word	0x200000cc
		NOT_EDITABLE);
	} else {
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_DISABLED,
 80098fc:	4bf2      	ldr	r3, [pc, #968]	; (8009cc8 <interfaceWrite+0x47c>)
 80098fe:	48f3      	ldr	r0, [pc, #972]	; (8009ccc <interfaceWrite+0x480>)
 8009900:	2200      	movs	r2, #0
 8009902:	9201      	str	r2, [sp, #4]
 8009904:	2204      	movs	r2, #4
 8009906:	9200      	str	r2, [sp, #0]
 8009908:	2201      	movs	r2, #1
 800990a:	2101      	movs	r1, #1
 800990c:	f001 fae4 	bl	800aed8 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	//								WRITE DATA TO CALENDAR

	_interfaceClear(buffer);
 8009910:	4bed      	ldr	r3, [pc, #948]	; (8009cc8 <interfaceWrite+0x47c>)
 8009912:	0018      	movs	r0, r3
 8009914:	f000 fa76 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.day);
 8009918:	4bed      	ldr	r3, [pc, #948]	; (8009cd0 <interfaceWrite+0x484>)
 800991a:	789b      	ldrb	r3, [r3, #2]
 800991c:	b25b      	sxtb	r3, r3
 800991e:	b21a      	sxth	r2, r3
 8009920:	4be9      	ldr	r3, [pc, #932]	; (8009cc8 <interfaceWrite+0x47c>)
 8009922:	2100      	movs	r1, #0
 8009924:	0018      	movs	r0, r3
 8009926:	f000 fa31 	bl	8009d8c <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.actual.month);
 800992a:	4be9      	ldr	r3, [pc, #932]	; (8009cd0 <interfaceWrite+0x484>)
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	b25b      	sxtb	r3, r3
 8009930:	b21a      	sxth	r2, r3
 8009932:	4be5      	ldr	r3, [pc, #916]	; (8009cc8 <interfaceWrite+0x47c>)
 8009934:	2102      	movs	r1, #2
 8009936:	0018      	movs	r0, r3
 8009938:	f000 fa28 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT, NOT_EDITABLE);
 800993c:	4be2      	ldr	r3, [pc, #904]	; (8009cc8 <interfaceWrite+0x47c>)
 800993e:	48e3      	ldr	r0, [pc, #908]	; (8009ccc <interfaceWrite+0x480>)
 8009940:	2200      	movs	r2, #0
 8009942:	9201      	str	r2, [sp, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	9200      	str	r2, [sp, #0]
 8009948:	2201      	movs	r2, #1
 800994a:	2100      	movs	r1, #0
 800994c:	f001 fac4 	bl	800aed8 <menuItemChangeValue>

	//								WRITE DATA TO SETTINGS_CLOCK

	_interfaceClear(buffer);
 8009950:	4bdd      	ldr	r3, [pc, #884]	; (8009cc8 <interfaceWrite+0x47c>)
 8009952:	0018      	movs	r0, r3
 8009954:	f000 fa56 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.hour);
 8009958:	4bdd      	ldr	r3, [pc, #884]	; (8009cd0 <interfaceWrite+0x484>)
 800995a:	78db      	ldrb	r3, [r3, #3]
 800995c:	b25b      	sxtb	r3, r3
 800995e:	b21a      	sxth	r2, r3
 8009960:	4bd9      	ldr	r3, [pc, #868]	; (8009cc8 <interfaceWrite+0x47c>)
 8009962:	2100      	movs	r1, #0
 8009964:	0018      	movs	r0, r3
 8009966:	f000 fa11 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, buffer, INTER_COLON,
 800996a:	4bd7      	ldr	r3, [pc, #860]	; (8009cc8 <interfaceWrite+0x47c>)
 800996c:	48d7      	ldr	r0, [pc, #860]	; (8009ccc <interfaceWrite+0x480>)
 800996e:	2201      	movs	r2, #1
 8009970:	9201      	str	r2, [sp, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	9200      	str	r2, [sp, #0]
 8009976:	2202      	movs	r2, #2
 8009978:	2100      	movs	r1, #0
 800997a:	f001 faad 	bl	800aed8 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800997e:	4bd2      	ldr	r3, [pc, #840]	; (8009cc8 <interfaceWrite+0x47c>)
 8009980:	0018      	movs	r0, r3
 8009982:	f000 fa3f 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.minute);
 8009986:	4bd2      	ldr	r3, [pc, #840]	; (8009cd0 <interfaceWrite+0x484>)
 8009988:	791b      	ldrb	r3, [r3, #4]
 800998a:	b25b      	sxtb	r3, r3
 800998c:	b21a      	sxth	r2, r3
 800998e:	4bce      	ldr	r3, [pc, #824]	; (8009cc8 <interfaceWrite+0x47c>)
 8009990:	2102      	movs	r1, #2
 8009992:	0018      	movs	r0, r3
 8009994:	f000 f9fa 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, buffer, INTER_COLON,
 8009998:	4bcb      	ldr	r3, [pc, #812]	; (8009cc8 <interfaceWrite+0x47c>)
 800999a:	48cc      	ldr	r0, [pc, #816]	; (8009ccc <interfaceWrite+0x480>)
 800999c:	2201      	movs	r2, #1
 800999e:	9201      	str	r2, [sp, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	9200      	str	r2, [sp, #0]
 80099a4:	2202      	movs	r2, #2
 80099a6:	2101      	movs	r1, #1
 80099a8:	f001 fa96 	bl	800aed8 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 80099ac:	4bc6      	ldr	r3, [pc, #792]	; (8009cc8 <interfaceWrite+0x47c>)
 80099ae:	0018      	movs	r0, r3
 80099b0:	f000 fa28 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.second);
 80099b4:	4bc6      	ldr	r3, [pc, #792]	; (8009cd0 <interfaceWrite+0x484>)
 80099b6:	795b      	ldrb	r3, [r3, #5]
 80099b8:	b25b      	sxtb	r3, r3
 80099ba:	b21a      	sxth	r2, r3
 80099bc:	4bc2      	ldr	r3, [pc, #776]	; (8009cc8 <interfaceWrite+0x47c>)
 80099be:	2102      	movs	r1, #2
 80099c0:	0018      	movs	r0, r3
 80099c2:	f000 f9e3 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, buffer, INTER_COLON,
 80099c6:	4bc0      	ldr	r3, [pc, #768]	; (8009cc8 <interfaceWrite+0x47c>)
 80099c8:	48c0      	ldr	r0, [pc, #768]	; (8009ccc <interfaceWrite+0x480>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	9201      	str	r2, [sp, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	9200      	str	r2, [sp, #0]
 80099d2:	2202      	movs	r2, #2
 80099d4:	2102      	movs	r1, #2
 80099d6:	f001 fa7f 	bl	800aed8 <menuItemChangeValue>
	EDITABLE);

	//								WRITE DATA TO SETTINGS_CALENDAR

	_interfaceClear(buffer);
 80099da:	4bbb      	ldr	r3, [pc, #748]	; (8009cc8 <interfaceWrite+0x47c>)
 80099dc:	0018      	movs	r0, r3
 80099de:	f000 fa11 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.day);
 80099e2:	4bbb      	ldr	r3, [pc, #748]	; (8009cd0 <interfaceWrite+0x484>)
 80099e4:	789b      	ldrb	r3, [r3, #2]
 80099e6:	b25b      	sxtb	r3, r3
 80099e8:	b21a      	sxth	r2, r3
 80099ea:	4bb7      	ldr	r3, [pc, #732]	; (8009cc8 <interfaceWrite+0x47c>)
 80099ec:	2100      	movs	r1, #0
 80099ee:	0018      	movs	r0, r3
 80099f0:	f000 f9cc 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, buffer, INTER_DOT,
 80099f4:	4bb4      	ldr	r3, [pc, #720]	; (8009cc8 <interfaceWrite+0x47c>)
 80099f6:	48b5      	ldr	r0, [pc, #724]	; (8009ccc <interfaceWrite+0x480>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	9201      	str	r2, [sp, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	9200      	str	r2, [sp, #0]
 8009a00:	2202      	movs	r2, #2
 8009a02:	2103      	movs	r1, #3
 8009a04:	f001 fa68 	bl	800aed8 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 8009a08:	4baf      	ldr	r3, [pc, #700]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	f000 f9fa 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.month);
 8009a10:	4baf      	ldr	r3, [pc, #700]	; (8009cd0 <interfaceWrite+0x484>)
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	b25b      	sxtb	r3, r3
 8009a16:	b21a      	sxth	r2, r3
 8009a18:	4bab      	ldr	r3, [pc, #684]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a1a:	2102      	movs	r1, #2
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f000 f9b5 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, buffer, INTER_DOT,
 8009a22:	4ba9      	ldr	r3, [pc, #676]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a24:	48a9      	ldr	r0, [pc, #676]	; (8009ccc <interfaceWrite+0x480>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	9201      	str	r2, [sp, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	9200      	str	r2, [sp, #0]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	2104      	movs	r1, #4
 8009a32:	f001 fa51 	bl	800aed8 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 8009a36:	4ba4      	ldr	r3, [pc, #656]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f000 f9e3 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.year);
 8009a3e:	4ba4      	ldr	r3, [pc, #656]	; (8009cd0 <interfaceWrite+0x484>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	b21a      	sxth	r2, r3
 8009a46:	4ba0      	ldr	r3, [pc, #640]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a48:	2100      	movs	r1, #0
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f000 f99e 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, buffer,
 8009a50:	4b9d      	ldr	r3, [pc, #628]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a52:	489e      	ldr	r0, [pc, #632]	; (8009ccc <interfaceWrite+0x480>)
 8009a54:	2201      	movs	r2, #1
 8009a56:	9201      	str	r2, [sp, #4]
 8009a58:	2204      	movs	r2, #4
 8009a5a:	9200      	str	r2, [sp, #0]
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	2105      	movs	r1, #5
 8009a60:	f001 fa3a 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, EDITABLE);

	//								WRITE CHRONO TIME

	_interfaceClear(buffer);
 8009a64:	4b98      	ldr	r3, [pc, #608]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a66:	0018      	movs	r0, r3
 8009a68:	f000 f9cc 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.chrono.minute);
 8009a6c:	4b98      	ldr	r3, [pc, #608]	; (8009cd0 <interfaceWrite+0x484>)
 8009a6e:	7f1b      	ldrb	r3, [r3, #28]
 8009a70:	b25b      	sxtb	r3, r3
 8009a72:	b21a      	sxth	r2, r3
 8009a74:	4b94      	ldr	r3, [pc, #592]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a76:	2100      	movs	r1, #0
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f000 f987 	bl	8009d8c <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.chrono.second);
 8009a7e:	4b94      	ldr	r3, [pc, #592]	; (8009cd0 <interfaceWrite+0x484>)
 8009a80:	7f5b      	ldrb	r3, [r3, #29]
 8009a82:	b25b      	sxtb	r3, r3
 8009a84:	b21a      	sxth	r2, r3
 8009a86:	4b90      	ldr	r3, [pc, #576]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a88:	2102      	movs	r1, #2
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f000 f97e 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, CHRONO, CHRONO_LEVEL, buffer, INTER_COLON,
 8009a90:	4b8d      	ldr	r3, [pc, #564]	; (8009cc8 <interfaceWrite+0x47c>)
 8009a92:	488e      	ldr	r0, [pc, #568]	; (8009ccc <interfaceWrite+0x480>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	9201      	str	r2, [sp, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	9200      	str	r2, [sp, #0]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	f001 fa1a 	bl	800aed8 <menuItemChangeValue>
	NOT_EDITABLE);

	_interfaceClear(buffer);
 8009aa4:	4b88      	ldr	r3, [pc, #544]	; (8009cc8 <interfaceWrite+0x47c>)
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 f9ac 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.chrono.hour);
 8009aac:	4b88      	ldr	r3, [pc, #544]	; (8009cd0 <interfaceWrite+0x484>)
 8009aae:	7edb      	ldrb	r3, [r3, #27]
 8009ab0:	b25b      	sxtb	r3, r3
 8009ab2:	b21a      	sxth	r2, r3
 8009ab4:	4b84      	ldr	r3, [pc, #528]	; (8009cc8 <interfaceWrite+0x47c>)
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f000 f967 	bl	8009d8c <_interfaceIntToArray>
	buffer[3] = 'h';
 8009abe:	4b82      	ldr	r3, [pc, #520]	; (8009cc8 <interfaceWrite+0x47c>)
 8009ac0:	2268      	movs	r2, #104	; 0x68
 8009ac2:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, CHRONO_HOURS, CHRONO_HOURS_LEVEL, buffer,
 8009ac4:	4b80      	ldr	r3, [pc, #512]	; (8009cc8 <interfaceWrite+0x47c>)
 8009ac6:	4881      	ldr	r0, [pc, #516]	; (8009ccc <interfaceWrite+0x480>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	9201      	str	r2, [sp, #4]
 8009acc:	2204      	movs	r2, #4
 8009ace:	9200      	str	r2, [sp, #0]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	2103      	movs	r1, #3
 8009ad4:	f001 fa00 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	_interfaceClear(buffer);
 8009ad8:	4b7b      	ldr	r3, [pc, #492]	; (8009cc8 <interfaceWrite+0x47c>)
 8009ada:	0018      	movs	r0, r3
 8009adc:	f000 f992 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.chrono.hundredth);
 8009ae0:	4b7b      	ldr	r3, [pc, #492]	; (8009cd0 <interfaceWrite+0x484>)
 8009ae2:	7f9b      	ldrb	r3, [r3, #30]
 8009ae4:	b25b      	sxtb	r3, r3
 8009ae6:	b21a      	sxth	r2, r3
 8009ae8:	4b77      	ldr	r3, [pc, #476]	; (8009cc8 <interfaceWrite+0x47c>)
 8009aea:	2102      	movs	r1, #2
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 f94d 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, CHRONO_HUNDREDTHS, CHRONO_HUNDREDTHS_LEVEL,
 8009af2:	4b75      	ldr	r3, [pc, #468]	; (8009cc8 <interfaceWrite+0x47c>)
 8009af4:	4875      	ldr	r0, [pc, #468]	; (8009ccc <interfaceWrite+0x480>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	9201      	str	r2, [sp, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	9200      	str	r2, [sp, #0]
 8009afe:	2201      	movs	r2, #1
 8009b00:	2102      	movs	r1, #2
 8009b02:	f001 f9e9 	bl	800aed8 <menuItemChangeValue>
//	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE, SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
//			INTER_DISABLED, EDITABLE);

//								WRITE BME280 DATA
	//temperature
	_interfaceClear(buffer);
 8009b06:	4b70      	ldr	r3, [pc, #448]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f000 f97b 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0,
			(bme280.temperatureValue / 100) + temperatureCorrection);
 8009b0e:	4b71      	ldr	r3, [pc, #452]	; (8009cd4 <interfaceWrite+0x488>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2164      	movs	r1, #100	; 0x64
 8009b14:	0018      	movs	r0, r3
 8009b16:	f7f6 fb89 	bl	800022c <__divsi3>
 8009b1a:	0003      	movs	r3, r0
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	4b6e      	ldr	r3, [pc, #440]	; (8009cd8 <interfaceWrite+0x48c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	18d3      	adds	r3, r2, r3
 8009b26:	b29b      	uxth	r3, r3
	_interfaceIntToArray(buffer, 0,
 8009b28:	b21a      	sxth	r2, r3
 8009b2a:	4b67      	ldr	r3, [pc, #412]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f000 f92c 	bl	8009d8c <_interfaceIntToArray>
	if (((bme280.temperatureValue / 100) + temperatureCorrection) > -10)
 8009b34:	4b67      	ldr	r3, [pc, #412]	; (8009cd4 <interfaceWrite+0x488>)
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2164      	movs	r1, #100	; 0x64
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	f7f6 fb76 	bl	800022c <__divsi3>
 8009b40:	0003      	movs	r3, r0
 8009b42:	001a      	movs	r2, r3
 8009b44:	4b64      	ldr	r3, [pc, #400]	; (8009cd8 <interfaceWrite+0x48c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	18d3      	adds	r3, r2, r3
 8009b4a:	3309      	adds	r3, #9
 8009b4c:	db02      	blt.n	8009b54 <interfaceWrite+0x308>
		buffer[2] = '^';
 8009b4e:	4b5e      	ldr	r3, [pc, #376]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b50:	225e      	movs	r2, #94	; 0x5e
 8009b52:	709a      	strb	r2, [r3, #2]
	buffer[3] = 'C';
 8009b54:	4b5c      	ldr	r3, [pc, #368]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b56:	2243      	movs	r2, #67	; 0x43
 8009b58:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, TEMPERATURE, TEMPERATURE_LEVEL, buffer,
 8009b5a:	4b5b      	ldr	r3, [pc, #364]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b5c:	485b      	ldr	r0, [pc, #364]	; (8009ccc <interfaceWrite+0x480>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	2204      	movs	r2, #4
 8009b64:	9200      	str	r2, [sp, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	2102      	movs	r1, #2
 8009b6a:	f001 f9b5 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//temperature Correction
	_interfaceClear(buffer);
 8009b6e:	4b56      	ldr	r3, [pc, #344]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b70:	0018      	movs	r0, r3
 8009b72:	f000 f947 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, temperatureCorrection);
 8009b76:	4b58      	ldr	r3, [pc, #352]	; (8009cd8 <interfaceWrite+0x48c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	b21a      	sxth	r2, r3
 8009b7c:	4b52      	ldr	r3, [pc, #328]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b7e:	2100      	movs	r1, #0
 8009b80:	0018      	movs	r0, r3
 8009b82:	f000 f903 	bl	8009d8c <_interfaceIntToArray>
	buffer[3] = '^';
 8009b86:	4b50      	ldr	r3, [pc, #320]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b88:	225e      	movs	r2, #94	; 0x5e
 8009b8a:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE,
 8009b8c:	4b4e      	ldr	r3, [pc, #312]	; (8009cc8 <interfaceWrite+0x47c>)
 8009b8e:	484f      	ldr	r0, [pc, #316]	; (8009ccc <interfaceWrite+0x480>)
 8009b90:	2201      	movs	r2, #1
 8009b92:	9201      	str	r2, [sp, #4]
 8009b94:	2204      	movs	r2, #4
 8009b96:	9200      	str	r2, [sp, #0]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	2106      	movs	r1, #6
 8009b9c:	f001 f99c 	bl	800aed8 <menuItemChangeValue>
	SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
	INTER_DISABLED, EDITABLE);

	//pressure
	_interfaceClear(buffer);
 8009ba0:	4b49      	ldr	r3, [pc, #292]	; (8009cc8 <interfaceWrite+0x47c>)
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f000 f92e 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.pressureValue / 100);
 8009ba8:	4b4a      	ldr	r3, [pc, #296]	; (8009cd4 <interfaceWrite+0x488>)
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2164      	movs	r1, #100	; 0x64
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f7f6 fab2 	bl	8000118 <__udivsi3>
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	b21a      	sxth	r2, r3
 8009bb8:	4b43      	ldr	r3, [pc, #268]	; (8009cc8 <interfaceWrite+0x47c>)
 8009bba:	2100      	movs	r1, #0
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f000 f8e5 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, BAROMETER, BAROMETER_LEVEL, buffer,
 8009bc2:	4b41      	ldr	r3, [pc, #260]	; (8009cc8 <interfaceWrite+0x47c>)
 8009bc4:	4841      	ldr	r0, [pc, #260]	; (8009ccc <interfaceWrite+0x480>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	9201      	str	r2, [sp, #4]
 8009bca:	2204      	movs	r2, #4
 8009bcc:	9200      	str	r2, [sp, #0]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2103      	movs	r1, #3
 8009bd2:	f001 f981 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//pressure reference(altimeter)
	_interfaceClear(buffer);
 8009bd6:	4b3c      	ldr	r3, [pc, #240]	; (8009cc8 <interfaceWrite+0x47c>)
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f000 f913 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.pressureReference);
 8009bde:	4b3d      	ldr	r3, [pc, #244]	; (8009cd4 <interfaceWrite+0x488>)
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	b21a      	sxth	r2, r3
 8009be4:	4b38      	ldr	r3, [pc, #224]	; (8009cc8 <interfaceWrite+0x47c>)
 8009be6:	2100      	movs	r1, #0
 8009be8:	0018      	movs	r0, r3
 8009bea:	f000 f8cf 	bl	8009d8c <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_REFERENCE_VALUE,
 8009bee:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <interfaceWrite+0x47c>)
 8009bf0:	4836      	ldr	r0, [pc, #216]	; (8009ccc <interfaceWrite+0x480>)
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	9201      	str	r2, [sp, #4]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	9200      	str	r2, [sp, #0]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	2107      	movs	r1, #7
 8009bfe:	f001 f96b 	bl	800aed8 <menuItemChangeValue>
	SETTINGS_REFERENCE_VALUE_LEVEL, buffer,
	INTER_DISABLED, EDITABLE);

	//humidity
	_interfaceClear(buffer);
 8009c02:	4b31      	ldr	r3, [pc, #196]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c04:	0018      	movs	r0, r3
 8009c06:	f000 f8fd 	bl	8009e04 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.humidityValue);
 8009c0a:	4b32      	ldr	r3, [pc, #200]	; (8009cd4 <interfaceWrite+0x488>)
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	b21a      	sxth	r2, r3
 8009c10:	4b2d      	ldr	r3, [pc, #180]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c12:	2100      	movs	r1, #0
 8009c14:	0018      	movs	r0, r3
 8009c16:	f000 f8b9 	bl	8009d8c <_interfaceIntToArray>
	buffer[3] = 'H';
 8009c1a:	4b2b      	ldr	r3, [pc, #172]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c1c:	2248      	movs	r2, #72	; 0x48
 8009c1e:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, HIGROMETER, HIGROMETER_LEVEL, buffer,
 8009c20:	4b29      	ldr	r3, [pc, #164]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c22:	482a      	ldr	r0, [pc, #168]	; (8009ccc <interfaceWrite+0x480>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	9201      	str	r2, [sp, #4]
 8009c28:	2204      	movs	r2, #4
 8009c2a:	9200      	str	r2, [sp, #0]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2104      	movs	r1, #4
 8009c30:	f001 f952 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//altitude
	_interfaceClear(buffer);
 8009c34:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c36:	0018      	movs	r0, r3
 8009c38:	f000 f8e4 	bl	8009e04 <_interfaceClear>
	if (bme280.altitudeValue < -99999) {
 8009c3c:	4b25      	ldr	r3, [pc, #148]	; (8009cd4 <interfaceWrite+0x488>)
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <interfaceWrite+0x490>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	da0a      	bge.n	8009c5c <interfaceWrite+0x410>
//		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, "OL  ",
 8009c46:	4b26      	ldr	r3, [pc, #152]	; (8009ce0 <interfaceWrite+0x494>)
 8009c48:	4820      	ldr	r0, [pc, #128]	; (8009ccc <interfaceWrite+0x480>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	9201      	str	r2, [sp, #4]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	9200      	str	r2, [sp, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	2105      	movs	r1, #5
 8009c56:	f001 f93f 	bl	800aed8 <menuItemChangeValue>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
		INTER_DISABLED,
		NOT_EDITABLE);
	}

}
 8009c5a:	e072      	b.n	8009d42 <interfaceWrite+0x4f6>
	else if (bme280.altitudeValue < 0) {
 8009c5c:	4b1d      	ldr	r3, [pc, #116]	; (8009cd4 <interfaceWrite+0x488>)
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da17      	bge.n	8009c94 <interfaceWrite+0x448>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
 8009c64:	4b1b      	ldr	r3, [pc, #108]	; (8009cd4 <interfaceWrite+0x488>)
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	2164      	movs	r1, #100	; 0x64
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f7f6 fade 	bl	800022c <__divsi3>
 8009c70:	0003      	movs	r3, r0
 8009c72:	b21a      	sxth	r2, r3
 8009c74:	4b14      	ldr	r3, [pc, #80]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c76:	2100      	movs	r1, #0
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f000 f887 	bl	8009d8c <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 8009c7e:	4b12      	ldr	r3, [pc, #72]	; (8009cc8 <interfaceWrite+0x47c>)
 8009c80:	4812      	ldr	r0, [pc, #72]	; (8009ccc <interfaceWrite+0x480>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	9201      	str	r2, [sp, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	9200      	str	r2, [sp, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2105      	movs	r1, #5
 8009c8e:	f001 f923 	bl	800aed8 <menuItemChangeValue>
}
 8009c92:	e056      	b.n	8009d42 <interfaceWrite+0x4f6>
	else if (bme280.altitudeValue < 1000) {
 8009c94:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <interfaceWrite+0x488>)
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	23fa      	movs	r3, #250	; 0xfa
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	da21      	bge.n	8009ce4 <interfaceWrite+0x498>
		_interfaceIntToArray(buffer, 1, bme280.altitudeValue);
 8009ca0:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <interfaceWrite+0x488>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	b21a      	sxth	r2, r3
 8009ca6:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <interfaceWrite+0x47c>)
 8009ca8:	2101      	movs	r1, #1
 8009caa:	0018      	movs	r0, r3
 8009cac:	f000 f86e 	bl	8009d8c <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 8009cb0:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <interfaceWrite+0x47c>)
 8009cb2:	4806      	ldr	r0, [pc, #24]	; (8009ccc <interfaceWrite+0x480>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	9201      	str	r2, [sp, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	9200      	str	r2, [sp, #0]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2105      	movs	r1, #5
 8009cc0:	f001 f90a 	bl	800aed8 <menuItemChangeValue>
}
 8009cc4:	e03d      	b.n	8009d42 <interfaceWrite+0x4f6>
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	200000a8 	.word	0x200000a8
 8009ccc:	200000cc 	.word	0x200000cc
 8009cd0:	20000270 	.word	0x20000270
 8009cd4:	200003bc 	.word	0x200003bc
 8009cd8:	200000b0 	.word	0x200000b0
 8009cdc:	fffe7961 	.word	0xfffe7961
 8009ce0:	0800d484 	.word	0x0800d484
	} else if (bme280.altitudeValue < 10000) {
 8009ce4:	4b18      	ldr	r3, [pc, #96]	; (8009d48 <interfaceWrite+0x4fc>)
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	4a18      	ldr	r2, [pc, #96]	; (8009d4c <interfaceWrite+0x500>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	dc12      	bgt.n	8009d14 <interfaceWrite+0x4c8>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue);
 8009cee:	4b16      	ldr	r3, [pc, #88]	; (8009d48 <interfaceWrite+0x4fc>)
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	b21a      	sxth	r2, r3
 8009cf4:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <interfaceWrite+0x504>)
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f000 f847 	bl	8009d8c <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 8009cfe:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <interfaceWrite+0x504>)
 8009d00:	4814      	ldr	r0, [pc, #80]	; (8009d54 <interfaceWrite+0x508>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	9201      	str	r2, [sp, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	9200      	str	r2, [sp, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2105      	movs	r1, #5
 8009d0e:	f001 f8e3 	bl	800aed8 <menuItemChangeValue>
}
 8009d12:	e016      	b.n	8009d42 <interfaceWrite+0x4f6>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
 8009d14:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <interfaceWrite+0x4fc>)
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	2164      	movs	r1, #100	; 0x64
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f7f6 fa86 	bl	800022c <__divsi3>
 8009d20:	0003      	movs	r3, r0
 8009d22:	b21a      	sxth	r2, r3
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <interfaceWrite+0x504>)
 8009d26:	2100      	movs	r1, #0
 8009d28:	0018      	movs	r0, r3
 8009d2a:	f000 f82f 	bl	8009d8c <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 8009d2e:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <interfaceWrite+0x504>)
 8009d30:	4808      	ldr	r0, [pc, #32]	; (8009d54 <interfaceWrite+0x508>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	9201      	str	r2, [sp, #4]
 8009d36:	2204      	movs	r2, #4
 8009d38:	9200      	str	r2, [sp, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2105      	movs	r1, #5
 8009d3e:	f001 f8cb 	bl	800aed8 <menuItemChangeValue>
}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	200003bc 	.word	0x200003bc
 8009d4c:	0000270f 	.word	0x0000270f
 8009d50:	200000a8 	.word	0x200000a8
 8009d54:	200000cc 	.word	0x200000cc

08009d58 <interfaceShowActual>:

void interfaceShowActual(void) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
	LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 8009d5c:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <interfaceShowActual+0x28>)
 8009d5e:	4809      	ldr	r0, [pc, #36]	; (8009d84 <interfaceShowActual+0x2c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	2100      	movs	r1, #0
 8009d64:	f7fe fff4 	bl	8008d50 <LEDstr>
	LEDdot(&display, menu.current.value2);
 8009d68:	4a07      	ldr	r2, [pc, #28]	; (8009d88 <interfaceShowActual+0x30>)
 8009d6a:	23a7      	movs	r3, #167	; 0xa7
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	5cd2      	ldrb	r2, [r2, r3]
 8009d70:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <interfaceShowActual+0x2c>)
 8009d72:	0011      	movs	r1, r2
 8009d74:	0018      	movs	r0, r3
 8009d76:	f7ff f839 	bl	8008dec <LEDdot>
}
 8009d7a:	46c0      	nop			; (mov r8, r8)
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20000216 	.word	0x20000216
 8009d84:	20000298 	.word	0x20000298
 8009d88:	200000cc 	.word	0x200000cc

08009d8c <_interfaceIntToArray>:

void _interfaceIntToArray(char *destination, uint8_t offset, int16_t integer) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	0008      	movs	r0, r1
 8009d96:	0011      	movs	r1, r2
 8009d98:	1cfb      	adds	r3, r7, #3
 8009d9a:	1c02      	adds	r2, r0, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	003b      	movs	r3, r7
 8009da0:	1c0a      	adds	r2, r1, #0
 8009da2:	801a      	strh	r2, [r3, #0]

	if (integer < 10 && integer >= 0) {
 8009da4:	003b      	movs	r3, r7
 8009da6:	2200      	movs	r2, #0
 8009da8:	5e9b      	ldrsh	r3, [r3, r2]
 8009daa:	2b09      	cmp	r3, #9
 8009dac:	dc17      	bgt.n	8009dde <_interfaceIntToArray+0x52>
 8009dae:	003b      	movs	r3, r7
 8009db0:	2200      	movs	r2, #0
 8009db2:	5e9b      	ldrsh	r3, [r3, r2]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	db12      	blt.n	8009dde <_interfaceIntToArray+0x52>
		sprintf(destination + offset + 1, "%d", integer);
 8009db8:	1cfb      	adds	r3, r7, #3
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	18d0      	adds	r0, r2, r3
 8009dc2:	003b      	movs	r3, r7
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	5e9a      	ldrsh	r2, [r3, r2]
 8009dc8:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <_interfaceIntToArray+0x74>)
 8009dca:	0019      	movs	r1, r3
 8009dcc:	f002 fd3e 	bl	800c84c <siprintf>
		*(destination + offset) = '0';
 8009dd0:	1cfb      	adds	r3, r7, #3
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	18d3      	adds	r3, r2, r3
 8009dd8:	2230      	movs	r2, #48	; 0x30
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e00b      	b.n	8009df6 <_interfaceIntToArray+0x6a>
	} else {
		sprintf(destination + offset, "%d", integer);
 8009dde:	1cfb      	adds	r3, r7, #3
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	18d0      	adds	r0, r2, r3
 8009de6:	003b      	movs	r3, r7
 8009de8:	2200      	movs	r2, #0
 8009dea:	5e9a      	ldrsh	r2, [r3, r2]
 8009dec:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <_interfaceIntToArray+0x74>)
 8009dee:	0019      	movs	r1, r3
 8009df0:	f002 fd2c 	bl	800c84c <siprintf>
	}
}
 8009df4:	46c0      	nop			; (mov r8, r8)
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	b002      	add	sp, #8
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	0800d48c 	.word	0x0800d48c

08009e04 <_interfaceClear>:

void _interfaceClear(char *buffer) {
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	memset(buffer, ' ', 4);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2204      	movs	r2, #4
 8009e10:	2120      	movs	r1, #32
 8009e12:	0018      	movs	r0, r3
 8009e14:	f002 fd11 	bl	800c83a <memset>
}
 8009e18:	46c0      	nop			; (mov r8, r8)
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b002      	add	sp, #8
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <encoderAction>:
 *      Author: bartosz
 */

#include "interrupts.h"

void encoderAction(uint8_t direction) {
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	0002      	movs	r2, r0
 8009e28:	1dfb      	adds	r3, r7, #7
 8009e2a:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 8009e2c:	1dfb      	adds	r3, r7, #7
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d15c      	bne.n	8009eee <encoderAction+0xce>

		if (menu.current.entry == CHRONO_START
 8009e34:	4ab7      	ldr	r2, [pc, #732]	; (800a114 <encoderAction+0x2f4>)
 8009e36:	23a8      	movs	r3, #168	; 0xa8
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	5cd3      	ldrb	r3, [r2, r3]
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d123      	bne.n	8009e88 <encoderAction+0x68>
				&& menu.current.level == CHRONO_START_LEVEL) {
 8009e40:	4ab4      	ldr	r2, [pc, #720]	; (800a114 <encoderAction+0x2f4>)
 8009e42:	2352      	movs	r3, #82	; 0x52
 8009e44:	33ff      	adds	r3, #255	; 0xff
 8009e46:	5cd3      	ldrb	r3, [r2, r3]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d11d      	bne.n	8009e88 <encoderAction+0x68>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8009e4c:	4bb2      	ldr	r3, [pc, #712]	; (800a118 <encoderAction+0x2f8>)
 8009e4e:	2224      	movs	r2, #36	; 0x24
 8009e50:	5c9b      	ldrb	r3, [r3, r2]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <encoderAction+0x40>
				rtcStartChrono(&chronograph);
 8009e56:	4bb0      	ldr	r3, [pc, #704]	; (800a118 <encoderAction+0x2f8>)
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f001 ff5d 	bl	800bd18 <rtcStartChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8009e5e:	e045      	b.n	8009eec <encoderAction+0xcc>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_RUNNING) {
 8009e60:	4bad      	ldr	r3, [pc, #692]	; (800a118 <encoderAction+0x2f8>)
 8009e62:	2224      	movs	r2, #36	; 0x24
 8009e64:	5c9b      	ldrb	r3, [r3, r2]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d104      	bne.n	8009e74 <encoderAction+0x54>
				rtcStopChrono(&chronograph);
 8009e6a:	4bab      	ldr	r3, [pc, #684]	; (800a118 <encoderAction+0x2f8>)
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f001 ffa7 	bl	800bdc0 <rtcStopChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8009e72:	e03b      	b.n	8009eec <encoderAction+0xcc>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_STOP) {
 8009e74:	4ba8      	ldr	r3, [pc, #672]	; (800a118 <encoderAction+0x2f8>)
 8009e76:	2224      	movs	r2, #36	; 0x24
 8009e78:	5c9b      	ldrb	r3, [r3, r2]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d136      	bne.n	8009eec <encoderAction+0xcc>
				rtcResumeChrono(&chronograph);
 8009e7e:	4ba6      	ldr	r3, [pc, #664]	; (800a118 <encoderAction+0x2f8>)
 8009e80:	0018      	movs	r0, r3
 8009e82:	f002 f84f 	bl	800bf24 <rtcResumeChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8009e86:	e031      	b.n	8009eec <encoderAction+0xcc>
			}

		} else if (menu.current.entry == CHRONO_RESET
 8009e88:	4aa2      	ldr	r2, [pc, #648]	; (800a114 <encoderAction+0x2f4>)
 8009e8a:	23a8      	movs	r3, #168	; 0xa8
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	5cd3      	ldrb	r3, [r2, r3]
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	d10a      	bne.n	8009eaa <encoderAction+0x8a>
				&& menu.current.level == CHRONO_RESET_LEVEL) {
 8009e94:	4a9f      	ldr	r2, [pc, #636]	; (800a114 <encoderAction+0x2f4>)
 8009e96:	2352      	movs	r3, #82	; 0x52
 8009e98:	33ff      	adds	r3, #255	; 0xff
 8009e9a:	5cd3      	ldrb	r3, [r2, r3]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d104      	bne.n	8009eaa <encoderAction+0x8a>
			rtcResetChrono(&chronograph);
 8009ea0:	4b9d      	ldr	r3, [pc, #628]	; (800a118 <encoderAction+0x2f8>)
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f002 f84a 	bl	800bf3c <rtcResetChrono>
 8009ea8:	e021      	b.n	8009eee <encoderAction+0xce>
		} else {

			if (menuSwitch(&menu, MENU_ENTER)) {
 8009eaa:	4b9a      	ldr	r3, [pc, #616]	; (800a114 <encoderAction+0x2f4>)
 8009eac:	2100      	movs	r1, #0
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f001 f958 	bl	800b164 <menuSwitch>
 8009eb4:	1e03      	subs	r3, r0, #0
 8009eb6:	d00f      	beq.n	8009ed8 <encoderAction+0xb8>
				LEDstr(&display, 0, menu.current.value,
 8009eb8:	4a98      	ldr	r2, [pc, #608]	; (800a11c <encoderAction+0x2fc>)
 8009eba:	4899      	ldr	r0, [pc, #612]	; (800a120 <encoderAction+0x300>)
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	f7fe ff46 	bl	8008d50 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 8009ec4:	4a93      	ldr	r2, [pc, #588]	; (800a114 <encoderAction+0x2f4>)
 8009ec6:	23a7      	movs	r3, #167	; 0xa7
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	5cd2      	ldrb	r2, [r2, r3]
 8009ecc:	4b94      	ldr	r3, [pc, #592]	; (800a120 <encoderAction+0x300>)
 8009ece:	0011      	movs	r1, r2
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f7fe ff8b 	bl	8008dec <LEDdot>
 8009ed6:	e00a      	b.n	8009eee <encoderAction+0xce>
			} else { //if theres no child under item
				if (menu.current.value3) { //check thats editable
 8009ed8:	4a8e      	ldr	r2, [pc, #568]	; (800a114 <encoderAction+0x2f4>)
 8009eda:	2350      	movs	r3, #80	; 0x50
 8009edc:	33ff      	adds	r3, #255	; 0xff
 8009ede:	5cd3      	ldrb	r3, [r2, r3]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <encoderAction+0xce>
					flags[FLAG_LOCKED] = 1;
 8009ee4:	4b8f      	ldr	r3, [pc, #572]	; (800a124 <encoderAction+0x304>)
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e000      	b.n	8009eee <encoderAction+0xce>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8009eec:	46c0      	nop			; (mov r8, r8)
			}
		}

	}

	if (direction == ENCODER_ACTION_EXIT) {
 8009eee:	1dfb      	adds	r3, r7, #7
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d11d      	bne.n	8009f32 <encoderAction+0x112>

		if (!flags[FLAG_LOCKED]) {
 8009ef6:	4b8b      	ldr	r3, [pc, #556]	; (800a124 <encoderAction+0x304>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d116      	bne.n	8009f2c <encoderAction+0x10c>
			if (menuSwitch(&menu, MENU_EXIT)) {
 8009efe:	4b85      	ldr	r3, [pc, #532]	; (800a114 <encoderAction+0x2f4>)
 8009f00:	2101      	movs	r1, #1
 8009f02:	0018      	movs	r0, r3
 8009f04:	f001 f92e 	bl	800b164 <menuSwitch>
 8009f08:	1e03      	subs	r3, r0, #0
 8009f0a:	d012      	beq.n	8009f32 <encoderAction+0x112>
				LEDstr(&display, 0, menu.current.value,
 8009f0c:	4a83      	ldr	r2, [pc, #524]	; (800a11c <encoderAction+0x2fc>)
 8009f0e:	4884      	ldr	r0, [pc, #528]	; (800a120 <encoderAction+0x300>)
 8009f10:	2302      	movs	r3, #2
 8009f12:	2100      	movs	r1, #0
 8009f14:	f7fe ff1c 	bl	8008d50 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8009f18:	4a7e      	ldr	r2, [pc, #504]	; (800a114 <encoderAction+0x2f4>)
 8009f1a:	23a7      	movs	r3, #167	; 0xa7
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	5cd2      	ldrb	r2, [r2, r3]
 8009f20:	4b7f      	ldr	r3, [pc, #508]	; (800a120 <encoderAction+0x300>)
 8009f22:	0011      	movs	r1, r2
 8009f24:	0018      	movs	r0, r3
 8009f26:	f7fe ff61 	bl	8008dec <LEDdot>
 8009f2a:	e002      	b.n	8009f32 <encoderAction+0x112>
			}
		} else {
			flags[FLAG_LOCKED] = 0;
 8009f2c:	4b7d      	ldr	r3, [pc, #500]	; (800a124 <encoderAction+0x304>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
		}

	}

	if (direction == ENCODER_ACTION_LEFT) {
 8009f32:	1dfb      	adds	r3, r7, #7
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d000      	beq.n	8009f3c <encoderAction+0x11c>
 8009f3a:	e06b      	b.n	800a014 <encoderAction+0x1f4>

		if (!flags[FLAG_LOCKED]) {
 8009f3c:	4b79      	ldr	r3, [pc, #484]	; (800a124 <encoderAction+0x304>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d116      	bne.n	8009f72 <encoderAction+0x152>
			if (menuSwitch(&menu, MENU_UP)) {
 8009f44:	4b73      	ldr	r3, [pc, #460]	; (800a114 <encoderAction+0x2f4>)
 8009f46:	2102      	movs	r1, #2
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f001 f90b 	bl	800b164 <menuSwitch>
 8009f4e:	1e03      	subs	r3, r0, #0
 8009f50:	d065      	beq.n	800a01e <encoderAction+0x1fe>
				LEDstr(&display, 0, menu.current.value,
 8009f52:	4a72      	ldr	r2, [pc, #456]	; (800a11c <encoderAction+0x2fc>)
 8009f54:	4872      	ldr	r0, [pc, #456]	; (800a120 <encoderAction+0x300>)
 8009f56:	2302      	movs	r3, #2
 8009f58:	2100      	movs	r1, #0
 8009f5a:	f7fe fef9 	bl	8008d50 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8009f5e:	4a6d      	ldr	r2, [pc, #436]	; (800a114 <encoderAction+0x2f4>)
 8009f60:	23a7      	movs	r3, #167	; 0xa7
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	5cd2      	ldrb	r2, [r2, r3]
 8009f66:	4b6e      	ldr	r3, [pc, #440]	; (800a120 <encoderAction+0x300>)
 8009f68:	0011      	movs	r1, r2
 8009f6a:	0018      	movs	r0, r3
 8009f6c:	f7fe ff3e 	bl	8008dec <LEDdot>
 8009f70:	e055      	b.n	800a01e <encoderAction+0x1fe>
			}
		} else {

			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 8009f72:	4a68      	ldr	r2, [pc, #416]	; (800a114 <encoderAction+0x2f4>)
 8009f74:	2352      	movs	r3, #82	; 0x52
 8009f76:	33ff      	adds	r3, #255	; 0xff
 8009f78:	5cd3      	ldrb	r3, [r2, r3]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d14a      	bne.n	800a014 <encoderAction+0x1f4>

				switch (menu.current.entry) {
 8009f7e:	4a65      	ldr	r2, [pc, #404]	; (800a114 <encoderAction+0x2f4>)
 8009f80:	23a8      	movs	r3, #168	; 0xa8
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	5cd3      	ldrb	r3, [r2, r3]
 8009f86:	2b07      	cmp	r3, #7
 8009f88:	d849      	bhi.n	800a01e <encoderAction+0x1fe>
 8009f8a:	009a      	lsls	r2, r3, #2
 8009f8c:	4b66      	ldr	r3, [pc, #408]	; (800a128 <encoderAction+0x308>)
 8009f8e:	18d3      	adds	r3, r2, r3
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	469f      	mov	pc, r3
				case SETTINGS_CLOCK_HOUR:
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 8009f94:	4b60      	ldr	r3, [pc, #384]	; (800a118 <encoderAction+0x2f8>)
 8009f96:	2201      	movs	r2, #1
 8009f98:	2100      	movs	r1, #0
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f001 fff2 	bl	800bf84 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009fa0:	e03d      	b.n	800a01e <encoderAction+0x1fe>
				case SETTINGS_CLOCK_MINUTE:
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 8009fa2:	4b5d      	ldr	r3, [pc, #372]	; (800a118 <encoderAction+0x2f8>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f001 ffeb 	bl	800bf84 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009fae:	e036      	b.n	800a01e <encoderAction+0x1fe>
				case SETTINGS_CLOCK_SECONDS:
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 8009fb0:	4b59      	ldr	r3, [pc, #356]	; (800a118 <encoderAction+0x2f8>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f001 ffe4 	bl	800bf84 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009fbc:	e02f      	b.n	800a01e <encoderAction+0x1fe>
				case SETTINGS_CALENDAR_DAY:
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 8009fbe:	4b56      	ldr	r3, [pc, #344]	; (800a118 <encoderAction+0x2f8>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	2103      	movs	r1, #3
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f001 ffdd 	bl	800bf84 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009fca:	e028      	b.n	800a01e <encoderAction+0x1fe>
				case SETTINGS_CALENDAR_MONTH:
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 8009fcc:	4b52      	ldr	r3, [pc, #328]	; (800a118 <encoderAction+0x2f8>)
 8009fce:	2201      	movs	r2, #1
 8009fd0:	2104      	movs	r1, #4
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f001 ffd6 	bl	800bf84 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009fd8:	e021      	b.n	800a01e <encoderAction+0x1fe>
				case SETTINGS_CALENDAR_YEAR:
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 8009fda:	4b4f      	ldr	r3, [pc, #316]	; (800a118 <encoderAction+0x2f8>)
 8009fdc:	2201      	movs	r2, #1
 8009fde:	2105      	movs	r1, #5
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f001 ffcf 	bl	800bf84 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009fe6:	e01a      	b.n	800a01e <encoderAction+0x1fe>
				case SETTINGS_CORRECTION_VALUE:
					if (temperatureCorrection > TEMPERATURE_CORRECTION_MIN)
 8009fe8:	4b50      	ldr	r3, [pc, #320]	; (800a12c <encoderAction+0x30c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3327      	adds	r3, #39	; 0x27
 8009fee:	db13      	blt.n	800a018 <encoderAction+0x1f8>
						temperatureCorrection--;
 8009ff0:	4b4e      	ldr	r3, [pc, #312]	; (800a12c <encoderAction+0x30c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	1e5a      	subs	r2, r3, #1
 8009ff6:	4b4d      	ldr	r3, [pc, #308]	; (800a12c <encoderAction+0x30c>)
 8009ff8:	601a      	str	r2, [r3, #0]
					break;
 8009ffa:	e00d      	b.n	800a018 <encoderAction+0x1f8>
				case SETTINGS_REFERENCE_VALUE:
					if (bme280.pressureReference > PRESSURE_REFERENCE_MIN)
 8009ffc:	4b4c      	ldr	r3, [pc, #304]	; (800a130 <encoderAction+0x310>)
 8009ffe:	695a      	ldr	r2, [r3, #20]
 800a000:	2396      	movs	r3, #150	; 0x96
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	429a      	cmp	r2, r3
 800a006:	d909      	bls.n	800a01c <encoderAction+0x1fc>
						bme280.pressureReference--;
 800a008:	4b49      	ldr	r3, [pc, #292]	; (800a130 <encoderAction+0x310>)
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	4b48      	ldr	r3, [pc, #288]	; (800a130 <encoderAction+0x310>)
 800a010:	615a      	str	r2, [r3, #20]
					break;
 800a012:	e003      	b.n	800a01c <encoderAction+0x1fc>
				}

			}
 800a014:	46c0      	nop			; (mov r8, r8)
 800a016:	e002      	b.n	800a01e <encoderAction+0x1fe>
					break;
 800a018:	46c0      	nop			; (mov r8, r8)
 800a01a:	e000      	b.n	800a01e <encoderAction+0x1fe>
					break;
 800a01c:	46c0      	nop			; (mov r8, r8)

		}

	}
	if (direction == ENCODER_ACTION_RIGHT) {
 800a01e:	1dfb      	adds	r3, r7, #7
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d000      	beq.n	800a028 <encoderAction+0x208>
 800a026:	e06b      	b.n	800a100 <encoderAction+0x2e0>

		if (!flags[FLAG_LOCKED]) {
 800a028:	4b3e      	ldr	r3, [pc, #248]	; (800a124 <encoderAction+0x304>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d116      	bne.n	800a05e <encoderAction+0x23e>
			if (menuSwitch(&menu, MENU_DOWN)) {
 800a030:	4b38      	ldr	r3, [pc, #224]	; (800a114 <encoderAction+0x2f4>)
 800a032:	2103      	movs	r1, #3
 800a034:	0018      	movs	r0, r3
 800a036:	f001 f895 	bl	800b164 <menuSwitch>
 800a03a:	1e03      	subs	r3, r0, #0
 800a03c:	d065      	beq.n	800a10a <encoderAction+0x2ea>
				LEDstr(&display, 0, menu.current.value,
 800a03e:	4a37      	ldr	r2, [pc, #220]	; (800a11c <encoderAction+0x2fc>)
 800a040:	4837      	ldr	r0, [pc, #220]	; (800a120 <encoderAction+0x300>)
 800a042:	2301      	movs	r3, #1
 800a044:	2100      	movs	r1, #0
 800a046:	f7fe fe83 	bl	8008d50 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 800a04a:	4a32      	ldr	r2, [pc, #200]	; (800a114 <encoderAction+0x2f4>)
 800a04c:	23a7      	movs	r3, #167	; 0xa7
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	5cd2      	ldrb	r2, [r2, r3]
 800a052:	4b33      	ldr	r3, [pc, #204]	; (800a120 <encoderAction+0x300>)
 800a054:	0011      	movs	r1, r2
 800a056:	0018      	movs	r0, r3
 800a058:	f7fe fec8 	bl	8008dec <LEDdot>
			}

		}

	}
}
 800a05c:	e055      	b.n	800a10a <encoderAction+0x2ea>
			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 800a05e:	4a2d      	ldr	r2, [pc, #180]	; (800a114 <encoderAction+0x2f4>)
 800a060:	2352      	movs	r3, #82	; 0x52
 800a062:	33ff      	adds	r3, #255	; 0xff
 800a064:	5cd3      	ldrb	r3, [r2, r3]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d14a      	bne.n	800a100 <encoderAction+0x2e0>
				switch (menu.current.entry) {
 800a06a:	4a2a      	ldr	r2, [pc, #168]	; (800a114 <encoderAction+0x2f4>)
 800a06c:	23a8      	movs	r3, #168	; 0xa8
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	5cd3      	ldrb	r3, [r2, r3]
 800a072:	2b07      	cmp	r3, #7
 800a074:	d849      	bhi.n	800a10a <encoderAction+0x2ea>
 800a076:	009a      	lsls	r2, r3, #2
 800a078:	4b2e      	ldr	r3, [pc, #184]	; (800a134 <encoderAction+0x314>)
 800a07a:	18d3      	adds	r3, r2, r3
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	469f      	mov	pc, r3
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <encoderAction+0x2f8>)
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	0018      	movs	r0, r3
 800a088:	f001 ff7c 	bl	800bf84 <rtcChangeValue>
					break;
 800a08c:	e03d      	b.n	800a10a <encoderAction+0x2ea>
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 800a08e:	4b22      	ldr	r3, [pc, #136]	; (800a118 <encoderAction+0x2f8>)
 800a090:	2200      	movs	r2, #0
 800a092:	2101      	movs	r1, #1
 800a094:	0018      	movs	r0, r3
 800a096:	f001 ff75 	bl	800bf84 <rtcChangeValue>
					break;
 800a09a:	e036      	b.n	800a10a <encoderAction+0x2ea>
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 800a09c:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <encoderAction+0x2f8>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2102      	movs	r1, #2
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f001 ff6e 	bl	800bf84 <rtcChangeValue>
					break;
 800a0a8:	e02f      	b.n	800a10a <encoderAction+0x2ea>
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 800a0aa:	4b1b      	ldr	r3, [pc, #108]	; (800a118 <encoderAction+0x2f8>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2103      	movs	r1, #3
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f001 ff67 	bl	800bf84 <rtcChangeValue>
					break;
 800a0b6:	e028      	b.n	800a10a <encoderAction+0x2ea>
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 800a0b8:	4b17      	ldr	r3, [pc, #92]	; (800a118 <encoderAction+0x2f8>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2104      	movs	r1, #4
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f001 ff60 	bl	800bf84 <rtcChangeValue>
					break;
 800a0c4:	e021      	b.n	800a10a <encoderAction+0x2ea>
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <encoderAction+0x2f8>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2105      	movs	r1, #5
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f001 ff59 	bl	800bf84 <rtcChangeValue>
					break;
 800a0d2:	e01a      	b.n	800a10a <encoderAction+0x2ea>
					if (temperatureCorrection < TEMPERATURE_CORRECTION_MAX)
 800a0d4:	4b15      	ldr	r3, [pc, #84]	; (800a12c <encoderAction+0x30c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b1d      	cmp	r3, #29
 800a0da:	dc13      	bgt.n	800a104 <encoderAction+0x2e4>
						temperatureCorrection++;
 800a0dc:	4b13      	ldr	r3, [pc, #76]	; (800a12c <encoderAction+0x30c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	4b12      	ldr	r3, [pc, #72]	; (800a12c <encoderAction+0x30c>)
 800a0e4:	601a      	str	r2, [r3, #0]
					break;
 800a0e6:	e00d      	b.n	800a104 <encoderAction+0x2e4>
					if (bme280.pressureReference < PRESSURE_REFERENCE_MAX)
 800a0e8:	4b11      	ldr	r3, [pc, #68]	; (800a130 <encoderAction+0x310>)
 800a0ea:	695a      	ldr	r2, [r3, #20]
 800a0ec:	23af      	movs	r3, #175	; 0xaf
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d209      	bcs.n	800a108 <encoderAction+0x2e8>
						bme280.pressureReference++;
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <encoderAction+0x310>)
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <encoderAction+0x310>)
 800a0fc:	615a      	str	r2, [r3, #20]
					break;
 800a0fe:	e003      	b.n	800a108 <encoderAction+0x2e8>
			}
 800a100:	46c0      	nop			; (mov r8, r8)
 800a102:	e002      	b.n	800a10a <encoderAction+0x2ea>
					break;
 800a104:	46c0      	nop			; (mov r8, r8)
 800a106:	e000      	b.n	800a10a <encoderAction+0x2ea>
					break;
 800a108:	46c0      	nop			; (mov r8, r8)
}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b002      	add	sp, #8
 800a110:	bd80      	pop	{r7, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	200000cc 	.word	0x200000cc
 800a118:	20000270 	.word	0x20000270
 800a11c:	20000216 	.word	0x20000216
 800a120:	20000298 	.word	0x20000298
 800a124:	200000c8 	.word	0x200000c8
 800a128:	0800d77c 	.word	0x0800d77c
 800a12c:	200000b0 	.word	0x200000b0
 800a130:	200003bc 	.word	0x200003bc
 800a134:	0800d79c 	.word	0x0800d79c

0800a138 <GPIO_EXTI_Rising_FallingCallback>:

void GPIO_EXTI_Rising_FallingCallback(uint16_t GPIO_Pin) {
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	0002      	movs	r2, r0
 800a140:	1dbb      	adds	r3, r7, #6
 800a142:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800a144:	23a0      	movs	r3, #160	; 0xa0
 800a146:	05db      	lsls	r3, r3, #23
 800a148:	2201      	movs	r2, #1
 800a14a:	2110      	movs	r1, #16
 800a14c:	0018      	movs	r0, r3
 800a14e:	f7fa fcae 	bl	8004aae <HAL_GPIO_WritePin>

	TIM2->CNT = 0; // reset timer if interrupt occurs
 800a152:	2380      	movs	r3, #128	; 0x80
 800a154:	05db      	lsls	r3, r3, #23
 800a156:	2200      	movs	r2, #0
 800a158:	625a      	str	r2, [r3, #36]	; 0x24

	if (GPIO_Pin == ENC1_Pin) {
 800a15a:	1dbb      	adds	r3, r7, #6
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	d111      	bne.n	800a186 <GPIO_EXTI_Rising_FallingCallback+0x4e>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800a162:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <GPIO_EXTI_Rising_FallingCallback+0xac>)
 800a164:	2140      	movs	r1, #64	; 0x40
 800a166:	0018      	movs	r0, r3
 800a168:	f7fa fc84 	bl	8004a74 <HAL_GPIO_ReadPin>
 800a16c:	0003      	movs	r3, r0
 800a16e:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800a170:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <GPIO_EXTI_Rising_FallingCallback+0xac>)
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	0018      	movs	r0, r3
 800a176:	f7fa fc7d 	bl	8004a74 <HAL_GPIO_ReadPin>
 800a17a:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d002      	beq.n	800a186 <GPIO_EXTI_Rising_FallingCallback+0x4e>
			encoderAction(ENCODER_ACTION_LEFT);
 800a180:	2000      	movs	r0, #0
 800a182:	f7ff fe4d 	bl	8009e20 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 800a186:	1dbb      	adds	r3, r7, #6
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	2b80      	cmp	r3, #128	; 0x80
 800a18c:	d111      	bne.n	800a1b2 <GPIO_EXTI_Rising_FallingCallback+0x7a>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800a18e:	4b15      	ldr	r3, [pc, #84]	; (800a1e4 <GPIO_EXTI_Rising_FallingCallback+0xac>)
 800a190:	2140      	movs	r1, #64	; 0x40
 800a192:	0018      	movs	r0, r3
 800a194:	f7fa fc6e 	bl	8004a74 <HAL_GPIO_ReadPin>
 800a198:	0003      	movs	r3, r0
 800a19a:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800a19c:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <GPIO_EXTI_Rising_FallingCallback+0xac>)
 800a19e:	2180      	movs	r1, #128	; 0x80
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f7fa fc67 	bl	8004a74 <HAL_GPIO_ReadPin>
 800a1a6:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d002      	beq.n	800a1b2 <GPIO_EXTI_Rising_FallingCallback+0x7a>
			encoderAction(ENCODER_ACTION_RIGHT);
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	f7ff fe37 	bl	8009e20 <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 800a1b2:	1dbb      	adds	r3, r7, #6
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d102      	bne.n	800a1c0 <GPIO_EXTI_Rising_FallingCallback+0x88>
		encoderAction(ENCODER_ACTION_ENTER);
 800a1ba:	2002      	movs	r0, #2
 800a1bc:	f7ff fe30 	bl	8009e20 <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 800a1c0:	1dbb      	adds	r3, r7, #6
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	2b10      	cmp	r3, #16
 800a1c6:	d102      	bne.n	800a1ce <GPIO_EXTI_Rising_FallingCallback+0x96>
		encoderAction(ENCODER_ACTION_EXIT);
 800a1c8:	2003      	movs	r0, #3
 800a1ca:	f7ff fe29 	bl	8009e20 <encoderAction>

	if (GPIO_Pin == MODE_Pin) {

	}

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800a1ce:	23a0      	movs	r3, #160	; 0xa0
 800a1d0:	05db      	lsls	r3, r3, #23
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2110      	movs	r1, #16
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7fa fc69 	bl	8004aae <HAL_GPIO_WritePin>
}
 800a1dc:	46c0      	nop			; (mov r8, r8)
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b003      	add	sp, #12
 800a1e2:	bd90      	pop	{r4, r7, pc}
 800a1e4:	50000400 	.word	0x50000400

0800a1e8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	0002      	movs	r2, r0
 800a1f0:	1dbb      	adds	r3, r7, #6
 800a1f2:	801a      	strh	r2, [r3, #0]
	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 800a1f4:	1dbb      	adds	r3, r7, #6
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7ff ff9d 	bl	800a138 <GPIO_EXTI_Rising_FallingCallback>
}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	46bd      	mov	sp, r7
 800a202:	b002      	add	sp, #8
 800a204:	bd80      	pop	{r7, pc}

0800a206 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	0002      	movs	r2, r0
 800a20e:	1dbb      	adds	r3, r7, #6
 800a210:	801a      	strh	r2, [r3, #0]

	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 800a212:	1dbb      	adds	r3, r7, #6
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	0018      	movs	r0, r3
 800a218:	f7ff ff8e 	bl	800a138 <GPIO_EXTI_Rising_FallingCallback>

}
 800a21c:	46c0      	nop			; (mov r8, r8)
 800a21e:	46bd      	mov	sp, r7
 800a220:	b002      	add	sp, #8
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1f      	ldr	r2, [pc, #124]	; (800a2b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d103      	bne.n	800a23e <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 800a236:	4b1f      	ldr	r3, [pc, #124]	; (800a2b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800a238:	0018      	movs	r0, r3
 800a23a:	f7fd ff99 	bl	8008170 <LEDmultiplexing>
	}
	if (htim->Instance == TIM2) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	2380      	movs	r3, #128	; 0x80
 800a244:	05db      	lsls	r3, r3, #23
 800a246:	429a      	cmp	r2, r3
 800a248:	d102      	bne.n	800a250 <HAL_TIM_PeriodElapsedCallback+0x2c>
		flags[FLAG_SLEEP] = 1;
 800a24a:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800a24c:	2201      	movs	r2, #1
 800a24e:	705a      	strb	r2, [r3, #1]
	}
	if (htim->Instance == TIM3) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a19      	ldr	r2, [pc, #100]	; (800a2bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d126      	bne.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x84>
		//								READ REF VOLTAGE
		adcSetChannel(&hadc1, ADC_CHANNEL_VREFINT);
 800a25a:	4a19      	ldr	r2, [pc, #100]	; (800a2c0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800a25c:	4b19      	ldr	r3, [pc, #100]	; (800a2c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a25e:	0011      	movs	r1, r2
 800a260:	0018      	movs	r0, r3
 800a262:	f7fe fddf 	bl	8008e24 <adcSetChannel>
		uint32_t voltageRef = adcVoltage(adcRead(&hadc1));
 800a266:	4b17      	ldr	r3, [pc, #92]	; (800a2c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a268:	0018      	movs	r0, r3
 800a26a:	f7fe fdff 	bl	8008e6c <adcRead>
 800a26e:	0003      	movs	r3, r0
 800a270:	0018      	movs	r0, r3
 800a272:	f7fe fe49 	bl	8008f08 <adcVoltage>
 800a276:	0003      	movs	r3, r0
 800a278:	60fb      	str	r3, [r7, #12]

		adcSetChannel(&hadc1, ADC_CHANNEL_TEMPSENSOR);
 800a27a:	4a13      	ldr	r2, [pc, #76]	; (800a2c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a27c:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a27e:	0011      	movs	r1, r2
 800a280:	0018      	movs	r0, r3
 800a282:	f7fe fdcf 	bl	8008e24 <adcSetChannel>
		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
 800a286:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a288:	0018      	movs	r0, r3
 800a28a:	f7fe fdef 	bl	8008e6c <adcRead>
 800a28e:	0002      	movs	r2, r0
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	0019      	movs	r1, r3
 800a294:	0010      	movs	r0, r2
 800a296:	f7fe fe03 	bl	8008ea0 <adcTemperature>
 800a29a:	0002      	movs	r2, r0
				+ temperatureCorrection;
 800a29c:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	18d3      	adds	r3, r2, r3
 800a2a2:	001a      	movs	r2, r3
		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	; (800a2d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a2a6:	601a      	str	r2, [r3, #0]
	}
}
 800a2a8:	46c0      	nop			; (mov r8, r8)
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	b004      	add	sp, #16
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	40012c00 	.word	0x40012c00
 800a2b4:	20000298 	.word	0x20000298
 800a2b8:	200000c8 	.word	0x200000c8
 800a2bc:	40000400 	.word	0x40000400
 800a2c0:	b4002000 	.word	0xb4002000
 800a2c4:	20000358 	.word	0x20000358
 800a2c8:	b0001000 	.word	0xb0001000
 800a2cc:	200000b0 	.word	0x200000b0
 800a2d0:	200000a0 	.word	0x200000a0

0800a2d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b096      	sub	sp, #88	; 0x58
 800a2d8:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a2da:	f7f9 f95b 	bl	8003594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2de:	f000 fa3f 	bl	800a760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2e2:	f000 fd09 	bl	800acf8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800a2e6:	f000 fbaf 	bl	800aa48 <MX_TIM1_Init>
  MX_TIM2_Init();
 800a2ea:	f000 fc09 	bl	800ab00 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800a2ee:	f000 fcb5 	bl	800ac5c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800a2f2:	f000 fb3d 	bl	800a970 <MX_RTC_Init>
  MX_ADC1_Init();
 800a2f6:	f000 fa89 	bl	800a80c <MX_ADC1_Init>
  MX_TIM3_Init();
 800a2fa:	f000 fc57 	bl	800abac <MX_TIM3_Init>
  MX_I2C1_Init();
 800a2fe:	f000 faf7 	bl	800a8f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 800a302:	4bfb      	ldr	r3, [pc, #1004]	; (800a6f0 <main+0x41c>)
 800a304:	0018      	movs	r0, r3
 800a306:	f7fc fcd5 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800a30a:	4bfa      	ldr	r3, [pc, #1000]	; (800a6f4 <main+0x420>)
 800a30c:	0018      	movs	r0, r3
 800a30e:	f7fc fcd1 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800a312:	4bf9      	ldr	r3, [pc, #996]	; (800a6f8 <main+0x424>)
 800a314:	0018      	movs	r0, r3
 800a316:	f7fc fccd 	bl	8006cb4 <HAL_TIM_Base_Start_IT>

	adcInit(&hadc1);
 800a31a:	4bf8      	ldr	r3, [pc, #992]	; (800a6fc <main+0x428>)
 800a31c:	0018      	movs	r0, r3
 800a31e:	f7fe fd75 	bl	8008e0c <adcInit>
	temperatureCorrection = 0;
 800a322:	4bf7      	ldr	r3, [pc, #988]	; (800a700 <main+0x42c>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
	bme280.pressureReference = 1013;
 800a328:	4bf6      	ldr	r3, [pc, #984]	; (800a704 <main+0x430>)
 800a32a:	4af7      	ldr	r2, [pc, #988]	; (800a708 <main+0x434>)
 800a32c:	615a      	str	r2, [r3, #20]


//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 800a32e:	4af7      	ldr	r2, [pc, #988]	; (800a70c <main+0x438>)
 800a330:	23a0      	movs	r3, #160	; 0xa0
 800a332:	05d9      	lsls	r1, r3, #23
 800a334:	48f6      	ldr	r0, [pc, #984]	; (800a710 <main+0x43c>)
 800a336:	2380      	movs	r3, #128	; 0x80
 800a338:	011b      	lsls	r3, r3, #4
 800a33a:	9314      	str	r3, [sp, #80]	; 0x50
 800a33c:	23a0      	movs	r3, #160	; 0xa0
 800a33e:	05db      	lsls	r3, r3, #23
 800a340:	9313      	str	r3, [sp, #76]	; 0x4c
 800a342:	2380      	movs	r3, #128	; 0x80
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	9312      	str	r3, [sp, #72]	; 0x48
 800a348:	23a0      	movs	r3, #160	; 0xa0
 800a34a:	05db      	lsls	r3, r3, #23
 800a34c:	9311      	str	r3, [sp, #68]	; 0x44
 800a34e:	2301      	movs	r3, #1
 800a350:	9310      	str	r3, [sp, #64]	; 0x40
 800a352:	4bee      	ldr	r3, [pc, #952]	; (800a70c <main+0x438>)
 800a354:	930f      	str	r3, [sp, #60]	; 0x3c
 800a356:	2340      	movs	r3, #64	; 0x40
 800a358:	930e      	str	r3, [sp, #56]	; 0x38
 800a35a:	4bee      	ldr	r3, [pc, #952]	; (800a714 <main+0x440>)
 800a35c:	930d      	str	r3, [sp, #52]	; 0x34
 800a35e:	2380      	movs	r3, #128	; 0x80
 800a360:	00db      	lsls	r3, r3, #3
 800a362:	930c      	str	r3, [sp, #48]	; 0x30
 800a364:	23a0      	movs	r3, #160	; 0xa0
 800a366:	05db      	lsls	r3, r3, #23
 800a368:	930b      	str	r3, [sp, #44]	; 0x2c
 800a36a:	2380      	movs	r3, #128	; 0x80
 800a36c:	015b      	lsls	r3, r3, #5
 800a36e:	930a      	str	r3, [sp, #40]	; 0x28
 800a370:	23a0      	movs	r3, #160	; 0xa0
 800a372:	05db      	lsls	r3, r3, #23
 800a374:	9309      	str	r3, [sp, #36]	; 0x24
 800a376:	2380      	movs	r3, #128	; 0x80
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	9308      	str	r3, [sp, #32]
 800a37c:	23a0      	movs	r3, #160	; 0xa0
 800a37e:	05db      	lsls	r3, r3, #23
 800a380:	9307      	str	r3, [sp, #28]
 800a382:	2380      	movs	r3, #128	; 0x80
 800a384:	9306      	str	r3, [sp, #24]
 800a386:	23a0      	movs	r3, #160	; 0xa0
 800a388:	05db      	lsls	r3, r3, #23
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	23a0      	movs	r3, #160	; 0xa0
 800a394:	05db      	lsls	r3, r3, #23
 800a396:	9303      	str	r3, [sp, #12]
 800a398:	2304      	movs	r3, #4
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	4bdb      	ldr	r3, [pc, #876]	; (800a70c <main+0x438>)
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	0013      	movs	r3, r2
 800a3a6:	2240      	movs	r2, #64	; 0x40
 800a3a8:	f7fe fc14 	bl	8008bd4 <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "    ");
 800a3ac:	4ada      	ldr	r2, [pc, #872]	; (800a718 <main+0x444>)
 800a3ae:	4bd8      	ldr	r3, [pc, #864]	; (800a710 <main+0x43c>)
 800a3b0:	0011      	movs	r1, r2
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f7fe fc8e 	bl	8008cd4 <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 800a3b8:	48d8      	ldr	r0, [pc, #864]	; (800a71c <main+0x448>)
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	23ff      	movs	r3, #255	; 0xff
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f000 fe56 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, CHRONO_HUNDREDTHS,
 800a3cc:	48d3      	ldr	r0, [pc, #844]	; (800a71c <main+0x448>)
 800a3ce:	2305      	movs	r3, #5
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	23ff      	movs	r3, #255	; 0xff
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2101      	movs	r1, #1
 800a3dc:	f000 fe4c 	bl	800b078 <menuItemInit>
	CHRONO_RESET);
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800a3e0:	48ce      	ldr	r0, [pc, #824]	; (800a71c <main+0x448>)
 800a3e2:	23ff      	movs	r3, #255	; 0xff
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	23ff      	movs	r3, #255	; 0xff
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	23ff      	movs	r3, #255	; 0xff
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2103      	movs	r1, #3
 800a3f0:	f000 fe42 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800a3f4:	48c9      	ldr	r0, [pc, #804]	; (800a71c <main+0x448>)
 800a3f6:	23ff      	movs	r3, #255	; 0xff
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	23ff      	movs	r3, #255	; 0xff
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	23ff      	movs	r3, #255	; 0xff
 800a400:	2200      	movs	r2, #0
 800a402:	2104      	movs	r1, #4
 800a404:	f000 fe38 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800a408:	48c4      	ldr	r0, [pc, #784]	; (800a71c <main+0x448>)
 800a40a:	23ff      	movs	r3, #255	; 0xff
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	23ff      	movs	r3, #255	; 0xff
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	23ff      	movs	r3, #255	; 0xff
 800a414:	2200      	movs	r2, #0
 800a416:	2102      	movs	r1, #2
 800a418:	f000 fe2e 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800a41c:	48bf      	ldr	r0, [pc, #764]	; (800a71c <main+0x448>)
 800a41e:	23ff      	movs	r3, #255	; 0xff
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	23ff      	movs	r3, #255	; 0xff
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	23ff      	movs	r3, #255	; 0xff
 800a428:	2200      	movs	r2, #0
 800a42a:	2105      	movs	r1, #5
 800a42c:	f000 fe24 	bl	800b078 <menuItemInit>
//	menuItemInit(&menu, AZIMUTH, 0, MENU_NONE, MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, SETTINGS_CLOCK,
 800a430:	48ba      	ldr	r0, [pc, #744]	; (800a71c <main+0x448>)
 800a432:	2309      	movs	r3, #9
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	2306      	movs	r3, #6
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	23ff      	movs	r3, #255	; 0xff
 800a43c:	2200      	movs	r2, #0
 800a43e:	2106      	movs	r1, #6
 800a440:	f000 fe1a 	bl	800b078 <menuItemInit>
	SETTINGS_REFERENCE);

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 800a444:	48b5      	ldr	r0, [pc, #724]	; (800a71c <main+0x448>)
 800a446:	23ff      	movs	r3, #255	; 0xff
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	23ff      	movs	r3, #255	; 0xff
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	2300      	movs	r3, #0
 800a450:	2201      	movs	r2, #1
 800a452:	2100      	movs	r1, #0
 800a454:	f000 fe10 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 800a458:	48b0      	ldr	r0, [pc, #704]	; (800a71c <main+0x448>)
 800a45a:	23ff      	movs	r3, #255	; 0xff
 800a45c:	9301      	str	r3, [sp, #4]
 800a45e:	23ff      	movs	r3, #255	; 0xff
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	2300      	movs	r3, #0
 800a464:	2201      	movs	r2, #1
 800a466:	2101      	movs	r1, #1
 800a468:	f000 fe06 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 800a46c:	48ab      	ldr	r0, [pc, #684]	; (800a71c <main+0x448>)
 800a46e:	23ff      	movs	r3, #255	; 0xff
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	23ff      	movs	r3, #255	; 0xff
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	2301      	movs	r3, #1
 800a478:	2201      	movs	r2, #1
 800a47a:	2103      	movs	r1, #3
 800a47c:	f000 fdfc 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, CHRONO_HUNDREDTHS, 1, CHRONO, MENU_NONE, MENU_NONE);
 800a480:	48a6      	ldr	r0, [pc, #664]	; (800a71c <main+0x448>)
 800a482:	23ff      	movs	r3, #255	; 0xff
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	23ff      	movs	r3, #255	; 0xff
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2301      	movs	r3, #1
 800a48c:	2201      	movs	r2, #1
 800a48e:	2102      	movs	r1, #2
 800a490:	f000 fdf2 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, CHRONO_START, 1, CHRONO, MENU_NONE, MENU_NONE);
 800a494:	48a1      	ldr	r0, [pc, #644]	; (800a71c <main+0x448>)
 800a496:	23ff      	movs	r3, #255	; 0xff
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	23ff      	movs	r3, #255	; 0xff
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	2301      	movs	r3, #1
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	2104      	movs	r1, #4
 800a4a4:	f000 fde8 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 800a4a8:	489c      	ldr	r0, [pc, #624]	; (800a71c <main+0x448>)
 800a4aa:	23ff      	movs	r3, #255	; 0xff
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	23ff      	movs	r3, #255	; 0xff
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	2105      	movs	r1, #5
 800a4b8:	f000 fdde 	bl	800b078 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, SETTINGS_CLOCK_HOUR,
 800a4bc:	4897      	ldr	r0, [pc, #604]	; (800a71c <main+0x448>)
 800a4be:	2302      	movs	r3, #2
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	2306      	movs	r3, #6
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	2106      	movs	r1, #6
 800a4cc:	f000 fdd4 	bl	800b078 <menuItemInit>
	SETTINGS_CLOCK_SECONDS);
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS,
 800a4d0:	4892      	ldr	r0, [pc, #584]	; (800a71c <main+0x448>)
 800a4d2:	2305      	movs	r3, #5
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	2306      	movs	r3, #6
 800a4dc:	2201      	movs	r2, #1
 800a4de:	2107      	movs	r1, #7
 800a4e0:	f000 fdca 	bl	800b078 <menuItemInit>
	SETTINGS_CALENDAR_DAY,
	SETTINGS_CALENDAR_YEAR);
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS,
 800a4e4:	488d      	ldr	r0, [pc, #564]	; (800a71c <main+0x448>)
 800a4e6:	2307      	movs	r3, #7
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	2307      	movs	r3, #7
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	2306      	movs	r3, #6
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	2109      	movs	r1, #9
 800a4f4:	f000 fdc0 	bl	800b078 <menuItemInit>
	SETTINGS_REFERENCE_VALUE,
	SETTINGS_REFERENCE_VALUE);
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS,
 800a4f8:	4888      	ldr	r0, [pc, #544]	; (800a71c <main+0x448>)
 800a4fa:	2306      	movs	r3, #6
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	2306      	movs	r3, #6
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	2306      	movs	r3, #6
 800a504:	2201      	movs	r2, #1
 800a506:	2108      	movs	r1, #8
 800a508:	f000 fdb6 	bl	800b078 <menuItemInit>
	SETTINGS_CORRECTION_VALUE,
	SETTINGS_CORRECTION_VALUE);

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOUR, 2, SETTINGS_CLOCK, MENU_NONE,
 800a50c:	4883      	ldr	r0, [pc, #524]	; (800a71c <main+0x448>)
 800a50e:	23ff      	movs	r3, #255	; 0xff
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	23ff      	movs	r3, #255	; 0xff
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2306      	movs	r3, #6
 800a518:	2202      	movs	r2, #2
 800a51a:	2100      	movs	r1, #0
 800a51c:	f000 fdac 	bl	800b078 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_MINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 800a520:	487e      	ldr	r0, [pc, #504]	; (800a71c <main+0x448>)
 800a522:	23ff      	movs	r3, #255	; 0xff
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	23ff      	movs	r3, #255	; 0xff
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	2306      	movs	r3, #6
 800a52c:	2202      	movs	r2, #2
 800a52e:	2101      	movs	r1, #1
 800a530:	f000 fda2 	bl	800b078 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK,
 800a534:	4879      	ldr	r0, [pc, #484]	; (800a71c <main+0x448>)
 800a536:	23ff      	movs	r3, #255	; 0xff
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	23ff      	movs	r3, #255	; 0xff
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	2306      	movs	r3, #6
 800a540:	2202      	movs	r2, #2
 800a542:	2102      	movs	r1, #2
 800a544:	f000 fd98 	bl	800b078 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAY, 2, SETTINGS_CALENDAR,
 800a548:	4874      	ldr	r0, [pc, #464]	; (800a71c <main+0x448>)
 800a54a:	23ff      	movs	r3, #255	; 0xff
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	23ff      	movs	r3, #255	; 0xff
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	2307      	movs	r3, #7
 800a554:	2202      	movs	r2, #2
 800a556:	2103      	movs	r1, #3
 800a558:	f000 fd8e 	bl	800b078 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_MONTH, 2, SETTINGS_CALENDAR,
 800a55c:	486f      	ldr	r0, [pc, #444]	; (800a71c <main+0x448>)
 800a55e:	23ff      	movs	r3, #255	; 0xff
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	23ff      	movs	r3, #255	; 0xff
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	2307      	movs	r3, #7
 800a568:	2202      	movs	r2, #2
 800a56a:	2104      	movs	r1, #4
 800a56c:	f000 fd84 	bl	800b078 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR,
 800a570:	486a      	ldr	r0, [pc, #424]	; (800a71c <main+0x448>)
 800a572:	23ff      	movs	r3, #255	; 0xff
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	23ff      	movs	r3, #255	; 0xff
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	2307      	movs	r3, #7
 800a57c:	2202      	movs	r2, #2
 800a57e:	2105      	movs	r1, #5
 800a580:	f000 fd7a 	bl	800b078 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CORRECTION_VALUE, 2, SETTINGS_CORRECTION,
 800a584:	4865      	ldr	r0, [pc, #404]	; (800a71c <main+0x448>)
 800a586:	23ff      	movs	r3, #255	; 0xff
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	23ff      	movs	r3, #255	; 0xff
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	2308      	movs	r3, #8
 800a590:	2202      	movs	r2, #2
 800a592:	2106      	movs	r1, #6
 800a594:	f000 fd70 	bl	800b078 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_REFERENCE_VALUE, 2, SETTINGS_REFERENCE,
 800a598:	4860      	ldr	r0, [pc, #384]	; (800a71c <main+0x448>)
 800a59a:	23ff      	movs	r3, #255	; 0xff
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	23ff      	movs	r3, #255	; 0xff
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	2309      	movs	r3, #9
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	2107      	movs	r1, #7
 800a5a8:	f000 fd66 	bl	800b078 <menuItemInit>
	MENU_NONE, MENU_NONE);

	//												MENU ITEMS CONSTANT VALUES
	//level 0
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", INTER_DISABLED,
 800a5ac:	4b5c      	ldr	r3, [pc, #368]	; (800a720 <main+0x44c>)
 800a5ae:	485b      	ldr	r0, [pc, #364]	; (800a71c <main+0x448>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	9201      	str	r2, [sp, #4]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	9200      	str	r2, [sp, #0]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2106      	movs	r1, #6
 800a5bc:	f000 fc8c 	bl	800aed8 <menuItemChangeValue>
	NOT_EDITABLE);

	//level 1
	menuItemChangeValue(&menu, CHRONO_START, 1, "St  ", INTER_DISABLED,
 800a5c0:	4b58      	ldr	r3, [pc, #352]	; (800a724 <main+0x450>)
 800a5c2:	4856      	ldr	r0, [pc, #344]	; (800a71c <main+0x448>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	9201      	str	r2, [sp, #4]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	9200      	str	r2, [sp, #0]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	2104      	movs	r1, #4
 800a5d0:	f000 fc82 	bl	800aed8 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", INTER_COLON,
 800a5d4:	4b54      	ldr	r3, [pc, #336]	; (800a728 <main+0x454>)
 800a5d6:	4851      	ldr	r0, [pc, #324]	; (800a71c <main+0x448>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	9201      	str	r2, [sp, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	9200      	str	r2, [sp, #0]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	2105      	movs	r1, #5
 800a5e4:	f000 fc78 	bl	800aed8 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", INTER_DISABLED,
 800a5e8:	4b50      	ldr	r3, [pc, #320]	; (800a72c <main+0x458>)
 800a5ea:	484c      	ldr	r0, [pc, #304]	; (800a71c <main+0x448>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	9201      	str	r2, [sp, #4]
 800a5f0:	2204      	movs	r2, #4
 800a5f2:	9200      	str	r2, [sp, #0]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	2106      	movs	r1, #6
 800a5f8:	f000 fc6e 	bl	800aed8 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", INTER_DISABLED,
 800a5fc:	4b4c      	ldr	r3, [pc, #304]	; (800a730 <main+0x45c>)
 800a5fe:	4847      	ldr	r0, [pc, #284]	; (800a71c <main+0x448>)
 800a600:	2200      	movs	r2, #0
 800a602:	9201      	str	r2, [sp, #4]
 800a604:	2204      	movs	r2, #4
 800a606:	9200      	str	r2, [sp, #0]
 800a608:	2201      	movs	r2, #1
 800a60a:	2107      	movs	r1, #7
 800a60c:	f000 fc64 	bl	800aed8 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ",
 800a610:	4b48      	ldr	r3, [pc, #288]	; (800a734 <main+0x460>)
 800a612:	4842      	ldr	r0, [pc, #264]	; (800a71c <main+0x448>)
 800a614:	2200      	movs	r2, #0
 800a616:	9201      	str	r2, [sp, #4]
 800a618:	2204      	movs	r2, #4
 800a61a:	9200      	str	r2, [sp, #0]
 800a61c:	2201      	movs	r2, #1
 800a61e:	2108      	movs	r1, #8
 800a620:	f000 fc5a 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ",
 800a624:	4b44      	ldr	r3, [pc, #272]	; (800a738 <main+0x464>)
 800a626:	483d      	ldr	r0, [pc, #244]	; (800a71c <main+0x448>)
 800a628:	2200      	movs	r2, #0
 800a62a:	9201      	str	r2, [sp, #4]
 800a62c:	2204      	movs	r2, #4
 800a62e:	9200      	str	r2, [sp, #0]
 800a630:	2201      	movs	r2, #1
 800a632:	2109      	movs	r1, #9
 800a634:	f000 fc50 	bl	800aed8 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);



	bme280Init(&bme280, &hi2c1);
 800a638:	4a40      	ldr	r2, [pc, #256]	; (800a73c <main+0x468>)
 800a63a:	4b32      	ldr	r3, [pc, #200]	; (800a704 <main+0x430>)
 800a63c:	0011      	movs	r1, r2
 800a63e:	0018      	movs	r0, r3
 800a640:	f7fe fc78 	bl	8008f34 <bme280Init>
	HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800a644:	23a0      	movs	r3, #160	; 0xa0
 800a646:	05db      	lsls	r3, r3, #23
 800a648:	2201      	movs	r2, #1
 800a64a:	2102      	movs	r1, #2
 800a64c:	0018      	movs	r0, r3
 800a64e:	f7fa fa2e 	bl	8004aae <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800a652:	2014      	movs	r0, #20
 800a654:	f7f9 f824 	bl	80036a0 <HAL_Delay>
	menuResetCurrent(&menu);
 800a658:	4b30      	ldr	r3, [pc, #192]	; (800a71c <main+0x448>)
 800a65a:	0018      	movs	r0, r3
 800a65c:	f000 fc13 	bl	800ae86 <menuResetCurrent>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//read RTC time
		rtcGetTime(&chronograph);
 800a660:	4b37      	ldr	r3, [pc, #220]	; (800a740 <main+0x46c>)
 800a662:	0018      	movs	r0, r3
 800a664:	f001 f8d0 	bl	800b808 <rtcGetTime>

		//read sensor
		bme280Read(&bme280);
 800a668:	4b26      	ldr	r3, [pc, #152]	; (800a704 <main+0x430>)
 800a66a:	0018      	movs	r0, r3
 800a66c:	f7fe fda2 	bl	80091b4 <bme280Read>

		//write actual values to menu matrix
		interfaceWrite();
 800a670:	f7ff f8ec 	bl	800984c <interfaceWrite>

		//display current item
		if (display.transitionStatus == LED_TRANSITION_DISABLED) {
 800a674:	4b26      	ldr	r3, [pc, #152]	; (800a710 <main+0x43c>)
 800a676:	2267      	movs	r2, #103	; 0x67
 800a678:	5c9b      	ldrb	r3, [r3, r2]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <main+0x3ae>
			interfaceShowActual();
 800a67e:	f7ff fb6b 	bl	8009d58 <interfaceShowActual>
		}

		//												LOW POWER SECTION
		if (flags[FLAG_SLEEP]
 800a682:	4b30      	ldr	r3, [pc, #192]	; (800a744 <main+0x470>)
 800a684:	785b      	ldrb	r3, [r3, #1]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0ea      	beq.n	800a660 <main+0x38c>
				&& HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) {
 800a68a:	4b20      	ldr	r3, [pc, #128]	; (800a70c <main+0x438>)
 800a68c:	2108      	movs	r1, #8
 800a68e:	0018      	movs	r0, r3
 800a690:	f7fa f9f0 	bl	8004a74 <HAL_GPIO_ReadPin>
 800a694:	0003      	movs	r3, r0
 800a696:	2b01      	cmp	r3, #1
 800a698:	d1e2      	bne.n	800a660 <main+0x38c>
			HAL_TIM_Base_Stop_IT(&htim1);
 800a69a:	4b15      	ldr	r3, [pc, #84]	; (800a6f0 <main+0x41c>)
 800a69c:	0018      	movs	r0, r3
 800a69e:	f7fc fb65 	bl	8006d6c <HAL_TIM_Base_Stop_IT>
			LEDclear(&display);
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <main+0x43c>)
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7fe fb3c 	bl	8008d22 <LEDclear>
			flags[FLAG_SLEEP] = 0;
 800a6aa:	4b26      	ldr	r3, [pc, #152]	; (800a744 <main+0x470>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 0);
 800a6b0:	23a0      	movs	r3, #160	; 0xa0
 800a6b2:	05db      	lsls	r3, r3, #23
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2102      	movs	r1, #2
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	f7fa f9f8 	bl	8004aae <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800a6be:	200a      	movs	r0, #10
 800a6c0:	f7f8 ffee 	bl	80036a0 <HAL_Delay>

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,
 800a6c4:	2380      	movs	r3, #128	; 0x80
 800a6c6:	01db      	lsls	r3, r3, #7
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	f7fb f826 	bl	800571c <HAL_PWR_EnterSTOPMode>
			PWR_STOPENTRY_WFI);

			//											AFTER WAKE UP
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800a6d0:	23a0      	movs	r3, #160	; 0xa0
 800a6d2:	05db      	lsls	r3, r3, #23
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	2102      	movs	r1, #2
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f7fa f9e8 	bl	8004aae <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800a6de:	200a      	movs	r0, #10
 800a6e0:	f7f8 ffde 	bl	80036a0 <HAL_Delay>
			menuResetCurrent(&menu);
 800a6e4:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <main+0x448>)
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f000 fbcd 	bl	800ae86 <menuResetCurrent>
 800a6ec:	e02c      	b.n	800a748 <main+0x474>
 800a6ee:	46c0      	nop			; (mov r8, r8)
 800a6f0:	20000430 	.word	0x20000430
 800a6f4:	2000047c 	.word	0x2000047c
 800a6f8:	2000030c 	.word	0x2000030c
 800a6fc:	20000358 	.word	0x20000358
 800a700:	200000b0 	.word	0x200000b0
 800a704:	200003bc 	.word	0x200003bc
 800a708:	000003f5 	.word	0x000003f5
 800a70c:	50000400 	.word	0x50000400
 800a710:	20000298 	.word	0x20000298
 800a714:	50000800 	.word	0x50000800
 800a718:	0800d490 	.word	0x0800d490
 800a71c:	200000cc 	.word	0x200000cc
 800a720:	0800d498 	.word	0x0800d498
 800a724:	0800d49c 	.word	0x0800d49c
 800a728:	0800d4a4 	.word	0x0800d4a4
 800a72c:	0800d4ac 	.word	0x0800d4ac
 800a730:	0800d4b4 	.word	0x0800d4b4
 800a734:	0800d4bc 	.word	0x0800d4bc
 800a738:	0800d4c4 	.word	0x0800d4c4
 800a73c:	20000224 	.word	0x20000224
 800a740:	20000270 	.word	0x20000270
 800a744:	200000c8 	.word	0x200000c8
			flags[FLAG_LOCKED] = 0;
 800a748:	4b03      	ldr	r3, [pc, #12]	; (800a758 <main+0x484>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 800a74e:	4b03      	ldr	r3, [pc, #12]	; (800a75c <main+0x488>)
 800a750:	0018      	movs	r0, r3
 800a752:	f7fc faaf 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
		rtcGetTime(&chronograph);
 800a756:	e783      	b.n	800a660 <main+0x38c>
 800a758:	200000c8 	.word	0x200000c8
 800a75c:	20000430 	.word	0x20000430

0800a760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b093      	sub	sp, #76	; 0x4c
 800a764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a766:	2410      	movs	r4, #16
 800a768:	193b      	adds	r3, r7, r4
 800a76a:	0018      	movs	r0, r3
 800a76c:	2338      	movs	r3, #56	; 0x38
 800a76e:	001a      	movs	r2, r3
 800a770:	2100      	movs	r1, #0
 800a772:	f002 f862 	bl	800c83a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a776:	003b      	movs	r3, r7
 800a778:	0018      	movs	r0, r3
 800a77a:	2310      	movs	r3, #16
 800a77c:	001a      	movs	r2, r3
 800a77e:	2100      	movs	r1, #0
 800a780:	f002 f85b 	bl	800c83a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a784:	2380      	movs	r3, #128	; 0x80
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	0018      	movs	r0, r3
 800a78a:	f7fa ffff 	bl	800578c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a78e:	f7fa ffb7 	bl	8005700 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a792:	4b1d      	ldr	r3, [pc, #116]	; (800a808 <SystemClock_Config+0xa8>)
 800a794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a796:	4b1c      	ldr	r3, [pc, #112]	; (800a808 <SystemClock_Config+0xa8>)
 800a798:	2118      	movs	r1, #24
 800a79a:	438a      	bics	r2, r1
 800a79c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800a79e:	193b      	adds	r3, r7, r4
 800a7a0:	2206      	movs	r2, #6
 800a7a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a7a4:	193b      	adds	r3, r7, r4
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a7aa:	193b      	adds	r3, r7, r4
 800a7ac:	2280      	movs	r2, #128	; 0x80
 800a7ae:	0052      	lsls	r2, r2, #1
 800a7b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800a7b2:	193b      	adds	r3, r7, r4
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a7b8:	193b      	adds	r3, r7, r4
 800a7ba:	2240      	movs	r2, #64	; 0x40
 800a7bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a7be:	193b      	adds	r3, r7, r4
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a7c4:	193b      	adds	r3, r7, r4
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	f7fb f82c 	bl	8005824 <HAL_RCC_OscConfig>
 800a7cc:	1e03      	subs	r3, r0, #0
 800a7ce:	d001      	beq.n	800a7d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800a7d0:	f000 fb54 	bl	800ae7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a7d4:	003b      	movs	r3, r7
 800a7d6:	2207      	movs	r2, #7
 800a7d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a7da:	003b      	movs	r3, r7
 800a7dc:	2200      	movs	r2, #0
 800a7de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a7e0:	003b      	movs	r3, r7
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a7e6:	003b      	movs	r3, r7
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a7ec:	003b      	movs	r3, r7
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f7fb fb37 	bl	8005e64 <HAL_RCC_ClockConfig>
 800a7f6:	1e03      	subs	r3, r0, #0
 800a7f8:	d001      	beq.n	800a7fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800a7fa:	f000 fb3f 	bl	800ae7c <Error_Handler>
  }
}
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	46bd      	mov	sp, r7
 800a802:	b013      	add	sp, #76	; 0x4c
 800a804:	bd90      	pop	{r4, r7, pc}
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	40021000 	.word	0x40021000

0800a80c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a812:	1d3b      	adds	r3, r7, #4
 800a814:	0018      	movs	r0, r3
 800a816:	230c      	movs	r3, #12
 800a818:	001a      	movs	r2, r3
 800a81a:	2100      	movs	r1, #0
 800a81c:	f002 f80d 	bl	800c83a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800a820:	4b30      	ldr	r3, [pc, #192]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a822:	4a31      	ldr	r2, [pc, #196]	; (800a8e8 <MX_ADC1_Init+0xdc>)
 800a824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800a826:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a828:	2280      	movs	r2, #128	; 0x80
 800a82a:	05d2      	lsls	r2, r2, #23
 800a82c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a82e:	4b2d      	ldr	r3, [pc, #180]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a830:	2200      	movs	r2, #0
 800a832:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a834:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a836:	2200      	movs	r2, #0
 800a838:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a83a:	4b2a      	ldr	r3, [pc, #168]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a842:	2204      	movs	r2, #4
 800a844:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a846:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a848:	2200      	movs	r2, #0
 800a84a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a84e:	2200      	movs	r2, #0
 800a850:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a852:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a854:	2200      	movs	r2, #0
 800a856:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800a858:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a85a:	2201      	movs	r2, #1
 800a85c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a85e:	4b21      	ldr	r3, [pc, #132]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a860:	2200      	movs	r2, #0
 800a862:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a864:	4b1f      	ldr	r3, [pc, #124]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a866:	2200      	movs	r2, #0
 800a868:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a86a:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a86c:	222c      	movs	r2, #44	; 0x2c
 800a86e:	2100      	movs	r1, #0
 800a870:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a872:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a874:	2280      	movs	r2, #128	; 0x80
 800a876:	0152      	lsls	r2, r2, #5
 800a878:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800a87a:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a87c:	2206      	movs	r2, #6
 800a87e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 800a880:	4b18      	ldr	r3, [pc, #96]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a882:	2206      	movs	r2, #6
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800a886:	4b17      	ldr	r3, [pc, #92]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a888:	223c      	movs	r2, #60	; 0x3c
 800a88a:	2101      	movs	r1, #1
 800a88c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800a88e:	4b15      	ldr	r3, [pc, #84]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a890:	220c      	movs	r2, #12
 800a892:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800a894:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a896:	2280      	movs	r2, #128	; 0x80
 800a898:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800a89a:	4b12      	ldr	r3, [pc, #72]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800a8a0:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f7f9 f873 	bl	8003994 <HAL_ADC_Init>
 800a8ae:	1e03      	subs	r3, r0, #0
 800a8b0:	d001      	beq.n	800a8b6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800a8b2:	f000 fae3 	bl	800ae7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800a8b6:	1d3b      	adds	r3, r7, #4
 800a8b8:	4a0c      	ldr	r2, [pc, #48]	; (800a8ec <MX_ADC1_Init+0xe0>)
 800a8ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a8bc:	1d3b      	adds	r3, r7, #4
 800a8be:	2200      	movs	r2, #0
 800a8c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800a8c2:	1d3b      	adds	r3, r7, #4
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a8c8:	1d3a      	adds	r2, r7, #4
 800a8ca:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <MX_ADC1_Init+0xd8>)
 800a8cc:	0011      	movs	r1, r2
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	f7f9 fb2c 	bl	8003f2c <HAL_ADC_ConfigChannel>
 800a8d4:	1e03      	subs	r3, r0, #0
 800a8d6:	d001      	beq.n	800a8dc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800a8d8:	f000 fad0 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a8dc:	46c0      	nop			; (mov r8, r8)
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	b004      	add	sp, #16
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000358 	.word	0x20000358
 800a8e8:	40012400 	.word	0x40012400
 800a8ec:	b0001000 	.word	0xb0001000

0800a8f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a8f4:	4b1b      	ldr	r3, [pc, #108]	; (800a964 <MX_I2C1_Init+0x74>)
 800a8f6:	4a1c      	ldr	r2, [pc, #112]	; (800a968 <MX_I2C1_Init+0x78>)
 800a8f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800a8fa:	4b1a      	ldr	r3, [pc, #104]	; (800a964 <MX_I2C1_Init+0x74>)
 800a8fc:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <MX_I2C1_Init+0x7c>)
 800a8fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a900:	4b18      	ldr	r3, [pc, #96]	; (800a964 <MX_I2C1_Init+0x74>)
 800a902:	2200      	movs	r2, #0
 800a904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a906:	4b17      	ldr	r3, [pc, #92]	; (800a964 <MX_I2C1_Init+0x74>)
 800a908:	2201      	movs	r2, #1
 800a90a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a90c:	4b15      	ldr	r3, [pc, #84]	; (800a964 <MX_I2C1_Init+0x74>)
 800a90e:	2200      	movs	r2, #0
 800a910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a912:	4b14      	ldr	r3, [pc, #80]	; (800a964 <MX_I2C1_Init+0x74>)
 800a914:	2200      	movs	r2, #0
 800a916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a918:	4b12      	ldr	r3, [pc, #72]	; (800a964 <MX_I2C1_Init+0x74>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <MX_I2C1_Init+0x74>)
 800a920:	2200      	movs	r2, #0
 800a922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a924:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <MX_I2C1_Init+0x74>)
 800a926:	2200      	movs	r2, #0
 800a928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a92a:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <MX_I2C1_Init+0x74>)
 800a92c:	0018      	movs	r0, r3
 800a92e:	f7fa f905 	bl	8004b3c <HAL_I2C_Init>
 800a932:	1e03      	subs	r3, r0, #0
 800a934:	d001      	beq.n	800a93a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a936:	f000 faa1 	bl	800ae7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a93a:	4b0a      	ldr	r3, [pc, #40]	; (800a964 <MX_I2C1_Init+0x74>)
 800a93c:	2100      	movs	r1, #0
 800a93e:	0018      	movs	r0, r3
 800a940:	f7fa fe46 	bl	80055d0 <HAL_I2CEx_ConfigAnalogFilter>
 800a944:	1e03      	subs	r3, r0, #0
 800a946:	d001      	beq.n	800a94c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a948:	f000 fa98 	bl	800ae7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <MX_I2C1_Init+0x74>)
 800a94e:	2100      	movs	r1, #0
 800a950:	0018      	movs	r0, r3
 800a952:	f7fa fe89 	bl	8005668 <HAL_I2CEx_ConfigDigitalFilter>
 800a956:	1e03      	subs	r3, r0, #0
 800a958:	d001      	beq.n	800a95e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a95a:	f000 fa8f 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000224 	.word	0x20000224
 800a968:	40005400 	.word	0x40005400
 800a96c:	00303d5b 	.word	0x00303d5b

0800a970 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a976:	1d3b      	adds	r3, r7, #4
 800a978:	0018      	movs	r0, r3
 800a97a:	2314      	movs	r3, #20
 800a97c:	001a      	movs	r2, r3
 800a97e:	2100      	movs	r1, #0
 800a980:	f001 ff5b 	bl	800c83a <memset>
  RTC_DateTypeDef sDate = {0};
 800a984:	003b      	movs	r3, r7
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a98a:	4b2d      	ldr	r3, [pc, #180]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a98c:	4a2d      	ldr	r2, [pc, #180]	; (800aa44 <MX_RTC_Init+0xd4>)
 800a98e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a990:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a992:	2200      	movs	r2, #0
 800a994:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800a996:	4b2a      	ldr	r3, [pc, #168]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a998:	227f      	movs	r2, #127	; 0x7f
 800a99a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800a99c:	4b28      	ldr	r3, [pc, #160]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a99e:	22ff      	movs	r2, #255	; 0xff
 800a9a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a9a2:	4b27      	ldr	r3, [pc, #156]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a9a8:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a9ae:	4b24      	ldr	r3, [pc, #144]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a9b4:	4b22      	ldr	r3, [pc, #136]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9b6:	2280      	movs	r2, #128	; 0x80
 800a9b8:	05d2      	lsls	r2, r2, #23
 800a9ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a9bc:	4b20      	ldr	r3, [pc, #128]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a9c2:	4b1f      	ldr	r3, [pc, #124]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	f7fb fdaf 	bl	8006528 <HAL_RTC_Init>
 800a9ca:	1e03      	subs	r3, r0, #0
 800a9cc:	d001      	beq.n	800a9d2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800a9ce:	f000 fa55 	bl	800ae7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 800a9d2:	1d3b      	adds	r3, r7, #4
 800a9d4:	2215      	movs	r2, #21
 800a9d6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 40;
 800a9d8:	1d3b      	adds	r3, r7, #4
 800a9da:	2228      	movs	r2, #40	; 0x28
 800a9dc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800a9de:	1d3b      	adds	r3, r7, #4
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800a9e4:	1d3b      	adds	r3, r7, #4
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a9ea:	1d3b      	adds	r3, r7, #4
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a9f6:	1d39      	adds	r1, r7, #4
 800a9f8:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <MX_RTC_Init+0xd0>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	f7fb fe29 	bl	8006654 <HAL_RTC_SetTime>
 800aa02:	1e03      	subs	r3, r0, #0
 800aa04:	d001      	beq.n	800aa0a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800aa06:	f000 fa39 	bl	800ae7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800aa0a:	003b      	movs	r3, r7
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800aa10:	003b      	movs	r3, r7
 800aa12:	2204      	movs	r2, #4
 800aa14:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 800aa16:	003b      	movs	r3, r7
 800aa18:	2214      	movs	r2, #20
 800aa1a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 20;
 800aa1c:	003b      	movs	r3, r7
 800aa1e:	2214      	movs	r2, #20
 800aa20:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800aa22:	0039      	movs	r1, r7
 800aa24:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <MX_RTC_Init+0xd0>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7fb ff17 	bl	800685c <HAL_RTC_SetDate>
 800aa2e:	1e03      	subs	r3, r0, #0
 800aa30:	d001      	beq.n	800aa36 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800aa32:	f000 fa23 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800aa36:	46c0      	nop			; (mov r8, r8)
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	b006      	add	sp, #24
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	46c0      	nop			; (mov r8, r8)
 800aa40:	20000404 	.word	0x20000404
 800aa44:	40002800 	.word	0x40002800

0800aa48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa4e:	2310      	movs	r3, #16
 800aa50:	18fb      	adds	r3, r7, r3
 800aa52:	0018      	movs	r0, r3
 800aa54:	2310      	movs	r3, #16
 800aa56:	001a      	movs	r2, r3
 800aa58:	2100      	movs	r1, #0
 800aa5a:	f001 feee 	bl	800c83a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa5e:	1d3b      	adds	r3, r7, #4
 800aa60:	0018      	movs	r0, r3
 800aa62:	230c      	movs	r3, #12
 800aa64:	001a      	movs	r2, r3
 800aa66:	2100      	movs	r1, #0
 800aa68:	f001 fee7 	bl	800c83a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800aa6c:	4b21      	ldr	r3, [pc, #132]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa6e:	4a22      	ldr	r2, [pc, #136]	; (800aaf8 <MX_TIM1_Init+0xb0>)
 800aa70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 800aa72:	4b20      	ldr	r3, [pc, #128]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa74:	221d      	movs	r2, #29
 800aa76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa78:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800aa7e:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa80:	4a1e      	ldr	r2, [pc, #120]	; (800aafc <MX_TIM1_Init+0xb4>)
 800aa82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa84:	4b1b      	ldr	r3, [pc, #108]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800aa8a:	4b1a      	ldr	r3, [pc, #104]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa90:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800aa96:	4b17      	ldr	r3, [pc, #92]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aa98:	0018      	movs	r0, r3
 800aa9a:	f7fc f8b2 	bl	8006c02 <HAL_TIM_Base_Init>
 800aa9e:	1e03      	subs	r3, r0, #0
 800aaa0:	d001      	beq.n	800aaa6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800aaa2:	f000 f9eb 	bl	800ae7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aaa6:	2110      	movs	r1, #16
 800aaa8:	187b      	adds	r3, r7, r1
 800aaaa:	2280      	movs	r2, #128	; 0x80
 800aaac:	0152      	lsls	r2, r2, #5
 800aaae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800aab0:	187a      	adds	r2, r7, r1
 800aab2:	4b10      	ldr	r3, [pc, #64]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aab4:	0011      	movs	r1, r2
 800aab6:	0018      	movs	r0, r3
 800aab8:	f7fc fab8 	bl	800702c <HAL_TIM_ConfigClockSource>
 800aabc:	1e03      	subs	r3, r0, #0
 800aabe:	d001      	beq.n	800aac4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800aac0:	f000 f9dc 	bl	800ae7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aac4:	1d3b      	adds	r3, r7, #4
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800aaca:	1d3b      	adds	r3, r7, #4
 800aacc:	2200      	movs	r2, #0
 800aace:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aad0:	1d3b      	adds	r3, r7, #4
 800aad2:	2200      	movs	r2, #0
 800aad4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800aad6:	1d3a      	adds	r2, r7, #4
 800aad8:	4b06      	ldr	r3, [pc, #24]	; (800aaf4 <MX_TIM1_Init+0xac>)
 800aada:	0011      	movs	r1, r2
 800aadc:	0018      	movs	r0, r3
 800aade:	f7fc fcad 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 800aae2:	1e03      	subs	r3, r0, #0
 800aae4:	d001      	beq.n	800aaea <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800aae6:	f000 f9c9 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800aaea:	46c0      	nop			; (mov r8, r8)
 800aaec:	46bd      	mov	sp, r7
 800aaee:	b008      	add	sp, #32
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	20000430 	.word	0x20000430
 800aaf8:	40012c00 	.word	0x40012c00
 800aafc:	000007cf 	.word	0x000007cf

0800ab00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab06:	2310      	movs	r3, #16
 800ab08:	18fb      	adds	r3, r7, r3
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	001a      	movs	r2, r3
 800ab10:	2100      	movs	r1, #0
 800ab12:	f001 fe92 	bl	800c83a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab16:	1d3b      	adds	r3, r7, #4
 800ab18:	0018      	movs	r0, r3
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	001a      	movs	r2, r3
 800ab1e:	2100      	movs	r1, #0
 800ab20:	f001 fe8b 	bl	800c83a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ab24:	4b1e      	ldr	r3, [pc, #120]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab26:	2280      	movs	r2, #128	; 0x80
 800ab28:	05d2      	lsls	r2, r2, #23
 800ab2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8879;
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab2e:	4a1d      	ldr	r2, [pc, #116]	; (800aba4 <MX_TIM2_Init+0xa4>)
 800ab30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab32:	4b1b      	ldr	r3, [pc, #108]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 800ab38:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab3a:	4a1b      	ldr	r2, [pc, #108]	; (800aba8 <MX_TIM2_Init+0xa8>)
 800ab3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab3e:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab44:	4b16      	ldr	r3, [pc, #88]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ab4a:	4b15      	ldr	r3, [pc, #84]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	f7fc f858 	bl	8006c02 <HAL_TIM_Base_Init>
 800ab52:	1e03      	subs	r3, r0, #0
 800ab54:	d001      	beq.n	800ab5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800ab56:	f000 f991 	bl	800ae7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab5a:	2110      	movs	r1, #16
 800ab5c:	187b      	adds	r3, r7, r1
 800ab5e:	2280      	movs	r2, #128	; 0x80
 800ab60:	0152      	lsls	r2, r2, #5
 800ab62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ab64:	187a      	adds	r2, r7, r1
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab68:	0011      	movs	r1, r2
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f7fc fa5e 	bl	800702c <HAL_TIM_ConfigClockSource>
 800ab70:	1e03      	subs	r3, r0, #0
 800ab72:	d001      	beq.n	800ab78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800ab74:	f000 f982 	bl	800ae7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab78:	1d3b      	adds	r3, r7, #4
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab7e:	1d3b      	adds	r3, r7, #4
 800ab80:	2200      	movs	r2, #0
 800ab82:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ab84:	1d3a      	adds	r2, r7, #4
 800ab86:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <MX_TIM2_Init+0xa0>)
 800ab88:	0011      	movs	r1, r2
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f7fc fc56 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 800ab90:	1e03      	subs	r3, r0, #0
 800ab92:	d001      	beq.n	800ab98 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800ab94:	f000 f972 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ab98:	46c0      	nop			; (mov r8, r8)
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b008      	add	sp, #32
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	2000047c 	.word	0x2000047c
 800aba4:	000022af 	.word	0x000022af
 800aba8:	00002327 	.word	0x00002327

0800abac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abb2:	2310      	movs	r3, #16
 800abb4:	18fb      	adds	r3, r7, r3
 800abb6:	0018      	movs	r0, r3
 800abb8:	2310      	movs	r3, #16
 800abba:	001a      	movs	r2, r3
 800abbc:	2100      	movs	r1, #0
 800abbe:	f001 fe3c 	bl	800c83a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abc2:	1d3b      	adds	r3, r7, #4
 800abc4:	0018      	movs	r0, r3
 800abc6:	230c      	movs	r3, #12
 800abc8:	001a      	movs	r2, r3
 800abca:	2100      	movs	r1, #0
 800abcc:	f001 fe35 	bl	800c83a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800abd0:	4b1e      	ldr	r3, [pc, #120]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abd2:	4a1f      	ldr	r2, [pc, #124]	; (800ac50 <MX_TIM3_Init+0xa4>)
 800abd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800abd6:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abd8:	4a1e      	ldr	r2, [pc, #120]	; (800ac54 <MX_TIM3_Init+0xa8>)
 800abda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abdc:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abde:	2200      	movs	r2, #0
 800abe0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8999;
 800abe2:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abe4:	4a1c      	ldr	r2, [pc, #112]	; (800ac58 <MX_TIM3_Init+0xac>)
 800abe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abe8:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abea:	2200      	movs	r2, #0
 800abec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abee:	4b17      	ldr	r3, [pc, #92]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800abf4:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800abf6:	0018      	movs	r0, r3
 800abf8:	f7fc f803 	bl	8006c02 <HAL_TIM_Base_Init>
 800abfc:	1e03      	subs	r3, r0, #0
 800abfe:	d001      	beq.n	800ac04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800ac00:	f000 f93c 	bl	800ae7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac04:	2110      	movs	r1, #16
 800ac06:	187b      	adds	r3, r7, r1
 800ac08:	2280      	movs	r2, #128	; 0x80
 800ac0a:	0152      	lsls	r2, r2, #5
 800ac0c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ac0e:	187a      	adds	r2, r7, r1
 800ac10:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800ac12:	0011      	movs	r1, r2
 800ac14:	0018      	movs	r0, r3
 800ac16:	f7fc fa09 	bl	800702c <HAL_TIM_ConfigClockSource>
 800ac1a:	1e03      	subs	r3, r0, #0
 800ac1c:	d001      	beq.n	800ac22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800ac1e:	f000 f92d 	bl	800ae7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac22:	1d3b      	adds	r3, r7, #4
 800ac24:	2200      	movs	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac28:	1d3b      	adds	r3, r7, #4
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ac2e:	1d3a      	adds	r2, r7, #4
 800ac30:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <MX_TIM3_Init+0xa0>)
 800ac32:	0011      	movs	r1, r2
 800ac34:	0018      	movs	r0, r3
 800ac36:	f7fc fc01 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 800ac3a:	1e03      	subs	r3, r0, #0
 800ac3c:	d001      	beq.n	800ac42 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800ac3e:	f000 f91d 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	46bd      	mov	sp, r7
 800ac46:	b008      	add	sp, #32
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	2000030c 	.word	0x2000030c
 800ac50:	40000400 	.word	0x40000400
 800ac54:	000003e7 	.word	0x000003e7
 800ac58:	00002327 	.word	0x00002327

0800ac5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ac60:	4b23      	ldr	r3, [pc, #140]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac62:	4a24      	ldr	r2, [pc, #144]	; (800acf4 <MX_USART2_UART_Init+0x98>)
 800ac64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800ac66:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac68:	2296      	movs	r2, #150	; 0x96
 800ac6a:	0192      	lsls	r2, r2, #6
 800ac6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ac6e:	4b20      	ldr	r3, [pc, #128]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ac74:	4b1e      	ldr	r3, [pc, #120]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ac80:	4b1b      	ldr	r3, [pc, #108]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac82:	220c      	movs	r2, #12
 800ac84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac86:	4b1a      	ldr	r3, [pc, #104]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ac8c:	4b18      	ldr	r3, [pc, #96]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ac92:	4b17      	ldr	r3, [pc, #92]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ac98:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ac9e:	4b14      	ldr	r3, [pc, #80]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800aca4:	4b12      	ldr	r3, [pc, #72]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800aca6:	0018      	movs	r0, r3
 800aca8:	f7fc fc4e 	bl	8007548 <HAL_UART_Init>
 800acac:	1e03      	subs	r3, r0, #0
 800acae:	d001      	beq.n	800acb4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800acb0:	f000 f8e4 	bl	800ae7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800acb4:	4b0e      	ldr	r3, [pc, #56]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800acb6:	2100      	movs	r1, #0
 800acb8:	0018      	movs	r0, r3
 800acba:	f7fd f979 	bl	8007fb0 <HAL_UARTEx_SetTxFifoThreshold>
 800acbe:	1e03      	subs	r3, r0, #0
 800acc0:	d001      	beq.n	800acc6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800acc2:	f000 f8db 	bl	800ae7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800acc6:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800acc8:	2100      	movs	r1, #0
 800acca:	0018      	movs	r0, r3
 800accc:	f7fd f9b0 	bl	8008030 <HAL_UARTEx_SetRxFifoThreshold>
 800acd0:	1e03      	subs	r3, r0, #0
 800acd2:	d001      	beq.n	800acd8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800acd4:	f000 f8d2 	bl	800ae7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800acd8:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <MX_USART2_UART_Init+0x94>)
 800acda:	0018      	movs	r0, r3
 800acdc:	f7fd f92e 	bl	8007f3c <HAL_UARTEx_DisableFifoMode>
 800ace0:	1e03      	subs	r3, r0, #0
 800ace2:	d001      	beq.n	800ace8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800ace4:	f000 f8ca 	bl	800ae7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ace8:	46c0      	nop			; (mov r8, r8)
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	46c0      	nop			; (mov r8, r8)
 800acf0:	200004c8 	.word	0x200004c8
 800acf4:	40004400 	.word	0x40004400

0800acf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800acf8:	b590      	push	{r4, r7, lr}
 800acfa:	b089      	sub	sp, #36	; 0x24
 800acfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acfe:	240c      	movs	r4, #12
 800ad00:	193b      	adds	r3, r7, r4
 800ad02:	0018      	movs	r0, r3
 800ad04:	2314      	movs	r3, #20
 800ad06:	001a      	movs	r2, r3
 800ad08:	2100      	movs	r1, #0
 800ad0a:	f001 fd96 	bl	800c83a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad0e:	4b56      	ldr	r3, [pc, #344]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad12:	4b55      	ldr	r3, [pc, #340]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad14:	2102      	movs	r1, #2
 800ad16:	430a      	orrs	r2, r1
 800ad18:	635a      	str	r2, [r3, #52]	; 0x34
 800ad1a:	4b53      	ldr	r3, [pc, #332]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1e:	2202      	movs	r2, #2
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
 800ad24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad26:	4b50      	ldr	r3, [pc, #320]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad2a:	4b4f      	ldr	r3, [pc, #316]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad2c:	2104      	movs	r1, #4
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	635a      	str	r2, [r3, #52]	; 0x34
 800ad32:	4b4d      	ldr	r3, [pc, #308]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad36:	2204      	movs	r2, #4
 800ad38:	4013      	ands	r3, r2
 800ad3a:	607b      	str	r3, [r7, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3e:	4b4a      	ldr	r3, [pc, #296]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad42:	4b49      	ldr	r3, [pc, #292]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad44:	2101      	movs	r1, #1
 800ad46:	430a      	orrs	r2, r1
 800ad48:	635a      	str	r2, [r3, #52]	; 0x34
 800ad4a:	4b47      	ldr	r3, [pc, #284]	; (800ae68 <MX_GPIO_Init+0x170>)
 800ad4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4e:	2201      	movs	r2, #1
 800ad50:	4013      	ands	r3, r2
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800ad56:	23a0      	movs	r3, #160	; 0xa0
 800ad58:	05db      	lsls	r3, r3, #23
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2132      	movs	r1, #50	; 0x32
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f7f9 fea5 	bl	8004aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_0_Pin|DISP_A_Pin|DISP_B_Pin|DISP_3_Pin
 800ad64:	4941      	ldr	r1, [pc, #260]	; (800ae6c <MX_GPIO_Init+0x174>)
 800ad66:	23a0      	movs	r3, #160	; 0xa0
 800ad68:	05db      	lsls	r3, r3, #23
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	f7f9 fe9e 	bl	8004aae <HAL_GPIO_WritePin>
                          |DISP_D_Pin|DISP_DP_Pin|DISP_C_Pin|DISP_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_F_Pin|DISP_1_Pin|DISP_2_Pin, GPIO_PIN_SET);
 800ad72:	4b3f      	ldr	r3, [pc, #252]	; (800ae70 <MX_GPIO_Init+0x178>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	2107      	movs	r1, #7
 800ad78:	0018      	movs	r0, r3
 800ad7a:	f7f9 fe98 	bl	8004aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_E_GPIO_Port, DISP_E_Pin, GPIO_PIN_SET);
 800ad7e:	4b3d      	ldr	r3, [pc, #244]	; (800ae74 <MX_GPIO_Init+0x17c>)
 800ad80:	2201      	movs	r2, #1
 800ad82:	2140      	movs	r1, #64	; 0x40
 800ad84:	0018      	movs	r0, r3
 800ad86:	f7f9 fe92 	bl	8004aae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENCODER_ACTIVE_Pin LED1_Pin LED2_Pin DISP_0_Pin
                           DISP_A_Pin DISP_B_Pin DISP_3_Pin DISP_D_Pin
                           DISP_DP_Pin DISP_C_Pin DISP_G_Pin */
  GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin|DISP_0_Pin
 800ad8a:	193b      	adds	r3, r7, r4
 800ad8c:	4a3a      	ldr	r2, [pc, #232]	; (800ae78 <MX_GPIO_Init+0x180>)
 800ad8e:	601a      	str	r2, [r3, #0]
                          |DISP_A_Pin|DISP_B_Pin|DISP_3_Pin|DISP_D_Pin
                          |DISP_DP_Pin|DISP_C_Pin|DISP_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad90:	193b      	adds	r3, r7, r4
 800ad92:	2201      	movs	r2, #1
 800ad94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad96:	193b      	adds	r3, r7, r4
 800ad98:	2200      	movs	r2, #0
 800ad9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad9c:	193b      	adds	r3, r7, r4
 800ad9e:	2200      	movs	r2, #0
 800ada0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ada2:	193a      	adds	r2, r7, r4
 800ada4:	23a0      	movs	r3, #160	; 0xa0
 800ada6:	05db      	lsls	r3, r3, #23
 800ada8:	0011      	movs	r1, r2
 800adaa:	0018      	movs	r0, r3
 800adac:	f7f9 fcfe 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_F_Pin DISP_1_Pin DISP_2_Pin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_1_Pin|DISP_2_Pin;
 800adb0:	193b      	adds	r3, r7, r4
 800adb2:	2207      	movs	r2, #7
 800adb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adb6:	193b      	adds	r3, r7, r4
 800adb8:	2201      	movs	r2, #1
 800adba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adbc:	193b      	adds	r3, r7, r4
 800adbe:	2200      	movs	r2, #0
 800adc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adc2:	193b      	adds	r3, r7, r4
 800adc4:	2200      	movs	r2, #0
 800adc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adc8:	193b      	adds	r3, r7, r4
 800adca:	4a29      	ldr	r2, [pc, #164]	; (800ae70 <MX_GPIO_Init+0x178>)
 800adcc:	0019      	movs	r1, r3
 800adce:	0010      	movs	r0, r2
 800add0:	f7f9 fcec 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_E_Pin */
  GPIO_InitStruct.Pin = DISP_E_Pin;
 800add4:	193b      	adds	r3, r7, r4
 800add6:	2240      	movs	r2, #64	; 0x40
 800add8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adda:	193b      	adds	r3, r7, r4
 800addc:	2201      	movs	r2, #1
 800adde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade0:	193b      	adds	r3, r7, r4
 800ade2:	2200      	movs	r2, #0
 800ade4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ade6:	193b      	adds	r3, r7, r4
 800ade8:	2200      	movs	r2, #0
 800adea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_E_GPIO_Port, &GPIO_InitStruct);
 800adec:	193b      	adds	r3, r7, r4
 800adee:	4a21      	ldr	r2, [pc, #132]	; (800ae74 <MX_GPIO_Init+0x17c>)
 800adf0:	0019      	movs	r1, r3
 800adf2:	0010      	movs	r0, r2
 800adf4:	f7f9 fcda 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 800adf8:	0021      	movs	r1, r4
 800adfa:	187b      	adds	r3, r7, r1
 800adfc:	2238      	movs	r2, #56	; 0x38
 800adfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ae00:	187b      	adds	r3, r7, r1
 800ae02:	2284      	movs	r2, #132	; 0x84
 800ae04:	0392      	lsls	r2, r2, #14
 800ae06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae08:	187b      	adds	r3, r7, r1
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae0e:	000c      	movs	r4, r1
 800ae10:	187b      	adds	r3, r7, r1
 800ae12:	4a17      	ldr	r2, [pc, #92]	; (800ae70 <MX_GPIO_Init+0x178>)
 800ae14:	0019      	movs	r1, r3
 800ae16:	0010      	movs	r0, r2
 800ae18:	f7f9 fcc8 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_Pin ENC2_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin|ENC2_Pin;
 800ae1c:	0021      	movs	r1, r4
 800ae1e:	187b      	adds	r3, r7, r1
 800ae20:	22c0      	movs	r2, #192	; 0xc0
 800ae22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ae24:	187b      	adds	r3, r7, r1
 800ae26:	22c4      	movs	r2, #196	; 0xc4
 800ae28:	0392      	lsls	r2, r2, #14
 800ae2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2c:	187b      	adds	r3, r7, r1
 800ae2e:	2200      	movs	r2, #0
 800ae30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae32:	187b      	adds	r3, r7, r1
 800ae34:	4a0e      	ldr	r2, [pc, #56]	; (800ae70 <MX_GPIO_Init+0x178>)
 800ae36:	0019      	movs	r1, r3
 800ae38:	0010      	movs	r0, r2
 800ae3a:	f7f9 fcb7 	bl	80047ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800ae3e:	2200      	movs	r2, #0
 800ae40:	2100      	movs	r1, #0
 800ae42:	2006      	movs	r0, #6
 800ae44:	f7f9 fc80 	bl	8004748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800ae48:	2006      	movs	r0, #6
 800ae4a:	f7f9 fc92 	bl	8004772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2100      	movs	r1, #0
 800ae52:	2007      	movs	r0, #7
 800ae54:	f7f9 fc78 	bl	8004748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800ae58:	2007      	movs	r0, #7
 800ae5a:	f7f9 fc8a 	bl	8004772 <HAL_NVIC_EnableIRQ>

}
 800ae5e:	46c0      	nop			; (mov r8, r8)
 800ae60:	46bd      	mov	sp, r7
 800ae62:	b009      	add	sp, #36	; 0x24
 800ae64:	bd90      	pop	{r4, r7, pc}
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	40021000 	.word	0x40021000
 800ae6c:	00009fc0 	.word	0x00009fc0
 800ae70:	50000400 	.word	0x50000400
 800ae74:	50000800 	.word	0x50000800
 800ae78:	00009ff2 	.word	0x00009ff2

0800ae7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ae80:	b672      	cpsid	i
}
 800ae82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800ae84:	e7fe      	b.n	800ae84 <Error_Handler+0x8>

0800ae86 <menuResetCurrent>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuResetCurrent(MenuTypeDef *menu) {
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	23a5      	movs	r3, #165	; 0xa5
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	6879      	ldr	r1, [r7, #4]
 800ae96:	18d3      	adds	r3, r2, r3
 800ae98:	220b      	movs	r2, #11
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f001 fcc4 	bl	800c828 <memcpy>
	menu->current.childFirst = menu->items[0][0].childFirst;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7a59      	ldrb	r1, [r3, #9]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	2354      	movs	r3, #84	; 0x54
 800aea8:	33ff      	adds	r3, #255	; 0xff
 800aeaa:	54d1      	strb	r1, [r2, r3]
	menu->current.childLast = menu->items[0][0].childLast;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7a99      	ldrb	r1, [r3, #10]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	23aa      	movs	r3, #170	; 0xaa
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	54d1      	strb	r1, [r2, r3]
	menu->current.entry = menu->items[0][0].entry;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	7999      	ldrb	r1, [r3, #6]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	23a8      	movs	r3, #168	; 0xa8
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	54d1      	strb	r1, [r2, r3]
	menu->current.level = menu->items[0][0].level;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	79d9      	ldrb	r1, [r3, #7]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	2352      	movs	r3, #82	; 0x52
 800aecc:	33ff      	adds	r3, #255	; 0xff
 800aece:	54d1      	strb	r1, [r2, r3]
//	menu->current.parent = menu->items[0][0].parent;
//	menu->current.value = menu->items[0][0].value;
//	menu->current.value2 = menu->items[0][0].value2;
//	menu->current.value3 = menu->items[0][0].value3;

}
 800aed0:	46c0      	nop			; (mov r8, r8)
 800aed2:	46bd      	mov	sp, r7
 800aed4:	b002      	add	sp, #8
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2, uint8_t value3) {
 800aed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	0008      	movs	r0, r1
 800aee2:	0011      	movs	r1, r2
 800aee4:	607b      	str	r3, [r7, #4]
 800aee6:	230b      	movs	r3, #11
 800aee8:	18fb      	adds	r3, r7, r3
 800aeea:	1c02      	adds	r2, r0, #0
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	230a      	movs	r3, #10
 800aef0:	18fb      	adds	r3, r7, r3
 800aef2:	1c0a      	adds	r2, r1, #0
 800aef4:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800aef6:	2317      	movs	r3, #23
 800aef8:	18fb      	adds	r3, r7, r3
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	e01f      	b.n	800af40 <menuItemChangeValue+0x68>

		menu->items[entry][level].value[i] = value[i];
 800af00:	2617      	movs	r6, #23
 800af02:	19bb      	adds	r3, r7, r6
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	18d3      	adds	r3, r2, r3
 800af0a:	220b      	movs	r2, #11
 800af0c:	18ba      	adds	r2, r7, r2
 800af0e:	7811      	ldrb	r1, [r2, #0]
 800af10:	220a      	movs	r2, #10
 800af12:	18ba      	adds	r2, r7, r2
 800af14:	7812      	ldrb	r2, [r2, #0]
 800af16:	19b8      	adds	r0, r7, r6
 800af18:	7800      	ldrb	r0, [r0, #0]
 800af1a:	781d      	ldrb	r5, [r3, #0]
 800af1c:	68fc      	ldr	r4, [r7, #12]
 800af1e:	0013      	movs	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	189b      	adds	r3, r3, r2
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	189b      	adds	r3, r3, r2
 800af28:	000a      	movs	r2, r1
 800af2a:	0152      	lsls	r2, r2, #5
 800af2c:	1852      	adds	r2, r2, r1
 800af2e:	189b      	adds	r3, r3, r2
 800af30:	18e3      	adds	r3, r4, r3
 800af32:	1c2a      	adds	r2, r5, #0
 800af34:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800af36:	19bb      	adds	r3, r7, r6
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	19bb      	adds	r3, r7, r6
 800af3c:	3201      	adds	r2, #1
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	2317      	movs	r3, #23
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b04      	cmp	r3, #4
 800af48:	d9da      	bls.n	800af00 <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 800af4a:	240b      	movs	r4, #11
 800af4c:	193b      	adds	r3, r7, r4
 800af4e:	7819      	ldrb	r1, [r3, #0]
 800af50:	250a      	movs	r5, #10
 800af52:	197b      	adds	r3, r7, r5
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	0013      	movs	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	189b      	adds	r3, r3, r2
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	189b      	adds	r3, r3, r2
 800af62:	000a      	movs	r2, r1
 800af64:	0152      	lsls	r2, r2, #5
 800af66:	1852      	adds	r2, r2, r1
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	18c3      	adds	r3, r0, r3
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	2328      	movs	r3, #40	; 0x28
 800af70:	2108      	movs	r1, #8
 800af72:	468c      	mov	ip, r1
 800af74:	44bc      	add	ip, r7
 800af76:	4463      	add	r3, ip
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].value3 = value3;
 800af7c:	193b      	adds	r3, r7, r4
 800af7e:	7819      	ldrb	r1, [r3, #0]
 800af80:	197b      	adds	r3, r7, r5
 800af82:	781a      	ldrb	r2, [r3, #0]
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	0013      	movs	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	189b      	adds	r3, r3, r2
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	189b      	adds	r3, r3, r2
 800af90:	000a      	movs	r2, r1
 800af92:	0152      	lsls	r2, r2, #5
 800af94:	1852      	adds	r2, r2, r1
 800af96:	189b      	adds	r3, r3, r2
 800af98:	18c3      	adds	r3, r0, r3
 800af9a:	3305      	adds	r3, #5
 800af9c:	222c      	movs	r2, #44	; 0x2c
 800af9e:	2108      	movs	r1, #8
 800afa0:	468c      	mov	ip, r1
 800afa2:	44bc      	add	ip, r7
 800afa4:	4462      	add	r2, ip
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	701a      	strb	r2, [r3, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	23a8      	movs	r3, #168	; 0xa8
 800afae:	005b      	lsls	r3, r3, #1
 800afb0:	5cd3      	ldrb	r3, [r2, r3]
 800afb2:	193a      	adds	r2, r7, r4
 800afb4:	7812      	ldrb	r2, [r2, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d15a      	bne.n	800b070 <menuItemChangeValue+0x198>
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	2352      	movs	r3, #82	; 0x52
 800afbe:	33ff      	adds	r3, #255	; 0xff
 800afc0:	5cd3      	ldrb	r3, [r2, r3]
 800afc2:	197a      	adds	r2, r7, r5
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d152      	bne.n	800b070 <menuItemChangeValue+0x198>
		memcpy(menu->current.value,
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	334b      	adds	r3, #75	; 0x4b
 800afce:	33ff      	adds	r3, #255	; 0xff
 800afd0:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	23a8      	movs	r3, #168	; 0xa8
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	5cd3      	ldrb	r3, [r2, r3]
 800afda:	0019      	movs	r1, r3
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	2352      	movs	r3, #82	; 0x52
 800afe0:	33ff      	adds	r3, #255	; 0xff
 800afe2:	5cd3      	ldrb	r3, [r2, r3]
 800afe4:	001a      	movs	r2, r3
 800afe6:	0013      	movs	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	189b      	adds	r3, r3, r2
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	189b      	adds	r3, r3, r2
 800aff0:	000a      	movs	r2, r1
 800aff2:	0152      	lsls	r2, r2, #5
 800aff4:	1852      	adds	r2, r2, r1
 800aff6:	189b      	adds	r3, r3, r2
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800affc:	2204      	movs	r2, #4
 800affe:	0019      	movs	r1, r3
 800b000:	f001 fc12 	bl	800c828 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	23a8      	movs	r3, #168	; 0xa8
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	5cd3      	ldrb	r3, [r2, r3]
 800b00c:	0018      	movs	r0, r3
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	2352      	movs	r3, #82	; 0x52
 800b012:	33ff      	adds	r3, #255	; 0xff
 800b014:	5cd3      	ldrb	r3, [r2, r3]
 800b016:	001a      	movs	r2, r3
 800b018:	68f9      	ldr	r1, [r7, #12]
 800b01a:	0013      	movs	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	189b      	adds	r3, r3, r2
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	189b      	adds	r3, r3, r2
 800b024:	0002      	movs	r2, r0
 800b026:	0152      	lsls	r2, r2, #5
 800b028:	1812      	adds	r2, r2, r0
 800b02a:	189b      	adds	r3, r3, r2
 800b02c:	18cb      	adds	r3, r1, r3
 800b02e:	3304      	adds	r3, #4
 800b030:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	23a7      	movs	r3, #167	; 0xa7
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	23a8      	movs	r3, #168	; 0xa8
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	5cd3      	ldrb	r3, [r2, r3]
 800b042:	0018      	movs	r0, r3
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	2352      	movs	r3, #82	; 0x52
 800b048:	33ff      	adds	r3, #255	; 0xff
 800b04a:	5cd3      	ldrb	r3, [r2, r3]
 800b04c:	001a      	movs	r2, r3
 800b04e:	68f9      	ldr	r1, [r7, #12]
 800b050:	0013      	movs	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	189b      	adds	r3, r3, r2
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	189b      	adds	r3, r3, r2
 800b05a:	0002      	movs	r2, r0
 800b05c:	0152      	lsls	r2, r2, #5
 800b05e:	1812      	adds	r2, r2, r0
 800b060:	189b      	adds	r3, r3, r2
 800b062:	18cb      	adds	r3, r1, r3
 800b064:	3305      	adds	r3, #5
 800b066:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	2350      	movs	r3, #80	; 0x50
 800b06c:	33ff      	adds	r3, #255	; 0xff
 800b06e:	54d1      	strb	r1, [r2, r3]
	}

}
 800b070:	46c0      	nop			; (mov r8, r8)
 800b072:	46bd      	mov	sp, r7
 800b074:	b007      	add	sp, #28
 800b076:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b078 <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 800b078:	b590      	push	{r4, r7, lr}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	000c      	movs	r4, r1
 800b082:	0010      	movs	r0, r2
 800b084:	0019      	movs	r1, r3
 800b086:	1cfb      	adds	r3, r7, #3
 800b088:	1c22      	adds	r2, r4, #0
 800b08a:	701a      	strb	r2, [r3, #0]
 800b08c:	1cbb      	adds	r3, r7, #2
 800b08e:	1c02      	adds	r2, r0, #0
 800b090:	701a      	strb	r2, [r3, #0]
 800b092:	1c7b      	adds	r3, r7, #1
 800b094:	1c0a      	adds	r2, r1, #0
 800b096:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 800b098:	1cfb      	adds	r3, r7, #3
 800b09a:	7819      	ldrb	r1, [r3, #0]
 800b09c:	1cbb      	adds	r3, r7, #2
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	0013      	movs	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	189b      	adds	r3, r3, r2
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	189b      	adds	r3, r3, r2
 800b0ac:	000a      	movs	r2, r1
 800b0ae:	0152      	lsls	r2, r2, #5
 800b0b0:	1852      	adds	r2, r2, r1
 800b0b2:	189b      	adds	r3, r3, r2
 800b0b4:	18c3      	adds	r3, r0, r3
 800b0b6:	3306      	adds	r3, #6
 800b0b8:	1cfa      	adds	r2, r7, #3
 800b0ba:	7812      	ldrb	r2, [r2, #0]
 800b0bc:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 800b0be:	1cfb      	adds	r3, r7, #3
 800b0c0:	7819      	ldrb	r1, [r3, #0]
 800b0c2:	1cbb      	adds	r3, r7, #2
 800b0c4:	781a      	ldrb	r2, [r3, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	0013      	movs	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	189b      	adds	r3, r3, r2
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	189b      	adds	r3, r3, r2
 800b0d2:	000a      	movs	r2, r1
 800b0d4:	0152      	lsls	r2, r2, #5
 800b0d6:	1852      	adds	r2, r2, r1
 800b0d8:	189b      	adds	r3, r3, r2
 800b0da:	18c3      	adds	r3, r0, r3
 800b0dc:	3307      	adds	r3, #7
 800b0de:	1cba      	adds	r2, r7, #2
 800b0e0:	7812      	ldrb	r2, [r2, #0]
 800b0e2:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 800b0e4:	1cfb      	adds	r3, r7, #3
 800b0e6:	7819      	ldrb	r1, [r3, #0]
 800b0e8:	1cbb      	adds	r3, r7, #2
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	0013      	movs	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	189b      	adds	r3, r3, r2
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	189b      	adds	r3, r3, r2
 800b0f8:	000a      	movs	r2, r1
 800b0fa:	0152      	lsls	r2, r2, #5
 800b0fc:	1852      	adds	r2, r2, r1
 800b0fe:	189b      	adds	r3, r3, r2
 800b100:	18c3      	adds	r3, r0, r3
 800b102:	3308      	adds	r3, #8
 800b104:	1c7a      	adds	r2, r7, #1
 800b106:	7812      	ldrb	r2, [r2, #0]
 800b108:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 800b10a:	1cfb      	adds	r3, r7, #3
 800b10c:	7819      	ldrb	r1, [r3, #0]
 800b10e:	1cbb      	adds	r3, r7, #2
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	0013      	movs	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	189b      	adds	r3, r3, r2
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	189b      	adds	r3, r3, r2
 800b11e:	000a      	movs	r2, r1
 800b120:	0152      	lsls	r2, r2, #5
 800b122:	1852      	adds	r2, r2, r1
 800b124:	189b      	adds	r3, r3, r2
 800b126:	18c3      	adds	r3, r0, r3
 800b128:	3309      	adds	r3, #9
 800b12a:	001a      	movs	r2, r3
 800b12c:	2318      	movs	r3, #24
 800b12e:	18fb      	adds	r3, r7, r3
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 800b134:	1cfb      	adds	r3, r7, #3
 800b136:	7819      	ldrb	r1, [r3, #0]
 800b138:	1cbb      	adds	r3, r7, #2
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	0013      	movs	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	189b      	adds	r3, r3, r2
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	189b      	adds	r3, r3, r2
 800b148:	000a      	movs	r2, r1
 800b14a:	0152      	lsls	r2, r2, #5
 800b14c:	1852      	adds	r2, r2, r1
 800b14e:	189b      	adds	r3, r3, r2
 800b150:	18c3      	adds	r3, r0, r3
 800b152:	330a      	adds	r3, #10
 800b154:	221c      	movs	r2, #28
 800b156:	18ba      	adds	r2, r7, r2
 800b158:	7812      	ldrb	r2, [r2, #0]
 800b15a:	701a      	strb	r2, [r3, #0]

}
 800b15c:	46c0      	nop			; (mov r8, r8)
 800b15e:	46bd      	mov	sp, r7
 800b160:	b003      	add	sp, #12
 800b162:	bd90      	pop	{r4, r7, pc}

0800b164 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	000a      	movs	r2, r1
 800b16e:	1cfb      	adds	r3, r7, #3
 800b170:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 800b172:	1cfb      	adds	r3, r7, #3
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d000      	beq.n	800b17c <menuSwitch+0x18>
 800b17a:	e0e2      	b.n	800b342 <menuSwitch+0x1de>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	2352      	movs	r3, #82	; 0x52
 800b180:	33ff      	adds	r3, #255	; 0xff
 800b182:	5cd3      	ldrb	r3, [r2, r3]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d105      	bne.n	800b194 <menuSwitch+0x30>
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	23a8      	movs	r3, #168	; 0xa8
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	5cd3      	ldrb	r3, [r2, r3]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d124      	bne.n	800b1de <menuSwitch+0x7a>
				|| (menu->current.level != 0
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	2352      	movs	r3, #82	; 0x52
 800b198:	33ff      	adds	r3, #255	; 0xff
 800b19a:	5cd3      	ldrb	r3, [r2, r3]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d100      	bne.n	800b1a2 <menuSwitch+0x3e>
 800b1a0:	e0cd      	b.n	800b33e <menuSwitch+0x1da>
						&& menu->current.entry
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	23a8      	movs	r3, #168	; 0xa8
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	5cd1      	ldrb	r1, [r2, r3]
								> menu->items[menu->current.parent][menu->current.level
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	23a9      	movs	r3, #169	; 0xa9
 800b1ae:	005b      	lsls	r3, r3, #1
 800b1b0:	5cd3      	ldrb	r3, [r2, r3]
 800b1b2:	001c      	movs	r4, r3
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	2352      	movs	r3, #82	; 0x52
 800b1b8:	33ff      	adds	r3, #255	; 0xff
 800b1ba:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childFirst)) {
 800b1bc:	1e5a      	subs	r2, r3, #1
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	0013      	movs	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	189b      	adds	r3, r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	189b      	adds	r3, r3, r2
 800b1ca:	0022      	movs	r2, r4
 800b1cc:	0152      	lsls	r2, r2, #5
 800b1ce:	1912      	adds	r2, r2, r4
 800b1d0:	189b      	adds	r3, r3, r2
 800b1d2:	18c3      	adds	r3, r0, r3
 800b1d4:	3309      	adds	r3, #9
 800b1d6:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	d800      	bhi.n	800b1de <menuSwitch+0x7a>
 800b1dc:	e0af      	b.n	800b33e <menuSwitch+0x1da>

			menu->current.entry--;
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	23a8      	movs	r3, #168	; 0xa8
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	5cd3      	ldrb	r3, [r2, r3]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	b2d9      	uxtb	r1, r3
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	23a8      	movs	r3, #168	; 0xa8
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	54d1      	strb	r1, [r2, r3]
			memcpy(menu->current.value,
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	334b      	adds	r3, #75	; 0x4b
 800b1f6:	33ff      	adds	r3, #255	; 0xff
 800b1f8:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	23a8      	movs	r3, #168	; 0xa8
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	5cd3      	ldrb	r3, [r2, r3]
 800b202:	0019      	movs	r1, r3
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	2352      	movs	r3, #82	; 0x52
 800b208:	33ff      	adds	r3, #255	; 0xff
 800b20a:	5cd3      	ldrb	r3, [r2, r3]
 800b20c:	001a      	movs	r2, r3
 800b20e:	0013      	movs	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	189b      	adds	r3, r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	189b      	adds	r3, r3, r2
 800b218:	000a      	movs	r2, r1
 800b21a:	0152      	lsls	r2, r2, #5
 800b21c:	1852      	adds	r2, r2, r1
 800b21e:	189b      	adds	r3, r3, r2
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800b224:	2204      	movs	r2, #4
 800b226:	0019      	movs	r1, r3
 800b228:	f001 fafe 	bl	800c828 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	23a8      	movs	r3, #168	; 0xa8
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	5cd3      	ldrb	r3, [r2, r3]
 800b234:	0018      	movs	r0, r3
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	2352      	movs	r3, #82	; 0x52
 800b23a:	33ff      	adds	r3, #255	; 0xff
 800b23c:	5cd3      	ldrb	r3, [r2, r3]
 800b23e:	001a      	movs	r2, r3
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	0013      	movs	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	189b      	adds	r3, r3, r2
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	189b      	adds	r3, r3, r2
 800b24c:	0002      	movs	r2, r0
 800b24e:	0152      	lsls	r2, r2, #5
 800b250:	1812      	adds	r2, r2, r0
 800b252:	189b      	adds	r3, r3, r2
 800b254:	18cb      	adds	r3, r1, r3
 800b256:	3304      	adds	r3, #4
 800b258:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	23a7      	movs	r3, #167	; 0xa7
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	23a8      	movs	r3, #168	; 0xa8
 800b266:	005b      	lsls	r3, r3, #1
 800b268:	5cd3      	ldrb	r3, [r2, r3]
 800b26a:	0018      	movs	r0, r3
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	2352      	movs	r3, #82	; 0x52
 800b270:	33ff      	adds	r3, #255	; 0xff
 800b272:	5cd3      	ldrb	r3, [r2, r3]
 800b274:	001a      	movs	r2, r3
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	0013      	movs	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	189b      	adds	r3, r3, r2
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	189b      	adds	r3, r3, r2
 800b282:	0002      	movs	r2, r0
 800b284:	0152      	lsls	r2, r2, #5
 800b286:	1812      	adds	r2, r2, r0
 800b288:	189b      	adds	r3, r3, r2
 800b28a:	18cb      	adds	r3, r1, r3
 800b28c:	3305      	adds	r3, #5
 800b28e:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	2350      	movs	r3, #80	; 0x50
 800b294:	33ff      	adds	r3, #255	; 0xff
 800b296:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	23a8      	movs	r3, #168	; 0xa8
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	5cd3      	ldrb	r3, [r2, r3]
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	2352      	movs	r3, #82	; 0x52
 800b2a6:	33ff      	adds	r3, #255	; 0xff
 800b2a8:	5cd3      	ldrb	r3, [r2, r3]
 800b2aa:	001a      	movs	r2, r3
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	0013      	movs	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	189b      	adds	r3, r3, r2
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	189b      	adds	r3, r3, r2
 800b2b8:	0002      	movs	r2, r0
 800b2ba:	0152      	lsls	r2, r2, #5
 800b2bc:	1812      	adds	r2, r2, r0
 800b2be:	189b      	adds	r3, r3, r2
 800b2c0:	18cb      	adds	r3, r1, r3
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	23a9      	movs	r3, #169	; 0xa9
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	23a8      	movs	r3, #168	; 0xa8
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	5cd3      	ldrb	r3, [r2, r3]
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	2352      	movs	r3, #82	; 0x52
 800b2dc:	33ff      	adds	r3, #255	; 0xff
 800b2de:	5cd3      	ldrb	r3, [r2, r3]
 800b2e0:	001a      	movs	r2, r3
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	0013      	movs	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	189b      	adds	r3, r3, r2
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	189b      	adds	r3, r3, r2
 800b2ee:	0002      	movs	r2, r0
 800b2f0:	0152      	lsls	r2, r2, #5
 800b2f2:	1812      	adds	r2, r2, r0
 800b2f4:	189b      	adds	r3, r3, r2
 800b2f6:	18cb      	adds	r3, r1, r3
 800b2f8:	3309      	adds	r3, #9
 800b2fa:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	2354      	movs	r3, #84	; 0x54
 800b300:	33ff      	adds	r3, #255	; 0xff
 800b302:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	23a8      	movs	r3, #168	; 0xa8
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	5cd3      	ldrb	r3, [r2, r3]
 800b30c:	0018      	movs	r0, r3
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	2352      	movs	r3, #82	; 0x52
 800b312:	33ff      	adds	r3, #255	; 0xff
 800b314:	5cd3      	ldrb	r3, [r2, r3]
 800b316:	001a      	movs	r2, r3
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	0013      	movs	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	189b      	adds	r3, r3, r2
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	189b      	adds	r3, r3, r2
 800b324:	0002      	movs	r2, r0
 800b326:	0152      	lsls	r2, r2, #5
 800b328:	1812      	adds	r2, r2, r0
 800b32a:	189b      	adds	r3, r3, r2
 800b32c:	18cb      	adds	r3, r1, r3
 800b32e:	330a      	adds	r3, #10
 800b330:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	23aa      	movs	r3, #170	; 0xaa
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e25f      	b.n	800b7fe <menuSwitch+0x69a>
		} else {
			return MENU_ERROR;
 800b33e:	2300      	movs	r3, #0
 800b340:	e25d      	b.n	800b7fe <menuSwitch+0x69a>
		}

	} else if (direction == MENU_DOWN) {
 800b342:	1cfb      	adds	r3, r7, #3
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b03      	cmp	r3, #3
 800b348:	d000      	beq.n	800b34c <menuSwitch+0x1e8>
 800b34a:	e0e2      	b.n	800b512 <menuSwitch+0x3ae>

		if ((menu->current.level == 0
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	2352      	movs	r3, #82	; 0x52
 800b350:	33ff      	adds	r3, #255	; 0xff
 800b352:	5cd3      	ldrb	r3, [r2, r3]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d105      	bne.n	800b364 <menuSwitch+0x200>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	23a8      	movs	r3, #168	; 0xa8
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	5cd3      	ldrb	r3, [r2, r3]
 800b360:	2b05      	cmp	r3, #5
 800b362:	d924      	bls.n	800b3ae <menuSwitch+0x24a>
				|| (menu->current.level != 0
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	2352      	movs	r3, #82	; 0x52
 800b368:	33ff      	adds	r3, #255	; 0xff
 800b36a:	5cd3      	ldrb	r3, [r2, r3]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d100      	bne.n	800b372 <menuSwitch+0x20e>
 800b370:	e0cd      	b.n	800b50e <menuSwitch+0x3aa>
						&& menu->current.entry
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	23a8      	movs	r3, #168	; 0xa8
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	5cd1      	ldrb	r1, [r2, r3]
								< menu->items[menu->current.parent][menu->current.level
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	23a9      	movs	r3, #169	; 0xa9
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	5cd3      	ldrb	r3, [r2, r3]
 800b382:	001c      	movs	r4, r3
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	2352      	movs	r3, #82	; 0x52
 800b388:	33ff      	adds	r3, #255	; 0xff
 800b38a:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childLast)) {
 800b38c:	1e5a      	subs	r2, r3, #1
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	0013      	movs	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	189b      	adds	r3, r3, r2
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	189b      	adds	r3, r3, r2
 800b39a:	0022      	movs	r2, r4
 800b39c:	0152      	lsls	r2, r2, #5
 800b39e:	1912      	adds	r2, r2, r4
 800b3a0:	189b      	adds	r3, r3, r2
 800b3a2:	18c3      	adds	r3, r0, r3
 800b3a4:	330a      	adds	r3, #10
 800b3a6:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	d300      	bcc.n	800b3ae <menuSwitch+0x24a>
 800b3ac:	e0af      	b.n	800b50e <menuSwitch+0x3aa>

			menu->current.entry++;
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	23a8      	movs	r3, #168	; 0xa8
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	5cd3      	ldrb	r3, [r2, r3]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b2d9      	uxtb	r1, r3
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	23a8      	movs	r3, #168	; 0xa8
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	54d1      	strb	r1, [r2, r3]

			memcpy(menu->current.value,
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	334b      	adds	r3, #75	; 0x4b
 800b3c6:	33ff      	adds	r3, #255	; 0xff
 800b3c8:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	23a8      	movs	r3, #168	; 0xa8
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	5cd3      	ldrb	r3, [r2, r3]
 800b3d2:	0019      	movs	r1, r3
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	2352      	movs	r3, #82	; 0x52
 800b3d8:	33ff      	adds	r3, #255	; 0xff
 800b3da:	5cd3      	ldrb	r3, [r2, r3]
 800b3dc:	001a      	movs	r2, r3
 800b3de:	0013      	movs	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	189b      	adds	r3, r3, r2
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	189b      	adds	r3, r3, r2
 800b3e8:	000a      	movs	r2, r1
 800b3ea:	0152      	lsls	r2, r2, #5
 800b3ec:	1852      	adds	r2, r2, r1
 800b3ee:	189b      	adds	r3, r3, r2
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800b3f4:	2204      	movs	r2, #4
 800b3f6:	0019      	movs	r1, r3
 800b3f8:	f001 fa16 	bl	800c828 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	23a8      	movs	r3, #168	; 0xa8
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	5cd3      	ldrb	r3, [r2, r3]
 800b404:	0018      	movs	r0, r3
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	2352      	movs	r3, #82	; 0x52
 800b40a:	33ff      	adds	r3, #255	; 0xff
 800b40c:	5cd3      	ldrb	r3, [r2, r3]
 800b40e:	001a      	movs	r2, r3
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	0013      	movs	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	189b      	adds	r3, r3, r2
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	189b      	adds	r3, r3, r2
 800b41c:	0002      	movs	r2, r0
 800b41e:	0152      	lsls	r2, r2, #5
 800b420:	1812      	adds	r2, r2, r0
 800b422:	189b      	adds	r3, r3, r2
 800b424:	18cb      	adds	r3, r1, r3
 800b426:	3304      	adds	r3, #4
 800b428:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	23a7      	movs	r3, #167	; 0xa7
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	23a8      	movs	r3, #168	; 0xa8
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	5cd3      	ldrb	r3, [r2, r3]
 800b43a:	0018      	movs	r0, r3
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	2352      	movs	r3, #82	; 0x52
 800b440:	33ff      	adds	r3, #255	; 0xff
 800b442:	5cd3      	ldrb	r3, [r2, r3]
 800b444:	001a      	movs	r2, r3
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	0013      	movs	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	189b      	adds	r3, r3, r2
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	189b      	adds	r3, r3, r2
 800b452:	0002      	movs	r2, r0
 800b454:	0152      	lsls	r2, r2, #5
 800b456:	1812      	adds	r2, r2, r0
 800b458:	189b      	adds	r3, r3, r2
 800b45a:	18cb      	adds	r3, r1, r3
 800b45c:	3305      	adds	r3, #5
 800b45e:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	2350      	movs	r3, #80	; 0x50
 800b464:	33ff      	adds	r3, #255	; 0xff
 800b466:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	23a8      	movs	r3, #168	; 0xa8
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	5cd3      	ldrb	r3, [r2, r3]
 800b470:	0018      	movs	r0, r3
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	2352      	movs	r3, #82	; 0x52
 800b476:	33ff      	adds	r3, #255	; 0xff
 800b478:	5cd3      	ldrb	r3, [r2, r3]
 800b47a:	001a      	movs	r2, r3
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	0013      	movs	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	189b      	adds	r3, r3, r2
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	189b      	adds	r3, r3, r2
 800b488:	0002      	movs	r2, r0
 800b48a:	0152      	lsls	r2, r2, #5
 800b48c:	1812      	adds	r2, r2, r0
 800b48e:	189b      	adds	r3, r3, r2
 800b490:	18cb      	adds	r3, r1, r3
 800b492:	3308      	adds	r3, #8
 800b494:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	23a9      	movs	r3, #169	; 0xa9
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	23a8      	movs	r3, #168	; 0xa8
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	5cd3      	ldrb	r3, [r2, r3]
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	2352      	movs	r3, #82	; 0x52
 800b4ac:	33ff      	adds	r3, #255	; 0xff
 800b4ae:	5cd3      	ldrb	r3, [r2, r3]
 800b4b0:	001a      	movs	r2, r3
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	0013      	movs	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	189b      	adds	r3, r3, r2
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	189b      	adds	r3, r3, r2
 800b4be:	0002      	movs	r2, r0
 800b4c0:	0152      	lsls	r2, r2, #5
 800b4c2:	1812      	adds	r2, r2, r0
 800b4c4:	189b      	adds	r3, r3, r2
 800b4c6:	18cb      	adds	r3, r1, r3
 800b4c8:	3309      	adds	r3, #9
 800b4ca:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	2354      	movs	r3, #84	; 0x54
 800b4d0:	33ff      	adds	r3, #255	; 0xff
 800b4d2:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	23a8      	movs	r3, #168	; 0xa8
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	5cd3      	ldrb	r3, [r2, r3]
 800b4dc:	0018      	movs	r0, r3
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	2352      	movs	r3, #82	; 0x52
 800b4e2:	33ff      	adds	r3, #255	; 0xff
 800b4e4:	5cd3      	ldrb	r3, [r2, r3]
 800b4e6:	001a      	movs	r2, r3
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	0013      	movs	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	189b      	adds	r3, r3, r2
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	189b      	adds	r3, r3, r2
 800b4f4:	0002      	movs	r2, r0
 800b4f6:	0152      	lsls	r2, r2, #5
 800b4f8:	1812      	adds	r2, r2, r0
 800b4fa:	189b      	adds	r3, r3, r2
 800b4fc:	18cb      	adds	r3, r1, r3
 800b4fe:	330a      	adds	r3, #10
 800b500:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	23aa      	movs	r3, #170	; 0xaa
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e177      	b.n	800b7fe <menuSwitch+0x69a>

		} else {
			return MENU_ERROR;
 800b50e:	2300      	movs	r3, #0
 800b510:	e175      	b.n	800b7fe <menuSwitch+0x69a>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 800b512:	1cfb      	adds	r3, r7, #3
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d000      	beq.n	800b51c <menuSwitch+0x3b8>
 800b51a:	e0ab      	b.n	800b674 <menuSwitch+0x510>
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	2354      	movs	r3, #84	; 0x54
 800b520:	33ff      	adds	r3, #255	; 0xff
 800b522:	5cd3      	ldrb	r3, [r2, r3]
 800b524:	2bff      	cmp	r3, #255	; 0xff
 800b526:	d100      	bne.n	800b52a <menuSwitch+0x3c6>
 800b528:	e0a4      	b.n	800b674 <menuSwitch+0x510>

		menu->current.parent = menu->current.entry;
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	23a8      	movs	r3, #168	; 0xa8
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	5cd1      	ldrb	r1, [r2, r3]
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	23a9      	movs	r3, #169	; 0xa9
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	54d1      	strb	r1, [r2, r3]
		menu->current.entry = menu->current.childFirst;
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	2354      	movs	r3, #84	; 0x54
 800b53e:	33ff      	adds	r3, #255	; 0xff
 800b540:	5cd1      	ldrb	r1, [r2, r3]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	23a8      	movs	r3, #168	; 0xa8
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	54d1      	strb	r1, [r2, r3]
		menu->current.level++;
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	2352      	movs	r3, #82	; 0x52
 800b54e:	33ff      	adds	r3, #255	; 0xff
 800b550:	5cd3      	ldrb	r3, [r2, r3]
 800b552:	3301      	adds	r3, #1
 800b554:	b2d9      	uxtb	r1, r3
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	2352      	movs	r3, #82	; 0x52
 800b55a:	33ff      	adds	r3, #255	; 0xff
 800b55c:	54d1      	strb	r1, [r2, r3]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	23a8      	movs	r3, #168	; 0xa8
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	5cd3      	ldrb	r3, [r2, r3]
 800b566:	0018      	movs	r0, r3
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	2352      	movs	r3, #82	; 0x52
 800b56c:	33ff      	adds	r3, #255	; 0xff
 800b56e:	5cd3      	ldrb	r3, [r2, r3]
 800b570:	001a      	movs	r2, r3
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	0013      	movs	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	189b      	adds	r3, r3, r2
 800b57a:	005b      	lsls	r3, r3, #1
 800b57c:	189b      	adds	r3, r3, r2
 800b57e:	0002      	movs	r2, r0
 800b580:	0152      	lsls	r2, r2, #5
 800b582:	1812      	adds	r2, r2, r0
 800b584:	189b      	adds	r3, r3, r2
 800b586:	18cb      	adds	r3, r1, r3
 800b588:	3309      	adds	r3, #9
 800b58a:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	2354      	movs	r3, #84	; 0x54
 800b590:	33ff      	adds	r3, #255	; 0xff
 800b592:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	23a8      	movs	r3, #168	; 0xa8
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	5cd3      	ldrb	r3, [r2, r3]
 800b59c:	0018      	movs	r0, r3
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	2352      	movs	r3, #82	; 0x52
 800b5a2:	33ff      	adds	r3, #255	; 0xff
 800b5a4:	5cd3      	ldrb	r3, [r2, r3]
 800b5a6:	001a      	movs	r2, r3
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	0013      	movs	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	189b      	adds	r3, r3, r2
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	189b      	adds	r3, r3, r2
 800b5b4:	0002      	movs	r2, r0
 800b5b6:	0152      	lsls	r2, r2, #5
 800b5b8:	1812      	adds	r2, r2, r0
 800b5ba:	189b      	adds	r3, r3, r2
 800b5bc:	18cb      	adds	r3, r1, r3
 800b5be:	330a      	adds	r3, #10
 800b5c0:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	23aa      	movs	r3, #170	; 0xaa
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	54d1      	strb	r1, [r2, r3]
		memcpy(menu->current.value,
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	334b      	adds	r3, #75	; 0x4b
 800b5ce:	33ff      	adds	r3, #255	; 0xff
 800b5d0:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	23a8      	movs	r3, #168	; 0xa8
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	5cd3      	ldrb	r3, [r2, r3]
 800b5da:	0019      	movs	r1, r3
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	2352      	movs	r3, #82	; 0x52
 800b5e0:	33ff      	adds	r3, #255	; 0xff
 800b5e2:	5cd3      	ldrb	r3, [r2, r3]
 800b5e4:	001a      	movs	r2, r3
 800b5e6:	0013      	movs	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	189b      	adds	r3, r3, r2
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	189b      	adds	r3, r3, r2
 800b5f0:	000a      	movs	r2, r1
 800b5f2:	0152      	lsls	r2, r2, #5
 800b5f4:	1852      	adds	r2, r2, r1
 800b5f6:	189b      	adds	r3, r3, r2
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800b5fc:	2204      	movs	r2, #4
 800b5fe:	0019      	movs	r1, r3
 800b600:	f001 f912 	bl	800c828 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	23a8      	movs	r3, #168	; 0xa8
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	5cd3      	ldrb	r3, [r2, r3]
 800b60c:	0018      	movs	r0, r3
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	2352      	movs	r3, #82	; 0x52
 800b612:	33ff      	adds	r3, #255	; 0xff
 800b614:	5cd3      	ldrb	r3, [r2, r3]
 800b616:	001a      	movs	r2, r3
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	0013      	movs	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	189b      	adds	r3, r3, r2
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	189b      	adds	r3, r3, r2
 800b624:	0002      	movs	r2, r0
 800b626:	0152      	lsls	r2, r2, #5
 800b628:	1812      	adds	r2, r2, r0
 800b62a:	189b      	adds	r3, r3, r2
 800b62c:	18cb      	adds	r3, r1, r3
 800b62e:	3304      	adds	r3, #4
 800b630:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	23a7      	movs	r3, #167	; 0xa7
 800b636:	005b      	lsls	r3, r3, #1
 800b638:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	23a8      	movs	r3, #168	; 0xa8
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	5cd3      	ldrb	r3, [r2, r3]
 800b642:	0018      	movs	r0, r3
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	2352      	movs	r3, #82	; 0x52
 800b648:	33ff      	adds	r3, #255	; 0xff
 800b64a:	5cd3      	ldrb	r3, [r2, r3]
 800b64c:	001a      	movs	r2, r3
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	0013      	movs	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	189b      	adds	r3, r3, r2
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	189b      	adds	r3, r3, r2
 800b65a:	0002      	movs	r2, r0
 800b65c:	0152      	lsls	r2, r2, #5
 800b65e:	1812      	adds	r2, r2, r0
 800b660:	189b      	adds	r3, r3, r2
 800b662:	18cb      	adds	r3, r1, r3
 800b664:	3305      	adds	r3, #5
 800b666:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	2350      	movs	r3, #80	; 0x50
 800b66c:	33ff      	adds	r3, #255	; 0xff
 800b66e:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800b670:	2301      	movs	r3, #1
 800b672:	e0c4      	b.n	800b7fe <menuSwitch+0x69a>

	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 800b674:	1cfb      	adds	r3, r7, #3
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d000      	beq.n	800b67e <menuSwitch+0x51a>
 800b67c:	e0be      	b.n	800b7fc <menuSwitch+0x698>
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	23a9      	movs	r3, #169	; 0xa9
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	5cd3      	ldrb	r3, [r2, r3]
 800b686:	2bff      	cmp	r3, #255	; 0xff
 800b688:	d100      	bne.n	800b68c <menuSwitch+0x528>
 800b68a:	e0b7      	b.n	800b7fc <menuSwitch+0x698>

		menu->current.entry = menu->current.parent;
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	23a9      	movs	r3, #169	; 0xa9
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	5cd1      	ldrb	r1, [r2, r3]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	23a8      	movs	r3, #168	; 0xa8
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	54d1      	strb	r1, [r2, r3]
		menu->current.level--;
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	2352      	movs	r3, #82	; 0x52
 800b6a0:	33ff      	adds	r3, #255	; 0xff
 800b6a2:	5cd3      	ldrb	r3, [r2, r3]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b2d9      	uxtb	r1, r3
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	2352      	movs	r3, #82	; 0x52
 800b6ac:	33ff      	adds	r3, #255	; 0xff
 800b6ae:	54d1      	strb	r1, [r2, r3]
		menu->current.parent = menu->items[menu->current.parent][menu->current.level].parent;
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	23a9      	movs	r3, #169	; 0xa9
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	5cd3      	ldrb	r3, [r2, r3]
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	2352      	movs	r3, #82	; 0x52
 800b6be:	33ff      	adds	r3, #255	; 0xff
 800b6c0:	5cd3      	ldrb	r3, [r2, r3]
 800b6c2:	001a      	movs	r2, r3
 800b6c4:	6879      	ldr	r1, [r7, #4]
 800b6c6:	0013      	movs	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	189b      	adds	r3, r3, r2
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	189b      	adds	r3, r3, r2
 800b6d0:	0002      	movs	r2, r0
 800b6d2:	0152      	lsls	r2, r2, #5
 800b6d4:	1812      	adds	r2, r2, r0
 800b6d6:	189b      	adds	r3, r3, r2
 800b6d8:	18cb      	adds	r3, r1, r3
 800b6da:	3308      	adds	r3, #8
 800b6dc:	7819      	ldrb	r1, [r3, #0]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	23a9      	movs	r3, #169	; 0xa9
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	54d1      	strb	r1, [r2, r3]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	23a8      	movs	r3, #168	; 0xa8
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	5cd3      	ldrb	r3, [r2, r3]
 800b6ee:	0018      	movs	r0, r3
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	2352      	movs	r3, #82	; 0x52
 800b6f4:	33ff      	adds	r3, #255	; 0xff
 800b6f6:	5cd3      	ldrb	r3, [r2, r3]
 800b6f8:	001a      	movs	r2, r3
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	0013      	movs	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	189b      	adds	r3, r3, r2
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	189b      	adds	r3, r3, r2
 800b706:	0002      	movs	r2, r0
 800b708:	0152      	lsls	r2, r2, #5
 800b70a:	1812      	adds	r2, r2, r0
 800b70c:	189b      	adds	r3, r3, r2
 800b70e:	18cb      	adds	r3, r1, r3
 800b710:	3309      	adds	r3, #9
 800b712:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	2354      	movs	r3, #84	; 0x54
 800b718:	33ff      	adds	r3, #255	; 0xff
 800b71a:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	23a8      	movs	r3, #168	; 0xa8
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	5cd3      	ldrb	r3, [r2, r3]
 800b724:	0018      	movs	r0, r3
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	2352      	movs	r3, #82	; 0x52
 800b72a:	33ff      	adds	r3, #255	; 0xff
 800b72c:	5cd3      	ldrb	r3, [r2, r3]
 800b72e:	001a      	movs	r2, r3
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	0013      	movs	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	189b      	adds	r3, r3, r2
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	189b      	adds	r3, r3, r2
 800b73c:	0002      	movs	r2, r0
 800b73e:	0152      	lsls	r2, r2, #5
 800b740:	1812      	adds	r2, r2, r0
 800b742:	189b      	adds	r3, r3, r2
 800b744:	18cb      	adds	r3, r1, r3
 800b746:	330a      	adds	r3, #10
 800b748:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	23aa      	movs	r3, #170	; 0xaa
 800b74e:	005b      	lsls	r3, r3, #1
 800b750:	54d1      	strb	r1, [r2, r3]

		memcpy(menu->current.value,
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	334b      	adds	r3, #75	; 0x4b
 800b756:	33ff      	adds	r3, #255	; 0xff
 800b758:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	23a8      	movs	r3, #168	; 0xa8
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	5cd3      	ldrb	r3, [r2, r3]
 800b762:	0019      	movs	r1, r3
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	2352      	movs	r3, #82	; 0x52
 800b768:	33ff      	adds	r3, #255	; 0xff
 800b76a:	5cd3      	ldrb	r3, [r2, r3]
 800b76c:	001a      	movs	r2, r3
 800b76e:	0013      	movs	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	189b      	adds	r3, r3, r2
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	189b      	adds	r3, r3, r2
 800b778:	000a      	movs	r2, r1
 800b77a:	0152      	lsls	r2, r2, #5
 800b77c:	1852      	adds	r2, r2, r1
 800b77e:	189b      	adds	r3, r3, r2
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800b784:	2204      	movs	r2, #4
 800b786:	0019      	movs	r1, r3
 800b788:	f001 f84e 	bl	800c828 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	23a8      	movs	r3, #168	; 0xa8
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	5cd3      	ldrb	r3, [r2, r3]
 800b794:	0018      	movs	r0, r3
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	2352      	movs	r3, #82	; 0x52
 800b79a:	33ff      	adds	r3, #255	; 0xff
 800b79c:	5cd3      	ldrb	r3, [r2, r3]
 800b79e:	001a      	movs	r2, r3
 800b7a0:	6879      	ldr	r1, [r7, #4]
 800b7a2:	0013      	movs	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	189b      	adds	r3, r3, r2
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	189b      	adds	r3, r3, r2
 800b7ac:	0002      	movs	r2, r0
 800b7ae:	0152      	lsls	r2, r2, #5
 800b7b0:	1812      	adds	r2, r2, r0
 800b7b2:	189b      	adds	r3, r3, r2
 800b7b4:	18cb      	adds	r3, r1, r3
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	23a7      	movs	r3, #167	; 0xa7
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
									menu->items[menu->current.entry][menu->current.level].value3;
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	23a8      	movs	r3, #168	; 0xa8
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	2352      	movs	r3, #82	; 0x52
 800b7d0:	33ff      	adds	r3, #255	; 0xff
 800b7d2:	5cd3      	ldrb	r3, [r2, r3]
 800b7d4:	001a      	movs	r2, r3
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	0013      	movs	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	189b      	adds	r3, r3, r2
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	189b      	adds	r3, r3, r2
 800b7e2:	0002      	movs	r2, r0
 800b7e4:	0152      	lsls	r2, r2, #5
 800b7e6:	1812      	adds	r2, r2, r0
 800b7e8:	189b      	adds	r3, r3, r2
 800b7ea:	18cb      	adds	r3, r1, r3
 800b7ec:	3305      	adds	r3, #5
 800b7ee:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	2350      	movs	r3, #80	; 0x50
 800b7f4:	33ff      	adds	r3, #255	; 0xff
 800b7f6:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <menuSwitch+0x69a>
	} else {
		return MENU_ERROR;
 800b7fc:	2300      	movs	r3, #0
	}
}
 800b7fe:	0018      	movs	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	b003      	add	sp, #12
 800b804:	bd90      	pop	{r4, r7, pc}
	...

0800b808 <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800b808:	b5b0      	push	{r4, r5, r7, lr}
 800b80a:	b090      	sub	sp, #64	; 0x40
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800b810:	49ee      	ldr	r1, [pc, #952]	; (800bbcc <rtcGetTime+0x3c4>)
 800b812:	4bef      	ldr	r3, [pc, #956]	; (800bbd0 <rtcGetTime+0x3c8>)
 800b814:	2200      	movs	r2, #0
 800b816:	0018      	movs	r0, r3
 800b818:	f7fa ffc4 	bl	80067a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800b81c:	49ed      	ldr	r1, [pc, #948]	; (800bbd4 <rtcGetTime+0x3cc>)
 800b81e:	4bec      	ldr	r3, [pc, #944]	; (800bbd0 <rtcGetTime+0x3c8>)
 800b820:	2200      	movs	r2, #0
 800b822:	0018      	movs	r0, r3
 800b824:	f7fb f8ac 	bl	8006980 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800b828:	4be8      	ldr	r3, [pc, #928]	; (800bbcc <rtcGetTime+0x3c4>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	b25a      	sxtb	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 800b832:	4be6      	ldr	r3, [pc, #920]	; (800bbcc <rtcGetTime+0x3c4>)
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	b25a      	sxtb	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800b83c:	4be3      	ldr	r3, [pc, #908]	; (800bbcc <rtcGetTime+0x3c4>)
 800b83e:	789b      	ldrb	r3, [r3, #2]
 800b840:	b25a      	sxtb	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800b846:	4be1      	ldr	r3, [pc, #900]	; (800bbcc <rtcGetTime+0x3c4>)
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	0013      	movs	r3, r2
 800b84c:	065b      	lsls	r3, r3, #25
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	189b      	adds	r3, r3, r2
 800b854:	00db      	lsls	r3, r3, #3
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4adf      	ldr	r2, [pc, #892]	; (800bbd8 <rtcGetTime+0x3d0>)
 800b85c:	4694      	mov	ip, r2
 800b85e:	4463      	add	r3, ip
 800b860:	21ff      	movs	r1, #255	; 0xff
 800b862:	0018      	movs	r0, r3
 800b864:	f7f4 fc58 	bl	8000118 <__udivsi3>
 800b868:	0003      	movs	r3, r0
 800b86a:	b25a      	sxtb	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800b870:	4bd8      	ldr	r3, [pc, #864]	; (800bbd4 <rtcGetTime+0x3cc>)
 800b872:	789b      	ldrb	r3, [r3, #2]
 800b874:	b25a      	sxtb	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800b87a:	4bd6      	ldr	r3, [pc, #856]	; (800bbd4 <rtcGetTime+0x3cc>)
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	b25a      	sxtb	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800b884:	4bd3      	ldr	r3, [pc, #844]	; (800bbd4 <rtcGetTime+0x3cc>)
 800b886:	78db      	ldrb	r3, [r3, #3]
 800b888:	b25a      	sxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	785b      	ldrb	r3, [r3, #1]
 800b892:	b25b      	sxtb	r3, r3
 800b894:	3309      	adds	r3, #9
 800b896:	210c      	movs	r1, #12
 800b898:	0018      	movs	r0, r3
 800b89a:	f7f4 fcc7 	bl	800022c <__divsi3>
 800b89e:	0003      	movs	r3, r0
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f7f5 fd05 	bl	80012b0 <__aeabi_i2f>
 800b8a6:	1c03      	adds	r3, r0, #0
 800b8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	001c      	movs	r4, r3
 800b8b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b8b4:	f7f4 fe50 	bl	8000558 <__aeabi_f2uiz>
 800b8b8:	0003      	movs	r3, r0
 800b8ba:	18e3      	adds	r3, r4, r3
 800b8bc:	4ac7      	ldr	r2, [pc, #796]	; (800bbdc <rtcGetTime+0x3d4>)
 800b8be:	4694      	mov	ip, r2
 800b8c0:	4463      	add	r3, ip
 800b8c2:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	785b      	ldrb	r3, [r3, #1]
 800b8c8:	b25b      	sxtb	r3, r3
 800b8ca:	001a      	movs	r2, r3
 800b8cc:	0013      	movs	r3, r2
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	1a9b      	subs	r3, r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	009a      	lsls	r2, r3, #2
 800b8d8:	189b      	adds	r3, r3, r2
 800b8da:	2109      	movs	r1, #9
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f7f4 fca5 	bl	800022c <__divsi3>
 800b8e2:	0003      	movs	r3, r0
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f7f5 fce3 	bl	80012b0 <__aeabi_i2f>
 800b8ea:	1c03      	adds	r3, r0, #0
 800b8ec:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 800b8ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8f0:	0013      	movs	r3, r2
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	1a9b      	subs	r3, r3, r2
 800b8f6:	089b      	lsrs	r3, r3, #2
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f7f5 fd1f 	bl	800133c <__aeabi_ui2f>
 800b8fe:	1c03      	adds	r3, r0, #0
 800b900:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	b25b      	sxtb	r3, r3
 800b908:	22fa      	movs	r2, #250	; 0xfa
 800b90a:	00d2      	lsls	r2, r2, #3
 800b90c:	189a      	adds	r2, r3, r2
 800b90e:	0013      	movs	r3, r2
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	189b      	adds	r3, r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	1a9b      	subs	r3, r3, r2
 800b91c:	0018      	movs	r0, r3
 800b91e:	f7f7 fb0b 	bl	8002f38 <__aeabi_i2d>
 800b922:	2280      	movs	r2, #128	; 0x80
 800b924:	0612      	lsls	r2, r2, #24
 800b926:	4bae      	ldr	r3, [pc, #696]	; (800bbe0 <rtcGetTime+0x3d8>)
 800b928:	f7f5 fd44 	bl	80013b4 <__aeabi_dadd>
 800b92c:	0002      	movs	r2, r0
 800b92e:	000b      	movs	r3, r1
 800b930:	0014      	movs	r4, r2
 800b932:	001d      	movs	r5, r3
 800b934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b936:	f7f4 fe0f 	bl	8000558 <__aeabi_f2uiz>
 800b93a:	0003      	movs	r3, r0
 800b93c:	0018      	movs	r0, r3
 800b93e:	f7f7 fb2b 	bl	8002f98 <__aeabi_ui2d>
 800b942:	0002      	movs	r2, r0
 800b944:	000b      	movs	r3, r1
 800b946:	0020      	movs	r0, r4
 800b948:	0029      	movs	r1, r5
 800b94a:	f7f5 fd33 	bl	80013b4 <__aeabi_dadd>
 800b94e:	0002      	movs	r2, r0
 800b950:	000b      	movs	r3, r1
 800b952:	0014      	movs	r4, r2
 800b954:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800b956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b958:	f7f4 fdfe 	bl	8000558 <__aeabi_f2uiz>
 800b95c:	0003      	movs	r3, r0
 800b95e:	0018      	movs	r0, r3
 800b960:	f7f7 fb1a 	bl	8002f98 <__aeabi_ui2d>
 800b964:	0002      	movs	r2, r0
 800b966:	000b      	movs	r3, r1
 800b968:	0020      	movs	r0, r4
 800b96a:	0029      	movs	r1, r5
 800b96c:	f7f6 fefe 	bl	800276c <__aeabi_dsub>
 800b970:	0002      	movs	r2, r0
 800b972:	000b      	movs	r3, r1
 800b974:	0014      	movs	r4, r2
 800b976:	001d      	movs	r5, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	789b      	ldrb	r3, [r3, #2]
 800b97c:	b25b      	sxtb	r3, r3
 800b97e:	0018      	movs	r0, r3
 800b980:	f7f7 fada 	bl	8002f38 <__aeabi_i2d>
 800b984:	0002      	movs	r2, r0
 800b986:	000b      	movs	r3, r1
 800b988:	0020      	movs	r0, r4
 800b98a:	0029      	movs	r1, r5
 800b98c:	f7f5 fd12 	bl	80013b4 <__aeabi_dadd>
 800b990:	0002      	movs	r2, r0
 800b992:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800b994:	0010      	movs	r0, r2
 800b996:	0019      	movs	r1, r3
 800b998:	f7f7 fb6c 	bl	8003074 <__aeabi_d2f>
 800b99c:	1c03      	adds	r3, r0, #0
 800b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	3353      	adds	r3, #83	; 0x53
 800b9a4:	2164      	movs	r1, #100	; 0x64
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	f7f4 fbb6 	bl	8000118 <__udivsi3>
 800b9ac:	0003      	movs	r3, r0
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	f7f5 fcc4 	bl	800133c <__aeabi_ui2f>
 800b9b4:	1c03      	adds	r3, r0, #0
 800b9b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 800b9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9ba:	f7f4 fdcd 	bl	8000558 <__aeabi_f2uiz>
 800b9be:	0003      	movs	r3, r0
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	0013      	movs	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	189b      	adds	r3, r3, r2
 800b9cc:	089b      	lsrs	r3, r3, #2
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f7f5 fcb4 	bl	800133c <__aeabi_ui2f>
 800b9d4:	1c03      	adds	r3, r0, #0
 800b9d6:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800b9d8:	6a38      	ldr	r0, [r7, #32]
 800b9da:	f7f4 fdbd 	bl	8000558 <__aeabi_f2uiz>
 800b9de:	0003      	movs	r3, r0
 800b9e0:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 800b9e2:	4980      	ldr	r1, [pc, #512]	; (800bbe4 <rtcGetTime+0x3dc>)
 800b9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9e6:	f7f4 feb9 	bl	800075c <__aeabi_fadd>
 800b9ea:	1c03      	adds	r3, r0, #0
 800b9ec:	1c1c      	adds	r4, r3, #0
 800b9ee:	69f8      	ldr	r0, [r7, #28]
 800b9f0:	f7f5 fca4 	bl	800133c <__aeabi_ui2f>
 800b9f4:	1c03      	adds	r3, r0, #0
 800b9f6:	1c19      	adds	r1, r3, #0
 800b9f8:	1c20      	adds	r0, r4, #0
 800b9fa:	f7f5 fa71 	bl	8000ee0 <__aeabi_fsub>
 800b9fe:	1c03      	adds	r3, r0, #0
 800ba00:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 800ba02:	4b79      	ldr	r3, [pc, #484]	; (800bbe8 <rtcGetTime+0x3e0>)
 800ba04:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800ba06:	6979      	ldr	r1, [r7, #20]
 800ba08:	69b8      	ldr	r0, [r7, #24]
 800ba0a:	f7f5 f843 	bl	8000a94 <__aeabi_fdiv>
 800ba0e:	1c03      	adds	r3, r0, #0
 800ba10:	1c18      	adds	r0, r3, #0
 800ba12:	f7f7 fae7 	bl	8002fe4 <__aeabi_f2d>
 800ba16:	4a75      	ldr	r2, [pc, #468]	; (800bbec <rtcGetTime+0x3e4>)
 800ba18:	4b75      	ldr	r3, [pc, #468]	; (800bbf0 <rtcGetTime+0x3e8>)
 800ba1a:	f7f6 fea7 	bl	800276c <__aeabi_dsub>
 800ba1e:	0002      	movs	r2, r0
 800ba20:	000b      	movs	r3, r1
 800ba22:	0010      	movs	r0, r2
 800ba24:	0019      	movs	r1, r3
 800ba26:	f7f7 fb25 	bl	8003074 <__aeabi_d2f>
 800ba2a:	1c03      	adds	r3, r0, #0
 800ba2c:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800ba2e:	6938      	ldr	r0, [r7, #16]
 800ba30:	f7f4 fd92 	bl	8000558 <__aeabi_f2uiz>
 800ba34:	0003      	movs	r3, r0
 800ba36:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f7f5 fc7f 	bl	800133c <__aeabi_ui2f>
 800ba3e:	1c03      	adds	r3, r0, #0
 800ba40:	1c19      	adds	r1, r3, #0
 800ba42:	6938      	ldr	r0, [r7, #16]
 800ba44:	f7f5 fa4c 	bl	8000ee0 <__aeabi_fsub>
 800ba48:	1c03      	adds	r3, r0, #0
 800ba4a:	496a      	ldr	r1, [pc, #424]	; (800bbf4 <rtcGetTime+0x3ec>)
 800ba4c:	1c18      	adds	r0, r3, #0
 800ba4e:	f7f5 f92d 	bl	8000cac <__aeabi_fmul>
 800ba52:	1c03      	adds	r3, r0, #0
 800ba54:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800ba56:	68b8      	ldr	r0, [r7, #8]
 800ba58:	f7f4 fd7e 	bl	8000558 <__aeabi_f2uiz>
 800ba5c:	0002      	movs	r2, r0
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2224      	movs	r2, #36	; 0x24
 800ba66:	5c9b      	ldrb	r3, [r3, r2]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d114      	bne.n	800ba96 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2224      	movs	r2, #36	; 0x24
 800ba9a:	5c9b      	ldrb	r3, [r3, r2]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d000      	beq.n	800baa2 <rtcGetTime+0x29a>
 800baa0:	e0f8      	b.n	800bc94 <rtcGetTime+0x48c>

#if RTC_FREEZED_DECIMALS
		chrono->chrono.hundredth = 0;
#else
		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	799b      	ldrb	r3, [r3, #6]
 800baa6:	b25b      	sxtb	r3, r3
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	7c9b      	ldrb	r3, [r3, #18]
 800baae:	b25b      	sxtb	r3, r3
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	b25a      	sxtb	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	779a      	strb	r2, [r3, #30]
#endif

		chrono->chrono.second = chrono->actual.second
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	795b      	ldrb	r3, [r3, #5]
 800bac0:	b25b      	sxtb	r3, r3
 800bac2:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	7c5b      	ldrb	r3, [r3, #17]
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	791b      	ldrb	r3, [r3, #4]
 800bada:	b25b      	sxtb	r3, r3
 800badc:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7c1b      	ldrb	r3, [r3, #16]
 800bae2:	b25b      	sxtb	r3, r3
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	78db      	ldrb	r3, [r3, #3]
 800baf4:	b25b      	sxtb	r3, r3
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	7bdb      	ldrb	r3, [r3, #15]
 800bafc:	b25b      	sxtb	r3, r3
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	b25a      	sxtb	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	789b      	ldrb	r3, [r3, #2]
 800bb0e:	b25b      	sxtb	r3, r3
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7b9b      	ldrb	r3, [r3, #14]
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	b25a      	sxtb	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	b25b      	sxtb	r3, r3
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	7b5b      	ldrb	r3, [r3, #13]
 800bb30:	b25b      	sxtb	r3, r3
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	b25a      	sxtb	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7f9b      	ldrb	r3, [r3, #30]
 800bb42:	b25b      	sxtb	r3, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	da11      	bge.n	800bb6c <rtcGetTime+0x364>
			chrono->chrono.second--;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	7f5b      	ldrb	r3, [r3, #29]
 800bb4c:	b25b      	sxtb	r3, r3
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	b25a      	sxtb	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7f9b      	ldrb	r3, [r3, #30]
 800bb5e:	b25b      	sxtb	r3, r3
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	3364      	adds	r3, #100	; 0x64
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	b25a      	sxtb	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	7f5b      	ldrb	r3, [r3, #29]
 800bb70:	b25b      	sxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	da11      	bge.n	800bb9a <rtcGetTime+0x392>
			chrono->chrono.minute--;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	7f1b      	ldrb	r3, [r3, #28]
 800bb7a:	b25b      	sxtb	r3, r3
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	b25a      	sxtb	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7f5b      	ldrb	r3, [r3, #29]
 800bb8c:	b25b      	sxtb	r3, r3
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	333c      	adds	r3, #60	; 0x3c
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	b25a      	sxtb	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7f1b      	ldrb	r3, [r3, #28]
 800bb9e:	b25b      	sxtb	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	da29      	bge.n	800bbf8 <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7edb      	ldrb	r3, [r3, #27]
 800bba8:	b25b      	sxtb	r3, r3
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	3b01      	subs	r3, #1
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	b25a      	sxtb	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7f1b      	ldrb	r3, [r3, #28]
 800bbba:	b25b      	sxtb	r3, r3
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	333c      	adds	r3, #60	; 0x3c
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	b25a      	sxtb	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	771a      	strb	r2, [r3, #28]
 800bbc8:	e016      	b.n	800bbf8 <rtcGetTime+0x3f0>
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	200000b4 	.word	0x200000b4
 800bbd0:	20000404 	.word	0x20000404
 800bbd4:	200000a4 	.word	0x200000a4
 800bbd8:	0000639c 	.word	0x0000639c
 800bbdc:	00001a3c 	.word	0x00001a3c
 800bbe0:	413a62ff 	.word	0x413a62ff
 800bbe4:	42180000 	.word	0x42180000
 800bbe8:	41ec3ea6 	.word	0x41ec3ea6
 800bbec:	67381d7e 	.word	0x67381d7e
 800bbf0:	3fd36944 	.word	0x3fd36944
 800bbf4:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	7edb      	ldrb	r3, [r3, #27]
 800bbfc:	b25b      	sxtb	r3, r3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	da11      	bge.n	800bc26 <rtcGetTime+0x41e>
			chrono->chrono.day--;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	7e9b      	ldrb	r3, [r3, #26]
 800bc06:	b25b      	sxtb	r3, r3
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	b25a      	sxtb	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7edb      	ldrb	r3, [r3, #27]
 800bc18:	b25b      	sxtb	r3, r3
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	b25a      	sxtb	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	7e9b      	ldrb	r3, [r3, #26]
 800bc2a:	b25b      	sxtb	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	da11      	bge.n	800bc54 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7e5b      	ldrb	r3, [r3, #25]
 800bc34:	b25b      	sxtb	r3, r3
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	b25a      	sxtb	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7e9b      	ldrb	r3, [r3, #26]
 800bc46:	b25b      	sxtb	r3, r3
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	331e      	adds	r3, #30
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	b25a      	sxtb	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	7e5b      	ldrb	r3, [r3, #25]
 800bc58:	b25b      	sxtb	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	da11      	bge.n	800bc82 <rtcGetTime+0x47a>
			chrono->chrono.year--;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7e1b      	ldrb	r3, [r3, #24]
 800bc62:	b25b      	sxtb	r3, r3
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	b25a      	sxtb	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	7e5b      	ldrb	r3, [r3, #25]
 800bc74:	b25b      	sxtb	r3, r3
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	330c      	adds	r3, #12
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	b25a      	sxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	765a      	strb	r2, [r3, #25]
		}

		//max chrono count
		if (chrono->chrono.hour >= 5) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	7edb      	ldrb	r3, [r3, #27]
 800bc86:	b25b      	sxtb	r3, r3
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	dd03      	ble.n	800bc94 <rtcGetTime+0x48c>
			chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2224      	movs	r2, #36	; 0x24
 800bc90:	2102      	movs	r1, #2
 800bc92:	5499      	strb	r1, [r3, r2]
		}
	}

}
 800bc94:	46c0      	nop			; (mov r8, r8)
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b010      	add	sp, #64	; 0x40
 800bc9a:	bdb0      	pop	{r4, r5, r7, pc}

0800bc9c <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	78db      	ldrb	r3, [r3, #3]
 800bca8:	b25b      	sxtb	r3, r3
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	4b17      	ldr	r3, [pc, #92]	; (800bd0c <rtcSetTime+0x70>)
 800bcae:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	791b      	ldrb	r3, [r3, #4]
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	4b14      	ldr	r3, [pc, #80]	; (800bd0c <rtcSetTime+0x70>)
 800bcba:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	795b      	ldrb	r3, [r3, #5]
 800bcc0:	b25b      	sxtb	r3, r3
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	4b11      	ldr	r3, [pc, #68]	; (800bd0c <rtcSetTime+0x70>)
 800bcc6:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	789b      	ldrb	r3, [r3, #2]
 800bccc:	b25b      	sxtb	r3, r3
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	4b0f      	ldr	r3, [pc, #60]	; (800bd10 <rtcSetTime+0x74>)
 800bcd2:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	785b      	ldrb	r3, [r3, #1]
 800bcd8:	b25b      	sxtb	r3, r3
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	4b0c      	ldr	r3, [pc, #48]	; (800bd10 <rtcSetTime+0x74>)
 800bcde:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	4b09      	ldr	r3, [pc, #36]	; (800bd10 <rtcSetTime+0x74>)
 800bcea:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bcec:	4907      	ldr	r1, [pc, #28]	; (800bd0c <rtcSetTime+0x70>)
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <rtcSetTime+0x78>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f7fa fcae 	bl	8006654 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bcf8:	4905      	ldr	r1, [pc, #20]	; (800bd10 <rtcSetTime+0x74>)
 800bcfa:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <rtcSetTime+0x78>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	0018      	movs	r0, r3
 800bd00:	f7fa fdac 	bl	800685c <HAL_RTC_SetDate>

}
 800bd04:	46c0      	nop			; (mov r8, r8)
 800bd06:	46bd      	mov	sp, r7
 800bd08:	b002      	add	sp, #8
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	200000b4 	.word	0x200000b4
 800bd10:	200000a4 	.word	0x200000a4
 800bd14:	20000404 	.word	0x20000404

0800bd18 <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bd20:	4923      	ldr	r1, [pc, #140]	; (800bdb0 <rtcStartChrono+0x98>)
 800bd22:	4b24      	ldr	r3, [pc, #144]	; (800bdb4 <rtcStartChrono+0x9c>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	0018      	movs	r0, r3
 800bd28:	f7fa fd3c 	bl	80067a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bd2c:	4922      	ldr	r1, [pc, #136]	; (800bdb8 <rtcStartChrono+0xa0>)
 800bd2e:	4b21      	ldr	r3, [pc, #132]	; (800bdb4 <rtcStartChrono+0x9c>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	0018      	movs	r0, r3
 800bd34:	f7fa fe24 	bl	8006980 <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800bd38:	4b1d      	ldr	r3, [pc, #116]	; (800bdb0 <rtcStartChrono+0x98>)
 800bd3a:	789b      	ldrb	r3, [r3, #2]
 800bd3c:	b25a      	sxtb	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 800bd42:	4b1b      	ldr	r3, [pc, #108]	; (800bdb0 <rtcStartChrono+0x98>)
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	b25a      	sxtb	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800bd4c:	4b18      	ldr	r3, [pc, #96]	; (800bdb0 <rtcStartChrono+0x98>)
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	0013      	movs	r3, r2
 800bd52:	065b      	lsls	r3, r3, #25
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	189b      	adds	r3, r3, r2
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	1a9b      	subs	r3, r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4a16      	ldr	r2, [pc, #88]	; (800bdbc <rtcStartChrono+0xa4>)
 800bd62:	4694      	mov	ip, r2
 800bd64:	4463      	add	r3, ip
 800bd66:	21ff      	movs	r1, #255	; 0xff
 800bd68:	0018      	movs	r0, r3
 800bd6a:	f7f4 f9d5 	bl	8000118 <__udivsi3>
 800bd6e:	0003      	movs	r3, r0
 800bd70:	b25a      	sxtb	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 800bd76:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <rtcStartChrono+0x98>)
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	b25a      	sxtb	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 800bd80:	4b0d      	ldr	r3, [pc, #52]	; (800bdb8 <rtcStartChrono+0xa0>)
 800bd82:	789b      	ldrb	r3, [r3, #2]
 800bd84:	b25a      	sxtb	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 800bd8a:	4b0b      	ldr	r3, [pc, #44]	; (800bdb8 <rtcStartChrono+0xa0>)
 800bd8c:	785b      	ldrb	r3, [r3, #1]
 800bd8e:	b25a      	sxtb	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 800bd94:	4b08      	ldr	r3, [pc, #32]	; (800bdb8 <rtcStartChrono+0xa0>)
 800bd96:	78db      	ldrb	r3, [r3, #3]
 800bd98:	b25a      	sxtb	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2224      	movs	r2, #36	; 0x24
 800bda2:	2101      	movs	r1, #1
 800bda4:	5499      	strb	r1, [r3, r2]
}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	b002      	add	sp, #8
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	200000b4 	.word	0x200000b4
 800bdb4:	20000404 	.word	0x20000404
 800bdb8:	200000a4 	.word	0x200000a4
 800bdbc:	0000639c 	.word	0x0000639c

0800bdc0 <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bdc8:	4952      	ldr	r1, [pc, #328]	; (800bf14 <rtcStopChrono+0x154>)
 800bdca:	4b53      	ldr	r3, [pc, #332]	; (800bf18 <rtcStopChrono+0x158>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	0018      	movs	r0, r3
 800bdd0:	f7fa fce8 	bl	80067a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bdd4:	4951      	ldr	r1, [pc, #324]	; (800bf1c <rtcStopChrono+0x15c>)
 800bdd6:	4b50      	ldr	r3, [pc, #320]	; (800bf18 <rtcStopChrono+0x158>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	0018      	movs	r0, r3
 800bddc:	f7fa fdd0 	bl	8006980 <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 800bde0:	4b4c      	ldr	r3, [pc, #304]	; (800bf14 <rtcStopChrono+0x154>)
 800bde2:	785b      	ldrb	r3, [r3, #1]
 800bde4:	b25a      	sxtb	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800bdea:	4b4a      	ldr	r3, [pc, #296]	; (800bf14 <rtcStopChrono+0x154>)
 800bdec:	789b      	ldrb	r3, [r3, #2]
 800bdee:	b25a      	sxtb	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800bdf4:	4b47      	ldr	r3, [pc, #284]	; (800bf14 <rtcStopChrono+0x154>)
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	0013      	movs	r3, r2
 800bdfa:	065b      	lsls	r3, r3, #25
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	189b      	adds	r3, r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	1a9b      	subs	r3, r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4a45      	ldr	r2, [pc, #276]	; (800bf20 <rtcStopChrono+0x160>)
 800be0a:	4694      	mov	ip, r2
 800be0c:	4463      	add	r3, ip
 800be0e:	21ff      	movs	r1, #255	; 0xff
 800be10:	0018      	movs	r0, r3
 800be12:	f7f4 f981 	bl	8000118 <__udivsi3>
 800be16:	0003      	movs	r3, r0
 800be18:	b25a      	sxtb	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 800be1e:	4b3d      	ldr	r3, [pc, #244]	; (800bf14 <rtcStopChrono+0x154>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b25a      	sxtb	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800be28:	4b3c      	ldr	r3, [pc, #240]	; (800bf1c <rtcStopChrono+0x15c>)
 800be2a:	789b      	ldrb	r3, [r3, #2]
 800be2c:	b25a      	sxtb	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800be32:	4b3a      	ldr	r3, [pc, #232]	; (800bf1c <rtcStopChrono+0x15c>)
 800be34:	785b      	ldrb	r3, [r3, #1]
 800be36:	b25a      	sxtb	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800be3c:	4b37      	ldr	r3, [pc, #220]	; (800bf1c <rtcStopChrono+0x15c>)
 800be3e:	78db      	ldrb	r3, [r3, #3]
 800be40:	b25a      	sxtb	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	799b      	ldrb	r3, [r3, #6]
 800be4a:	b25b      	sxtb	r3, r3
 800be4c:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	7c9b      	ldrb	r3, [r3, #18]
 800be52:	b25b      	sxtb	r3, r3
 800be54:	b2db      	uxtb	r3, r3
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	795b      	ldrb	r3, [r3, #5]
 800be64:	b25b      	sxtb	r3, r3
 800be66:	b2da      	uxtb	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7c5b      	ldrb	r3, [r3, #17]
 800be6c:	b25b      	sxtb	r3, r3
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	b2db      	uxtb	r3, r3
 800be74:	b25a      	sxtb	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	791b      	ldrb	r3, [r3, #4]
 800be7e:	b25b      	sxtb	r3, r3
 800be80:	b2da      	uxtb	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7c1b      	ldrb	r3, [r3, #16]
 800be86:	b25b      	sxtb	r3, r3
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	b25a      	sxtb	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	78db      	ldrb	r3, [r3, #3]
 800be98:	b25b      	sxtb	r3, r3
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	7bdb      	ldrb	r3, [r3, #15]
 800bea0:	b25b      	sxtb	r3, r3
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	b25a      	sxtb	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	789b      	ldrb	r3, [r3, #2]
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	7b9b      	ldrb	r3, [r3, #14]
 800beba:	b25b      	sxtb	r3, r3
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	b25a      	sxtb	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	b25b      	sxtb	r3, r3
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7b5b      	ldrb	r3, [r3, #13]
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	b25a      	sxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	b25b      	sxtb	r3, r3
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	7b1b      	ldrb	r3, [r3, #12]
 800beee:	b25b      	sxtb	r3, r3
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	b25a      	sxtb	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	0018      	movs	r0, r3
 800bf00:	f7ff fc82 	bl	800b808 <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2224      	movs	r2, #36	; 0x24
 800bf08:	2102      	movs	r1, #2
 800bf0a:	5499      	strb	r1, [r3, r2]


}
 800bf0c:	46c0      	nop			; (mov r8, r8)
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	b002      	add	sp, #8
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	200000b4 	.word	0x200000b4
 800bf18:	20000404 	.word	0x20000404
 800bf1c:	200000a4 	.word	0x200000a4
 800bf20:	0000639c 	.word	0x0000639c

0800bf24 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2224      	movs	r2, #36	; 0x24
 800bf30:	2101      	movs	r1, #1
 800bf32:	5499      	strb	r1, [r3, r2]
}
 800bf34:	46c0      	nop			; (mov r8, r8)
 800bf36:	46bd      	mov	sp, r7
 800bf38:	b002      	add	sp, #8
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2224      	movs	r2, #36	; 0x24
 800bf78:	2100      	movs	r1, #0
 800bf7a:	5499      	strb	r1, [r3, r2]

}
 800bf7c:	46c0      	nop			; (mov r8, r8)
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	b002      	add	sp, #8
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	0008      	movs	r0, r1
 800bf8e:	0011      	movs	r1, r2
 800bf90:	1cfb      	adds	r3, r7, #3
 800bf92:	1c02      	adds	r2, r0, #0
 800bf94:	701a      	strb	r2, [r3, #0]
 800bf96:	1cbb      	adds	r3, r7, #2
 800bf98:	1c0a      	adds	r2, r1, #0
 800bf9a:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 800bf9c:	1cbb      	adds	r3, r7, #2
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d000      	beq.n	800bfa6 <rtcChangeValue+0x22>
 800bfa4:	e08a      	b.n	800c0bc <rtcChangeValue+0x138>
		switch (element) {
 800bfa6:	1cfb      	adds	r3, r7, #3
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	d900      	bls.n	800bfb0 <rtcChangeValue+0x2c>
 800bfae:	e080      	b.n	800c0b2 <rtcChangeValue+0x12e>
 800bfb0:	009a      	lsls	r2, r3, #2
 800bfb2:	4b8c      	ldr	r3, [pc, #560]	; (800c1e4 <rtcChangeValue+0x260>)
 800bfb4:	18d3      	adds	r3, r2, r3
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	78db      	ldrb	r3, [r3, #3]
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	dd09      	ble.n	800bfd8 <rtcChangeValue+0x54>
				chrono->actual.hour--;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	78db      	ldrb	r3, [r3, #3]
 800bfc8:	b25b      	sxtb	r3, r3
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	b25a      	sxtb	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800bfd6:	e063      	b.n	800c0a0 <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	78db      	ldrb	r3, [r3, #3]
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d15e      	bne.n	800c0a0 <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2217      	movs	r2, #23
 800bfe6:	70da      	strb	r2, [r3, #3]
			break;
 800bfe8:	e05a      	b.n	800c0a0 <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	791b      	ldrb	r3, [r3, #4]
 800bfee:	b25b      	sxtb	r3, r3
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	dd09      	ble.n	800c008 <rtcChangeValue+0x84>
				chrono->actual.minute--;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	791b      	ldrb	r3, [r3, #4]
 800bff8:	b25b      	sxtb	r3, r3
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	b25a      	sxtb	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800c006:	e04d      	b.n	800c0a4 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	791b      	ldrb	r3, [r3, #4]
 800c00c:	b25b      	sxtb	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d148      	bne.n	800c0a4 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	223b      	movs	r2, #59	; 0x3b
 800c016:	711a      	strb	r2, [r3, #4]
			break;
 800c018:	e044      	b.n	800c0a4 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	715a      	strb	r2, [r3, #5]
			break;
 800c020:	e047      	b.n	800c0b2 <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	789b      	ldrb	r3, [r3, #2]
 800c026:	b25b      	sxtb	r3, r3
 800c028:	2b01      	cmp	r3, #1
 800c02a:	dd09      	ble.n	800c040 <rtcChangeValue+0xbc>
				chrono->actual.day--;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	789b      	ldrb	r3, [r3, #2]
 800c030:	b25b      	sxtb	r3, r3
 800c032:	b2db      	uxtb	r3, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	b2db      	uxtb	r3, r3
 800c038:	b25a      	sxtb	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 800c03e:	e033      	b.n	800c0a8 <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	789b      	ldrb	r3, [r3, #2]
 800c044:	b25b      	sxtb	r3, r3
 800c046:	2b01      	cmp	r3, #1
 800c048:	d12e      	bne.n	800c0a8 <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	221f      	movs	r2, #31
 800c04e:	709a      	strb	r2, [r3, #2]
			break;
 800c050:	e02a      	b.n	800c0a8 <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	b25b      	sxtb	r3, r3
 800c058:	2b01      	cmp	r3, #1
 800c05a:	dd09      	ble.n	800c070 <rtcChangeValue+0xec>
				chrono->actual.month--;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	785b      	ldrb	r3, [r3, #1]
 800c060:	b25b      	sxtb	r3, r3
 800c062:	b2db      	uxtb	r3, r3
 800c064:	3b01      	subs	r3, #1
 800c066:	b2db      	uxtb	r3, r3
 800c068:	b25a      	sxtb	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 800c06e:	e01d      	b.n	800c0ac <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	b25b      	sxtb	r3, r3
 800c076:	2b01      	cmp	r3, #1
 800c078:	d118      	bne.n	800c0ac <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	220c      	movs	r2, #12
 800c07e:	705a      	strb	r2, [r3, #1]
			break;
 800c080:	e014      	b.n	800c0ac <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	b25b      	sxtb	r3, r3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dd11      	ble.n	800c0b0 <rtcChangeValue+0x12c>
				chrono->actual.year--;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	b25b      	sxtb	r3, r3
 800c092:	b2db      	uxtb	r3, r3
 800c094:	3b01      	subs	r3, #1
 800c096:	b2db      	uxtb	r3, r3
 800c098:	b25a      	sxtb	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	701a      	strb	r2, [r3, #0]
			break;
 800c09e:	e007      	b.n	800c0b0 <rtcChangeValue+0x12c>
			break;
 800c0a0:	46c0      	nop			; (mov r8, r8)
 800c0a2:	e006      	b.n	800c0b2 <rtcChangeValue+0x12e>
			break;
 800c0a4:	46c0      	nop			; (mov r8, r8)
 800c0a6:	e004      	b.n	800c0b2 <rtcChangeValue+0x12e>
			break;
 800c0a8:	46c0      	nop			; (mov r8, r8)
 800c0aa:	e002      	b.n	800c0b2 <rtcChangeValue+0x12e>
			break;
 800c0ac:	46c0      	nop			; (mov r8, r8)
 800c0ae:	e000      	b.n	800c0b2 <rtcChangeValue+0x12e>
			break;
 800c0b0:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	f7ff fdf1 	bl	800bc9c <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 800c0ba:	e08e      	b.n	800c1da <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 800c0bc:	1cbb      	adds	r3, r7, #2
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d000      	beq.n	800c0c6 <rtcChangeValue+0x142>
 800c0c4:	e089      	b.n	800c1da <rtcChangeValue+0x256>
		switch (element) {
 800c0c6:	1cfb      	adds	r3, r7, #3
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b05      	cmp	r3, #5
 800c0cc:	d900      	bls.n	800c0d0 <rtcChangeValue+0x14c>
 800c0ce:	e080      	b.n	800c1d2 <rtcChangeValue+0x24e>
 800c0d0:	009a      	lsls	r2, r3, #2
 800c0d2:	4b45      	ldr	r3, [pc, #276]	; (800c1e8 <rtcChangeValue+0x264>)
 800c0d4:	18d3      	adds	r3, r2, r3
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	78db      	ldrb	r3, [r3, #3]
 800c0de:	b25b      	sxtb	r3, r3
 800c0e0:	2b16      	cmp	r3, #22
 800c0e2:	dc09      	bgt.n	800c0f8 <rtcChangeValue+0x174>
				chrono->actual.hour++;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	78db      	ldrb	r3, [r3, #3]
 800c0e8:	b25b      	sxtb	r3, r3
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	b25a      	sxtb	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	70da      	strb	r2, [r3, #3]
			break;
 800c0f6:	e063      	b.n	800c1c0 <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	78db      	ldrb	r3, [r3, #3]
 800c0fc:	b25b      	sxtb	r3, r3
 800c0fe:	2b16      	cmp	r3, #22
 800c100:	dd5e      	ble.n	800c1c0 <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	70da      	strb	r2, [r3, #3]
			break;
 800c108:	e05a      	b.n	800c1c0 <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	791b      	ldrb	r3, [r3, #4]
 800c10e:	b25b      	sxtb	r3, r3
 800c110:	2b3a      	cmp	r3, #58	; 0x3a
 800c112:	dc09      	bgt.n	800c128 <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	791b      	ldrb	r3, [r3, #4]
 800c118:	b25b      	sxtb	r3, r3
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	3301      	adds	r3, #1
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	b25a      	sxtb	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	711a      	strb	r2, [r3, #4]
			break;
 800c126:	e04d      	b.n	800c1c4 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	791b      	ldrb	r3, [r3, #4]
 800c12c:	b25b      	sxtb	r3, r3
 800c12e:	2b3a      	cmp	r3, #58	; 0x3a
 800c130:	dd48      	ble.n	800c1c4 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	711a      	strb	r2, [r3, #4]
			break;
 800c138:	e044      	b.n	800c1c4 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	715a      	strb	r2, [r3, #5]
			break;
 800c140:	e047      	b.n	800c1d2 <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	789b      	ldrb	r3, [r3, #2]
 800c146:	b25b      	sxtb	r3, r3
 800c148:	2b1e      	cmp	r3, #30
 800c14a:	dc09      	bgt.n	800c160 <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	789b      	ldrb	r3, [r3, #2]
 800c150:	b25b      	sxtb	r3, r3
 800c152:	b2db      	uxtb	r3, r3
 800c154:	3301      	adds	r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	b25a      	sxtb	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	709a      	strb	r2, [r3, #2]
			break;
 800c15e:	e033      	b.n	800c1c8 <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	789b      	ldrb	r3, [r3, #2]
 800c164:	b25b      	sxtb	r3, r3
 800c166:	2b1f      	cmp	r3, #31
 800c168:	d12e      	bne.n	800c1c8 <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	709a      	strb	r2, [r3, #2]
			break;
 800c170:	e02a      	b.n	800c1c8 <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	b25b      	sxtb	r3, r3
 800c178:	2b0b      	cmp	r3, #11
 800c17a:	dc09      	bgt.n	800c190 <rtcChangeValue+0x20c>
				chrono->actual.month++;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	785b      	ldrb	r3, [r3, #1]
 800c180:	b25b      	sxtb	r3, r3
 800c182:	b2db      	uxtb	r3, r3
 800c184:	3301      	adds	r3, #1
 800c186:	b2db      	uxtb	r3, r3
 800c188:	b25a      	sxtb	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	705a      	strb	r2, [r3, #1]
			break;
 800c18e:	e01d      	b.n	800c1cc <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	785b      	ldrb	r3, [r3, #1]
 800c194:	b25b      	sxtb	r3, r3
 800c196:	2b0c      	cmp	r3, #12
 800c198:	d118      	bne.n	800c1cc <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	705a      	strb	r2, [r3, #1]
			break;
 800c1a0:	e014      	b.n	800c1cc <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b25b      	sxtb	r3, r3
 800c1a8:	2b62      	cmp	r3, #98	; 0x62
 800c1aa:	dc11      	bgt.n	800c1d0 <rtcChangeValue+0x24c>
				chrono->actual.year++;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b25b      	sxtb	r3, r3
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	b25a      	sxtb	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	701a      	strb	r2, [r3, #0]
			break;
 800c1be:	e007      	b.n	800c1d0 <rtcChangeValue+0x24c>
			break;
 800c1c0:	46c0      	nop			; (mov r8, r8)
 800c1c2:	e006      	b.n	800c1d2 <rtcChangeValue+0x24e>
			break;
 800c1c4:	46c0      	nop			; (mov r8, r8)
 800c1c6:	e004      	b.n	800c1d2 <rtcChangeValue+0x24e>
			break;
 800c1c8:	46c0      	nop			; (mov r8, r8)
 800c1ca:	e002      	b.n	800c1d2 <rtcChangeValue+0x24e>
			break;
 800c1cc:	46c0      	nop			; (mov r8, r8)
 800c1ce:	e000      	b.n	800c1d2 <rtcChangeValue+0x24e>
			break;
 800c1d0:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	f7ff fd61 	bl	800bc9c <rtcSetTime>
}
 800c1da:	46c0      	nop			; (mov r8, r8)
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	b002      	add	sp, #8
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	0800d7bc 	.word	0x0800d7bc
 800c1e8:	0800d7d4 	.word	0x0800d7d4

0800c1ec <rtcBlink>:
 *
 * @param  RTC item handler
 *
 * @retval Even- 1, Odd- 0
 */
uint8_t rtcBlink(RTCChronoTypeDef *chrono) {
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800c1f4:	4910      	ldr	r1, [pc, #64]	; (800c238 <rtcBlink+0x4c>)
 800c1f6:	4b11      	ldr	r3, [pc, #68]	; (800c23c <rtcBlink+0x50>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	0018      	movs	r0, r3
 800c1fc:	f7fa fad2 	bl	80067a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800c200:	490f      	ldr	r1, [pc, #60]	; (800c240 <rtcBlink+0x54>)
 800c202:	4b0e      	ldr	r3, [pc, #56]	; (800c23c <rtcBlink+0x50>)
 800c204:	2200      	movs	r2, #0
 800c206:	0018      	movs	r0, r3
 800c208:	f7fa fbba 	bl	8006980 <HAL_RTC_GetDate>

	chrono->actual.second = Time.Seconds;
 800c20c:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <rtcBlink+0x4c>)
 800c20e:	789b      	ldrb	r3, [r3, #2]
 800c210:	b25a      	sxtb	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	715a      	strb	r2, [r3, #5]

	if (chrono->actual.second % 2) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	795b      	ldrb	r3, [r3, #5]
 800c21a:	b25b      	sxtb	r3, r3
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2201      	movs	r2, #1
 800c220:	4013      	ands	r3, r2
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <rtcBlink+0x40>
		return 1;
 800c228:	2301      	movs	r3, #1
 800c22a:	e000      	b.n	800c22e <rtcBlink+0x42>
	} else {
		return 0;
 800c22c:	2300      	movs	r3, #0
	}
}
 800c22e:	0018      	movs	r0, r3
 800c230:	46bd      	mov	sp, r7
 800c232:	b002      	add	sp, #8
 800c234:	bd80      	pop	{r7, pc}
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	200000b4 	.word	0x200000b4
 800c23c:	20000404 	.word	0x20000404
 800c240:	200000a4 	.word	0x200000a4

0800c244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c24a:	4b11      	ldr	r3, [pc, #68]	; (800c290 <HAL_MspInit+0x4c>)
 800c24c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c24e:	4b10      	ldr	r3, [pc, #64]	; (800c290 <HAL_MspInit+0x4c>)
 800c250:	2101      	movs	r1, #1
 800c252:	430a      	orrs	r2, r1
 800c254:	641a      	str	r2, [r3, #64]	; 0x40
 800c256:	4b0e      	ldr	r3, [pc, #56]	; (800c290 <HAL_MspInit+0x4c>)
 800c258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25a:	2201      	movs	r2, #1
 800c25c:	4013      	ands	r3, r2
 800c25e:	607b      	str	r3, [r7, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c262:	4b0b      	ldr	r3, [pc, #44]	; (800c290 <HAL_MspInit+0x4c>)
 800c264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c266:	4b0a      	ldr	r3, [pc, #40]	; (800c290 <HAL_MspInit+0x4c>)
 800c268:	2180      	movs	r1, #128	; 0x80
 800c26a:	0549      	lsls	r1, r1, #21
 800c26c:	430a      	orrs	r2, r1
 800c26e:	63da      	str	r2, [r3, #60]	; 0x3c
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <HAL_MspInit+0x4c>)
 800c272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c274:	2380      	movs	r3, #128	; 0x80
 800c276:	055b      	lsls	r3, r3, #21
 800c278:	4013      	ands	r3, r2
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800c27e:	2380      	movs	r3, #128	; 0x80
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	0018      	movs	r0, r3
 800c284:	f7f7 fa30 	bl	80036e8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c288:	46c0      	nop			; (mov r8, r8)
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b002      	add	sp, #8
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	40021000 	.word	0x40021000

0800c294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c294:	b590      	push	{r4, r7, lr}
 800c296:	b097      	sub	sp, #92	; 0x5c
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c29c:	2344      	movs	r3, #68	; 0x44
 800c29e:	18fb      	adds	r3, r7, r3
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	2314      	movs	r3, #20
 800c2a4:	001a      	movs	r2, r3
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	f000 fac7 	bl	800c83a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c2ac:	2410      	movs	r4, #16
 800c2ae:	193b      	adds	r3, r7, r4
 800c2b0:	0018      	movs	r0, r3
 800c2b2:	2334      	movs	r3, #52	; 0x34
 800c2b4:	001a      	movs	r2, r3
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	f000 fabf 	bl	800c83a <memset>
  if(hadc->Instance==ADC1)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a20      	ldr	r2, [pc, #128]	; (800c344 <HAL_ADC_MspInit+0xb0>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d139      	bne.n	800c33a <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800c2c6:	193b      	adds	r3, r7, r4
 800c2c8:	2280      	movs	r2, #128	; 0x80
 800c2ca:	01d2      	lsls	r2, r2, #7
 800c2cc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800c2ce:	193b      	adds	r3, r7, r4
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c2d4:	193b      	adds	r3, r7, r4
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	f7f9 ff6e 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 800c2dc:	1e03      	subs	r3, r0, #0
 800c2de:	d001      	beq.n	800c2e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800c2e0:	f7fe fdcc 	bl	800ae7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800c2e4:	4b18      	ldr	r3, [pc, #96]	; (800c348 <HAL_ADC_MspInit+0xb4>)
 800c2e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2e8:	4b17      	ldr	r3, [pc, #92]	; (800c348 <HAL_ADC_MspInit+0xb4>)
 800c2ea:	2180      	movs	r1, #128	; 0x80
 800c2ec:	0349      	lsls	r1, r1, #13
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	641a      	str	r2, [r3, #64]	; 0x40
 800c2f2:	4b15      	ldr	r3, [pc, #84]	; (800c348 <HAL_ADC_MspInit+0xb4>)
 800c2f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2f6:	2380      	movs	r3, #128	; 0x80
 800c2f8:	035b      	lsls	r3, r3, #13
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c300:	4b11      	ldr	r3, [pc, #68]	; (800c348 <HAL_ADC_MspInit+0xb4>)
 800c302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c304:	4b10      	ldr	r3, [pc, #64]	; (800c348 <HAL_ADC_MspInit+0xb4>)
 800c306:	2101      	movs	r1, #1
 800c308:	430a      	orrs	r2, r1
 800c30a:	635a      	str	r2, [r3, #52]	; 0x34
 800c30c:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <HAL_ADC_MspInit+0xb4>)
 800c30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c310:	2201      	movs	r2, #1
 800c312:	4013      	ands	r3, r2
 800c314:	60bb      	str	r3, [r7, #8]
 800c316:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_Pin;
 800c318:	2144      	movs	r1, #68	; 0x44
 800c31a:	187b      	adds	r3, r7, r1
 800c31c:	2201      	movs	r2, #1
 800c31e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c320:	187b      	adds	r3, r7, r1
 800c322:	2203      	movs	r2, #3
 800c324:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c326:	187b      	adds	r3, r7, r1
 800c328:	2200      	movs	r2, #0
 800c32a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 800c32c:	187a      	adds	r2, r7, r1
 800c32e:	23a0      	movs	r3, #160	; 0xa0
 800c330:	05db      	lsls	r3, r3, #23
 800c332:	0011      	movs	r1, r2
 800c334:	0018      	movs	r0, r3
 800c336:	f7f8 fa39 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c33a:	46c0      	nop			; (mov r8, r8)
 800c33c:	46bd      	mov	sp, r7
 800c33e:	b017      	add	sp, #92	; 0x5c
 800c340:	bd90      	pop	{r4, r7, pc}
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	40012400 	.word	0x40012400
 800c348:	40021000 	.word	0x40021000

0800c34c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c34c:	b590      	push	{r4, r7, lr}
 800c34e:	b097      	sub	sp, #92	; 0x5c
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c354:	2344      	movs	r3, #68	; 0x44
 800c356:	18fb      	adds	r3, r7, r3
 800c358:	0018      	movs	r0, r3
 800c35a:	2314      	movs	r3, #20
 800c35c:	001a      	movs	r2, r3
 800c35e:	2100      	movs	r1, #0
 800c360:	f000 fa6b 	bl	800c83a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c364:	2410      	movs	r4, #16
 800c366:	193b      	adds	r3, r7, r4
 800c368:	0018      	movs	r0, r3
 800c36a:	2334      	movs	r3, #52	; 0x34
 800c36c:	001a      	movs	r2, r3
 800c36e:	2100      	movs	r1, #0
 800c370:	f000 fa63 	bl	800c83a <memset>
  if(hi2c->Instance==I2C1)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a22      	ldr	r2, [pc, #136]	; (800c404 <HAL_I2C_MspInit+0xb8>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d13e      	bne.n	800c3fc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c37e:	193b      	adds	r3, r7, r4
 800c380:	2220      	movs	r2, #32
 800c382:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c384:	193b      	adds	r3, r7, r4
 800c386:	2200      	movs	r2, #0
 800c388:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c38a:	193b      	adds	r3, r7, r4
 800c38c:	0018      	movs	r0, r3
 800c38e:	f7f9 ff13 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 800c392:	1e03      	subs	r3, r0, #0
 800c394:	d001      	beq.n	800c39a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800c396:	f7fe fd71 	bl	800ae7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c39a:	4b1b      	ldr	r3, [pc, #108]	; (800c408 <HAL_I2C_MspInit+0xbc>)
 800c39c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c39e:	4b1a      	ldr	r3, [pc, #104]	; (800c408 <HAL_I2C_MspInit+0xbc>)
 800c3a0:	2102      	movs	r1, #2
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	635a      	str	r2, [r3, #52]	; 0x34
 800c3a6:	4b18      	ldr	r3, [pc, #96]	; (800c408 <HAL_I2C_MspInit+0xbc>)
 800c3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800c3b2:	2144      	movs	r1, #68	; 0x44
 800c3b4:	187b      	adds	r3, r7, r1
 800c3b6:	22c0      	movs	r2, #192	; 0xc0
 800c3b8:	0092      	lsls	r2, r2, #2
 800c3ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c3bc:	187b      	adds	r3, r7, r1
 800c3be:	2212      	movs	r2, #18
 800c3c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3c2:	187b      	adds	r3, r7, r1
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3c8:	187b      	adds	r3, r7, r1
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800c3ce:	187b      	adds	r3, r7, r1
 800c3d0:	2206      	movs	r2, #6
 800c3d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3d4:	187b      	adds	r3, r7, r1
 800c3d6:	4a0d      	ldr	r2, [pc, #52]	; (800c40c <HAL_I2C_MspInit+0xc0>)
 800c3d8:	0019      	movs	r1, r3
 800c3da:	0010      	movs	r0, r2
 800c3dc:	f7f8 f9e6 	bl	80047ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c3e0:	4b09      	ldr	r3, [pc, #36]	; (800c408 <HAL_I2C_MspInit+0xbc>)
 800c3e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3e4:	4b08      	ldr	r3, [pc, #32]	; (800c408 <HAL_I2C_MspInit+0xbc>)
 800c3e6:	2180      	movs	r1, #128	; 0x80
 800c3e8:	0389      	lsls	r1, r1, #14
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	63da      	str	r2, [r3, #60]	; 0x3c
 800c3ee:	4b06      	ldr	r3, [pc, #24]	; (800c408 <HAL_I2C_MspInit+0xbc>)
 800c3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3f2:	2380      	movs	r3, #128	; 0x80
 800c3f4:	039b      	lsls	r3, r3, #14
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800c3fc:	46c0      	nop			; (mov r8, r8)
 800c3fe:	46bd      	mov	sp, r7
 800c400:	b017      	add	sp, #92	; 0x5c
 800c402:	bd90      	pop	{r4, r7, pc}
 800c404:	40005400 	.word	0x40005400
 800c408:	40021000 	.word	0x40021000
 800c40c:	50000400 	.word	0x50000400

0800c410 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c410:	b590      	push	{r4, r7, lr}
 800c412:	b091      	sub	sp, #68	; 0x44
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c418:	240c      	movs	r4, #12
 800c41a:	193b      	adds	r3, r7, r4
 800c41c:	0018      	movs	r0, r3
 800c41e:	2334      	movs	r3, #52	; 0x34
 800c420:	001a      	movs	r2, r3
 800c422:	2100      	movs	r1, #0
 800c424:	f000 fa09 	bl	800c83a <memset>
  if(hrtc->Instance==RTC)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a15      	ldr	r2, [pc, #84]	; (800c484 <HAL_RTC_MspInit+0x74>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d124      	bne.n	800c47c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c432:	193b      	adds	r3, r7, r4
 800c434:	2280      	movs	r2, #128	; 0x80
 800c436:	0292      	lsls	r2, r2, #10
 800c438:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c43a:	193b      	adds	r3, r7, r4
 800c43c:	2280      	movs	r2, #128	; 0x80
 800c43e:	0052      	lsls	r2, r2, #1
 800c440:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c442:	193b      	adds	r3, r7, r4
 800c444:	0018      	movs	r0, r3
 800c446:	f7f9 feb7 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 800c44a:	1e03      	subs	r3, r0, #0
 800c44c:	d001      	beq.n	800c452 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c44e:	f7fe fd15 	bl	800ae7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c452:	4b0d      	ldr	r3, [pc, #52]	; (800c488 <HAL_RTC_MspInit+0x78>)
 800c454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <HAL_RTC_MspInit+0x78>)
 800c458:	2180      	movs	r1, #128	; 0x80
 800c45a:	0209      	lsls	r1, r1, #8
 800c45c:	430a      	orrs	r2, r1
 800c45e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c460:	4b09      	ldr	r3, [pc, #36]	; (800c488 <HAL_RTC_MspInit+0x78>)
 800c462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c464:	4b08      	ldr	r3, [pc, #32]	; (800c488 <HAL_RTC_MspInit+0x78>)
 800c466:	2180      	movs	r1, #128	; 0x80
 800c468:	00c9      	lsls	r1, r1, #3
 800c46a:	430a      	orrs	r2, r1
 800c46c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <HAL_RTC_MspInit+0x78>)
 800c470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c472:	2380      	movs	r3, #128	; 0x80
 800c474:	00db      	lsls	r3, r3, #3
 800c476:	4013      	ands	r3, r2
 800c478:	60bb      	str	r3, [r7, #8]
 800c47a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c47c:	46c0      	nop			; (mov r8, r8)
 800c47e:	46bd      	mov	sp, r7
 800c480:	b011      	add	sp, #68	; 0x44
 800c482:	bd90      	pop	{r4, r7, pc}
 800c484:	40002800 	.word	0x40002800
 800c488:	40021000 	.word	0x40021000

0800c48c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b093      	sub	sp, #76	; 0x4c
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c494:	2414      	movs	r4, #20
 800c496:	193b      	adds	r3, r7, r4
 800c498:	0018      	movs	r0, r3
 800c49a:	2334      	movs	r3, #52	; 0x34
 800c49c:	001a      	movs	r2, r3
 800c49e:	2100      	movs	r1, #0
 800c4a0:	f000 f9cb 	bl	800c83a <memset>
  if(htim_base->Instance==TIM1)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a34      	ldr	r2, [pc, #208]	; (800c57c <HAL_TIM_Base_MspInit+0xf0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d12d      	bne.n	800c50a <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800c4ae:	193b      	adds	r3, r7, r4
 800c4b0:	2280      	movs	r2, #128	; 0x80
 800c4b2:	0392      	lsls	r2, r2, #14
 800c4b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800c4b6:	193b      	adds	r3, r7, r4
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c4bc:	193b      	adds	r3, r7, r4
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f7f9 fe7a 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 800c4c4:	1e03      	subs	r3, r0, #0
 800c4c6:	d001      	beq.n	800c4cc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800c4c8:	f7fe fcd8 	bl	800ae7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c4cc:	4b2c      	ldr	r3, [pc, #176]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4d0:	4b2b      	ldr	r3, [pc, #172]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c4d2:	2180      	movs	r1, #128	; 0x80
 800c4d4:	0109      	lsls	r1, r1, #4
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	641a      	str	r2, [r3, #64]	; 0x40
 800c4da:	4b29      	ldr	r3, [pc, #164]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c4dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4de:	2380      	movs	r3, #128	; 0x80
 800c4e0:	011b      	lsls	r3, r3, #4
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]
 800c4e6:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	200d      	movs	r0, #13
 800c4ee:	f7f8 f92b 	bl	8004748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800c4f2:	200d      	movs	r0, #13
 800c4f4:	f7f8 f93d 	bl	8004772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	200e      	movs	r0, #14
 800c4fe:	f7f8 f923 	bl	8004748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800c502:	200e      	movs	r0, #14
 800c504:	f7f8 f935 	bl	8004772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800c508:	e033      	b.n	800c572 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	2380      	movs	r3, #128	; 0x80
 800c510:	05db      	lsls	r3, r3, #23
 800c512:	429a      	cmp	r2, r3
 800c514:	d114      	bne.n	800c540 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c516:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c51a:	4b19      	ldr	r3, [pc, #100]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c51c:	2101      	movs	r1, #1
 800c51e:	430a      	orrs	r2, r1
 800c520:	63da      	str	r2, [r3, #60]	; 0x3c
 800c522:	4b17      	ldr	r3, [pc, #92]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c526:	2201      	movs	r2, #1
 800c528:	4013      	ands	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c52e:	2200      	movs	r2, #0
 800c530:	2100      	movs	r1, #0
 800c532:	200f      	movs	r0, #15
 800c534:	f7f8 f908 	bl	8004748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c538:	200f      	movs	r0, #15
 800c53a:	f7f8 f91a 	bl	8004772 <HAL_NVIC_EnableIRQ>
}
 800c53e:	e018      	b.n	800c572 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a0f      	ldr	r2, [pc, #60]	; (800c584 <HAL_TIM_Base_MspInit+0xf8>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d113      	bne.n	800c572 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c54a:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c54c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c54e:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c550:	2102      	movs	r1, #2
 800c552:	430a      	orrs	r2, r1
 800c554:	63da      	str	r2, [r3, #60]	; 0x3c
 800c556:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <HAL_TIM_Base_MspInit+0xf4>)
 800c558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55a:	2202      	movs	r2, #2
 800c55c:	4013      	ands	r3, r2
 800c55e:	60bb      	str	r3, [r7, #8]
 800c560:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c562:	2200      	movs	r2, #0
 800c564:	2100      	movs	r1, #0
 800c566:	2010      	movs	r0, #16
 800c568:	f7f8 f8ee 	bl	8004748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c56c:	2010      	movs	r0, #16
 800c56e:	f7f8 f900 	bl	8004772 <HAL_NVIC_EnableIRQ>
}
 800c572:	46c0      	nop			; (mov r8, r8)
 800c574:	46bd      	mov	sp, r7
 800c576:	b013      	add	sp, #76	; 0x4c
 800c578:	bd90      	pop	{r4, r7, pc}
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	40012c00 	.word	0x40012c00
 800c580:	40021000 	.word	0x40021000
 800c584:	40000400 	.word	0x40000400

0800c588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b097      	sub	sp, #92	; 0x5c
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c590:	2344      	movs	r3, #68	; 0x44
 800c592:	18fb      	adds	r3, r7, r3
 800c594:	0018      	movs	r0, r3
 800c596:	2314      	movs	r3, #20
 800c598:	001a      	movs	r2, r3
 800c59a:	2100      	movs	r1, #0
 800c59c:	f000 f94d 	bl	800c83a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c5a0:	2410      	movs	r4, #16
 800c5a2:	193b      	adds	r3, r7, r4
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	2334      	movs	r3, #52	; 0x34
 800c5a8:	001a      	movs	r2, r3
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f000 f945 	bl	800c83a <memset>
  if(huart->Instance==USART2)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a22      	ldr	r2, [pc, #136]	; (800c640 <HAL_UART_MspInit+0xb8>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d13e      	bne.n	800c638 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c5ba:	193b      	adds	r3, r7, r4
 800c5bc:	2202      	movs	r2, #2
 800c5be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c5c0:	193b      	adds	r3, r7, r4
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c5c6:	193b      	adds	r3, r7, r4
 800c5c8:	0018      	movs	r0, r3
 800c5ca:	f7f9 fdf5 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 800c5ce:	1e03      	subs	r3, r0, #0
 800c5d0:	d001      	beq.n	800c5d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800c5d2:	f7fe fc53 	bl	800ae7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c5d6:	4b1b      	ldr	r3, [pc, #108]	; (800c644 <HAL_UART_MspInit+0xbc>)
 800c5d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5da:	4b1a      	ldr	r3, [pc, #104]	; (800c644 <HAL_UART_MspInit+0xbc>)
 800c5dc:	2180      	movs	r1, #128	; 0x80
 800c5de:	0289      	lsls	r1, r1, #10
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800c5e4:	4b17      	ldr	r3, [pc, #92]	; (800c644 <HAL_UART_MspInit+0xbc>)
 800c5e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5e8:	2380      	movs	r3, #128	; 0x80
 800c5ea:	029b      	lsls	r3, r3, #10
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5f2:	4b14      	ldr	r3, [pc, #80]	; (800c644 <HAL_UART_MspInit+0xbc>)
 800c5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5f6:	4b13      	ldr	r3, [pc, #76]	; (800c644 <HAL_UART_MspInit+0xbc>)
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	635a      	str	r2, [r3, #52]	; 0x34
 800c5fe:	4b11      	ldr	r3, [pc, #68]	; (800c644 <HAL_UART_MspInit+0xbc>)
 800c600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c602:	2201      	movs	r2, #1
 800c604:	4013      	ands	r3, r2
 800c606:	60bb      	str	r3, [r7, #8]
 800c608:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c60a:	2144      	movs	r1, #68	; 0x44
 800c60c:	187b      	adds	r3, r7, r1
 800c60e:	220c      	movs	r2, #12
 800c610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c612:	187b      	adds	r3, r7, r1
 800c614:	2202      	movs	r2, #2
 800c616:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c618:	187b      	adds	r3, r7, r1
 800c61a:	2200      	movs	r2, #0
 800c61c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c61e:	187b      	adds	r3, r7, r1
 800c620:	2200      	movs	r2, #0
 800c622:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800c624:	187b      	adds	r3, r7, r1
 800c626:	2201      	movs	r2, #1
 800c628:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c62a:	187a      	adds	r2, r7, r1
 800c62c:	23a0      	movs	r3, #160	; 0xa0
 800c62e:	05db      	lsls	r3, r3, #23
 800c630:	0011      	movs	r1, r2
 800c632:	0018      	movs	r0, r3
 800c634:	f7f8 f8ba 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800c638:	46c0      	nop			; (mov r8, r8)
 800c63a:	46bd      	mov	sp, r7
 800c63c:	b017      	add	sp, #92	; 0x5c
 800c63e:	bd90      	pop	{r4, r7, pc}
 800c640:	40004400 	.word	0x40004400
 800c644:	40021000 	.word	0x40021000

0800c648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c64c:	e7fe      	b.n	800c64c <NMI_Handler+0x4>

0800c64e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c652:	e7fe      	b.n	800c652 <HardFault_Handler+0x4>

0800c654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c658:	46c0      	nop			; (mov r8, r8)
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c662:	46c0      	nop			; (mov r8, r8)
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c66c:	f7f6 fffc 	bl	8003668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c670:	46c0      	nop			; (mov r8, r8)
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 800c67a:	2008      	movs	r0, #8
 800c67c:	f7f8 fa34 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800c680:	46c0      	nop			; (mov r8, r8)
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800c68a:	2010      	movs	r0, #16
 800c68c:	f7f8 fa2c 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800c690:	2020      	movs	r0, #32
 800c692:	f7f8 fa29 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 800c696:	2040      	movs	r0, #64	; 0x40
 800c698:	f7f8 fa26 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 800c69c:	2080      	movs	r0, #128	; 0x80
 800c69e:	f7f8 fa23 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800c6a2:	46c0      	nop			; (mov r8, r8)
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c6ac:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800c6ae:	0018      	movs	r0, r3
 800c6b0:	f7fa fb8a 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800c6b4:	46c0      	nop			; (mov r8, r8)
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	46c0      	nop			; (mov r8, r8)
 800c6bc:	20000430 	.word	0x20000430

0800c6c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c6c4:	4b03      	ldr	r3, [pc, #12]	; (800c6d4 <TIM1_CC_IRQHandler+0x14>)
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	f7fa fb7e 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800c6cc:	46c0      	nop			; (mov r8, r8)
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	46c0      	nop			; (mov r8, r8)
 800c6d4:	20000430 	.word	0x20000430

0800c6d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800c6dc:	4b03      	ldr	r3, [pc, #12]	; (800c6ec <TIM2_IRQHandler+0x14>)
 800c6de:	0018      	movs	r0, r3
 800c6e0:	f7fa fb72 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800c6e4:	46c0      	nop			; (mov r8, r8)
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	2000047c 	.word	0x2000047c

0800c6f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800c6f4:	4b03      	ldr	r3, [pc, #12]	; (800c704 <TIM3_IRQHandler+0x14>)
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f7fa fb66 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800c6fc:	46c0      	nop			; (mov r8, r8)
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	2000030c 	.word	0x2000030c

0800c708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c710:	4a14      	ldr	r2, [pc, #80]	; (800c764 <_sbrk+0x5c>)
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <_sbrk+0x60>)
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c71c:	4b13      	ldr	r3, [pc, #76]	; (800c76c <_sbrk+0x64>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d102      	bne.n	800c72a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c724:	4b11      	ldr	r3, [pc, #68]	; (800c76c <_sbrk+0x64>)
 800c726:	4a12      	ldr	r2, [pc, #72]	; (800c770 <_sbrk+0x68>)
 800c728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <_sbrk+0x64>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	18d3      	adds	r3, r2, r3
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	429a      	cmp	r2, r3
 800c736:	d207      	bcs.n	800c748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c738:	f000 f84c 	bl	800c7d4 <__errno>
 800c73c:	0003      	movs	r3, r0
 800c73e:	220c      	movs	r2, #12
 800c740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c742:	2301      	movs	r3, #1
 800c744:	425b      	negs	r3, r3
 800c746:	e009      	b.n	800c75c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c748:	4b08      	ldr	r3, [pc, #32]	; (800c76c <_sbrk+0x64>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c74e:	4b07      	ldr	r3, [pc, #28]	; (800c76c <_sbrk+0x64>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	18d2      	adds	r2, r2, r3
 800c756:	4b05      	ldr	r3, [pc, #20]	; (800c76c <_sbrk+0x64>)
 800c758:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c75a:	68fb      	ldr	r3, [r7, #12]
}
 800c75c:	0018      	movs	r0, r3
 800c75e:	46bd      	mov	sp, r7
 800c760:	b006      	add	sp, #24
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20009000 	.word	0x20009000
 800c768:	00000400 	.word	0x00000400
 800c76c:	20000090 	.word	0x20000090
 800c770:	20000568 	.word	0x20000568

0800c774 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c778:	46c0      	nop			; (mov r8, r8)
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c780:	480d      	ldr	r0, [pc, #52]	; (800c7b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c782:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800c784:	f7ff fff6 	bl	800c774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c788:	480c      	ldr	r0, [pc, #48]	; (800c7bc <LoopForever+0x6>)
  ldr r1, =_edata
 800c78a:	490d      	ldr	r1, [pc, #52]	; (800c7c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c78c:	4a0d      	ldr	r2, [pc, #52]	; (800c7c4 <LoopForever+0xe>)
  movs r3, #0
 800c78e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c790:	e002      	b.n	800c798 <LoopCopyDataInit>

0800c792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c796:	3304      	adds	r3, #4

0800c798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c79a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c79c:	d3f9      	bcc.n	800c792 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c79e:	4a0a      	ldr	r2, [pc, #40]	; (800c7c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c7a0:	4c0a      	ldr	r4, [pc, #40]	; (800c7cc <LoopForever+0x16>)
  movs r3, #0
 800c7a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c7a4:	e001      	b.n	800c7aa <LoopFillZerobss>

0800c7a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c7a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c7a8:	3204      	adds	r2, #4

0800c7aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c7aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c7ac:	d3fb      	bcc.n	800c7a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c7ae:	f000 f817 	bl	800c7e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800c7b2:	f7fd fd8f 	bl	800a2d4 <main>

0800c7b6 <LoopForever>:

LoopForever:
  b LoopForever
 800c7b6:	e7fe      	b.n	800c7b6 <LoopForever>
  ldr   r0, =_estack
 800c7b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800c7bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c7c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800c7c4:	0800d890 	.word	0x0800d890
  ldr r2, =_sbss
 800c7c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800c7cc:	20000568 	.word	0x20000568

0800c7d0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c7d0:	e7fe      	b.n	800c7d0 <ADC1_COMP_IRQHandler>
	...

0800c7d4 <__errno>:
 800c7d4:	4b01      	ldr	r3, [pc, #4]	; (800c7dc <__errno+0x8>)
 800c7d6:	6818      	ldr	r0, [r3, #0]
 800c7d8:	4770      	bx	lr
 800c7da:	46c0      	nop			; (mov r8, r8)
 800c7dc:	2000000c 	.word	0x2000000c

0800c7e0 <__libc_init_array>:
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	4d0c      	ldr	r5, [pc, #48]	; (800c818 <__libc_init_array+0x38>)
 800c7e6:	4c0d      	ldr	r4, [pc, #52]	; (800c81c <__libc_init_array+0x3c>)
 800c7e8:	1b64      	subs	r4, r4, r5
 800c7ea:	10a4      	asrs	r4, r4, #2
 800c7ec:	42a6      	cmp	r6, r4
 800c7ee:	d109      	bne.n	800c804 <__libc_init_array+0x24>
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	f000 fe3b 	bl	800d46c <_init>
 800c7f6:	4d0a      	ldr	r5, [pc, #40]	; (800c820 <__libc_init_array+0x40>)
 800c7f8:	4c0a      	ldr	r4, [pc, #40]	; (800c824 <__libc_init_array+0x44>)
 800c7fa:	1b64      	subs	r4, r4, r5
 800c7fc:	10a4      	asrs	r4, r4, #2
 800c7fe:	42a6      	cmp	r6, r4
 800c800:	d105      	bne.n	800c80e <__libc_init_array+0x2e>
 800c802:	bd70      	pop	{r4, r5, r6, pc}
 800c804:	00b3      	lsls	r3, r6, #2
 800c806:	58eb      	ldr	r3, [r5, r3]
 800c808:	4798      	blx	r3
 800c80a:	3601      	adds	r6, #1
 800c80c:	e7ee      	b.n	800c7ec <__libc_init_array+0xc>
 800c80e:	00b3      	lsls	r3, r6, #2
 800c810:	58eb      	ldr	r3, [r5, r3]
 800c812:	4798      	blx	r3
 800c814:	3601      	adds	r6, #1
 800c816:	e7f2      	b.n	800c7fe <__libc_init_array+0x1e>
 800c818:	0800d888 	.word	0x0800d888
 800c81c:	0800d888 	.word	0x0800d888
 800c820:	0800d888 	.word	0x0800d888
 800c824:	0800d88c 	.word	0x0800d88c

0800c828 <memcpy>:
 800c828:	2300      	movs	r3, #0
 800c82a:	b510      	push	{r4, lr}
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d100      	bne.n	800c832 <memcpy+0xa>
 800c830:	bd10      	pop	{r4, pc}
 800c832:	5ccc      	ldrb	r4, [r1, r3]
 800c834:	54c4      	strb	r4, [r0, r3]
 800c836:	3301      	adds	r3, #1
 800c838:	e7f8      	b.n	800c82c <memcpy+0x4>

0800c83a <memset>:
 800c83a:	0003      	movs	r3, r0
 800c83c:	1882      	adds	r2, r0, r2
 800c83e:	4293      	cmp	r3, r2
 800c840:	d100      	bne.n	800c844 <memset+0xa>
 800c842:	4770      	bx	lr
 800c844:	7019      	strb	r1, [r3, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	e7f9      	b.n	800c83e <memset+0x4>
	...

0800c84c <siprintf>:
 800c84c:	b40e      	push	{r1, r2, r3}
 800c84e:	b500      	push	{lr}
 800c850:	490b      	ldr	r1, [pc, #44]	; (800c880 <siprintf+0x34>)
 800c852:	b09c      	sub	sp, #112	; 0x70
 800c854:	ab1d      	add	r3, sp, #116	; 0x74
 800c856:	9002      	str	r0, [sp, #8]
 800c858:	9006      	str	r0, [sp, #24]
 800c85a:	9107      	str	r1, [sp, #28]
 800c85c:	9104      	str	r1, [sp, #16]
 800c85e:	4809      	ldr	r0, [pc, #36]	; (800c884 <siprintf+0x38>)
 800c860:	4909      	ldr	r1, [pc, #36]	; (800c888 <siprintf+0x3c>)
 800c862:	cb04      	ldmia	r3!, {r2}
 800c864:	9105      	str	r1, [sp, #20]
 800c866:	6800      	ldr	r0, [r0, #0]
 800c868:	a902      	add	r1, sp, #8
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	f000 f870 	bl	800c950 <_svfiprintf_r>
 800c870:	2300      	movs	r3, #0
 800c872:	9a02      	ldr	r2, [sp, #8]
 800c874:	7013      	strb	r3, [r2, #0]
 800c876:	b01c      	add	sp, #112	; 0x70
 800c878:	bc08      	pop	{r3}
 800c87a:	b003      	add	sp, #12
 800c87c:	4718      	bx	r3
 800c87e:	46c0      	nop			; (mov r8, r8)
 800c880:	7fffffff 	.word	0x7fffffff
 800c884:	2000000c 	.word	0x2000000c
 800c888:	ffff0208 	.word	0xffff0208

0800c88c <__ssputs_r>:
 800c88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c88e:	688e      	ldr	r6, [r1, #8]
 800c890:	b085      	sub	sp, #20
 800c892:	0007      	movs	r7, r0
 800c894:	000c      	movs	r4, r1
 800c896:	9203      	str	r2, [sp, #12]
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	429e      	cmp	r6, r3
 800c89c:	d83c      	bhi.n	800c918 <__ssputs_r+0x8c>
 800c89e:	2390      	movs	r3, #144	; 0x90
 800c8a0:	898a      	ldrh	r2, [r1, #12]
 800c8a2:	00db      	lsls	r3, r3, #3
 800c8a4:	421a      	tst	r2, r3
 800c8a6:	d034      	beq.n	800c912 <__ssputs_r+0x86>
 800c8a8:	2503      	movs	r5, #3
 800c8aa:	6909      	ldr	r1, [r1, #16]
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	1a5b      	subs	r3, r3, r1
 800c8b0:	9302      	str	r3, [sp, #8]
 800c8b2:	6963      	ldr	r3, [r4, #20]
 800c8b4:	9802      	ldr	r0, [sp, #8]
 800c8b6:	435d      	muls	r5, r3
 800c8b8:	0feb      	lsrs	r3, r5, #31
 800c8ba:	195d      	adds	r5, r3, r5
 800c8bc:	9b01      	ldr	r3, [sp, #4]
 800c8be:	106d      	asrs	r5, r5, #1
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	181b      	adds	r3, r3, r0
 800c8c4:	42ab      	cmp	r3, r5
 800c8c6:	d900      	bls.n	800c8ca <__ssputs_r+0x3e>
 800c8c8:	001d      	movs	r5, r3
 800c8ca:	0553      	lsls	r3, r2, #21
 800c8cc:	d532      	bpl.n	800c934 <__ssputs_r+0xa8>
 800c8ce:	0029      	movs	r1, r5
 800c8d0:	0038      	movs	r0, r7
 800c8d2:	f000 fb27 	bl	800cf24 <_malloc_r>
 800c8d6:	1e06      	subs	r6, r0, #0
 800c8d8:	d109      	bne.n	800c8ee <__ssputs_r+0x62>
 800c8da:	230c      	movs	r3, #12
 800c8dc:	603b      	str	r3, [r7, #0]
 800c8de:	2340      	movs	r3, #64	; 0x40
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	89a2      	ldrh	r2, [r4, #12]
 800c8e4:	4240      	negs	r0, r0
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	81a3      	strh	r3, [r4, #12]
 800c8ea:	b005      	add	sp, #20
 800c8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ee:	9a02      	ldr	r2, [sp, #8]
 800c8f0:	6921      	ldr	r1, [r4, #16]
 800c8f2:	f7ff ff99 	bl	800c828 <memcpy>
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	4a14      	ldr	r2, [pc, #80]	; (800c94c <__ssputs_r+0xc0>)
 800c8fa:	401a      	ands	r2, r3
 800c8fc:	2380      	movs	r3, #128	; 0x80
 800c8fe:	4313      	orrs	r3, r2
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	9b02      	ldr	r3, [sp, #8]
 800c904:	6126      	str	r6, [r4, #16]
 800c906:	18f6      	adds	r6, r6, r3
 800c908:	6026      	str	r6, [r4, #0]
 800c90a:	6165      	str	r5, [r4, #20]
 800c90c:	9e01      	ldr	r6, [sp, #4]
 800c90e:	1aed      	subs	r5, r5, r3
 800c910:	60a5      	str	r5, [r4, #8]
 800c912:	9b01      	ldr	r3, [sp, #4]
 800c914:	429e      	cmp	r6, r3
 800c916:	d900      	bls.n	800c91a <__ssputs_r+0x8e>
 800c918:	9e01      	ldr	r6, [sp, #4]
 800c91a:	0032      	movs	r2, r6
 800c91c:	9903      	ldr	r1, [sp, #12]
 800c91e:	6820      	ldr	r0, [r4, #0]
 800c920:	f000 faa3 	bl	800ce6a <memmove>
 800c924:	68a3      	ldr	r3, [r4, #8]
 800c926:	2000      	movs	r0, #0
 800c928:	1b9b      	subs	r3, r3, r6
 800c92a:	60a3      	str	r3, [r4, #8]
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	199e      	adds	r6, r3, r6
 800c930:	6026      	str	r6, [r4, #0]
 800c932:	e7da      	b.n	800c8ea <__ssputs_r+0x5e>
 800c934:	002a      	movs	r2, r5
 800c936:	0038      	movs	r0, r7
 800c938:	f000 fb52 	bl	800cfe0 <_realloc_r>
 800c93c:	1e06      	subs	r6, r0, #0
 800c93e:	d1e0      	bne.n	800c902 <__ssputs_r+0x76>
 800c940:	0038      	movs	r0, r7
 800c942:	6921      	ldr	r1, [r4, #16]
 800c944:	f000 faa4 	bl	800ce90 <_free_r>
 800c948:	e7c7      	b.n	800c8da <__ssputs_r+0x4e>
 800c94a:	46c0      	nop			; (mov r8, r8)
 800c94c:	fffffb7f 	.word	0xfffffb7f

0800c950 <_svfiprintf_r>:
 800c950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c952:	b0a1      	sub	sp, #132	; 0x84
 800c954:	9003      	str	r0, [sp, #12]
 800c956:	001d      	movs	r5, r3
 800c958:	898b      	ldrh	r3, [r1, #12]
 800c95a:	000f      	movs	r7, r1
 800c95c:	0016      	movs	r6, r2
 800c95e:	061b      	lsls	r3, r3, #24
 800c960:	d511      	bpl.n	800c986 <_svfiprintf_r+0x36>
 800c962:	690b      	ldr	r3, [r1, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10e      	bne.n	800c986 <_svfiprintf_r+0x36>
 800c968:	2140      	movs	r1, #64	; 0x40
 800c96a:	f000 fadb 	bl	800cf24 <_malloc_r>
 800c96e:	6038      	str	r0, [r7, #0]
 800c970:	6138      	str	r0, [r7, #16]
 800c972:	2800      	cmp	r0, #0
 800c974:	d105      	bne.n	800c982 <_svfiprintf_r+0x32>
 800c976:	230c      	movs	r3, #12
 800c978:	9a03      	ldr	r2, [sp, #12]
 800c97a:	3801      	subs	r0, #1
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	b021      	add	sp, #132	; 0x84
 800c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	617b      	str	r3, [r7, #20]
 800c986:	2300      	movs	r3, #0
 800c988:	ac08      	add	r4, sp, #32
 800c98a:	6163      	str	r3, [r4, #20]
 800c98c:	3320      	adds	r3, #32
 800c98e:	7663      	strb	r3, [r4, #25]
 800c990:	3310      	adds	r3, #16
 800c992:	76a3      	strb	r3, [r4, #26]
 800c994:	9507      	str	r5, [sp, #28]
 800c996:	0035      	movs	r5, r6
 800c998:	782b      	ldrb	r3, [r5, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <_svfiprintf_r+0x52>
 800c99e:	2b25      	cmp	r3, #37	; 0x25
 800c9a0:	d147      	bne.n	800ca32 <_svfiprintf_r+0xe2>
 800c9a2:	1bab      	subs	r3, r5, r6
 800c9a4:	9305      	str	r3, [sp, #20]
 800c9a6:	42b5      	cmp	r5, r6
 800c9a8:	d00c      	beq.n	800c9c4 <_svfiprintf_r+0x74>
 800c9aa:	0032      	movs	r2, r6
 800c9ac:	0039      	movs	r1, r7
 800c9ae:	9803      	ldr	r0, [sp, #12]
 800c9b0:	f7ff ff6c 	bl	800c88c <__ssputs_r>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d100      	bne.n	800c9ba <_svfiprintf_r+0x6a>
 800c9b8:	e0ae      	b.n	800cb18 <_svfiprintf_r+0x1c8>
 800c9ba:	6962      	ldr	r2, [r4, #20]
 800c9bc:	9b05      	ldr	r3, [sp, #20]
 800c9be:	4694      	mov	ip, r2
 800c9c0:	4463      	add	r3, ip
 800c9c2:	6163      	str	r3, [r4, #20]
 800c9c4:	782b      	ldrb	r3, [r5, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d100      	bne.n	800c9cc <_svfiprintf_r+0x7c>
 800c9ca:	e0a5      	b.n	800cb18 <_svfiprintf_r+0x1c8>
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	4252      	negs	r2, r2
 800c9d2:	6062      	str	r2, [r4, #4]
 800c9d4:	a904      	add	r1, sp, #16
 800c9d6:	3254      	adds	r2, #84	; 0x54
 800c9d8:	1852      	adds	r2, r2, r1
 800c9da:	1c6e      	adds	r6, r5, #1
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	60e3      	str	r3, [r4, #12]
 800c9e0:	60a3      	str	r3, [r4, #8]
 800c9e2:	7013      	strb	r3, [r2, #0]
 800c9e4:	65a3      	str	r3, [r4, #88]	; 0x58
 800c9e6:	2205      	movs	r2, #5
 800c9e8:	7831      	ldrb	r1, [r6, #0]
 800c9ea:	4854      	ldr	r0, [pc, #336]	; (800cb3c <_svfiprintf_r+0x1ec>)
 800c9ec:	f000 fa32 	bl	800ce54 <memchr>
 800c9f0:	1c75      	adds	r5, r6, #1
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d11f      	bne.n	800ca36 <_svfiprintf_r+0xe6>
 800c9f6:	6822      	ldr	r2, [r4, #0]
 800c9f8:	06d3      	lsls	r3, r2, #27
 800c9fa:	d504      	bpl.n	800ca06 <_svfiprintf_r+0xb6>
 800c9fc:	2353      	movs	r3, #83	; 0x53
 800c9fe:	a904      	add	r1, sp, #16
 800ca00:	185b      	adds	r3, r3, r1
 800ca02:	2120      	movs	r1, #32
 800ca04:	7019      	strb	r1, [r3, #0]
 800ca06:	0713      	lsls	r3, r2, #28
 800ca08:	d504      	bpl.n	800ca14 <_svfiprintf_r+0xc4>
 800ca0a:	2353      	movs	r3, #83	; 0x53
 800ca0c:	a904      	add	r1, sp, #16
 800ca0e:	185b      	adds	r3, r3, r1
 800ca10:	212b      	movs	r1, #43	; 0x2b
 800ca12:	7019      	strb	r1, [r3, #0]
 800ca14:	7833      	ldrb	r3, [r6, #0]
 800ca16:	2b2a      	cmp	r3, #42	; 0x2a
 800ca18:	d016      	beq.n	800ca48 <_svfiprintf_r+0xf8>
 800ca1a:	0035      	movs	r5, r6
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	200a      	movs	r0, #10
 800ca20:	68e3      	ldr	r3, [r4, #12]
 800ca22:	782a      	ldrb	r2, [r5, #0]
 800ca24:	1c6e      	adds	r6, r5, #1
 800ca26:	3a30      	subs	r2, #48	; 0x30
 800ca28:	2a09      	cmp	r2, #9
 800ca2a:	d94e      	bls.n	800caca <_svfiprintf_r+0x17a>
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d111      	bne.n	800ca54 <_svfiprintf_r+0x104>
 800ca30:	e017      	b.n	800ca62 <_svfiprintf_r+0x112>
 800ca32:	3501      	adds	r5, #1
 800ca34:	e7b0      	b.n	800c998 <_svfiprintf_r+0x48>
 800ca36:	4b41      	ldr	r3, [pc, #260]	; (800cb3c <_svfiprintf_r+0x1ec>)
 800ca38:	6822      	ldr	r2, [r4, #0]
 800ca3a:	1ac0      	subs	r0, r0, r3
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4083      	lsls	r3, r0
 800ca40:	4313      	orrs	r3, r2
 800ca42:	002e      	movs	r6, r5
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	e7ce      	b.n	800c9e6 <_svfiprintf_r+0x96>
 800ca48:	9b07      	ldr	r3, [sp, #28]
 800ca4a:	1d19      	adds	r1, r3, #4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	9107      	str	r1, [sp, #28]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	db01      	blt.n	800ca58 <_svfiprintf_r+0x108>
 800ca54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca56:	e004      	b.n	800ca62 <_svfiprintf_r+0x112>
 800ca58:	425b      	negs	r3, r3
 800ca5a:	60e3      	str	r3, [r4, #12]
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	782b      	ldrb	r3, [r5, #0]
 800ca64:	2b2e      	cmp	r3, #46	; 0x2e
 800ca66:	d10a      	bne.n	800ca7e <_svfiprintf_r+0x12e>
 800ca68:	786b      	ldrb	r3, [r5, #1]
 800ca6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6c:	d135      	bne.n	800cada <_svfiprintf_r+0x18a>
 800ca6e:	9b07      	ldr	r3, [sp, #28]
 800ca70:	3502      	adds	r5, #2
 800ca72:	1d1a      	adds	r2, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	9207      	str	r2, [sp, #28]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	db2b      	blt.n	800cad4 <_svfiprintf_r+0x184>
 800ca7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca7e:	4e30      	ldr	r6, [pc, #192]	; (800cb40 <_svfiprintf_r+0x1f0>)
 800ca80:	2203      	movs	r2, #3
 800ca82:	0030      	movs	r0, r6
 800ca84:	7829      	ldrb	r1, [r5, #0]
 800ca86:	f000 f9e5 	bl	800ce54 <memchr>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d006      	beq.n	800ca9c <_svfiprintf_r+0x14c>
 800ca8e:	2340      	movs	r3, #64	; 0x40
 800ca90:	1b80      	subs	r0, r0, r6
 800ca92:	4083      	lsls	r3, r0
 800ca94:	6822      	ldr	r2, [r4, #0]
 800ca96:	3501      	adds	r5, #1
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	7829      	ldrb	r1, [r5, #0]
 800ca9e:	2206      	movs	r2, #6
 800caa0:	4828      	ldr	r0, [pc, #160]	; (800cb44 <_svfiprintf_r+0x1f4>)
 800caa2:	1c6e      	adds	r6, r5, #1
 800caa4:	7621      	strb	r1, [r4, #24]
 800caa6:	f000 f9d5 	bl	800ce54 <memchr>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d03c      	beq.n	800cb28 <_svfiprintf_r+0x1d8>
 800caae:	4b26      	ldr	r3, [pc, #152]	; (800cb48 <_svfiprintf_r+0x1f8>)
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d125      	bne.n	800cb00 <_svfiprintf_r+0x1b0>
 800cab4:	2207      	movs	r2, #7
 800cab6:	9b07      	ldr	r3, [sp, #28]
 800cab8:	3307      	adds	r3, #7
 800caba:	4393      	bics	r3, r2
 800cabc:	3308      	adds	r3, #8
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	6963      	ldr	r3, [r4, #20]
 800cac2:	9a04      	ldr	r2, [sp, #16]
 800cac4:	189b      	adds	r3, r3, r2
 800cac6:	6163      	str	r3, [r4, #20]
 800cac8:	e765      	b.n	800c996 <_svfiprintf_r+0x46>
 800caca:	4343      	muls	r3, r0
 800cacc:	0035      	movs	r5, r6
 800cace:	2101      	movs	r1, #1
 800cad0:	189b      	adds	r3, r3, r2
 800cad2:	e7a6      	b.n	800ca22 <_svfiprintf_r+0xd2>
 800cad4:	2301      	movs	r3, #1
 800cad6:	425b      	negs	r3, r3
 800cad8:	e7d0      	b.n	800ca7c <_svfiprintf_r+0x12c>
 800cada:	2300      	movs	r3, #0
 800cadc:	200a      	movs	r0, #10
 800cade:	001a      	movs	r2, r3
 800cae0:	3501      	adds	r5, #1
 800cae2:	6063      	str	r3, [r4, #4]
 800cae4:	7829      	ldrb	r1, [r5, #0]
 800cae6:	1c6e      	adds	r6, r5, #1
 800cae8:	3930      	subs	r1, #48	; 0x30
 800caea:	2909      	cmp	r1, #9
 800caec:	d903      	bls.n	800caf6 <_svfiprintf_r+0x1a6>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0c5      	beq.n	800ca7e <_svfiprintf_r+0x12e>
 800caf2:	9209      	str	r2, [sp, #36]	; 0x24
 800caf4:	e7c3      	b.n	800ca7e <_svfiprintf_r+0x12e>
 800caf6:	4342      	muls	r2, r0
 800caf8:	0035      	movs	r5, r6
 800cafa:	2301      	movs	r3, #1
 800cafc:	1852      	adds	r2, r2, r1
 800cafe:	e7f1      	b.n	800cae4 <_svfiprintf_r+0x194>
 800cb00:	ab07      	add	r3, sp, #28
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	003a      	movs	r2, r7
 800cb06:	0021      	movs	r1, r4
 800cb08:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <_svfiprintf_r+0x1fc>)
 800cb0a:	9803      	ldr	r0, [sp, #12]
 800cb0c:	e000      	b.n	800cb10 <_svfiprintf_r+0x1c0>
 800cb0e:	bf00      	nop
 800cb10:	9004      	str	r0, [sp, #16]
 800cb12:	9b04      	ldr	r3, [sp, #16]
 800cb14:	3301      	adds	r3, #1
 800cb16:	d1d3      	bne.n	800cac0 <_svfiprintf_r+0x170>
 800cb18:	89bb      	ldrh	r3, [r7, #12]
 800cb1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb1c:	065b      	lsls	r3, r3, #25
 800cb1e:	d400      	bmi.n	800cb22 <_svfiprintf_r+0x1d2>
 800cb20:	e72d      	b.n	800c97e <_svfiprintf_r+0x2e>
 800cb22:	2001      	movs	r0, #1
 800cb24:	4240      	negs	r0, r0
 800cb26:	e72a      	b.n	800c97e <_svfiprintf_r+0x2e>
 800cb28:	ab07      	add	r3, sp, #28
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	003a      	movs	r2, r7
 800cb2e:	0021      	movs	r1, r4
 800cb30:	4b06      	ldr	r3, [pc, #24]	; (800cb4c <_svfiprintf_r+0x1fc>)
 800cb32:	9803      	ldr	r0, [sp, #12]
 800cb34:	f000 f87c 	bl	800cc30 <_printf_i>
 800cb38:	e7ea      	b.n	800cb10 <_svfiprintf_r+0x1c0>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	0800d84c 	.word	0x0800d84c
 800cb40:	0800d852 	.word	0x0800d852
 800cb44:	0800d856 	.word	0x0800d856
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	0800c88d 	.word	0x0800c88d

0800cb50 <_printf_common>:
 800cb50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb52:	0015      	movs	r5, r2
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	688a      	ldr	r2, [r1, #8]
 800cb58:	690b      	ldr	r3, [r1, #16]
 800cb5a:	000c      	movs	r4, r1
 800cb5c:	9000      	str	r0, [sp, #0]
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	da00      	bge.n	800cb64 <_printf_common+0x14>
 800cb62:	0013      	movs	r3, r2
 800cb64:	0022      	movs	r2, r4
 800cb66:	602b      	str	r3, [r5, #0]
 800cb68:	3243      	adds	r2, #67	; 0x43
 800cb6a:	7812      	ldrb	r2, [r2, #0]
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d001      	beq.n	800cb74 <_printf_common+0x24>
 800cb70:	3301      	adds	r3, #1
 800cb72:	602b      	str	r3, [r5, #0]
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	069b      	lsls	r3, r3, #26
 800cb78:	d502      	bpl.n	800cb80 <_printf_common+0x30>
 800cb7a:	682b      	ldr	r3, [r5, #0]
 800cb7c:	3302      	adds	r3, #2
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	6822      	ldr	r2, [r4, #0]
 800cb82:	2306      	movs	r3, #6
 800cb84:	0017      	movs	r7, r2
 800cb86:	401f      	ands	r7, r3
 800cb88:	421a      	tst	r2, r3
 800cb8a:	d027      	beq.n	800cbdc <_printf_common+0x8c>
 800cb8c:	0023      	movs	r3, r4
 800cb8e:	3343      	adds	r3, #67	; 0x43
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	1e5a      	subs	r2, r3, #1
 800cb94:	4193      	sbcs	r3, r2
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	0692      	lsls	r2, r2, #26
 800cb9a:	d430      	bmi.n	800cbfe <_printf_common+0xae>
 800cb9c:	0022      	movs	r2, r4
 800cb9e:	9901      	ldr	r1, [sp, #4]
 800cba0:	9800      	ldr	r0, [sp, #0]
 800cba2:	9e08      	ldr	r6, [sp, #32]
 800cba4:	3243      	adds	r2, #67	; 0x43
 800cba6:	47b0      	blx	r6
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d025      	beq.n	800cbf8 <_printf_common+0xa8>
 800cbac:	2306      	movs	r3, #6
 800cbae:	6820      	ldr	r0, [r4, #0]
 800cbb0:	682a      	ldr	r2, [r5, #0]
 800cbb2:	68e1      	ldr	r1, [r4, #12]
 800cbb4:	2500      	movs	r5, #0
 800cbb6:	4003      	ands	r3, r0
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	d103      	bne.n	800cbc4 <_printf_common+0x74>
 800cbbc:	1a8d      	subs	r5, r1, r2
 800cbbe:	43eb      	mvns	r3, r5
 800cbc0:	17db      	asrs	r3, r3, #31
 800cbc2:	401d      	ands	r5, r3
 800cbc4:	68a3      	ldr	r3, [r4, #8]
 800cbc6:	6922      	ldr	r2, [r4, #16]
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	dd01      	ble.n	800cbd0 <_printf_common+0x80>
 800cbcc:	1a9b      	subs	r3, r3, r2
 800cbce:	18ed      	adds	r5, r5, r3
 800cbd0:	2700      	movs	r7, #0
 800cbd2:	42bd      	cmp	r5, r7
 800cbd4:	d120      	bne.n	800cc18 <_printf_common+0xc8>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e010      	b.n	800cbfc <_printf_common+0xac>
 800cbda:	3701      	adds	r7, #1
 800cbdc:	68e3      	ldr	r3, [r4, #12]
 800cbde:	682a      	ldr	r2, [r5, #0]
 800cbe0:	1a9b      	subs	r3, r3, r2
 800cbe2:	42bb      	cmp	r3, r7
 800cbe4:	ddd2      	ble.n	800cb8c <_printf_common+0x3c>
 800cbe6:	0022      	movs	r2, r4
 800cbe8:	2301      	movs	r3, #1
 800cbea:	9901      	ldr	r1, [sp, #4]
 800cbec:	9800      	ldr	r0, [sp, #0]
 800cbee:	9e08      	ldr	r6, [sp, #32]
 800cbf0:	3219      	adds	r2, #25
 800cbf2:	47b0      	blx	r6
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d1f0      	bne.n	800cbda <_printf_common+0x8a>
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	4240      	negs	r0, r0
 800cbfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbfe:	2030      	movs	r0, #48	; 0x30
 800cc00:	18e1      	adds	r1, r4, r3
 800cc02:	3143      	adds	r1, #67	; 0x43
 800cc04:	7008      	strb	r0, [r1, #0]
 800cc06:	0021      	movs	r1, r4
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	3145      	adds	r1, #69	; 0x45
 800cc0c:	7809      	ldrb	r1, [r1, #0]
 800cc0e:	18a2      	adds	r2, r4, r2
 800cc10:	3243      	adds	r2, #67	; 0x43
 800cc12:	3302      	adds	r3, #2
 800cc14:	7011      	strb	r1, [r2, #0]
 800cc16:	e7c1      	b.n	800cb9c <_printf_common+0x4c>
 800cc18:	0022      	movs	r2, r4
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	9901      	ldr	r1, [sp, #4]
 800cc1e:	9800      	ldr	r0, [sp, #0]
 800cc20:	9e08      	ldr	r6, [sp, #32]
 800cc22:	321a      	adds	r2, #26
 800cc24:	47b0      	blx	r6
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	d0e6      	beq.n	800cbf8 <_printf_common+0xa8>
 800cc2a:	3701      	adds	r7, #1
 800cc2c:	e7d1      	b.n	800cbd2 <_printf_common+0x82>
	...

0800cc30 <_printf_i>:
 800cc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc32:	b08b      	sub	sp, #44	; 0x2c
 800cc34:	9206      	str	r2, [sp, #24]
 800cc36:	000a      	movs	r2, r1
 800cc38:	3243      	adds	r2, #67	; 0x43
 800cc3a:	9307      	str	r3, [sp, #28]
 800cc3c:	9005      	str	r0, [sp, #20]
 800cc3e:	9204      	str	r2, [sp, #16]
 800cc40:	7e0a      	ldrb	r2, [r1, #24]
 800cc42:	000c      	movs	r4, r1
 800cc44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc46:	2a78      	cmp	r2, #120	; 0x78
 800cc48:	d806      	bhi.n	800cc58 <_printf_i+0x28>
 800cc4a:	2a62      	cmp	r2, #98	; 0x62
 800cc4c:	d808      	bhi.n	800cc60 <_printf_i+0x30>
 800cc4e:	2a00      	cmp	r2, #0
 800cc50:	d100      	bne.n	800cc54 <_printf_i+0x24>
 800cc52:	e0c0      	b.n	800cdd6 <_printf_i+0x1a6>
 800cc54:	2a58      	cmp	r2, #88	; 0x58
 800cc56:	d052      	beq.n	800ccfe <_printf_i+0xce>
 800cc58:	0026      	movs	r6, r4
 800cc5a:	3642      	adds	r6, #66	; 0x42
 800cc5c:	7032      	strb	r2, [r6, #0]
 800cc5e:	e022      	b.n	800cca6 <_printf_i+0x76>
 800cc60:	0010      	movs	r0, r2
 800cc62:	3863      	subs	r0, #99	; 0x63
 800cc64:	2815      	cmp	r0, #21
 800cc66:	d8f7      	bhi.n	800cc58 <_printf_i+0x28>
 800cc68:	f7f3 fa4c 	bl	8000104 <__gnu_thumb1_case_shi>
 800cc6c:	001f0016 	.word	0x001f0016
 800cc70:	fff6fff6 	.word	0xfff6fff6
 800cc74:	fff6fff6 	.word	0xfff6fff6
 800cc78:	fff6001f 	.word	0xfff6001f
 800cc7c:	fff6fff6 	.word	0xfff6fff6
 800cc80:	00a8fff6 	.word	0x00a8fff6
 800cc84:	009a0036 	.word	0x009a0036
 800cc88:	fff6fff6 	.word	0xfff6fff6
 800cc8c:	fff600b9 	.word	0xfff600b9
 800cc90:	fff60036 	.word	0xfff60036
 800cc94:	009efff6 	.word	0x009efff6
 800cc98:	0026      	movs	r6, r4
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	3642      	adds	r6, #66	; 0x42
 800cc9e:	1d11      	adds	r1, r2, #4
 800cca0:	6019      	str	r1, [r3, #0]
 800cca2:	6813      	ldr	r3, [r2, #0]
 800cca4:	7033      	strb	r3, [r6, #0]
 800cca6:	2301      	movs	r3, #1
 800cca8:	e0a7      	b.n	800cdfa <_printf_i+0x1ca>
 800ccaa:	6808      	ldr	r0, [r1, #0]
 800ccac:	6819      	ldr	r1, [r3, #0]
 800ccae:	1d0a      	adds	r2, r1, #4
 800ccb0:	0605      	lsls	r5, r0, #24
 800ccb2:	d50b      	bpl.n	800cccc <_printf_i+0x9c>
 800ccb4:	680d      	ldr	r5, [r1, #0]
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	2d00      	cmp	r5, #0
 800ccba:	da03      	bge.n	800ccc4 <_printf_i+0x94>
 800ccbc:	232d      	movs	r3, #45	; 0x2d
 800ccbe:	9a04      	ldr	r2, [sp, #16]
 800ccc0:	426d      	negs	r5, r5
 800ccc2:	7013      	strb	r3, [r2, #0]
 800ccc4:	4b61      	ldr	r3, [pc, #388]	; (800ce4c <_printf_i+0x21c>)
 800ccc6:	270a      	movs	r7, #10
 800ccc8:	9303      	str	r3, [sp, #12]
 800ccca:	e032      	b.n	800cd32 <_printf_i+0x102>
 800cccc:	680d      	ldr	r5, [r1, #0]
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	0641      	lsls	r1, r0, #25
 800ccd2:	d5f1      	bpl.n	800ccb8 <_printf_i+0x88>
 800ccd4:	b22d      	sxth	r5, r5
 800ccd6:	e7ef      	b.n	800ccb8 <_printf_i+0x88>
 800ccd8:	680d      	ldr	r5, [r1, #0]
 800ccda:	6819      	ldr	r1, [r3, #0]
 800ccdc:	1d08      	adds	r0, r1, #4
 800ccde:	6018      	str	r0, [r3, #0]
 800cce0:	062e      	lsls	r6, r5, #24
 800cce2:	d501      	bpl.n	800cce8 <_printf_i+0xb8>
 800cce4:	680d      	ldr	r5, [r1, #0]
 800cce6:	e003      	b.n	800ccf0 <_printf_i+0xc0>
 800cce8:	066d      	lsls	r5, r5, #25
 800ccea:	d5fb      	bpl.n	800cce4 <_printf_i+0xb4>
 800ccec:	680d      	ldr	r5, [r1, #0]
 800ccee:	b2ad      	uxth	r5, r5
 800ccf0:	4b56      	ldr	r3, [pc, #344]	; (800ce4c <_printf_i+0x21c>)
 800ccf2:	270a      	movs	r7, #10
 800ccf4:	9303      	str	r3, [sp, #12]
 800ccf6:	2a6f      	cmp	r2, #111	; 0x6f
 800ccf8:	d117      	bne.n	800cd2a <_printf_i+0xfa>
 800ccfa:	2708      	movs	r7, #8
 800ccfc:	e015      	b.n	800cd2a <_printf_i+0xfa>
 800ccfe:	3145      	adds	r1, #69	; 0x45
 800cd00:	700a      	strb	r2, [r1, #0]
 800cd02:	4a52      	ldr	r2, [pc, #328]	; (800ce4c <_printf_i+0x21c>)
 800cd04:	9203      	str	r2, [sp, #12]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	6821      	ldr	r1, [r4, #0]
 800cd0a:	ca20      	ldmia	r2!, {r5}
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	0608      	lsls	r0, r1, #24
 800cd10:	d550      	bpl.n	800cdb4 <_printf_i+0x184>
 800cd12:	07cb      	lsls	r3, r1, #31
 800cd14:	d502      	bpl.n	800cd1c <_printf_i+0xec>
 800cd16:	2320      	movs	r3, #32
 800cd18:	4319      	orrs	r1, r3
 800cd1a:	6021      	str	r1, [r4, #0]
 800cd1c:	2710      	movs	r7, #16
 800cd1e:	2d00      	cmp	r5, #0
 800cd20:	d103      	bne.n	800cd2a <_printf_i+0xfa>
 800cd22:	2320      	movs	r3, #32
 800cd24:	6822      	ldr	r2, [r4, #0]
 800cd26:	439a      	bics	r2, r3
 800cd28:	6022      	str	r2, [r4, #0]
 800cd2a:	0023      	movs	r3, r4
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	3343      	adds	r3, #67	; 0x43
 800cd30:	701a      	strb	r2, [r3, #0]
 800cd32:	6863      	ldr	r3, [r4, #4]
 800cd34:	60a3      	str	r3, [r4, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	db03      	blt.n	800cd42 <_printf_i+0x112>
 800cd3a:	2204      	movs	r2, #4
 800cd3c:	6821      	ldr	r1, [r4, #0]
 800cd3e:	4391      	bics	r1, r2
 800cd40:	6021      	str	r1, [r4, #0]
 800cd42:	2d00      	cmp	r5, #0
 800cd44:	d102      	bne.n	800cd4c <_printf_i+0x11c>
 800cd46:	9e04      	ldr	r6, [sp, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00c      	beq.n	800cd66 <_printf_i+0x136>
 800cd4c:	9e04      	ldr	r6, [sp, #16]
 800cd4e:	0028      	movs	r0, r5
 800cd50:	0039      	movs	r1, r7
 800cd52:	f7f3 fa67 	bl	8000224 <__aeabi_uidivmod>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	3e01      	subs	r6, #1
 800cd5a:	5c5b      	ldrb	r3, [r3, r1]
 800cd5c:	7033      	strb	r3, [r6, #0]
 800cd5e:	002b      	movs	r3, r5
 800cd60:	0005      	movs	r5, r0
 800cd62:	429f      	cmp	r7, r3
 800cd64:	d9f3      	bls.n	800cd4e <_printf_i+0x11e>
 800cd66:	2f08      	cmp	r7, #8
 800cd68:	d109      	bne.n	800cd7e <_printf_i+0x14e>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	07db      	lsls	r3, r3, #31
 800cd6e:	d506      	bpl.n	800cd7e <_printf_i+0x14e>
 800cd70:	6863      	ldr	r3, [r4, #4]
 800cd72:	6922      	ldr	r2, [r4, #16]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	dc02      	bgt.n	800cd7e <_printf_i+0x14e>
 800cd78:	2330      	movs	r3, #48	; 0x30
 800cd7a:	3e01      	subs	r6, #1
 800cd7c:	7033      	strb	r3, [r6, #0]
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	1b9b      	subs	r3, r3, r6
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	9b07      	ldr	r3, [sp, #28]
 800cd86:	0021      	movs	r1, r4
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	9805      	ldr	r0, [sp, #20]
 800cd8c:	9b06      	ldr	r3, [sp, #24]
 800cd8e:	aa09      	add	r2, sp, #36	; 0x24
 800cd90:	f7ff fede 	bl	800cb50 <_printf_common>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d135      	bne.n	800ce04 <_printf_i+0x1d4>
 800cd98:	2001      	movs	r0, #1
 800cd9a:	4240      	negs	r0, r0
 800cd9c:	b00b      	add	sp, #44	; 0x2c
 800cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda0:	2220      	movs	r2, #32
 800cda2:	6809      	ldr	r1, [r1, #0]
 800cda4:	430a      	orrs	r2, r1
 800cda6:	6022      	str	r2, [r4, #0]
 800cda8:	0022      	movs	r2, r4
 800cdaa:	2178      	movs	r1, #120	; 0x78
 800cdac:	3245      	adds	r2, #69	; 0x45
 800cdae:	7011      	strb	r1, [r2, #0]
 800cdb0:	4a27      	ldr	r2, [pc, #156]	; (800ce50 <_printf_i+0x220>)
 800cdb2:	e7a7      	b.n	800cd04 <_printf_i+0xd4>
 800cdb4:	0648      	lsls	r0, r1, #25
 800cdb6:	d5ac      	bpl.n	800cd12 <_printf_i+0xe2>
 800cdb8:	b2ad      	uxth	r5, r5
 800cdba:	e7aa      	b.n	800cd12 <_printf_i+0xe2>
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	680d      	ldr	r5, [r1, #0]
 800cdc0:	1d10      	adds	r0, r2, #4
 800cdc2:	6949      	ldr	r1, [r1, #20]
 800cdc4:	6018      	str	r0, [r3, #0]
 800cdc6:	6813      	ldr	r3, [r2, #0]
 800cdc8:	062e      	lsls	r6, r5, #24
 800cdca:	d501      	bpl.n	800cdd0 <_printf_i+0x1a0>
 800cdcc:	6019      	str	r1, [r3, #0]
 800cdce:	e002      	b.n	800cdd6 <_printf_i+0x1a6>
 800cdd0:	066d      	lsls	r5, r5, #25
 800cdd2:	d5fb      	bpl.n	800cdcc <_printf_i+0x19c>
 800cdd4:	8019      	strh	r1, [r3, #0]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	9e04      	ldr	r6, [sp, #16]
 800cdda:	6123      	str	r3, [r4, #16]
 800cddc:	e7d2      	b.n	800cd84 <_printf_i+0x154>
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	1d11      	adds	r1, r2, #4
 800cde2:	6019      	str	r1, [r3, #0]
 800cde4:	6816      	ldr	r6, [r2, #0]
 800cde6:	2100      	movs	r1, #0
 800cde8:	0030      	movs	r0, r6
 800cdea:	6862      	ldr	r2, [r4, #4]
 800cdec:	f000 f832 	bl	800ce54 <memchr>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d001      	beq.n	800cdf8 <_printf_i+0x1c8>
 800cdf4:	1b80      	subs	r0, r0, r6
 800cdf6:	6060      	str	r0, [r4, #4]
 800cdf8:	6863      	ldr	r3, [r4, #4]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	9a04      	ldr	r2, [sp, #16]
 800ce00:	7013      	strb	r3, [r2, #0]
 800ce02:	e7bf      	b.n	800cd84 <_printf_i+0x154>
 800ce04:	6923      	ldr	r3, [r4, #16]
 800ce06:	0032      	movs	r2, r6
 800ce08:	9906      	ldr	r1, [sp, #24]
 800ce0a:	9805      	ldr	r0, [sp, #20]
 800ce0c:	9d07      	ldr	r5, [sp, #28]
 800ce0e:	47a8      	blx	r5
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d0c1      	beq.n	800cd98 <_printf_i+0x168>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	079b      	lsls	r3, r3, #30
 800ce18:	d415      	bmi.n	800ce46 <_printf_i+0x216>
 800ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1c:	68e0      	ldr	r0, [r4, #12]
 800ce1e:	4298      	cmp	r0, r3
 800ce20:	dabc      	bge.n	800cd9c <_printf_i+0x16c>
 800ce22:	0018      	movs	r0, r3
 800ce24:	e7ba      	b.n	800cd9c <_printf_i+0x16c>
 800ce26:	0022      	movs	r2, r4
 800ce28:	2301      	movs	r3, #1
 800ce2a:	9906      	ldr	r1, [sp, #24]
 800ce2c:	9805      	ldr	r0, [sp, #20]
 800ce2e:	9e07      	ldr	r6, [sp, #28]
 800ce30:	3219      	adds	r2, #25
 800ce32:	47b0      	blx	r6
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d0af      	beq.n	800cd98 <_printf_i+0x168>
 800ce38:	3501      	adds	r5, #1
 800ce3a:	68e3      	ldr	r3, [r4, #12]
 800ce3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce3e:	1a9b      	subs	r3, r3, r2
 800ce40:	42ab      	cmp	r3, r5
 800ce42:	dcf0      	bgt.n	800ce26 <_printf_i+0x1f6>
 800ce44:	e7e9      	b.n	800ce1a <_printf_i+0x1ea>
 800ce46:	2500      	movs	r5, #0
 800ce48:	e7f7      	b.n	800ce3a <_printf_i+0x20a>
 800ce4a:	46c0      	nop			; (mov r8, r8)
 800ce4c:	0800d85d 	.word	0x0800d85d
 800ce50:	0800d86e 	.word	0x0800d86e

0800ce54 <memchr>:
 800ce54:	b2c9      	uxtb	r1, r1
 800ce56:	1882      	adds	r2, r0, r2
 800ce58:	4290      	cmp	r0, r2
 800ce5a:	d101      	bne.n	800ce60 <memchr+0xc>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	4770      	bx	lr
 800ce60:	7803      	ldrb	r3, [r0, #0]
 800ce62:	428b      	cmp	r3, r1
 800ce64:	d0fb      	beq.n	800ce5e <memchr+0xa>
 800ce66:	3001      	adds	r0, #1
 800ce68:	e7f6      	b.n	800ce58 <memchr+0x4>

0800ce6a <memmove>:
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	4288      	cmp	r0, r1
 800ce6e:	d902      	bls.n	800ce76 <memmove+0xc>
 800ce70:	188b      	adds	r3, r1, r2
 800ce72:	4298      	cmp	r0, r3
 800ce74:	d303      	bcc.n	800ce7e <memmove+0x14>
 800ce76:	2300      	movs	r3, #0
 800ce78:	e007      	b.n	800ce8a <memmove+0x20>
 800ce7a:	5c8b      	ldrb	r3, [r1, r2]
 800ce7c:	5483      	strb	r3, [r0, r2]
 800ce7e:	3a01      	subs	r2, #1
 800ce80:	d2fb      	bcs.n	800ce7a <memmove+0x10>
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	5ccc      	ldrb	r4, [r1, r3]
 800ce86:	54c4      	strb	r4, [r0, r3]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d1fa      	bne.n	800ce84 <memmove+0x1a>
 800ce8e:	e7f8      	b.n	800ce82 <memmove+0x18>

0800ce90 <_free_r>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	0005      	movs	r5, r0
 800ce94:	2900      	cmp	r1, #0
 800ce96:	d010      	beq.n	800ceba <_free_r+0x2a>
 800ce98:	1f0c      	subs	r4, r1, #4
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	da00      	bge.n	800cea2 <_free_r+0x12>
 800cea0:	18e4      	adds	r4, r4, r3
 800cea2:	0028      	movs	r0, r5
 800cea4:	f000 f8d4 	bl	800d050 <__malloc_lock>
 800cea8:	4a1d      	ldr	r2, [pc, #116]	; (800cf20 <_free_r+0x90>)
 800ceaa:	6813      	ldr	r3, [r2, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d105      	bne.n	800cebc <_free_r+0x2c>
 800ceb0:	6063      	str	r3, [r4, #4]
 800ceb2:	6014      	str	r4, [r2, #0]
 800ceb4:	0028      	movs	r0, r5
 800ceb6:	f000 f8d3 	bl	800d060 <__malloc_unlock>
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	d908      	bls.n	800ced2 <_free_r+0x42>
 800cec0:	6821      	ldr	r1, [r4, #0]
 800cec2:	1860      	adds	r0, r4, r1
 800cec4:	4283      	cmp	r3, r0
 800cec6:	d1f3      	bne.n	800ceb0 <_free_r+0x20>
 800cec8:	6818      	ldr	r0, [r3, #0]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	1841      	adds	r1, r0, r1
 800cece:	6021      	str	r1, [r4, #0]
 800ced0:	e7ee      	b.n	800ceb0 <_free_r+0x20>
 800ced2:	001a      	movs	r2, r3
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <_free_r+0x4e>
 800ceda:	42a3      	cmp	r3, r4
 800cedc:	d9f9      	bls.n	800ced2 <_free_r+0x42>
 800cede:	6811      	ldr	r1, [r2, #0]
 800cee0:	1850      	adds	r0, r2, r1
 800cee2:	42a0      	cmp	r0, r4
 800cee4:	d10b      	bne.n	800cefe <_free_r+0x6e>
 800cee6:	6820      	ldr	r0, [r4, #0]
 800cee8:	1809      	adds	r1, r1, r0
 800ceea:	1850      	adds	r0, r2, r1
 800ceec:	6011      	str	r1, [r2, #0]
 800ceee:	4283      	cmp	r3, r0
 800cef0:	d1e0      	bne.n	800ceb4 <_free_r+0x24>
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	1841      	adds	r1, r0, r1
 800cef8:	6011      	str	r1, [r2, #0]
 800cefa:	6053      	str	r3, [r2, #4]
 800cefc:	e7da      	b.n	800ceb4 <_free_r+0x24>
 800cefe:	42a0      	cmp	r0, r4
 800cf00:	d902      	bls.n	800cf08 <_free_r+0x78>
 800cf02:	230c      	movs	r3, #12
 800cf04:	602b      	str	r3, [r5, #0]
 800cf06:	e7d5      	b.n	800ceb4 <_free_r+0x24>
 800cf08:	6821      	ldr	r1, [r4, #0]
 800cf0a:	1860      	adds	r0, r4, r1
 800cf0c:	4283      	cmp	r3, r0
 800cf0e:	d103      	bne.n	800cf18 <_free_r+0x88>
 800cf10:	6818      	ldr	r0, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	1841      	adds	r1, r0, r1
 800cf16:	6021      	str	r1, [r4, #0]
 800cf18:	6063      	str	r3, [r4, #4]
 800cf1a:	6054      	str	r4, [r2, #4]
 800cf1c:	e7ca      	b.n	800ceb4 <_free_r+0x24>
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	20000094 	.word	0x20000094

0800cf24 <_malloc_r>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	2303      	movs	r3, #3
 800cf28:	1ccd      	adds	r5, r1, #3
 800cf2a:	439d      	bics	r5, r3
 800cf2c:	3508      	adds	r5, #8
 800cf2e:	0006      	movs	r6, r0
 800cf30:	2d0c      	cmp	r5, #12
 800cf32:	d21f      	bcs.n	800cf74 <_malloc_r+0x50>
 800cf34:	250c      	movs	r5, #12
 800cf36:	42a9      	cmp	r1, r5
 800cf38:	d81e      	bhi.n	800cf78 <_malloc_r+0x54>
 800cf3a:	0030      	movs	r0, r6
 800cf3c:	f000 f888 	bl	800d050 <__malloc_lock>
 800cf40:	4925      	ldr	r1, [pc, #148]	; (800cfd8 <_malloc_r+0xb4>)
 800cf42:	680a      	ldr	r2, [r1, #0]
 800cf44:	0014      	movs	r4, r2
 800cf46:	2c00      	cmp	r4, #0
 800cf48:	d11a      	bne.n	800cf80 <_malloc_r+0x5c>
 800cf4a:	4f24      	ldr	r7, [pc, #144]	; (800cfdc <_malloc_r+0xb8>)
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d104      	bne.n	800cf5c <_malloc_r+0x38>
 800cf52:	0021      	movs	r1, r4
 800cf54:	0030      	movs	r0, r6
 800cf56:	f000 f869 	bl	800d02c <_sbrk_r>
 800cf5a:	6038      	str	r0, [r7, #0]
 800cf5c:	0029      	movs	r1, r5
 800cf5e:	0030      	movs	r0, r6
 800cf60:	f000 f864 	bl	800d02c <_sbrk_r>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d12b      	bne.n	800cfc0 <_malloc_r+0x9c>
 800cf68:	230c      	movs	r3, #12
 800cf6a:	0030      	movs	r0, r6
 800cf6c:	6033      	str	r3, [r6, #0]
 800cf6e:	f000 f877 	bl	800d060 <__malloc_unlock>
 800cf72:	e003      	b.n	800cf7c <_malloc_r+0x58>
 800cf74:	2d00      	cmp	r5, #0
 800cf76:	dade      	bge.n	800cf36 <_malloc_r+0x12>
 800cf78:	230c      	movs	r3, #12
 800cf7a:	6033      	str	r3, [r6, #0]
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	1b5b      	subs	r3, r3, r5
 800cf84:	d419      	bmi.n	800cfba <_malloc_r+0x96>
 800cf86:	2b0b      	cmp	r3, #11
 800cf88:	d903      	bls.n	800cf92 <_malloc_r+0x6e>
 800cf8a:	6023      	str	r3, [r4, #0]
 800cf8c:	18e4      	adds	r4, r4, r3
 800cf8e:	6025      	str	r5, [r4, #0]
 800cf90:	e003      	b.n	800cf9a <_malloc_r+0x76>
 800cf92:	6863      	ldr	r3, [r4, #4]
 800cf94:	42a2      	cmp	r2, r4
 800cf96:	d10e      	bne.n	800cfb6 <_malloc_r+0x92>
 800cf98:	600b      	str	r3, [r1, #0]
 800cf9a:	0030      	movs	r0, r6
 800cf9c:	f000 f860 	bl	800d060 <__malloc_unlock>
 800cfa0:	0020      	movs	r0, r4
 800cfa2:	2207      	movs	r2, #7
 800cfa4:	300b      	adds	r0, #11
 800cfa6:	1d23      	adds	r3, r4, #4
 800cfa8:	4390      	bics	r0, r2
 800cfaa:	1ac2      	subs	r2, r0, r3
 800cfac:	4298      	cmp	r0, r3
 800cfae:	d0e6      	beq.n	800cf7e <_malloc_r+0x5a>
 800cfb0:	1a1b      	subs	r3, r3, r0
 800cfb2:	50a3      	str	r3, [r4, r2]
 800cfb4:	e7e3      	b.n	800cf7e <_malloc_r+0x5a>
 800cfb6:	6053      	str	r3, [r2, #4]
 800cfb8:	e7ef      	b.n	800cf9a <_malloc_r+0x76>
 800cfba:	0022      	movs	r2, r4
 800cfbc:	6864      	ldr	r4, [r4, #4]
 800cfbe:	e7c2      	b.n	800cf46 <_malloc_r+0x22>
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	1cc4      	adds	r4, r0, #3
 800cfc4:	439c      	bics	r4, r3
 800cfc6:	42a0      	cmp	r0, r4
 800cfc8:	d0e1      	beq.n	800cf8e <_malloc_r+0x6a>
 800cfca:	1a21      	subs	r1, r4, r0
 800cfcc:	0030      	movs	r0, r6
 800cfce:	f000 f82d 	bl	800d02c <_sbrk_r>
 800cfd2:	1c43      	adds	r3, r0, #1
 800cfd4:	d1db      	bne.n	800cf8e <_malloc_r+0x6a>
 800cfd6:	e7c7      	b.n	800cf68 <_malloc_r+0x44>
 800cfd8:	20000094 	.word	0x20000094
 800cfdc:	20000098 	.word	0x20000098

0800cfe0 <_realloc_r>:
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe2:	0007      	movs	r7, r0
 800cfe4:	000d      	movs	r5, r1
 800cfe6:	0016      	movs	r6, r2
 800cfe8:	2900      	cmp	r1, #0
 800cfea:	d105      	bne.n	800cff8 <_realloc_r+0x18>
 800cfec:	0011      	movs	r1, r2
 800cfee:	f7ff ff99 	bl	800cf24 <_malloc_r>
 800cff2:	0004      	movs	r4, r0
 800cff4:	0020      	movs	r0, r4
 800cff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff8:	2a00      	cmp	r2, #0
 800cffa:	d103      	bne.n	800d004 <_realloc_r+0x24>
 800cffc:	f7ff ff48 	bl	800ce90 <_free_r>
 800d000:	0034      	movs	r4, r6
 800d002:	e7f7      	b.n	800cff4 <_realloc_r+0x14>
 800d004:	f000 f834 	bl	800d070 <_malloc_usable_size_r>
 800d008:	002c      	movs	r4, r5
 800d00a:	42b0      	cmp	r0, r6
 800d00c:	d2f2      	bcs.n	800cff4 <_realloc_r+0x14>
 800d00e:	0031      	movs	r1, r6
 800d010:	0038      	movs	r0, r7
 800d012:	f7ff ff87 	bl	800cf24 <_malloc_r>
 800d016:	1e04      	subs	r4, r0, #0
 800d018:	d0ec      	beq.n	800cff4 <_realloc_r+0x14>
 800d01a:	0029      	movs	r1, r5
 800d01c:	0032      	movs	r2, r6
 800d01e:	f7ff fc03 	bl	800c828 <memcpy>
 800d022:	0029      	movs	r1, r5
 800d024:	0038      	movs	r0, r7
 800d026:	f7ff ff33 	bl	800ce90 <_free_r>
 800d02a:	e7e3      	b.n	800cff4 <_realloc_r+0x14>

0800d02c <_sbrk_r>:
 800d02c:	2300      	movs	r3, #0
 800d02e:	b570      	push	{r4, r5, r6, lr}
 800d030:	4d06      	ldr	r5, [pc, #24]	; (800d04c <_sbrk_r+0x20>)
 800d032:	0004      	movs	r4, r0
 800d034:	0008      	movs	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7ff fb66 	bl	800c708 <_sbrk>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d103      	bne.n	800d048 <_sbrk_r+0x1c>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d000      	beq.n	800d048 <_sbrk_r+0x1c>
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	bd70      	pop	{r4, r5, r6, pc}
 800d04a:	46c0      	nop			; (mov r8, r8)
 800d04c:	20000558 	.word	0x20000558

0800d050 <__malloc_lock>:
 800d050:	b510      	push	{r4, lr}
 800d052:	4802      	ldr	r0, [pc, #8]	; (800d05c <__malloc_lock+0xc>)
 800d054:	f000 f814 	bl	800d080 <__retarget_lock_acquire_recursive>
 800d058:	bd10      	pop	{r4, pc}
 800d05a:	46c0      	nop			; (mov r8, r8)
 800d05c:	20000560 	.word	0x20000560

0800d060 <__malloc_unlock>:
 800d060:	b510      	push	{r4, lr}
 800d062:	4802      	ldr	r0, [pc, #8]	; (800d06c <__malloc_unlock+0xc>)
 800d064:	f000 f80d 	bl	800d082 <__retarget_lock_release_recursive>
 800d068:	bd10      	pop	{r4, pc}
 800d06a:	46c0      	nop			; (mov r8, r8)
 800d06c:	20000560 	.word	0x20000560

0800d070 <_malloc_usable_size_r>:
 800d070:	1f0b      	subs	r3, r1, #4
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	1f18      	subs	r0, r3, #4
 800d076:	2b00      	cmp	r3, #0
 800d078:	da01      	bge.n	800d07e <_malloc_usable_size_r+0xe>
 800d07a:	580b      	ldr	r3, [r1, r0]
 800d07c:	18c0      	adds	r0, r0, r3
 800d07e:	4770      	bx	lr

0800d080 <__retarget_lock_acquire_recursive>:
 800d080:	4770      	bx	lr

0800d082 <__retarget_lock_release_recursive>:
 800d082:	4770      	bx	lr

0800d084 <log>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	0004      	movs	r4, r0
 800d088:	000d      	movs	r5, r1
 800d08a:	f000 f839 	bl	800d100 <__ieee754_log>
 800d08e:	4b19      	ldr	r3, [pc, #100]	; (800d0f4 <log+0x70>)
 800d090:	0006      	movs	r6, r0
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	000f      	movs	r7, r1
 800d096:	b25b      	sxtb	r3, r3
 800d098:	3301      	adds	r3, #1
 800d09a:	d01d      	beq.n	800d0d8 <log+0x54>
 800d09c:	0022      	movs	r2, r4
 800d09e:	002b      	movs	r3, r5
 800d0a0:	0020      	movs	r0, r4
 800d0a2:	0029      	movs	r1, r5
 800d0a4:	f7f5 fef4 	bl	8002e90 <__aeabi_dcmpun>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d115      	bne.n	800d0d8 <log+0x54>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	0020      	movs	r0, r4
 800d0b2:	0029      	movs	r1, r5
 800d0b4:	f7f3 f9d0 	bl	8000458 <__aeabi_dcmpgt>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d10d      	bne.n	800d0d8 <log+0x54>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2300      	movs	r3, #0
 800d0c0:	0020      	movs	r0, r4
 800d0c2:	0029      	movs	r1, r5
 800d0c4:	f7f3 f9ae 	bl	8000424 <__aeabi_dcmpeq>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d008      	beq.n	800d0de <log+0x5a>
 800d0cc:	f7ff fb82 	bl	800c7d4 <__errno>
 800d0d0:	2322      	movs	r3, #34	; 0x22
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	4f08      	ldr	r7, [pc, #32]	; (800d0f8 <log+0x74>)
 800d0d6:	6003      	str	r3, [r0, #0]
 800d0d8:	0030      	movs	r0, r6
 800d0da:	0039      	movs	r1, r7
 800d0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0de:	f7ff fb79 	bl	800c7d4 <__errno>
 800d0e2:	2321      	movs	r3, #33	; 0x21
 800d0e4:	6003      	str	r3, [r0, #0]
 800d0e6:	4805      	ldr	r0, [pc, #20]	; (800d0fc <log+0x78>)
 800d0e8:	f000 f9ba 	bl	800d460 <nan>
 800d0ec:	0006      	movs	r6, r0
 800d0ee:	000f      	movs	r7, r1
 800d0f0:	e7f2      	b.n	800d0d8 <log+0x54>
 800d0f2:	46c0      	nop			; (mov r8, r8)
 800d0f4:	20000070 	.word	0x20000070
 800d0f8:	fff00000 	.word	0xfff00000
 800d0fc:	0800d851 	.word	0x0800d851

0800d100 <__ieee754_log>:
 800d100:	2280      	movs	r2, #128	; 0x80
 800d102:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d104:	000b      	movs	r3, r1
 800d106:	b08d      	sub	sp, #52	; 0x34
 800d108:	0352      	lsls	r2, r2, #13
 800d10a:	4291      	cmp	r1, r2
 800d10c:	da22      	bge.n	800d154 <__ieee754_log+0x54>
 800d10e:	004a      	lsls	r2, r1, #1
 800d110:	0852      	lsrs	r2, r2, #1
 800d112:	4302      	orrs	r2, r0
 800d114:	d107      	bne.n	800d126 <__ieee754_log+0x26>
 800d116:	2200      	movs	r2, #0
 800d118:	2300      	movs	r3, #0
 800d11a:	2000      	movs	r0, #0
 800d11c:	49b3      	ldr	r1, [pc, #716]	; (800d3ec <__ieee754_log+0x2ec>)
 800d11e:	f7f4 fcb3 	bl	8001a88 <__aeabi_ddiv>
 800d122:	b00d      	add	sp, #52	; 0x34
 800d124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d126:	2900      	cmp	r1, #0
 800d128:	da05      	bge.n	800d136 <__ieee754_log+0x36>
 800d12a:	0002      	movs	r2, r0
 800d12c:	f7f5 fb1e 	bl	800276c <__aeabi_dsub>
 800d130:	2200      	movs	r2, #0
 800d132:	2300      	movs	r3, #0
 800d134:	e7f3      	b.n	800d11e <__ieee754_log+0x1e>
 800d136:	4bae      	ldr	r3, [pc, #696]	; (800d3f0 <__ieee754_log+0x2f0>)
 800d138:	2200      	movs	r2, #0
 800d13a:	f7f5 f8ab 	bl	8002294 <__aeabi_dmul>
 800d13e:	2436      	movs	r4, #54	; 0x36
 800d140:	000b      	movs	r3, r1
 800d142:	4264      	negs	r4, r4
 800d144:	4aab      	ldr	r2, [pc, #684]	; (800d3f4 <__ieee754_log+0x2f4>)
 800d146:	4293      	cmp	r3, r2
 800d148:	dd06      	ble.n	800d158 <__ieee754_log+0x58>
 800d14a:	0002      	movs	r2, r0
 800d14c:	000b      	movs	r3, r1
 800d14e:	f7f4 f931 	bl	80013b4 <__aeabi_dadd>
 800d152:	e7e6      	b.n	800d122 <__ieee754_log+0x22>
 800d154:	2400      	movs	r4, #0
 800d156:	e7f5      	b.n	800d144 <__ieee754_log+0x44>
 800d158:	4da7      	ldr	r5, [pc, #668]	; (800d3f8 <__ieee754_log+0x2f8>)
 800d15a:	151a      	asrs	r2, r3, #20
 800d15c:	1952      	adds	r2, r2, r5
 800d15e:	1912      	adds	r2, r2, r4
 800d160:	031b      	lsls	r3, r3, #12
 800d162:	4ca6      	ldr	r4, [pc, #664]	; (800d3fc <__ieee754_log+0x2fc>)
 800d164:	0b1b      	lsrs	r3, r3, #12
 800d166:	9302      	str	r3, [sp, #8]
 800d168:	191c      	adds	r4, r3, r4
 800d16a:	2380      	movs	r3, #128	; 0x80
 800d16c:	035b      	lsls	r3, r3, #13
 800d16e:	4023      	ands	r3, r4
 800d170:	4ca3      	ldr	r4, [pc, #652]	; (800d400 <__ieee754_log+0x300>)
 800d172:	9d02      	ldr	r5, [sp, #8]
 800d174:	405c      	eors	r4, r3
 800d176:	151b      	asrs	r3, r3, #20
 800d178:	189b      	adds	r3, r3, r2
 800d17a:	4325      	orrs	r5, r4
 800d17c:	2200      	movs	r2, #0
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	0029      	movs	r1, r5
 800d182:	4b9f      	ldr	r3, [pc, #636]	; (800d400 <__ieee754_log+0x300>)
 800d184:	f7f5 faf2 	bl	800276c <__aeabi_dsub>
 800d188:	9b02      	ldr	r3, [sp, #8]
 800d18a:	0006      	movs	r6, r0
 800d18c:	3302      	adds	r3, #2
 800d18e:	031b      	lsls	r3, r3, #12
 800d190:	000f      	movs	r7, r1
 800d192:	2200      	movs	r2, #0
 800d194:	0b1b      	lsrs	r3, r3, #12
 800d196:	2b02      	cmp	r3, #2
 800d198:	dc64      	bgt.n	800d264 <__ieee754_log+0x164>
 800d19a:	2300      	movs	r3, #0
 800d19c:	f7f3 f942 	bl	8000424 <__aeabi_dcmpeq>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d019      	beq.n	800d1d8 <__ieee754_log+0xd8>
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d100      	bne.n	800d1ac <__ieee754_log+0xac>
 800d1aa:	e11c      	b.n	800d3e6 <__ieee754_log+0x2e6>
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f7f5 fec3 	bl	8002f38 <__aeabi_i2d>
 800d1b2:	4a94      	ldr	r2, [pc, #592]	; (800d404 <__ieee754_log+0x304>)
 800d1b4:	4b94      	ldr	r3, [pc, #592]	; (800d408 <__ieee754_log+0x308>)
 800d1b6:	0004      	movs	r4, r0
 800d1b8:	000d      	movs	r5, r1
 800d1ba:	f7f5 f86b 	bl	8002294 <__aeabi_dmul>
 800d1be:	4a93      	ldr	r2, [pc, #588]	; (800d40c <__ieee754_log+0x30c>)
 800d1c0:	0006      	movs	r6, r0
 800d1c2:	000f      	movs	r7, r1
 800d1c4:	4b92      	ldr	r3, [pc, #584]	; (800d410 <__ieee754_log+0x310>)
 800d1c6:	0020      	movs	r0, r4
 800d1c8:	0029      	movs	r1, r5
 800d1ca:	f7f5 f863 	bl	8002294 <__aeabi_dmul>
 800d1ce:	0002      	movs	r2, r0
 800d1d0:	000b      	movs	r3, r1
 800d1d2:	0030      	movs	r0, r6
 800d1d4:	0039      	movs	r1, r7
 800d1d6:	e7ba      	b.n	800d14e <__ieee754_log+0x4e>
 800d1d8:	4a8e      	ldr	r2, [pc, #568]	; (800d414 <__ieee754_log+0x314>)
 800d1da:	4b8f      	ldr	r3, [pc, #572]	; (800d418 <__ieee754_log+0x318>)
 800d1dc:	0030      	movs	r0, r6
 800d1de:	0039      	movs	r1, r7
 800d1e0:	f7f5 f858 	bl	8002294 <__aeabi_dmul>
 800d1e4:	0002      	movs	r2, r0
 800d1e6:	000b      	movs	r3, r1
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	498c      	ldr	r1, [pc, #560]	; (800d41c <__ieee754_log+0x31c>)
 800d1ec:	f7f5 fabe 	bl	800276c <__aeabi_dsub>
 800d1f0:	0032      	movs	r2, r6
 800d1f2:	0004      	movs	r4, r0
 800d1f4:	000d      	movs	r5, r1
 800d1f6:	003b      	movs	r3, r7
 800d1f8:	0030      	movs	r0, r6
 800d1fa:	0039      	movs	r1, r7
 800d1fc:	f7f5 f84a 	bl	8002294 <__aeabi_dmul>
 800d200:	000b      	movs	r3, r1
 800d202:	0002      	movs	r2, r0
 800d204:	0029      	movs	r1, r5
 800d206:	0020      	movs	r0, r4
 800d208:	f7f5 f844 	bl	8002294 <__aeabi_dmul>
 800d20c:	9b00      	ldr	r3, [sp, #0]
 800d20e:	9002      	str	r0, [sp, #8]
 800d210:	9103      	str	r1, [sp, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <__ieee754_log+0x124>
 800d216:	0002      	movs	r2, r0
 800d218:	000b      	movs	r3, r1
 800d21a:	0030      	movs	r0, r6
 800d21c:	0039      	movs	r1, r7
 800d21e:	f7f5 faa5 	bl	800276c <__aeabi_dsub>
 800d222:	e77e      	b.n	800d122 <__ieee754_log+0x22>
 800d224:	9800      	ldr	r0, [sp, #0]
 800d226:	f7f5 fe87 	bl	8002f38 <__aeabi_i2d>
 800d22a:	4a76      	ldr	r2, [pc, #472]	; (800d404 <__ieee754_log+0x304>)
 800d22c:	4b76      	ldr	r3, [pc, #472]	; (800d408 <__ieee754_log+0x308>)
 800d22e:	0004      	movs	r4, r0
 800d230:	000d      	movs	r5, r1
 800d232:	f7f5 f82f 	bl	8002294 <__aeabi_dmul>
 800d236:	4a75      	ldr	r2, [pc, #468]	; (800d40c <__ieee754_log+0x30c>)
 800d238:	9000      	str	r0, [sp, #0]
 800d23a:	9101      	str	r1, [sp, #4]
 800d23c:	4b74      	ldr	r3, [pc, #464]	; (800d410 <__ieee754_log+0x310>)
 800d23e:	0020      	movs	r0, r4
 800d240:	0029      	movs	r1, r5
 800d242:	f7f5 f827 	bl	8002294 <__aeabi_dmul>
 800d246:	0002      	movs	r2, r0
 800d248:	000b      	movs	r3, r1
 800d24a:	9802      	ldr	r0, [sp, #8]
 800d24c:	9903      	ldr	r1, [sp, #12]
 800d24e:	f7f5 fa8d 	bl	800276c <__aeabi_dsub>
 800d252:	0032      	movs	r2, r6
 800d254:	003b      	movs	r3, r7
 800d256:	f7f5 fa89 	bl	800276c <__aeabi_dsub>
 800d25a:	0002      	movs	r2, r0
 800d25c:	000b      	movs	r3, r1
 800d25e:	9800      	ldr	r0, [sp, #0]
 800d260:	9901      	ldr	r1, [sp, #4]
 800d262:	e7dc      	b.n	800d21e <__ieee754_log+0x11e>
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	05db      	lsls	r3, r3, #23
 800d268:	f7f4 f8a4 	bl	80013b4 <__aeabi_dadd>
 800d26c:	0002      	movs	r2, r0
 800d26e:	000b      	movs	r3, r1
 800d270:	0030      	movs	r0, r6
 800d272:	0039      	movs	r1, r7
 800d274:	f7f4 fc08 	bl	8001a88 <__aeabi_ddiv>
 800d278:	9004      	str	r0, [sp, #16]
 800d27a:	9105      	str	r1, [sp, #20]
 800d27c:	9800      	ldr	r0, [sp, #0]
 800d27e:	f7f5 fe5b 	bl	8002f38 <__aeabi_i2d>
 800d282:	9a04      	ldr	r2, [sp, #16]
 800d284:	9b05      	ldr	r3, [sp, #20]
 800d286:	9006      	str	r0, [sp, #24]
 800d288:	9107      	str	r1, [sp, #28]
 800d28a:	0010      	movs	r0, r2
 800d28c:	0019      	movs	r1, r3
 800d28e:	f7f5 f801 	bl	8002294 <__aeabi_dmul>
 800d292:	4a63      	ldr	r2, [pc, #396]	; (800d420 <__ieee754_log+0x320>)
 800d294:	9b02      	ldr	r3, [sp, #8]
 800d296:	4694      	mov	ip, r2
 800d298:	4463      	add	r3, ip
 800d29a:	0002      	movs	r2, r0
 800d29c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d29e:	000b      	movs	r3, r1
 800d2a0:	9008      	str	r0, [sp, #32]
 800d2a2:	9109      	str	r1, [sp, #36]	; 0x24
 800d2a4:	f7f4 fff6 	bl	8002294 <__aeabi_dmul>
 800d2a8:	0004      	movs	r4, r0
 800d2aa:	000d      	movs	r5, r1
 800d2ac:	4a5d      	ldr	r2, [pc, #372]	; (800d424 <__ieee754_log+0x324>)
 800d2ae:	4b5e      	ldr	r3, [pc, #376]	; (800d428 <__ieee754_log+0x328>)
 800d2b0:	f7f4 fff0 	bl	8002294 <__aeabi_dmul>
 800d2b4:	4a5d      	ldr	r2, [pc, #372]	; (800d42c <__ieee754_log+0x32c>)
 800d2b6:	4b5e      	ldr	r3, [pc, #376]	; (800d430 <__ieee754_log+0x330>)
 800d2b8:	f7f4 f87c 	bl	80013b4 <__aeabi_dadd>
 800d2bc:	0022      	movs	r2, r4
 800d2be:	002b      	movs	r3, r5
 800d2c0:	f7f4 ffe8 	bl	8002294 <__aeabi_dmul>
 800d2c4:	4a5b      	ldr	r2, [pc, #364]	; (800d434 <__ieee754_log+0x334>)
 800d2c6:	4b5c      	ldr	r3, [pc, #368]	; (800d438 <__ieee754_log+0x338>)
 800d2c8:	f7f4 f874 	bl	80013b4 <__aeabi_dadd>
 800d2cc:	0022      	movs	r2, r4
 800d2ce:	002b      	movs	r3, r5
 800d2d0:	f7f4 ffe0 	bl	8002294 <__aeabi_dmul>
 800d2d4:	4a59      	ldr	r2, [pc, #356]	; (800d43c <__ieee754_log+0x33c>)
 800d2d6:	4b5a      	ldr	r3, [pc, #360]	; (800d440 <__ieee754_log+0x340>)
 800d2d8:	f7f4 f86c 	bl	80013b4 <__aeabi_dadd>
 800d2dc:	9a08      	ldr	r2, [sp, #32]
 800d2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e0:	f7f4 ffd8 	bl	8002294 <__aeabi_dmul>
 800d2e4:	4a57      	ldr	r2, [pc, #348]	; (800d444 <__ieee754_log+0x344>)
 800d2e6:	9008      	str	r0, [sp, #32]
 800d2e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d2ea:	4b57      	ldr	r3, [pc, #348]	; (800d448 <__ieee754_log+0x348>)
 800d2ec:	0020      	movs	r0, r4
 800d2ee:	0029      	movs	r1, r5
 800d2f0:	f7f4 ffd0 	bl	8002294 <__aeabi_dmul>
 800d2f4:	4a55      	ldr	r2, [pc, #340]	; (800d44c <__ieee754_log+0x34c>)
 800d2f6:	4b56      	ldr	r3, [pc, #344]	; (800d450 <__ieee754_log+0x350>)
 800d2f8:	f7f4 f85c 	bl	80013b4 <__aeabi_dadd>
 800d2fc:	0022      	movs	r2, r4
 800d2fe:	002b      	movs	r3, r5
 800d300:	f7f4 ffc8 	bl	8002294 <__aeabi_dmul>
 800d304:	4a53      	ldr	r2, [pc, #332]	; (800d454 <__ieee754_log+0x354>)
 800d306:	4b54      	ldr	r3, [pc, #336]	; (800d458 <__ieee754_log+0x358>)
 800d308:	f7f4 f854 	bl	80013b4 <__aeabi_dadd>
 800d30c:	0022      	movs	r2, r4
 800d30e:	002b      	movs	r3, r5
 800d310:	f7f4 ffc0 	bl	8002294 <__aeabi_dmul>
 800d314:	0002      	movs	r2, r0
 800d316:	000b      	movs	r3, r1
 800d318:	9808      	ldr	r0, [sp, #32]
 800d31a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d31c:	f7f4 f84a 	bl	80013b4 <__aeabi_dadd>
 800d320:	9a02      	ldr	r2, [sp, #8]
 800d322:	4b4e      	ldr	r3, [pc, #312]	; (800d45c <__ieee754_log+0x35c>)
 800d324:	0004      	movs	r4, r0
 800d326:	1a9b      	subs	r3, r3, r2
 800d328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d32a:	000d      	movs	r5, r1
 800d32c:	4313      	orrs	r3, r2
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dd34      	ble.n	800d39c <__ieee754_log+0x29c>
 800d332:	2200      	movs	r2, #0
 800d334:	4b39      	ldr	r3, [pc, #228]	; (800d41c <__ieee754_log+0x31c>)
 800d336:	0030      	movs	r0, r6
 800d338:	0039      	movs	r1, r7
 800d33a:	f7f4 ffab 	bl	8002294 <__aeabi_dmul>
 800d33e:	0032      	movs	r2, r6
 800d340:	003b      	movs	r3, r7
 800d342:	f7f4 ffa7 	bl	8002294 <__aeabi_dmul>
 800d346:	0002      	movs	r2, r0
 800d348:	000b      	movs	r3, r1
 800d34a:	9002      	str	r0, [sp, #8]
 800d34c:	9103      	str	r1, [sp, #12]
 800d34e:	0020      	movs	r0, r4
 800d350:	0029      	movs	r1, r5
 800d352:	f7f4 f82f 	bl	80013b4 <__aeabi_dadd>
 800d356:	9a04      	ldr	r2, [sp, #16]
 800d358:	9b05      	ldr	r3, [sp, #20]
 800d35a:	f7f4 ff9b 	bl	8002294 <__aeabi_dmul>
 800d35e:	9b00      	ldr	r3, [sp, #0]
 800d360:	0004      	movs	r4, r0
 800d362:	000d      	movs	r5, r1
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <__ieee754_log+0x276>
 800d368:	0002      	movs	r2, r0
 800d36a:	000b      	movs	r3, r1
 800d36c:	9802      	ldr	r0, [sp, #8]
 800d36e:	9903      	ldr	r1, [sp, #12]
 800d370:	f7f5 f9fc 	bl	800276c <__aeabi_dsub>
 800d374:	e74f      	b.n	800d216 <__ieee754_log+0x116>
 800d376:	4a23      	ldr	r2, [pc, #140]	; (800d404 <__ieee754_log+0x304>)
 800d378:	4b23      	ldr	r3, [pc, #140]	; (800d408 <__ieee754_log+0x308>)
 800d37a:	9806      	ldr	r0, [sp, #24]
 800d37c:	9907      	ldr	r1, [sp, #28]
 800d37e:	f7f4 ff89 	bl	8002294 <__aeabi_dmul>
 800d382:	4a22      	ldr	r2, [pc, #136]	; (800d40c <__ieee754_log+0x30c>)
 800d384:	9000      	str	r0, [sp, #0]
 800d386:	9101      	str	r1, [sp, #4]
 800d388:	9806      	ldr	r0, [sp, #24]
 800d38a:	9907      	ldr	r1, [sp, #28]
 800d38c:	4b20      	ldr	r3, [pc, #128]	; (800d410 <__ieee754_log+0x310>)
 800d38e:	f7f4 ff81 	bl	8002294 <__aeabi_dmul>
 800d392:	0022      	movs	r2, r4
 800d394:	002b      	movs	r3, r5
 800d396:	f7f4 f80d 	bl	80013b4 <__aeabi_dadd>
 800d39a:	e754      	b.n	800d246 <__ieee754_log+0x146>
 800d39c:	0002      	movs	r2, r0
 800d39e:	000b      	movs	r3, r1
 800d3a0:	0030      	movs	r0, r6
 800d3a2:	0039      	movs	r1, r7
 800d3a4:	f7f5 f9e2 	bl	800276c <__aeabi_dsub>
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	9b05      	ldr	r3, [sp, #20]
 800d3ac:	f7f4 ff72 	bl	8002294 <__aeabi_dmul>
 800d3b0:	9b00      	ldr	r3, [sp, #0]
 800d3b2:	0004      	movs	r4, r0
 800d3b4:	000d      	movs	r5, r1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d102      	bne.n	800d3c0 <__ieee754_log+0x2c0>
 800d3ba:	0002      	movs	r2, r0
 800d3bc:	000b      	movs	r3, r1
 800d3be:	e72c      	b.n	800d21a <__ieee754_log+0x11a>
 800d3c0:	4a10      	ldr	r2, [pc, #64]	; (800d404 <__ieee754_log+0x304>)
 800d3c2:	4b11      	ldr	r3, [pc, #68]	; (800d408 <__ieee754_log+0x308>)
 800d3c4:	9806      	ldr	r0, [sp, #24]
 800d3c6:	9907      	ldr	r1, [sp, #28]
 800d3c8:	f7f4 ff64 	bl	8002294 <__aeabi_dmul>
 800d3cc:	4a0f      	ldr	r2, [pc, #60]	; (800d40c <__ieee754_log+0x30c>)
 800d3ce:	9000      	str	r0, [sp, #0]
 800d3d0:	9101      	str	r1, [sp, #4]
 800d3d2:	9806      	ldr	r0, [sp, #24]
 800d3d4:	9907      	ldr	r1, [sp, #28]
 800d3d6:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <__ieee754_log+0x310>)
 800d3d8:	f7f4 ff5c 	bl	8002294 <__aeabi_dmul>
 800d3dc:	0002      	movs	r2, r0
 800d3de:	000b      	movs	r3, r1
 800d3e0:	0020      	movs	r0, r4
 800d3e2:	0029      	movs	r1, r5
 800d3e4:	e733      	b.n	800d24e <__ieee754_log+0x14e>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	e69a      	b.n	800d122 <__ieee754_log+0x22>
 800d3ec:	c3500000 	.word	0xc3500000
 800d3f0:	43500000 	.word	0x43500000
 800d3f4:	7fefffff 	.word	0x7fefffff
 800d3f8:	fffffc01 	.word	0xfffffc01
 800d3fc:	00095f64 	.word	0x00095f64
 800d400:	3ff00000 	.word	0x3ff00000
 800d404:	fee00000 	.word	0xfee00000
 800d408:	3fe62e42 	.word	0x3fe62e42
 800d40c:	35793c76 	.word	0x35793c76
 800d410:	3dea39ef 	.word	0x3dea39ef
 800d414:	55555555 	.word	0x55555555
 800d418:	3fd55555 	.word	0x3fd55555
 800d41c:	3fe00000 	.word	0x3fe00000
 800d420:	fff9eb86 	.word	0xfff9eb86
 800d424:	df3e5244 	.word	0xdf3e5244
 800d428:	3fc2f112 	.word	0x3fc2f112
 800d42c:	96cb03de 	.word	0x96cb03de
 800d430:	3fc74664 	.word	0x3fc74664
 800d434:	94229359 	.word	0x94229359
 800d438:	3fd24924 	.word	0x3fd24924
 800d43c:	55555593 	.word	0x55555593
 800d440:	3fe55555 	.word	0x3fe55555
 800d444:	d078c69f 	.word	0xd078c69f
 800d448:	3fc39a09 	.word	0x3fc39a09
 800d44c:	1d8e78af 	.word	0x1d8e78af
 800d450:	3fcc71c5 	.word	0x3fcc71c5
 800d454:	9997fa04 	.word	0x9997fa04
 800d458:	3fd99999 	.word	0x3fd99999
 800d45c:	0006b851 	.word	0x0006b851

0800d460 <nan>:
 800d460:	2000      	movs	r0, #0
 800d462:	4901      	ldr	r1, [pc, #4]	; (800d468 <nan+0x8>)
 800d464:	4770      	bx	lr
 800d466:	46c0      	nop			; (mov r8, r8)
 800d468:	7ff80000 	.word	0x7ff80000

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	46c0      	nop			; (mov r8, r8)
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	46c0      	nop			; (mov r8, r8)
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
