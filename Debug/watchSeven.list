
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f0  0800a3f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f0  0800a3f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f8  0800a3f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  2000000c  0800a40c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  0800a40c  000213e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000238e2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c07  00000000  00000000  00043916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00047520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00048ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0f7  00000000  00000000  0004a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca7f  00000000  00000000  000671af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b330c  00000000  00000000  00083c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136f3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  00136f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a05c 	.word	0x0800a05c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800a05c 	.word	0x0800a05c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f81e 	bl	8000460 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_f2uiz>:
 8000430:	219e      	movs	r1, #158	; 0x9e
 8000432:	b510      	push	{r4, lr}
 8000434:	05c9      	lsls	r1, r1, #23
 8000436:	1c04      	adds	r4, r0, #0
 8000438:	f001 ff5c 	bl	80022f4 <__aeabi_fcmpge>
 800043c:	2800      	cmp	r0, #0
 800043e:	d103      	bne.n	8000448 <__aeabi_f2uiz+0x18>
 8000440:	1c20      	adds	r0, r4, #0
 8000442:	f000 fe63 	bl	800110c <__aeabi_f2iz>
 8000446:	bd10      	pop	{r4, pc}
 8000448:	219e      	movs	r1, #158	; 0x9e
 800044a:	1c20      	adds	r0, r4, #0
 800044c:	05c9      	lsls	r1, r1, #23
 800044e:	f000 fc95 	bl	8000d7c <__aeabi_fsub>
 8000452:	f000 fe5b 	bl	800110c <__aeabi_f2iz>
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	061b      	lsls	r3, r3, #24
 800045a:	469c      	mov	ip, r3
 800045c:	4460      	add	r0, ip
 800045e:	e7f2      	b.n	8000446 <__aeabi_f2uiz+0x16>

08000460 <__udivmoddi4>:
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	4657      	mov	r7, sl
 8000464:	464e      	mov	r6, r9
 8000466:	4645      	mov	r5, r8
 8000468:	46de      	mov	lr, fp
 800046a:	b5e0      	push	{r5, r6, r7, lr}
 800046c:	0004      	movs	r4, r0
 800046e:	000d      	movs	r5, r1
 8000470:	4692      	mov	sl, r2
 8000472:	4699      	mov	r9, r3
 8000474:	b083      	sub	sp, #12
 8000476:	428b      	cmp	r3, r1
 8000478:	d830      	bhi.n	80004dc <__udivmoddi4+0x7c>
 800047a:	d02d      	beq.n	80004d8 <__udivmoddi4+0x78>
 800047c:	4649      	mov	r1, r9
 800047e:	4650      	mov	r0, sl
 8000480:	f001 ff60 	bl	8002344 <__clzdi2>
 8000484:	0029      	movs	r1, r5
 8000486:	0006      	movs	r6, r0
 8000488:	0020      	movs	r0, r4
 800048a:	f001 ff5b 	bl	8002344 <__clzdi2>
 800048e:	1a33      	subs	r3, r6, r0
 8000490:	4698      	mov	r8, r3
 8000492:	3b20      	subs	r3, #32
 8000494:	469b      	mov	fp, r3
 8000496:	d433      	bmi.n	8000500 <__udivmoddi4+0xa0>
 8000498:	465a      	mov	r2, fp
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	4642      	mov	r2, r8
 80004a0:	001f      	movs	r7, r3
 80004a2:	4653      	mov	r3, sl
 80004a4:	4093      	lsls	r3, r2
 80004a6:	001e      	movs	r6, r3
 80004a8:	42af      	cmp	r7, r5
 80004aa:	d83a      	bhi.n	8000522 <__udivmoddi4+0xc2>
 80004ac:	42af      	cmp	r7, r5
 80004ae:	d100      	bne.n	80004b2 <__udivmoddi4+0x52>
 80004b0:	e078      	b.n	80005a4 <__udivmoddi4+0x144>
 80004b2:	465b      	mov	r3, fp
 80004b4:	1ba4      	subs	r4, r4, r6
 80004b6:	41bd      	sbcs	r5, r7
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	da00      	bge.n	80004be <__udivmoddi4+0x5e>
 80004bc:	e075      	b.n	80005aa <__udivmoddi4+0x14a>
 80004be:	2200      	movs	r2, #0
 80004c0:	2300      	movs	r3, #0
 80004c2:	9200      	str	r2, [sp, #0]
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	465a      	mov	r2, fp
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	4642      	mov	r2, r8
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	e028      	b.n	800052a <__udivmoddi4+0xca>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d9cf      	bls.n	800047c <__udivmoddi4+0x1c>
 80004dc:	2200      	movs	r2, #0
 80004de:	2300      	movs	r3, #0
 80004e0:	9200      	str	r2, [sp, #0]
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <__udivmoddi4+0x8e>
 80004ea:	601c      	str	r4, [r3, #0]
 80004ec:	605d      	str	r5, [r3, #4]
 80004ee:	9800      	ldr	r0, [sp, #0]
 80004f0:	9901      	ldr	r1, [sp, #4]
 80004f2:	b003      	add	sp, #12
 80004f4:	bcf0      	pop	{r4, r5, r6, r7}
 80004f6:	46bb      	mov	fp, r7
 80004f8:	46b2      	mov	sl, r6
 80004fa:	46a9      	mov	r9, r5
 80004fc:	46a0      	mov	r8, r4
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000500:	4642      	mov	r2, r8
 8000502:	2320      	movs	r3, #32
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	4652      	mov	r2, sl
 8000508:	40da      	lsrs	r2, r3
 800050a:	4641      	mov	r1, r8
 800050c:	0013      	movs	r3, r2
 800050e:	464a      	mov	r2, r9
 8000510:	408a      	lsls	r2, r1
 8000512:	0017      	movs	r7, r2
 8000514:	4642      	mov	r2, r8
 8000516:	431f      	orrs	r7, r3
 8000518:	4653      	mov	r3, sl
 800051a:	4093      	lsls	r3, r2
 800051c:	001e      	movs	r6, r3
 800051e:	42af      	cmp	r7, r5
 8000520:	d9c4      	bls.n	80004ac <__udivmoddi4+0x4c>
 8000522:	2200      	movs	r2, #0
 8000524:	2300      	movs	r3, #0
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	4643      	mov	r3, r8
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0d9      	beq.n	80004e4 <__udivmoddi4+0x84>
 8000530:	07fb      	lsls	r3, r7, #31
 8000532:	0872      	lsrs	r2, r6, #1
 8000534:	431a      	orrs	r2, r3
 8000536:	4646      	mov	r6, r8
 8000538:	087b      	lsrs	r3, r7, #1
 800053a:	e00e      	b.n	800055a <__udivmoddi4+0xfa>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d101      	bne.n	8000544 <__udivmoddi4+0xe4>
 8000540:	42a2      	cmp	r2, r4
 8000542:	d80c      	bhi.n	800055e <__udivmoddi4+0xfe>
 8000544:	1aa4      	subs	r4, r4, r2
 8000546:	419d      	sbcs	r5, r3
 8000548:	2001      	movs	r0, #1
 800054a:	1924      	adds	r4, r4, r4
 800054c:	416d      	adcs	r5, r5
 800054e:	2100      	movs	r1, #0
 8000550:	3e01      	subs	r6, #1
 8000552:	1824      	adds	r4, r4, r0
 8000554:	414d      	adcs	r5, r1
 8000556:	2e00      	cmp	r6, #0
 8000558:	d006      	beq.n	8000568 <__udivmoddi4+0x108>
 800055a:	42ab      	cmp	r3, r5
 800055c:	d9ee      	bls.n	800053c <__udivmoddi4+0xdc>
 800055e:	3e01      	subs	r6, #1
 8000560:	1924      	adds	r4, r4, r4
 8000562:	416d      	adcs	r5, r5
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1f8      	bne.n	800055a <__udivmoddi4+0xfa>
 8000568:	9800      	ldr	r0, [sp, #0]
 800056a:	9901      	ldr	r1, [sp, #4]
 800056c:	465b      	mov	r3, fp
 800056e:	1900      	adds	r0, r0, r4
 8000570:	4169      	adcs	r1, r5
 8000572:	2b00      	cmp	r3, #0
 8000574:	db24      	blt.n	80005c0 <__udivmoddi4+0x160>
 8000576:	002b      	movs	r3, r5
 8000578:	465a      	mov	r2, fp
 800057a:	4644      	mov	r4, r8
 800057c:	40d3      	lsrs	r3, r2
 800057e:	002a      	movs	r2, r5
 8000580:	40e2      	lsrs	r2, r4
 8000582:	001c      	movs	r4, r3
 8000584:	465b      	mov	r3, fp
 8000586:	0015      	movs	r5, r2
 8000588:	2b00      	cmp	r3, #0
 800058a:	db2a      	blt.n	80005e2 <__udivmoddi4+0x182>
 800058c:	0026      	movs	r6, r4
 800058e:	409e      	lsls	r6, r3
 8000590:	0033      	movs	r3, r6
 8000592:	0026      	movs	r6, r4
 8000594:	4647      	mov	r7, r8
 8000596:	40be      	lsls	r6, r7
 8000598:	0032      	movs	r2, r6
 800059a:	1a80      	subs	r0, r0, r2
 800059c:	4199      	sbcs	r1, r3
 800059e:	9000      	str	r0, [sp, #0]
 80005a0:	9101      	str	r1, [sp, #4]
 80005a2:	e79f      	b.n	80004e4 <__udivmoddi4+0x84>
 80005a4:	42a3      	cmp	r3, r4
 80005a6:	d8bc      	bhi.n	8000522 <__udivmoddi4+0xc2>
 80005a8:	e783      	b.n	80004b2 <__udivmoddi4+0x52>
 80005aa:	4642      	mov	r2, r8
 80005ac:	2320      	movs	r3, #32
 80005ae:	2100      	movs	r1, #0
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	2200      	movs	r2, #0
 80005b4:	9100      	str	r1, [sp, #0]
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	e786      	b.n	80004ce <__udivmoddi4+0x6e>
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	4646      	mov	r6, r8
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0023      	movs	r3, r4
 80005ce:	40f3      	lsrs	r3, r6
 80005d0:	4644      	mov	r4, r8
 80005d2:	4313      	orrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dad4      	bge.n	800058c <__udivmoddi4+0x12c>
 80005e2:	4642      	mov	r2, r8
 80005e4:	002f      	movs	r7, r5
 80005e6:	2320      	movs	r3, #32
 80005e8:	0026      	movs	r6, r4
 80005ea:	4097      	lsls	r7, r2
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	40de      	lsrs	r6, r3
 80005f0:	003b      	movs	r3, r7
 80005f2:	4333      	orrs	r3, r6
 80005f4:	e7cd      	b.n	8000592 <__udivmoddi4+0x132>
 80005f6:	46c0      	nop			; (mov r8, r8)

080005f8 <__aeabi_fadd>:
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	4646      	mov	r6, r8
 80005fc:	46d6      	mov	lr, sl
 80005fe:	464f      	mov	r7, r9
 8000600:	024d      	lsls	r5, r1, #9
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	b5c0      	push	{r6, r7, lr}
 8000606:	0a52      	lsrs	r2, r2, #9
 8000608:	0a6e      	lsrs	r6, r5, #9
 800060a:	0047      	lsls	r7, r0, #1
 800060c:	46b0      	mov	r8, r6
 800060e:	0e3f      	lsrs	r7, r7, #24
 8000610:	004e      	lsls	r6, r1, #1
 8000612:	0fc4      	lsrs	r4, r0, #31
 8000614:	00d0      	lsls	r0, r2, #3
 8000616:	4694      	mov	ip, r2
 8000618:	003b      	movs	r3, r7
 800061a:	4682      	mov	sl, r0
 800061c:	0e36      	lsrs	r6, r6, #24
 800061e:	0fc9      	lsrs	r1, r1, #31
 8000620:	09ad      	lsrs	r5, r5, #6
 8000622:	428c      	cmp	r4, r1
 8000624:	d06d      	beq.n	8000702 <__aeabi_fadd+0x10a>
 8000626:	1bb8      	subs	r0, r7, r6
 8000628:	4681      	mov	r9, r0
 800062a:	2800      	cmp	r0, #0
 800062c:	dd4d      	ble.n	80006ca <__aeabi_fadd+0xd2>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x3c>
 8000632:	e088      	b.n	8000746 <__aeabi_fadd+0x14e>
 8000634:	2fff      	cmp	r7, #255	; 0xff
 8000636:	d05a      	beq.n	80006ee <__aeabi_fadd+0xf6>
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	04db      	lsls	r3, r3, #19
 800063c:	431d      	orrs	r5, r3
 800063e:	464b      	mov	r3, r9
 8000640:	2201      	movs	r2, #1
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dc0a      	bgt.n	800065c <__aeabi_fadd+0x64>
 8000646:	002b      	movs	r3, r5
 8000648:	464a      	mov	r2, r9
 800064a:	4649      	mov	r1, r9
 800064c:	40d3      	lsrs	r3, r2
 800064e:	2220      	movs	r2, #32
 8000650:	1a52      	subs	r2, r2, r1
 8000652:	4095      	lsls	r5, r2
 8000654:	002a      	movs	r2, r5
 8000656:	1e55      	subs	r5, r2, #1
 8000658:	41aa      	sbcs	r2, r5
 800065a:	431a      	orrs	r2, r3
 800065c:	4653      	mov	r3, sl
 800065e:	1a9a      	subs	r2, r3, r2
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d400      	bmi.n	8000666 <__aeabi_fadd+0x6e>
 8000664:	e0b9      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000666:	0192      	lsls	r2, r2, #6
 8000668:	0996      	lsrs	r6, r2, #6
 800066a:	0030      	movs	r0, r6
 800066c:	f001 fe4c 	bl	8002308 <__clzsi2>
 8000670:	3805      	subs	r0, #5
 8000672:	4086      	lsls	r6, r0
 8000674:	4287      	cmp	r7, r0
 8000676:	dd00      	ble.n	800067a <__aeabi_fadd+0x82>
 8000678:	e0d4      	b.n	8000824 <__aeabi_fadd+0x22c>
 800067a:	0033      	movs	r3, r6
 800067c:	1bc7      	subs	r7, r0, r7
 800067e:	2020      	movs	r0, #32
 8000680:	3701      	adds	r7, #1
 8000682:	40fb      	lsrs	r3, r7
 8000684:	1bc7      	subs	r7, r0, r7
 8000686:	40be      	lsls	r6, r7
 8000688:	0032      	movs	r2, r6
 800068a:	1e56      	subs	r6, r2, #1
 800068c:	41b2      	sbcs	r2, r6
 800068e:	2700      	movs	r7, #0
 8000690:	431a      	orrs	r2, r3
 8000692:	0753      	lsls	r3, r2, #29
 8000694:	d004      	beq.n	80006a0 <__aeabi_fadd+0xa8>
 8000696:	230f      	movs	r3, #15
 8000698:	4013      	ands	r3, r2
 800069a:	2b04      	cmp	r3, #4
 800069c:	d000      	beq.n	80006a0 <__aeabi_fadd+0xa8>
 800069e:	3204      	adds	r2, #4
 80006a0:	0153      	lsls	r3, r2, #5
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_fadd+0xae>
 80006a4:	e09c      	b.n	80007e0 <__aeabi_fadd+0x1e8>
 80006a6:	1c7b      	adds	r3, r7, #1
 80006a8:	2ffe      	cmp	r7, #254	; 0xfe
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0xb6>
 80006ac:	e09a      	b.n	80007e4 <__aeabi_fadd+0x1ec>
 80006ae:	0192      	lsls	r2, r2, #6
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	4694      	mov	ip, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	05d8      	lsls	r0, r3, #23
 80006b8:	4663      	mov	r3, ip
 80006ba:	07e4      	lsls	r4, r4, #31
 80006bc:	4318      	orrs	r0, r3
 80006be:	4320      	orrs	r0, r4
 80006c0:	bce0      	pop	{r5, r6, r7}
 80006c2:	46ba      	mov	sl, r7
 80006c4:	46b1      	mov	r9, r6
 80006c6:	46a8      	mov	r8, r5
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d049      	beq.n	8000762 <__aeabi_fadd+0x16a>
 80006ce:	1bf3      	subs	r3, r6, r7
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0xde>
 80006d4:	e0b6      	b.n	8000844 <__aeabi_fadd+0x24c>
 80006d6:	4652      	mov	r2, sl
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d060      	beq.n	800079e <__aeabi_fadd+0x1a6>
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0xec>
 80006e2:	e0fc      	b.n	80008de <__aeabi_fadd+0x2e6>
 80006e4:	2eff      	cmp	r6, #255	; 0xff
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0xf2>
 80006e8:	e0b4      	b.n	8000854 <__aeabi_fadd+0x25c>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d078      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 80006f2:	2080      	movs	r0, #128	; 0x80
 80006f4:	03c0      	lsls	r0, r0, #15
 80006f6:	4310      	orrs	r0, r2
 80006f8:	0242      	lsls	r2, r0, #9
 80006fa:	0a53      	lsrs	r3, r2, #9
 80006fc:	469c      	mov	ip, r3
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	e7d9      	b.n	80006b6 <__aeabi_fadd+0xbe>
 8000702:	1bb9      	subs	r1, r7, r6
 8000704:	2900      	cmp	r1, #0
 8000706:	dd71      	ble.n	80007ec <__aeabi_fadd+0x1f4>
 8000708:	2e00      	cmp	r6, #0
 800070a:	d03f      	beq.n	800078c <__aeabi_fadd+0x194>
 800070c:	2fff      	cmp	r7, #255	; 0xff
 800070e:	d0ee      	beq.n	80006ee <__aeabi_fadd+0xf6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	431d      	orrs	r5, r3
 8000716:	2201      	movs	r2, #1
 8000718:	291b      	cmp	r1, #27
 800071a:	dc07      	bgt.n	800072c <__aeabi_fadd+0x134>
 800071c:	002a      	movs	r2, r5
 800071e:	2320      	movs	r3, #32
 8000720:	40ca      	lsrs	r2, r1
 8000722:	1a59      	subs	r1, r3, r1
 8000724:	408d      	lsls	r5, r1
 8000726:	1e6b      	subs	r3, r5, #1
 8000728:	419d      	sbcs	r5, r3
 800072a:	432a      	orrs	r2, r5
 800072c:	4452      	add	r2, sl
 800072e:	0153      	lsls	r3, r2, #5
 8000730:	d553      	bpl.n	80007da <__aeabi_fadd+0x1e2>
 8000732:	3701      	adds	r7, #1
 8000734:	2fff      	cmp	r7, #255	; 0xff
 8000736:	d055      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 8000738:	2301      	movs	r3, #1
 800073a:	497b      	ldr	r1, [pc, #492]	; (8000928 <__aeabi_fadd+0x330>)
 800073c:	4013      	ands	r3, r2
 800073e:	0852      	lsrs	r2, r2, #1
 8000740:	400a      	ands	r2, r1
 8000742:	431a      	orrs	r2, r3
 8000744:	e7a5      	b.n	8000692 <__aeabi_fadd+0x9a>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d02c      	beq.n	80007a4 <__aeabi_fadd+0x1ac>
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	469c      	mov	ip, r3
 8000750:	44e1      	add	r9, ip
 8000752:	464b      	mov	r3, r9
 8000754:	2b00      	cmp	r3, #0
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x162>
 8000758:	e0ad      	b.n	80008b6 <__aeabi_fadd+0x2be>
 800075a:	2fff      	cmp	r7, #255	; 0xff
 800075c:	d000      	beq.n	8000760 <__aeabi_fadd+0x168>
 800075e:	e76e      	b.n	800063e <__aeabi_fadd+0x46>
 8000760:	e7c5      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000762:	20fe      	movs	r0, #254	; 0xfe
 8000764:	1c7e      	adds	r6, r7, #1
 8000766:	4230      	tst	r0, r6
 8000768:	d160      	bne.n	800082c <__aeabi_fadd+0x234>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x178>
 800076e:	e093      	b.n	8000898 <__aeabi_fadd+0x2a0>
 8000770:	4652      	mov	r2, sl
 8000772:	2a00      	cmp	r2, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x180>
 8000776:	e0b6      	b.n	80008e6 <__aeabi_fadd+0x2ee>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d09c      	beq.n	80006b6 <__aeabi_fadd+0xbe>
 800077c:	1b52      	subs	r2, r2, r5
 800077e:	0150      	lsls	r0, r2, #5
 8000780:	d400      	bmi.n	8000784 <__aeabi_fadd+0x18c>
 8000782:	e0c3      	b.n	800090c <__aeabi_fadd+0x314>
 8000784:	4653      	mov	r3, sl
 8000786:	000c      	movs	r4, r1
 8000788:	1aea      	subs	r2, r5, r3
 800078a:	e782      	b.n	8000692 <__aeabi_fadd+0x9a>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d009      	beq.n	80007a4 <__aeabi_fadd+0x1ac>
 8000790:	3901      	subs	r1, #1
 8000792:	2900      	cmp	r1, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x1a0>
 8000796:	e08b      	b.n	80008b0 <__aeabi_fadd+0x2b8>
 8000798:	2fff      	cmp	r7, #255	; 0xff
 800079a:	d1bc      	bne.n	8000716 <__aeabi_fadd+0x11e>
 800079c:	e7a7      	b.n	80006ee <__aeabi_fadd+0xf6>
 800079e:	000c      	movs	r4, r1
 80007a0:	4642      	mov	r2, r8
 80007a2:	0037      	movs	r7, r6
 80007a4:	2fff      	cmp	r7, #255	; 0xff
 80007a6:	d0a2      	beq.n	80006ee <__aeabi_fadd+0xf6>
 80007a8:	0252      	lsls	r2, r2, #9
 80007aa:	0a53      	lsrs	r3, r2, #9
 80007ac:	469c      	mov	ip, r3
 80007ae:	b2fb      	uxtb	r3, r7
 80007b0:	e781      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007b2:	21fe      	movs	r1, #254	; 0xfe
 80007b4:	3701      	adds	r7, #1
 80007b6:	4239      	tst	r1, r7
 80007b8:	d165      	bne.n	8000886 <__aeabi_fadd+0x28e>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d17e      	bne.n	80008bc <__aeabi_fadd+0x2c4>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x1cc>
 80007c2:	e0aa      	b.n	800091a <__aeabi_fadd+0x322>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x1d2>
 80007c8:	e775      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007ca:	002a      	movs	r2, r5
 80007cc:	4452      	add	r2, sl
 80007ce:	2700      	movs	r7, #0
 80007d0:	0153      	lsls	r3, r2, #5
 80007d2:	d502      	bpl.n	80007da <__aeabi_fadd+0x1e2>
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <__aeabi_fadd+0x334>)
 80007d6:	3701      	adds	r7, #1
 80007d8:	401a      	ands	r2, r3
 80007da:	0753      	lsls	r3, r2, #29
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x1e8>
 80007de:	e75a      	b.n	8000696 <__aeabi_fadd+0x9e>
 80007e0:	08d2      	lsrs	r2, r2, #3
 80007e2:	e7df      	b.n	80007a4 <__aeabi_fadd+0x1ac>
 80007e4:	2200      	movs	r2, #0
 80007e6:	23ff      	movs	r3, #255	; 0xff
 80007e8:	4694      	mov	ip, r2
 80007ea:	e764      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d0e0      	beq.n	80007b2 <__aeabi_fadd+0x1ba>
 80007f0:	1bf3      	subs	r3, r6, r7
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d03e      	beq.n	8000874 <__aeabi_fadd+0x27c>
 80007f6:	2eff      	cmp	r6, #255	; 0xff
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x204>
 80007fa:	e777      	b.n	80006ec <__aeabi_fadd+0xf4>
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0001      	movs	r1, r0
 8000800:	04d2      	lsls	r2, r2, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	468a      	mov	sl, r1
 8000806:	2201      	movs	r2, #1
 8000808:	2b1b      	cmp	r3, #27
 800080a:	dc08      	bgt.n	800081e <__aeabi_fadd+0x226>
 800080c:	4652      	mov	r2, sl
 800080e:	2120      	movs	r1, #32
 8000810:	4650      	mov	r0, sl
 8000812:	40da      	lsrs	r2, r3
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	4098      	lsls	r0, r3
 8000818:	1e43      	subs	r3, r0, #1
 800081a:	4198      	sbcs	r0, r3
 800081c:	4302      	orrs	r2, r0
 800081e:	0037      	movs	r7, r6
 8000820:	1952      	adds	r2, r2, r5
 8000822:	e784      	b.n	800072e <__aeabi_fadd+0x136>
 8000824:	4a41      	ldr	r2, [pc, #260]	; (800092c <__aeabi_fadd+0x334>)
 8000826:	1a3f      	subs	r7, r7, r0
 8000828:	4032      	ands	r2, r6
 800082a:	e732      	b.n	8000692 <__aeabi_fadd+0x9a>
 800082c:	4653      	mov	r3, sl
 800082e:	1b5e      	subs	r6, r3, r5
 8000830:	0173      	lsls	r3, r6, #5
 8000832:	d42d      	bmi.n	8000890 <__aeabi_fadd+0x298>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d000      	beq.n	800083a <__aeabi_fadd+0x242>
 8000838:	e717      	b.n	800066a <__aeabi_fadd+0x72>
 800083a:	2200      	movs	r2, #0
 800083c:	2400      	movs	r4, #0
 800083e:	2300      	movs	r3, #0
 8000840:	4694      	mov	ip, r2
 8000842:	e738      	b.n	80006b6 <__aeabi_fadd+0xbe>
 8000844:	2eff      	cmp	r6, #255	; 0xff
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x252>
 8000848:	e74f      	b.n	80006ea <__aeabi_fadd+0xf2>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	4650      	mov	r0, sl
 800084e:	04d2      	lsls	r2, r2, #19
 8000850:	4310      	orrs	r0, r2
 8000852:	4682      	mov	sl, r0
 8000854:	2201      	movs	r2, #1
 8000856:	2b1b      	cmp	r3, #27
 8000858:	dc08      	bgt.n	800086c <__aeabi_fadd+0x274>
 800085a:	4652      	mov	r2, sl
 800085c:	2420      	movs	r4, #32
 800085e:	4650      	mov	r0, sl
 8000860:	40da      	lsrs	r2, r3
 8000862:	1ae3      	subs	r3, r4, r3
 8000864:	4098      	lsls	r0, r3
 8000866:	1e43      	subs	r3, r0, #1
 8000868:	4198      	sbcs	r0, r3
 800086a:	4302      	orrs	r2, r0
 800086c:	000c      	movs	r4, r1
 800086e:	0037      	movs	r7, r6
 8000870:	1aaa      	subs	r2, r5, r2
 8000872:	e6f5      	b.n	8000660 <__aeabi_fadd+0x68>
 8000874:	2800      	cmp	r0, #0
 8000876:	d093      	beq.n	80007a0 <__aeabi_fadd+0x1a8>
 8000878:	3b01      	subs	r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d04f      	beq.n	800091e <__aeabi_fadd+0x326>
 800087e:	2eff      	cmp	r6, #255	; 0xff
 8000880:	d1c1      	bne.n	8000806 <__aeabi_fadd+0x20e>
 8000882:	4642      	mov	r2, r8
 8000884:	e733      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000886:	2fff      	cmp	r7, #255	; 0xff
 8000888:	d0ac      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 800088a:	4455      	add	r5, sl
 800088c:	086a      	lsrs	r2, r5, #1
 800088e:	e7a4      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000890:	4653      	mov	r3, sl
 8000892:	000c      	movs	r4, r1
 8000894:	1aee      	subs	r6, r5, r3
 8000896:	e6e8      	b.n	800066a <__aeabi_fadd+0x72>
 8000898:	4653      	mov	r3, sl
 800089a:	2b00      	cmp	r3, #0
 800089c:	d128      	bne.n	80008f0 <__aeabi_fadd+0x2f8>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fadd+0x2ac>
 80008a2:	e722      	b.n	80006ea <__aeabi_fadd+0xf2>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	469c      	mov	ip, r3
 80008aa:	2400      	movs	r4, #0
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	e702      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80008b0:	002a      	movs	r2, r5
 80008b2:	4452      	add	r2, sl
 80008b4:	e73b      	b.n	800072e <__aeabi_fadd+0x136>
 80008b6:	4653      	mov	r3, sl
 80008b8:	1b5a      	subs	r2, r3, r5
 80008ba:	e6d1      	b.n	8000660 <__aeabi_fadd+0x68>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x2ca>
 80008c0:	e714      	b.n	80006ec <__aeabi_fadd+0xf4>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x2d0>
 80008c6:	e712      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	421a      	tst	r2, r3
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x2da>
 80008d0:	e70d      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008d2:	4641      	mov	r1, r8
 80008d4:	4219      	tst	r1, r3
 80008d6:	d000      	beq.n	80008da <__aeabi_fadd+0x2e2>
 80008d8:	e709      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008da:	4642      	mov	r2, r8
 80008dc:	e707      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008de:	000c      	movs	r4, r1
 80008e0:	0037      	movs	r7, r6
 80008e2:	1aaa      	subs	r2, r5, r2
 80008e4:	e6bc      	b.n	8000660 <__aeabi_fadd+0x68>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d013      	beq.n	8000912 <__aeabi_fadd+0x31a>
 80008ea:	000c      	movs	r4, r1
 80008ec:	46c4      	mov	ip, r8
 80008ee:	e6e2      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2fe>
 80008f4:	e6fb      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	03db      	lsls	r3, r3, #15
 80008fa:	421a      	tst	r2, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x308>
 80008fe:	e6f6      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000900:	4640      	mov	r0, r8
 8000902:	4218      	tst	r0, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_fadd+0x310>
 8000906:	e6f2      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000908:	000c      	movs	r4, r1
 800090a:	e6ef      	b.n	80006ec <__aeabi_fadd+0xf4>
 800090c:	2a00      	cmp	r2, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x31a>
 8000910:	e763      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000912:	2200      	movs	r2, #0
 8000914:	2400      	movs	r4, #0
 8000916:	4694      	mov	ip, r2
 8000918:	e6cd      	b.n	80006b6 <__aeabi_fadd+0xbe>
 800091a:	46c4      	mov	ip, r8
 800091c:	e6cb      	b.n	80006b6 <__aeabi_fadd+0xbe>
 800091e:	002a      	movs	r2, r5
 8000920:	0037      	movs	r7, r6
 8000922:	4452      	add	r2, sl
 8000924:	e703      	b.n	800072e <__aeabi_fadd+0x136>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	7dffffff 	.word	0x7dffffff
 800092c:	fbffffff 	.word	0xfbffffff

08000930 <__aeabi_fdiv>:
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	464f      	mov	r7, r9
 8000934:	4646      	mov	r6, r8
 8000936:	46d6      	mov	lr, sl
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	b5c0      	push	{r6, r7, lr}
 800093c:	0047      	lsls	r7, r0, #1
 800093e:	1c0c      	adds	r4, r1, #0
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0e3f      	lsrs	r7, r7, #24
 8000944:	0fc6      	lsrs	r6, r0, #31
 8000946:	2f00      	cmp	r7, #0
 8000948:	d066      	beq.n	8000a18 <__aeabi_fdiv+0xe8>
 800094a:	2fff      	cmp	r7, #255	; 0xff
 800094c:	d06c      	beq.n	8000a28 <__aeabi_fdiv+0xf8>
 800094e:	2300      	movs	r3, #0
 8000950:	00ea      	lsls	r2, r5, #3
 8000952:	2580      	movs	r5, #128	; 0x80
 8000954:	4699      	mov	r9, r3
 8000956:	469a      	mov	sl, r3
 8000958:	04ed      	lsls	r5, r5, #19
 800095a:	4315      	orrs	r5, r2
 800095c:	3f7f      	subs	r7, #127	; 0x7f
 800095e:	0260      	lsls	r0, r4, #9
 8000960:	0061      	lsls	r1, r4, #1
 8000962:	0a43      	lsrs	r3, r0, #9
 8000964:	4698      	mov	r8, r3
 8000966:	0e09      	lsrs	r1, r1, #24
 8000968:	0fe4      	lsrs	r4, r4, #31
 800096a:	2900      	cmp	r1, #0
 800096c:	d048      	beq.n	8000a00 <__aeabi_fdiv+0xd0>
 800096e:	29ff      	cmp	r1, #255	; 0xff
 8000970:	d010      	beq.n	8000994 <__aeabi_fdiv+0x64>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	00d8      	lsls	r0, r3, #3
 8000976:	04d2      	lsls	r2, r2, #19
 8000978:	4302      	orrs	r2, r0
 800097a:	4690      	mov	r8, r2
 800097c:	2000      	movs	r0, #0
 800097e:	397f      	subs	r1, #127	; 0x7f
 8000980:	464a      	mov	r2, r9
 8000982:	0033      	movs	r3, r6
 8000984:	1a7f      	subs	r7, r7, r1
 8000986:	4302      	orrs	r2, r0
 8000988:	496c      	ldr	r1, [pc, #432]	; (8000b3c <__aeabi_fdiv+0x20c>)
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	588a      	ldr	r2, [r1, r2]
 800098e:	4063      	eors	r3, r4
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4697      	mov	pc, r2
 8000994:	2b00      	cmp	r3, #0
 8000996:	d16d      	bne.n	8000a74 <__aeabi_fdiv+0x144>
 8000998:	2002      	movs	r0, #2
 800099a:	3fff      	subs	r7, #255	; 0xff
 800099c:	e033      	b.n	8000a06 <__aeabi_fdiv+0xd6>
 800099e:	2300      	movs	r3, #0
 80009a0:	4698      	mov	r8, r3
 80009a2:	0026      	movs	r6, r4
 80009a4:	4645      	mov	r5, r8
 80009a6:	4682      	mov	sl, r0
 80009a8:	4653      	mov	r3, sl
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fdiv+0x80>
 80009ae:	e07f      	b.n	8000ab0 <__aeabi_fdiv+0x180>
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fdiv+0x86>
 80009b4:	e094      	b.n	8000ae0 <__aeabi_fdiv+0x1b0>
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d017      	beq.n	80009ea <__aeabi_fdiv+0xba>
 80009ba:	0038      	movs	r0, r7
 80009bc:	307f      	adds	r0, #127	; 0x7f
 80009be:	2800      	cmp	r0, #0
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fdiv+0x152>
 80009c2:	076b      	lsls	r3, r5, #29
 80009c4:	d004      	beq.n	80009d0 <__aeabi_fdiv+0xa0>
 80009c6:	230f      	movs	r3, #15
 80009c8:	402b      	ands	r3, r5
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fdiv+0xa0>
 80009ce:	3504      	adds	r5, #4
 80009d0:	012b      	lsls	r3, r5, #4
 80009d2:	d503      	bpl.n	80009dc <__aeabi_fdiv+0xac>
 80009d4:	0038      	movs	r0, r7
 80009d6:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <__aeabi_fdiv+0x210>)
 80009d8:	3080      	adds	r0, #128	; 0x80
 80009da:	401d      	ands	r5, r3
 80009dc:	28fe      	cmp	r0, #254	; 0xfe
 80009de:	dc67      	bgt.n	8000ab0 <__aeabi_fdiv+0x180>
 80009e0:	01ad      	lsls	r5, r5, #6
 80009e2:	0a6d      	lsrs	r5, r5, #9
 80009e4:	b2c0      	uxtb	r0, r0
 80009e6:	e002      	b.n	80009ee <__aeabi_fdiv+0xbe>
 80009e8:	001e      	movs	r6, r3
 80009ea:	2000      	movs	r0, #0
 80009ec:	2500      	movs	r5, #0
 80009ee:	05c0      	lsls	r0, r0, #23
 80009f0:	4328      	orrs	r0, r5
 80009f2:	07f6      	lsls	r6, r6, #31
 80009f4:	4330      	orrs	r0, r6
 80009f6:	bce0      	pop	{r5, r6, r7}
 80009f8:	46ba      	mov	sl, r7
 80009fa:	46b1      	mov	r9, r6
 80009fc:	46a8      	mov	r8, r5
 80009fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12b      	bne.n	8000a5c <__aeabi_fdiv+0x12c>
 8000a04:	2001      	movs	r0, #1
 8000a06:	464a      	mov	r2, r9
 8000a08:	0033      	movs	r3, r6
 8000a0a:	494e      	ldr	r1, [pc, #312]	; (8000b44 <__aeabi_fdiv+0x214>)
 8000a0c:	4302      	orrs	r2, r0
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	588a      	ldr	r2, [r1, r2]
 8000a12:	4063      	eors	r3, r4
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4697      	mov	pc, r2
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d113      	bne.n	8000a44 <__aeabi_fdiv+0x114>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	4699      	mov	r9, r3
 8000a20:	3b03      	subs	r3, #3
 8000a22:	2700      	movs	r7, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	e79a      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d105      	bne.n	8000a38 <__aeabi_fdiv+0x108>
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	4699      	mov	r9, r3
 8000a30:	3b06      	subs	r3, #6
 8000a32:	27ff      	movs	r7, #255	; 0xff
 8000a34:	469a      	mov	sl, r3
 8000a36:	e792      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	3b09      	subs	r3, #9
 8000a3e:	27ff      	movs	r7, #255	; 0xff
 8000a40:	469a      	mov	sl, r3
 8000a42:	e78c      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a44:	0028      	movs	r0, r5
 8000a46:	f001 fc5f 	bl	8002308 <__clzsi2>
 8000a4a:	2776      	movs	r7, #118	; 0x76
 8000a4c:	1f43      	subs	r3, r0, #5
 8000a4e:	409d      	lsls	r5, r3
 8000a50:	2300      	movs	r3, #0
 8000a52:	427f      	negs	r7, r7
 8000a54:	4699      	mov	r9, r3
 8000a56:	469a      	mov	sl, r3
 8000a58:	1a3f      	subs	r7, r7, r0
 8000a5a:	e780      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fc53 	bl	8002308 <__clzsi2>
 8000a62:	4642      	mov	r2, r8
 8000a64:	1f43      	subs	r3, r0, #5
 8000a66:	2176      	movs	r1, #118	; 0x76
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	4690      	mov	r8, r2
 8000a70:	2000      	movs	r0, #0
 8000a72:	e785      	b.n	8000980 <__aeabi_fdiv+0x50>
 8000a74:	21ff      	movs	r1, #255	; 0xff
 8000a76:	2003      	movs	r0, #3
 8000a78:	e782      	b.n	8000980 <__aeabi_fdiv+0x50>
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	2500      	movs	r5, #0
 8000a80:	e7b5      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000a82:	2301      	movs	r3, #1
 8000a84:	1a1b      	subs	r3, r3, r0
 8000a86:	2b1b      	cmp	r3, #27
 8000a88:	dcaf      	bgt.n	80009ea <__aeabi_fdiv+0xba>
 8000a8a:	379e      	adds	r7, #158	; 0x9e
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	40bd      	lsls	r5, r7
 8000a90:	40d9      	lsrs	r1, r3
 8000a92:	1e6a      	subs	r2, r5, #1
 8000a94:	4195      	sbcs	r5, r2
 8000a96:	430d      	orrs	r5, r1
 8000a98:	076b      	lsls	r3, r5, #29
 8000a9a:	d004      	beq.n	8000aa6 <__aeabi_fdiv+0x176>
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	402b      	ands	r3, r5
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fdiv+0x176>
 8000aa4:	3504      	adds	r5, #4
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	d544      	bpl.n	8000b34 <__aeabi_fdiv+0x204>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	2500      	movs	r5, #0
 8000aae:	e79e      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	e79b      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ab6:	2580      	movs	r5, #128	; 0x80
 8000ab8:	2600      	movs	r6, #0
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	03ed      	lsls	r5, r5, #15
 8000abe:	e796      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	03c0      	lsls	r0, r0, #15
 8000ac8:	4205      	tst	r5, r0
 8000aca:	d009      	beq.n	8000ae0 <__aeabi_fdiv+0x1b0>
 8000acc:	4643      	mov	r3, r8
 8000ace:	4203      	tst	r3, r0
 8000ad0:	d106      	bne.n	8000ae0 <__aeabi_fdiv+0x1b0>
 8000ad2:	4645      	mov	r5, r8
 8000ad4:	4305      	orrs	r5, r0
 8000ad6:	026d      	lsls	r5, r5, #9
 8000ad8:	0026      	movs	r6, r4
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	e786      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	03c0      	lsls	r0, r0, #15
 8000ae4:	4305      	orrs	r5, r0
 8000ae6:	026d      	lsls	r5, r5, #9
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	0a6d      	lsrs	r5, r5, #9
 8000aec:	e77f      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000aee:	4641      	mov	r1, r8
 8000af0:	016a      	lsls	r2, r5, #5
 8000af2:	0148      	lsls	r0, r1, #5
 8000af4:	4282      	cmp	r2, r0
 8000af6:	d219      	bcs.n	8000b2c <__aeabi_fdiv+0x1fc>
 8000af8:	211b      	movs	r1, #27
 8000afa:	2500      	movs	r5, #0
 8000afc:	3f01      	subs	r7, #1
 8000afe:	2601      	movs	r6, #1
 8000b00:	0014      	movs	r4, r2
 8000b02:	006d      	lsls	r5, r5, #1
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	db01      	blt.n	8000b0e <__aeabi_fdiv+0x1de>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	d801      	bhi.n	8000b12 <__aeabi_fdiv+0x1e2>
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	4335      	orrs	r5, r6
 8000b12:	3901      	subs	r1, #1
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d1f3      	bne.n	8000b00 <__aeabi_fdiv+0x1d0>
 8000b18:	1e50      	subs	r0, r2, #1
 8000b1a:	4182      	sbcs	r2, r0
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	307f      	adds	r0, #127	; 0x7f
 8000b20:	001e      	movs	r6, r3
 8000b22:	4315      	orrs	r5, r2
 8000b24:	2800      	cmp	r0, #0
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_fdiv+0x1fa>
 8000b28:	e74b      	b.n	80009c2 <__aeabi_fdiv+0x92>
 8000b2a:	e7aa      	b.n	8000a82 <__aeabi_fdiv+0x152>
 8000b2c:	211a      	movs	r1, #26
 8000b2e:	2501      	movs	r5, #1
 8000b30:	1a12      	subs	r2, r2, r0
 8000b32:	e7e4      	b.n	8000afe <__aeabi_fdiv+0x1ce>
 8000b34:	01ad      	lsls	r5, r5, #6
 8000b36:	2000      	movs	r0, #0
 8000b38:	0a6d      	lsrs	r5, r5, #9
 8000b3a:	e758      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000b3c:	0800a0d8 	.word	0x0800a0d8
 8000b40:	f7ffffff 	.word	0xf7ffffff
 8000b44:	0800a118 	.word	0x0800a118

08000b48 <__aeabi_fmul>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	4657      	mov	r7, sl
 8000b4c:	464e      	mov	r6, r9
 8000b4e:	4645      	mov	r5, r8
 8000b50:	46de      	mov	lr, fp
 8000b52:	0244      	lsls	r4, r0, #9
 8000b54:	b5e0      	push	{r5, r6, r7, lr}
 8000b56:	0045      	lsls	r5, r0, #1
 8000b58:	1c0f      	adds	r7, r1, #0
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	0e2d      	lsrs	r5, r5, #24
 8000b5e:	0fc6      	lsrs	r6, r0, #31
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d047      	beq.n	8000bf4 <__aeabi_fmul+0xac>
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d04d      	beq.n	8000c04 <__aeabi_fmul+0xbc>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2080      	movs	r0, #128	; 0x80
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	469b      	mov	fp, r3
 8000b70:	00e4      	lsls	r4, r4, #3
 8000b72:	04c0      	lsls	r0, r0, #19
 8000b74:	4304      	orrs	r4, r0
 8000b76:	3d7f      	subs	r5, #127	; 0x7f
 8000b78:	0278      	lsls	r0, r7, #9
 8000b7a:	0a43      	lsrs	r3, r0, #9
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	007a      	lsls	r2, r7, #1
 8000b80:	0ffb      	lsrs	r3, r7, #31
 8000b82:	4698      	mov	r8, r3
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	464b      	mov	r3, r9
 8000b88:	d044      	beq.n	8000c14 <__aeabi_fmul+0xcc>
 8000b8a:	2aff      	cmp	r2, #255	; 0xff
 8000b8c:	d011      	beq.n	8000bb2 <__aeabi_fmul+0x6a>
 8000b8e:	00d8      	lsls	r0, r3, #3
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4303      	orrs	r3, r0
 8000b96:	4699      	mov	r9, r3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	3a7f      	subs	r2, #127	; 0x7f
 8000b9c:	18ad      	adds	r5, r5, r2
 8000b9e:	4647      	mov	r7, r8
 8000ba0:	4653      	mov	r3, sl
 8000ba2:	4077      	eors	r7, r6
 8000ba4:	1c69      	adds	r1, r5, #1
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d83f      	bhi.n	8000c2a <__aeabi_fmul+0xe2>
 8000baa:	4a72      	ldr	r2, [pc, #456]	; (8000d74 <__aeabi_fmul+0x22c>)
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	469f      	mov	pc, r3
 8000bb2:	35ff      	adds	r5, #255	; 0xff
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fmul+0x72>
 8000bb8:	e079      	b.n	8000cae <__aeabi_fmul+0x166>
 8000bba:	4652      	mov	r2, sl
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	4692      	mov	sl, r2
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	e7eb      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	464c      	mov	r4, r9
 8000bca:	4683      	mov	fp, r0
 8000bcc:	465b      	mov	r3, fp
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d028      	beq.n	8000c24 <__aeabi_fmul+0xdc>
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fmul+0x90>
 8000bd6:	e0c6      	b.n	8000d66 <__aeabi_fmul+0x21e>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d14f      	bne.n	8000c7c <__aeabi_fmul+0x134>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	07ff      	lsls	r7, r7, #31
 8000be4:	4320      	orrs	r0, r4
 8000be6:	4338      	orrs	r0, r7
 8000be8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bea:	46bb      	mov	fp, r7
 8000bec:	46b2      	mov	sl, r6
 8000bee:	46a9      	mov	r9, r5
 8000bf0:	46a0      	mov	r8, r4
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d171      	bne.n	8000cdc <__aeabi_fmul+0x194>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	2500      	movs	r5, #0
 8000c00:	469b      	mov	fp, r3
 8000c02:	e7b9      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d163      	bne.n	8000cd0 <__aeabi_fmul+0x188>
 8000c08:	2308      	movs	r3, #8
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	3b06      	subs	r3, #6
 8000c0e:	25ff      	movs	r5, #255	; 0xff
 8000c10:	469b      	mov	fp, r3
 8000c12:	e7b1      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d150      	bne.n	8000cba <__aeabi_fmul+0x172>
 8000c18:	4652      	mov	r2, sl
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	4692      	mov	sl, r2
 8000c20:	2001      	movs	r0, #1
 8000c22:	e7bc      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000c24:	20ff      	movs	r0, #255	; 0xff
 8000c26:	2400      	movs	r4, #0
 8000c28:	e7da      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	0c26      	lsrs	r6, r4, #16
 8000c2e:	0424      	lsls	r4, r4, #16
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	0404      	lsls	r4, r0, #16
 8000c34:	0c24      	lsrs	r4, r4, #16
 8000c36:	464b      	mov	r3, r9
 8000c38:	0020      	movs	r0, r4
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	4350      	muls	r0, r2
 8000c3e:	4374      	muls	r4, r6
 8000c40:	435a      	muls	r2, r3
 8000c42:	435e      	muls	r6, r3
 8000c44:	1912      	adds	r2, r2, r4
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	189b      	adds	r3, r3, r2
 8000c4a:	429c      	cmp	r4, r3
 8000c4c:	d903      	bls.n	8000c56 <__aeabi_fmul+0x10e>
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	4694      	mov	ip, r2
 8000c54:	4466      	add	r6, ip
 8000c56:	0400      	lsls	r0, r0, #16
 8000c58:	041a      	lsls	r2, r3, #16
 8000c5a:	0c00      	lsrs	r0, r0, #16
 8000c5c:	1812      	adds	r2, r2, r0
 8000c5e:	0194      	lsls	r4, r2, #6
 8000c60:	1e60      	subs	r0, r4, #1
 8000c62:	4184      	sbcs	r4, r0
 8000c64:	0c1b      	lsrs	r3, r3, #16
 8000c66:	0e92      	lsrs	r2, r2, #26
 8000c68:	199b      	adds	r3, r3, r6
 8000c6a:	4314      	orrs	r4, r2
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	d572      	bpl.n	8000d5a <__aeabi_fmul+0x212>
 8000c74:	2001      	movs	r0, #1
 8000c76:	0863      	lsrs	r3, r4, #1
 8000c78:	4004      	ands	r4, r0
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	0008      	movs	r0, r1
 8000c7e:	307f      	adds	r0, #127	; 0x7f
 8000c80:	2800      	cmp	r0, #0
 8000c82:	dd3c      	ble.n	8000cfe <__aeabi_fmul+0x1b6>
 8000c84:	0763      	lsls	r3, r4, #29
 8000c86:	d004      	beq.n	8000c92 <__aeabi_fmul+0x14a>
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x14a>
 8000c90:	3404      	adds	r4, #4
 8000c92:	0123      	lsls	r3, r4, #4
 8000c94:	d503      	bpl.n	8000c9e <__aeabi_fmul+0x156>
 8000c96:	3180      	adds	r1, #128	; 0x80
 8000c98:	0008      	movs	r0, r1
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <__aeabi_fmul+0x230>)
 8000c9c:	401c      	ands	r4, r3
 8000c9e:	28fe      	cmp	r0, #254	; 0xfe
 8000ca0:	dcc0      	bgt.n	8000c24 <__aeabi_fmul+0xdc>
 8000ca2:	01a4      	lsls	r4, r4, #6
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	b2c0      	uxtb	r0, r0
 8000ca8:	e79a      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000caa:	0037      	movs	r7, r6
 8000cac:	e78e      	b.n	8000bcc <__aeabi_fmul+0x84>
 8000cae:	4652      	mov	r2, sl
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e771      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000cba:	4648      	mov	r0, r9
 8000cbc:	f001 fb24 	bl	8002308 <__clzsi2>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1f43      	subs	r3, r0, #5
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	1a2d      	subs	r5, r5, r0
 8000cc8:	4691      	mov	r9, r2
 8000cca:	2000      	movs	r0, #0
 8000ccc:	3d76      	subs	r5, #118	; 0x76
 8000cce:	e766      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b09      	subs	r3, #9
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e74d      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f001 fb13 	bl	8002308 <__clzsi2>
 8000ce2:	2576      	movs	r5, #118	; 0x76
 8000ce4:	1f43      	subs	r3, r0, #5
 8000ce6:	409c      	lsls	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	426d      	negs	r5, r5
 8000cec:	469a      	mov	sl, r3
 8000cee:	469b      	mov	fp, r3
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	e741      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000cf4:	2480      	movs	r4, #128	; 0x80
 8000cf6:	2700      	movs	r7, #0
 8000cf8:	20ff      	movs	r0, #255	; 0xff
 8000cfa:	03e4      	lsls	r4, r4, #15
 8000cfc:	e770      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	2b1b      	cmp	r3, #27
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fmul+0x1c0>
 8000d06:	e769      	b.n	8000bdc <__aeabi_fmul+0x94>
 8000d08:	319e      	adds	r1, #158	; 0x9e
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	408c      	lsls	r4, r1
 8000d0e:	40d8      	lsrs	r0, r3
 8000d10:	1e63      	subs	r3, r4, #1
 8000d12:	419c      	sbcs	r4, r3
 8000d14:	4304      	orrs	r4, r0
 8000d16:	0763      	lsls	r3, r4, #29
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fmul+0x1dc>
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	4023      	ands	r3, r4
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d000      	beq.n	8000d24 <__aeabi_fmul+0x1dc>
 8000d22:	3404      	adds	r4, #4
 8000d24:	0163      	lsls	r3, r4, #5
 8000d26:	d51a      	bpl.n	8000d5e <__aeabi_fmul+0x216>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	e758      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	03c0      	lsls	r0, r0, #15
 8000d32:	4204      	tst	r4, r0
 8000d34:	d009      	beq.n	8000d4a <__aeabi_fmul+0x202>
 8000d36:	464b      	mov	r3, r9
 8000d38:	4203      	tst	r3, r0
 8000d3a:	d106      	bne.n	8000d4a <__aeabi_fmul+0x202>
 8000d3c:	464c      	mov	r4, r9
 8000d3e:	4304      	orrs	r4, r0
 8000d40:	0264      	lsls	r4, r4, #9
 8000d42:	4647      	mov	r7, r8
 8000d44:	20ff      	movs	r0, #255	; 0xff
 8000d46:	0a64      	lsrs	r4, r4, #9
 8000d48:	e74a      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d4a:	2080      	movs	r0, #128	; 0x80
 8000d4c:	03c0      	lsls	r0, r0, #15
 8000d4e:	4304      	orrs	r4, r0
 8000d50:	0264      	lsls	r4, r4, #9
 8000d52:	0037      	movs	r7, r6
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	0a64      	lsrs	r4, r4, #9
 8000d58:	e742      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d5a:	0029      	movs	r1, r5
 8000d5c:	e78e      	b.n	8000c7c <__aeabi_fmul+0x134>
 8000d5e:	01a4      	lsls	r4, r4, #6
 8000d60:	2000      	movs	r0, #0
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	e73c      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	03c0      	lsls	r0, r0, #15
 8000d6a:	4304      	orrs	r4, r0
 8000d6c:	0264      	lsls	r4, r4, #9
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	0a64      	lsrs	r4, r4, #9
 8000d72:	e735      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d74:	0800a158 	.word	0x0800a158
 8000d78:	f7ffffff 	.word	0xf7ffffff

08000d7c <__aeabi_fsub>:
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	4646      	mov	r6, r8
 8000d80:	46d6      	mov	lr, sl
 8000d82:	464f      	mov	r7, r9
 8000d84:	0243      	lsls	r3, r0, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	00da      	lsls	r2, r3, #3
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	024a      	lsls	r2, r1, #9
 8000d8e:	b5c0      	push	{r6, r7, lr}
 8000d90:	0044      	lsls	r4, r0, #1
 8000d92:	0a56      	lsrs	r6, r2, #9
 8000d94:	1c05      	adds	r5, r0, #0
 8000d96:	46b0      	mov	r8, r6
 8000d98:	0e24      	lsrs	r4, r4, #24
 8000d9a:	004e      	lsls	r6, r1, #1
 8000d9c:	0992      	lsrs	r2, r2, #6
 8000d9e:	001f      	movs	r7, r3
 8000da0:	0020      	movs	r0, r4
 8000da2:	4692      	mov	sl, r2
 8000da4:	0fed      	lsrs	r5, r5, #31
 8000da6:	0e36      	lsrs	r6, r6, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2eff      	cmp	r6, #255	; 0xff
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x34>
 8000dae:	e07f      	b.n	8000eb0 <__aeabi_fsub+0x134>
 8000db0:	2201      	movs	r2, #1
 8000db2:	4051      	eors	r1, r2
 8000db4:	428d      	cmp	r5, r1
 8000db6:	d051      	beq.n	8000e5c <__aeabi_fsub+0xe0>
 8000db8:	1ba2      	subs	r2, r4, r6
 8000dba:	4691      	mov	r9, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	dc00      	bgt.n	8000dc2 <__aeabi_fsub+0x46>
 8000dc0:	e07e      	b.n	8000ec0 <__aeabi_fsub+0x144>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x4c>
 8000dc6:	e099      	b.n	8000efc <__aeabi_fsub+0x180>
 8000dc8:	2cff      	cmp	r4, #255	; 0xff
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x52>
 8000dcc:	e08c      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	04db      	lsls	r3, r3, #19
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	464a      	mov	r2, r9
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2a1b      	cmp	r2, #27
 8000dde:	dc08      	bgt.n	8000df2 <__aeabi_fsub+0x76>
 8000de0:	4653      	mov	r3, sl
 8000de2:	2120      	movs	r1, #32
 8000de4:	40d3      	lsrs	r3, r2
 8000de6:	1a89      	subs	r1, r1, r2
 8000de8:	4652      	mov	r2, sl
 8000dea:	408a      	lsls	r2, r1
 8000dec:	1e51      	subs	r1, r2, #1
 8000dee:	418a      	sbcs	r2, r1
 8000df0:	4313      	orrs	r3, r2
 8000df2:	4662      	mov	r2, ip
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	015a      	lsls	r2, r3, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0x80>
 8000dfa:	e0f3      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8000dfc:	019b      	lsls	r3, r3, #6
 8000dfe:	099e      	lsrs	r6, r3, #6
 8000e00:	0030      	movs	r0, r6
 8000e02:	f001 fa81 	bl	8002308 <__clzsi2>
 8000e06:	3805      	subs	r0, #5
 8000e08:	4086      	lsls	r6, r0
 8000e0a:	4284      	cmp	r4, r0
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_fsub+0x94>
 8000e0e:	e0f7      	b.n	8001000 <__aeabi_fsub+0x284>
 8000e10:	0032      	movs	r2, r6
 8000e12:	1b04      	subs	r4, r0, r4
 8000e14:	2020      	movs	r0, #32
 8000e16:	3401      	adds	r4, #1
 8000e18:	40e2      	lsrs	r2, r4
 8000e1a:	1b04      	subs	r4, r0, r4
 8000e1c:	40a6      	lsls	r6, r4
 8000e1e:	0033      	movs	r3, r6
 8000e20:	1e5e      	subs	r6, r3, #1
 8000e22:	41b3      	sbcs	r3, r6
 8000e24:	2400      	movs	r4, #0
 8000e26:	4313      	orrs	r3, r2
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	d004      	beq.n	8000e36 <__aeabi_fsub+0xba>
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2a04      	cmp	r2, #4
 8000e32:	d000      	beq.n	8000e36 <__aeabi_fsub+0xba>
 8000e34:	3304      	adds	r3, #4
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0xc0>
 8000e3a:	e0d6      	b.n	8000fea <__aeabi_fsub+0x26e>
 8000e3c:	1c62      	adds	r2, r4, #1
 8000e3e:	2cfe      	cmp	r4, #254	; 0xfe
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0xc8>
 8000e42:	e0da      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	0a5f      	lsrs	r7, r3, #9
 8000e48:	b2d0      	uxtb	r0, r2
 8000e4a:	05c0      	lsls	r0, r0, #23
 8000e4c:	4338      	orrs	r0, r7
 8000e4e:	07ed      	lsls	r5, r5, #31
 8000e50:	4328      	orrs	r0, r5
 8000e52:	bce0      	pop	{r5, r6, r7}
 8000e54:	46ba      	mov	sl, r7
 8000e56:	46b1      	mov	r9, r6
 8000e58:	46a8      	mov	r8, r5
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5c:	1ba2      	subs	r2, r4, r6
 8000e5e:	4691      	mov	r9, r2
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dd63      	ble.n	8000f2c <__aeabi_fsub+0x1b0>
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0xee>
 8000e68:	e099      	b.n	8000f9e <__aeabi_fsub+0x222>
 8000e6a:	2cff      	cmp	r4, #255	; 0xff
 8000e6c:	d03c      	beq.n	8000ee8 <__aeabi_fsub+0x16c>
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	4652      	mov	r2, sl
 8000e72:	04db      	lsls	r3, r3, #19
 8000e74:	431a      	orrs	r2, r3
 8000e76:	4692      	mov	sl, r2
 8000e78:	464a      	mov	r2, r9
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2a1b      	cmp	r2, #27
 8000e7e:	dc08      	bgt.n	8000e92 <__aeabi_fsub+0x116>
 8000e80:	4653      	mov	r3, sl
 8000e82:	2120      	movs	r1, #32
 8000e84:	40d3      	lsrs	r3, r2
 8000e86:	1a89      	subs	r1, r1, r2
 8000e88:	4652      	mov	r2, sl
 8000e8a:	408a      	lsls	r2, r1
 8000e8c:	1e51      	subs	r1, r2, #1
 8000e8e:	418a      	sbcs	r2, r1
 8000e90:	4313      	orrs	r3, r2
 8000e92:	4463      	add	r3, ip
 8000e94:	015a      	lsls	r2, r3, #5
 8000e96:	d400      	bmi.n	8000e9a <__aeabi_fsub+0x11e>
 8000e98:	e0a4      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	2cff      	cmp	r4, #255	; 0xff
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x126>
 8000ea0:	e0ab      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4997      	ldr	r1, [pc, #604]	; (8001104 <__aeabi_fsub+0x388>)
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	400b      	ands	r3, r1
 8000eac:	4313      	orrs	r3, r2
 8000eae:	e7bb      	b.n	8000e28 <__aeabi_fsub+0xac>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d032      	beq.n	8000f1a <__aeabi_fsub+0x19e>
 8000eb4:	428d      	cmp	r5, r1
 8000eb6:	d035      	beq.n	8000f24 <__aeabi_fsub+0x1a8>
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	4252      	negs	r2, r2
 8000ebc:	4691      	mov	r9, r2
 8000ebe:	44a1      	add	r9, r4
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	d051      	beq.n	8000f6a <__aeabi_fsub+0x1ee>
 8000ec6:	1b30      	subs	r0, r6, r4
 8000ec8:	2c00      	cmp	r4, #0
 8000eca:	d000      	beq.n	8000ece <__aeabi_fsub+0x152>
 8000ecc:	e09c      	b.n	8001008 <__aeabi_fsub+0x28c>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x15a>
 8000ed4:	e0df      	b.n	8001096 <__aeabi_fsub+0x31a>
 8000ed6:	3801      	subs	r0, #1
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x162>
 8000edc:	e0f7      	b.n	80010ce <__aeabi_fsub+0x352>
 8000ede:	2eff      	cmp	r6, #255	; 0xff
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x168>
 8000ee2:	e099      	b.n	8001018 <__aeabi_fsub+0x29c>
 8000ee4:	000d      	movs	r5, r1
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x172>
 8000eec:	e085      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000eee:	2780      	movs	r7, #128	; 0x80
 8000ef0:	03ff      	lsls	r7, r7, #15
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	027f      	lsls	r7, r7, #9
 8000ef6:	20ff      	movs	r0, #255	; 0xff
 8000ef8:	0a7f      	lsrs	r7, r7, #9
 8000efa:	e7a6      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000efc:	4652      	mov	r2, sl
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d074      	beq.n	8000fec <__aeabi_fsub+0x270>
 8000f02:	2201      	movs	r2, #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	4690      	mov	r8, r2
 8000f08:	44c1      	add	r9, r8
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x196>
 8000f10:	e0c8      	b.n	80010a4 <__aeabi_fsub+0x328>
 8000f12:	2cff      	cmp	r4, #255	; 0xff
 8000f14:	d000      	beq.n	8000f18 <__aeabi_fsub+0x19c>
 8000f16:	e75f      	b.n	8000dd8 <__aeabi_fsub+0x5c>
 8000f18:	e7e6      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4051      	eors	r1, r2
 8000f1e:	42a9      	cmp	r1, r5
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x1a8>
 8000f22:	e749      	b.n	8000db8 <__aeabi_fsub+0x3c>
 8000f24:	22ff      	movs	r2, #255	; 0xff
 8000f26:	4252      	negs	r2, r2
 8000f28:	4691      	mov	r9, r2
 8000f2a:	44a1      	add	r9, r4
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d043      	beq.n	8000fba <__aeabi_fsub+0x23e>
 8000f32:	1b31      	subs	r1, r6, r4
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x1be>
 8000f38:	e08c      	b.n	8001054 <__aeabi_fsub+0x2d8>
 8000f3a:	2eff      	cmp	r6, #255	; 0xff
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x1c4>
 8000f3e:	e092      	b.n	8001066 <__aeabi_fsub+0x2ea>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4662      	mov	r2, ip
 8000f44:	04db      	lsls	r3, r3, #19
 8000f46:	431a      	orrs	r2, r3
 8000f48:	4694      	mov	ip, r2
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	291b      	cmp	r1, #27
 8000f4e:	dc09      	bgt.n	8000f64 <__aeabi_fsub+0x1e8>
 8000f50:	2020      	movs	r0, #32
 8000f52:	4663      	mov	r3, ip
 8000f54:	4662      	mov	r2, ip
 8000f56:	40cb      	lsrs	r3, r1
 8000f58:	1a41      	subs	r1, r0, r1
 8000f5a:	408a      	lsls	r2, r1
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	1e48      	subs	r0, r1, #1
 8000f60:	4181      	sbcs	r1, r0
 8000f62:	430b      	orrs	r3, r1
 8000f64:	0034      	movs	r4, r6
 8000f66:	4453      	add	r3, sl
 8000f68:	e794      	b.n	8000e94 <__aeabi_fsub+0x118>
 8000f6a:	22fe      	movs	r2, #254	; 0xfe
 8000f6c:	1c66      	adds	r6, r4, #1
 8000f6e:	4232      	tst	r2, r6
 8000f70:	d164      	bne.n	800103c <__aeabi_fsub+0x2c0>
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0x1fc>
 8000f76:	e082      	b.n	800107e <__aeabi_fsub+0x302>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x204>
 8000f7e:	e0ab      	b.n	80010d8 <__aeabi_fsub+0x35c>
 8000f80:	4653      	mov	r3, sl
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x20c>
 8000f86:	e760      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000f88:	4663      	mov	r3, ip
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_fsub+0x218>
 8000f92:	e0aa      	b.n	80010ea <__aeabi_fsub+0x36e>
 8000f94:	4663      	mov	r3, ip
 8000f96:	4652      	mov	r2, sl
 8000f98:	000d      	movs	r5, r1
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	e744      	b.n	8000e28 <__aeabi_fsub+0xac>
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d023      	beq.n	8000fec <__aeabi_fsub+0x270>
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4252      	negs	r2, r2
 8000fa8:	4690      	mov	r8, r2
 8000faa:	44c1      	add	r9, r8
 8000fac:	464a      	mov	r2, r9
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d075      	beq.n	800109e <__aeabi_fsub+0x322>
 8000fb2:	2cff      	cmp	r4, #255	; 0xff
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x23c>
 8000fb6:	e75f      	b.n	8000e78 <__aeabi_fsub+0xfc>
 8000fb8:	e796      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000fba:	26fe      	movs	r6, #254	; 0xfe
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	4226      	tst	r6, r4
 8000fc0:	d153      	bne.n	800106a <__aeabi_fsub+0x2ee>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d172      	bne.n	80010ac <__aeabi_fsub+0x330>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x252>
 8000fcc:	e093      	b.n	80010f6 <__aeabi_fsub+0x37a>
 8000fce:	4653      	mov	r3, sl
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x25a>
 8000fd4:	e739      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000fd6:	4463      	add	r3, ip
 8000fd8:	2400      	movs	r4, #0
 8000fda:	015a      	lsls	r2, r3, #5
 8000fdc:	d502      	bpl.n	8000fe4 <__aeabi_fsub+0x268>
 8000fde:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <__aeabi_fsub+0x38c>)
 8000fe0:	3401      	adds	r4, #1
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	075a      	lsls	r2, r3, #29
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x26e>
 8000fe8:	e720      	b.n	8000e2c <__aeabi_fsub+0xb0>
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	2cff      	cmp	r4, #255	; 0xff
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x276>
 8000ff0:	e77a      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	0a5f      	lsrs	r7, r3, #9
 8000ff6:	b2e0      	uxtb	r0, r4
 8000ff8:	e727      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	2700      	movs	r7, #0
 8000ffe:	e724      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <__aeabi_fsub+0x38c>)
 8001002:	1a24      	subs	r4, r4, r0
 8001004:	4033      	ands	r3, r6
 8001006:	e70f      	b.n	8000e28 <__aeabi_fsub+0xac>
 8001008:	2eff      	cmp	r6, #255	; 0xff
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x292>
 800100c:	e76a      	b.n	8000ee4 <__aeabi_fsub+0x168>
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	4662      	mov	r2, ip
 8001012:	04db      	lsls	r3, r3, #19
 8001014:	431a      	orrs	r2, r3
 8001016:	4694      	mov	ip, r2
 8001018:	2301      	movs	r3, #1
 800101a:	281b      	cmp	r0, #27
 800101c:	dc09      	bgt.n	8001032 <__aeabi_fsub+0x2b6>
 800101e:	2420      	movs	r4, #32
 8001020:	4663      	mov	r3, ip
 8001022:	4662      	mov	r2, ip
 8001024:	40c3      	lsrs	r3, r0
 8001026:	1a20      	subs	r0, r4, r0
 8001028:	4082      	lsls	r2, r0
 800102a:	0010      	movs	r0, r2
 800102c:	1e44      	subs	r4, r0, #1
 800102e:	41a0      	sbcs	r0, r4
 8001030:	4303      	orrs	r3, r0
 8001032:	4652      	mov	r2, sl
 8001034:	000d      	movs	r5, r1
 8001036:	0034      	movs	r4, r6
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	e6dc      	b.n	8000df6 <__aeabi_fsub+0x7a>
 800103c:	4663      	mov	r3, ip
 800103e:	4652      	mov	r2, sl
 8001040:	1a9e      	subs	r6, r3, r2
 8001042:	0173      	lsls	r3, r6, #5
 8001044:	d417      	bmi.n	8001076 <__aeabi_fsub+0x2fa>
 8001046:	2e00      	cmp	r6, #0
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x2d0>
 800104a:	e6d9      	b.n	8000e00 <__aeabi_fsub+0x84>
 800104c:	2500      	movs	r5, #0
 800104e:	2000      	movs	r0, #0
 8001050:	2700      	movs	r7, #0
 8001052:	e6fa      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001054:	4663      	mov	r3, ip
 8001056:	2b00      	cmp	r3, #0
 8001058:	d044      	beq.n	80010e4 <__aeabi_fsub+0x368>
 800105a:	3901      	subs	r1, #1
 800105c:	2900      	cmp	r1, #0
 800105e:	d04c      	beq.n	80010fa <__aeabi_fsub+0x37e>
 8001060:	2eff      	cmp	r6, #255	; 0xff
 8001062:	d000      	beq.n	8001066 <__aeabi_fsub+0x2ea>
 8001064:	e771      	b.n	8000f4a <__aeabi_fsub+0x1ce>
 8001066:	4643      	mov	r3, r8
 8001068:	e73e      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 800106a:	2cff      	cmp	r4, #255	; 0xff
 800106c:	d0c5      	beq.n	8000ffa <__aeabi_fsub+0x27e>
 800106e:	4652      	mov	r2, sl
 8001070:	4462      	add	r2, ip
 8001072:	0853      	lsrs	r3, r2, #1
 8001074:	e7b6      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8001076:	4663      	mov	r3, ip
 8001078:	000d      	movs	r5, r1
 800107a:	1ad6      	subs	r6, r2, r3
 800107c:	e6c0      	b.n	8000e00 <__aeabi_fsub+0x84>
 800107e:	4662      	mov	r2, ip
 8001080:	2a00      	cmp	r2, #0
 8001082:	d116      	bne.n	80010b2 <__aeabi_fsub+0x336>
 8001084:	4653      	mov	r3, sl
 8001086:	2b00      	cmp	r3, #0
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x310>
 800108a:	e72b      	b.n	8000ee4 <__aeabi_fsub+0x168>
 800108c:	2780      	movs	r7, #128	; 0x80
 800108e:	2500      	movs	r5, #0
 8001090:	20ff      	movs	r0, #255	; 0xff
 8001092:	03ff      	lsls	r7, r7, #15
 8001094:	e6d9      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001096:	000d      	movs	r5, r1
 8001098:	4643      	mov	r3, r8
 800109a:	0034      	movs	r4, r6
 800109c:	e7a6      	b.n	8000fec <__aeabi_fsub+0x270>
 800109e:	4653      	mov	r3, sl
 80010a0:	4463      	add	r3, ip
 80010a2:	e6f7      	b.n	8000e94 <__aeabi_fsub+0x118>
 80010a4:	4663      	mov	r3, ip
 80010a6:	4652      	mov	r2, sl
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	e6a4      	b.n	8000df6 <__aeabi_fsub+0x7a>
 80010ac:	4662      	mov	r2, ip
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d0d9      	beq.n	8001066 <__aeabi_fsub+0x2ea>
 80010b2:	4652      	mov	r2, sl
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x33e>
 80010b8:	e716      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	03d2      	lsls	r2, r2, #15
 80010be:	4213      	tst	r3, r2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x348>
 80010c2:	e711      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010c4:	4640      	mov	r0, r8
 80010c6:	4210      	tst	r0, r2
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x350>
 80010ca:	e70d      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010cc:	e70a      	b.n	8000ee4 <__aeabi_fsub+0x168>
 80010ce:	4652      	mov	r2, sl
 80010d0:	000d      	movs	r5, r1
 80010d2:	0034      	movs	r4, r6
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	e68e      	b.n	8000df6 <__aeabi_fsub+0x7a>
 80010d8:	4653      	mov	r3, sl
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d008      	beq.n	80010f0 <__aeabi_fsub+0x374>
 80010de:	000d      	movs	r5, r1
 80010e0:	4647      	mov	r7, r8
 80010e2:	e6b2      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010e4:	4643      	mov	r3, r8
 80010e6:	0034      	movs	r4, r6
 80010e8:	e780      	b.n	8000fec <__aeabi_fsub+0x270>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d000      	beq.n	80010f0 <__aeabi_fsub+0x374>
 80010ee:	e779      	b.n	8000fe4 <__aeabi_fsub+0x268>
 80010f0:	2500      	movs	r5, #0
 80010f2:	2700      	movs	r7, #0
 80010f4:	e6a9      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010f6:	4647      	mov	r7, r8
 80010f8:	e6a7      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010fa:	4653      	mov	r3, sl
 80010fc:	0034      	movs	r4, r6
 80010fe:	4463      	add	r3, ip
 8001100:	e6c8      	b.n	8000e94 <__aeabi_fsub+0x118>
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	7dffffff 	.word	0x7dffffff
 8001108:	fbffffff 	.word	0xfbffffff

0800110c <__aeabi_f2iz>:
 800110c:	0241      	lsls	r1, r0, #9
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0fc3      	lsrs	r3, r0, #31
 8001112:	0a49      	lsrs	r1, r1, #9
 8001114:	2000      	movs	r0, #0
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	2a7e      	cmp	r2, #126	; 0x7e
 800111a:	d903      	bls.n	8001124 <__aeabi_f2iz+0x18>
 800111c:	2a9d      	cmp	r2, #157	; 0x9d
 800111e:	d902      	bls.n	8001126 <__aeabi_f2iz+0x1a>
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <__aeabi_f2iz+0x3c>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	2080      	movs	r0, #128	; 0x80
 8001128:	0400      	lsls	r0, r0, #16
 800112a:	4301      	orrs	r1, r0
 800112c:	2a95      	cmp	r2, #149	; 0x95
 800112e:	dc07      	bgt.n	8001140 <__aeabi_f2iz+0x34>
 8001130:	2096      	movs	r0, #150	; 0x96
 8001132:	1a82      	subs	r2, r0, r2
 8001134:	40d1      	lsrs	r1, r2
 8001136:	4248      	negs	r0, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <__aeabi_f2iz+0x18>
 800113c:	0008      	movs	r0, r1
 800113e:	e7f1      	b.n	8001124 <__aeabi_f2iz+0x18>
 8001140:	3a96      	subs	r2, #150	; 0x96
 8001142:	4091      	lsls	r1, r2
 8001144:	e7f7      	b.n	8001136 <__aeabi_f2iz+0x2a>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	7fffffff 	.word	0x7fffffff

0800114c <__aeabi_i2f>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	2800      	cmp	r0, #0
 8001150:	d013      	beq.n	800117a <__aeabi_i2f+0x2e>
 8001152:	17c3      	asrs	r3, r0, #31
 8001154:	18c5      	adds	r5, r0, r3
 8001156:	405d      	eors	r5, r3
 8001158:	0fc4      	lsrs	r4, r0, #31
 800115a:	0028      	movs	r0, r5
 800115c:	f001 f8d4 	bl	8002308 <__clzsi2>
 8001160:	239e      	movs	r3, #158	; 0x9e
 8001162:	0001      	movs	r1, r0
 8001164:	1a1b      	subs	r3, r3, r0
 8001166:	2b96      	cmp	r3, #150	; 0x96
 8001168:	dc0f      	bgt.n	800118a <__aeabi_i2f+0x3e>
 800116a:	2808      	cmp	r0, #8
 800116c:	dd01      	ble.n	8001172 <__aeabi_i2f+0x26>
 800116e:	3908      	subs	r1, #8
 8001170:	408d      	lsls	r5, r1
 8001172:	026d      	lsls	r5, r5, #9
 8001174:	0a6d      	lsrs	r5, r5, #9
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	e002      	b.n	8001180 <__aeabi_i2f+0x34>
 800117a:	2400      	movs	r4, #0
 800117c:	2000      	movs	r0, #0
 800117e:	2500      	movs	r5, #0
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	4328      	orrs	r0, r5
 8001184:	07e4      	lsls	r4, r4, #31
 8001186:	4320      	orrs	r0, r4
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	2b99      	cmp	r3, #153	; 0x99
 800118c:	dd0b      	ble.n	80011a6 <__aeabi_i2f+0x5a>
 800118e:	2205      	movs	r2, #5
 8001190:	002e      	movs	r6, r5
 8001192:	1a12      	subs	r2, r2, r0
 8001194:	40d6      	lsrs	r6, r2
 8001196:	0002      	movs	r2, r0
 8001198:	321b      	adds	r2, #27
 800119a:	4095      	lsls	r5, r2
 800119c:	0028      	movs	r0, r5
 800119e:	1e45      	subs	r5, r0, #1
 80011a0:	41a8      	sbcs	r0, r5
 80011a2:	0035      	movs	r5, r6
 80011a4:	4305      	orrs	r5, r0
 80011a6:	2905      	cmp	r1, #5
 80011a8:	dd01      	ble.n	80011ae <__aeabi_i2f+0x62>
 80011aa:	1f4a      	subs	r2, r1, #5
 80011ac:	4095      	lsls	r5, r2
 80011ae:	002a      	movs	r2, r5
 80011b0:	4e08      	ldr	r6, [pc, #32]	; (80011d4 <__aeabi_i2f+0x88>)
 80011b2:	4032      	ands	r2, r6
 80011b4:	0768      	lsls	r0, r5, #29
 80011b6:	d009      	beq.n	80011cc <__aeabi_i2f+0x80>
 80011b8:	200f      	movs	r0, #15
 80011ba:	4028      	ands	r0, r5
 80011bc:	2804      	cmp	r0, #4
 80011be:	d005      	beq.n	80011cc <__aeabi_i2f+0x80>
 80011c0:	3204      	adds	r2, #4
 80011c2:	0150      	lsls	r0, r2, #5
 80011c4:	d502      	bpl.n	80011cc <__aeabi_i2f+0x80>
 80011c6:	239f      	movs	r3, #159	; 0x9f
 80011c8:	4032      	ands	r2, r6
 80011ca:	1a5b      	subs	r3, r3, r1
 80011cc:	0192      	lsls	r2, r2, #6
 80011ce:	0a55      	lsrs	r5, r2, #9
 80011d0:	b2d8      	uxtb	r0, r3
 80011d2:	e7d5      	b.n	8001180 <__aeabi_i2f+0x34>
 80011d4:	fbffffff 	.word	0xfbffffff

080011d8 <__aeabi_ui2f>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	1e05      	subs	r5, r0, #0
 80011dc:	d00e      	beq.n	80011fc <__aeabi_ui2f+0x24>
 80011de:	f001 f893 	bl	8002308 <__clzsi2>
 80011e2:	239e      	movs	r3, #158	; 0x9e
 80011e4:	0004      	movs	r4, r0
 80011e6:	1a1b      	subs	r3, r3, r0
 80011e8:	2b96      	cmp	r3, #150	; 0x96
 80011ea:	dc0c      	bgt.n	8001206 <__aeabi_ui2f+0x2e>
 80011ec:	2808      	cmp	r0, #8
 80011ee:	dd01      	ble.n	80011f4 <__aeabi_ui2f+0x1c>
 80011f0:	3c08      	subs	r4, #8
 80011f2:	40a5      	lsls	r5, r4
 80011f4:	026d      	lsls	r5, r5, #9
 80011f6:	0a6d      	lsrs	r5, r5, #9
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	e001      	b.n	8001200 <__aeabi_ui2f+0x28>
 80011fc:	2000      	movs	r0, #0
 80011fe:	2500      	movs	r5, #0
 8001200:	05c0      	lsls	r0, r0, #23
 8001202:	4328      	orrs	r0, r5
 8001204:	bd70      	pop	{r4, r5, r6, pc}
 8001206:	2b99      	cmp	r3, #153	; 0x99
 8001208:	dd09      	ble.n	800121e <__aeabi_ui2f+0x46>
 800120a:	0002      	movs	r2, r0
 800120c:	0029      	movs	r1, r5
 800120e:	321b      	adds	r2, #27
 8001210:	4091      	lsls	r1, r2
 8001212:	1e4a      	subs	r2, r1, #1
 8001214:	4191      	sbcs	r1, r2
 8001216:	2205      	movs	r2, #5
 8001218:	1a12      	subs	r2, r2, r0
 800121a:	40d5      	lsrs	r5, r2
 800121c:	430d      	orrs	r5, r1
 800121e:	2c05      	cmp	r4, #5
 8001220:	dd01      	ble.n	8001226 <__aeabi_ui2f+0x4e>
 8001222:	1f62      	subs	r2, r4, #5
 8001224:	4095      	lsls	r5, r2
 8001226:	0029      	movs	r1, r5
 8001228:	4e08      	ldr	r6, [pc, #32]	; (800124c <__aeabi_ui2f+0x74>)
 800122a:	4031      	ands	r1, r6
 800122c:	076a      	lsls	r2, r5, #29
 800122e:	d009      	beq.n	8001244 <__aeabi_ui2f+0x6c>
 8001230:	200f      	movs	r0, #15
 8001232:	4028      	ands	r0, r5
 8001234:	2804      	cmp	r0, #4
 8001236:	d005      	beq.n	8001244 <__aeabi_ui2f+0x6c>
 8001238:	3104      	adds	r1, #4
 800123a:	014a      	lsls	r2, r1, #5
 800123c:	d502      	bpl.n	8001244 <__aeabi_ui2f+0x6c>
 800123e:	239f      	movs	r3, #159	; 0x9f
 8001240:	4031      	ands	r1, r6
 8001242:	1b1b      	subs	r3, r3, r4
 8001244:	0189      	lsls	r1, r1, #6
 8001246:	0a4d      	lsrs	r5, r1, #9
 8001248:	b2d8      	uxtb	r0, r3
 800124a:	e7d9      	b.n	8001200 <__aeabi_ui2f+0x28>
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_dadd>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	464f      	mov	r7, r9
 8001254:	46d6      	mov	lr, sl
 8001256:	4646      	mov	r6, r8
 8001258:	000d      	movs	r5, r1
 800125a:	0001      	movs	r1, r0
 800125c:	0018      	movs	r0, r3
 800125e:	b5c0      	push	{r6, r7, lr}
 8001260:	0017      	movs	r7, r2
 8001262:	032b      	lsls	r3, r5, #12
 8001264:	0a5a      	lsrs	r2, r3, #9
 8001266:	0f4b      	lsrs	r3, r1, #29
 8001268:	4313      	orrs	r3, r2
 800126a:	00ca      	lsls	r2, r1, #3
 800126c:	4691      	mov	r9, r2
 800126e:	0302      	lsls	r2, r0, #12
 8001270:	006e      	lsls	r6, r5, #1
 8001272:	0041      	lsls	r1, r0, #1
 8001274:	0a52      	lsrs	r2, r2, #9
 8001276:	0fec      	lsrs	r4, r5, #31
 8001278:	0f7d      	lsrs	r5, r7, #29
 800127a:	4315      	orrs	r5, r2
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	0d49      	lsrs	r1, r1, #21
 8001280:	0fc0      	lsrs	r0, r0, #31
 8001282:	4682      	mov	sl, r0
 8001284:	46ac      	mov	ip, r5
 8001286:	00ff      	lsls	r7, r7, #3
 8001288:	1a72      	subs	r2, r6, r1
 800128a:	4284      	cmp	r4, r0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x40>
 800128e:	e098      	b.n	80013c2 <__aeabi_dadd+0x172>
 8001290:	2a00      	cmp	r2, #0
 8001292:	dc00      	bgt.n	8001296 <__aeabi_dadd+0x46>
 8001294:	e081      	b.n	800139a <__aeabi_dadd+0x14a>
 8001296:	2900      	cmp	r1, #0
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x4c>
 800129a:	e0b6      	b.n	800140a <__aeabi_dadd+0x1ba>
 800129c:	49c9      	ldr	r1, [pc, #804]	; (80015c4 <__aeabi_dadd+0x374>)
 800129e:	428e      	cmp	r6, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x54>
 80012a2:	e172      	b.n	800158a <__aeabi_dadd+0x33a>
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0028      	movs	r0, r5
 80012a8:	0409      	lsls	r1, r1, #16
 80012aa:	4308      	orrs	r0, r1
 80012ac:	4684      	mov	ip, r0
 80012ae:	2a38      	cmp	r2, #56	; 0x38
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dadd+0x64>
 80012b2:	e15e      	b.n	8001572 <__aeabi_dadd+0x322>
 80012b4:	2a1f      	cmp	r2, #31
 80012b6:	dd00      	ble.n	80012ba <__aeabi_dadd+0x6a>
 80012b8:	e1ee      	b.n	8001698 <__aeabi_dadd+0x448>
 80012ba:	2020      	movs	r0, #32
 80012bc:	0039      	movs	r1, r7
 80012be:	4665      	mov	r5, ip
 80012c0:	1a80      	subs	r0, r0, r2
 80012c2:	4087      	lsls	r7, r0
 80012c4:	40d1      	lsrs	r1, r2
 80012c6:	4085      	lsls	r5, r0
 80012c8:	430d      	orrs	r5, r1
 80012ca:	0039      	movs	r1, r7
 80012cc:	1e4f      	subs	r7, r1, #1
 80012ce:	41b9      	sbcs	r1, r7
 80012d0:	4667      	mov	r7, ip
 80012d2:	40d7      	lsrs	r7, r2
 80012d4:	4329      	orrs	r1, r5
 80012d6:	1bdb      	subs	r3, r3, r7
 80012d8:	464a      	mov	r2, r9
 80012da:	1a55      	subs	r5, r2, r1
 80012dc:	45a9      	cmp	r9, r5
 80012de:	4189      	sbcs	r1, r1
 80012e0:	4249      	negs	r1, r1
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	4698      	mov	r8, r3
 80012e6:	4643      	mov	r3, r8
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	d400      	bmi.n	80012ee <__aeabi_dadd+0x9e>
 80012ec:	e0cc      	b.n	8001488 <__aeabi_dadd+0x238>
 80012ee:	4643      	mov	r3, r8
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	0a5b      	lsrs	r3, r3, #9
 80012f4:	4698      	mov	r8, r3
 80012f6:	4643      	mov	r3, r8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0xae>
 80012fc:	e12c      	b.n	8001558 <__aeabi_dadd+0x308>
 80012fe:	4640      	mov	r0, r8
 8001300:	f001 f802 	bl	8002308 <__clzsi2>
 8001304:	0001      	movs	r1, r0
 8001306:	3908      	subs	r1, #8
 8001308:	2220      	movs	r2, #32
 800130a:	0028      	movs	r0, r5
 800130c:	4643      	mov	r3, r8
 800130e:	1a52      	subs	r2, r2, r1
 8001310:	408b      	lsls	r3, r1
 8001312:	40d0      	lsrs	r0, r2
 8001314:	408d      	lsls	r5, r1
 8001316:	4303      	orrs	r3, r0
 8001318:	428e      	cmp	r6, r1
 800131a:	dd00      	ble.n	800131e <__aeabi_dadd+0xce>
 800131c:	e117      	b.n	800154e <__aeabi_dadd+0x2fe>
 800131e:	1b8e      	subs	r6, r1, r6
 8001320:	1c72      	adds	r2, r6, #1
 8001322:	2a1f      	cmp	r2, #31
 8001324:	dd00      	ble.n	8001328 <__aeabi_dadd+0xd8>
 8001326:	e1a7      	b.n	8001678 <__aeabi_dadd+0x428>
 8001328:	2120      	movs	r1, #32
 800132a:	0018      	movs	r0, r3
 800132c:	002e      	movs	r6, r5
 800132e:	1a89      	subs	r1, r1, r2
 8001330:	408d      	lsls	r5, r1
 8001332:	4088      	lsls	r0, r1
 8001334:	40d6      	lsrs	r6, r2
 8001336:	40d3      	lsrs	r3, r2
 8001338:	1e69      	subs	r1, r5, #1
 800133a:	418d      	sbcs	r5, r1
 800133c:	4330      	orrs	r0, r6
 800133e:	4698      	mov	r8, r3
 8001340:	2600      	movs	r6, #0
 8001342:	4305      	orrs	r5, r0
 8001344:	076b      	lsls	r3, r5, #29
 8001346:	d009      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001348:	230f      	movs	r3, #15
 800134a:	402b      	ands	r3, r5
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001350:	1d2b      	adds	r3, r5, #4
 8001352:	42ab      	cmp	r3, r5
 8001354:	41ad      	sbcs	r5, r5
 8001356:	426d      	negs	r5, r5
 8001358:	44a8      	add	r8, r5
 800135a:	001d      	movs	r5, r3
 800135c:	4643      	mov	r3, r8
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	d400      	bmi.n	8001364 <__aeabi_dadd+0x114>
 8001362:	e094      	b.n	800148e <__aeabi_dadd+0x23e>
 8001364:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <__aeabi_dadd+0x374>)
 8001366:	1c72      	adds	r2, r6, #1
 8001368:	429a      	cmp	r2, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x11e>
 800136c:	e09d      	b.n	80014aa <__aeabi_dadd+0x25a>
 800136e:	4641      	mov	r1, r8
 8001370:	4b95      	ldr	r3, [pc, #596]	; (80015c8 <__aeabi_dadd+0x378>)
 8001372:	08ed      	lsrs	r5, r5, #3
 8001374:	4019      	ands	r1, r3
 8001376:	000b      	movs	r3, r1
 8001378:	0552      	lsls	r2, r2, #21
 800137a:	0749      	lsls	r1, r1, #29
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	4329      	orrs	r1, r5
 8001380:	0b1b      	lsrs	r3, r3, #12
 8001382:	0d52      	lsrs	r2, r2, #21
 8001384:	0512      	lsls	r2, r2, #20
 8001386:	4313      	orrs	r3, r2
 8001388:	07e4      	lsls	r4, r4, #31
 800138a:	4323      	orrs	r3, r4
 800138c:	0008      	movs	r0, r1
 800138e:	0019      	movs	r1, r3
 8001390:	bce0      	pop	{r5, r6, r7}
 8001392:	46ba      	mov	sl, r7
 8001394:	46b1      	mov	r9, r6
 8001396:	46a8      	mov	r8, r5
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2a00      	cmp	r2, #0
 800139c:	d043      	beq.n	8001426 <__aeabi_dadd+0x1d6>
 800139e:	1b8a      	subs	r2, r1, r6
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dadd+0x156>
 80013a4:	e12a      	b.n	80015fc <__aeabi_dadd+0x3ac>
 80013a6:	464c      	mov	r4, r9
 80013a8:	431c      	orrs	r4, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x15e>
 80013ac:	e1d1      	b.n	8001752 <__aeabi_dadd+0x502>
 80013ae:	1e54      	subs	r4, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x166>
 80013b4:	e21f      	b.n	80017f6 <__aeabi_dadd+0x5a6>
 80013b6:	4d83      	ldr	r5, [pc, #524]	; (80015c4 <__aeabi_dadd+0x374>)
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x16e>
 80013bc:	e272      	b.n	80018a4 <__aeabi_dadd+0x654>
 80013be:	0022      	movs	r2, r4
 80013c0:	e123      	b.n	800160a <__aeabi_dadd+0x3ba>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dadd+0x178>
 80013c6:	e098      	b.n	80014fa <__aeabi_dadd+0x2aa>
 80013c8:	2900      	cmp	r1, #0
 80013ca:	d042      	beq.n	8001452 <__aeabi_dadd+0x202>
 80013cc:	497d      	ldr	r1, [pc, #500]	; (80015c4 <__aeabi_dadd+0x374>)
 80013ce:	428e      	cmp	r6, r1
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x184>
 80013d2:	e0da      	b.n	800158a <__aeabi_dadd+0x33a>
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0028      	movs	r0, r5
 80013d8:	0409      	lsls	r1, r1, #16
 80013da:	4308      	orrs	r0, r1
 80013dc:	4684      	mov	ip, r0
 80013de:	2a38      	cmp	r2, #56	; 0x38
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dadd+0x194>
 80013e2:	e129      	b.n	8001638 <__aeabi_dadd+0x3e8>
 80013e4:	2a1f      	cmp	r2, #31
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_dadd+0x19a>
 80013e8:	e187      	b.n	80016fa <__aeabi_dadd+0x4aa>
 80013ea:	0011      	movs	r1, r2
 80013ec:	4665      	mov	r5, ip
 80013ee:	3920      	subs	r1, #32
 80013f0:	40cd      	lsrs	r5, r1
 80013f2:	2a20      	cmp	r2, #32
 80013f4:	d004      	beq.n	8001400 <__aeabi_dadd+0x1b0>
 80013f6:	2040      	movs	r0, #64	; 0x40
 80013f8:	4661      	mov	r1, ip
 80013fa:	1a82      	subs	r2, r0, r2
 80013fc:	4091      	lsls	r1, r2
 80013fe:	430f      	orrs	r7, r1
 8001400:	0039      	movs	r1, r7
 8001402:	1e4f      	subs	r7, r1, #1
 8001404:	41b9      	sbcs	r1, r7
 8001406:	430d      	orrs	r5, r1
 8001408:	e11b      	b.n	8001642 <__aeabi_dadd+0x3f2>
 800140a:	0029      	movs	r1, r5
 800140c:	4339      	orrs	r1, r7
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x1c2>
 8001410:	e0b5      	b.n	800157e <__aeabi_dadd+0x32e>
 8001412:	1e51      	subs	r1, r2, #1
 8001414:	2a01      	cmp	r2, #1
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x1ca>
 8001418:	e1ab      	b.n	8001772 <__aeabi_dadd+0x522>
 800141a:	486a      	ldr	r0, [pc, #424]	; (80015c4 <__aeabi_dadd+0x374>)
 800141c:	4282      	cmp	r2, r0
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x1d2>
 8001420:	e1b2      	b.n	8001788 <__aeabi_dadd+0x538>
 8001422:	000a      	movs	r2, r1
 8001424:	e743      	b.n	80012ae <__aeabi_dadd+0x5e>
 8001426:	4969      	ldr	r1, [pc, #420]	; (80015cc <__aeabi_dadd+0x37c>)
 8001428:	1c75      	adds	r5, r6, #1
 800142a:	420d      	tst	r5, r1
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x1e0>
 800142e:	e0cf      	b.n	80015d0 <__aeabi_dadd+0x380>
 8001430:	2e00      	cmp	r6, #0
 8001432:	d000      	beq.n	8001436 <__aeabi_dadd+0x1e6>
 8001434:	e193      	b.n	800175e <__aeabi_dadd+0x50e>
 8001436:	4649      	mov	r1, r9
 8001438:	4319      	orrs	r1, r3
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x1ee>
 800143c:	e1d1      	b.n	80017e2 <__aeabi_dadd+0x592>
 800143e:	4661      	mov	r1, ip
 8001440:	4339      	orrs	r1, r7
 8001442:	d000      	beq.n	8001446 <__aeabi_dadd+0x1f6>
 8001444:	e1e3      	b.n	800180e <__aeabi_dadd+0x5be>
 8001446:	4649      	mov	r1, r9
 8001448:	0758      	lsls	r0, r3, #29
 800144a:	08c9      	lsrs	r1, r1, #3
 800144c:	4301      	orrs	r1, r0
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	e026      	b.n	80014a0 <__aeabi_dadd+0x250>
 8001452:	0029      	movs	r1, r5
 8001454:	4339      	orrs	r1, r7
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x20a>
 8001458:	e091      	b.n	800157e <__aeabi_dadd+0x32e>
 800145a:	1e51      	subs	r1, r2, #1
 800145c:	2a01      	cmp	r2, #1
 800145e:	d005      	beq.n	800146c <__aeabi_dadd+0x21c>
 8001460:	4858      	ldr	r0, [pc, #352]	; (80015c4 <__aeabi_dadd+0x374>)
 8001462:	4282      	cmp	r2, r0
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x218>
 8001466:	e18f      	b.n	8001788 <__aeabi_dadd+0x538>
 8001468:	000a      	movs	r2, r1
 800146a:	e7b8      	b.n	80013de <__aeabi_dadd+0x18e>
 800146c:	003d      	movs	r5, r7
 800146e:	444d      	add	r5, r9
 8001470:	454d      	cmp	r5, r9
 8001472:	4189      	sbcs	r1, r1
 8001474:	4463      	add	r3, ip
 8001476:	4698      	mov	r8, r3
 8001478:	4249      	negs	r1, r1
 800147a:	4488      	add	r8, r1
 800147c:	4643      	mov	r3, r8
 800147e:	2602      	movs	r6, #2
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	d500      	bpl.n	8001486 <__aeabi_dadd+0x236>
 8001484:	e0eb      	b.n	800165e <__aeabi_dadd+0x40e>
 8001486:	3e01      	subs	r6, #1
 8001488:	076b      	lsls	r3, r5, #29
 800148a:	d000      	beq.n	800148e <__aeabi_dadd+0x23e>
 800148c:	e75c      	b.n	8001348 <__aeabi_dadd+0xf8>
 800148e:	4643      	mov	r3, r8
 8001490:	08e9      	lsrs	r1, r5, #3
 8001492:	075a      	lsls	r2, r3, #29
 8001494:	4311      	orrs	r1, r2
 8001496:	0032      	movs	r2, r6
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	484a      	ldr	r0, [pc, #296]	; (80015c4 <__aeabi_dadd+0x374>)
 800149c:	4282      	cmp	r2, r0
 800149e:	d021      	beq.n	80014e4 <__aeabi_dadd+0x294>
 80014a0:	031b      	lsls	r3, r3, #12
 80014a2:	0552      	lsls	r2, r2, #21
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	0d52      	lsrs	r2, r2, #21
 80014a8:	e76c      	b.n	8001384 <__aeabi_dadd+0x134>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	e769      	b.n	8001384 <__aeabi_dadd+0x134>
 80014b0:	002a      	movs	r2, r5
 80014b2:	433a      	orrs	r2, r7
 80014b4:	d069      	beq.n	800158a <__aeabi_dadd+0x33a>
 80014b6:	464a      	mov	r2, r9
 80014b8:	0758      	lsls	r0, r3, #29
 80014ba:	08d1      	lsrs	r1, r2, #3
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	031b      	lsls	r3, r3, #12
 80014c2:	4308      	orrs	r0, r1
 80014c4:	421a      	tst	r2, r3
 80014c6:	d007      	beq.n	80014d8 <__aeabi_dadd+0x288>
 80014c8:	0029      	movs	r1, r5
 80014ca:	08ed      	lsrs	r5, r5, #3
 80014cc:	421d      	tst	r5, r3
 80014ce:	d103      	bne.n	80014d8 <__aeabi_dadd+0x288>
 80014d0:	002a      	movs	r2, r5
 80014d2:	08ff      	lsrs	r7, r7, #3
 80014d4:	0748      	lsls	r0, r1, #29
 80014d6:	4338      	orrs	r0, r7
 80014d8:	0f43      	lsrs	r3, r0, #29
 80014da:	00c1      	lsls	r1, r0, #3
 80014dc:	075b      	lsls	r3, r3, #29
 80014de:	08c9      	lsrs	r1, r1, #3
 80014e0:	4319      	orrs	r1, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x29c>
 80014ea:	e213      	b.n	8001914 <__aeabi_dadd+0x6c4>
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0312      	lsls	r2, r2, #12
 80014f0:	4313      	orrs	r3, r2
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <__aeabi_dadd+0x374>)
 80014f6:	0b1b      	lsrs	r3, r3, #12
 80014f8:	e744      	b.n	8001384 <__aeabi_dadd+0x134>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d04b      	beq.n	8001596 <__aeabi_dadd+0x346>
 80014fe:	1b8a      	subs	r2, r1, r6
 8001500:	2e00      	cmp	r6, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x2b6>
 8001504:	e0e7      	b.n	80016d6 <__aeabi_dadd+0x486>
 8001506:	482f      	ldr	r0, [pc, #188]	; (80015c4 <__aeabi_dadd+0x374>)
 8001508:	4281      	cmp	r1, r0
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x2be>
 800150c:	e195      	b.n	800183a <__aeabi_dadd+0x5ea>
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	0400      	lsls	r0, r0, #16
 8001512:	4303      	orrs	r3, r0
 8001514:	2a38      	cmp	r2, #56	; 0x38
 8001516:	dd00      	ble.n	800151a <__aeabi_dadd+0x2ca>
 8001518:	e143      	b.n	80017a2 <__aeabi_dadd+0x552>
 800151a:	2a1f      	cmp	r2, #31
 800151c:	dd00      	ble.n	8001520 <__aeabi_dadd+0x2d0>
 800151e:	e1db      	b.n	80018d8 <__aeabi_dadd+0x688>
 8001520:	2020      	movs	r0, #32
 8001522:	001d      	movs	r5, r3
 8001524:	464e      	mov	r6, r9
 8001526:	1a80      	subs	r0, r0, r2
 8001528:	4085      	lsls	r5, r0
 800152a:	40d6      	lsrs	r6, r2
 800152c:	4335      	orrs	r5, r6
 800152e:	464e      	mov	r6, r9
 8001530:	4086      	lsls	r6, r0
 8001532:	0030      	movs	r0, r6
 8001534:	40d3      	lsrs	r3, r2
 8001536:	1e46      	subs	r6, r0, #1
 8001538:	41b0      	sbcs	r0, r6
 800153a:	449c      	add	ip, r3
 800153c:	4305      	orrs	r5, r0
 800153e:	19ed      	adds	r5, r5, r7
 8001540:	42bd      	cmp	r5, r7
 8001542:	419b      	sbcs	r3, r3
 8001544:	425b      	negs	r3, r3
 8001546:	4463      	add	r3, ip
 8001548:	4698      	mov	r8, r3
 800154a:	000e      	movs	r6, r1
 800154c:	e07f      	b.n	800164e <__aeabi_dadd+0x3fe>
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <__aeabi_dadd+0x378>)
 8001550:	1a76      	subs	r6, r6, r1
 8001552:	4013      	ands	r3, r2
 8001554:	4698      	mov	r8, r3
 8001556:	e6f5      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001558:	0028      	movs	r0, r5
 800155a:	f000 fed5 	bl	8002308 <__clzsi2>
 800155e:	0001      	movs	r1, r0
 8001560:	3118      	adds	r1, #24
 8001562:	291f      	cmp	r1, #31
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x318>
 8001566:	e6cf      	b.n	8001308 <__aeabi_dadd+0xb8>
 8001568:	002b      	movs	r3, r5
 800156a:	3808      	subs	r0, #8
 800156c:	4083      	lsls	r3, r0
 800156e:	2500      	movs	r5, #0
 8001570:	e6d2      	b.n	8001318 <__aeabi_dadd+0xc8>
 8001572:	4662      	mov	r2, ip
 8001574:	433a      	orrs	r2, r7
 8001576:	0011      	movs	r1, r2
 8001578:	1e4f      	subs	r7, r1, #1
 800157a:	41b9      	sbcs	r1, r7
 800157c:	e6ac      	b.n	80012d8 <__aeabi_dadd+0x88>
 800157e:	4649      	mov	r1, r9
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	4301      	orrs	r1, r0
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	e787      	b.n	800149a <__aeabi_dadd+0x24a>
 800158a:	4649      	mov	r1, r9
 800158c:	075a      	lsls	r2, r3, #29
 800158e:	08c9      	lsrs	r1, r1, #3
 8001590:	4311      	orrs	r1, r2
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	e7a6      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <__aeabi_dadd+0x37c>)
 8001598:	1c70      	adds	r0, r6, #1
 800159a:	4208      	tst	r0, r1
 800159c:	d000      	beq.n	80015a0 <__aeabi_dadd+0x350>
 800159e:	e0bb      	b.n	8001718 <__aeabi_dadd+0x4c8>
 80015a0:	2e00      	cmp	r6, #0
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dadd+0x356>
 80015a4:	e114      	b.n	80017d0 <__aeabi_dadd+0x580>
 80015a6:	4649      	mov	r1, r9
 80015a8:	4319      	orrs	r1, r3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x35e>
 80015ac:	e175      	b.n	800189a <__aeabi_dadd+0x64a>
 80015ae:	0029      	movs	r1, r5
 80015b0:	4339      	orrs	r1, r7
 80015b2:	d000      	beq.n	80015b6 <__aeabi_dadd+0x366>
 80015b4:	e17e      	b.n	80018b4 <__aeabi_dadd+0x664>
 80015b6:	4649      	mov	r1, r9
 80015b8:	0758      	lsls	r0, r3, #29
 80015ba:	08c9      	lsrs	r1, r1, #3
 80015bc:	4301      	orrs	r1, r0
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	e76e      	b.n	80014a0 <__aeabi_dadd+0x250>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	000007ff 	.word	0x000007ff
 80015c8:	ff7fffff 	.word	0xff7fffff
 80015cc:	000007fe 	.word	0x000007fe
 80015d0:	4649      	mov	r1, r9
 80015d2:	1bcd      	subs	r5, r1, r7
 80015d4:	4661      	mov	r1, ip
 80015d6:	1a58      	subs	r0, r3, r1
 80015d8:	45a9      	cmp	r9, r5
 80015da:	4189      	sbcs	r1, r1
 80015dc:	4249      	negs	r1, r1
 80015de:	4688      	mov	r8, r1
 80015e0:	0001      	movs	r1, r0
 80015e2:	4640      	mov	r0, r8
 80015e4:	1a09      	subs	r1, r1, r0
 80015e6:	4688      	mov	r8, r1
 80015e8:	0209      	lsls	r1, r1, #8
 80015ea:	d500      	bpl.n	80015ee <__aeabi_dadd+0x39e>
 80015ec:	e0a6      	b.n	800173c <__aeabi_dadd+0x4ec>
 80015ee:	4641      	mov	r1, r8
 80015f0:	4329      	orrs	r1, r5
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x3a6>
 80015f4:	e67f      	b.n	80012f6 <__aeabi_dadd+0xa6>
 80015f6:	2300      	movs	r3, #0
 80015f8:	2400      	movs	r4, #0
 80015fa:	e751      	b.n	80014a0 <__aeabi_dadd+0x250>
 80015fc:	4cc7      	ldr	r4, [pc, #796]	; (800191c <__aeabi_dadd+0x6cc>)
 80015fe:	42a1      	cmp	r1, r4
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x3b4>
 8001602:	e0c7      	b.n	8001794 <__aeabi_dadd+0x544>
 8001604:	2480      	movs	r4, #128	; 0x80
 8001606:	0424      	lsls	r4, r4, #16
 8001608:	4323      	orrs	r3, r4
 800160a:	2a38      	cmp	r2, #56	; 0x38
 800160c:	dc54      	bgt.n	80016b8 <__aeabi_dadd+0x468>
 800160e:	2a1f      	cmp	r2, #31
 8001610:	dd00      	ble.n	8001614 <__aeabi_dadd+0x3c4>
 8001612:	e0cc      	b.n	80017ae <__aeabi_dadd+0x55e>
 8001614:	2420      	movs	r4, #32
 8001616:	4648      	mov	r0, r9
 8001618:	1aa4      	subs	r4, r4, r2
 800161a:	001d      	movs	r5, r3
 800161c:	464e      	mov	r6, r9
 800161e:	40a0      	lsls	r0, r4
 8001620:	40d6      	lsrs	r6, r2
 8001622:	40a5      	lsls	r5, r4
 8001624:	0004      	movs	r4, r0
 8001626:	40d3      	lsrs	r3, r2
 8001628:	4662      	mov	r2, ip
 800162a:	4335      	orrs	r5, r6
 800162c:	1e66      	subs	r6, r4, #1
 800162e:	41b4      	sbcs	r4, r6
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	469c      	mov	ip, r3
 8001634:	4325      	orrs	r5, r4
 8001636:	e044      	b.n	80016c2 <__aeabi_dadd+0x472>
 8001638:	4662      	mov	r2, ip
 800163a:	433a      	orrs	r2, r7
 800163c:	0015      	movs	r5, r2
 800163e:	1e6f      	subs	r7, r5, #1
 8001640:	41bd      	sbcs	r5, r7
 8001642:	444d      	add	r5, r9
 8001644:	454d      	cmp	r5, r9
 8001646:	4189      	sbcs	r1, r1
 8001648:	4249      	negs	r1, r1
 800164a:	4688      	mov	r8, r1
 800164c:	4498      	add	r8, r3
 800164e:	4643      	mov	r3, r8
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	d400      	bmi.n	8001656 <__aeabi_dadd+0x406>
 8001654:	e718      	b.n	8001488 <__aeabi_dadd+0x238>
 8001656:	4bb1      	ldr	r3, [pc, #708]	; (800191c <__aeabi_dadd+0x6cc>)
 8001658:	3601      	adds	r6, #1
 800165a:	429e      	cmp	r6, r3
 800165c:	d049      	beq.n	80016f2 <__aeabi_dadd+0x4a2>
 800165e:	4642      	mov	r2, r8
 8001660:	4baf      	ldr	r3, [pc, #700]	; (8001920 <__aeabi_dadd+0x6d0>)
 8001662:	2101      	movs	r1, #1
 8001664:	401a      	ands	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	086a      	lsrs	r2, r5, #1
 800166a:	400d      	ands	r5, r1
 800166c:	4315      	orrs	r5, r2
 800166e:	07d9      	lsls	r1, r3, #31
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	4698      	mov	r8, r3
 8001674:	430d      	orrs	r5, r1
 8001676:	e665      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001678:	0018      	movs	r0, r3
 800167a:	3e1f      	subs	r6, #31
 800167c:	40f0      	lsrs	r0, r6
 800167e:	2a20      	cmp	r2, #32
 8001680:	d003      	beq.n	800168a <__aeabi_dadd+0x43a>
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	1a8a      	subs	r2, r1, r2
 8001686:	4093      	lsls	r3, r2
 8001688:	431d      	orrs	r5, r3
 800168a:	1e69      	subs	r1, r5, #1
 800168c:	418d      	sbcs	r5, r1
 800168e:	2300      	movs	r3, #0
 8001690:	2600      	movs	r6, #0
 8001692:	4698      	mov	r8, r3
 8001694:	4305      	orrs	r5, r0
 8001696:	e6f7      	b.n	8001488 <__aeabi_dadd+0x238>
 8001698:	0011      	movs	r1, r2
 800169a:	4665      	mov	r5, ip
 800169c:	3920      	subs	r1, #32
 800169e:	40cd      	lsrs	r5, r1
 80016a0:	2a20      	cmp	r2, #32
 80016a2:	d004      	beq.n	80016ae <__aeabi_dadd+0x45e>
 80016a4:	2040      	movs	r0, #64	; 0x40
 80016a6:	4661      	mov	r1, ip
 80016a8:	1a82      	subs	r2, r0, r2
 80016aa:	4091      	lsls	r1, r2
 80016ac:	430f      	orrs	r7, r1
 80016ae:	0039      	movs	r1, r7
 80016b0:	1e4f      	subs	r7, r1, #1
 80016b2:	41b9      	sbcs	r1, r7
 80016b4:	4329      	orrs	r1, r5
 80016b6:	e60f      	b.n	80012d8 <__aeabi_dadd+0x88>
 80016b8:	464a      	mov	r2, r9
 80016ba:	4313      	orrs	r3, r2
 80016bc:	001d      	movs	r5, r3
 80016be:	1e6b      	subs	r3, r5, #1
 80016c0:	419d      	sbcs	r5, r3
 80016c2:	1b7d      	subs	r5, r7, r5
 80016c4:	42af      	cmp	r7, r5
 80016c6:	419b      	sbcs	r3, r3
 80016c8:	4662      	mov	r2, ip
 80016ca:	425b      	negs	r3, r3
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	4698      	mov	r8, r3
 80016d0:	4654      	mov	r4, sl
 80016d2:	000e      	movs	r6, r1
 80016d4:	e607      	b.n	80012e6 <__aeabi_dadd+0x96>
 80016d6:	4648      	mov	r0, r9
 80016d8:	4318      	orrs	r0, r3
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x48e>
 80016dc:	e0b3      	b.n	8001846 <__aeabi_dadd+0x5f6>
 80016de:	1e50      	subs	r0, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x496>
 80016e4:	e10d      	b.n	8001902 <__aeabi_dadd+0x6b2>
 80016e6:	4d8d      	ldr	r5, [pc, #564]	; (800191c <__aeabi_dadd+0x6cc>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x49e>
 80016ec:	e0a5      	b.n	800183a <__aeabi_dadd+0x5ea>
 80016ee:	0002      	movs	r2, r0
 80016f0:	e710      	b.n	8001514 <__aeabi_dadd+0x2c4>
 80016f2:	0032      	movs	r2, r6
 80016f4:	2300      	movs	r3, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	e644      	b.n	8001384 <__aeabi_dadd+0x134>
 80016fa:	2120      	movs	r1, #32
 80016fc:	0038      	movs	r0, r7
 80016fe:	1a89      	subs	r1, r1, r2
 8001700:	4665      	mov	r5, ip
 8001702:	408f      	lsls	r7, r1
 8001704:	408d      	lsls	r5, r1
 8001706:	40d0      	lsrs	r0, r2
 8001708:	1e79      	subs	r1, r7, #1
 800170a:	418f      	sbcs	r7, r1
 800170c:	4305      	orrs	r5, r0
 800170e:	433d      	orrs	r5, r7
 8001710:	4667      	mov	r7, ip
 8001712:	40d7      	lsrs	r7, r2
 8001714:	19db      	adds	r3, r3, r7
 8001716:	e794      	b.n	8001642 <__aeabi_dadd+0x3f2>
 8001718:	4a80      	ldr	r2, [pc, #512]	; (800191c <__aeabi_dadd+0x6cc>)
 800171a:	4290      	cmp	r0, r2
 800171c:	d100      	bne.n	8001720 <__aeabi_dadd+0x4d0>
 800171e:	e0ec      	b.n	80018fa <__aeabi_dadd+0x6aa>
 8001720:	0039      	movs	r1, r7
 8001722:	4449      	add	r1, r9
 8001724:	4549      	cmp	r1, r9
 8001726:	4192      	sbcs	r2, r2
 8001728:	4463      	add	r3, ip
 800172a:	4252      	negs	r2, r2
 800172c:	189b      	adds	r3, r3, r2
 800172e:	07dd      	lsls	r5, r3, #31
 8001730:	0849      	lsrs	r1, r1, #1
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	4698      	mov	r8, r3
 8001736:	0006      	movs	r6, r0
 8001738:	430d      	orrs	r5, r1
 800173a:	e6a5      	b.n	8001488 <__aeabi_dadd+0x238>
 800173c:	464a      	mov	r2, r9
 800173e:	1abd      	subs	r5, r7, r2
 8001740:	42af      	cmp	r7, r5
 8001742:	4189      	sbcs	r1, r1
 8001744:	4662      	mov	r2, ip
 8001746:	4249      	negs	r1, r1
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	1a5b      	subs	r3, r3, r1
 800174c:	4698      	mov	r8, r3
 800174e:	4654      	mov	r4, sl
 8001750:	e5d1      	b.n	80012f6 <__aeabi_dadd+0xa6>
 8001752:	076c      	lsls	r4, r5, #29
 8001754:	08f9      	lsrs	r1, r7, #3
 8001756:	4321      	orrs	r1, r4
 8001758:	08eb      	lsrs	r3, r5, #3
 800175a:	0004      	movs	r4, r0
 800175c:	e69d      	b.n	800149a <__aeabi_dadd+0x24a>
 800175e:	464a      	mov	r2, r9
 8001760:	431a      	orrs	r2, r3
 8001762:	d175      	bne.n	8001850 <__aeabi_dadd+0x600>
 8001764:	4661      	mov	r1, ip
 8001766:	4339      	orrs	r1, r7
 8001768:	d114      	bne.n	8001794 <__aeabi_dadd+0x544>
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	2400      	movs	r4, #0
 800176e:	031b      	lsls	r3, r3, #12
 8001770:	e6bc      	b.n	80014ec <__aeabi_dadd+0x29c>
 8001772:	464a      	mov	r2, r9
 8001774:	1bd5      	subs	r5, r2, r7
 8001776:	45a9      	cmp	r9, r5
 8001778:	4189      	sbcs	r1, r1
 800177a:	4662      	mov	r2, ip
 800177c:	4249      	negs	r1, r1
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	4698      	mov	r8, r3
 8001784:	2601      	movs	r6, #1
 8001786:	e5ae      	b.n	80012e6 <__aeabi_dadd+0x96>
 8001788:	464a      	mov	r2, r9
 800178a:	08d1      	lsrs	r1, r2, #3
 800178c:	075a      	lsls	r2, r3, #29
 800178e:	4311      	orrs	r1, r2
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	e6a7      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001794:	4663      	mov	r3, ip
 8001796:	08f9      	lsrs	r1, r7, #3
 8001798:	075a      	lsls	r2, r3, #29
 800179a:	4654      	mov	r4, sl
 800179c:	4311      	orrs	r1, r2
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	e6a0      	b.n	80014e4 <__aeabi_dadd+0x294>
 80017a2:	464a      	mov	r2, r9
 80017a4:	4313      	orrs	r3, r2
 80017a6:	001d      	movs	r5, r3
 80017a8:	1e6b      	subs	r3, r5, #1
 80017aa:	419d      	sbcs	r5, r3
 80017ac:	e6c7      	b.n	800153e <__aeabi_dadd+0x2ee>
 80017ae:	0014      	movs	r4, r2
 80017b0:	001e      	movs	r6, r3
 80017b2:	3c20      	subs	r4, #32
 80017b4:	40e6      	lsrs	r6, r4
 80017b6:	2a20      	cmp	r2, #32
 80017b8:	d005      	beq.n	80017c6 <__aeabi_dadd+0x576>
 80017ba:	2440      	movs	r4, #64	; 0x40
 80017bc:	1aa2      	subs	r2, r4, r2
 80017be:	4093      	lsls	r3, r2
 80017c0:	464a      	mov	r2, r9
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4691      	mov	r9, r2
 80017c6:	464d      	mov	r5, r9
 80017c8:	1e6b      	subs	r3, r5, #1
 80017ca:	419d      	sbcs	r5, r3
 80017cc:	4335      	orrs	r5, r6
 80017ce:	e778      	b.n	80016c2 <__aeabi_dadd+0x472>
 80017d0:	464a      	mov	r2, r9
 80017d2:	431a      	orrs	r2, r3
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dadd+0x588>
 80017d6:	e66b      	b.n	80014b0 <__aeabi_dadd+0x260>
 80017d8:	076b      	lsls	r3, r5, #29
 80017da:	08f9      	lsrs	r1, r7, #3
 80017dc:	4319      	orrs	r1, r3
 80017de:	08eb      	lsrs	r3, r5, #3
 80017e0:	e680      	b.n	80014e4 <__aeabi_dadd+0x294>
 80017e2:	4661      	mov	r1, ip
 80017e4:	4339      	orrs	r1, r7
 80017e6:	d054      	beq.n	8001892 <__aeabi_dadd+0x642>
 80017e8:	4663      	mov	r3, ip
 80017ea:	08f9      	lsrs	r1, r7, #3
 80017ec:	075c      	lsls	r4, r3, #29
 80017ee:	4321      	orrs	r1, r4
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	0004      	movs	r4, r0
 80017f4:	e654      	b.n	80014a0 <__aeabi_dadd+0x250>
 80017f6:	464a      	mov	r2, r9
 80017f8:	1abd      	subs	r5, r7, r2
 80017fa:	42af      	cmp	r7, r5
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4662      	mov	r2, ip
 8001800:	4249      	negs	r1, r1
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	4698      	mov	r8, r3
 8001808:	0004      	movs	r4, r0
 800180a:	2601      	movs	r6, #1
 800180c:	e56b      	b.n	80012e6 <__aeabi_dadd+0x96>
 800180e:	464a      	mov	r2, r9
 8001810:	1bd5      	subs	r5, r2, r7
 8001812:	45a9      	cmp	r9, r5
 8001814:	4189      	sbcs	r1, r1
 8001816:	4662      	mov	r2, ip
 8001818:	4249      	negs	r1, r1
 800181a:	1a9a      	subs	r2, r3, r2
 800181c:	1a52      	subs	r2, r2, r1
 800181e:	4690      	mov	r8, r2
 8001820:	0212      	lsls	r2, r2, #8
 8001822:	d532      	bpl.n	800188a <__aeabi_dadd+0x63a>
 8001824:	464a      	mov	r2, r9
 8001826:	1abd      	subs	r5, r7, r2
 8001828:	42af      	cmp	r7, r5
 800182a:	4189      	sbcs	r1, r1
 800182c:	4662      	mov	r2, ip
 800182e:	4249      	negs	r1, r1
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	1a5b      	subs	r3, r3, r1
 8001834:	4698      	mov	r8, r3
 8001836:	0004      	movs	r4, r0
 8001838:	e584      	b.n	8001344 <__aeabi_dadd+0xf4>
 800183a:	4663      	mov	r3, ip
 800183c:	08f9      	lsrs	r1, r7, #3
 800183e:	075a      	lsls	r2, r3, #29
 8001840:	4311      	orrs	r1, r2
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	e64e      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001846:	08f9      	lsrs	r1, r7, #3
 8001848:	0768      	lsls	r0, r5, #29
 800184a:	4301      	orrs	r1, r0
 800184c:	08eb      	lsrs	r3, r5, #3
 800184e:	e624      	b.n	800149a <__aeabi_dadd+0x24a>
 8001850:	4662      	mov	r2, ip
 8001852:	433a      	orrs	r2, r7
 8001854:	d100      	bne.n	8001858 <__aeabi_dadd+0x608>
 8001856:	e698      	b.n	800158a <__aeabi_dadd+0x33a>
 8001858:	464a      	mov	r2, r9
 800185a:	08d1      	lsrs	r1, r2, #3
 800185c:	075a      	lsls	r2, r3, #29
 800185e:	4311      	orrs	r1, r2
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	031b      	lsls	r3, r3, #12
 8001866:	421a      	tst	r2, r3
 8001868:	d008      	beq.n	800187c <__aeabi_dadd+0x62c>
 800186a:	4660      	mov	r0, ip
 800186c:	08c5      	lsrs	r5, r0, #3
 800186e:	421d      	tst	r5, r3
 8001870:	d104      	bne.n	800187c <__aeabi_dadd+0x62c>
 8001872:	4654      	mov	r4, sl
 8001874:	002a      	movs	r2, r5
 8001876:	08f9      	lsrs	r1, r7, #3
 8001878:	0743      	lsls	r3, r0, #29
 800187a:	4319      	orrs	r1, r3
 800187c:	0f4b      	lsrs	r3, r1, #29
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	075b      	lsls	r3, r3, #29
 8001882:	08c9      	lsrs	r1, r1, #3
 8001884:	4319      	orrs	r1, r3
 8001886:	0013      	movs	r3, r2
 8001888:	e62c      	b.n	80014e4 <__aeabi_dadd+0x294>
 800188a:	4641      	mov	r1, r8
 800188c:	4329      	orrs	r1, r5
 800188e:	d000      	beq.n	8001892 <__aeabi_dadd+0x642>
 8001890:	e5fa      	b.n	8001488 <__aeabi_dadd+0x238>
 8001892:	2300      	movs	r3, #0
 8001894:	000a      	movs	r2, r1
 8001896:	2400      	movs	r4, #0
 8001898:	e602      	b.n	80014a0 <__aeabi_dadd+0x250>
 800189a:	076b      	lsls	r3, r5, #29
 800189c:	08f9      	lsrs	r1, r7, #3
 800189e:	4319      	orrs	r1, r3
 80018a0:	08eb      	lsrs	r3, r5, #3
 80018a2:	e5fd      	b.n	80014a0 <__aeabi_dadd+0x250>
 80018a4:	4663      	mov	r3, ip
 80018a6:	08f9      	lsrs	r1, r7, #3
 80018a8:	075b      	lsls	r3, r3, #29
 80018aa:	4319      	orrs	r1, r3
 80018ac:	4663      	mov	r3, ip
 80018ae:	0004      	movs	r4, r0
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	e617      	b.n	80014e4 <__aeabi_dadd+0x294>
 80018b4:	003d      	movs	r5, r7
 80018b6:	444d      	add	r5, r9
 80018b8:	4463      	add	r3, ip
 80018ba:	454d      	cmp	r5, r9
 80018bc:	4189      	sbcs	r1, r1
 80018be:	4698      	mov	r8, r3
 80018c0:	4249      	negs	r1, r1
 80018c2:	4488      	add	r8, r1
 80018c4:	4643      	mov	r3, r8
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	d400      	bmi.n	80018cc <__aeabi_dadd+0x67c>
 80018ca:	e5dd      	b.n	8001488 <__aeabi_dadd+0x238>
 80018cc:	4642      	mov	r2, r8
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <__aeabi_dadd+0x6d0>)
 80018d0:	2601      	movs	r6, #1
 80018d2:	401a      	ands	r2, r3
 80018d4:	4690      	mov	r8, r2
 80018d6:	e5d7      	b.n	8001488 <__aeabi_dadd+0x238>
 80018d8:	0010      	movs	r0, r2
 80018da:	001e      	movs	r6, r3
 80018dc:	3820      	subs	r0, #32
 80018de:	40c6      	lsrs	r6, r0
 80018e0:	2a20      	cmp	r2, #32
 80018e2:	d005      	beq.n	80018f0 <__aeabi_dadd+0x6a0>
 80018e4:	2040      	movs	r0, #64	; 0x40
 80018e6:	1a82      	subs	r2, r0, r2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	464a      	mov	r2, r9
 80018ec:	431a      	orrs	r2, r3
 80018ee:	4691      	mov	r9, r2
 80018f0:	464d      	mov	r5, r9
 80018f2:	1e6b      	subs	r3, r5, #1
 80018f4:	419d      	sbcs	r5, r3
 80018f6:	4335      	orrs	r5, r6
 80018f8:	e621      	b.n	800153e <__aeabi_dadd+0x2ee>
 80018fa:	0002      	movs	r2, r0
 80018fc:	2300      	movs	r3, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	e540      	b.n	8001384 <__aeabi_dadd+0x134>
 8001902:	464a      	mov	r2, r9
 8001904:	19d5      	adds	r5, r2, r7
 8001906:	42bd      	cmp	r5, r7
 8001908:	4189      	sbcs	r1, r1
 800190a:	4463      	add	r3, ip
 800190c:	4698      	mov	r8, r3
 800190e:	4249      	negs	r1, r1
 8001910:	4488      	add	r8, r1
 8001912:	e5b3      	b.n	800147c <__aeabi_dadd+0x22c>
 8001914:	2100      	movs	r1, #0
 8001916:	4a01      	ldr	r2, [pc, #4]	; (800191c <__aeabi_dadd+0x6cc>)
 8001918:	000b      	movs	r3, r1
 800191a:	e533      	b.n	8001384 <__aeabi_dadd+0x134>
 800191c:	000007ff 	.word	0x000007ff
 8001920:	ff7fffff 	.word	0xff7fffff

08001924 <__aeabi_dsub>:
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	4657      	mov	r7, sl
 8001928:	464e      	mov	r6, r9
 800192a:	4645      	mov	r5, r8
 800192c:	46de      	mov	lr, fp
 800192e:	0004      	movs	r4, r0
 8001930:	b5e0      	push	{r5, r6, r7, lr}
 8001932:	001f      	movs	r7, r3
 8001934:	0010      	movs	r0, r2
 8001936:	030b      	lsls	r3, r1, #12
 8001938:	0f62      	lsrs	r2, r4, #29
 800193a:	004e      	lsls	r6, r1, #1
 800193c:	0fcd      	lsrs	r5, r1, #31
 800193e:	0a5b      	lsrs	r3, r3, #9
 8001940:	0339      	lsls	r1, r7, #12
 8001942:	4313      	orrs	r3, r2
 8001944:	0a49      	lsrs	r1, r1, #9
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	0f44      	lsrs	r4, r0, #29
 800194a:	4321      	orrs	r1, r4
 800194c:	4cc2      	ldr	r4, [pc, #776]	; (8001c58 <__aeabi_dsub+0x334>)
 800194e:	4691      	mov	r9, r2
 8001950:	4692      	mov	sl, r2
 8001952:	00c0      	lsls	r0, r0, #3
 8001954:	007a      	lsls	r2, r7, #1
 8001956:	4680      	mov	r8, r0
 8001958:	0d76      	lsrs	r6, r6, #21
 800195a:	0d52      	lsrs	r2, r2, #21
 800195c:	0fff      	lsrs	r7, r7, #31
 800195e:	42a2      	cmp	r2, r4
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x40>
 8001962:	e0b4      	b.n	8001ace <__aeabi_dsub+0x1aa>
 8001964:	2401      	movs	r4, #1
 8001966:	4067      	eors	r7, r4
 8001968:	46bb      	mov	fp, r7
 800196a:	42bd      	cmp	r5, r7
 800196c:	d100      	bne.n	8001970 <__aeabi_dsub+0x4c>
 800196e:	e088      	b.n	8001a82 <__aeabi_dsub+0x15e>
 8001970:	1ab4      	subs	r4, r6, r2
 8001972:	46a4      	mov	ip, r4
 8001974:	2c00      	cmp	r4, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x56>
 8001978:	e0b2      	b.n	8001ae0 <__aeabi_dsub+0x1bc>
 800197a:	2a00      	cmp	r2, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x5c>
 800197e:	e0c5      	b.n	8001b0c <__aeabi_dsub+0x1e8>
 8001980:	4ab5      	ldr	r2, [pc, #724]	; (8001c58 <__aeabi_dsub+0x334>)
 8001982:	4296      	cmp	r6, r2
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x64>
 8001986:	e28b      	b.n	8001ea0 <__aeabi_dsub+0x57c>
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0412      	lsls	r2, r2, #16
 800198c:	4311      	orrs	r1, r2
 800198e:	4662      	mov	r2, ip
 8001990:	2a38      	cmp	r2, #56	; 0x38
 8001992:	dd00      	ble.n	8001996 <__aeabi_dsub+0x72>
 8001994:	e1a1      	b.n	8001cda <__aeabi_dsub+0x3b6>
 8001996:	2a1f      	cmp	r2, #31
 8001998:	dd00      	ble.n	800199c <__aeabi_dsub+0x78>
 800199a:	e216      	b.n	8001dca <__aeabi_dsub+0x4a6>
 800199c:	2720      	movs	r7, #32
 800199e:	000c      	movs	r4, r1
 80019a0:	1abf      	subs	r7, r7, r2
 80019a2:	40bc      	lsls	r4, r7
 80019a4:	0002      	movs	r2, r0
 80019a6:	46a0      	mov	r8, r4
 80019a8:	4664      	mov	r4, ip
 80019aa:	40b8      	lsls	r0, r7
 80019ac:	40e2      	lsrs	r2, r4
 80019ae:	4644      	mov	r4, r8
 80019b0:	4314      	orrs	r4, r2
 80019b2:	0002      	movs	r2, r0
 80019b4:	1e50      	subs	r0, r2, #1
 80019b6:	4182      	sbcs	r2, r0
 80019b8:	4660      	mov	r0, ip
 80019ba:	40c1      	lsrs	r1, r0
 80019bc:	4322      	orrs	r2, r4
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	4649      	mov	r1, r9
 80019c2:	1a8c      	subs	r4, r1, r2
 80019c4:	45a1      	cmp	r9, r4
 80019c6:	4192      	sbcs	r2, r2
 80019c8:	4252      	negs	r2, r2
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	4698      	mov	r8, r3
 80019ce:	4643      	mov	r3, r8
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	d400      	bmi.n	80019d6 <__aeabi_dsub+0xb2>
 80019d4:	e117      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 80019d6:	4643      	mov	r3, r8
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	4698      	mov	r8, r3
 80019de:	4643      	mov	r3, r8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0xc2>
 80019e4:	e16c      	b.n	8001cc0 <__aeabi_dsub+0x39c>
 80019e6:	4640      	mov	r0, r8
 80019e8:	f000 fc8e 	bl	8002308 <__clzsi2>
 80019ec:	0002      	movs	r2, r0
 80019ee:	3a08      	subs	r2, #8
 80019f0:	2120      	movs	r1, #32
 80019f2:	0020      	movs	r0, r4
 80019f4:	4643      	mov	r3, r8
 80019f6:	1a89      	subs	r1, r1, r2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	40c8      	lsrs	r0, r1
 80019fc:	4094      	lsls	r4, r2
 80019fe:	4303      	orrs	r3, r0
 8001a00:	4296      	cmp	r6, r2
 8001a02:	dd00      	ble.n	8001a06 <__aeabi_dsub+0xe2>
 8001a04:	e157      	b.n	8001cb6 <__aeabi_dsub+0x392>
 8001a06:	1b96      	subs	r6, r2, r6
 8001a08:	1c71      	adds	r1, r6, #1
 8001a0a:	291f      	cmp	r1, #31
 8001a0c:	dd00      	ble.n	8001a10 <__aeabi_dsub+0xec>
 8001a0e:	e1cb      	b.n	8001da8 <__aeabi_dsub+0x484>
 8001a10:	2220      	movs	r2, #32
 8001a12:	0018      	movs	r0, r3
 8001a14:	0026      	movs	r6, r4
 8001a16:	1a52      	subs	r2, r2, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4090      	lsls	r0, r2
 8001a1c:	40ce      	lsrs	r6, r1
 8001a1e:	40cb      	lsrs	r3, r1
 8001a20:	1e62      	subs	r2, r4, #1
 8001a22:	4194      	sbcs	r4, r2
 8001a24:	4330      	orrs	r0, r6
 8001a26:	4698      	mov	r8, r3
 8001a28:	2600      	movs	r6, #0
 8001a2a:	4304      	orrs	r4, r0
 8001a2c:	0763      	lsls	r3, r4, #29
 8001a2e:	d009      	beq.n	8001a44 <__aeabi_dsub+0x120>
 8001a30:	230f      	movs	r3, #15
 8001a32:	4023      	ands	r3, r4
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <__aeabi_dsub+0x120>
 8001a38:	1d23      	adds	r3, r4, #4
 8001a3a:	42a3      	cmp	r3, r4
 8001a3c:	41a4      	sbcs	r4, r4
 8001a3e:	4264      	negs	r4, r4
 8001a40:	44a0      	add	r8, r4
 8001a42:	001c      	movs	r4, r3
 8001a44:	4643      	mov	r3, r8
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	d400      	bmi.n	8001a4c <__aeabi_dsub+0x128>
 8001a4a:	e0df      	b.n	8001c0c <__aeabi_dsub+0x2e8>
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <__aeabi_dsub+0x334>)
 8001a4e:	3601      	adds	r6, #1
 8001a50:	429e      	cmp	r6, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x132>
 8001a54:	e0fb      	b.n	8001c4e <__aeabi_dsub+0x32a>
 8001a56:	4642      	mov	r2, r8
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <__aeabi_dsub+0x338>)
 8001a5a:	08e4      	lsrs	r4, r4, #3
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	0571      	lsls	r1, r6, #21
 8001a62:	0752      	lsls	r2, r2, #29
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4322      	orrs	r2, r4
 8001a68:	0b1b      	lsrs	r3, r3, #12
 8001a6a:	0d49      	lsrs	r1, r1, #21
 8001a6c:	0509      	lsls	r1, r1, #20
 8001a6e:	07ed      	lsls	r5, r5, #31
 8001a70:	4319      	orrs	r1, r3
 8001a72:	4329      	orrs	r1, r5
 8001a74:	0010      	movs	r0, r2
 8001a76:	bcf0      	pop	{r4, r5, r6, r7}
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	46b2      	mov	sl, r6
 8001a7c:	46a9      	mov	r9, r5
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a82:	1ab4      	subs	r4, r6, r2
 8001a84:	46a4      	mov	ip, r4
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	dd58      	ble.n	8001b3c <__aeabi_dsub+0x218>
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x16c>
 8001a8e:	e09e      	b.n	8001bce <__aeabi_dsub+0x2aa>
 8001a90:	4a71      	ldr	r2, [pc, #452]	; (8001c58 <__aeabi_dsub+0x334>)
 8001a92:	4296      	cmp	r6, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x174>
 8001a96:	e13b      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2a38      	cmp	r2, #56	; 0x38
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x182>
 8001aa4:	e0c1      	b.n	8001c2a <__aeabi_dsub+0x306>
 8001aa6:	2a1f      	cmp	r2, #31
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_dsub+0x188>
 8001aaa:	e1bb      	b.n	8001e24 <__aeabi_dsub+0x500>
 8001aac:	000c      	movs	r4, r1
 8001aae:	3a20      	subs	r2, #32
 8001ab0:	40d4      	lsrs	r4, r2
 8001ab2:	0022      	movs	r2, r4
 8001ab4:	4664      	mov	r4, ip
 8001ab6:	2c20      	cmp	r4, #32
 8001ab8:	d004      	beq.n	8001ac4 <__aeabi_dsub+0x1a0>
 8001aba:	2740      	movs	r7, #64	; 0x40
 8001abc:	1b3f      	subs	r7, r7, r4
 8001abe:	40b9      	lsls	r1, r7
 8001ac0:	4308      	orrs	r0, r1
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4644      	mov	r4, r8
 8001ac6:	1e61      	subs	r1, r4, #1
 8001ac8:	418c      	sbcs	r4, r1
 8001aca:	4314      	orrs	r4, r2
 8001acc:	e0b1      	b.n	8001c32 <__aeabi_dsub+0x30e>
 8001ace:	000c      	movs	r4, r1
 8001ad0:	4304      	orrs	r4, r0
 8001ad2:	d02a      	beq.n	8001b2a <__aeabi_dsub+0x206>
 8001ad4:	46bb      	mov	fp, r7
 8001ad6:	42bd      	cmp	r5, r7
 8001ad8:	d02d      	beq.n	8001b36 <__aeabi_dsub+0x212>
 8001ada:	4c61      	ldr	r4, [pc, #388]	; (8001c60 <__aeabi_dsub+0x33c>)
 8001adc:	46a4      	mov	ip, r4
 8001ade:	44b4      	add	ip, r6
 8001ae0:	4664      	mov	r4, ip
 8001ae2:	2c00      	cmp	r4, #0
 8001ae4:	d05c      	beq.n	8001ba0 <__aeabi_dsub+0x27c>
 8001ae6:	1b94      	subs	r4, r2, r6
 8001ae8:	46a4      	mov	ip, r4
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x1cc>
 8001aee:	e115      	b.n	8001d1c <__aeabi_dsub+0x3f8>
 8001af0:	464d      	mov	r5, r9
 8001af2:	431d      	orrs	r5, r3
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x1d4>
 8001af6:	e1c3      	b.n	8001e80 <__aeabi_dsub+0x55c>
 8001af8:	1e65      	subs	r5, r4, #1
 8001afa:	2c01      	cmp	r4, #1
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x1dc>
 8001afe:	e20c      	b.n	8001f1a <__aeabi_dsub+0x5f6>
 8001b00:	4e55      	ldr	r6, [pc, #340]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b02:	42b4      	cmp	r4, r6
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x1e4>
 8001b06:	e1f8      	b.n	8001efa <__aeabi_dsub+0x5d6>
 8001b08:	46ac      	mov	ip, r5
 8001b0a:	e10e      	b.n	8001d2a <__aeabi_dsub+0x406>
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	4302      	orrs	r2, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1f0>
 8001b12:	e136      	b.n	8001d82 <__aeabi_dsub+0x45e>
 8001b14:	0022      	movs	r2, r4
 8001b16:	3a01      	subs	r2, #1
 8001b18:	2c01      	cmp	r4, #1
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x1fa>
 8001b1c:	e1c6      	b.n	8001eac <__aeabi_dsub+0x588>
 8001b1e:	4c4e      	ldr	r4, [pc, #312]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b20:	45a4      	cmp	ip, r4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x202>
 8001b24:	e0f4      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001b26:	4694      	mov	ip, r2
 8001b28:	e731      	b.n	800198e <__aeabi_dsub+0x6a>
 8001b2a:	2401      	movs	r4, #1
 8001b2c:	4067      	eors	r7, r4
 8001b2e:	46bb      	mov	fp, r7
 8001b30:	42bd      	cmp	r5, r7
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x212>
 8001b34:	e71c      	b.n	8001970 <__aeabi_dsub+0x4c>
 8001b36:	4c4a      	ldr	r4, [pc, #296]	; (8001c60 <__aeabi_dsub+0x33c>)
 8001b38:	46a4      	mov	ip, r4
 8001b3a:	44b4      	add	ip, r6
 8001b3c:	4664      	mov	r4, ip
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x220>
 8001b42:	e0cf      	b.n	8001ce4 <__aeabi_dsub+0x3c0>
 8001b44:	1b94      	subs	r4, r2, r6
 8001b46:	46a4      	mov	ip, r4
 8001b48:	2e00      	cmp	r6, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x22a>
 8001b4c:	e15c      	b.n	8001e08 <__aeabi_dsub+0x4e4>
 8001b4e:	4e42      	ldr	r6, [pc, #264]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b50:	42b2      	cmp	r2, r6
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x232>
 8001b54:	e1ec      	b.n	8001f30 <__aeabi_dsub+0x60c>
 8001b56:	2680      	movs	r6, #128	; 0x80
 8001b58:	0436      	lsls	r6, r6, #16
 8001b5a:	4333      	orrs	r3, r6
 8001b5c:	4664      	mov	r4, ip
 8001b5e:	2c38      	cmp	r4, #56	; 0x38
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dsub+0x240>
 8001b62:	e1b3      	b.n	8001ecc <__aeabi_dsub+0x5a8>
 8001b64:	2c1f      	cmp	r4, #31
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0x246>
 8001b68:	e238      	b.n	8001fdc <__aeabi_dsub+0x6b8>
 8001b6a:	2620      	movs	r6, #32
 8001b6c:	1b36      	subs	r6, r6, r4
 8001b6e:	001c      	movs	r4, r3
 8001b70:	40b4      	lsls	r4, r6
 8001b72:	464f      	mov	r7, r9
 8001b74:	46a0      	mov	r8, r4
 8001b76:	4664      	mov	r4, ip
 8001b78:	40e7      	lsrs	r7, r4
 8001b7a:	4644      	mov	r4, r8
 8001b7c:	433c      	orrs	r4, r7
 8001b7e:	464f      	mov	r7, r9
 8001b80:	40b7      	lsls	r7, r6
 8001b82:	003e      	movs	r6, r7
 8001b84:	1e77      	subs	r7, r6, #1
 8001b86:	41be      	sbcs	r6, r7
 8001b88:	4334      	orrs	r4, r6
 8001b8a:	4666      	mov	r6, ip
 8001b8c:	40f3      	lsrs	r3, r6
 8001b8e:	18c9      	adds	r1, r1, r3
 8001b90:	1824      	adds	r4, r4, r0
 8001b92:	4284      	cmp	r4, r0
 8001b94:	419b      	sbcs	r3, r3
 8001b96:	425b      	negs	r3, r3
 8001b98:	4698      	mov	r8, r3
 8001b9a:	0016      	movs	r6, r2
 8001b9c:	4488      	add	r8, r1
 8001b9e:	e04e      	b.n	8001c3e <__aeabi_dsub+0x31a>
 8001ba0:	4a30      	ldr	r2, [pc, #192]	; (8001c64 <__aeabi_dsub+0x340>)
 8001ba2:	1c74      	adds	r4, r6, #1
 8001ba4:	4214      	tst	r4, r2
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x286>
 8001ba8:	e0d6      	b.n	8001d58 <__aeabi_dsub+0x434>
 8001baa:	464a      	mov	r2, r9
 8001bac:	431a      	orrs	r2, r3
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	d000      	beq.n	8001bb4 <__aeabi_dsub+0x290>
 8001bb2:	e15b      	b.n	8001e6c <__aeabi_dsub+0x548>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x296>
 8001bb8:	e1a5      	b.n	8001f06 <__aeabi_dsub+0x5e2>
 8001bba:	000a      	movs	r2, r1
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x29e>
 8001bc0:	e1bb      	b.n	8001f3a <__aeabi_dsub+0x616>
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	0759      	lsls	r1, r3, #29
 8001bc6:	08d2      	lsrs	r2, r2, #3
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	e027      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001bce:	000a      	movs	r2, r1
 8001bd0:	4302      	orrs	r2, r0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x2b2>
 8001bd4:	e174      	b.n	8001ec0 <__aeabi_dsub+0x59c>
 8001bd6:	0022      	movs	r2, r4
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	2c01      	cmp	r4, #1
 8001bdc:	d005      	beq.n	8001bea <__aeabi_dsub+0x2c6>
 8001bde:	4c1e      	ldr	r4, [pc, #120]	; (8001c58 <__aeabi_dsub+0x334>)
 8001be0:	45a4      	cmp	ip, r4
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x2c2>
 8001be4:	e094      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001be6:	4694      	mov	ip, r2
 8001be8:	e759      	b.n	8001a9e <__aeabi_dsub+0x17a>
 8001bea:	4448      	add	r0, r9
 8001bec:	4548      	cmp	r0, r9
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	185b      	adds	r3, r3, r1
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	4252      	negs	r2, r2
 8001bf8:	4490      	add	r8, r2
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	2602      	movs	r6, #2
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	d500      	bpl.n	8001c04 <__aeabi_dsub+0x2e0>
 8001c02:	e0c4      	b.n	8001d8e <__aeabi_dsub+0x46a>
 8001c04:	3e01      	subs	r6, #1
 8001c06:	0763      	lsls	r3, r4, #29
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x2e8>
 8001c0a:	e711      	b.n	8001a30 <__aeabi_dsub+0x10c>
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	46b4      	mov	ip, r6
 8001c10:	0759      	lsls	r1, r3, #29
 8001c12:	08e2      	lsrs	r2, r4, #3
 8001c14:	430a      	orrs	r2, r1
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	490f      	ldr	r1, [pc, #60]	; (8001c58 <__aeabi_dsub+0x334>)
 8001c1a:	458c      	cmp	ip, r1
 8001c1c:	d040      	beq.n	8001ca0 <__aeabi_dsub+0x37c>
 8001c1e:	4661      	mov	r1, ip
 8001c20:	031b      	lsls	r3, r3, #12
 8001c22:	0549      	lsls	r1, r1, #21
 8001c24:	0b1b      	lsrs	r3, r3, #12
 8001c26:	0d49      	lsrs	r1, r1, #21
 8001c28:	e720      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001c2a:	4301      	orrs	r1, r0
 8001c2c:	000c      	movs	r4, r1
 8001c2e:	1e61      	subs	r1, r4, #1
 8001c30:	418c      	sbcs	r4, r1
 8001c32:	444c      	add	r4, r9
 8001c34:	454c      	cmp	r4, r9
 8001c36:	4192      	sbcs	r2, r2
 8001c38:	4252      	negs	r2, r2
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4498      	add	r8, r3
 8001c3e:	4643      	mov	r3, r8
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	d5e0      	bpl.n	8001c06 <__aeabi_dsub+0x2e2>
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__aeabi_dsub+0x334>)
 8001c46:	3601      	adds	r6, #1
 8001c48:	429e      	cmp	r6, r3
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x32a>
 8001c4c:	e09f      	b.n	8001d8e <__aeabi_dsub+0x46a>
 8001c4e:	0031      	movs	r1, r6
 8001c50:	2300      	movs	r3, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	e70a      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	ff7fffff 	.word	0xff7fffff
 8001c60:	fffff801 	.word	0xfffff801
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x34a>
 8001c6c:	e160      	b.n	8001f30 <__aeabi_dsub+0x60c>
 8001c6e:	000a      	movs	r2, r1
 8001c70:	4302      	orrs	r2, r0
 8001c72:	d04d      	beq.n	8001d10 <__aeabi_dsub+0x3ec>
 8001c74:	464a      	mov	r2, r9
 8001c76:	075c      	lsls	r4, r3, #29
 8001c78:	08d2      	lsrs	r2, r2, #3
 8001c7a:	4322      	orrs	r2, r4
 8001c7c:	2480      	movs	r4, #128	; 0x80
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	0324      	lsls	r4, r4, #12
 8001c82:	4223      	tst	r3, r4
 8001c84:	d007      	beq.n	8001c96 <__aeabi_dsub+0x372>
 8001c86:	08ce      	lsrs	r6, r1, #3
 8001c88:	4226      	tst	r6, r4
 8001c8a:	d104      	bne.n	8001c96 <__aeabi_dsub+0x372>
 8001c8c:	465d      	mov	r5, fp
 8001c8e:	0033      	movs	r3, r6
 8001c90:	08c2      	lsrs	r2, r0, #3
 8001c92:	0749      	lsls	r1, r1, #29
 8001c94:	430a      	orrs	r2, r1
 8001c96:	0f51      	lsrs	r1, r2, #29
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	08d2      	lsrs	r2, r2, #3
 8001c9c:	0749      	lsls	r1, r1, #29
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x384>
 8001ca6:	e1c8      	b.n	800203a <__aeabi_dsub+0x716>
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0309      	lsls	r1, r1, #12
 8001cac:	430b      	orrs	r3, r1
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	49d5      	ldr	r1, [pc, #852]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001cb2:	0b1b      	lsrs	r3, r3, #12
 8001cb4:	e6da      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001cb6:	49d5      	ldr	r1, [pc, #852]	; (800200c <__aeabi_dsub+0x6e8>)
 8001cb8:	1ab6      	subs	r6, r6, r2
 8001cba:	400b      	ands	r3, r1
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	e6b5      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	f000 fb21 	bl	8002308 <__clzsi2>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	3218      	adds	r2, #24
 8001cca:	2a1f      	cmp	r2, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_dsub+0x3ac>
 8001cce:	e68f      	b.n	80019f0 <__aeabi_dsub+0xcc>
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	3808      	subs	r0, #8
 8001cd4:	4083      	lsls	r3, r0
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	e692      	b.n	8001a00 <__aeabi_dsub+0xdc>
 8001cda:	4308      	orrs	r0, r1
 8001cdc:	0002      	movs	r2, r0
 8001cde:	1e50      	subs	r0, r2, #1
 8001ce0:	4182      	sbcs	r2, r0
 8001ce2:	e66d      	b.n	80019c0 <__aeabi_dsub+0x9c>
 8001ce4:	4cca      	ldr	r4, [pc, #808]	; (8002010 <__aeabi_dsub+0x6ec>)
 8001ce6:	1c72      	adds	r2, r6, #1
 8001ce8:	4222      	tst	r2, r4
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x3ca>
 8001cec:	e0ad      	b.n	8001e4a <__aeabi_dsub+0x526>
 8001cee:	464a      	mov	r2, r9
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	2e00      	cmp	r6, #0
 8001cf4:	d1b8      	bne.n	8001c68 <__aeabi_dsub+0x344>
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x3d8>
 8001cfa:	e158      	b.n	8001fae <__aeabi_dsub+0x68a>
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	4302      	orrs	r2, r0
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dsub+0x3e0>
 8001d02:	e159      	b.n	8001fb8 <__aeabi_dsub+0x694>
 8001d04:	464a      	mov	r2, r9
 8001d06:	0759      	lsls	r1, r3, #29
 8001d08:	08d2      	lsrs	r2, r2, #3
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	e786      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001d10:	464a      	mov	r2, r9
 8001d12:	0759      	lsls	r1, r3, #29
 8001d14:	08d2      	lsrs	r2, r2, #3
 8001d16:	430a      	orrs	r2, r1
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	e7c1      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001d1c:	4dba      	ldr	r5, [pc, #744]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001d1e:	42aa      	cmp	r2, r5
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x400>
 8001d22:	e11e      	b.n	8001f62 <__aeabi_dsub+0x63e>
 8001d24:	2580      	movs	r5, #128	; 0x80
 8001d26:	042d      	lsls	r5, r5, #16
 8001d28:	432b      	orrs	r3, r5
 8001d2a:	4664      	mov	r4, ip
 8001d2c:	2c38      	cmp	r4, #56	; 0x38
 8001d2e:	dc5d      	bgt.n	8001dec <__aeabi_dsub+0x4c8>
 8001d30:	2c1f      	cmp	r4, #31
 8001d32:	dd00      	ble.n	8001d36 <__aeabi_dsub+0x412>
 8001d34:	e0d0      	b.n	8001ed8 <__aeabi_dsub+0x5b4>
 8001d36:	2520      	movs	r5, #32
 8001d38:	4667      	mov	r7, ip
 8001d3a:	1b2d      	subs	r5, r5, r4
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	001c      	movs	r4, r3
 8001d40:	40fe      	lsrs	r6, r7
 8001d42:	40ac      	lsls	r4, r5
 8001d44:	4334      	orrs	r4, r6
 8001d46:	464e      	mov	r6, r9
 8001d48:	40ae      	lsls	r6, r5
 8001d4a:	0035      	movs	r5, r6
 8001d4c:	40fb      	lsrs	r3, r7
 8001d4e:	1e6e      	subs	r6, r5, #1
 8001d50:	41b5      	sbcs	r5, r6
 8001d52:	1ac9      	subs	r1, r1, r3
 8001d54:	432c      	orrs	r4, r5
 8001d56:	e04e      	b.n	8001df6 <__aeabi_dsub+0x4d2>
 8001d58:	464a      	mov	r2, r9
 8001d5a:	1a14      	subs	r4, r2, r0
 8001d5c:	45a1      	cmp	r9, r4
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4252      	negs	r2, r2
 8001d62:	4690      	mov	r8, r2
 8001d64:	1a5f      	subs	r7, r3, r1
 8001d66:	003a      	movs	r2, r7
 8001d68:	4647      	mov	r7, r8
 8001d6a:	1bd2      	subs	r2, r2, r7
 8001d6c:	4690      	mov	r8, r2
 8001d6e:	0212      	lsls	r2, r2, #8
 8001d70:	d500      	bpl.n	8001d74 <__aeabi_dsub+0x450>
 8001d72:	e08b      	b.n	8001e8c <__aeabi_dsub+0x568>
 8001d74:	4642      	mov	r2, r8
 8001d76:	4322      	orrs	r2, r4
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x458>
 8001d7a:	e630      	b.n	80019de <__aeabi_dsub+0xba>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2500      	movs	r5, #0
 8001d80:	e74d      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001d82:	464a      	mov	r2, r9
 8001d84:	0759      	lsls	r1, r3, #29
 8001d86:	08d2      	lsrs	r2, r2, #3
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	e744      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001d8e:	4642      	mov	r2, r8
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <__aeabi_dsub+0x6e8>)
 8001d92:	0861      	lsrs	r1, r4, #1
 8001d94:	401a      	ands	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4014      	ands	r4, r2
 8001d9c:	430c      	orrs	r4, r1
 8001d9e:	07da      	lsls	r2, r3, #31
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	4698      	mov	r8, r3
 8001da4:	4314      	orrs	r4, r2
 8001da6:	e641      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001da8:	001a      	movs	r2, r3
 8001daa:	3e1f      	subs	r6, #31
 8001dac:	40f2      	lsrs	r2, r6
 8001dae:	0016      	movs	r6, r2
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x498>
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	1a51      	subs	r1, r2, r1
 8001db8:	408b      	lsls	r3, r1
 8001dba:	431c      	orrs	r4, r3
 8001dbc:	1e62      	subs	r2, r4, #1
 8001dbe:	4194      	sbcs	r4, r2
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4334      	orrs	r4, r6
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	e71d      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001dca:	000c      	movs	r4, r1
 8001dcc:	3a20      	subs	r2, #32
 8001dce:	40d4      	lsrs	r4, r2
 8001dd0:	0022      	movs	r2, r4
 8001dd2:	4664      	mov	r4, ip
 8001dd4:	2c20      	cmp	r4, #32
 8001dd6:	d004      	beq.n	8001de2 <__aeabi_dsub+0x4be>
 8001dd8:	2740      	movs	r7, #64	; 0x40
 8001dda:	1b3f      	subs	r7, r7, r4
 8001ddc:	40b9      	lsls	r1, r7
 8001dde:	4308      	orrs	r0, r1
 8001de0:	4680      	mov	r8, r0
 8001de2:	4644      	mov	r4, r8
 8001de4:	1e61      	subs	r1, r4, #1
 8001de6:	418c      	sbcs	r4, r1
 8001de8:	4322      	orrs	r2, r4
 8001dea:	e5e9      	b.n	80019c0 <__aeabi_dsub+0x9c>
 8001dec:	464c      	mov	r4, r9
 8001dee:	4323      	orrs	r3, r4
 8001df0:	001c      	movs	r4, r3
 8001df2:	1e63      	subs	r3, r4, #1
 8001df4:	419c      	sbcs	r4, r3
 8001df6:	1b04      	subs	r4, r0, r4
 8001df8:	42a0      	cmp	r0, r4
 8001dfa:	419b      	sbcs	r3, r3
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	4698      	mov	r8, r3
 8001e02:	465d      	mov	r5, fp
 8001e04:	0016      	movs	r6, r2
 8001e06:	e5e2      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001e08:	464e      	mov	r6, r9
 8001e0a:	431e      	orrs	r6, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x4ec>
 8001e0e:	e0ae      	b.n	8001f6e <__aeabi_dsub+0x64a>
 8001e10:	1e66      	subs	r6, r4, #1
 8001e12:	2c01      	cmp	r4, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x4f4>
 8001e16:	e0fd      	b.n	8002014 <__aeabi_dsub+0x6f0>
 8001e18:	4f7b      	ldr	r7, [pc, #492]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001e1a:	42bc      	cmp	r4, r7
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x4fc>
 8001e1e:	e107      	b.n	8002030 <__aeabi_dsub+0x70c>
 8001e20:	46b4      	mov	ip, r6
 8001e22:	e69b      	b.n	8001b5c <__aeabi_dsub+0x238>
 8001e24:	4664      	mov	r4, ip
 8001e26:	2220      	movs	r2, #32
 8001e28:	1b12      	subs	r2, r2, r4
 8001e2a:	000c      	movs	r4, r1
 8001e2c:	4094      	lsls	r4, r2
 8001e2e:	0007      	movs	r7, r0
 8001e30:	4090      	lsls	r0, r2
 8001e32:	46a0      	mov	r8, r4
 8001e34:	4664      	mov	r4, ip
 8001e36:	1e42      	subs	r2, r0, #1
 8001e38:	4190      	sbcs	r0, r2
 8001e3a:	4662      	mov	r2, ip
 8001e3c:	40e7      	lsrs	r7, r4
 8001e3e:	4644      	mov	r4, r8
 8001e40:	40d1      	lsrs	r1, r2
 8001e42:	433c      	orrs	r4, r7
 8001e44:	4304      	orrs	r4, r0
 8001e46:	185b      	adds	r3, r3, r1
 8001e48:	e6f3      	b.n	8001c32 <__aeabi_dsub+0x30e>
 8001e4a:	4c6f      	ldr	r4, [pc, #444]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001e4c:	42a2      	cmp	r2, r4
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x52e>
 8001e50:	e0d5      	b.n	8001ffe <__aeabi_dsub+0x6da>
 8001e52:	4448      	add	r0, r9
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	4548      	cmp	r0, r9
 8001e58:	4189      	sbcs	r1, r1
 8001e5a:	4249      	negs	r1, r1
 8001e5c:	185b      	adds	r3, r3, r1
 8001e5e:	07dc      	lsls	r4, r3, #31
 8001e60:	0840      	lsrs	r0, r0, #1
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	4698      	mov	r8, r3
 8001e66:	0016      	movs	r6, r2
 8001e68:	4304      	orrs	r4, r0
 8001e6a:	e6cc      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x54e>
 8001e70:	e082      	b.n	8001f78 <__aeabi_dsub+0x654>
 8001e72:	000a      	movs	r2, r1
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d140      	bne.n	8001efa <__aeabi_dsub+0x5d6>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	e713      	b.n	8001ca8 <__aeabi_dsub+0x384>
 8001e80:	074b      	lsls	r3, r1, #29
 8001e82:	08c2      	lsrs	r2, r0, #3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	465d      	mov	r5, fp
 8001e88:	08cb      	lsrs	r3, r1, #3
 8001e8a:	e6c5      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	1a84      	subs	r4, r0, r2
 8001e90:	42a0      	cmp	r0, r4
 8001e92:	4192      	sbcs	r2, r2
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	4252      	negs	r2, r2
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	465d      	mov	r5, fp
 8001e9e:	e59e      	b.n	80019de <__aeabi_dsub+0xba>
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	0759      	lsls	r1, r3, #29
 8001ea4:	08d2      	lsrs	r2, r2, #3
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	e6f9      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001eac:	464a      	mov	r2, r9
 8001eae:	1a14      	subs	r4, r2, r0
 8001eb0:	45a1      	cmp	r9, r4
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	1a5b      	subs	r3, r3, r1
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	4698      	mov	r8, r3
 8001ebc:	2601      	movs	r6, #1
 8001ebe:	e586      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001ec0:	464a      	mov	r2, r9
 8001ec2:	0759      	lsls	r1, r3, #29
 8001ec4:	08d2      	lsrs	r2, r2, #3
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	e6a5      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001ecc:	464c      	mov	r4, r9
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	001c      	movs	r4, r3
 8001ed2:	1e63      	subs	r3, r4, #1
 8001ed4:	419c      	sbcs	r4, r3
 8001ed6:	e65b      	b.n	8001b90 <__aeabi_dsub+0x26c>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	001e      	movs	r6, r3
 8001edc:	3d20      	subs	r5, #32
 8001ede:	40ee      	lsrs	r6, r5
 8001ee0:	2c20      	cmp	r4, #32
 8001ee2:	d005      	beq.n	8001ef0 <__aeabi_dsub+0x5cc>
 8001ee4:	2540      	movs	r5, #64	; 0x40
 8001ee6:	1b2d      	subs	r5, r5, r4
 8001ee8:	40ab      	lsls	r3, r5
 8001eea:	464c      	mov	r4, r9
 8001eec:	431c      	orrs	r4, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	4654      	mov	r4, sl
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	4334      	orrs	r4, r6
 8001ef8:	e77d      	b.n	8001df6 <__aeabi_dsub+0x4d2>
 8001efa:	074b      	lsls	r3, r1, #29
 8001efc:	08c2      	lsrs	r2, r0, #3
 8001efe:	431a      	orrs	r2, r3
 8001f00:	465d      	mov	r5, fp
 8001f02:	08cb      	lsrs	r3, r1, #3
 8001f04:	e6cc      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f06:	000a      	movs	r2, r1
 8001f08:	4302      	orrs	r2, r0
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x5ea>
 8001f0c:	e736      	b.n	8001d7c <__aeabi_dsub+0x458>
 8001f0e:	074b      	lsls	r3, r1, #29
 8001f10:	08c2      	lsrs	r2, r0, #3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	465d      	mov	r5, fp
 8001f16:	08cb      	lsrs	r3, r1, #3
 8001f18:	e681      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001f1a:	464a      	mov	r2, r9
 8001f1c:	1a84      	subs	r4, r0, r2
 8001f1e:	42a0      	cmp	r0, r4
 8001f20:	4192      	sbcs	r2, r2
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	4252      	negs	r2, r2
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	4698      	mov	r8, r3
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	2601      	movs	r6, #1
 8001f2e:	e54e      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001f30:	074b      	lsls	r3, r1, #29
 8001f32:	08c2      	lsrs	r2, r0, #3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	08cb      	lsrs	r3, r1, #3
 8001f38:	e6b2      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f3a:	464a      	mov	r2, r9
 8001f3c:	1a14      	subs	r4, r2, r0
 8001f3e:	45a1      	cmp	r9, r4
 8001f40:	4192      	sbcs	r2, r2
 8001f42:	1a5f      	subs	r7, r3, r1
 8001f44:	4252      	negs	r2, r2
 8001f46:	1aba      	subs	r2, r7, r2
 8001f48:	4690      	mov	r8, r2
 8001f4a:	0212      	lsls	r2, r2, #8
 8001f4c:	d56b      	bpl.n	8002026 <__aeabi_dsub+0x702>
 8001f4e:	464a      	mov	r2, r9
 8001f50:	1a84      	subs	r4, r0, r2
 8001f52:	42a0      	cmp	r0, r4
 8001f54:	4192      	sbcs	r2, r2
 8001f56:	1acb      	subs	r3, r1, r3
 8001f58:	4252      	negs	r2, r2
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	465d      	mov	r5, fp
 8001f60:	e564      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001f62:	074b      	lsls	r3, r1, #29
 8001f64:	08c2      	lsrs	r2, r0, #3
 8001f66:	431a      	orrs	r2, r3
 8001f68:	465d      	mov	r5, fp
 8001f6a:	08cb      	lsrs	r3, r1, #3
 8001f6c:	e698      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f6e:	074b      	lsls	r3, r1, #29
 8001f70:	08c2      	lsrs	r2, r0, #3
 8001f72:	431a      	orrs	r2, r3
 8001f74:	08cb      	lsrs	r3, r1, #3
 8001f76:	e64f      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001f78:	000a      	movs	r2, r1
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	d090      	beq.n	8001ea0 <__aeabi_dsub+0x57c>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	075c      	lsls	r4, r3, #29
 8001f82:	08d2      	lsrs	r2, r2, #3
 8001f84:	4314      	orrs	r4, r2
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	0312      	lsls	r2, r2, #12
 8001f8c:	4213      	tst	r3, r2
 8001f8e:	d008      	beq.n	8001fa2 <__aeabi_dsub+0x67e>
 8001f90:	08ce      	lsrs	r6, r1, #3
 8001f92:	4216      	tst	r6, r2
 8001f94:	d105      	bne.n	8001fa2 <__aeabi_dsub+0x67e>
 8001f96:	08c0      	lsrs	r0, r0, #3
 8001f98:	0749      	lsls	r1, r1, #29
 8001f9a:	4308      	orrs	r0, r1
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	465d      	mov	r5, fp
 8001fa0:	0033      	movs	r3, r6
 8001fa2:	0f61      	lsrs	r1, r4, #29
 8001fa4:	00e2      	lsls	r2, r4, #3
 8001fa6:	0749      	lsls	r1, r1, #29
 8001fa8:	08d2      	lsrs	r2, r2, #3
 8001faa:	430a      	orrs	r2, r1
 8001fac:	e678      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001fae:	074b      	lsls	r3, r1, #29
 8001fb0:	08c2      	lsrs	r2, r0, #3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	08cb      	lsrs	r3, r1, #3
 8001fb6:	e632      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001fb8:	4448      	add	r0, r9
 8001fba:	185b      	adds	r3, r3, r1
 8001fbc:	4548      	cmp	r0, r9
 8001fbe:	4192      	sbcs	r2, r2
 8001fc0:	4698      	mov	r8, r3
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	4490      	add	r8, r2
 8001fc6:	4643      	mov	r3, r8
 8001fc8:	0004      	movs	r4, r0
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	d400      	bmi.n	8001fd0 <__aeabi_dsub+0x6ac>
 8001fce:	e61a      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001fd0:	4642      	mov	r2, r8
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <__aeabi_dsub+0x6e8>)
 8001fd4:	2601      	movs	r6, #1
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4690      	mov	r8, r2
 8001fda:	e614      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001fdc:	4666      	mov	r6, ip
 8001fde:	001f      	movs	r7, r3
 8001fe0:	3e20      	subs	r6, #32
 8001fe2:	40f7      	lsrs	r7, r6
 8001fe4:	2c20      	cmp	r4, #32
 8001fe6:	d005      	beq.n	8001ff4 <__aeabi_dsub+0x6d0>
 8001fe8:	2640      	movs	r6, #64	; 0x40
 8001fea:	1b36      	subs	r6, r6, r4
 8001fec:	40b3      	lsls	r3, r6
 8001fee:	464c      	mov	r4, r9
 8001ff0:	431c      	orrs	r4, r3
 8001ff2:	46a2      	mov	sl, r4
 8001ff4:	4654      	mov	r4, sl
 8001ff6:	1e63      	subs	r3, r4, #1
 8001ff8:	419c      	sbcs	r4, r3
 8001ffa:	433c      	orrs	r4, r7
 8001ffc:	e5c8      	b.n	8001b90 <__aeabi_dsub+0x26c>
 8001ffe:	0011      	movs	r1, r2
 8002000:	2300      	movs	r3, #0
 8002002:	2200      	movs	r2, #0
 8002004:	e532      	b.n	8001a6c <__aeabi_dsub+0x148>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	ff7fffff 	.word	0xff7fffff
 8002010:	000007fe 	.word	0x000007fe
 8002014:	464a      	mov	r2, r9
 8002016:	1814      	adds	r4, r2, r0
 8002018:	4284      	cmp	r4, r0
 800201a:	4192      	sbcs	r2, r2
 800201c:	185b      	adds	r3, r3, r1
 800201e:	4698      	mov	r8, r3
 8002020:	4252      	negs	r2, r2
 8002022:	4490      	add	r8, r2
 8002024:	e5e9      	b.n	8001bfa <__aeabi_dsub+0x2d6>
 8002026:	4642      	mov	r2, r8
 8002028:	4322      	orrs	r2, r4
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x70a>
 800202c:	e6a6      	b.n	8001d7c <__aeabi_dsub+0x458>
 800202e:	e5ea      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8002030:	074b      	lsls	r3, r1, #29
 8002032:	08c2      	lsrs	r2, r0, #3
 8002034:	431a      	orrs	r2, r3
 8002036:	08cb      	lsrs	r3, r1, #3
 8002038:	e632      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 800203a:	2200      	movs	r2, #0
 800203c:	4901      	ldr	r1, [pc, #4]	; (8002044 <__aeabi_dsub+0x720>)
 800203e:	0013      	movs	r3, r2
 8002040:	e514      	b.n	8001a6c <__aeabi_dsub+0x148>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	000007ff 	.word	0x000007ff

08002048 <__aeabi_i2d>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	2800      	cmp	r0, #0
 800204c:	d016      	beq.n	800207c <__aeabi_i2d+0x34>
 800204e:	17c3      	asrs	r3, r0, #31
 8002050:	18c5      	adds	r5, r0, r3
 8002052:	405d      	eors	r5, r3
 8002054:	0fc4      	lsrs	r4, r0, #31
 8002056:	0028      	movs	r0, r5
 8002058:	f000 f956 	bl	8002308 <__clzsi2>
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <__aeabi_i2d+0x5c>)
 800205e:	1a12      	subs	r2, r2, r0
 8002060:	280a      	cmp	r0, #10
 8002062:	dc16      	bgt.n	8002092 <__aeabi_i2d+0x4a>
 8002064:	0003      	movs	r3, r0
 8002066:	002e      	movs	r6, r5
 8002068:	3315      	adds	r3, #21
 800206a:	409e      	lsls	r6, r3
 800206c:	230b      	movs	r3, #11
 800206e:	1a18      	subs	r0, r3, r0
 8002070:	40c5      	lsrs	r5, r0
 8002072:	0553      	lsls	r3, r2, #21
 8002074:	032d      	lsls	r5, r5, #12
 8002076:	0b2d      	lsrs	r5, r5, #12
 8002078:	0d5b      	lsrs	r3, r3, #21
 800207a:	e003      	b.n	8002084 <__aeabi_i2d+0x3c>
 800207c:	2400      	movs	r4, #0
 800207e:	2300      	movs	r3, #0
 8002080:	2500      	movs	r5, #0
 8002082:	2600      	movs	r6, #0
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	432b      	orrs	r3, r5
 8002088:	07e4      	lsls	r4, r4, #31
 800208a:	4323      	orrs	r3, r4
 800208c:	0030      	movs	r0, r6
 800208e:	0019      	movs	r1, r3
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	380b      	subs	r0, #11
 8002094:	4085      	lsls	r5, r0
 8002096:	0553      	lsls	r3, r2, #21
 8002098:	032d      	lsls	r5, r5, #12
 800209a:	2600      	movs	r6, #0
 800209c:	0b2d      	lsrs	r5, r5, #12
 800209e:	0d5b      	lsrs	r3, r3, #21
 80020a0:	e7f0      	b.n	8002084 <__aeabi_i2d+0x3c>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	0000041e 	.word	0x0000041e

080020a8 <__aeabi_ui2d>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	1e04      	subs	r4, r0, #0
 80020ac:	d010      	beq.n	80020d0 <__aeabi_ui2d+0x28>
 80020ae:	f000 f92b 	bl	8002308 <__clzsi2>
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <__aeabi_ui2d+0x48>)
 80020b4:	1a1b      	subs	r3, r3, r0
 80020b6:	280a      	cmp	r0, #10
 80020b8:	dc11      	bgt.n	80020de <__aeabi_ui2d+0x36>
 80020ba:	220b      	movs	r2, #11
 80020bc:	0021      	movs	r1, r4
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	40d1      	lsrs	r1, r2
 80020c2:	3015      	adds	r0, #21
 80020c4:	030a      	lsls	r2, r1, #12
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	4084      	lsls	r4, r0
 80020ca:	0b12      	lsrs	r2, r2, #12
 80020cc:	0d5b      	lsrs	r3, r3, #21
 80020ce:	e001      	b.n	80020d4 <__aeabi_ui2d+0x2c>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2200      	movs	r2, #0
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	4313      	orrs	r3, r2
 80020d8:	0020      	movs	r0, r4
 80020da:	0019      	movs	r1, r3
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	0022      	movs	r2, r4
 80020e0:	380b      	subs	r0, #11
 80020e2:	4082      	lsls	r2, r0
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	2400      	movs	r4, #0
 80020ea:	0b12      	lsrs	r2, r2, #12
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	e7f1      	b.n	80020d4 <__aeabi_ui2d+0x2c>
 80020f0:	0000041e 	.word	0x0000041e

080020f4 <__aeabi_f2d>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0043      	lsls	r3, r0, #1
 80020f8:	0246      	lsls	r6, r0, #9
 80020fa:	0fc4      	lsrs	r4, r0, #31
 80020fc:	20fe      	movs	r0, #254	; 0xfe
 80020fe:	0e1b      	lsrs	r3, r3, #24
 8002100:	1c59      	adds	r1, r3, #1
 8002102:	0a75      	lsrs	r5, r6, #9
 8002104:	4208      	tst	r0, r1
 8002106:	d00c      	beq.n	8002122 <__aeabi_f2d+0x2e>
 8002108:	22e0      	movs	r2, #224	; 0xe0
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4694      	mov	ip, r2
 800210e:	076d      	lsls	r5, r5, #29
 8002110:	0b36      	lsrs	r6, r6, #12
 8002112:	4463      	add	r3, ip
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	4333      	orrs	r3, r6
 8002118:	07e4      	lsls	r4, r4, #31
 800211a:	4323      	orrs	r3, r4
 800211c:	0028      	movs	r0, r5
 800211e:	0019      	movs	r1, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <__aeabi_f2d+0x5c>
 8002126:	2d00      	cmp	r5, #0
 8002128:	d01b      	beq.n	8002162 <__aeabi_f2d+0x6e>
 800212a:	0028      	movs	r0, r5
 800212c:	f000 f8ec 	bl	8002308 <__clzsi2>
 8002130:	280a      	cmp	r0, #10
 8002132:	dc1c      	bgt.n	800216e <__aeabi_f2d+0x7a>
 8002134:	230b      	movs	r3, #11
 8002136:	002a      	movs	r2, r5
 8002138:	1a1b      	subs	r3, r3, r0
 800213a:	40da      	lsrs	r2, r3
 800213c:	0003      	movs	r3, r0
 800213e:	3315      	adds	r3, #21
 8002140:	409d      	lsls	r5, r3
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <__aeabi_f2d+0x88>)
 8002144:	0312      	lsls	r2, r2, #12
 8002146:	1a1b      	subs	r3, r3, r0
 8002148:	055b      	lsls	r3, r3, #21
 800214a:	0b16      	lsrs	r6, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7e1      	b.n	8002114 <__aeabi_f2d+0x20>
 8002150:	2d00      	cmp	r5, #0
 8002152:	d009      	beq.n	8002168 <__aeabi_f2d+0x74>
 8002154:	0b32      	lsrs	r2, r6, #12
 8002156:	2680      	movs	r6, #128	; 0x80
 8002158:	0336      	lsls	r6, r6, #12
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <__aeabi_f2d+0x8c>)
 800215c:	076d      	lsls	r5, r5, #29
 800215e:	4316      	orrs	r6, r2
 8002160:	e7d8      	b.n	8002114 <__aeabi_f2d+0x20>
 8002162:	2300      	movs	r3, #0
 8002164:	2600      	movs	r6, #0
 8002166:	e7d5      	b.n	8002114 <__aeabi_f2d+0x20>
 8002168:	2600      	movs	r6, #0
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <__aeabi_f2d+0x8c>)
 800216c:	e7d2      	b.n	8002114 <__aeabi_f2d+0x20>
 800216e:	0003      	movs	r3, r0
 8002170:	002a      	movs	r2, r5
 8002172:	3b0b      	subs	r3, #11
 8002174:	409a      	lsls	r2, r3
 8002176:	2500      	movs	r5, #0
 8002178:	e7e3      	b.n	8002142 <__aeabi_f2d+0x4e>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	00000389 	.word	0x00000389
 8002180:	000007ff 	.word	0x000007ff

08002184 <__aeabi_d2f>:
 8002184:	0002      	movs	r2, r0
 8002186:	004b      	lsls	r3, r1, #1
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	0308      	lsls	r0, r1, #12
 800218c:	0d5b      	lsrs	r3, r3, #21
 800218e:	4e3d      	ldr	r6, [pc, #244]	; (8002284 <__aeabi_d2f+0x100>)
 8002190:	0fcc      	lsrs	r4, r1, #31
 8002192:	0a40      	lsrs	r0, r0, #9
 8002194:	0f51      	lsrs	r1, r2, #29
 8002196:	1c5f      	adds	r7, r3, #1
 8002198:	4308      	orrs	r0, r1
 800219a:	00d5      	lsls	r5, r2, #3
 800219c:	4237      	tst	r7, r6
 800219e:	d00a      	beq.n	80021b6 <__aeabi_d2f+0x32>
 80021a0:	4939      	ldr	r1, [pc, #228]	; (8002288 <__aeabi_d2f+0x104>)
 80021a2:	185e      	adds	r6, r3, r1
 80021a4:	2efe      	cmp	r6, #254	; 0xfe
 80021a6:	dd16      	ble.n	80021d6 <__aeabi_d2f+0x52>
 80021a8:	23ff      	movs	r3, #255	; 0xff
 80021aa:	2100      	movs	r1, #0
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	430b      	orrs	r3, r1
 80021b0:	07e0      	lsls	r0, r4, #31
 80021b2:	4318      	orrs	r0, r3
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <__aeabi_d2f+0x44>
 80021ba:	4328      	orrs	r0, r5
 80021bc:	d027      	beq.n	800220e <__aeabi_d2f+0x8a>
 80021be:	2105      	movs	r1, #5
 80021c0:	0189      	lsls	r1, r1, #6
 80021c2:	0a49      	lsrs	r1, r1, #9
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e7f1      	b.n	80021ac <__aeabi_d2f+0x28>
 80021c8:	4305      	orrs	r5, r0
 80021ca:	d0ed      	beq.n	80021a8 <__aeabi_d2f+0x24>
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	03c9      	lsls	r1, r1, #15
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	4301      	orrs	r1, r0
 80021d4:	e7ea      	b.n	80021ac <__aeabi_d2f+0x28>
 80021d6:	2e00      	cmp	r6, #0
 80021d8:	dd1c      	ble.n	8002214 <__aeabi_d2f+0x90>
 80021da:	0192      	lsls	r2, r2, #6
 80021dc:	0011      	movs	r1, r2
 80021de:	1e4a      	subs	r2, r1, #1
 80021e0:	4191      	sbcs	r1, r2
 80021e2:	00c0      	lsls	r0, r0, #3
 80021e4:	0f6d      	lsrs	r5, r5, #29
 80021e6:	4301      	orrs	r1, r0
 80021e8:	4329      	orrs	r1, r5
 80021ea:	074b      	lsls	r3, r1, #29
 80021ec:	d048      	beq.n	8002280 <__aeabi_d2f+0xfc>
 80021ee:	230f      	movs	r3, #15
 80021f0:	400b      	ands	r3, r1
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d000      	beq.n	80021f8 <__aeabi_d2f+0x74>
 80021f6:	3104      	adds	r1, #4
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	04db      	lsls	r3, r3, #19
 80021fc:	400b      	ands	r3, r1
 80021fe:	d03f      	beq.n	8002280 <__aeabi_d2f+0xfc>
 8002200:	1c72      	adds	r2, r6, #1
 8002202:	2efe      	cmp	r6, #254	; 0xfe
 8002204:	d0d0      	beq.n	80021a8 <__aeabi_d2f+0x24>
 8002206:	0189      	lsls	r1, r1, #6
 8002208:	0a49      	lsrs	r1, r1, #9
 800220a:	b2d3      	uxtb	r3, r2
 800220c:	e7ce      	b.n	80021ac <__aeabi_d2f+0x28>
 800220e:	2300      	movs	r3, #0
 8002210:	2100      	movs	r1, #0
 8002212:	e7cb      	b.n	80021ac <__aeabi_d2f+0x28>
 8002214:	0032      	movs	r2, r6
 8002216:	3217      	adds	r2, #23
 8002218:	db22      	blt.n	8002260 <__aeabi_d2f+0xdc>
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	221e      	movs	r2, #30
 800221e:	0409      	lsls	r1, r1, #16
 8002220:	4308      	orrs	r0, r1
 8002222:	1b92      	subs	r2, r2, r6
 8002224:	2a1f      	cmp	r2, #31
 8002226:	dd1d      	ble.n	8002264 <__aeabi_d2f+0xe0>
 8002228:	2102      	movs	r1, #2
 800222a:	4249      	negs	r1, r1
 800222c:	1b8e      	subs	r6, r1, r6
 800222e:	0001      	movs	r1, r0
 8002230:	40f1      	lsrs	r1, r6
 8002232:	000e      	movs	r6, r1
 8002234:	2a20      	cmp	r2, #32
 8002236:	d004      	beq.n	8002242 <__aeabi_d2f+0xbe>
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <__aeabi_d2f+0x108>)
 800223a:	4694      	mov	ip, r2
 800223c:	4463      	add	r3, ip
 800223e:	4098      	lsls	r0, r3
 8002240:	4305      	orrs	r5, r0
 8002242:	0029      	movs	r1, r5
 8002244:	1e4d      	subs	r5, r1, #1
 8002246:	41a9      	sbcs	r1, r5
 8002248:	4331      	orrs	r1, r6
 800224a:	2600      	movs	r6, #0
 800224c:	074b      	lsls	r3, r1, #29
 800224e:	d1ce      	bne.n	80021ee <__aeabi_d2f+0x6a>
 8002250:	2080      	movs	r0, #128	; 0x80
 8002252:	000b      	movs	r3, r1
 8002254:	04c0      	lsls	r0, r0, #19
 8002256:	2201      	movs	r2, #1
 8002258:	4003      	ands	r3, r0
 800225a:	4201      	tst	r1, r0
 800225c:	d1d3      	bne.n	8002206 <__aeabi_d2f+0x82>
 800225e:	e7af      	b.n	80021c0 <__aeabi_d2f+0x3c>
 8002260:	2300      	movs	r3, #0
 8002262:	e7ac      	b.n	80021be <__aeabi_d2f+0x3a>
 8002264:	490a      	ldr	r1, [pc, #40]	; (8002290 <__aeabi_d2f+0x10c>)
 8002266:	468c      	mov	ip, r1
 8002268:	0029      	movs	r1, r5
 800226a:	4463      	add	r3, ip
 800226c:	40d1      	lsrs	r1, r2
 800226e:	409d      	lsls	r5, r3
 8002270:	000a      	movs	r2, r1
 8002272:	0029      	movs	r1, r5
 8002274:	4098      	lsls	r0, r3
 8002276:	1e4d      	subs	r5, r1, #1
 8002278:	41a9      	sbcs	r1, r5
 800227a:	4301      	orrs	r1, r0
 800227c:	4311      	orrs	r1, r2
 800227e:	e7e4      	b.n	800224a <__aeabi_d2f+0xc6>
 8002280:	0033      	movs	r3, r6
 8002282:	e79d      	b.n	80021c0 <__aeabi_d2f+0x3c>
 8002284:	000007fe 	.word	0x000007fe
 8002288:	fffffc80 	.word	0xfffffc80
 800228c:	fffffca2 	.word	0xfffffca2
 8002290:	fffffc82 	.word	0xfffffc82

08002294 <__aeabi_cfrcmple>:
 8002294:	4684      	mov	ip, r0
 8002296:	1c08      	adds	r0, r1, #0
 8002298:	4661      	mov	r1, ip
 800229a:	e7ff      	b.n	800229c <__aeabi_cfcmpeq>

0800229c <__aeabi_cfcmpeq>:
 800229c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800229e:	f000 f8d1 	bl	8002444 <__lesf2>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d401      	bmi.n	80022aa <__aeabi_cfcmpeq+0xe>
 80022a6:	2100      	movs	r1, #0
 80022a8:	42c8      	cmn	r0, r1
 80022aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080022ac <__aeabi_fcmpeq>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	f000 f855 	bl	800235c <__eqsf2>
 80022b2:	4240      	negs	r0, r0
 80022b4:	3001      	adds	r0, #1
 80022b6:	bd10      	pop	{r4, pc}

080022b8 <__aeabi_fcmplt>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	f000 f8c3 	bl	8002444 <__lesf2>
 80022be:	2800      	cmp	r0, #0
 80022c0:	db01      	blt.n	80022c6 <__aeabi_fcmplt+0xe>
 80022c2:	2000      	movs	r0, #0
 80022c4:	bd10      	pop	{r4, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	bd10      	pop	{r4, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)

080022cc <__aeabi_fcmple>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	f000 f8b9 	bl	8002444 <__lesf2>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	dd01      	ble.n	80022da <__aeabi_fcmple+0xe>
 80022d6:	2000      	movs	r0, #0
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	2001      	movs	r0, #1
 80022dc:	bd10      	pop	{r4, pc}
 80022de:	46c0      	nop			; (mov r8, r8)

080022e0 <__aeabi_fcmpgt>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	f000 f863 	bl	80023ac <__gesf2>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	dc01      	bgt.n	80022ee <__aeabi_fcmpgt+0xe>
 80022ea:	2000      	movs	r0, #0
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	2001      	movs	r0, #1
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)

080022f4 <__aeabi_fcmpge>:
 80022f4:	b510      	push	{r4, lr}
 80022f6:	f000 f859 	bl	80023ac <__gesf2>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	da01      	bge.n	8002302 <__aeabi_fcmpge+0xe>
 80022fe:	2000      	movs	r0, #0
 8002300:	bd10      	pop	{r4, pc}
 8002302:	2001      	movs	r0, #1
 8002304:	bd10      	pop	{r4, pc}
 8002306:	46c0      	nop			; (mov r8, r8)

08002308 <__clzsi2>:
 8002308:	211c      	movs	r1, #28
 800230a:	2301      	movs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4298      	cmp	r0, r3
 8002310:	d301      	bcc.n	8002316 <__clzsi2+0xe>
 8002312:	0c00      	lsrs	r0, r0, #16
 8002314:	3910      	subs	r1, #16
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	4298      	cmp	r0, r3
 800231a:	d301      	bcc.n	8002320 <__clzsi2+0x18>
 800231c:	0a00      	lsrs	r0, r0, #8
 800231e:	3908      	subs	r1, #8
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	4298      	cmp	r0, r3
 8002324:	d301      	bcc.n	800232a <__clzsi2+0x22>
 8002326:	0900      	lsrs	r0, r0, #4
 8002328:	3904      	subs	r1, #4
 800232a:	a202      	add	r2, pc, #8	; (adr r2, 8002334 <__clzsi2+0x2c>)
 800232c:	5c10      	ldrb	r0, [r2, r0]
 800232e:	1840      	adds	r0, r0, r1
 8002330:	4770      	bx	lr
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	02020304 	.word	0x02020304
 8002338:	01010101 	.word	0x01010101
	...

08002344 <__clzdi2>:
 8002344:	b510      	push	{r4, lr}
 8002346:	2900      	cmp	r1, #0
 8002348:	d103      	bne.n	8002352 <__clzdi2+0xe>
 800234a:	f7ff ffdd 	bl	8002308 <__clzsi2>
 800234e:	3020      	adds	r0, #32
 8002350:	e002      	b.n	8002358 <__clzdi2+0x14>
 8002352:	1c08      	adds	r0, r1, #0
 8002354:	f7ff ffd8 	bl	8002308 <__clzsi2>
 8002358:	bd10      	pop	{r4, pc}
 800235a:	46c0      	nop			; (mov r8, r8)

0800235c <__eqsf2>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0042      	lsls	r2, r0, #1
 8002360:	024e      	lsls	r6, r1, #9
 8002362:	004c      	lsls	r4, r1, #1
 8002364:	0245      	lsls	r5, r0, #9
 8002366:	0a6d      	lsrs	r5, r5, #9
 8002368:	0e12      	lsrs	r2, r2, #24
 800236a:	0fc3      	lsrs	r3, r0, #31
 800236c:	0a76      	lsrs	r6, r6, #9
 800236e:	0e24      	lsrs	r4, r4, #24
 8002370:	0fc9      	lsrs	r1, r1, #31
 8002372:	2aff      	cmp	r2, #255	; 0xff
 8002374:	d00f      	beq.n	8002396 <__eqsf2+0x3a>
 8002376:	2cff      	cmp	r4, #255	; 0xff
 8002378:	d011      	beq.n	800239e <__eqsf2+0x42>
 800237a:	2001      	movs	r0, #1
 800237c:	42a2      	cmp	r2, r4
 800237e:	d000      	beq.n	8002382 <__eqsf2+0x26>
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	42b5      	cmp	r5, r6
 8002384:	d1fc      	bne.n	8002380 <__eqsf2+0x24>
 8002386:	428b      	cmp	r3, r1
 8002388:	d00d      	beq.n	80023a6 <__eqsf2+0x4a>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d1f8      	bne.n	8002380 <__eqsf2+0x24>
 800238e:	0028      	movs	r0, r5
 8002390:	1e45      	subs	r5, r0, #1
 8002392:	41a8      	sbcs	r0, r5
 8002394:	e7f4      	b.n	8002380 <__eqsf2+0x24>
 8002396:	2001      	movs	r0, #1
 8002398:	2d00      	cmp	r5, #0
 800239a:	d1f1      	bne.n	8002380 <__eqsf2+0x24>
 800239c:	e7eb      	b.n	8002376 <__eqsf2+0x1a>
 800239e:	2001      	movs	r0, #1
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	d1ed      	bne.n	8002380 <__eqsf2+0x24>
 80023a4:	e7e9      	b.n	800237a <__eqsf2+0x1e>
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7ea      	b.n	8002380 <__eqsf2+0x24>
 80023aa:	46c0      	nop			; (mov r8, r8)

080023ac <__gesf2>:
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	0042      	lsls	r2, r0, #1
 80023b0:	0246      	lsls	r6, r0, #9
 80023b2:	024d      	lsls	r5, r1, #9
 80023b4:	004c      	lsls	r4, r1, #1
 80023b6:	0fc3      	lsrs	r3, r0, #31
 80023b8:	0a76      	lsrs	r6, r6, #9
 80023ba:	0e12      	lsrs	r2, r2, #24
 80023bc:	0a6d      	lsrs	r5, r5, #9
 80023be:	0e24      	lsrs	r4, r4, #24
 80023c0:	0fc8      	lsrs	r0, r1, #31
 80023c2:	2aff      	cmp	r2, #255	; 0xff
 80023c4:	d01f      	beq.n	8002406 <__gesf2+0x5a>
 80023c6:	2cff      	cmp	r4, #255	; 0xff
 80023c8:	d010      	beq.n	80023ec <__gesf2+0x40>
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d11f      	bne.n	800240e <__gesf2+0x62>
 80023ce:	4271      	negs	r1, r6
 80023d0:	4171      	adcs	r1, r6
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	d101      	bne.n	80023da <__gesf2+0x2e>
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d01e      	beq.n	8002418 <__gesf2+0x6c>
 80023da:	2900      	cmp	r1, #0
 80023dc:	d10e      	bne.n	80023fc <__gesf2+0x50>
 80023de:	4283      	cmp	r3, r0
 80023e0:	d01e      	beq.n	8002420 <__gesf2+0x74>
 80023e2:	2102      	movs	r1, #2
 80023e4:	1e58      	subs	r0, r3, #1
 80023e6:	4008      	ands	r0, r1
 80023e8:	3801      	subs	r0, #1
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ec:	2d00      	cmp	r5, #0
 80023ee:	d126      	bne.n	800243e <__gesf2+0x92>
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	d1f4      	bne.n	80023de <__gesf2+0x32>
 80023f4:	4271      	negs	r1, r6
 80023f6:	4171      	adcs	r1, r6
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d0f0      	beq.n	80023de <__gesf2+0x32>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1f4      	bne.n	80023ea <__gesf2+0x3e>
 8002400:	2001      	movs	r0, #1
 8002402:	4240      	negs	r0, r0
 8002404:	e7f1      	b.n	80023ea <__gesf2+0x3e>
 8002406:	2e00      	cmp	r6, #0
 8002408:	d119      	bne.n	800243e <__gesf2+0x92>
 800240a:	2cff      	cmp	r4, #255	; 0xff
 800240c:	d0ee      	beq.n	80023ec <__gesf2+0x40>
 800240e:	2c00      	cmp	r4, #0
 8002410:	d1e5      	bne.n	80023de <__gesf2+0x32>
 8002412:	2d00      	cmp	r5, #0
 8002414:	d1e3      	bne.n	80023de <__gesf2+0x32>
 8002416:	e7e4      	b.n	80023e2 <__gesf2+0x36>
 8002418:	2000      	movs	r0, #0
 800241a:	2e00      	cmp	r6, #0
 800241c:	d0e5      	beq.n	80023ea <__gesf2+0x3e>
 800241e:	e7e0      	b.n	80023e2 <__gesf2+0x36>
 8002420:	42a2      	cmp	r2, r4
 8002422:	dc05      	bgt.n	8002430 <__gesf2+0x84>
 8002424:	dbea      	blt.n	80023fc <__gesf2+0x50>
 8002426:	42ae      	cmp	r6, r5
 8002428:	d802      	bhi.n	8002430 <__gesf2+0x84>
 800242a:	d3e7      	bcc.n	80023fc <__gesf2+0x50>
 800242c:	2000      	movs	r0, #0
 800242e:	e7dc      	b.n	80023ea <__gesf2+0x3e>
 8002430:	4241      	negs	r1, r0
 8002432:	4141      	adcs	r1, r0
 8002434:	4248      	negs	r0, r1
 8002436:	2102      	movs	r1, #2
 8002438:	4008      	ands	r0, r1
 800243a:	3801      	subs	r0, #1
 800243c:	e7d5      	b.n	80023ea <__gesf2+0x3e>
 800243e:	2002      	movs	r0, #2
 8002440:	4240      	negs	r0, r0
 8002442:	e7d2      	b.n	80023ea <__gesf2+0x3e>

08002444 <__lesf2>:
 8002444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002446:	0042      	lsls	r2, r0, #1
 8002448:	0246      	lsls	r6, r0, #9
 800244a:	024d      	lsls	r5, r1, #9
 800244c:	004c      	lsls	r4, r1, #1
 800244e:	0fc3      	lsrs	r3, r0, #31
 8002450:	0a76      	lsrs	r6, r6, #9
 8002452:	0e12      	lsrs	r2, r2, #24
 8002454:	0a6d      	lsrs	r5, r5, #9
 8002456:	0e24      	lsrs	r4, r4, #24
 8002458:	0fc8      	lsrs	r0, r1, #31
 800245a:	2aff      	cmp	r2, #255	; 0xff
 800245c:	d00d      	beq.n	800247a <__lesf2+0x36>
 800245e:	2cff      	cmp	r4, #255	; 0xff
 8002460:	d00f      	beq.n	8002482 <__lesf2+0x3e>
 8002462:	2a00      	cmp	r2, #0
 8002464:	d123      	bne.n	80024ae <__lesf2+0x6a>
 8002466:	4271      	negs	r1, r6
 8002468:	4171      	adcs	r1, r6
 800246a:	2c00      	cmp	r4, #0
 800246c:	d10f      	bne.n	800248e <__lesf2+0x4a>
 800246e:	2d00      	cmp	r5, #0
 8002470:	d10d      	bne.n	800248e <__lesf2+0x4a>
 8002472:	2000      	movs	r0, #0
 8002474:	2e00      	cmp	r6, #0
 8002476:	d014      	beq.n	80024a2 <__lesf2+0x5e>
 8002478:	e00d      	b.n	8002496 <__lesf2+0x52>
 800247a:	2e00      	cmp	r6, #0
 800247c:	d110      	bne.n	80024a0 <__lesf2+0x5c>
 800247e:	2cff      	cmp	r4, #255	; 0xff
 8002480:	d115      	bne.n	80024ae <__lesf2+0x6a>
 8002482:	2d00      	cmp	r5, #0
 8002484:	d10c      	bne.n	80024a0 <__lesf2+0x5c>
 8002486:	2a00      	cmp	r2, #0
 8002488:	d103      	bne.n	8002492 <__lesf2+0x4e>
 800248a:	4271      	negs	r1, r6
 800248c:	4171      	adcs	r1, r6
 800248e:	2900      	cmp	r1, #0
 8002490:	d108      	bne.n	80024a4 <__lesf2+0x60>
 8002492:	4283      	cmp	r3, r0
 8002494:	d010      	beq.n	80024b8 <__lesf2+0x74>
 8002496:	2102      	movs	r1, #2
 8002498:	1e58      	subs	r0, r3, #1
 800249a:	4008      	ands	r0, r1
 800249c:	3801      	subs	r0, #1
 800249e:	e000      	b.n	80024a2 <__lesf2+0x5e>
 80024a0:	2002      	movs	r0, #2
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d1fc      	bne.n	80024a2 <__lesf2+0x5e>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e7f9      	b.n	80024a2 <__lesf2+0x5e>
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	d1ef      	bne.n	8002492 <__lesf2+0x4e>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d1ed      	bne.n	8002492 <__lesf2+0x4e>
 80024b6:	e7ee      	b.n	8002496 <__lesf2+0x52>
 80024b8:	42a2      	cmp	r2, r4
 80024ba:	dc05      	bgt.n	80024c8 <__lesf2+0x84>
 80024bc:	dbf2      	blt.n	80024a4 <__lesf2+0x60>
 80024be:	42ae      	cmp	r6, r5
 80024c0:	d802      	bhi.n	80024c8 <__lesf2+0x84>
 80024c2:	d3ef      	bcc.n	80024a4 <__lesf2+0x60>
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7ec      	b.n	80024a2 <__lesf2+0x5e>
 80024c8:	4241      	negs	r1, r0
 80024ca:	4141      	adcs	r1, r0
 80024cc:	4248      	negs	r0, r1
 80024ce:	2102      	movs	r1, #2
 80024d0:	4008      	ands	r0, r1
 80024d2:	3801      	subs	r0, #1
 80024d4:	e7e5      	b.n	80024a2 <__lesf2+0x5e>
 80024d6:	46c0      	nop			; (mov r8, r8)

080024d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_Init+0x3c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Init+0x3c>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	0049      	lsls	r1, r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f2:	2003      	movs	r0, #3
 80024f4:	f000 f810 	bl	8002518 <HAL_InitTick>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d003      	beq.n	8002504 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e001      	b.n	8002508 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f007 fab8 	bl	8009a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	781b      	ldrb	r3, [r3, #0]
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_InitTick+0x88>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02b      	beq.n	8002588 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_InitTick+0x8c>)
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_InitTick+0x88>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	0019      	movs	r1, r3
 800253a:	23fa      	movs	r3, #250	; 0xfa
 800253c:	0098      	lsls	r0, r3, #2
 800253e:	f7fd fde1 	bl	8000104 <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	0019      	movs	r1, r3
 8002546:	0020      	movs	r0, r4
 8002548:	f7fd fddc 	bl	8000104 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	0018      	movs	r0, r3
 8002550:	f001 f8c1 	bl	80036d6 <HAL_SYSTICK_Config>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d112      	bne.n	800257e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d80a      	bhi.n	8002574 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	2200      	movs	r2, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f001 f890 	bl	800368c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_InitTick+0x90>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00d      	b.n	8002590 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002574:	230f      	movs	r3, #15
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e008      	b.n	8002590 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e003      	b.n	8002590 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002590:	230f      	movs	r3, #15
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b005      	add	sp, #20
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	001a      	movs	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	18d2      	adds	r2, r2, r3
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_IncTick+0x20>)
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	20000004 	.word	0x20000004
 80025cc:	20000028 	.word	0x20000028

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	20000028 	.word	0x20000028

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	189b      	adds	r3, r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	f7ff ffe0 	bl	80025d0 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	40010000 	.word	0x40010000
 8002654:	fffff9ff 	.word	0xfffff9ff

08002658 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002668:	401a      	ands	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b002      	add	sp, #8
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	fe3fffff 	.word	0xfe3fffff

08002680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	23e0      	movs	r3, #224	; 0xe0
 800268e:	045b      	lsls	r3, r3, #17
 8002690:	4013      	ands	r3, r2
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b002      	add	sp, #8
 8002698:	bd80      	pop	{r7, pc}

0800269a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	2104      	movs	r1, #4
 80026ae:	400a      	ands	r2, r1
 80026b0:	2107      	movs	r1, #7
 80026b2:	4091      	lsls	r1, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	43d2      	mvns	r2, r2
 80026b8:	401a      	ands	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2104      	movs	r1, #4
 80026be:	400b      	ands	r3, r1
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4099      	lsls	r1, r3
 80026c4:	000b      	movs	r3, r1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d101      	bne.n	80026ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b002      	add	sp, #8
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	211f      	movs	r1, #31
 800270a:	400a      	ands	r2, r1
 800270c:	210f      	movs	r1, #15
 800270e:	4091      	lsls	r1, r2
 8002710:	000a      	movs	r2, r1
 8002712:	43d2      	mvns	r2, r2
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	210f      	movs	r1, #15
 800271c:	4019      	ands	r1, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	201f      	movs	r0, #31
 8002722:	4003      	ands	r3, r0
 8002724:	4099      	lsls	r1, r3
 8002726:	000b      	movs	r3, r1
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bd80      	pop	{r7, pc}

08002736 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	035b      	lsls	r3, r3, #13
 8002748:	0b5b      	lsrs	r3, r3, #13
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	0352      	lsls	r2, r2, #13
 800276a:	0b52      	lsrs	r2, r2, #13
 800276c:	43d2      	mvns	r2, r2
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}

0800277c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	0212      	lsls	r2, r2, #8
 8002790:	43d2      	mvns	r2, r2
 8002792:	401a      	ands	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	400b      	ands	r3, r1
 800279c:	4904      	ldr	r1, [pc, #16]	; (80027b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800279e:	400b      	ands	r3, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	07ffff00 	.word	0x07ffff00

080027b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0552      	lsls	r2, r2, #21
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	6fffffe8 	.word	0x6fffffe8

080027dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	055b      	lsls	r3, r3, #21
 80027ec:	401a      	ands	r2, r3
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	055b      	lsls	r3, r3, #21
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d101      	bne.n	80027fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <LL_ADC_Enable+0x20>)
 8002812:	4013      	ands	r3, r2
 8002814:	2201      	movs	r2, #1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}
 8002824:	7fffffe8 	.word	0x7fffffe8

08002828 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <LL_ADC_Disable+0x20>)
 8002836:	4013      	ands	r3, r2
 8002838:	2202      	movs	r2, #2
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	7fffffe8 	.word	0x7fffffe8

0800284c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <LL_ADC_IsEnabled+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_ADC_IsEnabled+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}

0800286e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d101      	bne.n	8002886 <LL_ADC_IsDisableOngoing+0x18>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_ADC_IsDisableOngoing+0x1a>
 8002886:	2300      	movs	r3, #0
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <LL_ADC_REG_StartConversion+0x20>)
 800289e:	4013      	ands	r3, r2
 80028a0:	2204      	movs	r2, #4
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	7fffffe8 	.word	0x7fffffe8

080028b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2204      	movs	r2, #4
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d101      	bne.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b002      	add	sp, #8
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e1b1      	b.n	8002c62 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0018      	movs	r0, r3
 800290a:	f007 f8dd 	bl	8009ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2254      	movs	r2, #84	; 0x54
 8002918:	2100      	movs	r1, #0
 800291a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff ff5b 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d115      	bne.n	8002956 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0018      	movs	r0, r3
 8002930:	f7ff ff40 	bl	80027b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002934:	4bcd      	ldr	r3, [pc, #820]	; (8002c6c <HAL_ADC_Init+0x394>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	49cd      	ldr	r1, [pc, #820]	; (8002c70 <HAL_ADC_Init+0x398>)
 800293a:	0018      	movs	r0, r3
 800293c:	f7fd fbe2 	bl	8000104 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002948:	e002      	b.n	8002950 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3b01      	subs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff3e 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d10f      	bne.n	8002984 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	2210      	movs	r2, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	2201      	movs	r2, #1
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800297c:	231f      	movs	r3, #31
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff ff93 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 800298e:	0003      	movs	r3, r0
 8002990:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	2210      	movs	r2, #16
 8002998:	4013      	ands	r3, r2
 800299a:	d000      	beq.n	800299e <HAL_ADC_Init+0xc6>
 800299c:	e154      	b.n	8002c48 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d000      	beq.n	80029a6 <HAL_ADC_Init+0xce>
 80029a4:	e150      	b.n	8002c48 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4ab2      	ldr	r2, [pc, #712]	; (8002c74 <HAL_ADC_Init+0x39c>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	2202      	movs	r2, #2
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7ff ff46 	bl	800284c <LL_ADC_IsEnabled>
 80029c0:	1e03      	subs	r3, r0, #0
 80029c2:	d156      	bne.n	8002a72 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2218      	movs	r2, #24
 80029cc:	4393      	bics	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0f9b      	lsrs	r3, r3, #30
 80029e2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	223c      	movs	r2, #60	; 0x3c
 80029f4:	5c9b      	ldrb	r3, [r3, r2]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d111      	bne.n	8002a1e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0f9b      	lsrs	r3, r3, #30
 8002a00:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a06:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002a0c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002a12:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	4a94      	ldr	r2, [pc, #592]	; (8002c78 <HAL_ADC_Init+0x3a0>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	23c0      	movs	r3, #192	; 0xc0
 8002a3a:	061b      	lsls	r3, r3, #24
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d018      	beq.n	8002a72 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d012      	beq.n	8002a72 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d00c      	beq.n	8002a72 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002a58:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_ADC_Init+0x3a4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a88      	ldr	r2, [pc, #544]	; (8002c80 <HAL_ADC_Init+0x3a8>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	23f0      	movs	r3, #240	; 0xf0
 8002a68:	039b      	lsls	r3, r3, #14
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <HAL_ADC_Init+0x3a4>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7e1b      	ldrb	r3, [r3, #24]
 8002a76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e5b      	ldrb	r3, [r3, #25]
 8002a7c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7e9b      	ldrb	r3, [r3, #26]
 8002a84:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a86:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_ADC_Init+0x1be>
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	015b      	lsls	r3, r3, #5
 8002a94:	e000      	b.n	8002a98 <HAL_ADC_Init+0x1c0>
 8002a96:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a98:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a9e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da04      	bge.n	8002ab2 <HAL_ADC_Init+0x1da>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	e001      	b.n	8002ab6 <HAL_ADC_Init+0x1de>
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002ab6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	5c5b      	ldrb	r3, [r3, r1]
 8002abe:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ac0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d115      	bne.n	8002afe <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7e9b      	ldrb	r3, [r3, #26]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	0252      	lsls	r2, r2, #9
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e00b      	b.n	8002afe <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	2220      	movs	r2, #32
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2201      	movs	r2, #1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0a:	23e0      	movs	r3, #224	; 0xe0
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b14:	4313      	orrs	r3, r2
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_ADC_Init+0x3ac>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4a53      	ldr	r2, [pc, #332]	; (8002c88 <HAL_ADC_Init+0x3b0>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	001a      	movs	r2, r3
 8002b52:	2100      	movs	r1, #0
 8002b54:	f7ff fda1 	bl	800269a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	494a      	ldr	r1, [pc, #296]	; (8002c8c <HAL_ADC_Init+0x3b4>)
 8002b62:	001a      	movs	r2, r3
 8002b64:	f7ff fd99 	bl	800269a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	4249      	negs	r1, r1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
 8002b82:	e03a      	b.n	8002bfa <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	039b      	lsls	r3, r3, #14
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d134      	bne.n	8002bfa <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e00c      	b.n	8002bb0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	d006      	beq.n	8002bb8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	3301      	adds	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b07      	cmp	r3, #7
 8002bb4:	d9ef      	bls.n	8002b96 <HAL_ADC_Init+0x2be>
 8002bb6:	e000      	b.n	8002bba <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002bb8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2110      	movs	r1, #16
 8002bcc:	4249      	negs	r1, r1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd2:	e012      	b.n	8002bfa <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	221c      	movs	r2, #28
 8002be4:	4013      	ands	r3, r2
 8002be6:	2210      	movs	r2, #16
 8002be8:	4252      	negs	r2, r2
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0011      	movs	r1, r2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_ADC_Init+0x3b8>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10b      	bne.n	8002c22 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	2203      	movs	r2, #3
 8002c16:	4393      	bics	r3, r2
 8002c18:	2201      	movs	r2, #1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002c20:	e01c      	b.n	8002c5c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	2212      	movs	r2, #18
 8002c28:	4393      	bics	r3, r2
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2201      	movs	r2, #1
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002c46:	e009      	b.n	8002c5c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c54:	231f      	movs	r3, #31
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002c5c:	231f      	movs	r3, #31
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b008      	add	sp, #32
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	20000008 	.word	0x20000008
 8002c70:	00030d40 	.word	0x00030d40
 8002c74:	fffffefd 	.word	0xfffffefd
 8002c78:	1ffffc02 	.word	0x1ffffc02
 8002c7c:	40012708 	.word	0x40012708
 8002c80:	ffc3ffff 	.word	0xffc3ffff
 8002c84:	fffe0219 	.word	0xfffe0219
 8002c88:	dffffc02 	.word	0xdffffc02
 8002c8c:	07ffff04 	.word	0x07ffff04
 8002c90:	833fffe7 	.word	0x833fffe7

08002c94 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff fe07 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d135      	bne.n	8002d16 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2254      	movs	r2, #84	; 0x54
 8002cae:	5c9b      	ldrb	r3, [r3, r2]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_Start+0x24>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e035      	b.n	8002d24 <HAL_ADC_Start+0x90>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2254      	movs	r2, #84	; 0x54
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cc0:	250f      	movs	r5, #15
 8002cc2:	197c      	adds	r4, r7, r5
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 faaa 	bl	8003220 <ADC_Enable>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cd0:	197b      	adds	r3, r7, r5
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d119      	bne.n	8002d0c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <HAL_ADC_Start+0x98>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	221c      	movs	r2, #28
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2254      	movs	r2, #84	; 0x54
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff fdc3 	bl	8002890 <LL_ADC_REG_StartConversion>
 8002d0a:	e008      	b.n	8002d1e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2254      	movs	r2, #84	; 0x54
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002d1e:	230f      	movs	r3, #15
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	781b      	ldrb	r3, [r3, #0]
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	fffff0fe 	.word	0xfffff0fe

08002d30 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d102      	bne.n	8002d48 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002d42:	2308      	movs	r3, #8
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e00f      	b.n	8002d68 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d007      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	2220      	movs	r2, #32
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e072      	b.n	8002e4a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002d64:	2304      	movs	r3, #4
 8002d66:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d68:	f7ff fc32 	bl	80025d0 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d70:	e01f      	b.n	8002db2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	d01c      	beq.n	8002db2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d78:	f7ff fc2a 	bl	80025d0 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <HAL_ADC_PollForConversion+0x5e>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d111      	bne.n	8002db2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	d10b      	bne.n	8002db2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	2204      	movs	r2, #4
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2254      	movs	r2, #84	; 0x54
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04b      	b.n	8002e4a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d0d9      	beq.n	8002d72 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff fc7f 	bl	80026d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d02e      	beq.n	8002e38 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7e9b      	ldrb	r3, [r3, #26]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d12a      	bne.n	8002e38 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d123      	bne.n	8002e38 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff fd5d 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002dfa:	1e03      	subs	r3, r0, #0
 8002dfc:	d110      	bne.n	8002e20 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	210c      	movs	r1, #12
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a10      	ldr	r2, [pc, #64]	; (8002e54 <HAL_ADC_PollForConversion+0x124>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	2201      	movs	r2, #1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1e:	e00b      	b.n	8002e38 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	2220      	movs	r2, #32
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	2201      	movs	r2, #1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e1b      	ldrb	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	220c      	movs	r2, #12
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b004      	add	sp, #16
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	fffffefe 	.word	0xfffffefe

08002e58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	2317      	movs	r3, #23
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2254      	movs	r2, #84	; 0x54
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x24>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e1c0      	b.n	8003216 <HAL_ADC_ConfigChannel+0x3a6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2254      	movs	r2, #84	; 0x54
 8002e98:	2101      	movs	r1, #1
 8002e9a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff fd07 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d000      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x3c>
 8002eaa:	e1a3      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d100      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x46>
 8002eb4:	e143      	b.n	800313e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ec6:	4ac1      	ldr	r2, [pc, #772]	; (80031cc <HAL_ADC_ConfigChannel+0x35c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	f7ff fc2d 	bl	8002736 <LL_ADC_REG_SetSequencerChAdd>
 8002edc:	e0c9      	b.n	8003072 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	211f      	movs	r1, #31
 8002ee8:	400b      	ands	r3, r1
 8002eea:	210f      	movs	r1, #15
 8002eec:	4099      	lsls	r1, r3
 8002eee:	000b      	movs	r3, r1
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	035b      	lsls	r3, r3, #13
 8002efc:	0b5b      	lsrs	r3, r3, #13
 8002efe:	d105      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x9c>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0e9b      	lsrs	r3, r3, #26
 8002f06:	221f      	movs	r2, #31
 8002f08:	4013      	ands	r3, r2
 8002f0a:	e098      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	d000      	beq.n	8002f18 <HAL_ADC_ConfigChannel+0xa8>
 8002f16:	e091      	b.n	800303c <HAL_ADC_ConfigChannel+0x1cc>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d000      	beq.n	8002f24 <HAL_ADC_ConfigChannel+0xb4>
 8002f22:	e089      	b.n	8003038 <HAL_ADC_ConfigChannel+0x1c8>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d000      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0xc0>
 8002f2e:	e081      	b.n	8003034 <HAL_ADC_ConfigChannel+0x1c4>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2208      	movs	r2, #8
 8002f36:	4013      	ands	r3, r2
 8002f38:	d000      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0xcc>
 8002f3a:	e079      	b.n	8003030 <HAL_ADC_ConfigChannel+0x1c0>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	4013      	ands	r3, r2
 8002f44:	d000      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0xd8>
 8002f46:	e071      	b.n	800302c <HAL_ADC_ConfigChannel+0x1bc>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d000      	beq.n	8002f54 <HAL_ADC_ConfigChannel+0xe4>
 8002f52:	e069      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1b8>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d000      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0xf0>
 8002f5e:	e061      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1b4>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	4013      	ands	r3, r2
 8002f68:	d000      	beq.n	8002f6c <HAL_ADC_ConfigChannel+0xfc>
 8002f6a:	e059      	b.n	8003020 <HAL_ADC_ConfigChannel+0x1b0>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	d151      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1ac>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d149      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x1a8>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d141      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1a4>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d139      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1a0>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d131      	bne.n	800300c <HAL_ADC_ConfigChannel+0x19c>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	019b      	lsls	r3, r3, #6
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d129      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x198>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	01db      	lsls	r3, r3, #7
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d121      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x194>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d119      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x190>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	025b      	lsls	r3, r3, #9
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x18c>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x188>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	02db      	lsls	r3, r3, #11
 8002fec:	4013      	ands	r3, r2
 8002fee:	d001      	beq.n	8002ff4 <HAL_ADC_ConfigChannel+0x184>
 8002ff0:	2312      	movs	r3, #18
 8002ff2:	e024      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e022      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8002ff8:	2311      	movs	r3, #17
 8002ffa:	e020      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	e01e      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003000:	230f      	movs	r3, #15
 8003002:	e01c      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003004:	230e      	movs	r3, #14
 8003006:	e01a      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003008:	230d      	movs	r3, #13
 800300a:	e018      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 800300c:	230c      	movs	r3, #12
 800300e:	e016      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003010:	230b      	movs	r3, #11
 8003012:	e014      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003014:	230a      	movs	r3, #10
 8003016:	e012      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003018:	2309      	movs	r3, #9
 800301a:	e010      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 800301c:	2308      	movs	r3, #8
 800301e:	e00e      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003020:	2307      	movs	r3, #7
 8003022:	e00c      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003024:	2306      	movs	r3, #6
 8003026:	e00a      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003028:	2305      	movs	r3, #5
 800302a:	e008      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 800302c:	2304      	movs	r3, #4
 800302e:	e006      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003030:	2303      	movs	r3, #3
 8003032:	e004      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_ADC_ConfigChannel+0x1ce>
 800303c:	2300      	movs	r3, #0
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	6852      	ldr	r2, [r2, #4]
 8003042:	201f      	movs	r0, #31
 8003044:	4002      	ands	r2, r0
 8003046:	4093      	lsls	r3, r2
 8003048:	000a      	movs	r2, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	429a      	cmp	r2, r3
 800305e:	d808      	bhi.n	8003072 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	001a      	movs	r2, r3
 800306e:	f7ff fb42 	bl	80026f6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	001a      	movs	r2, r3
 8003080:	f7ff fb7c 	bl	800277c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db00      	blt.n	800308e <HAL_ADC_ConfigChannel+0x21e>
 800308c:	e0bc      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800308e:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff faf5 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8003096:	0003      	movs	r3, r0
 8003098:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_ADC_ConfigChannel+0x364>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d122      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030ac:	d11d      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	0412      	lsls	r2, r2, #16
 80030b4:	4313      	orrs	r3, r2
 80030b6:	4a46      	ldr	r2, [pc, #280]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 80030b8:	0019      	movs	r1, r3
 80030ba:	0010      	movs	r0, r2
 80030bc:	f7ff facc 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_ADC_ConfigChannel+0x368>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4945      	ldr	r1, [pc, #276]	; (80031dc <HAL_ADC_ConfigChannel+0x36c>)
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7fd f81c 	bl	8000104 <__udivsi3>
 80030cc:	0003      	movs	r3, r0
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	0013      	movs	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030da:	e002      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e8:	e08e      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <HAL_ADC_ConfigChannel+0x370>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10e      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x2a2>
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	045b      	lsls	r3, r3, #17
 80030fa:	4013      	ands	r3, r2
 80030fc:	d109      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	0452      	lsls	r2, r2, #17
 8003104:	4313      	orrs	r3, r2
 8003106:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 8003108:	0019      	movs	r1, r3
 800310a:	0010      	movs	r0, r2
 800310c:	f7ff faa4 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8003110:	e07a      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a33      	ldr	r2, [pc, #204]	; (80031e4 <HAL_ADC_ConfigChannel+0x374>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d000      	beq.n	800311e <HAL_ADC_ConfigChannel+0x2ae>
 800311c:	e074      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	03db      	lsls	r3, r3, #15
 8003124:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003126:	d000      	beq.n	800312a <HAL_ADC_ConfigChannel+0x2ba>
 8003128:	e06e      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	03d2      	lsls	r2, r2, #15
 8003130:	4313      	orrs	r3, r2
 8003132:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 8003134:	0019      	movs	r1, r3
 8003136:	0010      	movs	r0, r2
 8003138:	f7ff fa8e 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 800313c:	e064      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	429a      	cmp	r2, r3
 8003148:	d004      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_ADC_ConfigChannel+0x35c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d107      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0019      	movs	r1, r3
 800315e:	0010      	movs	r0, r2
 8003160:	f7ff fafa 	bl	8002758 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da4d      	bge.n	8003208 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff fa86 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8003174:	0003      	movs	r3, r0
 8003176:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_ADC_ConfigChannel+0x364>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <HAL_ADC_ConfigChannel+0x378>)
 8003186:	4013      	ands	r3, r2
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 800318a:	0019      	movs	r1, r3
 800318c:	0010      	movs	r0, r2
 800318e:	f7ff fa63 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8003192:	e039      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_ADC_ConfigChannel+0x370>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d108      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <HAL_ADC_ConfigChannel+0x37c>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 80031a6:	0019      	movs	r1, r3
 80031a8:	0010      	movs	r0, r2
 80031aa:	f7ff fa55 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 80031ae:	e02b      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <HAL_ADC_ConfigChannel+0x374>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d126      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_ADC_ConfigChannel+0x380>)
 80031be:	4013      	ands	r3, r2
 80031c0:	4a03      	ldr	r2, [pc, #12]	; (80031d0 <HAL_ADC_ConfigChannel+0x360>)
 80031c2:	0019      	movs	r1, r3
 80031c4:	0010      	movs	r0, r2
 80031c6:	f7ff fa47 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 80031ca:	e01d      	b.n	8003208 <HAL_ADC_ConfigChannel+0x398>
 80031cc:	80000004 	.word	0x80000004
 80031d0:	40012708 	.word	0x40012708
 80031d4:	b0001000 	.word	0xb0001000
 80031d8:	20000008 	.word	0x20000008
 80031dc:	00030d40 	.word	0x00030d40
 80031e0:	b8004000 	.word	0xb8004000
 80031e4:	b4002000 	.word	0xb4002000
 80031e8:	ff7fffff 	.word	0xff7fffff
 80031ec:	feffffff 	.word	0xfeffffff
 80031f0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	2220      	movs	r2, #32
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003200:	2317      	movs	r3, #23
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2254      	movs	r2, #84	; 0x54
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003210:	2317      	movs	r3, #23
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b006      	add	sp, #24
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)

08003220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fb0b 	bl	800284c <LL_ADC_IsEnabled>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d000      	beq.n	800323c <ADC_Enable+0x1c>
 800323a:	e069      	b.n	8003310 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4a36      	ldr	r2, [pc, #216]	; (800331c <ADC_Enable+0xfc>)
 8003244:	4013      	ands	r3, r2
 8003246:	d00d      	beq.n	8003264 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	2210      	movs	r2, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	2201      	movs	r2, #1
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e056      	b.n	8003312 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff facb 	bl	8002804 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <ADC_Enable+0x100>)
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff fa05 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8003276:	0002      	movs	r2, r0
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	4013      	ands	r3, r2
 800327e:	d00f      	beq.n	80032a0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <ADC_Enable+0x104>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4928      	ldr	r1, [pc, #160]	; (8003328 <ADC_Enable+0x108>)
 8003286:	0018      	movs	r0, r3
 8003288:	f7fc ff3c 	bl	8000104 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	3301      	adds	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003292:	e002      	b.n	800329a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3b01      	subs	r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f9      	bne.n	8003294 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e5b      	ldrb	r3, [r3, #25]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d033      	beq.n	8003310 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80032a8:	f7ff f992 	bl	80025d0 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b0:	e027      	b.n	8003302 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff fac8 	bl	800284c <LL_ADC_IsEnabled>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d104      	bne.n	80032ca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fa9d 	bl	8002804 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ca:	f7ff f981 	bl	80025d0 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d914      	bls.n	8003302 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00d      	beq.n	8003302 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	2210      	movs	r2, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2201      	movs	r2, #1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e007      	b.n	8003312 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	2b01      	cmp	r3, #1
 800330e:	d1d0      	bne.n	80032b2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	80000017 	.word	0x80000017
 8003320:	40012708 	.word	0x40012708
 8003324:	20000008 	.word	0x20000008
 8003328:	00030d40 	.word	0x00030d40

0800332c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff fa98 	bl	800286e <LL_ADC_IsDisableOngoing>
 800333e:	0003      	movs	r3, r0
 8003340:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff fa80 	bl	800284c <LL_ADC_IsEnabled>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d046      	beq.n	80033de <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d143      	bne.n	80033de <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2205      	movs	r2, #5
 800335e:	4013      	ands	r3, r2
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10d      	bne.n	8003380 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0018      	movs	r0, r3
 800336a:	f7ff fa5d 	bl	8002828 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2203      	movs	r2, #3
 8003374:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003376:	f7ff f92b 	bl	80025d0 <HAL_GetTick>
 800337a:	0003      	movs	r3, r0
 800337c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800337e:	e028      	b.n	80033d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	2210      	movs	r2, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2201      	movs	r2, #1
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e021      	b.n	80033e0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800339c:	f7ff f918 	bl	80025d0 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d913      	bls.n	80033d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2201      	movs	r2, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	2210      	movs	r2, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2201      	movs	r2, #1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e006      	b.n	80033e0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	d1de      	bne.n	800339c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <LL_ADC_IsEnabled>:
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2201      	movs	r2, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <LL_ADC_IsEnabled+0x18>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <LL_ADC_IsEnabled+0x1a>
 8003400:	2300      	movs	r3, #0
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b002      	add	sp, #8
 8003408:	bd80      	pop	{r7, pc}

0800340a <LL_ADC_IsCalibrationOnGoing>:
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0fdb      	lsrs	r3, r3, #31
 8003418:	07da      	lsls	r2, r3, #31
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	429a      	cmp	r2, r3
 8003420:	d101      	bne.n	8003426 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2254      	movs	r2, #84	; 0x54
 8003440:	5c9b      	ldrb	r3, [r3, r2]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_ADCEx_Calibration_Start+0x1a>
 8003446:	2302      	movs	r3, #2
 8003448:	e06c      	b.n	8003524 <HAL_ADCEx_Calibration_Start+0xf4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2254      	movs	r2, #84	; 0x54
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003452:	2317      	movs	r3, #23
 8003454:	18fc      	adds	r4, r7, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff ff67 	bl	800332c <ADC_Disable>
 800345e:	0003      	movs	r3, r0
 8003460:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff ffbe 	bl	80033e8 <LL_ADC_IsEnabled>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d14c      	bne.n	800350a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_ADCEx_Calibration_Start+0xfc>)
 8003476:	4013      	ands	r3, r2
 8003478:	2202      	movs	r2, #2
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2203      	movs	r2, #3
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2103      	movs	r1, #3
 8003498:	438a      	bics	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	0609      	lsls	r1, r1, #24
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034ae:	e014      	b.n	80034da <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_ADCEx_Calibration_Start+0x100>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d90d      	bls.n	80034da <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	2212      	movs	r2, #18
 80034c4:	4393      	bics	r3, r2
 80034c6:	2210      	movs	r2, #16
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2254      	movs	r2, #84	; 0x54
 80034d2:	2100      	movs	r1, #0
 80034d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e024      	b.n	8003524 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0018      	movs	r0, r3
 80034e0:	f7ff ff93 	bl	800340a <LL_ADC_IsCalibrationOnGoing>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d1e3      	bne.n	80034b0 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68d9      	ldr	r1, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	2203      	movs	r2, #3
 80034fe:	4393      	bics	r3, r2
 8003500:	2201      	movs	r2, #1
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	659a      	str	r2, [r3, #88]	; 0x58
 8003508:	e005      	b.n	8003516 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	2210      	movs	r2, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2254      	movs	r2, #84	; 0x54
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800351e:	2317      	movs	r3, #23
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	781b      	ldrb	r3, [r3, #0]
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b007      	add	sp, #28
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	fffffefd 	.word	0xfffffefd
 8003530:	0002f1ff 	.word	0x0002f1ff

08003534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	0002      	movs	r2, r0
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b7f      	cmp	r3, #127	; 0x7f
 8003546:	d809      	bhi.n	800355c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	001a      	movs	r2, r3
 800354e:	231f      	movs	r3, #31
 8003550:	401a      	ands	r2, r3
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <__NVIC_EnableIRQ+0x30>)
 8003554:	2101      	movs	r1, #1
 8003556:	4091      	lsls	r1, r2
 8003558:	000a      	movs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}
 8003564:	e000e100 	.word	0xe000e100

08003568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	0002      	movs	r2, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b7f      	cmp	r3, #127	; 0x7f
 800357c:	d828      	bhi.n	80035d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800357e:	4a2f      	ldr	r2, [pc, #188]	; (800363c <__NVIC_SetPriority+0xd4>)
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b25b      	sxtb	r3, r3
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	33c0      	adds	r3, #192	; 0xc0
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	589b      	ldr	r3, [r3, r2]
 800358e:	1dfa      	adds	r2, r7, #7
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	0011      	movs	r1, r2
 8003594:	2203      	movs	r2, #3
 8003596:	400a      	ands	r2, r1
 8003598:	00d2      	lsls	r2, r2, #3
 800359a:	21ff      	movs	r1, #255	; 0xff
 800359c:	4091      	lsls	r1, r2
 800359e:	000a      	movs	r2, r1
 80035a0:	43d2      	mvns	r2, r2
 80035a2:	401a      	ands	r2, r3
 80035a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	401a      	ands	r2, r3
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	0018      	movs	r0, r3
 80035b4:	2303      	movs	r3, #3
 80035b6:	4003      	ands	r3, r0
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035bc:	481f      	ldr	r0, [pc, #124]	; (800363c <__NVIC_SetPriority+0xd4>)
 80035be:	1dfb      	adds	r3, r7, #7
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	430a      	orrs	r2, r1
 80035c8:	33c0      	adds	r3, #192	; 0xc0
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035ce:	e031      	b.n	8003634 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035d0:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <__NVIC_SetPriority+0xd8>)
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	0019      	movs	r1, r3
 80035d8:	230f      	movs	r3, #15
 80035da:	400b      	ands	r3, r1
 80035dc:	3b08      	subs	r3, #8
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3306      	adds	r3, #6
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1dfa      	adds	r2, r7, #7
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	0011      	movs	r1, r2
 80035f0:	2203      	movs	r2, #3
 80035f2:	400a      	ands	r2, r1
 80035f4:	00d2      	lsls	r2, r2, #3
 80035f6:	21ff      	movs	r1, #255	; 0xff
 80035f8:	4091      	lsls	r1, r2
 80035fa:	000a      	movs	r2, r1
 80035fc:	43d2      	mvns	r2, r2
 80035fe:	401a      	ands	r2, r3
 8003600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	019b      	lsls	r3, r3, #6
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	401a      	ands	r2, r3
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	0018      	movs	r0, r3
 8003610:	2303      	movs	r3, #3
 8003612:	4003      	ands	r3, r0
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003618:	4809      	ldr	r0, [pc, #36]	; (8003640 <__NVIC_SetPriority+0xd8>)
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	001c      	movs	r4, r3
 8003620:	230f      	movs	r3, #15
 8003622:	4023      	ands	r3, r4
 8003624:	3b08      	subs	r3, #8
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	430a      	orrs	r2, r1
 800362a:	3306      	adds	r3, #6
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	18c3      	adds	r3, r0, r3
 8003630:	3304      	adds	r3, #4
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b003      	add	sp, #12
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	045b      	lsls	r3, r3, #17
 8003654:	429a      	cmp	r2, r3
 8003656:	d301      	bcc.n	800365c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003658:	2301      	movs	r3, #1
 800365a:	e010      	b.n	800367e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <SysTick_Config+0x44>)
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	3a01      	subs	r2, #1
 8003662:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003664:	2301      	movs	r3, #1
 8003666:	425b      	negs	r3, r3
 8003668:	2103      	movs	r1, #3
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff ff7c 	bl	8003568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <SysTick_Config+0x44>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <SysTick_Config+0x44>)
 8003678:	2207      	movs	r2, #7
 800367a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	e000e010 	.word	0xe000e010

0800368c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	210f      	movs	r1, #15
 8003698:	187b      	adds	r3, r7, r1
 800369a:	1c02      	adds	r2, r0, #0
 800369c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff ff5d 	bl	8003568 <__NVIC_SetPriority>
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	0002      	movs	r2, r0
 80036be:	1dfb      	adds	r3, r7, #7
 80036c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b25b      	sxtb	r3, r3
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff ff33 	bl	8003534 <__NVIC_EnableIRQ>
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff ffaf 	bl	8003644 <SysTick_Config>
 80036e6:	0003      	movs	r3, r0
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fe:	e147      	b.n	8003990 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2101      	movs	r1, #1
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4091      	lsls	r1, r2
 800370a:	000a      	movs	r2, r1
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d100      	bne.n	8003718 <HAL_GPIO_Init+0x28>
 8003716:	e138      	b.n	800398a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	4013      	ands	r3, r2
 8003720:	2b01      	cmp	r3, #1
 8003722:	d005      	beq.n	8003730 <HAL_GPIO_Init+0x40>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	4013      	ands	r3, r2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d130      	bne.n	8003792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	409a      	lsls	r2, r3
 800373e:	0013      	movs	r3, r2
 8003740:	43da      	mvns	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	0013      	movs	r3, r2
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003766:	2201      	movs	r2, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
 800376c:	0013      	movs	r3, r2
 800376e:	43da      	mvns	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	2201      	movs	r2, #1
 800377e:	401a      	ands	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	409a      	lsls	r2, r3
 8003784:	0013      	movs	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2203      	movs	r2, #3
 8003798:	4013      	ands	r3, r2
 800379a:	2b03      	cmp	r3, #3
 800379c:	d017      	beq.n	80037ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	43da      	mvns	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2203      	movs	r2, #3
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d123      	bne.n	8003822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	08da      	lsrs	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3208      	adds	r2, #8
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	58d3      	ldr	r3, [r2, r3]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2207      	movs	r2, #7
 80037ec:	4013      	ands	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	220f      	movs	r2, #15
 80037f2:	409a      	lsls	r2, r3
 80037f4:	0013      	movs	r3, r2
 80037f6:	43da      	mvns	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2107      	movs	r1, #7
 8003806:	400b      	ands	r3, r1
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	409a      	lsls	r2, r3
 800380c:	0013      	movs	r3, r2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	08da      	lsrs	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3208      	adds	r2, #8
 800381c:	0092      	lsls	r2, r2, #2
 800381e:	6939      	ldr	r1, [r7, #16]
 8003820:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	409a      	lsls	r2, r3
 8003830:	0013      	movs	r3, r2
 8003832:	43da      	mvns	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	401a      	ands	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	409a      	lsls	r2, r3
 8003848:	0013      	movs	r3, r2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	23c0      	movs	r3, #192	; 0xc0
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	4013      	ands	r3, r2
 8003860:	d100      	bne.n	8003864 <HAL_GPIO_Init+0x174>
 8003862:	e092      	b.n	800398a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003864:	4a50      	ldr	r2, [pc, #320]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	3318      	adds	r3, #24
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	589b      	ldr	r3, [r3, r2]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2203      	movs	r2, #3
 8003876:	4013      	ands	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	220f      	movs	r2, #15
 800387c:	409a      	lsls	r2, r3
 800387e:	0013      	movs	r3, r2
 8003880:	43da      	mvns	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	23a0      	movs	r3, #160	; 0xa0
 800388c:	05db      	lsls	r3, r3, #23
 800388e:	429a      	cmp	r2, r3
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0x1ca>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a45      	ldr	r2, [pc, #276]	; (80039ac <HAL_GPIO_Init+0x2bc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00d      	beq.n	80038b6 <HAL_GPIO_Init+0x1c6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a44      	ldr	r2, [pc, #272]	; (80039b0 <HAL_GPIO_Init+0x2c0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <HAL_GPIO_Init+0x1c2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a43      	ldr	r2, [pc, #268]	; (80039b4 <HAL_GPIO_Init+0x2c4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_GPIO_Init+0x1be>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e006      	b.n	80038bc <HAL_GPIO_Init+0x1cc>
 80038ae:	2305      	movs	r3, #5
 80038b0:	e004      	b.n	80038bc <HAL_GPIO_Init+0x1cc>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_Init+0x1cc>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_GPIO_Init+0x1cc>
 80038ba:	2300      	movs	r3, #0
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	2103      	movs	r1, #3
 80038c0:	400a      	ands	r2, r1
 80038c2:	00d2      	lsls	r2, r2, #3
 80038c4:	4093      	lsls	r3, r2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80038cc:	4936      	ldr	r1, [pc, #216]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	3318      	adds	r3, #24
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038da:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	58d3      	ldr	r3, [r2, r3]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	4013      	ands	r3, r2
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003900:	4929      	ldr	r1, [pc, #164]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003908:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 800390a:	2384      	movs	r3, #132	; 0x84
 800390c:	58d3      	ldr	r3, [r2, r3]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43da      	mvns	r2, r3
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	4013      	ands	r3, r2
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800392e:	491e      	ldr	r1, [pc, #120]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 8003930:	2284      	movs	r2, #132	; 0x84
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	035b      	lsls	r3, r3, #13
 800394e:	4013      	ands	r3, r2
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43da      	mvns	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	039b      	lsls	r3, r3, #14
 8003978:	4013      	ands	r3, r2
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	40da      	lsrs	r2, r3
 8003998:	1e13      	subs	r3, r2, #0
 800399a:	d000      	beq.n	800399e <HAL_GPIO_Init+0x2ae>
 800399c:	e6b0      	b.n	8003700 <HAL_GPIO_Init+0x10>
  }
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b006      	add	sp, #24
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021800 	.word	0x40021800
 80039ac:	50000400 	.word	0x50000400
 80039b0:	50000800 	.word	0x50000800
 80039b4:	50000c00 	.word	0x50000c00

080039b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	000a      	movs	r2, r1
 80039c2:	1cbb      	adds	r3, r7, #2
 80039c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	1cba      	adds	r2, r7, #2
 80039cc:	8812      	ldrh	r2, [r2, #0]
 80039ce:	4013      	ands	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80039d2:	230f      	movs	r3, #15
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	e003      	b.n	80039e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039dc:	230f      	movs	r3, #15
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80039e4:	230f      	movs	r3, #15
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	781b      	ldrb	r3, [r3, #0]
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b004      	add	sp, #16
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	0008      	movs	r0, r1
 80039fc:	0011      	movs	r1, r2
 80039fe:	1cbb      	adds	r3, r7, #2
 8003a00:	1c02      	adds	r2, r0, #0
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	1c7b      	adds	r3, r7, #1
 8003a06:	1c0a      	adds	r2, r1, #0
 8003a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a0a:	1c7b      	adds	r3, r7, #1
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a12:	1cbb      	adds	r3, r7, #2
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a1a:	e003      	b.n	8003a24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a1c:	1cbb      	adds	r3, r7, #2
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	0002      	movs	r2, r0
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	1dba      	adds	r2, r7, #6
 8003a3e:	8812      	ldrh	r2, [r2, #0]
 8003a40:	4013      	ands	r3, r2
 8003a42:	d008      	beq.n	8003a56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003a46:	1dba      	adds	r2, r7, #6
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003a4c:	1dbb      	adds	r3, r7, #6
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f004 f89e 	bl	8007b92 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	1dba      	adds	r2, r7, #6
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d008      	beq.n	8003a74 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003a64:	1dba      	adds	r2, r7, #6
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003a6a:	1dbb      	adds	r3, r7, #6
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f004 f880 	bl	8007b74 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b002      	add	sp, #8
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021800 	.word	0x40021800

08003a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e082      	b.n	8003b98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2241      	movs	r2, #65	; 0x41
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f006 f869 	bl	8009b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2241      	movs	r2, #65	; 0x41
 8003ab2:	2124      	movs	r1, #36	; 0x24
 8003ab4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	438a      	bics	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <HAL_I2C_Init+0x120>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4931      	ldr	r1, [pc, #196]	; (8003ba4 <HAL_I2C_Init+0x124>)
 8003ae0:	400a      	ands	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d108      	bne.n	8003afe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	0209      	lsls	r1, r1, #8
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e007      	b.n	8003b0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2184      	movs	r1, #132	; 0x84
 8003b08:	0209      	lsls	r1, r1, #8
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d104      	bne.n	8003b20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	491f      	ldr	r1, [pc, #124]	; (8003ba8 <HAL_I2C_Init+0x128>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	491a      	ldr	r1, [pc, #104]	; (8003ba4 <HAL_I2C_Init+0x124>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69d9      	ldr	r1, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2241      	movs	r2, #65	; 0x41
 8003b84:	2120      	movs	r1, #32
 8003b86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2242      	movs	r2, #66	; 0x42
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	f0ffffff 	.word	0xf0ffffff
 8003ba4:	ffff7fff 	.word	0xffff7fff
 8003ba8:	02008000 	.word	0x02008000

08003bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2241      	movs	r2, #65	; 0x41
 8003bba:	5c9b      	ldrb	r3, [r3, r2]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d138      	bne.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	5c9b      	ldrb	r3, [r3, r2]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e032      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2241      	movs	r2, #65	; 0x41
 8003bdc:	2124      	movs	r1, #36	; 0x24
 8003bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4911      	ldr	r1, [pc, #68]	; (8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2241      	movs	r2, #65	; 0x41
 8003c24:	2120      	movs	r1, #32
 8003c26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	ffffefff 	.word	0xffffefff

08003c44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2241      	movs	r2, #65	; 0x41
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d139      	bne.n	8003cce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e033      	b.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2241      	movs	r2, #65	; 0x41
 8003c74:	2124      	movs	r1, #36	; 0x24
 8003c76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	438a      	bics	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2241      	movs	r2, #65	; 0x41
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	fffff0ff 	.word	0xfffff0ff

08003cdc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	0049      	lsls	r1, r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	000a      	movs	r2, r1
 8003d02:	1cfb      	adds	r3, r7, #3
 8003d04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_PWR_EnterSTOPMode+0x68>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2207      	movs	r2, #7
 8003d12:	4393      	bics	r3, r2
 8003d14:	001a      	movs	r2, r3
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <HAL_PWR_EnterSTOPMode+0x68>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e005      	b.n	8003d2c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_PWR_EnterSTOPMode+0x68>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_PWR_EnterSTOPMode+0x68>)
 8003d26:	2107      	movs	r1, #7
 8003d28:	438a      	bics	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003d32:	2104      	movs	r1, #4
 8003d34:	430a      	orrs	r2, r1
 8003d36:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003d38:	1cfb      	adds	r3, r7, #3
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d40:	bf30      	wfi
 8003d42:	e002      	b.n	8003d4a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d44:	bf40      	sev
    __WFE();
 8003d46:	bf20      	wfe
    __WFE();
 8003d48:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003d50:	2104      	movs	r1, #4
 8003d52:	438a      	bics	r2, r1
 8003d54:	611a      	str	r2, [r3, #16]
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	40007000 	.word	0x40007000
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d11f      	bne.n	8003dcc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	0013      	movs	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4912      	ldr	r1, [pc, #72]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fc f9b2 	bl	8000104 <__udivsi3>
 8003da0:	0003      	movs	r3, r0
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da6:	e008      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e001      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e009      	b.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d0ed      	beq.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b004      	add	sp, #16
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	fffff9ff 	.word	0xfffff9ff
 8003de0:	20000008 	.word	0x20000008
 8003de4:	000f4240 	.word	0x000f4240

08003de8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <LL_RCC_GetAPB1Prescaler+0x14>)
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	23e0      	movs	r3, #224	; 0xe0
 8003df2:	01db      	lsls	r3, r3, #7
 8003df4:	4013      	ands	r3, r2
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e304      	b.n	800441c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <HAL_RCC_OscConfig+0x1e>
 8003e1c:	e07c      	b.n	8003f18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1e:	4bc3      	ldr	r3, [pc, #780]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2238      	movs	r2, #56	; 0x38
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e28:	4bc0      	ldr	r3, [pc, #768]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	4013      	ands	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3e>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4bb9      	ldr	r3, [pc, #740]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	029b      	lsls	r3, r3, #10
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d062      	beq.n	8003f16 <HAL_RCC_OscConfig+0x116>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d15e      	bne.n	8003f16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e2df      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	025b      	lsls	r3, r3, #9
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x78>
 8003e68:	4bb0      	ldr	r3, [pc, #704]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4baf      	ldr	r3, [pc, #700]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e6e:	2180      	movs	r1, #128	; 0x80
 8003e70:	0249      	lsls	r1, r1, #9
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e020      	b.n	8003eba <HAL_RCC_OscConfig+0xba>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	23a0      	movs	r3, #160	; 0xa0
 8003e7e:	02db      	lsls	r3, r3, #11
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d10e      	bne.n	8003ea2 <HAL_RCC_OscConfig+0xa2>
 8003e84:	4ba9      	ldr	r3, [pc, #676]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4ba8      	ldr	r3, [pc, #672]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	02c9      	lsls	r1, r1, #11
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4ba6      	ldr	r3, [pc, #664]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4ba5      	ldr	r3, [pc, #660]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0249      	lsls	r1, r1, #9
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e00b      	b.n	8003eba <HAL_RCC_OscConfig+0xba>
 8003ea2:	4ba2      	ldr	r3, [pc, #648]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4ba1      	ldr	r3, [pc, #644]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003ea8:	49a1      	ldr	r1, [pc, #644]	; (8004130 <HAL_RCC_OscConfig+0x330>)
 8003eaa:	400a      	ands	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	4b9f      	ldr	r3, [pc, #636]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b9e      	ldr	r3, [pc, #632]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003eb4:	499f      	ldr	r1, [pc, #636]	; (8004134 <HAL_RCC_OscConfig+0x334>)
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d014      	beq.n	8003eec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fb85 	bl	80025d0 <HAL_GetTick>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fb80 	bl	80025d0 <HAL_GetTick>
 8003ed0:	0002      	movs	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e29e      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b93      	ldr	r3, [pc, #588]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	029b      	lsls	r3, r3, #10
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xcc>
 8003eea:	e015      	b.n	8003f18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fe fb70 	bl	80025d0 <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef6:	f7fe fb6b 	bl	80025d0 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e289      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	029b      	lsls	r3, r3, #10
 8003f10:	4013      	ands	r3, r2
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0xf6>
 8003f14:	e000      	b.n	8003f18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d100      	bne.n	8003f24 <HAL_RCC_OscConfig+0x124>
 8003f22:	e099      	b.n	8004058 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f24:	4b81      	ldr	r3, [pc, #516]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2238      	movs	r2, #56	; 0x38
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2203      	movs	r2, #3
 8003f34:	4013      	ands	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d102      	bne.n	8003f44 <HAL_RCC_OscConfig+0x144>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d002      	beq.n	8003f4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d135      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f4a:	4b78      	ldr	r3, [pc, #480]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4013      	ands	r3, r2
 8003f54:	d005      	beq.n	8003f62 <HAL_RCC_OscConfig+0x162>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e25c      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f62:	4b72      	ldr	r3, [pc, #456]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4a74      	ldr	r2, [pc, #464]	; (8004138 <HAL_RCC_OscConfig+0x338>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d112      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x33c>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f92:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	0adb      	lsrs	r3, r3, #11
 8003f98:	2207      	movs	r2, #7
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	4a68      	ldr	r2, [pc, #416]	; (8004140 <HAL_RCC_OscConfig+0x340>)
 8003f9e:	40da      	lsrs	r2, r3
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x344>)
 8003fa2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fa4:	4b68      	ldr	r3, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x348>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fe fab5 	bl	8002518 <HAL_InitTick>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d051      	beq.n	8004056 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e232      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d030      	beq.n	8004020 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fbe:	4b5b      	ldr	r3, [pc, #364]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5e      	ldr	r2, [pc, #376]	; (800413c <HAL_RCC_OscConfig+0x33c>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b55      	ldr	r3, [pc, #340]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	0049      	lsls	r1, r1, #1
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fe faf6 	bl	80025d0 <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fe faf1 	bl	80025d0 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e20f      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4013      	ands	r3, r2
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	4b48      	ldr	r3, [pc, #288]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a4a      	ldr	r2, [pc, #296]	; (8004138 <HAL_RCC_OscConfig+0x338>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	e01b      	b.n	8004058 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004020:	4b42      	ldr	r3, [pc, #264]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004026:	4949      	ldr	r1, [pc, #292]	; (800414c <HAL_RCC_OscConfig+0x34c>)
 8004028:	400a      	ands	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe fad0 	bl	80025d0 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004036:	f7fe facb 	bl	80025d0 <HAL_GetTick>
 800403a:	0002      	movs	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1e9      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4013      	ands	r3, r2
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x236>
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004056:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2208      	movs	r2, #8
 800405e:	4013      	ands	r3, r2
 8004060:	d047      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004062:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2238      	movs	r2, #56	; 0x38
 8004068:	4013      	ands	r3, r2
 800406a:	2b18      	cmp	r3, #24
 800406c:	d10a      	bne.n	8004084 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800406e:	4b2f      	ldr	r3, [pc, #188]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d03c      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d138      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e1cb      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d019      	beq.n	80040c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 800408e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004090:	4b26      	ldr	r3, [pc, #152]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe fa9a 	bl	80025d0 <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fe fa95 	bl	80025d0 <HAL_GetTick>
 80040a6:	0002      	movs	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e1b3      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 80040b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d0f1      	beq.n	80040a2 <HAL_RCC_OscConfig+0x2a2>
 80040be:	e018      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 80040c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	438a      	bics	r2, r1
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe fa80 	bl	80025d0 <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fe fa7b 	bl	80025d0 <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e199      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e8:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	2202      	movs	r2, #2
 80040ee:	4013      	ands	r3, r2
 80040f0:	d1f1      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	d100      	bne.n	80040fe <HAL_RCC_OscConfig+0x2fe>
 80040fc:	e0c6      	b.n	800428c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	231f      	movs	r3, #31
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2238      	movs	r2, #56	; 0x38
 800410c:	4013      	ands	r3, r2
 800410e:	2b20      	cmp	r3, #32
 8004110:	d11e      	bne.n	8004150 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x32c>)
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d100      	bne.n	800411e <HAL_RCC_OscConfig+0x31e>
 800411c:	e0b6      	b.n	800428c <HAL_RCC_OscConfig+0x48c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d000      	beq.n	8004128 <HAL_RCC_OscConfig+0x328>
 8004126:	e0b1      	b.n	800428c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e177      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
 800412c:	40021000 	.word	0x40021000
 8004130:	fffeffff 	.word	0xfffeffff
 8004134:	fffbffff 	.word	0xfffbffff
 8004138:	ffff80ff 	.word	0xffff80ff
 800413c:	ffffc7ff 	.word	0xffffc7ff
 8004140:	00f42400 	.word	0x00f42400
 8004144:	20000008 	.word	0x20000008
 8004148:	20000000 	.word	0x20000000
 800414c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004150:	4bb4      	ldr	r3, [pc, #720]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	055b      	lsls	r3, r3, #21
 8004158:	4013      	ands	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_RCC_OscConfig+0x360>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x362>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d011      	beq.n	800418a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	4baf      	ldr	r3, [pc, #700]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800416a:	4bae      	ldr	r3, [pc, #696]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	0549      	lsls	r1, r1, #21
 8004170:	430a      	orrs	r2, r1
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c
 8004174:	4bab      	ldr	r3, [pc, #684]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	055b      	lsls	r3, r3, #21
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004182:	231f      	movs	r3, #31
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418a:	4ba7      	ldr	r3, [pc, #668]	; (8004428 <HAL_RCC_OscConfig+0x628>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4013      	ands	r3, r2
 8004194:	d11a      	bne.n	80041cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004196:	4ba4      	ldr	r3, [pc, #656]	; (8004428 <HAL_RCC_OscConfig+0x628>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4ba3      	ldr	r3, [pc, #652]	; (8004428 <HAL_RCC_OscConfig+0x628>)
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	0049      	lsls	r1, r1, #1
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041a4:	f7fe fa14 	bl	80025d0 <HAL_GetTick>
 80041a8:	0003      	movs	r3, r0
 80041aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe fa0f 	bl	80025d0 <HAL_GetTick>
 80041b2:	0002      	movs	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e12d      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c0:	4b99      	ldr	r3, [pc, #612]	; (8004428 <HAL_RCC_OscConfig+0x628>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3e2>
 80041d4:	4b93      	ldr	r3, [pc, #588]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80041d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041d8:	4b92      	ldr	r3, [pc, #584]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80041da:	2101      	movs	r1, #1
 80041dc:	430a      	orrs	r2, r1
 80041de:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e0:	e01c      	b.n	800421c <HAL_RCC_OscConfig+0x41c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x404>
 80041ea:	4b8e      	ldr	r3, [pc, #568]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80041ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041ee:	4b8d      	ldr	r3, [pc, #564]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80041f0:	2104      	movs	r1, #4
 80041f2:	430a      	orrs	r2, r1
 80041f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80041f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041fa:	4b8a      	ldr	r3, [pc, #552]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80041fc:	2101      	movs	r1, #1
 80041fe:	430a      	orrs	r2, r1
 8004200:	65da      	str	r2, [r3, #92]	; 0x5c
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0x41c>
 8004204:	4b87      	ldr	r3, [pc, #540]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004208:	4b86      	ldr	r3, [pc, #536]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800420a:	2101      	movs	r1, #1
 800420c:	438a      	bics	r2, r1
 800420e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004210:	4b84      	ldr	r3, [pc, #528]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004214:	4b83      	ldr	r3, [pc, #524]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004216:	2104      	movs	r1, #4
 8004218:	438a      	bics	r2, r1
 800421a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d014      	beq.n	800424e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe f9d4 	bl	80025d0 <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422c:	e009      	b.n	8004242 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fe f9cf 	bl	80025d0 <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	4a7c      	ldr	r2, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x62c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0ec      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004242:	4b78      	ldr	r3, [pc, #480]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2202      	movs	r2, #2
 8004248:	4013      	ands	r3, r2
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x42e>
 800424c:	e013      	b.n	8004276 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe f9bf 	bl	80025d0 <HAL_GetTick>
 8004252:	0003      	movs	r3, r0
 8004254:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004256:	e009      	b.n	800426c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fe f9ba 	bl	80025d0 <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	4a72      	ldr	r2, [pc, #456]	; (800442c <HAL_RCC_OscConfig+0x62c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0d7      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426c:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004276:	231f      	movs	r3, #31
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004284:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004286:	496a      	ldr	r1, [pc, #424]	; (8004430 <HAL_RCC_OscConfig+0x630>)
 8004288:	400a      	ands	r2, r1
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d100      	bne.n	8004296 <HAL_RCC_OscConfig+0x496>
 8004294:	e0c1      	b.n	800441a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2238      	movs	r2, #56	; 0x38
 800429c:	4013      	ands	r3, r2
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d100      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4a4>
 80042a2:	e081      	b.n	80043a8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d156      	bne.n	800435a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ac:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80042b2:	4960      	ldr	r1, [pc, #384]	; (8004434 <HAL_RCC_OscConfig+0x634>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fe f98a 	bl	80025d0 <HAL_GetTick>
 80042bc:	0003      	movs	r3, r0
 80042be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fe f985 	bl	80025d0 <HAL_GetTick>
 80042c6:	0002      	movs	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0a3      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	049b      	lsls	r3, r3, #18
 80042dc:	4013      	ands	r3, r2
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a54      	ldr	r2, [pc, #336]	; (8004438 <HAL_RCC_OscConfig+0x638>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	431a      	orrs	r2, r3
 800430e:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	0449      	lsls	r1, r1, #17
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004322:	4b40      	ldr	r3, [pc, #256]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0549      	lsls	r1, r1, #21
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f94e 	bl	80025d0 <HAL_GetTick>
 8004334:	0003      	movs	r3, r0
 8004336:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe f949 	bl	80025d0 <HAL_GetTick>
 800433e:	0002      	movs	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e067      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	049b      	lsls	r3, r3, #18
 8004354:	4013      	ands	r3, r2
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x53a>
 8004358:	e05f      	b.n	800441a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b32      	ldr	r3, [pc, #200]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004360:	4934      	ldr	r1, [pc, #208]	; (8004434 <HAL_RCC_OscConfig+0x634>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004366:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800436c:	2103      	movs	r1, #3
 800436e:	438a      	bics	r2, r1
 8004370:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004372:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 8004378:	4930      	ldr	r1, [pc, #192]	; (800443c <HAL_RCC_OscConfig+0x63c>)
 800437a:	400a      	ands	r2, r1
 800437c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe f927 	bl	80025d0 <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fe f922 	bl	80025d0 <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e040      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	049b      	lsls	r3, r3, #18
 80043a2:	4013      	ands	r3, r2
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x588>
 80043a6:	e038      	b.n	800441a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e033      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x624>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2203      	movs	r2, #3
 80043be:	401a      	ands	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d126      	bne.n	8004416 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2270      	movs	r2, #112	; 0x70
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d11f      	bne.n	8004416 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	23fe      	movs	r3, #254	; 0xfe
 80043da:	01db      	lsls	r3, r3, #7
 80043dc:	401a      	ands	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d116      	bne.n	8004416 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	23f8      	movs	r3, #248	; 0xf8
 80043ec:	039b      	lsls	r3, r3, #14
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d10e      	bne.n	8004416 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	23e0      	movs	r3, #224	; 0xe0
 80043fc:	051b      	lsls	r3, r3, #20
 80043fe:	401a      	ands	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	0f5b      	lsrs	r3, r3, #29
 800440c:	075a      	lsls	r2, r3, #29
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b008      	add	sp, #32
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	40007000 	.word	0x40007000
 800442c:	00001388 	.word	0x00001388
 8004430:	efffffff 	.word	0xefffffff
 8004434:	feffffff 	.word	0xfeffffff
 8004438:	11c1808c 	.word	0x11c1808c
 800443c:	eefeffff 	.word	0xeefeffff

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0e9      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2207      	movs	r2, #7
 800445a:	4013      	ands	r3, r2
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d91e      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b73      	ldr	r3, [pc, #460]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2207      	movs	r2, #7
 8004468:	4393      	bics	r3, r2
 800446a:	0019      	movs	r1, r3
 800446c:	4b70      	ldr	r3, [pc, #448]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004474:	f7fe f8ac 	bl	80025d0 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800447c:	e009      	b.n	8004492 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447e:	f7fe f8a7 	bl	80025d0 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	4a6a      	ldr	r2, [pc, #424]	; (8004634 <HAL_RCC_ClockConfig+0x1f4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0ca      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004492:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2207      	movs	r2, #7
 8004498:	4013      	ands	r3, r2
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d1ee      	bne.n	800447e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2202      	movs	r2, #2
 80044a6:	4013      	ands	r3, r2
 80044a8:	d015      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2204      	movs	r2, #4
 80044b0:	4013      	ands	r3, r2
 80044b2:	d006      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044b4:	4b60      	ldr	r3, [pc, #384]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80044ba:	21e0      	movs	r1, #224	; 0xe0
 80044bc:	01c9      	lsls	r1, r1, #7
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c2:	4b5d      	ldr	r3, [pc, #372]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_RCC_ClockConfig+0x1fc>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b59      	ldr	r3, [pc, #356]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80044d2:	430a      	orrs	r2, r1
 80044d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	4013      	ands	r3, r2
 80044de:	d057      	beq.n	8004590 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e8:	4b53      	ldr	r3, [pc, #332]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	029b      	lsls	r3, r3, #10
 80044f0:	4013      	ands	r3, r2
 80044f2:	d12b      	bne.n	800454c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e097      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	049b      	lsls	r3, r3, #18
 8004508:	4013      	ands	r3, r2
 800450a:	d11f      	bne.n	800454c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e08b      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d107      	bne.n	8004528 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004518:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4013      	ands	r3, r2
 8004522:	d113      	bne.n	800454c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e07f      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d106      	bne.n	800453e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	2202      	movs	r2, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d108      	bne.n	800454c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e074      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e06d      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800454c:	4b3a      	ldr	r3, [pc, #232]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2207      	movs	r2, #7
 8004552:	4393      	bics	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004560:	f7fe f836 	bl	80025d0 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004568:	e009      	b.n	800457e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456a:	f7fe f831 	bl	80025d0 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	4a2f      	ldr	r2, [pc, #188]	; (8004634 <HAL_RCC_ClockConfig+0x1f4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e054      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2238      	movs	r2, #56	; 0x38
 8004584:	401a      	ands	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	429a      	cmp	r2, r3
 800458e:	d1ec      	bne.n	800456a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2207      	movs	r2, #7
 8004596:	4013      	ands	r3, r2
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d21e      	bcs.n	80045dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2207      	movs	r2, #7
 80045a4:	4393      	bics	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045b0:	f7fe f80e 	bl	80025d0 <HAL_GetTick>
 80045b4:	0003      	movs	r3, r0
 80045b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045b8:	e009      	b.n	80045ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ba:	f7fe f809 	bl	80025d0 <HAL_GetTick>
 80045be:	0002      	movs	r2, r0
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <HAL_RCC_ClockConfig+0x1f4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e02c      	b.n	8004628 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2207      	movs	r2, #7
 80045d4:	4013      	ands	r3, r2
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1ee      	bne.n	80045ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2204      	movs	r2, #4
 80045e2:	4013      	ands	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <HAL_RCC_ClockConfig+0x200>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045fa:	f000 f829 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 80045fe:	0001      	movs	r1, r0
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <HAL_RCC_ClockConfig+0x1f8>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	220f      	movs	r2, #15
 8004608:	401a      	ands	r2, r3
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_RCC_ClockConfig+0x204>)
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	58d3      	ldr	r3, [r2, r3]
 8004610:	221f      	movs	r2, #31
 8004612:	4013      	ands	r3, r2
 8004614:	000a      	movs	r2, r1
 8004616:	40da      	lsrs	r2, r3
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_ClockConfig+0x208>)
 800461a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_ClockConfig+0x20c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fd ff79 	bl	8002518 <HAL_InitTick>
 8004626:	0003      	movs	r3, r0
}
 8004628:	0018      	movs	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	b004      	add	sp, #16
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40022000 	.word	0x40022000
 8004634:	00001388 	.word	0x00001388
 8004638:	40021000 	.word	0x40021000
 800463c:	fffff0ff 	.word	0xfffff0ff
 8004640:	ffff8fff 	.word	0xffff8fff
 8004644:	0800a368 	.word	0x0800a368
 8004648:	20000008 	.word	0x20000008
 800464c:	20000000 	.word	0x20000000

08004650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004656:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2238      	movs	r2, #56	; 0x38
 800465c:	4013      	ands	r3, r2
 800465e:	d10f      	bne.n	8004680 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0adb      	lsrs	r3, r3, #11
 8004666:	2207      	movs	r2, #7
 8004668:	4013      	ands	r3, r2
 800466a:	2201      	movs	r2, #1
 800466c:	409a      	lsls	r2, r3
 800466e:	0013      	movs	r3, r2
 8004670:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	4835      	ldr	r0, [pc, #212]	; (800474c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004676:	f7fb fd45 	bl	8000104 <__udivsi3>
 800467a:	0003      	movs	r3, r0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e05d      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004680:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2238      	movs	r2, #56	; 0x38
 8004686:	4013      	ands	r3, r2
 8004688:	2b08      	cmp	r3, #8
 800468a:	d102      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_RCC_GetSysClockFreq+0x100>)
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e054      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004692:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2238      	movs	r2, #56	; 0x38
 8004698:	4013      	ands	r3, r2
 800469a:	2b10      	cmp	r3, #16
 800469c:	d138      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2203      	movs	r2, #3
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a8:	4b27      	ldr	r3, [pc, #156]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	2207      	movs	r2, #7
 80046b0:	4013      	ands	r3, r2
 80046b2:	3301      	adds	r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d10d      	bne.n	80046d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4824      	ldr	r0, [pc, #144]	; (8004750 <HAL_RCC_GetSysClockFreq+0x100>)
 80046c0:	f7fb fd20 	bl	8000104 <__udivsi3>
 80046c4:	0003      	movs	r3, r0
 80046c6:	0019      	movs	r1, r3
 80046c8:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	227f      	movs	r2, #127	; 0x7f
 80046d0:	4013      	ands	r3, r2
 80046d2:	434b      	muls	r3, r1
 80046d4:	617b      	str	r3, [r7, #20]
        break;
 80046d6:	e00d      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	481c      	ldr	r0, [pc, #112]	; (800474c <HAL_RCC_GetSysClockFreq+0xfc>)
 80046dc:	f7fb fd12 	bl	8000104 <__udivsi3>
 80046e0:	0003      	movs	r3, r0
 80046e2:	0019      	movs	r1, r3
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	227f      	movs	r2, #127	; 0x7f
 80046ec:	4013      	ands	r3, r2
 80046ee:	434b      	muls	r3, r1
 80046f0:	617b      	str	r3, [r7, #20]
        break;
 80046f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0f5b      	lsrs	r3, r3, #29
 80046fa:	2207      	movs	r2, #7
 80046fc:	4013      	ands	r3, r2
 80046fe:	3301      	adds	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	6978      	ldr	r0, [r7, #20]
 8004706:	f7fb fcfd 	bl	8000104 <__udivsi3>
 800470a:	0003      	movs	r3, r0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e015      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2238      	movs	r2, #56	; 0x38
 8004716:	4013      	ands	r3, r2
 8004718:	2b20      	cmp	r3, #32
 800471a:	d103      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e00b      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2238      	movs	r2, #56	; 0x38
 800472a:	4013      	ands	r3, r2
 800472c:	2b18      	cmp	r3, #24
 800472e:	d103      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004730:	23fa      	movs	r3, #250	; 0xfa
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e001      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800473c:	693b      	ldr	r3, [r7, #16]
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b006      	add	sp, #24
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	40021000 	.word	0x40021000
 800474c:	00f42400 	.word	0x00f42400
 8004750:	007a1200 	.word	0x007a1200

08004754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <HAL_RCC_GetHCLKFreq+0x10>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	20000008 	.word	0x20000008

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b5b0      	push	{r4, r5, r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800476c:	f7ff fff2 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 8004770:	0004      	movs	r4, r0
 8004772:	f7ff fb39 	bl	8003de8 <LL_RCC_GetAPB1Prescaler>
 8004776:	0003      	movs	r3, r0
 8004778:	0b1a      	lsrs	r2, r3, #12
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800477c:	0092      	lsls	r2, r2, #2
 800477e:	58d3      	ldr	r3, [r2, r3]
 8004780:	221f      	movs	r2, #31
 8004782:	4013      	ands	r3, r2
 8004784:	40dc      	lsrs	r4, r3
 8004786:	0023      	movs	r3, r4
}
 8004788:	0018      	movs	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	bdb0      	pop	{r4, r5, r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	0800a3a8 	.word	0x0800a3a8

08004794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800479c:	2313      	movs	r3, #19
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047a4:	2312      	movs	r3, #18
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	4013      	ands	r3, r2
 80047b6:	d100      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80047b8:	e0a3      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ba:	2011      	movs	r0, #17
 80047bc:	183b      	adds	r3, r7, r0
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4bc3      	ldr	r3, [pc, #780]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	055b      	lsls	r3, r3, #21
 80047ca:	4013      	ands	r3, r2
 80047cc:	d110      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4bc0      	ldr	r3, [pc, #768]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d2:	4bbf      	ldr	r3, [pc, #764]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	0549      	lsls	r1, r1, #21
 80047d8:	430a      	orrs	r2, r1
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c
 80047dc:	4bbc      	ldr	r3, [pc, #752]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	055b      	lsls	r3, r3, #21
 80047e4:	4013      	ands	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	183b      	adds	r3, r7, r0
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f0:	4bb8      	ldr	r3, [pc, #736]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4bb7      	ldr	r3, [pc, #732]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	0049      	lsls	r1, r1, #1
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047fe:	f7fd fee7 	bl	80025d0 <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004806:	e00b      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd fee2 	bl	80025d0 <HAL_GetTick>
 800480c:	0002      	movs	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d904      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004816:	2313      	movs	r3, #19
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	2203      	movs	r2, #3
 800481c:	701a      	strb	r2, [r3, #0]
        break;
 800481e:	e005      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004820:	4bac      	ldr	r3, [pc, #688]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4013      	ands	r3, r2
 800482a:	d0ed      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800482c:	2313      	movs	r3, #19
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d154      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004836:	4ba6      	ldr	r3, [pc, #664]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800483a:	23c0      	movs	r3, #192	; 0xc0
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4013      	ands	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d019      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	429a      	cmp	r2, r3
 8004850:	d014      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004852:	4b9f      	ldr	r3, [pc, #636]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	4aa0      	ldr	r2, [pc, #640]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004858:	4013      	ands	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800485c:	4b9c      	ldr	r3, [pc, #624]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800485e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004860:	4b9b      	ldr	r3, [pc, #620]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	0249      	lsls	r1, r1, #9
 8004866:	430a      	orrs	r2, r1
 8004868:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800486a:	4b99      	ldr	r3, [pc, #612]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800486c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800486e:	4b98      	ldr	r3, [pc, #608]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004870:	499a      	ldr	r1, [pc, #616]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004872:	400a      	ands	r2, r1
 8004874:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004876:	4b96      	ldr	r3, [pc, #600]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2201      	movs	r2, #1
 8004880:	4013      	ands	r3, r2
 8004882:	d016      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fd fea4 	bl	80025d0 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488c:	e00c      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7fd fe9f 	bl	80025d0 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	4a91      	ldr	r2, [pc, #580]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d904      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800489e:	2313      	movs	r3, #19
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2203      	movs	r2, #3
 80048a4:	701a      	strb	r2, [r3, #0]
            break;
 80048a6:	e004      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	4b89      	ldr	r3, [pc, #548]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	2202      	movs	r2, #2
 80048ae:	4013      	ands	r3, r2
 80048b0:	d0ed      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80048b2:	2313      	movs	r3, #19
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048bc:	4b84      	ldr	r3, [pc, #528]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	4a85      	ldr	r2, [pc, #532]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ca:	4b81      	ldr	r3, [pc, #516]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80048d0:	e00c      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048d2:	2312      	movs	r3, #18
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	2213      	movs	r2, #19
 80048d8:	18ba      	adds	r2, r7, r2
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e005      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	2312      	movs	r3, #18
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	2213      	movs	r2, #19
 80048e6:	18ba      	adds	r2, r7, r2
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ec:	2311      	movs	r3, #17
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d105      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f6:	4b76      	ldr	r3, [pc, #472]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fa:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048fc:	4979      	ldr	r1, [pc, #484]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80048fe:	400a      	ands	r2, r1
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800490c:	4b70      	ldr	r3, [pc, #448]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	2203      	movs	r2, #3
 8004912:	4393      	bics	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	4b6d      	ldr	r3, [pc, #436]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800491c:	430a      	orrs	r2, r1
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2202      	movs	r2, #2
 8004926:	4013      	ands	r3, r2
 8004928:	d009      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800492a:	4b69      	ldr	r3, [pc, #420]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	220c      	movs	r2, #12
 8004930:	4393      	bics	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	4b65      	ldr	r3, [pc, #404]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800493a:	430a      	orrs	r2, r1
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2210      	movs	r2, #16
 8004944:	4013      	ands	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	4a66      	ldr	r2, [pc, #408]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800494e:	4013      	ands	r3, r2
 8004950:	0019      	movs	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004958:	430a      	orrs	r2, r1
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	4a5f      	ldr	r2, [pc, #380]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800496e:	4013      	ands	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004978:	430a      	orrs	r2, r1
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4013      	ands	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004988:	4b51      	ldr	r3, [pc, #324]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	4a58      	ldr	r2, [pc, #352]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498e:	4013      	ands	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	4b4e      	ldr	r3, [pc, #312]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004998:	430a      	orrs	r2, r1
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2220      	movs	r2, #32
 80049a2:	4013      	ands	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a6:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	4a52      	ldr	r2, [pc, #328]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	0019      	movs	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049b6:	430a      	orrs	r2, r1
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	01db      	lsls	r3, r3, #7
 80049c2:	4013      	ands	r3, r2
 80049c4:	d015      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c6:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	0899      	lsrs	r1, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1a      	ldr	r2, [r3, #32]
 80049d2:	4b3f      	ldr	r3, [pc, #252]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d4:	430a      	orrs	r2, r1
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	05db      	lsls	r3, r3, #23
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d106      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049e4:	4b3a      	ldr	r3, [pc, #232]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	0249      	lsls	r1, r1, #9
 80049ee:	430a      	orrs	r2, r1
 80049f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	4013      	ands	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	4393      	bics	r3, r2
 8004a06:	0019      	movs	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0c:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	2380      	movs	r3, #128	; 0x80
 8004a18:	039b      	lsls	r3, r3, #14
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2c:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	03db      	lsls	r3, r3, #15
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d106      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a44:	2180      	movs	r1, #128	; 0x80
 8004a46:	0449      	lsls	r1, r1, #17
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	03db      	lsls	r3, r3, #15
 8004a54:	4013      	ands	r3, r2
 8004a56:	d016      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	4a27      	ldr	r2, [pc, #156]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	045b      	lsls	r3, r3, #17
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d106      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	0449      	lsls	r1, r1, #17
 8004a82:	430a      	orrs	r2, r1
 8004a84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	01db      	lsls	r3, r3, #7
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	0249      	lsls	r1, r1, #9
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004ac0:	2312      	movs	r3, #18
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	781b      	ldrb	r3, [r3, #0]
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b006      	add	sp, #24
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	fffffcff 	.word	0xfffffcff
 8004adc:	fffeffff 	.word	0xfffeffff
 8004ae0:	00001388 	.word	0x00001388
 8004ae4:	efffffff 	.word	0xefffffff
 8004ae8:	fffff3ff 	.word	0xfffff3ff
 8004aec:	fff3ffff 	.word	0xfff3ffff
 8004af0:	ffcfffff 	.word	0xffcfffff
 8004af4:	ffffcfff 	.word	0xffffcfff
 8004af8:	ffbfffff 	.word	0xffbfffff
 8004afc:	feffffff 	.word	0xfeffffff
 8004b00:	ffff3fff 	.word	0xffff3fff

08004b04 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b0c:	230f      	movs	r3, #15
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d100      	bne.n	8004b1c <HAL_RTC_Init+0x18>
 8004b1a:	e080      	b.n	8004c1e <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2229      	movs	r2, #41	; 0x29
 8004b20:	5c9b      	ldrb	r3, [r3, r2]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2228      	movs	r2, #40	; 0x28
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2288      	movs	r2, #136	; 0x88
 8004b34:	0212      	lsls	r2, r2, #8
 8004b36:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f005 f882 	bl	8009c44 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2229      	movs	r2, #41	; 0x29
 8004b44:	2102      	movs	r1, #2
 8004b46:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	22ca      	movs	r2, #202	; 0xca
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2253      	movs	r2, #83	; 0x53
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004b58:	250f      	movs	r5, #15
 8004b5a:	197c      	adds	r4, r7, r5
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 fa71 	bl	8005046 <RTC_EnterInitMode>
 8004b64:	0003      	movs	r3, r0
 8004b66:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8004b68:	0028      	movs	r0, r5
 8004b6a:	183b      	adds	r3, r7, r0
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d148      	bne.n	8004c04 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	492b      	ldr	r1, [pc, #172]	; (8004c2c <HAL_RTC_Init+0x128>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6912      	ldr	r2, [r2, #16]
 8004ba8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6919      	ldr	r1, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	041a      	lsls	r2, r3, #16
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004bbe:	0005      	movs	r5, r0
 8004bc0:	183c      	adds	r4, r7, r0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 fa81 	bl	80050cc <RTC_ExitInitMode>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8004bce:	197b      	adds	r3, r7, r5
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	00d2      	lsls	r2, r2, #3
 8004be2:	08d2      	lsrs	r2, r2, #3
 8004be4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6999      	ldr	r1, [r3, #24]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	22ff      	movs	r2, #255	; 0xff
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004c0c:	230f      	movs	r3, #15
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2229      	movs	r2, #41	; 0x29
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c1e:	230f      	movs	r3, #15
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	781b      	ldrb	r3, [r3, #0]
}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b004      	add	sp, #16
 8004c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2c:	fb8fffbf 	.word	0xfb8fffbf

08004c30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2228      	movs	r2, #40	; 0x28
 8004c40:	5c9b      	ldrb	r3, [r3, r2]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_RTC_SetTime+0x1a>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e092      	b.n	8004d70 <HAL_RTC_SetTime+0x140>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2228      	movs	r2, #40	; 0x28
 8004c4e:	2101      	movs	r1, #1
 8004c50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2229      	movs	r2, #41	; 0x29
 8004c56:	2102      	movs	r1, #2
 8004c58:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	22ca      	movs	r2, #202	; 0xca
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2253      	movs	r2, #83	; 0x53
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c6a:	2513      	movs	r5, #19
 8004c6c:	197c      	adds	r4, r7, r5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f9e8 	bl	8005046 <RTC_EnterInitMode>
 8004c76:	0003      	movs	r3, r0
 8004c78:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004c7a:	197b      	adds	r3, r7, r5
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d162      	bne.n	8004d48 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d125      	bne.n	8004cd4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	4013      	ands	r3, r2
 8004c92:	d102      	bne.n	8004c9a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2200      	movs	r2, #0
 8004c98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 fa58 	bl	8005154 <RTC_ByteToBcd2>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 fa51 	bl	8005154 <RTC_ByteToBcd2>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cb6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	789b      	ldrb	r3, [r3, #2]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fa49 	bl	8005154 <RTC_ByteToBcd2>
 8004cc2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cc4:	0022      	movs	r2, r4
 8004cc6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e017      	b.n	8004d04 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d102      	bne.n	8004ce6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cf2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cf8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	491b      	ldr	r1, [pc, #108]	; (8004d78 <HAL_RTC_SetTime+0x148>)
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4918      	ldr	r1, [pc, #96]	; (8004d7c <HAL_RTC_SetTime+0x14c>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6999      	ldr	r1, [r3, #24]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d38:	2313      	movs	r3, #19
 8004d3a:	18fc      	adds	r4, r7, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 f9c4 	bl	80050cc <RTC_ExitInitMode>
 8004d44:	0003      	movs	r3, r0
 8004d46:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	22ff      	movs	r2, #255	; 0xff
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004d50:	2313      	movs	r3, #19
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2229      	movs	r2, #41	; 0x29
 8004d5e:	2101      	movs	r1, #1
 8004d60:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2228      	movs	r2, #40	; 0x28
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]

  return status;
 8004d6a:	2313      	movs	r3, #19
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	781b      	ldrb	r3, [r3, #0]
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b006      	add	sp, #24
 8004d76:	bdb0      	pop	{r4, r5, r7, pc}
 8004d78:	007f7f7f 	.word	0x007f7f7f
 8004d7c:	fffbffff 	.word	0xfffbffff

08004d80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	045b      	lsls	r3, r3, #17
 8004d9e:	0c5a      	lsrs	r2, r3, #17
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <HAL_RTC_GetTime+0xb4>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	223f      	movs	r2, #63	; 0x3f
 8004db8:	4013      	ands	r3, r2
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	227f      	movs	r2, #127	; 0x7f
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	227f      	movs	r2, #127	; 0x7f
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	0d9b      	lsrs	r3, r3, #22
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2201      	movs	r2, #1
 8004de6:	4013      	ands	r3, r2
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11a      	bne.n	8004e2a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 f9d3 	bl	80051a4 <RTC_Bcd2ToByte>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	001a      	movs	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f000 f9ca 	bl	80051a4 <RTC_Bcd2ToByte>
 8004e10:	0003      	movs	r3, r0
 8004e12:	001a      	movs	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	789b      	ldrb	r3, [r3, #2]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f9c1 	bl	80051a4 <RTC_Bcd2ToByte>
 8004e22:	0003      	movs	r3, r0
 8004e24:	001a      	movs	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b006      	add	sp, #24
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	007f7f7f 	.word	0x007f7f7f

08004e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e38:	b5b0      	push	{r4, r5, r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2228      	movs	r2, #40	; 0x28
 8004e48:	5c9b      	ldrb	r3, [r3, r2]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_RTC_SetDate+0x1a>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e07e      	b.n	8004f50 <HAL_RTC_SetDate+0x118>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2228      	movs	r2, #40	; 0x28
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2229      	movs	r2, #41	; 0x29
 8004e5e:	2102      	movs	r1, #2
 8004e60:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10e      	bne.n	8004e86 <HAL_RTC_SetDate+0x4e>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	2310      	movs	r3, #16
 8004e70:	4013      	ands	r3, r2
 8004e72:	d008      	beq.n	8004e86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2210      	movs	r2, #16
 8004e7a:	4393      	bics	r3, r2
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	330a      	adds	r3, #10
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11c      	bne.n	8004ec6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	78db      	ldrb	r3, [r3, #3]
 8004e90:	0018      	movs	r0, r3
 8004e92:	f000 f95f 	bl	8005154 <RTC_ByteToBcd2>
 8004e96:	0003      	movs	r3, r0
 8004e98:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f958 	bl	8005154 <RTC_ByteToBcd2>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ea8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	789b      	ldrb	r3, [r3, #2]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f950 	bl	8005154 <RTC_ByteToBcd2>
 8004eb4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004eb6:	0022      	movs	r2, r4
 8004eb8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e00e      	b.n	8004ee4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ed2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ed8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	22ca      	movs	r2, #202	; 0xca
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2253      	movs	r2, #83	; 0x53
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ef4:	2513      	movs	r5, #19
 8004ef6:	197c      	adds	r4, r7, r5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 f8a3 	bl	8005046 <RTC_EnterInitMode>
 8004f00:	0003      	movs	r3, r0
 8004f02:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f04:	0028      	movs	r0, r5
 8004f06:	183b      	adds	r3, r7, r0
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4910      	ldr	r1, [pc, #64]	; (8004f58 <HAL_RTC_SetDate+0x120>)
 8004f16:	400a      	ands	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f1a:	183c      	adds	r4, r7, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f000 f8d4 	bl	80050cc <RTC_ExitInitMode>
 8004f24:	0003      	movs	r3, r0
 8004f26:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f30:	2313      	movs	r3, #19
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2229      	movs	r2, #41	; 0x29
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2228      	movs	r2, #40	; 0x28
 8004f46:	2100      	movs	r1, #0
 8004f48:	5499      	strb	r1, [r3, r2]

  return status;
 8004f4a:	2313      	movs	r3, #19
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b006      	add	sp, #24
 8004f56:	bdb0      	pop	{r4, r5, r7, pc}
 8004f58:	00ffff3f 	.word	0x00ffff3f

08004f5c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <HAL_RTC_GetDate+0x98>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	0a1b      	lsrs	r3, r3, #8
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	221f      	movs	r2, #31
 8004f86:	4013      	ands	r3, r2
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	223f      	movs	r2, #63	; 0x3f
 8004f94:	4013      	ands	r3, r2
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	0b5b      	lsrs	r3, r3, #13
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11a      	bne.n	8004fe8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	78db      	ldrb	r3, [r3, #3]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 f8f4 	bl	80051a4 <RTC_Bcd2ToByte>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f000 f8eb 	bl	80051a4 <RTC_Bcd2ToByte>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	001a      	movs	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f000 f8e2 	bl	80051a4 <RTC_Bcd2ToByte>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	001a      	movs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b006      	add	sp, #24
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	00ffff3f 	.word	0x00ffff3f

08004ff8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	21a0      	movs	r1, #160	; 0xa0
 800500c:	438a      	bics	r2, r1
 800500e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005010:	f7fd fade 	bl	80025d0 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005018:	e00a      	b.n	8005030 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800501a:	f7fd fad9 	bl	80025d0 <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	23fa      	movs	r3, #250	; 0xfa
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	429a      	cmp	r2, r3
 800502a:	d901      	bls.n	8005030 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e006      	b.n	800503e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	4013      	ands	r3, r2
 800503a:	d0ee      	beq.n	800501a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}

08005046 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800504e:	230f      	movs	r3, #15
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2240      	movs	r2, #64	; 0x40
 800505e:	4013      	ands	r3, r2
 8005060:	d12c      	bne.n	80050bc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	430a      	orrs	r2, r1
 8005070:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005072:	f7fd faad 	bl	80025d0 <HAL_GetTick>
 8005076:	0003      	movs	r3, r0
 8005078:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800507a:	e014      	b.n	80050a6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800507c:	f7fd faa8 	bl	80025d0 <HAL_GetTick>
 8005080:	0002      	movs	r2, r0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	200f      	movs	r0, #15
 8005088:	183b      	adds	r3, r7, r0
 800508a:	1839      	adds	r1, r7, r0
 800508c:	7809      	ldrb	r1, [r1, #0]
 800508e:	7019      	strb	r1, [r3, #0]
 8005090:	23fa      	movs	r3, #250	; 0xfa
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d906      	bls.n	80050a6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005098:	183b      	adds	r3, r7, r0
 800509a:	2203      	movs	r2, #3
 800509c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2229      	movs	r2, #41	; 0x29
 80050a2:	2103      	movs	r1, #3
 80050a4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2240      	movs	r2, #64	; 0x40
 80050ae:	4013      	ands	r3, r2
 80050b0:	d104      	bne.n	80050bc <RTC_EnterInitMode+0x76>
 80050b2:	230f      	movs	r3, #15
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d1df      	bne.n	800507c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80050bc:	230f      	movs	r3, #15
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	781b      	ldrb	r3, [r3, #0]
}
 80050c2:	0018      	movs	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b004      	add	sp, #16
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	240f      	movs	r4, #15
 80050d6:	193b      	adds	r3, r7, r4
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80050dc:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <RTC_ExitInitMode+0x84>)
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <RTC_ExitInitMode+0x84>)
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	438a      	bics	r2, r1
 80050e6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <RTC_ExitInitMode+0x84>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2220      	movs	r2, #32
 80050ee:	4013      	ands	r3, r2
 80050f0:	d10d      	bne.n	800510e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff ff7f 	bl	8004ff8 <HAL_RTC_WaitForSynchro>
 80050fa:	1e03      	subs	r3, r0, #0
 80050fc:	d021      	beq.n	8005142 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2229      	movs	r2, #41	; 0x29
 8005102:	2103      	movs	r1, #3
 8005104:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005106:	193b      	adds	r3, r7, r4
 8005108:	2203      	movs	r2, #3
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e019      	b.n	8005142 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <RTC_ExitInitMode+0x84>)
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <RTC_ExitInitMode+0x84>)
 8005114:	2120      	movs	r1, #32
 8005116:	438a      	bics	r2, r1
 8005118:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	0018      	movs	r0, r3
 800511e:	f7ff ff6b 	bl	8004ff8 <HAL_RTC_WaitForSynchro>
 8005122:	1e03      	subs	r3, r0, #0
 8005124:	d007      	beq.n	8005136 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2229      	movs	r2, #41	; 0x29
 800512a:	2103      	movs	r1, #3
 800512c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800512e:	230f      	movs	r3, #15
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	2203      	movs	r2, #3
 8005134:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <RTC_ExitInitMode+0x84>)
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <RTC_ExitInitMode+0x84>)
 800513c:	2120      	movs	r1, #32
 800513e:	430a      	orrs	r2, r1
 8005140:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005142:	230f      	movs	r3, #15
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	781b      	ldrb	r3, [r3, #0]
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b005      	add	sp, #20
 800514e:	bd90      	pop	{r4, r7, pc}
 8005150:	40002800 	.word	0x40002800

08005154 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	0002      	movs	r2, r0
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005164:	230b      	movs	r3, #11
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	1dfa      	adds	r2, r7, #7
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800516e:	e008      	b.n	8005182 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005176:	220b      	movs	r2, #11
 8005178:	18bb      	adds	r3, r7, r2
 800517a:	18ba      	adds	r2, r7, r2
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	3a0a      	subs	r2, #10
 8005180:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005182:	210b      	movs	r1, #11
 8005184:	187b      	adds	r3, r7, r1
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b09      	cmp	r3, #9
 800518a:	d8f1      	bhi.n	8005170 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	b2da      	uxtb	r2, r3
 8005194:	187b      	adds	r3, r7, r1
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	b2db      	uxtb	r3, r3
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b004      	add	sp, #16
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	0002      	movs	r2, r0
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	001a      	movs	r2, r3
 80051ba:	0013      	movs	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	1dfb      	adds	r3, r7, #7
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	210f      	movs	r1, #15
 80051ce:	400b      	ands	r3, r1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	18d3      	adds	r3, r2, r3
 80051d4:	b2db      	uxtb	r3, r3
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b004      	add	sp, #16
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e04a      	b.n	8005286 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	223d      	movs	r2, #61	; 0x3d
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	223c      	movs	r2, #60	; 0x3c
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0018      	movs	r0, r3
 8005208:	f004 fd5a 	bl	8009cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	223d      	movs	r2, #61	; 0x3d
 8005210:	2102      	movs	r1, #2
 8005212:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	0019      	movs	r1, r3
 800521e:	0010      	movs	r0, r2
 8005220:	f000 fab0 	bl	8005784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2248      	movs	r2, #72	; 0x48
 8005228:	2101      	movs	r1, #1
 800522a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	223e      	movs	r2, #62	; 0x3e
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	223f      	movs	r2, #63	; 0x3f
 8005238:	2101      	movs	r1, #1
 800523a:	5499      	strb	r1, [r3, r2]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2240      	movs	r2, #64	; 0x40
 8005240:	2101      	movs	r1, #1
 8005242:	5499      	strb	r1, [r3, r2]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2241      	movs	r2, #65	; 0x41
 8005248:	2101      	movs	r1, #1
 800524a:	5499      	strb	r1, [r3, r2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2242      	movs	r2, #66	; 0x42
 8005250:	2101      	movs	r1, #1
 8005252:	5499      	strb	r1, [r3, r2]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2243      	movs	r2, #67	; 0x43
 8005258:	2101      	movs	r1, #1
 800525a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2244      	movs	r2, #68	; 0x44
 8005260:	2101      	movs	r1, #1
 8005262:	5499      	strb	r1, [r3, r2]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2245      	movs	r2, #69	; 0x45
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2246      	movs	r2, #70	; 0x46
 8005270:	2101      	movs	r1, #1
 8005272:	5499      	strb	r1, [r3, r2]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2247      	movs	r2, #71	; 0x47
 8005278:	2101      	movs	r1, #1
 800527a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	223d      	movs	r2, #61	; 0x3d
 8005280:	2101      	movs	r1, #1
 8005282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b002      	add	sp, #8
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	223d      	movs	r2, #61	; 0x3d
 800529c:	5c9b      	ldrb	r3, [r3, r2]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d001      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e042      	b.n	800532e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	223d      	movs	r2, #61	; 0x3d
 80052ac:	2102      	movs	r1, #2
 80052ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2101      	movs	r1, #1
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <HAL_TIM_Base_Start_IT+0xa8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00f      	beq.n	80052ea <HAL_TIM_Base_Start_IT+0x5a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	05db      	lsls	r3, r3, #23
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d009      	beq.n	80052ea <HAL_TIM_Base_Start_IT+0x5a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a18      	ldr	r2, [pc, #96]	; (800533c <HAL_TIM_Base_Start_IT+0xac>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIM_Base_Start_IT+0x5a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_TIM_Base_Start_IT+0xb0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d116      	bne.n	8005318 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <HAL_TIM_Base_Start_IT+0xb4>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d016      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x9a>
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	429a      	cmp	r2, r3
 8005304:	d011      	beq.n	800532a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005316:	e008      	b.n	800532a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2101      	movs	r1, #1
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e000      	b.n	800532c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	0018      	movs	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	b004      	add	sp, #16
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40000400 	.word	0x40000400
 8005340:	40014000 	.word	0x40014000
 8005344:	00010007 	.word	0x00010007

08005348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d124      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2202      	movs	r2, #2
 8005366:	4013      	ands	r3, r2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d11d      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2203      	movs	r2, #3
 8005372:	4252      	negs	r2, r2
 8005374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2203      	movs	r2, #3
 8005384:	4013      	ands	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	0018      	movs	r0, r3
 800538c:	f000 f9e2 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 8005390:	e007      	b.n	80053a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0018      	movs	r0, r3
 8005396:	f000 f9d5 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f000 f9e1 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2204      	movs	r2, #4
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d125      	bne.n	8005402 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2204      	movs	r2, #4
 80053be:	4013      	ands	r3, r2
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d11e      	bne.n	8005402 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2205      	movs	r2, #5
 80053ca:	4252      	negs	r2, r2
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	23c0      	movs	r3, #192	; 0xc0
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4013      	ands	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f9b5 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 80053ea:	e007      	b.n	80053fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 f9a8 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 f9b4 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2208      	movs	r2, #8
 800540a:	4013      	ands	r3, r2
 800540c:	2b08      	cmp	r3, #8
 800540e:	d124      	bne.n	800545a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2208      	movs	r2, #8
 8005418:	4013      	ands	r3, r2
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11d      	bne.n	800545a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2209      	movs	r2, #9
 8005424:	4252      	negs	r2, r2
 8005426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2204      	movs	r2, #4
 800542c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	2203      	movs	r2, #3
 8005436:	4013      	ands	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 f989 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 8005442:	e007      	b.n	8005454 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	0018      	movs	r0, r3
 8005448:	f000 f97c 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0018      	movs	r0, r3
 8005450:	f000 f988 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2210      	movs	r2, #16
 8005462:	4013      	ands	r3, r2
 8005464:	2b10      	cmp	r3, #16
 8005466:	d125      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2210      	movs	r2, #16
 8005470:	4013      	ands	r3, r2
 8005472:	2b10      	cmp	r3, #16
 8005474:	d11e      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2211      	movs	r2, #17
 800547c:	4252      	negs	r2, r2
 800547e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2208      	movs	r2, #8
 8005484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	23c0      	movs	r3, #192	; 0xc0
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4013      	ands	r3, r2
 8005492:	d004      	beq.n	800549e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 f95c 	bl	8005754 <HAL_TIM_IC_CaptureCallback>
 800549c:	e007      	b.n	80054ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 f94f 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 f95b 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2201      	movs	r2, #1
 80054bc:	4013      	ands	r3, r2
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10f      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2202      	movs	r2, #2
 80054d6:	4252      	negs	r2, r2
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	0018      	movs	r0, r3
 80054de:	f002 fb67 	bl	8007bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2280      	movs	r2, #128	; 0x80
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d10f      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2280      	movs	r2, #128	; 0x80
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b80      	cmp	r3, #128	; 0x80
 80054fc:	d108      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2281      	movs	r2, #129	; 0x81
 8005504:	4252      	negs	r2, r2
 8005506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 facc 	bl	8005aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	401a      	ands	r2, r3
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	d10e      	bne.n	8005542 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	4013      	ands	r3, r2
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d107      	bne.n	8005542 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <HAL_TIM_IRQHandler+0x260>)
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 fabb 	bl	8005ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2240      	movs	r2, #64	; 0x40
 800554a:	4013      	ands	r3, r2
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d10f      	bne.n	8005570 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	4013      	ands	r3, r2
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d108      	bne.n	8005570 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2241      	movs	r2, #65	; 0x41
 8005564:	4252      	negs	r2, r2
 8005566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f000 f902 	bl	8005774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2220      	movs	r2, #32
 8005578:	4013      	ands	r3, r2
 800557a:	2b20      	cmp	r3, #32
 800557c:	d10f      	bne.n	800559e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	4013      	ands	r3, r2
 8005588:	2b20      	cmp	r3, #32
 800558a:	d108      	bne.n	800559e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2221      	movs	r2, #33	; 0x21
 8005592:	4252      	negs	r2, r2
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f000 fa7d 	bl	8005a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	fffffeff 	.word	0xfffffeff

080055ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	223c      	movs	r2, #60	; 0x3c
 80055ba:	5c9b      	ldrb	r3, [r3, r2]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_TIM_ConfigClockSource+0x18>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e0b7      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x188>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	223c      	movs	r2, #60	; 0x3c
 80055c8:	2101      	movs	r1, #1
 80055ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	223d      	movs	r2, #61	; 0x3d
 80055d0:	2102      	movs	r1, #2
 80055d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a57      	ldr	r2, [pc, #348]	; (800573c <HAL_TIM_ConfigClockSource+0x190>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a56      	ldr	r2, [pc, #344]	; (8005740 <HAL_TIM_ConfigClockSource+0x194>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2280      	movs	r2, #128	; 0x80
 80055fa:	0192      	lsls	r2, r2, #6
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d040      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0xd6>
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	0192      	lsls	r2, r2, #6
 8005604:	4293      	cmp	r3, r2
 8005606:	d900      	bls.n	800560a <HAL_TIM_ConfigClockSource+0x5e>
 8005608:	e088      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 800560a:	2280      	movs	r2, #128	; 0x80
 800560c:	0152      	lsls	r2, r2, #5
 800560e:	4293      	cmp	r3, r2
 8005610:	d100      	bne.n	8005614 <HAL_TIM_ConfigClockSource+0x68>
 8005612:	e085      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
 8005614:	2280      	movs	r2, #128	; 0x80
 8005616:	0152      	lsls	r2, r2, #5
 8005618:	4293      	cmp	r3, r2
 800561a:	d900      	bls.n	800561e <HAL_TIM_ConfigClockSource+0x72>
 800561c:	e07e      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 800561e:	2b70      	cmp	r3, #112	; 0x70
 8005620:	d018      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0xa8>
 8005622:	d900      	bls.n	8005626 <HAL_TIM_ConfigClockSource+0x7a>
 8005624:	e07a      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 8005626:	2b60      	cmp	r3, #96	; 0x60
 8005628:	d04f      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x11e>
 800562a:	d900      	bls.n	800562e <HAL_TIM_ConfigClockSource+0x82>
 800562c:	e076      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 800562e:	2b50      	cmp	r3, #80	; 0x50
 8005630:	d03b      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xfe>
 8005632:	d900      	bls.n	8005636 <HAL_TIM_ConfigClockSource+0x8a>
 8005634:	e072      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d057      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x13e>
 800563a:	d900      	bls.n	800563e <HAL_TIM_ConfigClockSource+0x92>
 800563c:	e06e      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 800563e:	2b30      	cmp	r3, #48	; 0x30
 8005640:	d063      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15e>
 8005642:	d86b      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d060      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15e>
 8005648:	d868      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x170>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d05d      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15e>
 800564e:	2b10      	cmp	r3, #16
 8005650:	d05b      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005652:	e063      	b.n	800571c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6899      	ldr	r1, [r3, #8]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f000 f98a 	bl	800597c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2277      	movs	r2, #119	; 0x77
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	609a      	str	r2, [r3, #8]
      break;
 8005680:	e04f      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6899      	ldr	r1, [r3, #8]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f000 f973 	bl	800597c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	01c9      	lsls	r1, r1, #7
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
      break;
 80056a8:	e03b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	001a      	movs	r2, r3
 80056b8:	f000 f8e4 	bl	8005884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2150      	movs	r1, #80	; 0x50
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f93e 	bl	8005944 <TIM_ITRx_SetConfig>
      break;
 80056c8:	e02b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	001a      	movs	r2, r3
 80056d8:	f000 f902 	bl	80058e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2160      	movs	r1, #96	; 0x60
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 f92e 	bl	8005944 <TIM_ITRx_SetConfig>
      break;
 80056e8:	e01b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	001a      	movs	r2, r3
 80056f8:	f000 f8c4 	bl	8005884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2140      	movs	r1, #64	; 0x40
 8005702:	0018      	movs	r0, r3
 8005704:	f000 f91e 	bl	8005944 <TIM_ITRx_SetConfig>
      break;
 8005708:	e00b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	0019      	movs	r1, r3
 8005714:	0010      	movs	r0, r2
 8005716:	f000 f915 	bl	8005944 <TIM_ITRx_SetConfig>
        break;
 800571a:	e002      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	e000      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005720:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	223d      	movs	r2, #61	; 0x3d
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	223c      	movs	r2, #60	; 0x3c
 800572e:	2100      	movs	r1, #0
 8005730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b004      	add	sp, #16
 800573a:	bd80      	pop	{r7, pc}
 800573c:	ffceff88 	.word	0xffceff88
 8005740:	ffff00ff 	.word	0xffff00ff

08005744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b002      	add	sp, #8
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	b002      	add	sp, #8
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}

08005784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d008      	beq.n	80057ae <TIM_Base_SetConfig+0x2a>
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	05db      	lsls	r3, r3, #23
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d003      	beq.n	80057ae <TIM_Base_SetConfig+0x2a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a30      	ldr	r2, [pc, #192]	; (800586c <TIM_Base_SetConfig+0xe8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2270      	movs	r2, #112	; 0x70
 80057b2:	4393      	bics	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a29      	ldr	r2, [pc, #164]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d018      	beq.n	80057fa <TIM_Base_SetConfig+0x76>
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	05db      	lsls	r3, r3, #23
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d013      	beq.n	80057fa <TIM_Base_SetConfig+0x76>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a25      	ldr	r2, [pc, #148]	; (800586c <TIM_Base_SetConfig+0xe8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00f      	beq.n	80057fa <TIM_Base_SetConfig+0x76>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a24      	ldr	r2, [pc, #144]	; (8005870 <TIM_Base_SetConfig+0xec>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00b      	beq.n	80057fa <TIM_Base_SetConfig+0x76>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a23      	ldr	r2, [pc, #140]	; (8005874 <TIM_Base_SetConfig+0xf0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <TIM_Base_SetConfig+0x76>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a22      	ldr	r2, [pc, #136]	; (8005878 <TIM_Base_SetConfig+0xf4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_Base_SetConfig+0x76>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a21      	ldr	r2, [pc, #132]	; (800587c <TIM_Base_SetConfig+0xf8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d108      	bne.n	800580c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <TIM_Base_SetConfig+0xfc>)
 80057fe:	4013      	ands	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2280      	movs	r2, #128	; 0x80
 8005810:	4393      	bics	r3, r2
 8005812:	001a      	movs	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00b      	beq.n	8005852 <TIM_Base_SetConfig+0xce>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a0d      	ldr	r2, [pc, #52]	; (8005874 <TIM_Base_SetConfig+0xf0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_Base_SetConfig+0xce>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <TIM_Base_SetConfig+0xf4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_Base_SetConfig+0xce>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a0b      	ldr	r2, [pc, #44]	; (800587c <TIM_Base_SetConfig+0xf8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d103      	bne.n	800585a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	615a      	str	r2, [r3, #20]
}
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b004      	add	sp, #16
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40000400 	.word	0x40000400
 8005870:	40002000 	.word	0x40002000
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800
 8005880:	fffffcff 	.word	0xfffffcff

08005884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	2201      	movs	r2, #1
 800589c:	4393      	bics	r3, r2
 800589e:	001a      	movs	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	22f0      	movs	r2, #240	; 0xf0
 80058ae:	4393      	bics	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	220a      	movs	r2, #10
 80058c0:	4393      	bics	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	621a      	str	r2, [r3, #32]
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	b006      	add	sp, #24
 80058de:	bd80      	pop	{r7, pc}

080058e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	2210      	movs	r2, #16
 80058f2:	4393      	bics	r3, r2
 80058f4:	001a      	movs	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <TIM_TI2_ConfigInputStage+0x60>)
 800590a:	4013      	ands	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	22a0      	movs	r2, #160	; 0xa0
 800591c:	4393      	bics	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	46bd      	mov	sp, r7
 800593a:	b006      	add	sp, #24
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	ffff0fff 	.word	0xffff0fff

08005944 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <TIM_ITRx_SetConfig+0x34>)
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	2207      	movs	r2, #7
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	609a      	str	r2, [r3, #8]
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b004      	add	sp, #16
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	ffcfff8f 	.word	0xffcfff8f

0800597c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <TIM_ETR_SetConfig+0x3c>)
 8005994:	4013      	ands	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b006      	add	sp, #24
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	ffff00ff 	.word	0xffff00ff

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	223c      	movs	r2, #60	; 0x3c
 80059ca:	5c9b      	ldrb	r3, [r3, r2]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e055      	b.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	223c      	movs	r2, #60	; 0x3c
 80059d8:	2101      	movs	r1, #1
 80059da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223d      	movs	r2, #61	; 0x3d
 80059e0:	2102      	movs	r1, #2
 80059e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a23      	ldr	r2, [pc, #140]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2270      	movs	r2, #112	; 0x70
 8005a14:	4393      	bics	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00f      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	05db      	lsls	r3, r3, #23
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10c      	bne.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2280      	movs	r2, #128	; 0x80
 8005a58:	4393      	bics	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	223d      	movs	r2, #61	; 0x3d
 8005a72:	2101      	movs	r1, #1
 8005a74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	223c      	movs	r2, #60	; 0x3c
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b004      	add	sp, #16
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	ff0fffff 	.word	0xff0fffff
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40014000 	.word	0x40014000

08005a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa0:	46c0      	nop			; (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b002      	add	sp, #8
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e046      	b.n	8005b68 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2284      	movs	r2, #132	; 0x84
 8005ade:	589b      	ldr	r3, [r3, r2]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	2100      	movs	r1, #0
 8005aea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f004 f948 	bl	8009d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2284      	movs	r2, #132	; 0x84
 8005af8:	2124      	movs	r1, #36	; 0x24
 8005afa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	438a      	bics	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f000 f830 	bl	8005b74 <UART_SetConfig>
 8005b14:	0003      	movs	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e024      	b.n	8005b68 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 fb01 	bl	8006130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	490d      	ldr	r1, [pc, #52]	; (8005b70 <HAL_UART_Init+0xa8>)
 8005b3a:	400a      	ands	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	212a      	movs	r1, #42	; 0x2a
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2101      	movs	r1, #1
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 fb99 	bl	8006298 <UART_CheckIdleState>
 8005b66:	0003      	movs	r3, r0
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	ffffb7ff 	.word	0xffffb7ff

08005b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b74:	b5b0      	push	{r4, r5, r7, lr}
 8005b76:	b090      	sub	sp, #64	; 0x40
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b7c:	231a      	movs	r3, #26
 8005b7e:	2220      	movs	r2, #32
 8005b80:	4694      	mov	ip, r2
 8005b82:	44bc      	add	ip, r7
 8005b84:	4463      	add	r3, ip
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4ab9      	ldr	r2, [pc, #740]	; (8005e90 <UART_SetConfig+0x31c>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4ab5      	ldr	r2, [pc, #724]	; (8005e94 <UART_SetConfig+0x320>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	68d9      	ldr	r1, [r3, #12]
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	0003      	movs	r3, r0
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4aae      	ldr	r2, [pc, #696]	; (8005e98 <UART_SetConfig+0x324>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005be8:	4313      	orrs	r3, r2
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	4aaa      	ldr	r2, [pc, #680]	; (8005e9c <UART_SetConfig+0x328>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	0019      	movs	r1, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	220f      	movs	r2, #15
 8005c0a:	4393      	bics	r3, r2
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	0003      	movs	r3, r0
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a9f      	ldr	r2, [pc, #636]	; (8005ea0 <UART_SetConfig+0x32c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d136      	bne.n	8005c94 <UART_SetConfig+0x120>
 8005c26:	4b9f      	ldr	r3, [pc, #636]	; (8005ea4 <UART_SetConfig+0x330>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d020      	beq.n	8005c74 <UART_SetConfig+0x100>
 8005c32:	d827      	bhi.n	8005c84 <UART_SetConfig+0x110>
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d00d      	beq.n	8005c54 <UART_SetConfig+0xe0>
 8005c38:	d824      	bhi.n	8005c84 <UART_SetConfig+0x110>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <UART_SetConfig+0xd0>
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d010      	beq.n	8005c64 <UART_SetConfig+0xf0>
 8005c42:	e01f      	b.n	8005c84 <UART_SetConfig+0x110>
 8005c44:	231b      	movs	r3, #27
 8005c46:	2220      	movs	r2, #32
 8005c48:	4694      	mov	ip, r2
 8005c4a:	44bc      	add	ip, r7
 8005c4c:	4463      	add	r3, ip
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e0c5      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005c54:	231b      	movs	r3, #27
 8005c56:	2220      	movs	r2, #32
 8005c58:	4694      	mov	ip, r2
 8005c5a:	44bc      	add	ip, r7
 8005c5c:	4463      	add	r3, ip
 8005c5e:	2202      	movs	r2, #2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e0bd      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005c64:	231b      	movs	r3, #27
 8005c66:	2220      	movs	r2, #32
 8005c68:	4694      	mov	ip, r2
 8005c6a:	44bc      	add	ip, r7
 8005c6c:	4463      	add	r3, ip
 8005c6e:	2204      	movs	r2, #4
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	e0b5      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005c74:	231b      	movs	r3, #27
 8005c76:	2220      	movs	r2, #32
 8005c78:	4694      	mov	ip, r2
 8005c7a:	44bc      	add	ip, r7
 8005c7c:	4463      	add	r3, ip
 8005c7e:	2208      	movs	r2, #8
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e0ad      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005c84:	231b      	movs	r3, #27
 8005c86:	2220      	movs	r2, #32
 8005c88:	4694      	mov	ip, r2
 8005c8a:	44bc      	add	ip, r7
 8005c8c:	4463      	add	r3, ip
 8005c8e:	2210      	movs	r2, #16
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e0a5      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a83      	ldr	r2, [pc, #524]	; (8005ea8 <UART_SetConfig+0x334>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d136      	bne.n	8005d0c <UART_SetConfig+0x198>
 8005c9e:	4b81      	ldr	r3, [pc, #516]	; (8005ea4 <UART_SetConfig+0x330>)
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	220c      	movs	r2, #12
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d020      	beq.n	8005cec <UART_SetConfig+0x178>
 8005caa:	d827      	bhi.n	8005cfc <UART_SetConfig+0x188>
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d00d      	beq.n	8005ccc <UART_SetConfig+0x158>
 8005cb0:	d824      	bhi.n	8005cfc <UART_SetConfig+0x188>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <UART_SetConfig+0x148>
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d010      	beq.n	8005cdc <UART_SetConfig+0x168>
 8005cba:	e01f      	b.n	8005cfc <UART_SetConfig+0x188>
 8005cbc:	231b      	movs	r3, #27
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	4694      	mov	ip, r2
 8005cc2:	44bc      	add	ip, r7
 8005cc4:	4463      	add	r3, ip
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e089      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005ccc:	231b      	movs	r3, #27
 8005cce:	2220      	movs	r2, #32
 8005cd0:	4694      	mov	ip, r2
 8005cd2:	44bc      	add	ip, r7
 8005cd4:	4463      	add	r3, ip
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e081      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005cdc:	231b      	movs	r3, #27
 8005cde:	2220      	movs	r2, #32
 8005ce0:	4694      	mov	ip, r2
 8005ce2:	44bc      	add	ip, r7
 8005ce4:	4463      	add	r3, ip
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e079      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005cec:	231b      	movs	r3, #27
 8005cee:	2220      	movs	r2, #32
 8005cf0:	4694      	mov	ip, r2
 8005cf2:	44bc      	add	ip, r7
 8005cf4:	4463      	add	r3, ip
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	e071      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005cfc:	231b      	movs	r3, #27
 8005cfe:	2220      	movs	r2, #32
 8005d00:	4694      	mov	ip, r2
 8005d02:	44bc      	add	ip, r7
 8005d04:	4463      	add	r3, ip
 8005d06:	2210      	movs	r2, #16
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	e069      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a66      	ldr	r2, [pc, #408]	; (8005eac <UART_SetConfig+0x338>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d107      	bne.n	8005d26 <UART_SetConfig+0x1b2>
 8005d16:	231b      	movs	r3, #27
 8005d18:	2220      	movs	r2, #32
 8005d1a:	4694      	mov	ip, r2
 8005d1c:	44bc      	add	ip, r7
 8005d1e:	4463      	add	r3, ip
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e05c      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a61      	ldr	r2, [pc, #388]	; (8005eb0 <UART_SetConfig+0x33c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d107      	bne.n	8005d40 <UART_SetConfig+0x1cc>
 8005d30:	231b      	movs	r3, #27
 8005d32:	2220      	movs	r2, #32
 8005d34:	4694      	mov	ip, r2
 8005d36:	44bc      	add	ip, r7
 8005d38:	4463      	add	r3, ip
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e04f      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a54      	ldr	r2, [pc, #336]	; (8005e98 <UART_SetConfig+0x324>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d143      	bne.n	8005dd2 <UART_SetConfig+0x25e>
 8005d4a:	4b56      	ldr	r3, [pc, #344]	; (8005ea4 <UART_SetConfig+0x330>)
 8005d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4e:	23c0      	movs	r3, #192	; 0xc0
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	4013      	ands	r3, r2
 8005d54:	22c0      	movs	r2, #192	; 0xc0
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d02a      	beq.n	8005db2 <UART_SetConfig+0x23e>
 8005d5c:	22c0      	movs	r2, #192	; 0xc0
 8005d5e:	0112      	lsls	r2, r2, #4
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d82e      	bhi.n	8005dc2 <UART_SetConfig+0x24e>
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d012      	beq.n	8005d92 <UART_SetConfig+0x21e>
 8005d6c:	2280      	movs	r2, #128	; 0x80
 8005d6e:	0112      	lsls	r2, r2, #4
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d826      	bhi.n	8005dc2 <UART_SetConfig+0x24e>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <UART_SetConfig+0x20e>
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	00d2      	lsls	r2, r2, #3
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d010      	beq.n	8005da2 <UART_SetConfig+0x22e>
 8005d80:	e01f      	b.n	8005dc2 <UART_SetConfig+0x24e>
 8005d82:	231b      	movs	r3, #27
 8005d84:	2220      	movs	r2, #32
 8005d86:	4694      	mov	ip, r2
 8005d88:	44bc      	add	ip, r7
 8005d8a:	4463      	add	r3, ip
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e026      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005d92:	231b      	movs	r3, #27
 8005d94:	2220      	movs	r2, #32
 8005d96:	4694      	mov	ip, r2
 8005d98:	44bc      	add	ip, r7
 8005d9a:	4463      	add	r3, ip
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e01e      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005da2:	231b      	movs	r3, #27
 8005da4:	2220      	movs	r2, #32
 8005da6:	4694      	mov	ip, r2
 8005da8:	44bc      	add	ip, r7
 8005daa:	4463      	add	r3, ip
 8005dac:	2204      	movs	r2, #4
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e016      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005db2:	231b      	movs	r3, #27
 8005db4:	2220      	movs	r2, #32
 8005db6:	4694      	mov	ip, r2
 8005db8:	44bc      	add	ip, r7
 8005dba:	4463      	add	r3, ip
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e00e      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005dc2:	231b      	movs	r3, #27
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	4694      	mov	ip, r2
 8005dc8:	44bc      	add	ip, r7
 8005dca:	4463      	add	r3, ip
 8005dcc:	2210      	movs	r2, #16
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e006      	b.n	8005de0 <UART_SetConfig+0x26c>
 8005dd2:	231b      	movs	r3, #27
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	4694      	mov	ip, r2
 8005dd8:	44bc      	add	ip, r7
 8005dda:	4463      	add	r3, ip
 8005ddc:	2210      	movs	r2, #16
 8005dde:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2c      	ldr	r2, [pc, #176]	; (8005e98 <UART_SetConfig+0x324>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d000      	beq.n	8005dec <UART_SetConfig+0x278>
 8005dea:	e0ad      	b.n	8005f48 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dec:	231b      	movs	r3, #27
 8005dee:	2220      	movs	r2, #32
 8005df0:	4694      	mov	ip, r2
 8005df2:	44bc      	add	ip, r7
 8005df4:	4463      	add	r3, ip
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d015      	beq.n	8005e28 <UART_SetConfig+0x2b4>
 8005dfc:	dc18      	bgt.n	8005e30 <UART_SetConfig+0x2bc>
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d00d      	beq.n	8005e1e <UART_SetConfig+0x2aa>
 8005e02:	dc15      	bgt.n	8005e30 <UART_SetConfig+0x2bc>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <UART_SetConfig+0x29a>
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d005      	beq.n	8005e18 <UART_SetConfig+0x2a4>
 8005e0c:	e010      	b.n	8005e30 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fe fcab 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8005e12:	0003      	movs	r3, r0
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e16:	e015      	b.n	8005e44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e18:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <UART_SetConfig+0x340>)
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e1c:	e012      	b.n	8005e44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fe fc17 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8005e22:	0003      	movs	r3, r0
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e26:	e00d      	b.n	8005e44 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e28:	2380      	movs	r3, #128	; 0x80
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e2e:	e009      	b.n	8005e44 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005e34:	231a      	movs	r3, #26
 8005e36:	2220      	movs	r2, #32
 8005e38:	4694      	mov	ip, r2
 8005e3a:	44bc      	add	ip, r7
 8005e3c:	4463      	add	r3, ip
 8005e3e:	2201      	movs	r2, #1
 8005e40:	701a      	strb	r2, [r3, #0]
        break;
 8005e42:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d100      	bne.n	8005e4c <UART_SetConfig+0x2d8>
 8005e4a:	e154      	b.n	80060f6 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e50:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <UART_SetConfig+0x344>)
 8005e52:	0052      	lsls	r2, r2, #1
 8005e54:	5ad3      	ldrh	r3, [r2, r3]
 8005e56:	0019      	movs	r1, r3
 8005e58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e5a:	f7fa f953 	bl	8000104 <__udivsi3>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	0013      	movs	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d305      	bcc.n	8005e7e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d91e      	bls.n	8005ebc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005e7e:	231a      	movs	r3, #26
 8005e80:	2220      	movs	r2, #32
 8005e82:	4694      	mov	ip, r2
 8005e84:	44bc      	add	ip, r7
 8005e86:	4463      	add	r3, ip
 8005e88:	2201      	movs	r2, #1
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	e133      	b.n	80060f6 <UART_SetConfig+0x582>
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	cfff69f3 	.word	0xcfff69f3
 8005e94:	ffffcfff 	.word	0xffffcfff
 8005e98:	40008000 	.word	0x40008000
 8005e9c:	11fff4ff 	.word	0x11fff4ff
 8005ea0:	40013800 	.word	0x40013800
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40004400 	.word	0x40004400
 8005eac:	40004800 	.word	0x40004800
 8005eb0:	40004c00 	.word	0x40004c00
 8005eb4:	00f42400 	.word	0x00f42400
 8005eb8:	0800a198 	.word	0x0800a198
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec8:	4b97      	ldr	r3, [pc, #604]	; (8006128 <UART_SetConfig+0x5b4>)
 8005eca:	0052      	lsls	r2, r2, #1
 8005ecc:	5ad3      	ldrh	r3, [r2, r3]
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	69b8      	ldr	r0, [r7, #24]
 8005eda:	69f9      	ldr	r1, [r7, #28]
 8005edc:	f7fa fa88 	bl	80003f0 <__aeabi_uldivmod>
 8005ee0:	0002      	movs	r2, r0
 8005ee2:	000b      	movs	r3, r1
 8005ee4:	0e11      	lsrs	r1, r2, #24
 8005ee6:	021d      	lsls	r5, r3, #8
 8005ee8:	430d      	orrs	r5, r1
 8005eea:	0214      	lsls	r4, r2, #8
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68b8      	ldr	r0, [r7, #8]
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	1900      	adds	r0, r0, r4
 8005efe:	4169      	adcs	r1, r5
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f7fa fa6f 	bl	80003f0 <__aeabi_uldivmod>
 8005f12:	0002      	movs	r2, r0
 8005f14:	000b      	movs	r3, r1
 8005f16:	0013      	movs	r3, r2
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	23c0      	movs	r3, #192	; 0xc0
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d309      	bcc.n	8005f38 <UART_SetConfig+0x3c4>
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	035b      	lsls	r3, r3, #13
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d204      	bcs.n	8005f38 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	e0de      	b.n	80060f6 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8005f38:	231a      	movs	r3, #26
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	4694      	mov	ip, r2
 8005f3e:	44bc      	add	ip, r7
 8005f40:	4463      	add	r3, ip
 8005f42:	2201      	movs	r2, #1
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e0d6      	b.n	80060f6 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d000      	beq.n	8005f56 <UART_SetConfig+0x3e2>
 8005f54:	e074      	b.n	8006040 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8005f56:	231b      	movs	r3, #27
 8005f58:	2220      	movs	r2, #32
 8005f5a:	4694      	mov	ip, r2
 8005f5c:	44bc      	add	ip, r7
 8005f5e:	4463      	add	r3, ip
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d015      	beq.n	8005f92 <UART_SetConfig+0x41e>
 8005f66:	dc18      	bgt.n	8005f9a <UART_SetConfig+0x426>
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d00d      	beq.n	8005f88 <UART_SetConfig+0x414>
 8005f6c:	dc15      	bgt.n	8005f9a <UART_SetConfig+0x426>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <UART_SetConfig+0x404>
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d005      	beq.n	8005f82 <UART_SetConfig+0x40e>
 8005f76:	e010      	b.n	8005f9a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fe fbf6 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f80:	e015      	b.n	8005fae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f82:	4b6a      	ldr	r3, [pc, #424]	; (800612c <UART_SetConfig+0x5b8>)
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f86:	e012      	b.n	8005fae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f88:	f7fe fb62 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005f9e:	231a      	movs	r3, #26
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	4694      	mov	ip, r2
 8005fa4:	44bc      	add	ip, r7
 8005fa6:	4463      	add	r3, ip
 8005fa8:	2201      	movs	r2, #1
 8005faa:	701a      	strb	r2, [r3, #0]
        break;
 8005fac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d100      	bne.n	8005fb6 <UART_SetConfig+0x442>
 8005fb4:	e09f      	b.n	80060f6 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fba:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <UART_SetConfig+0x5b4>)
 8005fbc:	0052      	lsls	r2, r2, #1
 8005fbe:	5ad3      	ldrh	r3, [r2, r3]
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005fc4:	f7fa f89e 	bl	8000104 <__udivsi3>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	005a      	lsls	r2, r3, #1
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	18d2      	adds	r2, r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	0019      	movs	r1, r3
 8005fda:	0010      	movs	r0, r2
 8005fdc:	f7fa f892 	bl	8000104 <__udivsi3>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2b0f      	cmp	r3, #15
 8005fea:	d921      	bls.n	8006030 <UART_SetConfig+0x4bc>
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	025b      	lsls	r3, r3, #9
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d21c      	bcs.n	8006030 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	200e      	movs	r0, #14
 8005ffc:	2420      	movs	r4, #32
 8005ffe:	193b      	adds	r3, r7, r4
 8006000:	181b      	adds	r3, r3, r0
 8006002:	210f      	movs	r1, #15
 8006004:	438a      	bics	r2, r1
 8006006:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	b29b      	uxth	r3, r3
 800600e:	2207      	movs	r2, #7
 8006010:	4013      	ands	r3, r2
 8006012:	b299      	uxth	r1, r3
 8006014:	193b      	adds	r3, r7, r4
 8006016:	181b      	adds	r3, r3, r0
 8006018:	193a      	adds	r2, r7, r4
 800601a:	1812      	adds	r2, r2, r0
 800601c:	8812      	ldrh	r2, [r2, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	193a      	adds	r2, r7, r4
 8006028:	1812      	adds	r2, r2, r0
 800602a:	8812      	ldrh	r2, [r2, #0]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e062      	b.n	80060f6 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8006030:	231a      	movs	r3, #26
 8006032:	2220      	movs	r2, #32
 8006034:	4694      	mov	ip, r2
 8006036:	44bc      	add	ip, r7
 8006038:	4463      	add	r3, ip
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e05a      	b.n	80060f6 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006040:	231b      	movs	r3, #27
 8006042:	2220      	movs	r2, #32
 8006044:	4694      	mov	ip, r2
 8006046:	44bc      	add	ip, r7
 8006048:	4463      	add	r3, ip
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b08      	cmp	r3, #8
 800604e:	d015      	beq.n	800607c <UART_SetConfig+0x508>
 8006050:	dc18      	bgt.n	8006084 <UART_SetConfig+0x510>
 8006052:	2b04      	cmp	r3, #4
 8006054:	d00d      	beq.n	8006072 <UART_SetConfig+0x4fe>
 8006056:	dc15      	bgt.n	8006084 <UART_SetConfig+0x510>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <UART_SetConfig+0x4ee>
 800605c:	2b02      	cmp	r3, #2
 800605e:	d005      	beq.n	800606c <UART_SetConfig+0x4f8>
 8006060:	e010      	b.n	8006084 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006062:	f7fe fb81 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8006066:	0003      	movs	r3, r0
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800606a:	e015      	b.n	8006098 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800606c:	4b2f      	ldr	r3, [pc, #188]	; (800612c <UART_SetConfig+0x5b8>)
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006070:	e012      	b.n	8006098 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006072:	f7fe faed 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006076:	0003      	movs	r3, r0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800607a:	e00d      	b.n	8006098 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006082:	e009      	b.n	8006098 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006088:	231a      	movs	r3, #26
 800608a:	2220      	movs	r2, #32
 800608c:	4694      	mov	ip, r2
 800608e:	44bc      	add	ip, r7
 8006090:	4463      	add	r3, ip
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
        break;
 8006096:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	d02b      	beq.n	80060f6 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a2:	4b21      	ldr	r3, [pc, #132]	; (8006128 <UART_SetConfig+0x5b4>)
 80060a4:	0052      	lsls	r2, r2, #1
 80060a6:	5ad3      	ldrh	r3, [r2, r3]
 80060a8:	0019      	movs	r1, r3
 80060aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80060ac:	f7fa f82a 	bl	8000104 <__udivsi3>
 80060b0:	0003      	movs	r3, r0
 80060b2:	001a      	movs	r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	18d2      	adds	r2, r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	0019      	movs	r1, r3
 80060c2:	0010      	movs	r0, r2
 80060c4:	f7fa f81e 	bl	8000104 <__udivsi3>
 80060c8:	0003      	movs	r3, r0
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2b0f      	cmp	r3, #15
 80060d2:	d909      	bls.n	80060e8 <UART_SetConfig+0x574>
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	025b      	lsls	r3, r3, #9
 80060da:	429a      	cmp	r2, r3
 80060dc:	d204      	bcs.n	80060e8 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	e006      	b.n	80060f6 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80060e8:	231a      	movs	r3, #26
 80060ea:	2220      	movs	r2, #32
 80060ec:	4694      	mov	ip, r2
 80060ee:	44bc      	add	ip, r7
 80060f0:	4463      	add	r3, ip
 80060f2:	2201      	movs	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	226a      	movs	r2, #106	; 0x6a
 80060fa:	2101      	movs	r1, #1
 80060fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	2268      	movs	r2, #104	; 0x68
 8006102:	2101      	movs	r1, #1
 8006104:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	2200      	movs	r2, #0
 800610a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	2200      	movs	r2, #0
 8006110:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006112:	231a      	movs	r3, #26
 8006114:	2220      	movs	r2, #32
 8006116:	4694      	mov	ip, r2
 8006118:	44bc      	add	ip, r7
 800611a:	4463      	add	r3, ip
 800611c:	781b      	ldrb	r3, [r3, #0]
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b010      	add	sp, #64	; 0x40
 8006124:	bdb0      	pop	{r4, r5, r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	0800a198 	.word	0x0800a198
 800612c:	00f42400 	.word	0x00f42400

08006130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	2201      	movs	r2, #1
 800613e:	4013      	ands	r3, r2
 8006140:	d00b      	beq.n	800615a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a4a      	ldr	r2, [pc, #296]	; (8006274 <UART_AdvFeatureConfig+0x144>)
 800614a:	4013      	ands	r3, r2
 800614c:	0019      	movs	r1, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	2202      	movs	r2, #2
 8006160:	4013      	ands	r3, r2
 8006162:	d00b      	beq.n	800617c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4a43      	ldr	r2, [pc, #268]	; (8006278 <UART_AdvFeatureConfig+0x148>)
 800616c:	4013      	ands	r3, r2
 800616e:	0019      	movs	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	2204      	movs	r2, #4
 8006182:	4013      	ands	r3, r2
 8006184:	d00b      	beq.n	800619e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a3b      	ldr	r2, [pc, #236]	; (800627c <UART_AdvFeatureConfig+0x14c>)
 800618e:	4013      	ands	r3, r2
 8006190:	0019      	movs	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	2208      	movs	r2, #8
 80061a4:	4013      	ands	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4a34      	ldr	r2, [pc, #208]	; (8006280 <UART_AdvFeatureConfig+0x150>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	0019      	movs	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	2210      	movs	r2, #16
 80061c6:	4013      	ands	r3, r2
 80061c8:	d00b      	beq.n	80061e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <UART_AdvFeatureConfig+0x154>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	0019      	movs	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	2220      	movs	r2, #32
 80061e8:	4013      	ands	r3, r2
 80061ea:	d00b      	beq.n	8006204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4a25      	ldr	r2, [pc, #148]	; (8006288 <UART_AdvFeatureConfig+0x158>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	0019      	movs	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	2240      	movs	r2, #64	; 0x40
 800620a:	4013      	ands	r3, r2
 800620c:	d01d      	beq.n	800624a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a1d      	ldr	r2, [pc, #116]	; (800628c <UART_AdvFeatureConfig+0x15c>)
 8006216:	4013      	ands	r3, r2
 8006218:	0019      	movs	r1, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	035b      	lsls	r3, r3, #13
 800622e:	429a      	cmp	r2, r3
 8006230:	d10b      	bne.n	800624a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a15      	ldr	r2, [pc, #84]	; (8006290 <UART_AdvFeatureConfig+0x160>)
 800623a:	4013      	ands	r3, r2
 800623c:	0019      	movs	r1, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	2280      	movs	r2, #128	; 0x80
 8006250:	4013      	ands	r3, r2
 8006252:	d00b      	beq.n	800626c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <UART_AdvFeatureConfig+0x164>)
 800625c:	4013      	ands	r3, r2
 800625e:	0019      	movs	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }
}
 800626c:	46c0      	nop			; (mov r8, r8)
 800626e:	46bd      	mov	sp, r7
 8006270:	b002      	add	sp, #8
 8006272:	bd80      	pop	{r7, pc}
 8006274:	fffdffff 	.word	0xfffdffff
 8006278:	fffeffff 	.word	0xfffeffff
 800627c:	fffbffff 	.word	0xfffbffff
 8006280:	ffff7fff 	.word	0xffff7fff
 8006284:	ffffefff 	.word	0xffffefff
 8006288:	ffffdfff 	.word	0xffffdfff
 800628c:	ffefffff 	.word	0xffefffff
 8006290:	ff9fffff 	.word	0xff9fffff
 8006294:	fff7ffff 	.word	0xfff7ffff

08006298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	228c      	movs	r2, #140	; 0x8c
 80062a4:	2100      	movs	r1, #0
 80062a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a8:	f7fc f992 	bl	80025d0 <HAL_GetTick>
 80062ac:	0003      	movs	r3, r0
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2208      	movs	r2, #8
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d10c      	bne.n	80062d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2280      	movs	r2, #128	; 0x80
 80062c2:	0391      	lsls	r1, r2, #14
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4a18      	ldr	r2, [pc, #96]	; (8006328 <UART_CheckIdleState+0x90>)
 80062c8:	9200      	str	r2, [sp, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f000 f82e 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 80062d0:	1e03      	subs	r3, r0, #0
 80062d2:	d001      	beq.n	80062d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e023      	b.n	8006320 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2204      	movs	r2, #4
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d10c      	bne.n	8006300 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2280      	movs	r2, #128	; 0x80
 80062ea:	03d1      	lsls	r1, r2, #15
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4a0e      	ldr	r2, [pc, #56]	; (8006328 <UART_CheckIdleState+0x90>)
 80062f0:	9200      	str	r2, [sp, #0]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f000 f81a 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 80062f8:	1e03      	subs	r3, r0, #0
 80062fa:	d001      	beq.n	8006300 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e00f      	b.n	8006320 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2284      	movs	r2, #132	; 0x84
 8006304:	2120      	movs	r1, #32
 8006306:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2288      	movs	r2, #136	; 0x88
 800630c:	2120      	movs	r1, #32
 800630e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	2100      	movs	r1, #0
 800631c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	0018      	movs	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	b004      	add	sp, #16
 8006326:	bd80      	pop	{r7, pc}
 8006328:	01ffffff 	.word	0x01ffffff

0800632c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b094      	sub	sp, #80	; 0x50
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	1dfb      	adds	r3, r7, #7
 800633a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633c:	e0a7      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006340:	3301      	adds	r3, #1
 8006342:	d100      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006344:	e0a3      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006346:	f7fc f943 	bl	80025d0 <HAL_GetTick>
 800634a:	0002      	movs	r2, r0
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <UART_WaitOnFlagUntilTimeout+0x30>
 8006356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006358:	2b00      	cmp	r3, #0
 800635a:	d13f      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635c:	f3ef 8310 	mrs	r3, PRIMASK
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
 8006366:	2301      	movs	r3, #1
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	494e      	ldr	r1, [pc, #312]	; (80064b8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800637e:	400a      	ands	r2, r1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f383 8810 	msr	PRIMASK, r3
}
 800638c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638e:	f3ef 8310 	mrs	r3, PRIMASK
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	643b      	str	r3, [r7, #64]	; 0x40
 8006398:	2301      	movs	r3, #1
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	f383 8810 	msr	PRIMASK, r3
}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2101      	movs	r1, #1
 80063b0:	438a      	bics	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	f383 8810 	msr	PRIMASK, r3
}
 80063be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2284      	movs	r2, #132	; 0x84
 80063c4:	2120      	movs	r1, #32
 80063c6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2288      	movs	r2, #136	; 0x88
 80063cc:	2120      	movs	r1, #32
 80063ce:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2280      	movs	r2, #128	; 0x80
 80063d4:	2100      	movs	r1, #0
 80063d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e069      	b.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2204      	movs	r2, #4
 80063e4:	4013      	ands	r3, r2
 80063e6:	d052      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	401a      	ands	r2, r3
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d148      	bne.n	800648e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	0112      	lsls	r2, r2, #4
 8006404:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	613b      	str	r3, [r7, #16]
  return(result);
 800640c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800640e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4924      	ldr	r1, [pc, #144]	; (80064b8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006428:	400a      	ands	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f383 8810 	msr	PRIMASK, r3
}
 8006436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006438:	f3ef 8310 	mrs	r3, PRIMASK
 800643c:	61fb      	str	r3, [r7, #28]
  return(result);
 800643e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
 8006442:	2301      	movs	r3, #1
 8006444:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f383 8810 	msr	PRIMASK, r3
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2101      	movs	r1, #1
 800645a:	438a      	bics	r2, r1
 800645c:	609a      	str	r2, [r3, #8]
 800645e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	f383 8810 	msr	PRIMASK, r3
}
 8006468:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2284      	movs	r2, #132	; 0x84
 800646e:	2120      	movs	r1, #32
 8006470:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2288      	movs	r2, #136	; 0x88
 8006476:	2120      	movs	r1, #32
 8006478:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	228c      	movs	r2, #140	; 0x8c
 800647e:	2120      	movs	r1, #32
 8006480:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2280      	movs	r2, #128	; 0x80
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e010      	b.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	425a      	negs	r2, r3
 800649e:	4153      	adcs	r3, r2
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	001a      	movs	r2, r3
 80064a4:	1dfb      	adds	r3, r7, #7
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d100      	bne.n	80064ae <UART_WaitOnFlagUntilTimeout+0x182>
 80064ac:	e747      	b.n	800633e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b014      	add	sp, #80	; 0x50
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	fffffe5f 	.word	0xfffffe5f

080064bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2280      	movs	r2, #128	; 0x80
 80064c8:	5c9b      	ldrb	r3, [r3, r2]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e027      	b.n	8006522 <HAL_UARTEx_DisableFifoMode+0x66>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	2101      	movs	r1, #1
 80064d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2284      	movs	r2, #132	; 0x84
 80064de:	2124      	movs	r1, #36	; 0x24
 80064e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2101      	movs	r1, #1
 80064f6:	438a      	bics	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a0b      	ldr	r2, [pc, #44]	; (800652c <HAL_UARTEx_DisableFifoMode+0x70>)
 80064fe:	4013      	ands	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2284      	movs	r2, #132	; 0x84
 8006514:	2120      	movs	r1, #32
 8006516:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2280      	movs	r2, #128	; 0x80
 800651c:	2100      	movs	r1, #0
 800651e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	0018      	movs	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	b004      	add	sp, #16
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	dfffffff 	.word	0xdfffffff

08006530 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2280      	movs	r2, #128	; 0x80
 800653e:	5c9b      	ldrb	r3, [r3, r2]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006544:	2302      	movs	r3, #2
 8006546:	e02e      	b.n	80065a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	2101      	movs	r1, #1
 800654e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2284      	movs	r2, #132	; 0x84
 8006554:	2124      	movs	r1, #36	; 0x24
 8006556:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	08d9      	lsrs	r1, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	0018      	movs	r0, r3
 8006588:	f000 f854 	bl	8006634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2284      	movs	r2, #132	; 0x84
 8006598:	2120      	movs	r1, #32
 800659a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2280      	movs	r2, #128	; 0x80
 80065a0:	2100      	movs	r1, #0
 80065a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b004      	add	sp, #16
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2280      	movs	r2, #128	; 0x80
 80065be:	5c9b      	ldrb	r3, [r3, r2]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e02f      	b.n	8006628 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2280      	movs	r2, #128	; 0x80
 80065cc:	2101      	movs	r1, #1
 80065ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2284      	movs	r2, #132	; 0x84
 80065d4:	2124      	movs	r1, #36	; 0x24
 80065d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2101      	movs	r1, #1
 80065ec:	438a      	bics	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	0019      	movs	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 f813 	bl	8006634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2284      	movs	r2, #132	; 0x84
 800661a:	2120      	movs	r1, #32
 800661c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	0018      	movs	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	b004      	add	sp, #16
 800662e:	bd80      	pop	{r7, pc}
 8006630:	f1ffffff 	.word	0xf1ffffff

08006634 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	226a      	movs	r2, #106	; 0x6a
 8006648:	2101      	movs	r1, #1
 800664a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2268      	movs	r2, #104	; 0x68
 8006650:	2101      	movs	r1, #1
 8006652:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006654:	e043      	b.n	80066de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006656:	260f      	movs	r6, #15
 8006658:	19bb      	adds	r3, r7, r6
 800665a:	2208      	movs	r2, #8
 800665c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800665e:	200e      	movs	r0, #14
 8006660:	183b      	adds	r3, r7, r0
 8006662:	2208      	movs	r2, #8
 8006664:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	0e5b      	lsrs	r3, r3, #25
 800666e:	b2da      	uxtb	r2, r3
 8006670:	240d      	movs	r4, #13
 8006672:	193b      	adds	r3, r7, r4
 8006674:	2107      	movs	r1, #7
 8006676:	400a      	ands	r2, r1
 8006678:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	0f5b      	lsrs	r3, r3, #29
 8006682:	b2da      	uxtb	r2, r3
 8006684:	250c      	movs	r5, #12
 8006686:	197b      	adds	r3, r7, r5
 8006688:	2107      	movs	r1, #7
 800668a:	400a      	ands	r2, r1
 800668c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800668e:	183b      	adds	r3, r7, r0
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	197a      	adds	r2, r7, r5
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	4914      	ldr	r1, [pc, #80]	; (80066e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006698:	5c8a      	ldrb	r2, [r1, r2]
 800669a:	435a      	muls	r2, r3
 800669c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800669e:	197b      	adds	r3, r7, r5
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	4a12      	ldr	r2, [pc, #72]	; (80066ec <UARTEx_SetNbDataToProcess+0xb8>)
 80066a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066a6:	0019      	movs	r1, r3
 80066a8:	f7f9 fdb6 	bl	8000218 <__divsi3>
 80066ac:	0003      	movs	r3, r0
 80066ae:	b299      	uxth	r1, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	226a      	movs	r2, #106	; 0x6a
 80066b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b6:	19bb      	adds	r3, r7, r6
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	193a      	adds	r2, r7, r4
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	490a      	ldr	r1, [pc, #40]	; (80066e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80066c0:	5c8a      	ldrb	r2, [r1, r2]
 80066c2:	435a      	muls	r2, r3
 80066c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	4a08      	ldr	r2, [pc, #32]	; (80066ec <UARTEx_SetNbDataToProcess+0xb8>)
 80066cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066ce:	0019      	movs	r1, r3
 80066d0:	f7f9 fda2 	bl	8000218 <__divsi3>
 80066d4:	0003      	movs	r3, r0
 80066d6:	b299      	uxth	r1, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2268      	movs	r2, #104	; 0x68
 80066dc:	5299      	strh	r1, [r3, r2]
}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b005      	add	sp, #20
 80066e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	0800a1b0 	.word	0x0800a1b0
 80066ec:	0800a1b8 	.word	0x0800a1b8

080066f0 <LEDmultiplexing>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 f9b7 	bl	8006a6e <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2265      	movs	r2, #101	; 0x65
 8006704:	5c9a      	ldrb	r2, [r3, r2]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	0011      	movs	r1, r2
 800670a:	0018      	movs	r0, r3
 800670c:	f000 f96d 	bl	80069ea <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2265      	movs	r2, #101	; 0x65
 8006714:	5c9b      	ldrb	r3, [r3, r2]
 8006716:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2260      	movs	r2, #96	; 0x60
 800671c:	185b      	adds	r3, r3, r1
 800671e:	189b      	adds	r3, r3, r2
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0011      	movs	r1, r2
 8006726:	0018      	movs	r0, r3
 8006728:	f000 fa0e 	bl	8006b48 <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2264      	movs	r2, #100	; 0x64
 8006730:	5c9a      	ldrb	r2, [r3, r2]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2165      	movs	r1, #101	; 0x65
 8006736:	5c5b      	ldrb	r3, [r3, r1]
 8006738:	429a      	cmp	r2, r3
 800673a:	d107      	bne.n	800674c <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006744:	2200      	movs	r2, #0
 8006746:	0019      	movs	r1, r3
 8006748:	f7fd f953 	bl	80039f2 <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2265      	movs	r2, #101	; 0x65
 8006750:	5c9b      	ldrb	r3, [r3, r2]
 8006752:	3301      	adds	r3, #1
 8006754:	b2d9      	uxtb	r1, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2265      	movs	r2, #101	; 0x65
 800675a:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2265      	movs	r2, #101	; 0x65
 8006760:	5c9b      	ldrb	r3, [r3, r2]
 8006762:	2b03      	cmp	r3, #3
 8006764:	d903      	bls.n	800676e <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2265      	movs	r2, #101	; 0x65
 800676a:	2100      	movs	r1, #0
 800676c:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	226c      	movs	r2, #108	; 0x6c
 8006772:	5a9b      	ldrh	r3, [r3, r2]
 8006774:	3301      	adds	r3, #1
 8006776:	b299      	uxth	r1, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	226c      	movs	r2, #108	; 0x6c
 800677c:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	226c      	movs	r2, #108	; 0x6c
 8006782:	5a9b      	ldrh	r3, [r3, r2]
 8006784:	2207      	movs	r2, #7
 8006786:	4013      	ands	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d000      	beq.n	8006790 <LEDmultiplexing+0xa0>
 800678e:	e0a2      	b.n	80068d6 <LEDmultiplexing+0x1e6>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2267      	movs	r2, #103	; 0x67
 8006794:	5c9b      	ldrb	r3, [r3, r2]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d100      	bne.n	800679c <LEDmultiplexing+0xac>
 800679a:	e09c      	b.n	80068d6 <LEDmultiplexing+0x1e6>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2267      	movs	r2, #103	; 0x67
 80067a0:	5c9b      	ldrb	r3, [r3, r2]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d13f      	bne.n	8006826 <LEDmultiplexing+0x136>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 80067a6:	230f      	movs	r3, #15
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	2203      	movs	r2, #3
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e015      	b.n	80067dc <LEDmultiplexing+0xec>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 80067b0:	240f      	movs	r4, #15
 80067b2:	193b      	adds	r3, r7, r4
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	1e5a      	subs	r2, r3, #1
 80067b8:	193b      	adds	r3, r7, r4
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	2060      	movs	r0, #96	; 0x60
 80067c0:	188a      	adds	r2, r1, r2
 80067c2:	1812      	adds	r2, r2, r0
 80067c4:	7810      	ldrb	r0, [r2, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	2160      	movs	r1, #96	; 0x60
 80067ca:	18d3      	adds	r3, r2, r3
 80067cc:	185b      	adds	r3, r3, r1
 80067ce:	1c02      	adds	r2, r0, #0
 80067d0:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 80067d2:	193b      	adds	r3, r7, r4
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	193b      	adds	r3, r7, r4
 80067d8:	3a01      	subs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	230f      	movs	r3, #15
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e4      	bne.n	80067b0 <LEDmultiplexing+0xc0>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2266      	movs	r2, #102	; 0x66
 80067ea:	5c9b      	ldrb	r3, [r3, r2]
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d80c      	bhi.n	800680a <LEDmultiplexing+0x11a>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2266      	movs	r2, #102	; 0x66
 80067f4:	5c9b      	ldrb	r3, [r3, r2]
 80067f6:	0019      	movs	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2268      	movs	r2, #104	; 0x68
 80067fc:	185b      	adds	r3, r3, r1
 80067fe:	189b      	adds	r3, r3, r2
 8006800:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2260      	movs	r2, #96	; 0x60
 8006806:	5499      	strb	r1, [r3, r2]
 8006808:	e00d      	b.n	8006826 <LEDmultiplexing+0x136>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2266      	movs	r2, #102	; 0x66
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	001a      	movs	r2, r3
 8006812:	2307      	movs	r3, #7
 8006814:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	216e      	movs	r1, #110	; 0x6e
 800681a:	18d3      	adds	r3, r2, r3
 800681c:	185b      	adds	r3, r3, r1
 800681e:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2260      	movs	r2, #96	; 0x60
 8006824:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2267      	movs	r2, #103	; 0x67
 800682a:	5c9b      	ldrb	r3, [r3, r2]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d13d      	bne.n	80068ac <LEDmultiplexing+0x1bc>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 8006830:	230e      	movs	r3, #14
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e015      	b.n	8006866 <LEDmultiplexing+0x176>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 800683a:	240e      	movs	r4, #14
 800683c:	193b      	adds	r3, r7, r4
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	193b      	adds	r3, r7, r4
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	2060      	movs	r0, #96	; 0x60
 800684a:	188a      	adds	r2, r1, r2
 800684c:	1812      	adds	r2, r2, r0
 800684e:	7810      	ldrb	r0, [r2, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	2160      	movs	r1, #96	; 0x60
 8006854:	18d3      	adds	r3, r2, r3
 8006856:	185b      	adds	r3, r3, r1
 8006858:	1c02      	adds	r2, r0, #0
 800685a:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 800685c:	193b      	adds	r3, r7, r4
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	193b      	adds	r3, r7, r4
 8006862:	3201      	adds	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	230e      	movs	r3, #14
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d9e4      	bls.n	800683a <LEDmultiplexing+0x14a>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2266      	movs	r2, #102	; 0x66
 8006874:	5c9b      	ldrb	r3, [r3, r2]
 8006876:	2b03      	cmp	r3, #3
 8006878:	d80c      	bhi.n	8006894 <LEDmultiplexing+0x1a4>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2266      	movs	r2, #102	; 0x66
 800687e:	5c9b      	ldrb	r3, [r3, r2]
 8006880:	0019      	movs	r1, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2268      	movs	r2, #104	; 0x68
 8006886:	185b      	adds	r3, r3, r1
 8006888:	189b      	adds	r3, r3, r2
 800688a:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2263      	movs	r2, #99	; 0x63
 8006890:	5499      	strb	r1, [r3, r2]
 8006892:	e00b      	b.n	80068ac <LEDmultiplexing+0x1bc>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2266      	movs	r2, #102	; 0x66
 8006898:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 800689a:	3b04      	subs	r3, #4
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	216e      	movs	r1, #110	; 0x6e
 80068a0:	18d3      	adds	r3, r2, r3
 80068a2:	185b      	adds	r3, r3, r1
 80068a4:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2263      	movs	r2, #99	; 0x63
 80068aa:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2266      	movs	r2, #102	; 0x66
 80068b0:	5c9b      	ldrb	r3, [r3, r2]
 80068b2:	3301      	adds	r3, #1
 80068b4:	b2d9      	uxtb	r1, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2266      	movs	r2, #102	; 0x66
 80068ba:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2266      	movs	r2, #102	; 0x66
 80068c0:	5c9b      	ldrb	r3, [r3, r2]
 80068c2:	2b07      	cmp	r3, #7
 80068c4:	d907      	bls.n	80068d6 <LEDmultiplexing+0x1e6>
				LEDdisplay->transitionStage = 0;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2266      	movs	r2, #102	; 0x66
 80068ca:	2100      	movs	r1, #0
 80068cc:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2267      	movs	r2, #103	; 0x67
 80068d2:	2100      	movs	r1, #0
 80068d4:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	46bd      	mov	sp, r7
 80068da:	b005      	add	sp, #20
 80068dc:	bd90      	pop	{r4, r7, pc}

080068de <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	000a      	movs	r2, r1
 80068e8:	1cfb      	adds	r3, r7, #3
 80068ea:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1cfa      	adds	r2, r7, #3
 80068f0:	2167      	movs	r1, #103	; 0x67
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2266      	movs	r2, #102	; 0x66
 80068fa:	2100      	movs	r1, #0
 80068fc:	5499      	strb	r1, [r3, r2]

}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	46bd      	mov	sp, r7
 8006902:	b002      	add	sp, #8
 8006904:	bd80      	pop	{r7, pc}

08006906 <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	000a      	movs	r2, r1
 8006910:	1cfb      	adds	r3, r7, #3
 8006912:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 8006914:	1cfb      	adds	r3, r7, #3
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d108      	bne.n	800692e <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6858      	ldr	r0, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	0019      	movs	r1, r3
 8006928:	f7fd f863 	bl	80039f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 800692c:	e059      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 800692e:	1cfb      	adds	r3, r7, #3
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d108      	bne.n	8006948 <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68d8      	ldr	r0, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	891b      	ldrh	r3, [r3, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	0019      	movs	r1, r3
 8006942:	f7fd f856 	bl	80039f2 <HAL_GPIO_WritePin>
}
 8006946:	e04c      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 8006948:	1cfb      	adds	r3, r7, #3
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b03      	cmp	r3, #3
 800694e:	d108      	bne.n	8006962 <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6958      	ldr	r0, [r3, #20]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8a1b      	ldrh	r3, [r3, #16]
 8006958:	2200      	movs	r2, #0
 800695a:	0019      	movs	r1, r3
 800695c:	f7fd f849 	bl	80039f2 <HAL_GPIO_WritePin>
}
 8006960:	e03f      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 8006962:	1cfb      	adds	r3, r7, #3
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b04      	cmp	r3, #4
 8006968:	d108      	bne.n	800697c <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69d8      	ldr	r0, [r3, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8b1b      	ldrh	r3, [r3, #24]
 8006972:	2200      	movs	r2, #0
 8006974:	0019      	movs	r1, r3
 8006976:	f7fd f83c 	bl	80039f2 <HAL_GPIO_WritePin>
}
 800697a:	e032      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 800697c:	1cfb      	adds	r3, r7, #3
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b05      	cmp	r3, #5
 8006982:	d108      	bne.n	8006996 <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8c1b      	ldrh	r3, [r3, #32]
 800698c:	2200      	movs	r2, #0
 800698e:	0019      	movs	r1, r3
 8006990:	f7fd f82f 	bl	80039f2 <HAL_GPIO_WritePin>
}
 8006994:	e025      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 8006996:	1cfb      	adds	r3, r7, #3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b06      	cmp	r3, #6
 800699c:	d108      	bne.n	80069b0 <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	2200      	movs	r2, #0
 80069a8:	0019      	movs	r1, r3
 80069aa:	f7fd f822 	bl	80039f2 <HAL_GPIO_WritePin>
}
 80069ae:	e018      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 80069b0:	1cfb      	adds	r3, r7, #3
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b07      	cmp	r3, #7
 80069b6:	d108      	bne.n	80069ca <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80069c0:	2200      	movs	r2, #0
 80069c2:	0019      	movs	r1, r3
 80069c4:	f7fd f815 	bl	80039f2 <HAL_GPIO_WritePin>
}
 80069c8:	e00b      	b.n	80069e2 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 80069ca:	1cfb      	adds	r3, r7, #3
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d107      	bne.n	80069e2 <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80069da:	2200      	movs	r2, #0
 80069dc:	0019      	movs	r1, r3
 80069de:	f7fd f808 	bl	80039f2 <HAL_GPIO_WritePin>
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b002      	add	sp, #8
 80069e8:	bd80      	pop	{r7, pc}

080069ea <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	000a      	movs	r2, r1
 80069f4:	1cfb      	adds	r3, r7, #3
 80069f6:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 80069f8:	1cfb      	adds	r3, r7, #3
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2240      	movs	r2, #64	; 0x40
 8006a08:	5a9b      	ldrh	r3, [r3, r2]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	0019      	movs	r1, r3
 8006a0e:	f7fc fff0 	bl	80039f2 <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 8006a12:	e028      	b.n	8006a66 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 8006a14:	1cfb      	adds	r3, r7, #3
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d109      	bne.n	8006a30 <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2248      	movs	r2, #72	; 0x48
 8006a24:	5a9b      	ldrh	r3, [r3, r2]
 8006a26:	2201      	movs	r2, #1
 8006a28:	0019      	movs	r1, r3
 8006a2a:	f7fc ffe2 	bl	80039f2 <HAL_GPIO_WritePin>
}
 8006a2e:	e01a      	b.n	8006a66 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 8006a30:	1cfb      	adds	r3, r7, #3
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d109      	bne.n	8006a4c <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2250      	movs	r2, #80	; 0x50
 8006a40:	5a9b      	ldrh	r3, [r3, r2]
 8006a42:	2201      	movs	r2, #1
 8006a44:	0019      	movs	r1, r3
 8006a46:	f7fc ffd4 	bl	80039f2 <HAL_GPIO_WritePin>
}
 8006a4a:	e00c      	b.n	8006a66 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 8006a4c:	1cfb      	adds	r3, r7, #3
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d108      	bne.n	8006a66 <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2258      	movs	r2, #88	; 0x58
 8006a5c:	5a9b      	ldrh	r3, [r3, r2]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	0019      	movs	r1, r3
 8006a62:	f7fc ffc6 	bl	80039f2 <HAL_GPIO_WritePin>
}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b002      	add	sp, #8
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, LED_FIELD_OFF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2240      	movs	r2, #64	; 0x40
 8006a7e:	5a9b      	ldrh	r3, [r3, r2]
 8006a80:	2200      	movs	r2, #0
 8006a82:	0019      	movs	r1, r3
 8006a84:	f7fc ffb5 	bl	80039f2 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, LED_FIELD_OFF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2248      	movs	r2, #72	; 0x48
 8006a90:	5a9b      	ldrh	r3, [r3, r2]
 8006a92:	2200      	movs	r2, #0
 8006a94:	0019      	movs	r1, r3
 8006a96:	f7fc ffac 	bl	80039f2 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, LED_FIELD_OFF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2250      	movs	r2, #80	; 0x50
 8006aa2:	5a9b      	ldrh	r3, [r3, r2]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	0019      	movs	r1, r3
 8006aa8:	f7fc ffa3 	bl	80039f2 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, LED_FIELD_OFF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2258      	movs	r2, #88	; 0x58
 8006ab4:	5a9b      	ldrh	r3, [r3, r2]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	0019      	movs	r1, r3
 8006aba:	f7fc ff9a 	bl	80039f2 <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, LED_SEGMENT_OFF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6858      	ldr	r0, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	0019      	movs	r1, r3
 8006aca:	f7fc ff92 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, LED_SEGMENT_OFF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68d8      	ldr	r0, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	891b      	ldrh	r3, [r3, #8]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	0019      	movs	r1, r3
 8006ada:	f7fc ff8a 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, LED_SEGMENT_OFF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6958      	ldr	r0, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8a1b      	ldrh	r3, [r3, #16]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	0019      	movs	r1, r3
 8006aea:	f7fc ff82 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, LED_SEGMENT_OFF);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69d8      	ldr	r0, [r3, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8b1b      	ldrh	r3, [r3, #24]
 8006af6:	2201      	movs	r2, #1
 8006af8:	0019      	movs	r1, r3
 8006afa:	f7fc ff7a 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, LED_SEGMENT_OFF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8c1b      	ldrh	r3, [r3, #32]
 8006b06:	2201      	movs	r2, #1
 8006b08:	0019      	movs	r1, r3
 8006b0a:	f7fc ff72 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, LED_SEGMENT_OFF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b16:	2201      	movs	r2, #1
 8006b18:	0019      	movs	r1, r3
 8006b1a:	f7fc ff6a 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, LED_SEGMENT_OFF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006b26:	2201      	movs	r2, #1
 8006b28:	0019      	movs	r1, r3
 8006b2a:	f7fc ff62 	bl	80039f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006b36:	2201      	movs	r2, #1
 8006b38:	0019      	movs	r1, r3
 8006b3a:	f7fc ff5a 	bl	80039f2 <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b002      	add	sp, #8
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	000a      	movs	r2, r1
 8006b52:	1cfb      	adds	r3, r7, #3
 8006b54:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 8006b56:	1cfb      	adds	r3, r7, #3
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b2f      	cmp	r3, #47	; 0x2f
 8006b5c:	d800      	bhi.n	8006b60 <_LEDwriteCharacter+0x18>
 8006b5e:	e10f      	b.n	8006d80 <_LEDwriteCharacter+0x238>
 8006b60:	1cfb      	adds	r3, r7, #3
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b39      	cmp	r3, #57	; 0x39
 8006b66:	d900      	bls.n	8006b6a <_LEDwriteCharacter+0x22>
 8006b68:	e10a      	b.n	8006d80 <_LEDwriteCharacter+0x238>
		switch (character) {
 8006b6a:	1cfb      	adds	r3, r7, #3
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	3b30      	subs	r3, #48	; 0x30
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	d900      	bls.n	8006b76 <_LEDwriteCharacter+0x2e>
 8006b74:	e2e7      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
 8006b76:	009a      	lsls	r2, r3, #2
 8006b78:	4bea      	ldr	r3, [pc, #936]	; (8006f24 <_LEDwriteCharacter+0x3dc>)
 8006b7a:	18d3      	adds	r3, r2, r3
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2102      	movs	r1, #2
 8006b84:	0018      	movs	r0, r3
 8006b86:	f7ff febe 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2103      	movs	r1, #3
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7ff feb9 	bl	8006906 <_LEDsegmentOn>
			break;
 8006b94:	e0f3      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f7ff feb3 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7ff feae 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2107      	movs	r1, #7
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7ff fea9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2105      	movs	r1, #5
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7ff fea4 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2104      	movs	r1, #4
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7ff fe9f 	bl	8006906 <_LEDsegmentOn>
			break;
 8006bc8:	e0d9      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7ff fe99 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7ff fe94 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2107      	movs	r1, #7
 8006be2:	0018      	movs	r0, r3
 8006be4:	f7ff fe8f 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2103      	movs	r1, #3
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7ff fe8a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2104      	movs	r1, #4
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f7ff fe85 	bl	8006906 <_LEDsegmentOn>
			break;
 8006bfc:	e0bf      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2106      	movs	r1, #6
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7ff fe7f 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2107      	movs	r1, #7
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7ff fe7a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2102      	movs	r1, #2
 8006c16:	0018      	movs	r0, r3
 8006c18:	f7ff fe75 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2103      	movs	r1, #3
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7ff fe70 	bl	8006906 <_LEDsegmentOn>
			break;
 8006c26:	e0aa      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7ff fe6a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2106      	movs	r1, #6
 8006c36:	0018      	movs	r0, r3
 8006c38:	f7ff fe65 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2107      	movs	r1, #7
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7ff fe60 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2103      	movs	r1, #3
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7ff fe5b 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2104      	movs	r1, #4
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7ff fe56 	bl	8006906 <_LEDsegmentOn>
			break;
 8006c5a:	e090      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7ff fe50 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2103      	movs	r1, #3
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7ff fe4b 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2104      	movs	r1, #4
 8006c74:	0018      	movs	r0, r3
 8006c76:	f7ff fe46 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2105      	movs	r1, #5
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f7ff fe41 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2106      	movs	r1, #6
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f7ff fe3c 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2107      	movs	r1, #7
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff fe37 	bl	8006906 <_LEDsegmentOn>
			break;
 8006c98:	e071      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f7ff fe31 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7ff fe2c 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2103      	movs	r1, #3
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f7ff fe27 	bl	8006906 <_LEDsegmentOn>
			break;
 8006cb8:	e061      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f7ff fe21 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7ff fe1c 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2103      	movs	r1, #3
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f7ff fe17 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2104      	movs	r1, #4
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7ff fe12 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2105      	movs	r1, #5
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f7ff fe0d 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2106      	movs	r1, #6
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7ff fe08 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2107      	movs	r1, #7
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff fe03 	bl	8006906 <_LEDsegmentOn>
			break;
 8006d00:	e03d      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2101      	movs	r1, #1
 8006d06:	0018      	movs	r0, r3
 8006d08:	f7ff fdfd 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2102      	movs	r1, #2
 8006d10:	0018      	movs	r0, r3
 8006d12:	f7ff fdf8 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2103      	movs	r1, #3
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7ff fdf3 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2104      	movs	r1, #4
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7ff fdee 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2106      	movs	r1, #6
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7ff fde9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2107      	movs	r1, #7
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7ff fde4 	bl	8006906 <_LEDsegmentOn>
			break;
 8006d3e:	e01e      	b.n	8006d7e <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2101      	movs	r1, #1
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7ff fdde 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7ff fdd9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2103      	movs	r1, #3
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f7ff fdd4 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2104      	movs	r1, #4
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7ff fdcf 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2105      	movs	r1, #5
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f7ff fdca 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2106      	movs	r1, #6
 8006d76:	0018      	movs	r0, r3
 8006d78:	f7ff fdc5 	bl	8006906 <_LEDsegmentOn>
			break;
 8006d7c:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 8006d7e:	e1e2      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		}
	} else {
		switch (character) {
 8006d80:	1cfb      	adds	r3, r7, #3
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	3b2d      	subs	r3, #45	; 0x2d
 8006d86:	2b47      	cmp	r3, #71	; 0x47
 8006d88:	d900      	bls.n	8006d8c <_LEDwriteCharacter+0x244>
 8006d8a:	e1dc      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
 8006d8c:	009a      	lsls	r2, r3, #2
 8006d8e:	4b66      	ldr	r3, [pc, #408]	; (8006f28 <_LEDwriteCharacter+0x3e0>)
 8006d90:	18d3      	adds	r3, r2, r3
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7ff fdb3 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2102      	movs	r1, #2
 8006da4:	0018      	movs	r0, r3
 8006da6:	f7ff fdae 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2103      	movs	r1, #3
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7ff fda9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2105      	movs	r1, #5
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7ff fda4 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2106      	movs	r1, #6
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f7ff fd9f 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2107      	movs	r1, #7
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f7ff fd9a 	bl	8006906 <_LEDsegmentOn>
			break;
 8006dd2:	e1b8      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2103      	movs	r1, #3
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7ff fd94 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2104      	movs	r1, #4
 8006de2:	0018      	movs	r0, r3
 8006de4:	f7ff fd8f 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2105      	movs	r1, #5
 8006dec:	0018      	movs	r0, r3
 8006dee:	f7ff fd8a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2106      	movs	r1, #6
 8006df6:	0018      	movs	r0, r3
 8006df8:	f7ff fd85 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2107      	movs	r1, #7
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff fd80 	bl	8006906 <_LEDsegmentOn>
			break;
 8006e06:	e19e      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7ff fd7a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2104      	movs	r1, #4
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7ff fd75 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2105      	movs	r1, #5
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7ff fd70 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2106      	movs	r1, #6
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7ff fd6b 	bl	8006906 <_LEDsegmentOn>
			break;
 8006e30:	e189      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2104      	movs	r1, #4
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7ff fd65 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2105      	movs	r1, #5
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7ff fd60 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2107      	movs	r1, #7
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7ff fd5b 	bl	8006906 <_LEDsegmentOn>
			break;
 8006e50:	e179      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2101      	movs	r1, #1
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7ff fd55 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2102      	movs	r1, #2
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7ff fd50 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2103      	movs	r1, #3
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7ff fd4b 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2104      	movs	r1, #4
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff fd46 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2105      	movs	r1, #5
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f7ff fd41 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2106      	movs	r1, #6
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff fd3c 	bl	8006906 <_LEDsegmentOn>
			break;
 8006e8e:	e15a      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2102      	movs	r1, #2
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7ff fd36 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2103      	movs	r1, #3
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f7ff fd31 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7ff fd2c 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2105      	movs	r1, #5
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7ff fd27 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2107      	movs	r1, #7
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7ff fd22 	bl	8006906 <_LEDsegmentOn>
			break;
 8006ec2:	e140      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7ff fd1c 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2104      	movs	r1, #4
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7ff fd17 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2105      	movs	r1, #5
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7ff fd12 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2106      	movs	r1, #6
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f7ff fd0d 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2107      	movs	r1, #7
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f7ff fd08 	bl	8006906 <_LEDsegmentOn>
			break;
 8006ef6:	e126      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2101      	movs	r1, #1
 8006efc:	0018      	movs	r0, r3
 8006efe:	f7ff fd02 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2105      	movs	r1, #5
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7ff fcfd 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2106      	movs	r1, #6
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7ff fcf8 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2107      	movs	r1, #7
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f7ff fcf3 	bl	8006906 <_LEDsegmentOn>
			break;
 8006f20:	e111      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	0800a1c0 	.word	0x0800a1c0
 8006f28:	0800a1e8 	.word	0x0800a1e8
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2102      	movs	r1, #2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7ff fce8 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2103      	movs	r1, #3
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7ff fce3 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2105      	movs	r1, #5
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7ff fcde 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2106      	movs	r1, #6
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7ff fcd9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2107      	movs	r1, #7
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7ff fcd4 	bl	8006906 <_LEDsegmentOn>
			break;
 8006f5e:	e0f2      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2103      	movs	r1, #3
 8006f64:	0018      	movs	r0, r3
 8006f66:	f7ff fcce 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2105      	movs	r1, #5
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7ff fcc9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2106      	movs	r1, #6
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7ff fcc4 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2107      	movs	r1, #7
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7ff fcbf 	bl	8006906 <_LEDsegmentOn>
			break;
 8006f88:	e0dd      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f7ff fcb9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2103      	movs	r1, #3
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7ff fcb4 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f7ff fcaf 	bl	8006906 <_LEDsegmentOn>
			break;
 8006fa8:	e0cd      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2104      	movs	r1, #4
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7ff fca9 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2105      	movs	r1, #5
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff fca4 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2106      	movs	r1, #6
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f7ff fc9f 	bl	8006906 <_LEDsegmentOn>
			break;
 8006fc8:	e0bd      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2101      	movs	r1, #1
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7ff fc99 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2102      	movs	r1, #2
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7ff fc94 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2103      	movs	r1, #3
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f7ff fc8f 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2104      	movs	r1, #4
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7ff fc8a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2105      	movs	r1, #5
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7ff fc85 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2106      	movs	r1, #6
 8007000:	0018      	movs	r0, r3
 8007002:	f7ff fc80 	bl	8006906 <_LEDsegmentOn>
			break;
 8007006:	e09e      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2103      	movs	r1, #3
 800700c:	0018      	movs	r0, r3
 800700e:	f7ff fc7a 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2104      	movs	r1, #4
 8007016:	0018      	movs	r0, r3
 8007018:	f7ff fc75 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2105      	movs	r1, #5
 8007020:	0018      	movs	r0, r3
 8007022:	f7ff fc70 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2107      	movs	r1, #7
 800702a:	0018      	movs	r0, r3
 800702c:	f7ff fc6b 	bl	8006906 <_LEDsegmentOn>
			break;
 8007030:	e089      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2101      	movs	r1, #1
 8007036:	0018      	movs	r0, r3
 8007038:	f7ff fc65 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2102      	movs	r1, #2
 8007040:	0018      	movs	r0, r3
 8007042:	f7ff fc60 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2105      	movs	r1, #5
 800704a:	0018      	movs	r0, r3
 800704c:	f7ff fc5b 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2106      	movs	r1, #6
 8007054:	0018      	movs	r0, r3
 8007056:	f7ff fc56 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2107      	movs	r1, #7
 800705e:	0018      	movs	r0, r3
 8007060:	f7ff fc51 	bl	8006906 <_LEDsegmentOn>
			break;
 8007064:	e06f      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2105      	movs	r1, #5
 800706a:	0018      	movs	r0, r3
 800706c:	f7ff fc4b 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2107      	movs	r1, #7
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff fc46 	bl	8006906 <_LEDsegmentOn>
			break;
 800707a:	e064      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2101      	movs	r1, #1
 8007080:	0018      	movs	r0, r3
 8007082:	f7ff fc40 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2106      	movs	r1, #6
 800708a:	0018      	movs	r0, r3
 800708c:	f7ff fc3b 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2107      	movs	r1, #7
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff fc36 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2103      	movs	r1, #3
 800709e:	0018      	movs	r0, r3
 80070a0:	f7ff fc31 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2104      	movs	r1, #4
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff fc2c 	bl	8006906 <_LEDsegmentOn>
			break;
 80070ae:	e04a      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2105      	movs	r1, #5
 80070b4:	0018      	movs	r0, r3
 80070b6:	f7ff fc26 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2106      	movs	r1, #6
 80070be:	0018      	movs	r0, r3
 80070c0:	f7ff fc21 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2107      	movs	r1, #7
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7ff fc1c 	bl	8006906 <_LEDsegmentOn>
			break;
 80070ce:	e03a      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2102      	movs	r1, #2
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7ff fc16 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2103      	movs	r1, #3
 80070de:	0018      	movs	r0, r3
 80070e0:	f7ff fc11 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2104      	movs	r1, #4
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7ff fc0c 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2105      	movs	r1, #5
 80070f2:	0018      	movs	r0, r3
 80070f4:	f7ff fc07 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2106      	movs	r1, #6
 80070fc:	0018      	movs	r0, r3
 80070fe:	f7ff fc02 	bl	8006906 <_LEDsegmentOn>
			break;
 8007102:	e020      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2107      	movs	r1, #7
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff fbfc 	bl	8006906 <_LEDsegmentOn>
			break;
 800710e:	e01a      	b.n	8007146 <_LEDwriteCharacter+0x5fe>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2104      	movs	r1, #4
 8007114:	0018      	movs	r0, r3
 8007116:	f7ff fbf6 	bl	8006906 <_LEDsegmentOn>
			break;
 800711a:	e014      	b.n	8007146 <_LEDwriteCharacter+0x5fe>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2101      	movs	r1, #1
 8007120:	0018      	movs	r0, r3
 8007122:	f7ff fbf0 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2102      	movs	r1, #2
 800712a:	0018      	movs	r0, r3
 800712c:	f7ff fbeb 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2106      	movs	r1, #6
 8007134:	0018      	movs	r0, r3
 8007136:	f7ff fbe6 	bl	8006906 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2107      	movs	r1, #7
 800713e:	0018      	movs	r0, r3
 8007140:	f7ff fbe1 	bl	8006906 <_LEDsegmentOn>
			break;
 8007144:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	46bd      	mov	sp, r7
 800714a:	b002      	add	sp, #8
 800714c:	bd80      	pop	{r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)

08007150 <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	1dbb      	adds	r3, r7, #6
 800715e:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1dba      	adds	r2, r7, #6
 800716a:	2140      	movs	r1, #64	; 0x40
 800716c:	8812      	ldrh	r2, [r2, #0]
 800716e:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	2318      	movs	r3, #24
 800717a:	18fb      	adds	r3, r7, r3
 800717c:	2148      	movs	r1, #72	; 0x48
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	18ba      	adds	r2, r7, r2
 800718e:	2150      	movs	r1, #80	; 0x50
 8007190:	8812      	ldrh	r2, [r2, #0]
 8007192:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2228      	movs	r2, #40	; 0x28
 800719e:	18ba      	adds	r2, r7, r2
 80071a0:	2158      	movs	r1, #88	; 0x58
 80071a2:	8812      	ldrh	r2, [r2, #0]
 80071a4:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071aa:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2230      	movs	r2, #48	; 0x30
 80071b0:	18ba      	adds	r2, r7, r2
 80071b2:	8812      	ldrh	r2, [r2, #0]
 80071b4:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ba:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2238      	movs	r2, #56	; 0x38
 80071c0:	18ba      	adds	r2, r7, r2
 80071c2:	8812      	ldrh	r2, [r2, #0]
 80071c4:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071ca:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	18ba      	adds	r2, r7, r2
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071da:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2248      	movs	r2, #72	; 0x48
 80071e0:	18ba      	adds	r2, r7, r2
 80071e2:	8812      	ldrh	r2, [r2, #0]
 80071e4:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2250      	movs	r2, #80	; 0x50
 80071f0:	18ba      	adds	r2, r7, r2
 80071f2:	8812      	ldrh	r2, [r2, #0]
 80071f4:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	2118      	movs	r1, #24
 8007202:	468c      	mov	ip, r1
 8007204:	44bc      	add	ip, r7
 8007206:	4462      	add	r2, ip
 8007208:	8812      	ldrh	r2, [r2, #0]
 800720a:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007210:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2248      	movs	r2, #72	; 0x48
 8007216:	2118      	movs	r1, #24
 8007218:	468c      	mov	ip, r1
 800721a:	44bc      	add	ip, r7
 800721c:	4462      	add	r2, ip
 800721e:	8812      	ldrh	r2, [r2, #0]
 8007220:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007226:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2250      	movs	r2, #80	; 0x50
 800722c:	2118      	movs	r1, #24
 800722e:	468c      	mov	ip, r1
 8007230:	44bc      	add	ip, r7
 8007232:	4462      	add	r2, ip
 8007234:	8812      	ldrh	r2, [r2, #0]
 8007236:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0018      	movs	r0, r3
 800723c:	f000 f82f 	bl	800729e <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2265      	movs	r2, #101	; 0x65
 8007244:	2100      	movs	r1, #0
 8007246:	5499      	strb	r1, [r3, r2]
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}

08007250 <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char* separator){
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 800725a:	230f      	movs	r3, #15
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	e012      	b.n	800728a <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 8007264:	240f      	movs	r4, #15
 8007266:	193b      	adds	r3, r7, r4
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	18d2      	adds	r2, r2, r3
 800726e:	193b      	adds	r3, r7, r4
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	7810      	ldrb	r0, [r2, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	2168      	movs	r1, #104	; 0x68
 8007278:	18d3      	adds	r3, r2, r3
 800727a:	185b      	adds	r3, r3, r1
 800727c:	1c02      	adds	r2, r0, #0
 800727e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8007280:	193b      	adds	r3, r7, r4
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	193b      	adds	r3, r7, r4
 8007286:	3201      	adds	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	230f      	movs	r3, #15
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d9e7      	bls.n	8007264 <LEDseparator+0x14>
	}
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b005      	add	sp, #20
 800729c:	bd90      	pop	{r4, r7, pc}

0800729e <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3360      	adds	r3, #96	; 0x60
 80072aa:	2204      	movs	r2, #4
 80072ac:	2120      	movs	r1, #32
 80072ae:	0018      	movs	r0, r3
 80072b0:	f002 fe95 	bl	8009fde <memset>
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2264      	movs	r2, #100	; 0x64
 80072b8:	2104      	movs	r1, #4
 80072ba:	5499      	strb	r1, [r3, r2]
}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	0008      	movs	r0, r1
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	0019      	movs	r1, r3
 80072d2:	230b      	movs	r3, #11
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	1c02      	adds	r2, r0, #0
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	230a      	movs	r3, #10
 80072dc:	18fb      	adds	r3, r7, r3
 80072de:	1c0a      	adds	r2, r1, #0
 80072e0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 80072e2:	2317      	movs	r3, #23
 80072e4:	18fb      	adds	r3, r7, r3
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	e02f      	b.n	800734c <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 80072ec:	230a      	movs	r3, #10
 80072ee:	18fb      	adds	r3, r7, r3
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10e      	bne.n	8007314 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 80072f6:	2117      	movs	r1, #23
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	18d2      	adds	r2, r2, r3
 8007300:	187b      	adds	r3, r7, r1
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	7810      	ldrb	r0, [r2, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	2160      	movs	r1, #96	; 0x60
 800730a:	18d3      	adds	r3, r2, r3
 800730c:	185b      	adds	r3, r3, r1
 800730e:	1c02      	adds	r2, r0, #0
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e015      	b.n	8007340 <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8007314:	2117      	movs	r1, #23
 8007316:	187b      	adds	r3, r7, r1
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	18d2      	adds	r2, r2, r3
 800731e:	187b      	adds	r3, r7, r1
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	7810      	ldrb	r0, [r2, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	216e      	movs	r1, #110	; 0x6e
 8007328:	18d3      	adds	r3, r2, r3
 800732a:	185b      	adds	r3, r3, r1
 800732c:	1c02      	adds	r2, r0, #0
 800732e:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8007330:	230a      	movs	r3, #10
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	781a      	ldrb	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	0011      	movs	r1, r2
 800733a:	0018      	movs	r0, r3
 800733c:	f7ff facf 	bl	80068de <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8007340:	2117      	movs	r1, #23
 8007342:	187b      	adds	r3, r7, r1
 8007344:	781a      	ldrb	r2, [r3, #0]
 8007346:	187b      	adds	r3, r7, r1
 8007348:	3201      	adds	r2, #1
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	2317      	movs	r3, #23
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d9ca      	bls.n	80072ec <LEDstr+0x28>
		}

	}
}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	46bd      	mov	sp, r7
 800735c:	b006      	add	sp, #24
 800735e:	bd80      	pop	{r7, pc}

08007360 <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	000a      	movs	r2, r1
 800736a:	1cfb      	adds	r3, r7, #3
 800736c:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1cfa      	adds	r2, r7, #3
 8007372:	2164      	movs	r1, #100	; 0x64
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	b002      	add	sp, #8
 800737e:	bd80      	pop	{r7, pc}

08007380 <adcInit>:
 *
 * @param  adc handler
 *
 * @retval None
 */
void adcInit(ADC_HandleTypeDef *adcHandler){
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(adcHandler);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	0018      	movs	r0, r3
 800738c:	f7fc f850 	bl	8003430 <HAL_ADCEx_Calibration_Start>
}
 8007390:	46c0      	nop			; (mov r8, r8)
 8007392:	46bd      	mov	sp, r7
 8007394:	b002      	add	sp, #8
 8007396:	bd80      	pop	{r7, pc}

08007398 <adcSetChannel>:
 *
 * @param adc channel- e.g. ADC_CHANNEL_0, ADC_CHANNEL_TEMPSENSOR
 *
 * @retval None
 */
void adcSetChannel(ADC_HandleTypeDef *adcHandler, uint32_t channel) {
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef chConf = { 0 };
 80073a2:	240c      	movs	r4, #12
 80073a4:	193b      	adds	r3, r7, r4
 80073a6:	0018      	movs	r0, r3
 80073a8:	230c      	movs	r3, #12
 80073aa:	001a      	movs	r2, r3
 80073ac:	2100      	movs	r1, #0
 80073ae:	f002 fe16 	bl	8009fde <memset>
	chConf.Channel = channel;
 80073b2:	193b      	adds	r3, r7, r4
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	601a      	str	r2, [r3, #0]
	chConf.Rank = ADC_REGULAR_RANK_1;
 80073b8:	193b      	adds	r3, r7, r4
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
	chConf.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80073be:	193b      	adds	r3, r7, r4
 80073c0:	2200      	movs	r2, #0
 80073c2:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(adcHandler, &chConf) != HAL_OK) {
 80073c4:	193a      	adds	r2, r7, r4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	0011      	movs	r1, r2
 80073ca:	0018      	movs	r0, r3
 80073cc:	f7fb fd50 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80073d0:	1e03      	subs	r3, r0, #0
 80073d2:	d001      	beq.n	80073d8 <adcSetChannel+0x40>
		Error_Handler();
 80073d4:	f001 f984 	bl	80086e0 <Error_Handler>
	}

}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	b007      	add	sp, #28
 80073de:	bd90      	pop	{r4, r7, pc}

080073e0 <adcRead>:
 *
 * @param  adc handler
 *
 * @retval raw adc reading
 */
uint32_t adcRead(ADC_HandleTypeDef *adcHandler){
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adcHandler);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7fb fc52 	bl	8002c94 <HAL_ADC_Start>

	while(HAL_ADC_PollForConversion(adcHandler, 100) != HAL_OK);
 80073f0:	46c0      	nop			; (mov r8, r8)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2164      	movs	r1, #100	; 0x64
 80073f6:	0018      	movs	r0, r3
 80073f8:	f7fb fc9a 	bl	8002d30 <HAL_ADC_PollForConversion>
 80073fc:	1e03      	subs	r3, r0, #0
 80073fe:	d1f8      	bne.n	80073f2 <adcRead+0x12>
	return HAL_ADC_GetValue(adcHandler);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	0018      	movs	r0, r3
 8007404:	f7fb fd28 	bl	8002e58 <HAL_ADC_GetValue>
 8007408:	0003      	movs	r3, r0


}
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b002      	add	sp, #8
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <adcTemperature>:
 *
 * @param  adc handler
 *
 * @retval temperature in Celcius degree
 */
uint32_t adcTemperature(uint32_t adcReading){
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	return __HAL_ADC_CALC_TEMPERATURE(3300, adcReading, ADC_RESOLUTION_12B);
 800741c:	4b12      	ldr	r3, [pc, #72]	; (8007468 <adcTemperature+0x54>)
 800741e:	881a      	ldrh	r2, [r3, #0]
 8007420:	4b12      	ldr	r3, [pc, #72]	; (800746c <adcTemperature+0x58>)
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d01a      	beq.n	800745e <adcTemperature+0x4a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a11      	ldr	r2, [pc, #68]	; (8007470 <adcTemperature+0x5c>)
 800742c:	4353      	muls	r3, r2
 800742e:	4911      	ldr	r1, [pc, #68]	; (8007474 <adcTemperature+0x60>)
 8007430:	0018      	movs	r0, r3
 8007432:	f7f8 fe67 	bl	8000104 <__udivsi3>
 8007436:	0003      	movs	r3, r0
 8007438:	001a      	movs	r2, r3
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <adcTemperature+0x58>)
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2264      	movs	r2, #100	; 0x64
 8007442:	4353      	muls	r3, r2
 8007444:	4a08      	ldr	r2, [pc, #32]	; (8007468 <adcTemperature+0x54>)
 8007446:	8812      	ldrh	r2, [r2, #0]
 8007448:	0011      	movs	r1, r2
 800744a:	4a08      	ldr	r2, [pc, #32]	; (800746c <adcTemperature+0x58>)
 800744c:	8812      	ldrh	r2, [r2, #0]
 800744e:	1a8a      	subs	r2, r1, r2
 8007450:	0011      	movs	r1, r2
 8007452:	0018      	movs	r0, r3
 8007454:	f7f8 fee0 	bl	8000218 <__divsi3>
 8007458:	0003      	movs	r3, r0
 800745a:	331e      	adds	r3, #30
 800745c:	e000      	b.n	8007460 <adcTemperature+0x4c>
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <adcTemperature+0x64>)
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}
 8007468:	1fff75ca 	.word	0x1fff75ca
 800746c:	1fff75a8 	.word	0x1fff75a8
 8007470:	00000ce4 	.word	0x00000ce4
 8007474:	00000bb8 	.word	0x00000bb8
 8007478:	00007fff 	.word	0x00007fff

0800747c <interfaceWrite>:
 *      Author: bartosz
 */

#include "interface.h"

void interfaceWrite(void) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af02      	add	r7, sp, #8

	//								WRITE DATA TO CLOCK
	twoIntsToArray(buffer, chronograph.actual.hour, chronograph.actual.minute);
 8007482:	4b94      	ldr	r3, [pc, #592]	; (80076d4 <interfaceWrite+0x258>)
 8007484:	2103      	movs	r1, #3
 8007486:	5659      	ldrsb	r1, [r3, r1]
 8007488:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <interfaceWrite+0x258>)
 800748a:	2204      	movs	r2, #4
 800748c:	569a      	ldrsb	r2, [r3, r2]
 800748e:	4b92      	ldr	r3, [pc, #584]	; (80076d8 <interfaceWrite+0x25c>)
 8007490:	0018      	movs	r0, r3
 8007492:	f000 f941 	bl	8007718 <twoIntsToArray>
	if (rtcBlink(&chronograph)) {
 8007496:	4b8f      	ldr	r3, [pc, #572]	; (80076d4 <interfaceWrite+0x258>)
 8007498:	0018      	movs	r0, r3
 800749a:	f002 fac1 	bl	8009a20 <rtcBlink>
 800749e:	1e03      	subs	r3, r0, #0
 80074a0:	d00a      	beq.n	80074b8 <interfaceWrite+0x3c>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON, 0);
 80074a2:	4b8d      	ldr	r3, [pc, #564]	; (80076d8 <interfaceWrite+0x25c>)
 80074a4:	488d      	ldr	r0, [pc, #564]	; (80076dc <interfaceWrite+0x260>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	9201      	str	r2, [sp, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	9200      	str	r2, [sp, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	f001 f92b 	bl	800870c <menuItemChangeValue>
 80074b6:	e009      	b.n	80074cc <interfaceWrite+0x50>
	} else {
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_DISABLED, 0);
 80074b8:	4b87      	ldr	r3, [pc, #540]	; (80076d8 <interfaceWrite+0x25c>)
 80074ba:	4888      	ldr	r0, [pc, #544]	; (80076dc <interfaceWrite+0x260>)
 80074bc:	2200      	movs	r2, #0
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	2204      	movs	r2, #4
 80074c2:	9200      	str	r2, [sp, #0]
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	f001 f920 	bl	800870c <menuItemChangeValue>
	}

	oneIntToArray(buffer, 2, chronograph.actual.second);
 80074cc:	4b81      	ldr	r3, [pc, #516]	; (80076d4 <interfaceWrite+0x258>)
 80074ce:	2205      	movs	r2, #5
 80074d0:	569a      	ldrsb	r2, [r3, r2]
 80074d2:	4b81      	ldr	r3, [pc, #516]	; (80076d8 <interfaceWrite+0x25c>)
 80074d4:	2102      	movs	r1, #2
 80074d6:	0018      	movs	r0, r3
 80074d8:	f000 f975 	bl	80077c6 <oneIntToArray>
	if (rtcBlink(&chronograph)) {
 80074dc:	4b7d      	ldr	r3, [pc, #500]	; (80076d4 <interfaceWrite+0x258>)
 80074de:	0018      	movs	r0, r3
 80074e0:	f002 fa9e 	bl	8009a20 <rtcBlink>
 80074e4:	1e03      	subs	r3, r0, #0
 80074e6:	d00a      	beq.n	80074fe <interfaceWrite+0x82>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON, 0);
 80074e8:	4b7b      	ldr	r3, [pc, #492]	; (80076d8 <interfaceWrite+0x25c>)
 80074ea:	487c      	ldr	r0, [pc, #496]	; (80076dc <interfaceWrite+0x260>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	9201      	str	r2, [sp, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	9200      	str	r2, [sp, #0]
 80074f4:	2201      	movs	r2, #1
 80074f6:	2101      	movs	r1, #1
 80074f8:	f001 f908 	bl	800870c <menuItemChangeValue>
 80074fc:	e009      	b.n	8007512 <interfaceWrite+0x96>
	} else {
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_DISABLED,
 80074fe:	4b76      	ldr	r3, [pc, #472]	; (80076d8 <interfaceWrite+0x25c>)
 8007500:	4876      	ldr	r0, [pc, #472]	; (80076dc <interfaceWrite+0x260>)
 8007502:	2200      	movs	r2, #0
 8007504:	9201      	str	r2, [sp, #4]
 8007506:	2204      	movs	r2, #4
 8007508:	9200      	str	r2, [sp, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	2101      	movs	r1, #1
 800750e:	f001 f8fd 	bl	800870c <menuItemChangeValue>
				0);
	}


	//								WRITE DATA TO CALENDAR
	twoIntsToArray(buffer, chronograph.actual.day, chronograph.actual.month);
 8007512:	4b70      	ldr	r3, [pc, #448]	; (80076d4 <interfaceWrite+0x258>)
 8007514:	2102      	movs	r1, #2
 8007516:	5659      	ldrsb	r1, [r3, r1]
 8007518:	4b6e      	ldr	r3, [pc, #440]	; (80076d4 <interfaceWrite+0x258>)
 800751a:	2201      	movs	r2, #1
 800751c:	569a      	ldrsb	r2, [r3, r2]
 800751e:	4b6e      	ldr	r3, [pc, #440]	; (80076d8 <interfaceWrite+0x25c>)
 8007520:	0018      	movs	r0, r3
 8007522:	f000 f8f9 	bl	8007718 <twoIntsToArray>
	menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT, 0);
 8007526:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <interfaceWrite+0x25c>)
 8007528:	486c      	ldr	r0, [pc, #432]	; (80076dc <interfaceWrite+0x260>)
 800752a:	2200      	movs	r2, #0
 800752c:	9201      	str	r2, [sp, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	9200      	str	r2, [sp, #0]
 8007532:	2201      	movs	r2, #1
 8007534:	2100      	movs	r1, #0
 8007536:	f001 f8e9 	bl	800870c <menuItemChangeValue>



	//								WRITE DATA TO SETTINGS_CLOCK
	oneIntToArray(buffer, 0, chronograph.actual.hour);
 800753a:	4b66      	ldr	r3, [pc, #408]	; (80076d4 <interfaceWrite+0x258>)
 800753c:	2203      	movs	r2, #3
 800753e:	569a      	ldrsb	r2, [r3, r2]
 8007540:	4b65      	ldr	r3, [pc, #404]	; (80076d8 <interfaceWrite+0x25c>)
 8007542:	2100      	movs	r1, #0
 8007544:	0018      	movs	r0, r3
 8007546:	f000 f93e 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, buffer, INTER_COLON, 1);
 800754a:	4b63      	ldr	r3, [pc, #396]	; (80076d8 <interfaceWrite+0x25c>)
 800754c:	4863      	ldr	r0, [pc, #396]	; (80076dc <interfaceWrite+0x260>)
 800754e:	2201      	movs	r2, #1
 8007550:	9201      	str	r2, [sp, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	9200      	str	r2, [sp, #0]
 8007556:	2202      	movs	r2, #2
 8007558:	2100      	movs	r1, #0
 800755a:	f001 f8d7 	bl	800870c <menuItemChangeValue>

	oneIntToArray(buffer, 2, chronograph.actual.minute);
 800755e:	4b5d      	ldr	r3, [pc, #372]	; (80076d4 <interfaceWrite+0x258>)
 8007560:	2204      	movs	r2, #4
 8007562:	569a      	ldrsb	r2, [r3, r2]
 8007564:	4b5c      	ldr	r3, [pc, #368]	; (80076d8 <interfaceWrite+0x25c>)
 8007566:	2102      	movs	r1, #2
 8007568:	0018      	movs	r0, r3
 800756a:	f000 f92c 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, buffer, INTER_COLON,
 800756e:	4b5a      	ldr	r3, [pc, #360]	; (80076d8 <interfaceWrite+0x25c>)
 8007570:	485a      	ldr	r0, [pc, #360]	; (80076dc <interfaceWrite+0x260>)
 8007572:	2201      	movs	r2, #1
 8007574:	9201      	str	r2, [sp, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	9200      	str	r2, [sp, #0]
 800757a:	2202      	movs	r2, #2
 800757c:	2101      	movs	r1, #1
 800757e:	f001 f8c5 	bl	800870c <menuItemChangeValue>
			1);

	oneIntToArray(buffer, 2, chronograph.actual.second);
 8007582:	4b54      	ldr	r3, [pc, #336]	; (80076d4 <interfaceWrite+0x258>)
 8007584:	2205      	movs	r2, #5
 8007586:	569a      	ldrsb	r2, [r3, r2]
 8007588:	4b53      	ldr	r3, [pc, #332]	; (80076d8 <interfaceWrite+0x25c>)
 800758a:	2102      	movs	r1, #2
 800758c:	0018      	movs	r0, r3
 800758e:	f000 f91a 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, buffer, INTER_COLON,
 8007592:	4b51      	ldr	r3, [pc, #324]	; (80076d8 <interfaceWrite+0x25c>)
 8007594:	4851      	ldr	r0, [pc, #324]	; (80076dc <interfaceWrite+0x260>)
 8007596:	2201      	movs	r2, #1
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	9200      	str	r2, [sp, #0]
 800759e:	2202      	movs	r2, #2
 80075a0:	2102      	movs	r1, #2
 80075a2:	f001 f8b3 	bl	800870c <menuItemChangeValue>
			1);


	//								WRITE DATA TO SETTINGS_CALENDAR
	oneIntToArray(buffer, 0, chronograph.actual.day);
 80075a6:	4b4b      	ldr	r3, [pc, #300]	; (80076d4 <interfaceWrite+0x258>)
 80075a8:	2202      	movs	r2, #2
 80075aa:	569a      	ldrsb	r2, [r3, r2]
 80075ac:	4b4a      	ldr	r3, [pc, #296]	; (80076d8 <interfaceWrite+0x25c>)
 80075ae:	2100      	movs	r1, #0
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f908 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, buffer, INTER_DOT, 1);
 80075b6:	4b48      	ldr	r3, [pc, #288]	; (80076d8 <interfaceWrite+0x25c>)
 80075b8:	4848      	ldr	r0, [pc, #288]	; (80076dc <interfaceWrite+0x260>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	9201      	str	r2, [sp, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	9200      	str	r2, [sp, #0]
 80075c2:	2202      	movs	r2, #2
 80075c4:	2103      	movs	r1, #3
 80075c6:	f001 f8a1 	bl	800870c <menuItemChangeValue>

	oneIntToArray(buffer, 2, chronograph.actual.month);
 80075ca:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <interfaceWrite+0x258>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	569a      	ldrsb	r2, [r3, r2]
 80075d0:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <interfaceWrite+0x25c>)
 80075d2:	2102      	movs	r1, #2
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 f8f6 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, buffer, INTER_DOT,
 80075da:	4b3f      	ldr	r3, [pc, #252]	; (80076d8 <interfaceWrite+0x25c>)
 80075dc:	483f      	ldr	r0, [pc, #252]	; (80076dc <interfaceWrite+0x260>)
 80075de:	2201      	movs	r2, #1
 80075e0:	9201      	str	r2, [sp, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9200      	str	r2, [sp, #0]
 80075e6:	2202      	movs	r2, #2
 80075e8:	2104      	movs	r1, #4
 80075ea:	f001 f88f 	bl	800870c <menuItemChangeValue>
			1);

	oneIntToArray(buffer, 0, chronograph.actual.year);
 80075ee:	4b39      	ldr	r3, [pc, #228]	; (80076d4 <interfaceWrite+0x258>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	569a      	ldrsb	r2, [r3, r2]
 80075f4:	4b38      	ldr	r3, [pc, #224]	; (80076d8 <interfaceWrite+0x25c>)
 80075f6:	2100      	movs	r1, #0
 80075f8:	0018      	movs	r0, r3
 80075fa:	f000 f8e4 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, buffer,
 80075fe:	4b36      	ldr	r3, [pc, #216]	; (80076d8 <interfaceWrite+0x25c>)
 8007600:	4836      	ldr	r0, [pc, #216]	; (80076dc <interfaceWrite+0x260>)
 8007602:	2201      	movs	r2, #1
 8007604:	9201      	str	r2, [sp, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	9200      	str	r2, [sp, #0]
 800760a:	2202      	movs	r2, #2
 800760c:	2105      	movs	r1, #5
 800760e:	f001 f87d 	bl	800870c <menuItemChangeValue>
			INTER_DISABLED, 1);

	//								WRITE CHRONO TIME
	twoIntsToArray(buffer, chronograph.chrono.minute, chronograph.chrono.second);
 8007612:	4b30      	ldr	r3, [pc, #192]	; (80076d4 <interfaceWrite+0x258>)
 8007614:	211c      	movs	r1, #28
 8007616:	5659      	ldrsb	r1, [r3, r1]
 8007618:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <interfaceWrite+0x258>)
 800761a:	221d      	movs	r2, #29
 800761c:	569a      	ldrsb	r2, [r3, r2]
 800761e:	4b2e      	ldr	r3, [pc, #184]	; (80076d8 <interfaceWrite+0x25c>)
 8007620:	0018      	movs	r0, r3
 8007622:	f000 f879 	bl	8007718 <twoIntsToArray>
	menuItemChangeValue(&menu, CHRONO, CHRONO_LEVEL, buffer, INTER_COLON, 0);
 8007626:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <interfaceWrite+0x25c>)
 8007628:	482c      	ldr	r0, [pc, #176]	; (80076dc <interfaceWrite+0x260>)
 800762a:	2200      	movs	r2, #0
 800762c:	9201      	str	r2, [sp, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	9200      	str	r2, [sp, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	2101      	movs	r1, #1
 8007636:	f001 f869 	bl	800870c <menuItemChangeValue>

	oneIntToArray(buffer, 0, chronograph.chrono.hour);
 800763a:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <interfaceWrite+0x258>)
 800763c:	221b      	movs	r2, #27
 800763e:	569a      	ldrsb	r2, [r3, r2]
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <interfaceWrite+0x25c>)
 8007642:	2100      	movs	r1, #0
 8007644:	0018      	movs	r0, r3
 8007646:	f000 f8be 	bl	80077c6 <oneIntToArray>
	buffer[3] = 'h';
 800764a:	4b23      	ldr	r3, [pc, #140]	; (80076d8 <interfaceWrite+0x25c>)
 800764c:	2268      	movs	r2, #104	; 0x68
 800764e:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, CHRONO_HOURS, CHRONO_HOURS_LEVEL, buffer, INTER_DISABLED, 0);
 8007650:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <interfaceWrite+0x25c>)
 8007652:	4822      	ldr	r0, [pc, #136]	; (80076dc <interfaceWrite+0x260>)
 8007654:	2200      	movs	r2, #0
 8007656:	9201      	str	r2, [sp, #4]
 8007658:	2204      	movs	r2, #4
 800765a:	9200      	str	r2, [sp, #0]
 800765c:	2201      	movs	r2, #1
 800765e:	2103      	movs	r1, #3
 8007660:	f001 f854 	bl	800870c <menuItemChangeValue>

	oneIntToArray(buffer, 2, chronograph.chrono.hundredth);
 8007664:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <interfaceWrite+0x258>)
 8007666:	221e      	movs	r2, #30
 8007668:	569a      	ldrsb	r2, [r3, r2]
 800766a:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <interfaceWrite+0x25c>)
 800766c:	2102      	movs	r1, #2
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f8a9 	bl	80077c6 <oneIntToArray>
	menuItemChangeValue(&menu, CHRONO_HUNDREDTHS, CHRONO_HUNDREDTHS_LEVEL, buffer, INTER_DOT, 0);
 8007674:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <interfaceWrite+0x25c>)
 8007676:	4819      	ldr	r0, [pc, #100]	; (80076dc <interfaceWrite+0x260>)
 8007678:	2200      	movs	r2, #0
 800767a:	9201      	str	r2, [sp, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	9200      	str	r2, [sp, #0]
 8007680:	2201      	movs	r2, #1
 8007682:	2102      	movs	r1, #2
 8007684:	f001 f842 	bl	800870c <menuItemChangeValue>

	//								WRITE TEMPERATURE


//direct
	uint32_t temperature = adcTemperature(adcRead(&hadc1));
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <interfaceWrite+0x264>)
 800768a:	0018      	movs	r0, r3
 800768c:	f7ff fea8 	bl	80073e0 <adcRead>
 8007690:	0003      	movs	r3, r0
 8007692:	0018      	movs	r0, r3
 8007694:	f7ff febe 	bl	8007414 <adcTemperature>
 8007698:	0003      	movs	r3, r0
 800769a:	607b      	str	r3, [r7, #4]
//	uint32_t temperature = adcAveraging(adcTemperature(adcRead(&hadc1)), temperatureArray, sizeof(temperatureArray));

	//modal
//	temperature

	oneIntToArray(buffer, 0, temperature);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	b25a      	sxtb	r2, r3
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <interfaceWrite+0x25c>)
 80076a2:	2100      	movs	r1, #0
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 f88e 	bl	80077c6 <oneIntToArray>
	buffer[2] = '^';
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <interfaceWrite+0x25c>)
 80076ac:	225e      	movs	r2, #94	; 0x5e
 80076ae:	709a      	strb	r2, [r3, #2]
	buffer[3] = 'C';
 80076b0:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <interfaceWrite+0x25c>)
 80076b2:	2243      	movs	r2, #67	; 0x43
 80076b4:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, TEMPERATURE, TEMPERATURE_LEVEL, buffer, INTER_DISABLED, 0);
 80076b6:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <interfaceWrite+0x25c>)
 80076b8:	4808      	ldr	r0, [pc, #32]	; (80076dc <interfaceWrite+0x260>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	9201      	str	r2, [sp, #4]
 80076be:	2204      	movs	r2, #4
 80076c0:	9200      	str	r2, [sp, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	2102      	movs	r1, #2
 80076c6:	f001 f821 	bl	800870c <menuItemChangeValue>


}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b002      	add	sp, #8
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	20001190 	.word	0x20001190
 80076d8:	20000030 	.word	0x20000030
 80076dc:	20000fec 	.word	0x20000fec
 80076e0:	2000122c 	.word	0x2000122c

080076e4 <interfaceShowActual>:

void interfaceShowActual(void) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
	LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <interfaceShowActual+0x28>)
 80076ea:	4809      	ldr	r0, [pc, #36]	; (8007710 <interfaceShowActual+0x2c>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	2100      	movs	r1, #0
 80076f0:	f7ff fde8 	bl	80072c4 <LEDstr>
	LEDdot(&display, menu.current.value2);
 80076f4:	4a07      	ldr	r2, [pc, #28]	; (8007714 <interfaceShowActual+0x30>)
 80076f6:	23a7      	movs	r3, #167	; 0xa7
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	5cd2      	ldrb	r2, [r2, r3]
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <interfaceShowActual+0x2c>)
 80076fe:	0011      	movs	r1, r2
 8007700:	0018      	movs	r0, r3
 8007702:	f7ff fe2d 	bl	8007360 <LEDdot>
}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20001136 	.word	0x20001136
 8007710:	200011b8 	.word	0x200011b8
 8007714:	20000fec 	.word	0x20000fec

08007718 <twoIntsToArray>:

void twoIntsToArray(char *destination, int8_t int1, int8_t int2) {
 8007718:	b5b0      	push	{r4, r5, r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	0008      	movs	r0, r1
 8007722:	0011      	movs	r1, r2
 8007724:	1cfb      	adds	r3, r7, #3
 8007726:	1c02      	adds	r2, r0, #0
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	1cbb      	adds	r3, r7, #2
 800772c:	1c0a      	adds	r2, r1, #0
 800772e:	701a      	strb	r2, [r3, #0]
	memset(destination, 0, sizeof(buffer));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2204      	movs	r2, #4
 8007734:	2100      	movs	r1, #0
 8007736:	0018      	movs	r0, r3
 8007738:	f002 fc51 	bl	8009fde <memset>

	char halfBuffer1[2];
	char halfBuffer2[2];

	itoa(int1, halfBuffer1, 10);
 800773c:	1cfb      	adds	r3, r7, #3
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b25b      	sxtb	r3, r3
 8007742:	240c      	movs	r4, #12
 8007744:	1939      	adds	r1, r7, r4
 8007746:	220a      	movs	r2, #10
 8007748:	0018      	movs	r0, r3
 800774a:	f002 fc3b 	bl	8009fc4 <itoa>
	itoa(int2, halfBuffer2, 10);
 800774e:	1cbb      	adds	r3, r7, #2
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b25b      	sxtb	r3, r3
 8007754:	2508      	movs	r5, #8
 8007756:	1979      	adds	r1, r7, r5
 8007758:	220a      	movs	r2, #10
 800775a:	0018      	movs	r0, r3
 800775c:	f002 fc32 	bl	8009fc4 <itoa>

	destination[0] = halfBuffer1[0];
 8007760:	0021      	movs	r1, r4
 8007762:	187b      	adds	r3, r7, r1
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	701a      	strb	r2, [r3, #0]
	destination[1] = halfBuffer1[1];
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3301      	adds	r3, #1
 800776e:	187a      	adds	r2, r7, r1
 8007770:	7852      	ldrb	r2, [r2, #1]
 8007772:	701a      	strb	r2, [r3, #0]
	destination[2] = halfBuffer2[0];
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3302      	adds	r3, #2
 8007778:	197a      	adds	r2, r7, r5
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
	destination[3] = halfBuffer2[1];
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3303      	adds	r3, #3
 8007782:	197a      	adds	r2, r7, r5
 8007784:	7852      	ldrb	r2, [r2, #1]
 8007786:	701a      	strb	r2, [r3, #0]

	if (destination[1] == 0) {
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3301      	adds	r3, #1
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d107      	bne.n	80077a2 <twoIntsToArray+0x8a>
		destination[1] = destination[0];
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3301      	adds	r3, #1
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	701a      	strb	r2, [r3, #0]
		destination[0] = '0';
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2230      	movs	r2, #48	; 0x30
 80077a0:	701a      	strb	r2, [r3, #0]
	}
	if (destination[3] == 0) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3303      	adds	r3, #3
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d108      	bne.n	80077be <twoIntsToArray+0xa6>
		destination[3] = destination[2];
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3303      	adds	r3, #3
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7892      	ldrb	r2, [r2, #2]
 80077b4:	701a      	strb	r2, [r3, #0]
		destination[2] = '0';
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3302      	adds	r3, #2
 80077ba:	2230      	movs	r2, #48	; 0x30
 80077bc:	701a      	strb	r2, [r3, #0]
	}
}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	46bd      	mov	sp, r7
 80077c2:	b004      	add	sp, #16
 80077c4:	bdb0      	pop	{r4, r5, r7, pc}

080077c6 <oneIntToArray>:

void oneIntToArray(char *destination, uint8_t offset, int8_t integer) {
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	0008      	movs	r0, r1
 80077d0:	0011      	movs	r1, r2
 80077d2:	1cfb      	adds	r3, r7, #3
 80077d4:	1c02      	adds	r2, r0, #0
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	1cbb      	adds	r3, r7, #2
 80077da:	1c0a      	adds	r2, r1, #0
 80077dc:	701a      	strb	r2, [r3, #0]
	memset(destination, 0, sizeof(buffer));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2204      	movs	r2, #4
 80077e2:	2100      	movs	r1, #0
 80077e4:	0018      	movs	r0, r3
 80077e6:	f002 fbfa 	bl	8009fde <memset>
	itoa(integer, &destination[offset], 10);
 80077ea:	1cbb      	adds	r3, r7, #2
 80077ec:	2000      	movs	r0, #0
 80077ee:	5618      	ldrsb	r0, [r3, r0]
 80077f0:	1cfb      	adds	r3, r7, #3
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	18d3      	adds	r3, r2, r3
 80077f8:	220a      	movs	r2, #10
 80077fa:	0019      	movs	r1, r3
 80077fc:	f002 fbe2 	bl	8009fc4 <itoa>

	if (destination[offset + 1] == 0) {
 8007800:	1cfb      	adds	r3, r7, #3
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	18d3      	adds	r3, r2, r3
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d110      	bne.n	8007832 <oneIntToArray+0x6c>
		destination[offset + 1] = destination[offset];
 8007810:	1cfb      	adds	r3, r7, #3
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	18d2      	adds	r2, r2, r3
 8007818:	1cfb      	adds	r3, r7, #3
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	18cb      	adds	r3, r1, r3
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	701a      	strb	r2, [r3, #0]
		destination[offset] = '0';
 8007826:	1cfb      	adds	r3, r7, #3
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	18d3      	adds	r3, r2, r3
 800782e:	2230      	movs	r2, #48	; 0x30
 8007830:	701a      	strb	r2, [r3, #0]
	}
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	46bd      	mov	sp, r7
 8007836:	b002      	add	sp, #8
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <encoderAction>:
 *      Author: bartosz
 */

#include "interrupts.h"

void encoderAction(uint8_t direction) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	0002      	movs	r2, r0
 8007844:	1dfb      	adds	r3, r7, #7
 8007846:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 8007848:	1dfb      	adds	r3, r7, #7
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d15c      	bne.n	800790a <encoderAction+0xce>

		if (menu.current.entry == CHRONO_START
 8007850:	4a9c      	ldr	r2, [pc, #624]	; (8007ac4 <encoderAction+0x288>)
 8007852:	23a8      	movs	r3, #168	; 0xa8
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	5cd3      	ldrb	r3, [r2, r3]
 8007858:	2b04      	cmp	r3, #4
 800785a:	d123      	bne.n	80078a4 <encoderAction+0x68>
				&& menu.current.level == CHRONO_START_LEVEL) {
 800785c:	4a99      	ldr	r2, [pc, #612]	; (8007ac4 <encoderAction+0x288>)
 800785e:	2352      	movs	r3, #82	; 0x52
 8007860:	33ff      	adds	r3, #255	; 0xff
 8007862:	5cd3      	ldrb	r3, [r2, r3]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d11d      	bne.n	80078a4 <encoderAction+0x68>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8007868:	4b97      	ldr	r3, [pc, #604]	; (8007ac8 <encoderAction+0x28c>)
 800786a:	2224      	movs	r2, #36	; 0x24
 800786c:	5c9b      	ldrb	r3, [r3, r2]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d104      	bne.n	800787c <encoderAction+0x40>
				rtcStartChrono(&chronograph);
 8007872:	4b95      	ldr	r3, [pc, #596]	; (8007ac8 <encoderAction+0x28c>)
 8007874:	0018      	movs	r0, r3
 8007876:	f001 fe69 	bl	800954c <rtcStartChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800787a:	e045      	b.n	8007908 <encoderAction+0xcc>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800787c:	4b92      	ldr	r3, [pc, #584]	; (8007ac8 <encoderAction+0x28c>)
 800787e:	2224      	movs	r2, #36	; 0x24
 8007880:	5c9b      	ldrb	r3, [r3, r2]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d104      	bne.n	8007890 <encoderAction+0x54>
				rtcStopChrono(&chronograph);
 8007886:	4b90      	ldr	r3, [pc, #576]	; (8007ac8 <encoderAction+0x28c>)
 8007888:	0018      	movs	r0, r3
 800788a:	f001 feb3 	bl	80095f4 <rtcStopChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800788e:	e03b      	b.n	8007908 <encoderAction+0xcc>
			} else if(chronograph.chronoMode == RTC_CHRONO_MODE_STOP){
 8007890:	4b8d      	ldr	r3, [pc, #564]	; (8007ac8 <encoderAction+0x28c>)
 8007892:	2224      	movs	r2, #36	; 0x24
 8007894:	5c9b      	ldrb	r3, [r3, r2]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d136      	bne.n	8007908 <encoderAction+0xcc>
				rtcResumeChrono(&chronograph);
 800789a:	4b8b      	ldr	r3, [pc, #556]	; (8007ac8 <encoderAction+0x28c>)
 800789c:	0018      	movs	r0, r3
 800789e:	f001 ff5b 	bl	8009758 <rtcResumeChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 80078a2:	e031      	b.n	8007908 <encoderAction+0xcc>
			}

		} else if (menu.current.entry == CHRONO_RESET && menu.current.level == CHRONO_RESET_LEVEL) {
 80078a4:	4a87      	ldr	r2, [pc, #540]	; (8007ac4 <encoderAction+0x288>)
 80078a6:	23a8      	movs	r3, #168	; 0xa8
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	5cd3      	ldrb	r3, [r2, r3]
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d10a      	bne.n	80078c6 <encoderAction+0x8a>
 80078b0:	4a84      	ldr	r2, [pc, #528]	; (8007ac4 <encoderAction+0x288>)
 80078b2:	2352      	movs	r3, #82	; 0x52
 80078b4:	33ff      	adds	r3, #255	; 0xff
 80078b6:	5cd3      	ldrb	r3, [r2, r3]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d104      	bne.n	80078c6 <encoderAction+0x8a>
			rtcResetChrono(&chronograph);
 80078bc:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <encoderAction+0x28c>)
 80078be:	0018      	movs	r0, r3
 80078c0:	f001 ff56 	bl	8009770 <rtcResetChrono>
 80078c4:	e021      	b.n	800790a <encoderAction+0xce>
		} else {

			if (menuSwitch(&menu, MENU_ENTER)) {
 80078c6:	4b7f      	ldr	r3, [pc, #508]	; (8007ac4 <encoderAction+0x288>)
 80078c8:	2100      	movs	r1, #0
 80078ca:	0018      	movs	r0, r3
 80078cc:	f001 f864 	bl	8008998 <menuSwitch>
 80078d0:	1e03      	subs	r3, r0, #0
 80078d2:	d00f      	beq.n	80078f4 <encoderAction+0xb8>
				LEDstr(&display, 0, menu.current.value,
 80078d4:	4a7d      	ldr	r2, [pc, #500]	; (8007acc <encoderAction+0x290>)
 80078d6:	487e      	ldr	r0, [pc, #504]	; (8007ad0 <encoderAction+0x294>)
 80078d8:	2301      	movs	r3, #1
 80078da:	2100      	movs	r1, #0
 80078dc:	f7ff fcf2 	bl	80072c4 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 80078e0:	4a78      	ldr	r2, [pc, #480]	; (8007ac4 <encoderAction+0x288>)
 80078e2:	23a7      	movs	r3, #167	; 0xa7
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	5cd2      	ldrb	r2, [r2, r3]
 80078e8:	4b79      	ldr	r3, [pc, #484]	; (8007ad0 <encoderAction+0x294>)
 80078ea:	0011      	movs	r1, r2
 80078ec:	0018      	movs	r0, r3
 80078ee:	f7ff fd37 	bl	8007360 <LEDdot>
 80078f2:	e00a      	b.n	800790a <encoderAction+0xce>
			} else { //if theres no child under item
				if (menu.current.value3) { //check thats editable
 80078f4:	4a73      	ldr	r2, [pc, #460]	; (8007ac4 <encoderAction+0x288>)
 80078f6:	2350      	movs	r3, #80	; 0x50
 80078f8:	33ff      	adds	r3, #255	; 0xff
 80078fa:	5cd3      	ldrb	r3, [r2, r3]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <encoderAction+0xce>
					flags[FLAG_LOCKED] = 1;
 8007900:	4b74      	ldr	r3, [pc, #464]	; (8007ad4 <encoderAction+0x298>)
 8007902:	2201      	movs	r2, #1
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e000      	b.n	800790a <encoderAction+0xce>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8007908:	46c0      	nop			; (mov r8, r8)
			}
		}

	}

	if (direction == ENCODER_ACTION_EXIT) {
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b03      	cmp	r3, #3
 8007910:	d11d      	bne.n	800794e <encoderAction+0x112>

		if (!flags[FLAG_LOCKED]) {
 8007912:	4b70      	ldr	r3, [pc, #448]	; (8007ad4 <encoderAction+0x298>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d116      	bne.n	8007948 <encoderAction+0x10c>
			if (menuSwitch(&menu, MENU_EXIT)) {
 800791a:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <encoderAction+0x288>)
 800791c:	2101      	movs	r1, #1
 800791e:	0018      	movs	r0, r3
 8007920:	f001 f83a 	bl	8008998 <menuSwitch>
 8007924:	1e03      	subs	r3, r0, #0
 8007926:	d012      	beq.n	800794e <encoderAction+0x112>
				LEDstr(&display, 0, menu.current.value,
 8007928:	4a68      	ldr	r2, [pc, #416]	; (8007acc <encoderAction+0x290>)
 800792a:	4869      	ldr	r0, [pc, #420]	; (8007ad0 <encoderAction+0x294>)
 800792c:	2302      	movs	r3, #2
 800792e:	2100      	movs	r1, #0
 8007930:	f7ff fcc8 	bl	80072c4 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8007934:	4a63      	ldr	r2, [pc, #396]	; (8007ac4 <encoderAction+0x288>)
 8007936:	23a7      	movs	r3, #167	; 0xa7
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	5cd2      	ldrb	r2, [r2, r3]
 800793c:	4b64      	ldr	r3, [pc, #400]	; (8007ad0 <encoderAction+0x294>)
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff fd0d 	bl	8007360 <LEDdot>
 8007946:	e002      	b.n	800794e <encoderAction+0x112>
			}
		} else {
			flags[FLAG_LOCKED] = 0;
 8007948:	4b62      	ldr	r3, [pc, #392]	; (8007ad4 <encoderAction+0x298>)
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
		}

	}

	if (direction == ENCODER_ACTION_LEFT) {
 800794e:	1dfb      	adds	r3, r7, #7
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d155      	bne.n	8007a02 <encoderAction+0x1c6>

		if (!flags[FLAG_LOCKED]) {
 8007956:	4b5f      	ldr	r3, [pc, #380]	; (8007ad4 <encoderAction+0x298>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <encoderAction+0x150>
			if (menuSwitch(&menu, MENU_UP)) {
 800795e:	4b59      	ldr	r3, [pc, #356]	; (8007ac4 <encoderAction+0x288>)
 8007960:	2102      	movs	r1, #2
 8007962:	0018      	movs	r0, r3
 8007964:	f001 f818 	bl	8008998 <menuSwitch>
 8007968:	1e03      	subs	r3, r0, #0
 800796a:	d04b      	beq.n	8007a04 <encoderAction+0x1c8>
				LEDstr(&display, 0, menu.current.value,
 800796c:	4a57      	ldr	r2, [pc, #348]	; (8007acc <encoderAction+0x290>)
 800796e:	4858      	ldr	r0, [pc, #352]	; (8007ad0 <encoderAction+0x294>)
 8007970:	2302      	movs	r3, #2
 8007972:	2100      	movs	r1, #0
 8007974:	f7ff fca6 	bl	80072c4 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8007978:	4a52      	ldr	r2, [pc, #328]	; (8007ac4 <encoderAction+0x288>)
 800797a:	23a7      	movs	r3, #167	; 0xa7
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	5cd2      	ldrb	r2, [r2, r3]
 8007980:	4b53      	ldr	r3, [pc, #332]	; (8007ad0 <encoderAction+0x294>)
 8007982:	0011      	movs	r1, r2
 8007984:	0018      	movs	r0, r3
 8007986:	f7ff fceb 	bl	8007360 <LEDdot>
 800798a:	e03b      	b.n	8007a04 <encoderAction+0x1c8>
			}
		} else {

			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 800798c:	4a4d      	ldr	r2, [pc, #308]	; (8007ac4 <encoderAction+0x288>)
 800798e:	2352      	movs	r3, #82	; 0x52
 8007990:	33ff      	adds	r3, #255	; 0xff
 8007992:	5cd3      	ldrb	r3, [r2, r3]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d134      	bne.n	8007a02 <encoderAction+0x1c6>

				switch (menu.current.entry) {
 8007998:	4a4a      	ldr	r2, [pc, #296]	; (8007ac4 <encoderAction+0x288>)
 800799a:	23a8      	movs	r3, #168	; 0xa8
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	5cd3      	ldrb	r3, [r2, r3]
 80079a0:	2b05      	cmp	r3, #5
 80079a2:	d82f      	bhi.n	8007a04 <encoderAction+0x1c8>
 80079a4:	009a      	lsls	r2, r3, #2
 80079a6:	4b4c      	ldr	r3, [pc, #304]	; (8007ad8 <encoderAction+0x29c>)
 80079a8:	18d3      	adds	r3, r2, r3
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	469f      	mov	pc, r3
				case SETTINGS_CLOCK_HOUR:
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 80079ae:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <encoderAction+0x28c>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	2100      	movs	r1, #0
 80079b4:	0018      	movs	r0, r3
 80079b6:	f001 feff 	bl	80097b8 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80079ba:	e023      	b.n	8007a04 <encoderAction+0x1c8>
				case SETTINGS_CLOCK_MINUTE:
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 80079bc:	4b42      	ldr	r3, [pc, #264]	; (8007ac8 <encoderAction+0x28c>)
 80079be:	2201      	movs	r2, #1
 80079c0:	2101      	movs	r1, #1
 80079c2:	0018      	movs	r0, r3
 80079c4:	f001 fef8 	bl	80097b8 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80079c8:	e01c      	b.n	8007a04 <encoderAction+0x1c8>
				case SETTINGS_CLOCK_SECONDS:
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 80079ca:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <encoderAction+0x28c>)
 80079cc:	2201      	movs	r2, #1
 80079ce:	2102      	movs	r1, #2
 80079d0:	0018      	movs	r0, r3
 80079d2:	f001 fef1 	bl	80097b8 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80079d6:	e015      	b.n	8007a04 <encoderAction+0x1c8>
				case SETTINGS_CALENDAR_DAY:
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 80079d8:	4b3b      	ldr	r3, [pc, #236]	; (8007ac8 <encoderAction+0x28c>)
 80079da:	2201      	movs	r2, #1
 80079dc:	2103      	movs	r1, #3
 80079de:	0018      	movs	r0, r3
 80079e0:	f001 feea 	bl	80097b8 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80079e4:	e00e      	b.n	8007a04 <encoderAction+0x1c8>
				case SETTINGS_CALENDAR_MONTH:
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 80079e6:	4b38      	ldr	r3, [pc, #224]	; (8007ac8 <encoderAction+0x28c>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	2104      	movs	r1, #4
 80079ec:	0018      	movs	r0, r3
 80079ee:	f001 fee3 	bl	80097b8 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80079f2:	e007      	b.n	8007a04 <encoderAction+0x1c8>
				case SETTINGS_CALENDAR_YEAR:
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 80079f4:	4b34      	ldr	r3, [pc, #208]	; (8007ac8 <encoderAction+0x28c>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	2105      	movs	r1, #5
 80079fa:	0018      	movs	r0, r3
 80079fc:	f001 fedc 	bl	80097b8 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8007a00:	e000      	b.n	8007a04 <encoderAction+0x1c8>
				}

			}
 8007a02:	46c0      	nop			; (mov r8, r8)

		}

	}
	if (direction == ENCODER_ACTION_RIGHT) {
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d155      	bne.n	8007ab8 <encoderAction+0x27c>

		if (!flags[FLAG_LOCKED]) {
 8007a0c:	4b31      	ldr	r3, [pc, #196]	; (8007ad4 <encoderAction+0x298>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d116      	bne.n	8007a42 <encoderAction+0x206>
			if (menuSwitch(&menu, MENU_DOWN)) {
 8007a14:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <encoderAction+0x288>)
 8007a16:	2103      	movs	r1, #3
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f000 ffbd 	bl	8008998 <menuSwitch>
 8007a1e:	1e03      	subs	r3, r0, #0
 8007a20:	d04b      	beq.n	8007aba <encoderAction+0x27e>
				LEDstr(&display, 0, menu.current.value,
 8007a22:	4a2a      	ldr	r2, [pc, #168]	; (8007acc <encoderAction+0x290>)
 8007a24:	482a      	ldr	r0, [pc, #168]	; (8007ad0 <encoderAction+0x294>)
 8007a26:	2301      	movs	r3, #1
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f7ff fc4b 	bl	80072c4 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 8007a2e:	4a25      	ldr	r2, [pc, #148]	; (8007ac4 <encoderAction+0x288>)
 8007a30:	23a7      	movs	r3, #167	; 0xa7
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	5cd2      	ldrb	r2, [r2, r3]
 8007a36:	4b26      	ldr	r3, [pc, #152]	; (8007ad0 <encoderAction+0x294>)
 8007a38:	0011      	movs	r1, r2
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7ff fc90 	bl	8007360 <LEDdot>
			}

		}

	}
}
 8007a40:	e03b      	b.n	8007aba <encoderAction+0x27e>
			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 8007a42:	4a20      	ldr	r2, [pc, #128]	; (8007ac4 <encoderAction+0x288>)
 8007a44:	2352      	movs	r3, #82	; 0x52
 8007a46:	33ff      	adds	r3, #255	; 0xff
 8007a48:	5cd3      	ldrb	r3, [r2, r3]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d134      	bne.n	8007ab8 <encoderAction+0x27c>
				switch (menu.current.entry) {
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <encoderAction+0x288>)
 8007a50:	23a8      	movs	r3, #168	; 0xa8
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	5cd3      	ldrb	r3, [r2, r3]
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	d82f      	bhi.n	8007aba <encoderAction+0x27e>
 8007a5a:	009a      	lsls	r2, r3, #2
 8007a5c:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <encoderAction+0x2a0>)
 8007a5e:	18d3      	adds	r3, r2, r3
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	469f      	mov	pc, r3
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <encoderAction+0x28c>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f001 fea4 	bl	80097b8 <rtcChangeValue>
					break;
 8007a70:	e023      	b.n	8007aba <encoderAction+0x27e>
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <encoderAction+0x28c>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	2101      	movs	r1, #1
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f001 fe9d 	bl	80097b8 <rtcChangeValue>
					break;
 8007a7e:	e01c      	b.n	8007aba <encoderAction+0x27e>
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <encoderAction+0x28c>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	2102      	movs	r1, #2
 8007a86:	0018      	movs	r0, r3
 8007a88:	f001 fe96 	bl	80097b8 <rtcChangeValue>
					break;
 8007a8c:	e015      	b.n	8007aba <encoderAction+0x27e>
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <encoderAction+0x28c>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	2103      	movs	r1, #3
 8007a94:	0018      	movs	r0, r3
 8007a96:	f001 fe8f 	bl	80097b8 <rtcChangeValue>
					break;
 8007a9a:	e00e      	b.n	8007aba <encoderAction+0x27e>
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <encoderAction+0x28c>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2104      	movs	r1, #4
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f001 fe88 	bl	80097b8 <rtcChangeValue>
					break;
 8007aa8:	e007      	b.n	8007aba <encoderAction+0x27e>
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <encoderAction+0x28c>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	2105      	movs	r1, #5
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f001 fe81 	bl	80097b8 <rtcChangeValue>
					break;
 8007ab6:	e000      	b.n	8007aba <encoderAction+0x27e>
			}
 8007ab8:	46c0      	nop			; (mov r8, r8)
}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b002      	add	sp, #8
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	20000fec 	.word	0x20000fec
 8007ac8:	20001190 	.word	0x20001190
 8007acc:	20001136 	.word	0x20001136
 8007ad0:	200011b8 	.word	0x200011b8
 8007ad4:	20000fe8 	.word	0x20000fe8
 8007ad8:	0800a308 	.word	0x0800a308
 8007adc:	0800a320 	.word	0x0800a320

08007ae0 <GPIO_EXTI_Rising_FallingCallback>:

void GPIO_EXTI_Rising_FallingCallback(uint16_t GPIO_Pin) {
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	1dbb      	adds	r3, r7, #6
 8007aea:	801a      	strh	r2, [r3, #0]

	TIM2->CNT = 0; // reset timer if interrupt occurs
 8007aec:	2380      	movs	r3, #128	; 0x80
 8007aee:	05db      	lsls	r3, r3, #23
 8007af0:	2200      	movs	r2, #0
 8007af2:	625a      	str	r2, [r3, #36]	; 0x24

	if (GPIO_Pin == ENC1_Pin) {
 8007af4:	1dbb      	adds	r3, r7, #6
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	2b80      	cmp	r3, #128	; 0x80
 8007afa:	d111      	bne.n	8007b20 <GPIO_EXTI_Rising_FallingCallback+0x40>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007afc:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007afe:	2180      	movs	r1, #128	; 0x80
 8007b00:	0018      	movs	r0, r3
 8007b02:	f7fb ff59 	bl	80039b8 <HAL_GPIO_ReadPin>
 8007b06:	0003      	movs	r3, r0
 8007b08:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8007b0a:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007b0c:	2140      	movs	r1, #64	; 0x40
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f7fb ff52 	bl	80039b8 <HAL_GPIO_ReadPin>
 8007b14:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d002      	beq.n	8007b20 <GPIO_EXTI_Rising_FallingCallback+0x40>
			encoderAction(ENCODER_ACTION_LEFT);
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	f7ff fe8e 	bl	800783c <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 8007b20:	1dbb      	adds	r3, r7, #6
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d111      	bne.n	8007b4c <GPIO_EXTI_Rising_FallingCallback+0x6c>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007b28:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007b2a:	2180      	movs	r1, #128	; 0x80
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f7fb ff43 	bl	80039b8 <HAL_GPIO_ReadPin>
 8007b32:	0003      	movs	r3, r0
 8007b34:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8007b36:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007b38:	2140      	movs	r1, #64	; 0x40
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7fb ff3c 	bl	80039b8 <HAL_GPIO_ReadPin>
 8007b40:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007b42:	429c      	cmp	r4, r3
 8007b44:	d002      	beq.n	8007b4c <GPIO_EXTI_Rising_FallingCallback+0x6c>
			encoderAction(ENCODER_ACTION_RIGHT);
 8007b46:	2001      	movs	r0, #1
 8007b48:	f7ff fe78 	bl	800783c <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 8007b4c:	1dbb      	adds	r3, r7, #6
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d102      	bne.n	8007b5a <GPIO_EXTI_Rising_FallingCallback+0x7a>
		encoderAction(ENCODER_ACTION_ENTER);
 8007b54:	2002      	movs	r0, #2
 8007b56:	f7ff fe71 	bl	800783c <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 8007b5a:	1dbb      	adds	r3, r7, #6
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d102      	bne.n	8007b68 <GPIO_EXTI_Rising_FallingCallback+0x88>
		encoderAction(ENCODER_ACTION_EXIT);
 8007b62:	2003      	movs	r0, #3
 8007b64:	f7ff fe6a 	bl	800783c <encoderAction>
	}

	if (GPIO_Pin == MODE_Pin) {

	}
}
 8007b68:	46c0      	nop			; (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b003      	add	sp, #12
 8007b6e:	bd90      	pop	{r4, r7, pc}
 8007b70:	50000400 	.word	0x50000400

08007b74 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	0002      	movs	r2, r0
 8007b7c:	1dbb      	adds	r3, r7, #6
 8007b7e:	801a      	strh	r2, [r3, #0]
	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 8007b80:	1dbb      	adds	r3, r7, #6
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7ff ffab 	bl	8007ae0 <GPIO_EXTI_Rising_FallingCallback>
}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	b002      	add	sp, #8
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	0002      	movs	r2, r0
 8007b9a:	1dbb      	adds	r3, r7, #6
 8007b9c:	801a      	strh	r2, [r3, #0]

	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 8007b9e:	1dbb      	adds	r3, r7, #6
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f7ff ff9c 	bl	8007ae0 <GPIO_EXTI_Rising_FallingCallback>

}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d103      	bne.n	8007bca <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f7fe fd93 	bl	80066f0 <LEDmultiplexing>
	}
	if (htim->Instance == TIM2) {
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	05db      	lsls	r3, r3, #23
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d102      	bne.n	8007bdc <HAL_TIM_PeriodElapsedCallback+0x2c>
		flags[FLAG_SLEEP] = 1;
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	705a      	strb	r2, [r3, #1]
	}
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b002      	add	sp, #8
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	200011b8 	.word	0x200011b8
 8007bec:	20000fe8 	.word	0x20000fe8

08007bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b096      	sub	sp, #88	; 0x58
 8007bf4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007bf6:	f7fa fc6f 	bl	80024d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007bfa:	f000 fa43 	bl	8008084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007bfe:	f000 fcb7 	bl	8008570 <MX_GPIO_Init>
  MX_TIM1_Init();
 8007c02:	f000 fbb5 	bl	8008370 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8007c06:	f000 fc65 	bl	80084d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8007c0a:	f000 fb05 	bl	8008218 <MX_I2C1_Init>
  MX_TIM2_Init();
 8007c0e:	f000 fc0b 	bl	8008428 <MX_TIM2_Init>
  MX_RTC_Init();
 8007c12:	f000 fb41 	bl	8008298 <MX_RTC_Init>
  MX_ADC1_Init();
 8007c16:	f000 fa8b 	bl	8008130 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8007c1a:	4bfb      	ldr	r3, [pc, #1004]	; (8008008 <main+0x418>)
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f7fd fb37 	bl	8005290 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8007c22:	4bfa      	ldr	r3, [pc, #1000]	; (800800c <main+0x41c>)
 8007c24:	0018      	movs	r0, r3
 8007c26:	f7fd fb33 	bl	8005290 <HAL_TIM_Base_Start_IT>

	adcInit(&hadc1);
 8007c2a:	4bf9      	ldr	r3, [pc, #996]	; (8008010 <main+0x420>)
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f7ff fba7 	bl	8007380 <adcInit>
	adcSetChannel(&hadc1, ADC_CHANNEL_TEMPSENSOR);
 8007c32:	4af8      	ldr	r2, [pc, #992]	; (8008014 <main+0x424>)
 8007c34:	4bf6      	ldr	r3, [pc, #984]	; (8008010 <main+0x420>)
 8007c36:	0011      	movs	r1, r2
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f7ff fbad 	bl	8007398 <adcSetChannel>
//	do sprawdzenia:
//	dłuższy sampling time
//	filtrowanie na wyjściu przetwornicy, a nie przy MCU.

//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 8007c3e:	23a0      	movs	r3, #160	; 0xa0
 8007c40:	05da      	lsls	r2, r3, #23
 8007c42:	49f5      	ldr	r1, [pc, #980]	; (8008018 <main+0x428>)
 8007c44:	48f5      	ldr	r0, [pc, #980]	; (800801c <main+0x42c>)
 8007c46:	2380      	movs	r3, #128	; 0x80
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	9314      	str	r3, [sp, #80]	; 0x50
 8007c4c:	23a0      	movs	r3, #160	; 0xa0
 8007c4e:	05db      	lsls	r3, r3, #23
 8007c50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c52:	2301      	movs	r3, #1
 8007c54:	9312      	str	r3, [sp, #72]	; 0x48
 8007c56:	4bf2      	ldr	r3, [pc, #968]	; (8008020 <main+0x430>)
 8007c58:	9311      	str	r3, [sp, #68]	; 0x44
 8007c5a:	2380      	movs	r3, #128	; 0x80
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	9310      	str	r3, [sp, #64]	; 0x40
 8007c60:	23a0      	movs	r3, #160	; 0xa0
 8007c62:	05db      	lsls	r3, r3, #23
 8007c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c66:	2304      	movs	r3, #4
 8007c68:	930e      	str	r3, [sp, #56]	; 0x38
 8007c6a:	4bed      	ldr	r3, [pc, #948]	; (8008020 <main+0x430>)
 8007c6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	930c      	str	r3, [sp, #48]	; 0x30
 8007c74:	23a0      	movs	r3, #160	; 0xa0
 8007c76:	05db      	lsls	r3, r3, #23
 8007c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c7e:	4be8      	ldr	r3, [pc, #928]	; (8008020 <main+0x430>)
 8007c80:	9309      	str	r3, [sp, #36]	; 0x24
 8007c82:	2340      	movs	r3, #64	; 0x40
 8007c84:	9308      	str	r3, [sp, #32]
 8007c86:	23a0      	movs	r3, #160	; 0xa0
 8007c88:	05db      	lsls	r3, r3, #23
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	9306      	str	r3, [sp, #24]
 8007c92:	23a0      	movs	r3, #160	; 0xa0
 8007c94:	05db      	lsls	r3, r3, #23
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	23a0      	movs	r3, #160	; 0xa0
 8007c9e:	05db      	lsls	r3, r3, #23
 8007ca0:	9303      	str	r3, [sp, #12]
 8007ca2:	2380      	movs	r3, #128	; 0x80
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	9302      	str	r3, [sp, #8]
 8007ca8:	23a0      	movs	r3, #160	; 0xa0
 8007caa:	05db      	lsls	r3, r3, #23
 8007cac:	9301      	str	r3, [sp, #4]
 8007cae:	2380      	movs	r3, #128	; 0x80
 8007cb0:	015b      	lsls	r3, r3, #5
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	0013      	movs	r3, r2
 8007cb6:	2240      	movs	r2, #64	; 0x40
 8007cb8:	f7ff fa4a 	bl	8007150 <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "    ");
 8007cbc:	4ad9      	ldr	r2, [pc, #868]	; (8008024 <main+0x434>)
 8007cbe:	4bd7      	ldr	r3, [pc, #860]	; (800801c <main+0x42c>)
 8007cc0:	0011      	movs	r1, r2
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7ff fac4 	bl	8007250 <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 8007cc8:	48d7      	ldr	r0, [pc, #860]	; (8008028 <main+0x438>)
 8007cca:	2301      	movs	r3, #1
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	23ff      	movs	r3, #255	; 0xff
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	f000 fde8 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, CHRONO_HUNDREDTHS,
 8007cdc:	48d2      	ldr	r0, [pc, #840]	; (8008028 <main+0x438>)
 8007cde:	2305      	movs	r3, #5
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	23ff      	movs	r3, #255	; 0xff
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2101      	movs	r1, #1
 8007cec:	f000 fdde 	bl	80088ac <menuItemInit>
	CHRONO_RESET);
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007cf0:	48cd      	ldr	r0, [pc, #820]	; (8008028 <main+0x438>)
 8007cf2:	23ff      	movs	r3, #255	; 0xff
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	23ff      	movs	r3, #255	; 0xff
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	23ff      	movs	r3, #255	; 0xff
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2103      	movs	r1, #3
 8007d00:	f000 fdd4 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007d04:	48c8      	ldr	r0, [pc, #800]	; (8008028 <main+0x438>)
 8007d06:	23ff      	movs	r3, #255	; 0xff
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	23ff      	movs	r3, #255	; 0xff
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	23ff      	movs	r3, #255	; 0xff
 8007d10:	2200      	movs	r2, #0
 8007d12:	2104      	movs	r1, #4
 8007d14:	f000 fdca 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007d18:	48c3      	ldr	r0, [pc, #780]	; (8008028 <main+0x438>)
 8007d1a:	23ff      	movs	r3, #255	; 0xff
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	23ff      	movs	r3, #255	; 0xff
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	23ff      	movs	r3, #255	; 0xff
 8007d24:	2200      	movs	r2, #0
 8007d26:	2102      	movs	r1, #2
 8007d28:	f000 fdc0 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007d2c:	48be      	ldr	r0, [pc, #760]	; (8008028 <main+0x438>)
 8007d2e:	23ff      	movs	r3, #255	; 0xff
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	23ff      	movs	r3, #255	; 0xff
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	23ff      	movs	r3, #255	; 0xff
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2105      	movs	r1, #5
 8007d3c:	f000 fdb6 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, AZIMUTH, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007d40:	48b9      	ldr	r0, [pc, #740]	; (8008028 <main+0x438>)
 8007d42:	23ff      	movs	r3, #255	; 0xff
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	23ff      	movs	r3, #255	; 0xff
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	23ff      	movs	r3, #255	; 0xff
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2106      	movs	r1, #6
 8007d50:	f000 fdac 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, SETTINGS_CLOCK,
 8007d54:	48b4      	ldr	r0, [pc, #720]	; (8008028 <main+0x438>)
 8007d56:	2309      	movs	r3, #9
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	2306      	movs	r3, #6
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	23ff      	movs	r3, #255	; 0xff
 8007d60:	2200      	movs	r2, #0
 8007d62:	2107      	movs	r1, #7
 8007d64:	f000 fda2 	bl	80088ac <menuItemInit>
	SETTINGS_CORRECTION);

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 8007d68:	48af      	ldr	r0, [pc, #700]	; (8008028 <main+0x438>)
 8007d6a:	23ff      	movs	r3, #255	; 0xff
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	23ff      	movs	r3, #255	; 0xff
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	2201      	movs	r2, #1
 8007d76:	2100      	movs	r1, #0
 8007d78:	f000 fd98 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 8007d7c:	48aa      	ldr	r0, [pc, #680]	; (8008028 <main+0x438>)
 8007d7e:	23ff      	movs	r3, #255	; 0xff
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	23ff      	movs	r3, #255	; 0xff
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	2201      	movs	r2, #1
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	f000 fd8e 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 8007d90:	48a5      	ldr	r0, [pc, #660]	; (8008028 <main+0x438>)
 8007d92:	23ff      	movs	r3, #255	; 0xff
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	23ff      	movs	r3, #255	; 0xff
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	2103      	movs	r1, #3
 8007da0:	f000 fd84 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, CHRONO_HUNDREDTHS, 1, CHRONO, MENU_NONE, MENU_NONE);
 8007da4:	48a0      	ldr	r0, [pc, #640]	; (8008028 <main+0x438>)
 8007da6:	23ff      	movs	r3, #255	; 0xff
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	23ff      	movs	r3, #255	; 0xff
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2301      	movs	r3, #1
 8007db0:	2201      	movs	r2, #1
 8007db2:	2102      	movs	r1, #2
 8007db4:	f000 fd7a 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, CHRONO_START, 1, CHRONO, MENU_NONE, MENU_NONE);
 8007db8:	489b      	ldr	r0, [pc, #620]	; (8008028 <main+0x438>)
 8007dba:	23ff      	movs	r3, #255	; 0xff
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	23ff      	movs	r3, #255	; 0xff
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	f000 fd70 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 8007dcc:	4896      	ldr	r0, [pc, #600]	; (8008028 <main+0x438>)
 8007dce:	23ff      	movs	r3, #255	; 0xff
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	23ff      	movs	r3, #255	; 0xff
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2105      	movs	r1, #5
 8007ddc:	f000 fd66 	bl	80088ac <menuItemInit>
	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, SETTINGS_CLOCK_HOUR,
 8007de0:	4891      	ldr	r0, [pc, #580]	; (8008028 <main+0x438>)
 8007de2:	2302      	movs	r3, #2
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	2307      	movs	r3, #7
 8007dec:	2201      	movs	r2, #1
 8007dee:	2106      	movs	r1, #6
 8007df0:	f000 fd5c 	bl	80088ac <menuItemInit>
	SETTINGS_CLOCK_SECONDS);
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS,
 8007df4:	488c      	ldr	r0, [pc, #560]	; (8008028 <main+0x438>)
 8007df6:	2305      	movs	r3, #5
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	2307      	movs	r3, #7
 8007e00:	2201      	movs	r2, #1
 8007e02:	2107      	movs	r1, #7
 8007e04:	f000 fd52 	bl	80088ac <menuItemInit>
	SETTINGS_CALENDAR_DAY,
	SETTINGS_CALENDAR_YEAR);
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS, MENU_NONE,
 8007e08:	4887      	ldr	r0, [pc, #540]	; (8008028 <main+0x438>)
 8007e0a:	23ff      	movs	r3, #255	; 0xff
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	23ff      	movs	r3, #255	; 0xff
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	2307      	movs	r3, #7
 8007e14:	2201      	movs	r2, #1
 8007e16:	2108      	movs	r1, #8
 8007e18:	f000 fd48 	bl	80088ac <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS, MENU_NONE,
 8007e1c:	4882      	ldr	r0, [pc, #520]	; (8008028 <main+0x438>)
 8007e1e:	23ff      	movs	r3, #255	; 0xff
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	23ff      	movs	r3, #255	; 0xff
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	2307      	movs	r3, #7
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2109      	movs	r1, #9
 8007e2c:	f000 fd3e 	bl	80088ac <menuItemInit>
	MENU_NONE);

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOUR, 2, SETTINGS_CLOCK, MENU_NONE,
 8007e30:	487d      	ldr	r0, [pc, #500]	; (8008028 <main+0x438>)
 8007e32:	23ff      	movs	r3, #255	; 0xff
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	23ff      	movs	r3, #255	; 0xff
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	2306      	movs	r3, #6
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f000 fd34 	bl	80088ac <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_MINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 8007e44:	4878      	ldr	r0, [pc, #480]	; (8008028 <main+0x438>)
 8007e46:	23ff      	movs	r3, #255	; 0xff
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	23ff      	movs	r3, #255	; 0xff
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2306      	movs	r3, #6
 8007e50:	2202      	movs	r2, #2
 8007e52:	2101      	movs	r1, #1
 8007e54:	f000 fd2a 	bl	80088ac <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK,
 8007e58:	4873      	ldr	r0, [pc, #460]	; (8008028 <main+0x438>)
 8007e5a:	23ff      	movs	r3, #255	; 0xff
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	23ff      	movs	r3, #255	; 0xff
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	2306      	movs	r3, #6
 8007e64:	2202      	movs	r2, #2
 8007e66:	2102      	movs	r1, #2
 8007e68:	f000 fd20 	bl	80088ac <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAY, 2, SETTINGS_CALENDAR,
 8007e6c:	486e      	ldr	r0, [pc, #440]	; (8008028 <main+0x438>)
 8007e6e:	23ff      	movs	r3, #255	; 0xff
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	23ff      	movs	r3, #255	; 0xff
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2307      	movs	r3, #7
 8007e78:	2202      	movs	r2, #2
 8007e7a:	2103      	movs	r1, #3
 8007e7c:	f000 fd16 	bl	80088ac <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_MONTH, 2, SETTINGS_CALENDAR,
 8007e80:	4869      	ldr	r0, [pc, #420]	; (8008028 <main+0x438>)
 8007e82:	23ff      	movs	r3, #255	; 0xff
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	23ff      	movs	r3, #255	; 0xff
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	2307      	movs	r3, #7
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	2104      	movs	r1, #4
 8007e90:	f000 fd0c 	bl	80088ac <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR,
 8007e94:	4864      	ldr	r0, [pc, #400]	; (8008028 <main+0x438>)
 8007e96:	23ff      	movs	r3, #255	; 0xff
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	23ff      	movs	r3, #255	; 0xff
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	2105      	movs	r1, #5
 8007ea4:	f000 fd02 	bl	80088ac <menuItemInit>

	//												MENU ITEMS CONSTANT VALUES
	//level 1
	//value1-string for display, value2-dot postion, value3- is editable
//	menuItemChangeValue(&menu, CLOCK, 0, "2114", INTER_COLON, 0);
	menuItemChangeValue(&menu, BAROMETER, 0, "1024", INTER_DISABLED, 0);
 8007ea8:	4b60      	ldr	r3, [pc, #384]	; (800802c <main+0x43c>)
 8007eaa:	485f      	ldr	r0, [pc, #380]	; (8008028 <main+0x438>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	9201      	str	r2, [sp, #4]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	9200      	str	r2, [sp, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2103      	movs	r1, #3
 8007eb8:	f000 fc28 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, HIGROMETER, 0, "42 H", INTER_DISABLED, 0);
 8007ebc:	4b5c      	ldr	r3, [pc, #368]	; (8008030 <main+0x440>)
 8007ebe:	485a      	ldr	r0, [pc, #360]	; (8008028 <main+0x438>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	9200      	str	r2, [sp, #0]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2104      	movs	r1, #4
 8007ecc:	f000 fc1e 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, TEMPERATURE, 0, "20 ^", INTER_DISABLED, 0);
 8007ed0:	4b58      	ldr	r3, [pc, #352]	; (8008034 <main+0x444>)
 8007ed2:	4855      	ldr	r0, [pc, #340]	; (8008028 <main+0x438>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	9201      	str	r2, [sp, #4]
 8007ed8:	2204      	movs	r2, #4
 8007eda:	9200      	str	r2, [sp, #0]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2102      	movs	r1, #2
 8007ee0:	f000 fc14 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, ALTITUDE, 0, " 102", INTER_DISABLED, 0);
 8007ee4:	4b54      	ldr	r3, [pc, #336]	; (8008038 <main+0x448>)
 8007ee6:	4850      	ldr	r0, [pc, #320]	; (8008028 <main+0x438>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	9201      	str	r2, [sp, #4]
 8007eec:	2204      	movs	r2, #4
 8007eee:	9200      	str	r2, [sp, #0]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2105      	movs	r1, #5
 8007ef4:	f000 fc0a 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, AZIMUTH, 0, "350^", INTER_DISABLED, 0);
 8007ef8:	4b50      	ldr	r3, [pc, #320]	; (800803c <main+0x44c>)
 8007efa:	484b      	ldr	r0, [pc, #300]	; (8008028 <main+0x438>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	9201      	str	r2, [sp, #4]
 8007f00:	2204      	movs	r2, #4
 8007f02:	9200      	str	r2, [sp, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	2106      	movs	r1, #6
 8007f08:	f000 fc00 	bl	800870c <menuItemChangeValue>
//	menuItemChangeValue(&menu, CHRONO, 0, "CH  ", INTER_COLON, 0);
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", INTER_DISABLED, 0);
 8007f0c:	4b4c      	ldr	r3, [pc, #304]	; (8008040 <main+0x450>)
 8007f0e:	4846      	ldr	r0, [pc, #280]	; (8008028 <main+0x438>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	9201      	str	r2, [sp, #4]
 8007f14:	2204      	movs	r2, #4
 8007f16:	9200      	str	r2, [sp, #0]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2107      	movs	r1, #7
 8007f1c:	f000 fbf6 	bl	800870c <menuItemChangeValue>
	//level 2
//	menuItemChangeValue(&menu, CLOCK_DATE, 1, "1604", INTER_DOT, 0);
//	menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, " :45", INTER_COLON, 0);
//	menuItemChangeValue(&menu, CHRONO_HOURS, 1, "02 h", INTER_DISABLED, 0);
//	menuItemChangeValue(&menu, CHRONO_HUNDREDTHS, 1, "07 d", INTER_DISABLED, 0);
	menuItemChangeValue(&menu, CHRONO_START, 1, "St  ", INTER_DISABLED, 0);
 8007f20:	4b48      	ldr	r3, [pc, #288]	; (8008044 <main+0x454>)
 8007f22:	4841      	ldr	r0, [pc, #260]	; (8008028 <main+0x438>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	9200      	str	r2, [sp, #0]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	2104      	movs	r1, #4
 8007f30:	f000 fbec 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", INTER_COLON, 0);
 8007f34:	4b44      	ldr	r3, [pc, #272]	; (8008048 <main+0x458>)
 8007f36:	483c      	ldr	r0, [pc, #240]	; (8008028 <main+0x438>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	9201      	str	r2, [sp, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	9200      	str	r2, [sp, #0]
 8007f40:	2201      	movs	r2, #1
 8007f42:	2105      	movs	r1, #5
 8007f44:	f000 fbe2 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", INTER_DISABLED, 0);
 8007f48:	4b40      	ldr	r3, [pc, #256]	; (800804c <main+0x45c>)
 8007f4a:	4837      	ldr	r0, [pc, #220]	; (8008028 <main+0x438>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	2204      	movs	r2, #4
 8007f52:	9200      	str	r2, [sp, #0]
 8007f54:	2201      	movs	r2, #1
 8007f56:	2106      	movs	r1, #6
 8007f58:	f000 fbd8 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", INTER_DISABLED, 0);
 8007f5c:	4b3c      	ldr	r3, [pc, #240]	; (8008050 <main+0x460>)
 8007f5e:	4832      	ldr	r0, [pc, #200]	; (8008028 <main+0x438>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	9201      	str	r2, [sp, #4]
 8007f64:	2204      	movs	r2, #4
 8007f66:	9200      	str	r2, [sp, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2107      	movs	r1, #7
 8007f6c:	f000 fbce 	bl	800870c <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ",
 8007f70:	4b38      	ldr	r3, [pc, #224]	; (8008054 <main+0x464>)
 8007f72:	482d      	ldr	r0, [pc, #180]	; (8008028 <main+0x438>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	9201      	str	r2, [sp, #4]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	9200      	str	r2, [sp, #0]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	2108      	movs	r1, #8
 8007f80:	f000 fbc4 	bl	800870c <menuItemChangeValue>
	INTER_DISABLED, 1);
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ",
 8007f84:	4b34      	ldr	r3, [pc, #208]	; (8008058 <main+0x468>)
 8007f86:	4828      	ldr	r0, [pc, #160]	; (8008028 <main+0x438>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	9201      	str	r2, [sp, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	9200      	str	r2, [sp, #0]
 8007f90:	2201      	movs	r2, #1
 8007f92:	2109      	movs	r1, #9
 8007f94:	f000 fbba 	bl	800870c <menuItemChangeValue>
//	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, "  04", INTER_DOT,
//			1);
//	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, "2022",
//	INTER_DISABLED, 1);

	menuResetCurrent(&menu);
 8007f98:	4b23      	ldr	r3, [pc, #140]	; (8008028 <main+0x438>)
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f000 fba5 	bl	80086ea <menuResetCurrent>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//read RTC time
		rtcGetTime(&chronograph);
 8007fa0:	4b2e      	ldr	r3, [pc, #184]	; (800805c <main+0x46c>)
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f001 f84a 	bl	800903c <rtcGetTime>

		//write actual values to menu matrix
		interfaceWrite();
 8007fa8:	f7ff fa68 	bl	800747c <interfaceWrite>

		//display current item
		if (display.transitionStatus == LED_TRANSITION_DISABLED) {
 8007fac:	4b1b      	ldr	r3, [pc, #108]	; (800801c <main+0x42c>)
 8007fae:	2267      	movs	r2, #103	; 0x67
 8007fb0:	5c9b      	ldrb	r3, [r3, r2]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <main+0x3ca>
			interfaceShowActual();
 8007fb6:	f7ff fb95 	bl	80076e4 <interfaceShowActual>
		}

		//												LOW POWER SECTION
		if (flags[FLAG_SLEEP]
 8007fba:	4b29      	ldr	r3, [pc, #164]	; (8008060 <main+0x470>)
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d055      	beq.n	800806e <main+0x47e>
				&& HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) {
 8007fc2:	4b17      	ldr	r3, [pc, #92]	; (8008020 <main+0x430>)
 8007fc4:	2108      	movs	r1, #8
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7fb fcf6 	bl	80039b8 <HAL_GPIO_ReadPin>
 8007fcc:	0003      	movs	r3, r0
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d14d      	bne.n	800806e <main+0x47e>
			LEDclear(&display);
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <main+0x42c>)
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	f7ff f962 	bl	800729e <LEDclear>
			flags[FLAG_SLEEP] = 0;
 8007fda:	4b21      	ldr	r3, [pc, #132]	; (8008060 <main+0x470>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	705a      	strb	r2, [r3, #1]
			HAL_Delay(10);
 8007fe0:	200a      	movs	r0, #10
 8007fe2:	f7fa faff 	bl	80025e4 <HAL_Delay>
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 0);
 8007fe6:	23a0      	movs	r3, #160	; 0xa0
 8007fe8:	05db      	lsls	r3, r3, #23
 8007fea:	2200      	movs	r2, #0
 8007fec:	2102      	movs	r1, #2
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7fb fcff 	bl	80039f2 <HAL_GPIO_WritePin>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,
 8007ff4:	2380      	movs	r3, #128	; 0x80
 8007ff6:	01db      	lsls	r3, r3, #7
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f7fb fe7c 	bl	8003cf8 <HAL_PWR_EnterSTOPMode>
			PWR_STOPENTRY_WFI);

			//											AFTER WAKE UP
			menuResetCurrent(&menu);
 8008000:	4b09      	ldr	r3, [pc, #36]	; (8008028 <main+0x438>)
 8008002:	0018      	movs	r0, r3
 8008004:	e02e      	b.n	8008064 <main+0x474>
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	200012bc 	.word	0x200012bc
 800800c:	20001308 	.word	0x20001308
 8008010:	2000122c 	.word	0x2000122c
 8008014:	b0001000 	.word	0xb0001000
 8008018:	50000800 	.word	0x50000800
 800801c:	200011b8 	.word	0x200011b8
 8008020:	50000400 	.word	0x50000400
 8008024:	0800a074 	.word	0x0800a074
 8008028:	20000fec 	.word	0x20000fec
 800802c:	0800a07c 	.word	0x0800a07c
 8008030:	0800a084 	.word	0x0800a084
 8008034:	0800a08c 	.word	0x0800a08c
 8008038:	0800a094 	.word	0x0800a094
 800803c:	0800a09c 	.word	0x0800a09c
 8008040:	0800a0a4 	.word	0x0800a0a4
 8008044:	0800a0a8 	.word	0x0800a0a8
 8008048:	0800a0b0 	.word	0x0800a0b0
 800804c:	0800a0b8 	.word	0x0800a0b8
 8008050:	0800a0c0 	.word	0x0800a0c0
 8008054:	0800a0c8 	.word	0x0800a0c8
 8008058:	0800a0d0 	.word	0x0800a0d0
 800805c:	20001190 	.word	0x20001190
 8008060:	20000fe8 	.word	0x20000fe8
 8008064:	f000 fb41 	bl	80086ea <menuResetCurrent>
			flags[FLAG_LOCKED] = 0;
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <main+0x490>)
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800806e:	23a0      	movs	r3, #160	; 0xa0
 8008070:	05db      	lsls	r3, r3, #23
 8008072:	2201      	movs	r2, #1
 8008074:	2102      	movs	r1, #2
 8008076:	0018      	movs	r0, r3
 8008078:	f7fb fcbb 	bl	80039f2 <HAL_GPIO_WritePin>
		rtcGetTime(&chronograph);
 800807c:	e790      	b.n	8007fa0 <main+0x3b0>
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	20000fe8 	.word	0x20000fe8

08008084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008084:	b590      	push	{r4, r7, lr}
 8008086:	b093      	sub	sp, #76	; 0x4c
 8008088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800808a:	2410      	movs	r4, #16
 800808c:	193b      	adds	r3, r7, r4
 800808e:	0018      	movs	r0, r3
 8008090:	2338      	movs	r3, #56	; 0x38
 8008092:	001a      	movs	r2, r3
 8008094:	2100      	movs	r1, #0
 8008096:	f001 ffa2 	bl	8009fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800809a:	003b      	movs	r3, r7
 800809c:	0018      	movs	r0, r3
 800809e:	2310      	movs	r3, #16
 80080a0:	001a      	movs	r2, r3
 80080a2:	2100      	movs	r1, #0
 80080a4:	f001 ff9b 	bl	8009fde <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	0018      	movs	r0, r3
 80080ae:	f7fb fe5b 	bl	8003d68 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080b2:	f7fb fe13 	bl	8003cdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <SystemClock_Config+0xa8>)
 80080b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ba:	4b1c      	ldr	r3, [pc, #112]	; (800812c <SystemClock_Config+0xa8>)
 80080bc:	2118      	movs	r1, #24
 80080be:	438a      	bics	r2, r1
 80080c0:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80080c2:	193b      	adds	r3, r7, r4
 80080c4:	2206      	movs	r2, #6
 80080c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80080c8:	193b      	adds	r3, r7, r4
 80080ca:	2201      	movs	r2, #1
 80080cc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080ce:	193b      	adds	r3, r7, r4
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	0052      	lsls	r2, r2, #1
 80080d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80080d6:	193b      	adds	r3, r7, r4
 80080d8:	2200      	movs	r2, #0
 80080da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080dc:	193b      	adds	r3, r7, r4
 80080de:	2240      	movs	r2, #64	; 0x40
 80080e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80080e2:	193b      	adds	r3, r7, r4
 80080e4:	2200      	movs	r2, #0
 80080e6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080e8:	193b      	adds	r3, r7, r4
 80080ea:	0018      	movs	r0, r3
 80080ec:	f7fb fe88 	bl	8003e00 <HAL_RCC_OscConfig>
 80080f0:	1e03      	subs	r3, r0, #0
 80080f2:	d001      	beq.n	80080f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80080f4:	f000 faf4 	bl	80086e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080f8:	003b      	movs	r3, r7
 80080fa:	2207      	movs	r2, #7
 80080fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80080fe:	003b      	movs	r3, r7
 8008100:	2200      	movs	r2, #0
 8008102:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008104:	003b      	movs	r3, r7
 8008106:	2200      	movs	r2, #0
 8008108:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800810a:	003b      	movs	r3, r7
 800810c:	2200      	movs	r2, #0
 800810e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008110:	003b      	movs	r3, r7
 8008112:	2100      	movs	r1, #0
 8008114:	0018      	movs	r0, r3
 8008116:	f7fc f993 	bl	8004440 <HAL_RCC_ClockConfig>
 800811a:	1e03      	subs	r3, r0, #0
 800811c:	d001      	beq.n	8008122 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800811e:	f000 fadf 	bl	80086e0 <Error_Handler>
  }
}
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	46bd      	mov	sp, r7
 8008126:	b013      	add	sp, #76	; 0x4c
 8008128:	bd90      	pop	{r4, r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	40021000 	.word	0x40021000

08008130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008136:	1d3b      	adds	r3, r7, #4
 8008138:	0018      	movs	r0, r3
 800813a:	230c      	movs	r3, #12
 800813c:	001a      	movs	r2, r3
 800813e:	2100      	movs	r1, #0
 8008140:	f001 ff4d 	bl	8009fde <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008144:	4b31      	ldr	r3, [pc, #196]	; (800820c <MX_ADC1_Init+0xdc>)
 8008146:	4a32      	ldr	r2, [pc, #200]	; (8008210 <MX_ADC1_Init+0xe0>)
 8008148:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800814a:	4b30      	ldr	r3, [pc, #192]	; (800820c <MX_ADC1_Init+0xdc>)
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	05d2      	lsls	r2, r2, #23
 8008150:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008152:	4b2e      	ldr	r3, [pc, #184]	; (800820c <MX_ADC1_Init+0xdc>)
 8008154:	2200      	movs	r2, #0
 8008156:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008158:	4b2c      	ldr	r3, [pc, #176]	; (800820c <MX_ADC1_Init+0xdc>)
 800815a:	2200      	movs	r2, #0
 800815c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800815e:	4b2b      	ldr	r3, [pc, #172]	; (800820c <MX_ADC1_Init+0xdc>)
 8008160:	2200      	movs	r2, #0
 8008162:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008164:	4b29      	ldr	r3, [pc, #164]	; (800820c <MX_ADC1_Init+0xdc>)
 8008166:	2204      	movs	r2, #4
 8008168:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800816a:	4b28      	ldr	r3, [pc, #160]	; (800820c <MX_ADC1_Init+0xdc>)
 800816c:	2200      	movs	r2, #0
 800816e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8008170:	4b26      	ldr	r3, [pc, #152]	; (800820c <MX_ADC1_Init+0xdc>)
 8008172:	2200      	movs	r2, #0
 8008174:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008176:	4b25      	ldr	r3, [pc, #148]	; (800820c <MX_ADC1_Init+0xdc>)
 8008178:	2200      	movs	r2, #0
 800817a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <MX_ADC1_Init+0xdc>)
 800817e:	2201      	movs	r2, #1
 8008180:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008182:	4b22      	ldr	r3, [pc, #136]	; (800820c <MX_ADC1_Init+0xdc>)
 8008184:	2200      	movs	r2, #0
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008188:	4b20      	ldr	r3, [pc, #128]	; (800820c <MX_ADC1_Init+0xdc>)
 800818a:	2200      	movs	r2, #0
 800818c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800818e:	4b1f      	ldr	r3, [pc, #124]	; (800820c <MX_ADC1_Init+0xdc>)
 8008190:	222c      	movs	r2, #44	; 0x2c
 8008192:	2100      	movs	r1, #0
 8008194:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008196:	4b1d      	ldr	r3, [pc, #116]	; (800820c <MX_ADC1_Init+0xdc>)
 8008198:	2280      	movs	r2, #128	; 0x80
 800819a:	0152      	lsls	r2, r2, #5
 800819c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800819e:	4b1b      	ldr	r3, [pc, #108]	; (800820c <MX_ADC1_Init+0xdc>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80081a4:	4b19      	ldr	r3, [pc, #100]	; (800820c <MX_ADC1_Init+0xdc>)
 80081a6:	2207      	movs	r2, #7
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80081aa:	4b18      	ldr	r3, [pc, #96]	; (800820c <MX_ADC1_Init+0xdc>)
 80081ac:	223c      	movs	r2, #60	; 0x3c
 80081ae:	2101      	movs	r1, #1
 80081b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80081b2:	4b16      	ldr	r3, [pc, #88]	; (800820c <MX_ADC1_Init+0xdc>)
 80081b4:	221c      	movs	r2, #28
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80081b8:	4b14      	ldr	r3, [pc, #80]	; (800820c <MX_ADC1_Init+0xdc>)
 80081ba:	2280      	movs	r2, #128	; 0x80
 80081bc:	0052      	lsls	r2, r2, #1
 80081be:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <MX_ADC1_Init+0xdc>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <MX_ADC1_Init+0xdc>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <MX_ADC1_Init+0xdc>)
 80081ce:	0018      	movs	r0, r3
 80081d0:	f7fa fb82 	bl	80028d8 <HAL_ADC_Init>
 80081d4:	1e03      	subs	r3, r0, #0
 80081d6:	d001      	beq.n	80081dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80081d8:	f000 fa82 	bl	80086e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80081dc:	1d3b      	adds	r3, r7, #4
 80081de:	4a0d      	ldr	r2, [pc, #52]	; (8008214 <MX_ADC1_Init+0xe4>)
 80081e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80081e2:	1d3b      	adds	r3, r7, #4
 80081e4:	2200      	movs	r2, #0
 80081e6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80081e8:	1d3b      	adds	r3, r7, #4
 80081ea:	2200      	movs	r2, #0
 80081ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ee:	1d3a      	adds	r2, r7, #4
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <MX_ADC1_Init+0xdc>)
 80081f2:	0011      	movs	r1, r2
 80081f4:	0018      	movs	r0, r3
 80081f6:	f7fa fe3b 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80081fa:	1e03      	subs	r3, r0, #0
 80081fc:	d001      	beq.n	8008202 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80081fe:	f000 fa6f 	bl	80086e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	46bd      	mov	sp, r7
 8008206:	b004      	add	sp, #16
 8008208:	bd80      	pop	{r7, pc}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	2000122c 	.word	0x2000122c
 8008210:	40012400 	.word	0x40012400
 8008214:	b0001000 	.word	0xb0001000

08008218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800821c:	4b1b      	ldr	r3, [pc, #108]	; (800828c <MX_I2C1_Init+0x74>)
 800821e:	4a1c      	ldr	r2, [pc, #112]	; (8008290 <MX_I2C1_Init+0x78>)
 8008220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8008222:	4b1a      	ldr	r3, [pc, #104]	; (800828c <MX_I2C1_Init+0x74>)
 8008224:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <MX_I2C1_Init+0x7c>)
 8008226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008228:	4b18      	ldr	r3, [pc, #96]	; (800828c <MX_I2C1_Init+0x74>)
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800822e:	4b17      	ldr	r3, [pc, #92]	; (800828c <MX_I2C1_Init+0x74>)
 8008230:	2201      	movs	r2, #1
 8008232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008234:	4b15      	ldr	r3, [pc, #84]	; (800828c <MX_I2C1_Init+0x74>)
 8008236:	2200      	movs	r2, #0
 8008238:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800823a:	4b14      	ldr	r3, [pc, #80]	; (800828c <MX_I2C1_Init+0x74>)
 800823c:	2200      	movs	r2, #0
 800823e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <MX_I2C1_Init+0x74>)
 8008242:	2200      	movs	r2, #0
 8008244:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008246:	4b11      	ldr	r3, [pc, #68]	; (800828c <MX_I2C1_Init+0x74>)
 8008248:	2200      	movs	r2, #0
 800824a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <MX_I2C1_Init+0x74>)
 800824e:	2200      	movs	r2, #0
 8008250:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008252:	4b0e      	ldr	r3, [pc, #56]	; (800828c <MX_I2C1_Init+0x74>)
 8008254:	0018      	movs	r0, r3
 8008256:	f7fb fc13 	bl	8003a80 <HAL_I2C_Init>
 800825a:	1e03      	subs	r3, r0, #0
 800825c:	d001      	beq.n	8008262 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800825e:	f000 fa3f 	bl	80086e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <MX_I2C1_Init+0x74>)
 8008264:	2100      	movs	r1, #0
 8008266:	0018      	movs	r0, r3
 8008268:	f7fb fca0 	bl	8003bac <HAL_I2CEx_ConfigAnalogFilter>
 800826c:	1e03      	subs	r3, r0, #0
 800826e:	d001      	beq.n	8008274 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008270:	f000 fa36 	bl	80086e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <MX_I2C1_Init+0x74>)
 8008276:	2100      	movs	r1, #0
 8008278:	0018      	movs	r0, r3
 800827a:	f7fb fce3 	bl	8003c44 <HAL_I2CEx_ConfigDigitalFilter>
 800827e:	1e03      	subs	r3, r0, #0
 8008280:	d001      	beq.n	8008286 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008282:	f000 fa2d 	bl	80086e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	20001144 	.word	0x20001144
 8008290:	40005400 	.word	0x40005400
 8008294:	00303d5b 	.word	0x00303d5b

08008298 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	0018      	movs	r0, r3
 80082a2:	2314      	movs	r3, #20
 80082a4:	001a      	movs	r2, r3
 80082a6:	2100      	movs	r1, #0
 80082a8:	f001 fe99 	bl	8009fde <memset>
  RTC_DateTypeDef sDate = {0};
 80082ac:	003b      	movs	r3, r7
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80082b2:	4b2d      	ldr	r3, [pc, #180]	; (8008368 <MX_RTC_Init+0xd0>)
 80082b4:	4a2d      	ldr	r2, [pc, #180]	; (800836c <MX_RTC_Init+0xd4>)
 80082b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80082b8:	4b2b      	ldr	r3, [pc, #172]	; (8008368 <MX_RTC_Init+0xd0>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80082be:	4b2a      	ldr	r3, [pc, #168]	; (8008368 <MX_RTC_Init+0xd0>)
 80082c0:	227f      	movs	r2, #127	; 0x7f
 80082c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <MX_RTC_Init+0xd0>)
 80082c6:	22ff      	movs	r2, #255	; 0xff
 80082c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80082ca:	4b27      	ldr	r3, [pc, #156]	; (8008368 <MX_RTC_Init+0xd0>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <MX_RTC_Init+0xd0>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <MX_RTC_Init+0xd0>)
 80082d8:	2200      	movs	r2, #0
 80082da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80082dc:	4b22      	ldr	r3, [pc, #136]	; (8008368 <MX_RTC_Init+0xd0>)
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	05d2      	lsls	r2, r2, #23
 80082e2:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80082e4:	4b20      	ldr	r3, [pc, #128]	; (8008368 <MX_RTC_Init+0xd0>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80082ea:	4b1f      	ldr	r3, [pc, #124]	; (8008368 <MX_RTC_Init+0xd0>)
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7fc fc09 	bl	8004b04 <HAL_RTC_Init>
 80082f2:	1e03      	subs	r3, r0, #0
 80082f4:	d001      	beq.n	80082fa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80082f6:	f000 f9f3 	bl	80086e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	2215      	movs	r2, #21
 80082fe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 40;
 8008300:	1d3b      	adds	r3, r7, #4
 8008302:	2228      	movs	r2, #40	; 0x28
 8008304:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	2200      	movs	r2, #0
 800830a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800830c:	1d3b      	adds	r3, r7, #4
 800830e:	2200      	movs	r2, #0
 8008310:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	2200      	movs	r2, #0
 8008316:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008318:	1d3b      	adds	r3, r7, #4
 800831a:	2200      	movs	r2, #0
 800831c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800831e:	1d39      	adds	r1, r7, #4
 8008320:	4b11      	ldr	r3, [pc, #68]	; (8008368 <MX_RTC_Init+0xd0>)
 8008322:	2200      	movs	r2, #0
 8008324:	0018      	movs	r0, r3
 8008326:	f7fc fc83 	bl	8004c30 <HAL_RTC_SetTime>
 800832a:	1e03      	subs	r3, r0, #0
 800832c:	d001      	beq.n	8008332 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800832e:	f000 f9d7 	bl	80086e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008332:	003b      	movs	r3, r7
 8008334:	2201      	movs	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8008338:	003b      	movs	r3, r7
 800833a:	2204      	movs	r2, #4
 800833c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 800833e:	003b      	movs	r3, r7
 8008340:	2214      	movs	r2, #20
 8008342:	709a      	strb	r2, [r3, #2]
  sDate.Year = 20;
 8008344:	003b      	movs	r3, r7
 8008346:	2214      	movs	r2, #20
 8008348:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800834a:	0039      	movs	r1, r7
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <MX_RTC_Init+0xd0>)
 800834e:	2200      	movs	r2, #0
 8008350:	0018      	movs	r0, r3
 8008352:	f7fc fd71 	bl	8004e38 <HAL_RTC_SetDate>
 8008356:	1e03      	subs	r3, r0, #0
 8008358:	d001      	beq.n	800835e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800835a:	f000 f9c1 	bl	80086e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	46bd      	mov	sp, r7
 8008362:	b006      	add	sp, #24
 8008364:	bd80      	pop	{r7, pc}
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	20001290 	.word	0x20001290
 800836c:	40002800 	.word	0x40002800

08008370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008376:	2310      	movs	r3, #16
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	0018      	movs	r0, r3
 800837c:	2310      	movs	r3, #16
 800837e:	001a      	movs	r2, r3
 8008380:	2100      	movs	r1, #0
 8008382:	f001 fe2c 	bl	8009fde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008386:	1d3b      	adds	r3, r7, #4
 8008388:	0018      	movs	r0, r3
 800838a:	230c      	movs	r3, #12
 800838c:	001a      	movs	r2, r3
 800838e:	2100      	movs	r1, #0
 8008390:	f001 fe25 	bl	8009fde <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008394:	4b21      	ldr	r3, [pc, #132]	; (800841c <MX_TIM1_Init+0xac>)
 8008396:	4a22      	ldr	r2, [pc, #136]	; (8008420 <MX_TIM1_Init+0xb0>)
 8008398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 800839a:	4b20      	ldr	r3, [pc, #128]	; (800841c <MX_TIM1_Init+0xac>)
 800839c:	221d      	movs	r2, #29
 800839e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a0:	4b1e      	ldr	r3, [pc, #120]	; (800841c <MX_TIM1_Init+0xac>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80083a6:	4b1d      	ldr	r3, [pc, #116]	; (800841c <MX_TIM1_Init+0xac>)
 80083a8:	4a1e      	ldr	r2, [pc, #120]	; (8008424 <MX_TIM1_Init+0xb4>)
 80083aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <MX_TIM1_Init+0xac>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80083b2:	4b1a      	ldr	r3, [pc, #104]	; (800841c <MX_TIM1_Init+0xac>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083b8:	4b18      	ldr	r3, [pc, #96]	; (800841c <MX_TIM1_Init+0xac>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80083be:	4b17      	ldr	r3, [pc, #92]	; (800841c <MX_TIM1_Init+0xac>)
 80083c0:	0018      	movs	r0, r3
 80083c2:	f7fc ff0c 	bl	80051de <HAL_TIM_Base_Init>
 80083c6:	1e03      	subs	r3, r0, #0
 80083c8:	d001      	beq.n	80083ce <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80083ca:	f000 f989 	bl	80086e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083ce:	2110      	movs	r1, #16
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	2280      	movs	r2, #128	; 0x80
 80083d4:	0152      	lsls	r2, r2, #5
 80083d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80083d8:	187a      	adds	r2, r7, r1
 80083da:	4b10      	ldr	r3, [pc, #64]	; (800841c <MX_TIM1_Init+0xac>)
 80083dc:	0011      	movs	r1, r2
 80083de:	0018      	movs	r0, r3
 80083e0:	f7fd f8e4 	bl	80055ac <HAL_TIM_ConfigClockSource>
 80083e4:	1e03      	subs	r3, r0, #0
 80083e6:	d001      	beq.n	80083ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80083e8:	f000 f97a 	bl	80086e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083ec:	1d3b      	adds	r3, r7, #4
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	2200      	movs	r2, #0
 80083fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80083fe:	1d3a      	adds	r2, r7, #4
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <MX_TIM1_Init+0xac>)
 8008402:	0011      	movs	r1, r2
 8008404:	0018      	movs	r0, r3
 8008406:	f7fd fad9 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 800840a:	1e03      	subs	r3, r0, #0
 800840c:	d001      	beq.n	8008412 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800840e:	f000 f967 	bl	80086e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	46bd      	mov	sp, r7
 8008416:	b008      	add	sp, #32
 8008418:	bd80      	pop	{r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	200012bc 	.word	0x200012bc
 8008420:	40012c00 	.word	0x40012c00
 8008424:	000007cf 	.word	0x000007cf

08008428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800842e:	2310      	movs	r3, #16
 8008430:	18fb      	adds	r3, r7, r3
 8008432:	0018      	movs	r0, r3
 8008434:	2310      	movs	r3, #16
 8008436:	001a      	movs	r2, r3
 8008438:	2100      	movs	r1, #0
 800843a:	f001 fdd0 	bl	8009fde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800843e:	1d3b      	adds	r3, r7, #4
 8008440:	0018      	movs	r0, r3
 8008442:	230c      	movs	r3, #12
 8008444:	001a      	movs	r2, r3
 8008446:	2100      	movs	r1, #0
 8008448:	f001 fdc9 	bl	8009fde <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800844c:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <MX_TIM2_Init+0xa0>)
 800844e:	2280      	movs	r2, #128	; 0x80
 8008450:	05d2      	lsls	r2, r2, #23
 8008452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8879;
 8008454:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <MX_TIM2_Init+0xa0>)
 8008456:	4a1d      	ldr	r2, [pc, #116]	; (80084cc <MX_TIM2_Init+0xa4>)
 8008458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800845a:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <MX_TIM2_Init+0xa0>)
 800845c:	2200      	movs	r2, #0
 800845e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 8008460:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <MX_TIM2_Init+0xa0>)
 8008462:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <MX_TIM2_Init+0xa8>)
 8008464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <MX_TIM2_Init+0xa0>)
 8008468:	2200      	movs	r2, #0
 800846a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800846c:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <MX_TIM2_Init+0xa0>)
 800846e:	2200      	movs	r2, #0
 8008470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008472:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <MX_TIM2_Init+0xa0>)
 8008474:	0018      	movs	r0, r3
 8008476:	f7fc feb2 	bl	80051de <HAL_TIM_Base_Init>
 800847a:	1e03      	subs	r3, r0, #0
 800847c:	d001      	beq.n	8008482 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800847e:	f000 f92f 	bl	80086e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008482:	2110      	movs	r1, #16
 8008484:	187b      	adds	r3, r7, r1
 8008486:	2280      	movs	r2, #128	; 0x80
 8008488:	0152      	lsls	r2, r2, #5
 800848a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800848c:	187a      	adds	r2, r7, r1
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <MX_TIM2_Init+0xa0>)
 8008490:	0011      	movs	r1, r2
 8008492:	0018      	movs	r0, r3
 8008494:	f7fd f88a 	bl	80055ac <HAL_TIM_ConfigClockSource>
 8008498:	1e03      	subs	r3, r0, #0
 800849a:	d001      	beq.n	80084a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800849c:	f000 f920 	bl	80086e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084a0:	1d3b      	adds	r3, r7, #4
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084a6:	1d3b      	adds	r3, r7, #4
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80084ac:	1d3a      	adds	r2, r7, #4
 80084ae:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <MX_TIM2_Init+0xa0>)
 80084b0:	0011      	movs	r1, r2
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7fd fa82 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 80084b8:	1e03      	subs	r3, r0, #0
 80084ba:	d001      	beq.n	80084c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80084bc:	f000 f910 	bl	80086e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b008      	add	sp, #32
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20001308 	.word	0x20001308
 80084cc:	000022af 	.word	0x000022af
 80084d0:	00002327 	.word	0x00002327

080084d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80084d8:	4b23      	ldr	r3, [pc, #140]	; (8008568 <MX_USART2_UART_Init+0x94>)
 80084da:	4a24      	ldr	r2, [pc, #144]	; (800856c <MX_USART2_UART_Init+0x98>)
 80084dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80084de:	4b22      	ldr	r3, [pc, #136]	; (8008568 <MX_USART2_UART_Init+0x94>)
 80084e0:	2296      	movs	r2, #150	; 0x96
 80084e2:	0192      	lsls	r2, r2, #6
 80084e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80084e6:	4b20      	ldr	r3, [pc, #128]	; (8008568 <MX_USART2_UART_Init+0x94>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80084ec:	4b1e      	ldr	r3, [pc, #120]	; (8008568 <MX_USART2_UART_Init+0x94>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <MX_USART2_UART_Init+0x94>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80084f8:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <MX_USART2_UART_Init+0x94>)
 80084fa:	220c      	movs	r2, #12
 80084fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <MX_USART2_UART_Init+0x94>)
 8008500:	2200      	movs	r2, #0
 8008502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008504:	4b18      	ldr	r3, [pc, #96]	; (8008568 <MX_USART2_UART_Init+0x94>)
 8008506:	2200      	movs	r2, #0
 8008508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800850a:	4b17      	ldr	r3, [pc, #92]	; (8008568 <MX_USART2_UART_Init+0x94>)
 800850c:	2200      	movs	r2, #0
 800850e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008510:	4b15      	ldr	r3, [pc, #84]	; (8008568 <MX_USART2_UART_Init+0x94>)
 8008512:	2200      	movs	r2, #0
 8008514:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <MX_USART2_UART_Init+0x94>)
 8008518:	2200      	movs	r2, #0
 800851a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <MX_USART2_UART_Init+0x94>)
 800851e:	0018      	movs	r0, r3
 8008520:	f7fd fad2 	bl	8005ac8 <HAL_UART_Init>
 8008524:	1e03      	subs	r3, r0, #0
 8008526:	d001      	beq.n	800852c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008528:	f000 f8da 	bl	80086e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <MX_USART2_UART_Init+0x94>)
 800852e:	2100      	movs	r1, #0
 8008530:	0018      	movs	r0, r3
 8008532:	f7fd fffd 	bl	8006530 <HAL_UARTEx_SetTxFifoThreshold>
 8008536:	1e03      	subs	r3, r0, #0
 8008538:	d001      	beq.n	800853e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800853a:	f000 f8d1 	bl	80086e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <MX_USART2_UART_Init+0x94>)
 8008540:	2100      	movs	r1, #0
 8008542:	0018      	movs	r0, r3
 8008544:	f7fe f834 	bl	80065b0 <HAL_UARTEx_SetRxFifoThreshold>
 8008548:	1e03      	subs	r3, r0, #0
 800854a:	d001      	beq.n	8008550 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800854c:	f000 f8c8 	bl	80086e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <MX_USART2_UART_Init+0x94>)
 8008552:	0018      	movs	r0, r3
 8008554:	f7fd ffb2 	bl	80064bc <HAL_UARTEx_DisableFifoMode>
 8008558:	1e03      	subs	r3, r0, #0
 800855a:	d001      	beq.n	8008560 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800855c:	f000 f8c0 	bl	80086e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008560:	46c0      	nop			; (mov r8, r8)
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	20001354 	.word	0x20001354
 800856c:	40004400 	.word	0x40004400

08008570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b089      	sub	sp, #36	; 0x24
 8008574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008576:	240c      	movs	r4, #12
 8008578:	193b      	adds	r3, r7, r4
 800857a:	0018      	movs	r0, r3
 800857c:	2314      	movs	r3, #20
 800857e:	001a      	movs	r2, r3
 8008580:	2100      	movs	r1, #0
 8008582:	f001 fd2c 	bl	8009fde <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008586:	4b52      	ldr	r3, [pc, #328]	; (80086d0 <MX_GPIO_Init+0x160>)
 8008588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800858a:	4b51      	ldr	r3, [pc, #324]	; (80086d0 <MX_GPIO_Init+0x160>)
 800858c:	2102      	movs	r1, #2
 800858e:	430a      	orrs	r2, r1
 8008590:	635a      	str	r2, [r3, #52]	; 0x34
 8008592:	4b4f      	ldr	r3, [pc, #316]	; (80086d0 <MX_GPIO_Init+0x160>)
 8008594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008596:	2202      	movs	r2, #2
 8008598:	4013      	ands	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800859e:	4b4c      	ldr	r3, [pc, #304]	; (80086d0 <MX_GPIO_Init+0x160>)
 80085a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085a2:	4b4b      	ldr	r3, [pc, #300]	; (80086d0 <MX_GPIO_Init+0x160>)
 80085a4:	2104      	movs	r1, #4
 80085a6:	430a      	orrs	r2, r1
 80085a8:	635a      	str	r2, [r3, #52]	; 0x34
 80085aa:	4b49      	ldr	r3, [pc, #292]	; (80086d0 <MX_GPIO_Init+0x160>)
 80085ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ae:	2204      	movs	r2, #4
 80085b0:	4013      	ands	r3, r2
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80085b6:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <MX_GPIO_Init+0x160>)
 80085b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ba:	4b45      	ldr	r3, [pc, #276]	; (80086d0 <MX_GPIO_Init+0x160>)
 80085bc:	2101      	movs	r1, #1
 80085be:	430a      	orrs	r2, r1
 80085c0:	635a      	str	r2, [r3, #52]	; 0x34
 80085c2:	4b43      	ldr	r3, [pc, #268]	; (80086d0 <MX_GPIO_Init+0x160>)
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	2201      	movs	r2, #1
 80085c8:	4013      	ands	r3, r2
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin|DISP_B_Pin
 80085ce:	4941      	ldr	r1, [pc, #260]	; (80086d4 <MX_GPIO_Init+0x164>)
 80085d0:	23a0      	movs	r3, #160	; 0xa0
 80085d2:	05db      	lsls	r3, r3, #23
 80085d4:	2200      	movs	r2, #0
 80085d6:	0018      	movs	r0, r3
 80085d8:	f7fb fa0b 	bl	80039f2 <HAL_GPIO_WritePin>
                          |DISP_3_Pin|DISP_D_Pin|DISP_DP_Pin|DISP_A_Pin
                          |DISP_F_Pin|DISP_1_Pin|DISP_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_G_Pin|DISP_C_Pin|DISP_E_Pin, GPIO_PIN_RESET);
 80085dc:	4b3e      	ldr	r3, [pc, #248]	; (80086d8 <MX_GPIO_Init+0x168>)
 80085de:	2200      	movs	r2, #0
 80085e0:	2107      	movs	r1, #7
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7fb fa05 	bl	80039f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_0_GPIO_Port, DISP_0_Pin, GPIO_PIN_RESET);
 80085e8:	4b3c      	ldr	r3, [pc, #240]	; (80086dc <MX_GPIO_Init+0x16c>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	2140      	movs	r1, #64	; 0x40
 80085ee:	0018      	movs	r0, r3
 80085f0:	f7fb f9ff 	bl	80039f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENCODER_ACTIVE_Pin LED1_Pin LED2_Pin DISP_B_Pin
                           DISP_3_Pin DISP_D_Pin DISP_DP_Pin DISP_A_Pin
                           DISP_F_Pin DISP_1_Pin DISP_2_Pin */
  GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin|DISP_B_Pin
 80085f4:	193b      	adds	r3, r7, r4
 80085f6:	4a37      	ldr	r2, [pc, #220]	; (80086d4 <MX_GPIO_Init+0x164>)
 80085f8:	601a      	str	r2, [r3, #0]
                          |DISP_3_Pin|DISP_D_Pin|DISP_DP_Pin|DISP_A_Pin
                          |DISP_F_Pin|DISP_1_Pin|DISP_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085fa:	193b      	adds	r3, r7, r4
 80085fc:	2201      	movs	r2, #1
 80085fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008600:	193b      	adds	r3, r7, r4
 8008602:	2200      	movs	r2, #0
 8008604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008606:	193b      	adds	r3, r7, r4
 8008608:	2200      	movs	r2, #0
 800860a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800860c:	193a      	adds	r2, r7, r4
 800860e:	23a0      	movs	r3, #160	; 0xa0
 8008610:	05db      	lsls	r3, r3, #23
 8008612:	0011      	movs	r1, r2
 8008614:	0018      	movs	r0, r3
 8008616:	f7fb f86b 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_G_Pin DISP_C_Pin DISP_E_Pin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_C_Pin|DISP_E_Pin;
 800861a:	193b      	adds	r3, r7, r4
 800861c:	2207      	movs	r2, #7
 800861e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008620:	193b      	adds	r3, r7, r4
 8008622:	2201      	movs	r2, #1
 8008624:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008626:	193b      	adds	r3, r7, r4
 8008628:	2200      	movs	r2, #0
 800862a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800862c:	193b      	adds	r3, r7, r4
 800862e:	2200      	movs	r2, #0
 8008630:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008632:	193b      	adds	r3, r7, r4
 8008634:	4a28      	ldr	r2, [pc, #160]	; (80086d8 <MX_GPIO_Init+0x168>)
 8008636:	0019      	movs	r1, r3
 8008638:	0010      	movs	r0, r2
 800863a:	f7fb f859 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_0_Pin */
  GPIO_InitStruct.Pin = DISP_0_Pin;
 800863e:	193b      	adds	r3, r7, r4
 8008640:	2240      	movs	r2, #64	; 0x40
 8008642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008644:	193b      	adds	r3, r7, r4
 8008646:	2201      	movs	r2, #1
 8008648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864a:	193b      	adds	r3, r7, r4
 800864c:	2200      	movs	r2, #0
 800864e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008650:	193b      	adds	r3, r7, r4
 8008652:	2200      	movs	r2, #0
 8008654:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_0_GPIO_Port, &GPIO_InitStruct);
 8008656:	193b      	adds	r3, r7, r4
 8008658:	4a20      	ldr	r2, [pc, #128]	; (80086dc <MX_GPIO_Init+0x16c>)
 800865a:	0019      	movs	r1, r3
 800865c:	0010      	movs	r0, r2
 800865e:	f7fb f847 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8008662:	0021      	movs	r1, r4
 8008664:	187b      	adds	r3, r7, r1
 8008666:	2238      	movs	r2, #56	; 0x38
 8008668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800866a:	187b      	adds	r3, r7, r1
 800866c:	2284      	movs	r2, #132	; 0x84
 800866e:	0392      	lsls	r2, r2, #14
 8008670:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008672:	187b      	adds	r3, r7, r1
 8008674:	2201      	movs	r2, #1
 8008676:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008678:	000c      	movs	r4, r1
 800867a:	187b      	adds	r3, r7, r1
 800867c:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <MX_GPIO_Init+0x168>)
 800867e:	0019      	movs	r1, r3
 8008680:	0010      	movs	r0, r2
 8008682:	f7fb f835 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_Pin ENC1_Pin */
  GPIO_InitStruct.Pin = ENC2_Pin|ENC1_Pin;
 8008686:	0021      	movs	r1, r4
 8008688:	187b      	adds	r3, r7, r1
 800868a:	22c0      	movs	r2, #192	; 0xc0
 800868c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800868e:	187b      	adds	r3, r7, r1
 8008690:	22c4      	movs	r2, #196	; 0xc4
 8008692:	0392      	lsls	r2, r2, #14
 8008694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008696:	187b      	adds	r3, r7, r1
 8008698:	2200      	movs	r2, #0
 800869a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800869c:	187b      	adds	r3, r7, r1
 800869e:	4a0e      	ldr	r2, [pc, #56]	; (80086d8 <MX_GPIO_Init+0x168>)
 80086a0:	0019      	movs	r1, r3
 80086a2:	0010      	movs	r0, r2
 80086a4:	f7fb f824 	bl	80036f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	2006      	movs	r0, #6
 80086ae:	f7fa ffed 	bl	800368c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80086b2:	2006      	movs	r0, #6
 80086b4:	f7fa ffff 	bl	80036b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	2007      	movs	r0, #7
 80086be:	f7fa ffe5 	bl	800368c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80086c2:	2007      	movs	r0, #7
 80086c4:	f7fa fff7 	bl	80036b6 <HAL_NVIC_EnableIRQ>

}
 80086c8:	46c0      	nop			; (mov r8, r8)
 80086ca:	46bd      	mov	sp, r7
 80086cc:	b009      	add	sp, #36	; 0x24
 80086ce:	bd90      	pop	{r4, r7, pc}
 80086d0:	40021000 	.word	0x40021000
 80086d4:	00009ff2 	.word	0x00009ff2
 80086d8:	50000400 	.word	0x50000400
 80086dc:	50000800 	.word	0x50000800

080086e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80086e4:	b672      	cpsid	i
}
 80086e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80086e8:	e7fe      	b.n	80086e8 <Error_Handler+0x8>

080086ea <menuResetCurrent>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuResetCurrent(MenuTypeDef *menu) {
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	23a5      	movs	r3, #165	; 0xa5
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	18d3      	adds	r3, r2, r3
 80086fc:	220b      	movs	r2, #11
 80086fe:	0018      	movs	r0, r3
 8008700:	f001 fc64 	bl	8009fcc <memcpy>
}
 8008704:	46c0      	nop			; (mov r8, r8)
 8008706:	46bd      	mov	sp, r7
 8008708:	b002      	add	sp, #8
 800870a:	bd80      	pop	{r7, pc}

0800870c <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2, uint8_t value3) {
 800870c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	0008      	movs	r0, r1
 8008716:	0011      	movs	r1, r2
 8008718:	607b      	str	r3, [r7, #4]
 800871a:	230b      	movs	r3, #11
 800871c:	18fb      	adds	r3, r7, r3
 800871e:	1c02      	adds	r2, r0, #0
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	230a      	movs	r3, #10
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	1c0a      	adds	r2, r1, #0
 8008728:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800872a:	2317      	movs	r3, #23
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e01f      	b.n	8008774 <menuItemChangeValue+0x68>

		menu->items[entry][level].value[i] = value[i];
 8008734:	2617      	movs	r6, #23
 8008736:	19bb      	adds	r3, r7, r6
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	18d3      	adds	r3, r2, r3
 800873e:	220b      	movs	r2, #11
 8008740:	18ba      	adds	r2, r7, r2
 8008742:	7811      	ldrb	r1, [r2, #0]
 8008744:	220a      	movs	r2, #10
 8008746:	18ba      	adds	r2, r7, r2
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	19b8      	adds	r0, r7, r6
 800874c:	7800      	ldrb	r0, [r0, #0]
 800874e:	781d      	ldrb	r5, [r3, #0]
 8008750:	68fc      	ldr	r4, [r7, #12]
 8008752:	0013      	movs	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	189b      	adds	r3, r3, r2
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	189b      	adds	r3, r3, r2
 800875c:	000a      	movs	r2, r1
 800875e:	0152      	lsls	r2, r2, #5
 8008760:	1852      	adds	r2, r2, r1
 8008762:	189b      	adds	r3, r3, r2
 8008764:	18e3      	adds	r3, r4, r3
 8008766:	1c2a      	adds	r2, r5, #0
 8008768:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800876a:	19bb      	adds	r3, r7, r6
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	19bb      	adds	r3, r7, r6
 8008770:	3201      	adds	r2, #1
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	2317      	movs	r3, #23
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b04      	cmp	r3, #4
 800877c:	d9da      	bls.n	8008734 <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 800877e:	240b      	movs	r4, #11
 8008780:	193b      	adds	r3, r7, r4
 8008782:	7819      	ldrb	r1, [r3, #0]
 8008784:	250a      	movs	r5, #10
 8008786:	197b      	adds	r3, r7, r5
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	0013      	movs	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	189b      	adds	r3, r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	189b      	adds	r3, r3, r2
 8008796:	000a      	movs	r2, r1
 8008798:	0152      	lsls	r2, r2, #5
 800879a:	1852      	adds	r2, r2, r1
 800879c:	189b      	adds	r3, r3, r2
 800879e:	18c3      	adds	r3, r0, r3
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	2328      	movs	r3, #40	; 0x28
 80087a4:	2108      	movs	r1, #8
 80087a6:	468c      	mov	ip, r1
 80087a8:	44bc      	add	ip, r7
 80087aa:	4463      	add	r3, ip
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].value3 = value3;
 80087b0:	193b      	adds	r3, r7, r4
 80087b2:	7819      	ldrb	r1, [r3, #0]
 80087b4:	197b      	adds	r3, r7, r5
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	0013      	movs	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	000a      	movs	r2, r1
 80087c6:	0152      	lsls	r2, r2, #5
 80087c8:	1852      	adds	r2, r2, r1
 80087ca:	189b      	adds	r3, r3, r2
 80087cc:	18c3      	adds	r3, r0, r3
 80087ce:	3305      	adds	r3, #5
 80087d0:	222c      	movs	r2, #44	; 0x2c
 80087d2:	2108      	movs	r1, #8
 80087d4:	468c      	mov	ip, r1
 80087d6:	44bc      	add	ip, r7
 80087d8:	4462      	add	r2, ip
 80087da:	7812      	ldrb	r2, [r2, #0]
 80087dc:	701a      	strb	r2, [r3, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	23a8      	movs	r3, #168	; 0xa8
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	5cd3      	ldrb	r3, [r2, r3]
 80087e6:	193a      	adds	r2, r7, r4
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d15a      	bne.n	80088a4 <menuItemChangeValue+0x198>
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	2352      	movs	r3, #82	; 0x52
 80087f2:	33ff      	adds	r3, #255	; 0xff
 80087f4:	5cd3      	ldrb	r3, [r2, r3]
 80087f6:	197a      	adds	r2, r7, r5
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d152      	bne.n	80088a4 <menuItemChangeValue+0x198>
		memcpy(menu->current.value,
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	334b      	adds	r3, #75	; 0x4b
 8008802:	33ff      	adds	r3, #255	; 0xff
 8008804:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	23a8      	movs	r3, #168	; 0xa8
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	5cd3      	ldrb	r3, [r2, r3]
 800880e:	0019      	movs	r1, r3
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	2352      	movs	r3, #82	; 0x52
 8008814:	33ff      	adds	r3, #255	; 0xff
 8008816:	5cd3      	ldrb	r3, [r2, r3]
 8008818:	001a      	movs	r2, r3
 800881a:	0013      	movs	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	189b      	adds	r3, r3, r2
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	189b      	adds	r3, r3, r2
 8008824:	000a      	movs	r2, r1
 8008826:	0152      	lsls	r2, r2, #5
 8008828:	1852      	adds	r2, r2, r1
 800882a:	189b      	adds	r3, r3, r2
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8008830:	2204      	movs	r2, #4
 8008832:	0019      	movs	r1, r3
 8008834:	f001 fbca 	bl	8009fcc <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	23a8      	movs	r3, #168	; 0xa8
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	5cd3      	ldrb	r3, [r2, r3]
 8008840:	0018      	movs	r0, r3
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	2352      	movs	r3, #82	; 0x52
 8008846:	33ff      	adds	r3, #255	; 0xff
 8008848:	5cd3      	ldrb	r3, [r2, r3]
 800884a:	001a      	movs	r2, r3
 800884c:	68f9      	ldr	r1, [r7, #12]
 800884e:	0013      	movs	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	189b      	adds	r3, r3, r2
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	189b      	adds	r3, r3, r2
 8008858:	0002      	movs	r2, r0
 800885a:	0152      	lsls	r2, r2, #5
 800885c:	1812      	adds	r2, r2, r0
 800885e:	189b      	adds	r3, r3, r2
 8008860:	18cb      	adds	r3, r1, r3
 8008862:	3304      	adds	r3, #4
 8008864:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	23a7      	movs	r3, #167	; 0xa7
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	23a8      	movs	r3, #168	; 0xa8
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	5cd3      	ldrb	r3, [r2, r3]
 8008876:	0018      	movs	r0, r3
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	2352      	movs	r3, #82	; 0x52
 800887c:	33ff      	adds	r3, #255	; 0xff
 800887e:	5cd3      	ldrb	r3, [r2, r3]
 8008880:	001a      	movs	r2, r3
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	0013      	movs	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	189b      	adds	r3, r3, r2
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	189b      	adds	r3, r3, r2
 800888e:	0002      	movs	r2, r0
 8008890:	0152      	lsls	r2, r2, #5
 8008892:	1812      	adds	r2, r2, r0
 8008894:	189b      	adds	r3, r3, r2
 8008896:	18cb      	adds	r3, r1, r3
 8008898:	3305      	adds	r3, #5
 800889a:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	2350      	movs	r3, #80	; 0x50
 80088a0:	33ff      	adds	r3, #255	; 0xff
 80088a2:	54d1      	strb	r1, [r2, r3]
	}

}
 80088a4:	46c0      	nop			; (mov r8, r8)
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b007      	add	sp, #28
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088ac <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	000c      	movs	r4, r1
 80088b6:	0010      	movs	r0, r2
 80088b8:	0019      	movs	r1, r3
 80088ba:	1cfb      	adds	r3, r7, #3
 80088bc:	1c22      	adds	r2, r4, #0
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	1cbb      	adds	r3, r7, #2
 80088c2:	1c02      	adds	r2, r0, #0
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	1c7b      	adds	r3, r7, #1
 80088c8:	1c0a      	adds	r2, r1, #0
 80088ca:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 80088cc:	1cfb      	adds	r3, r7, #3
 80088ce:	7819      	ldrb	r1, [r3, #0]
 80088d0:	1cbb      	adds	r3, r7, #2
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	0013      	movs	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	000a      	movs	r2, r1
 80088e2:	0152      	lsls	r2, r2, #5
 80088e4:	1852      	adds	r2, r2, r1
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	18c3      	adds	r3, r0, r3
 80088ea:	3306      	adds	r3, #6
 80088ec:	1cfa      	adds	r2, r7, #3
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 80088f2:	1cfb      	adds	r3, r7, #3
 80088f4:	7819      	ldrb	r1, [r3, #0]
 80088f6:	1cbb      	adds	r3, r7, #2
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	0013      	movs	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	189b      	adds	r3, r3, r2
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	189b      	adds	r3, r3, r2
 8008906:	000a      	movs	r2, r1
 8008908:	0152      	lsls	r2, r2, #5
 800890a:	1852      	adds	r2, r2, r1
 800890c:	189b      	adds	r3, r3, r2
 800890e:	18c3      	adds	r3, r0, r3
 8008910:	3307      	adds	r3, #7
 8008912:	1cba      	adds	r2, r7, #2
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 8008918:	1cfb      	adds	r3, r7, #3
 800891a:	7819      	ldrb	r1, [r3, #0]
 800891c:	1cbb      	adds	r3, r7, #2
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	0013      	movs	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	189b      	adds	r3, r3, r2
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	189b      	adds	r3, r3, r2
 800892c:	000a      	movs	r2, r1
 800892e:	0152      	lsls	r2, r2, #5
 8008930:	1852      	adds	r2, r2, r1
 8008932:	189b      	adds	r3, r3, r2
 8008934:	18c3      	adds	r3, r0, r3
 8008936:	3308      	adds	r3, #8
 8008938:	1c7a      	adds	r2, r7, #1
 800893a:	7812      	ldrb	r2, [r2, #0]
 800893c:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 800893e:	1cfb      	adds	r3, r7, #3
 8008940:	7819      	ldrb	r1, [r3, #0]
 8008942:	1cbb      	adds	r3, r7, #2
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	0013      	movs	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	189b      	adds	r3, r3, r2
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	189b      	adds	r3, r3, r2
 8008952:	000a      	movs	r2, r1
 8008954:	0152      	lsls	r2, r2, #5
 8008956:	1852      	adds	r2, r2, r1
 8008958:	189b      	adds	r3, r3, r2
 800895a:	18c3      	adds	r3, r0, r3
 800895c:	3309      	adds	r3, #9
 800895e:	001a      	movs	r2, r3
 8008960:	2318      	movs	r3, #24
 8008962:	18fb      	adds	r3, r7, r3
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 8008968:	1cfb      	adds	r3, r7, #3
 800896a:	7819      	ldrb	r1, [r3, #0]
 800896c:	1cbb      	adds	r3, r7, #2
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	0013      	movs	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	189b      	adds	r3, r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	189b      	adds	r3, r3, r2
 800897c:	000a      	movs	r2, r1
 800897e:	0152      	lsls	r2, r2, #5
 8008980:	1852      	adds	r2, r2, r1
 8008982:	189b      	adds	r3, r3, r2
 8008984:	18c3      	adds	r3, r0, r3
 8008986:	330a      	adds	r3, #10
 8008988:	221c      	movs	r2, #28
 800898a:	18ba      	adds	r2, r7, r2
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	701a      	strb	r2, [r3, #0]

}
 8008990:	46c0      	nop			; (mov r8, r8)
 8008992:	46bd      	mov	sp, r7
 8008994:	b003      	add	sp, #12
 8008996:	bd90      	pop	{r4, r7, pc}

08008998 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	000a      	movs	r2, r1
 80089a2:	1cfb      	adds	r3, r7, #3
 80089a4:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 80089a6:	1cfb      	adds	r3, r7, #3
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d000      	beq.n	80089b0 <menuSwitch+0x18>
 80089ae:	e0e2      	b.n	8008b76 <menuSwitch+0x1de>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	2352      	movs	r3, #82	; 0x52
 80089b4:	33ff      	adds	r3, #255	; 0xff
 80089b6:	5cd3      	ldrb	r3, [r2, r3]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d105      	bne.n	80089c8 <menuSwitch+0x30>
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	23a8      	movs	r3, #168	; 0xa8
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	5cd3      	ldrb	r3, [r2, r3]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d124      	bne.n	8008a12 <menuSwitch+0x7a>
				|| (menu->current.level != 0
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	2352      	movs	r3, #82	; 0x52
 80089cc:	33ff      	adds	r3, #255	; 0xff
 80089ce:	5cd3      	ldrb	r3, [r2, r3]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d100      	bne.n	80089d6 <menuSwitch+0x3e>
 80089d4:	e0cd      	b.n	8008b72 <menuSwitch+0x1da>
						&& menu->current.entry
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	23a8      	movs	r3, #168	; 0xa8
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	5cd1      	ldrb	r1, [r2, r3]
								> menu->items[menu->current.parent][menu->current.level
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	23a9      	movs	r3, #169	; 0xa9
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	5cd3      	ldrb	r3, [r2, r3]
 80089e6:	001c      	movs	r4, r3
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	2352      	movs	r3, #82	; 0x52
 80089ec:	33ff      	adds	r3, #255	; 0xff
 80089ee:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childFirst)) {
 80089f0:	1e5a      	subs	r2, r3, #1
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	0013      	movs	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	0022      	movs	r2, r4
 8008a00:	0152      	lsls	r2, r2, #5
 8008a02:	1912      	adds	r2, r2, r4
 8008a04:	189b      	adds	r3, r3, r2
 8008a06:	18c3      	adds	r3, r0, r3
 8008a08:	3309      	adds	r3, #9
 8008a0a:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 8008a0c:	4299      	cmp	r1, r3
 8008a0e:	d800      	bhi.n	8008a12 <menuSwitch+0x7a>
 8008a10:	e0af      	b.n	8008b72 <menuSwitch+0x1da>

			menu->current.entry--;
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	23a8      	movs	r3, #168	; 0xa8
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	5cd3      	ldrb	r3, [r2, r3]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b2d9      	uxtb	r1, r3
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	23a8      	movs	r3, #168	; 0xa8
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	54d1      	strb	r1, [r2, r3]
			memcpy(menu->current.value,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	334b      	adds	r3, #75	; 0x4b
 8008a2a:	33ff      	adds	r3, #255	; 0xff
 8008a2c:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	23a8      	movs	r3, #168	; 0xa8
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	5cd3      	ldrb	r3, [r2, r3]
 8008a36:	0019      	movs	r1, r3
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	2352      	movs	r3, #82	; 0x52
 8008a3c:	33ff      	adds	r3, #255	; 0xff
 8008a3e:	5cd3      	ldrb	r3, [r2, r3]
 8008a40:	001a      	movs	r2, r3
 8008a42:	0013      	movs	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	189b      	adds	r3, r3, r2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	189b      	adds	r3, r3, r2
 8008a4c:	000a      	movs	r2, r1
 8008a4e:	0152      	lsls	r2, r2, #5
 8008a50:	1852      	adds	r2, r2, r1
 8008a52:	189b      	adds	r3, r3, r2
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 8008a58:	2204      	movs	r2, #4
 8008a5a:	0019      	movs	r1, r3
 8008a5c:	f001 fab6 	bl	8009fcc <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	23a8      	movs	r3, #168	; 0xa8
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	5cd3      	ldrb	r3, [r2, r3]
 8008a68:	0018      	movs	r0, r3
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	2352      	movs	r3, #82	; 0x52
 8008a6e:	33ff      	adds	r3, #255	; 0xff
 8008a70:	5cd3      	ldrb	r3, [r2, r3]
 8008a72:	001a      	movs	r2, r3
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	0013      	movs	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	189b      	adds	r3, r3, r2
 8008a80:	0002      	movs	r2, r0
 8008a82:	0152      	lsls	r2, r2, #5
 8008a84:	1812      	adds	r2, r2, r0
 8008a86:	189b      	adds	r3, r3, r2
 8008a88:	18cb      	adds	r3, r1, r3
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	23a7      	movs	r3, #167	; 0xa7
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	23a8      	movs	r3, #168	; 0xa8
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	5cd3      	ldrb	r3, [r2, r3]
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	2352      	movs	r3, #82	; 0x52
 8008aa4:	33ff      	adds	r3, #255	; 0xff
 8008aa6:	5cd3      	ldrb	r3, [r2, r3]
 8008aa8:	001a      	movs	r2, r3
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	0013      	movs	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	189b      	adds	r3, r3, r2
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	189b      	adds	r3, r3, r2
 8008ab6:	0002      	movs	r2, r0
 8008ab8:	0152      	lsls	r2, r2, #5
 8008aba:	1812      	adds	r2, r2, r0
 8008abc:	189b      	adds	r3, r3, r2
 8008abe:	18cb      	adds	r3, r1, r3
 8008ac0:	3305      	adds	r3, #5
 8008ac2:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	2350      	movs	r3, #80	; 0x50
 8008ac8:	33ff      	adds	r3, #255	; 0xff
 8008aca:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	23a8      	movs	r3, #168	; 0xa8
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	5cd3      	ldrb	r3, [r2, r3]
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	2352      	movs	r3, #82	; 0x52
 8008ada:	33ff      	adds	r3, #255	; 0xff
 8008adc:	5cd3      	ldrb	r3, [r2, r3]
 8008ade:	001a      	movs	r2, r3
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	0013      	movs	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	189b      	adds	r3, r3, r2
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	0002      	movs	r2, r0
 8008aee:	0152      	lsls	r2, r2, #5
 8008af0:	1812      	adds	r2, r2, r0
 8008af2:	189b      	adds	r3, r3, r2
 8008af4:	18cb      	adds	r3, r1, r3
 8008af6:	3308      	adds	r3, #8
 8008af8:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	23a9      	movs	r3, #169	; 0xa9
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	23a8      	movs	r3, #168	; 0xa8
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	5cd3      	ldrb	r3, [r2, r3]
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	2352      	movs	r3, #82	; 0x52
 8008b10:	33ff      	adds	r3, #255	; 0xff
 8008b12:	5cd3      	ldrb	r3, [r2, r3]
 8008b14:	001a      	movs	r2, r3
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	0013      	movs	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	189b      	adds	r3, r3, r2
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	189b      	adds	r3, r3, r2
 8008b22:	0002      	movs	r2, r0
 8008b24:	0152      	lsls	r2, r2, #5
 8008b26:	1812      	adds	r2, r2, r0
 8008b28:	189b      	adds	r3, r3, r2
 8008b2a:	18cb      	adds	r3, r1, r3
 8008b2c:	3309      	adds	r3, #9
 8008b2e:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	2354      	movs	r3, #84	; 0x54
 8008b34:	33ff      	adds	r3, #255	; 0xff
 8008b36:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	23a8      	movs	r3, #168	; 0xa8
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	5cd3      	ldrb	r3, [r2, r3]
 8008b40:	0018      	movs	r0, r3
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	2352      	movs	r3, #82	; 0x52
 8008b46:	33ff      	adds	r3, #255	; 0xff
 8008b48:	5cd3      	ldrb	r3, [r2, r3]
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	0013      	movs	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	189b      	adds	r3, r3, r2
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	0002      	movs	r2, r0
 8008b5a:	0152      	lsls	r2, r2, #5
 8008b5c:	1812      	adds	r2, r2, r0
 8008b5e:	189b      	adds	r3, r3, r2
 8008b60:	18cb      	adds	r3, r1, r3
 8008b62:	330a      	adds	r3, #10
 8008b64:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	23aa      	movs	r3, #170	; 0xaa
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e25f      	b.n	8009032 <menuSwitch+0x69a>
		} else {
			return MENU_ERROR;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e25d      	b.n	8009032 <menuSwitch+0x69a>
		}

	} else if (direction == MENU_DOWN) {
 8008b76:	1cfb      	adds	r3, r7, #3
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d000      	beq.n	8008b80 <menuSwitch+0x1e8>
 8008b7e:	e0e2      	b.n	8008d46 <menuSwitch+0x3ae>

		if ((menu->current.level == 0
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	2352      	movs	r3, #82	; 0x52
 8008b84:	33ff      	adds	r3, #255	; 0xff
 8008b86:	5cd3      	ldrb	r3, [r2, r3]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d105      	bne.n	8008b98 <menuSwitch+0x200>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	23a8      	movs	r3, #168	; 0xa8
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	5cd3      	ldrb	r3, [r2, r3]
 8008b94:	2b06      	cmp	r3, #6
 8008b96:	d924      	bls.n	8008be2 <menuSwitch+0x24a>
				|| (menu->current.level != 0
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	2352      	movs	r3, #82	; 0x52
 8008b9c:	33ff      	adds	r3, #255	; 0xff
 8008b9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d100      	bne.n	8008ba6 <menuSwitch+0x20e>
 8008ba4:	e0cd      	b.n	8008d42 <menuSwitch+0x3aa>
						&& menu->current.entry
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	23a8      	movs	r3, #168	; 0xa8
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	5cd1      	ldrb	r1, [r2, r3]
								< menu->items[menu->current.parent][menu->current.level
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	23a9      	movs	r3, #169	; 0xa9
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	5cd3      	ldrb	r3, [r2, r3]
 8008bb6:	001c      	movs	r4, r3
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	2352      	movs	r3, #82	; 0x52
 8008bbc:	33ff      	adds	r3, #255	; 0xff
 8008bbe:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childLast)) {
 8008bc0:	1e5a      	subs	r2, r3, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	0013      	movs	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	189b      	adds	r3, r3, r2
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	189b      	adds	r3, r3, r2
 8008bce:	0022      	movs	r2, r4
 8008bd0:	0152      	lsls	r2, r2, #5
 8008bd2:	1912      	adds	r2, r2, r4
 8008bd4:	189b      	adds	r3, r3, r2
 8008bd6:	18c3      	adds	r3, r0, r3
 8008bd8:	330a      	adds	r3, #10
 8008bda:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	d300      	bcc.n	8008be2 <menuSwitch+0x24a>
 8008be0:	e0af      	b.n	8008d42 <menuSwitch+0x3aa>

			menu->current.entry++;
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	23a8      	movs	r3, #168	; 0xa8
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	5cd3      	ldrb	r3, [r2, r3]
 8008bea:	3301      	adds	r3, #1
 8008bec:	b2d9      	uxtb	r1, r3
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	23a8      	movs	r3, #168	; 0xa8
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	54d1      	strb	r1, [r2, r3]

			memcpy(menu->current.value,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	334b      	adds	r3, #75	; 0x4b
 8008bfa:	33ff      	adds	r3, #255	; 0xff
 8008bfc:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	23a8      	movs	r3, #168	; 0xa8
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	5cd3      	ldrb	r3, [r2, r3]
 8008c06:	0019      	movs	r1, r3
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	2352      	movs	r3, #82	; 0x52
 8008c0c:	33ff      	adds	r3, #255	; 0xff
 8008c0e:	5cd3      	ldrb	r3, [r2, r3]
 8008c10:	001a      	movs	r2, r3
 8008c12:	0013      	movs	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	189b      	adds	r3, r3, r2
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	189b      	adds	r3, r3, r2
 8008c1c:	000a      	movs	r2, r1
 8008c1e:	0152      	lsls	r2, r2, #5
 8008c20:	1852      	adds	r2, r2, r1
 8008c22:	189b      	adds	r3, r3, r2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 8008c28:	2204      	movs	r2, #4
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	f001 f9ce 	bl	8009fcc <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	23a8      	movs	r3, #168	; 0xa8
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	0018      	movs	r0, r3
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	2352      	movs	r3, #82	; 0x52
 8008c3e:	33ff      	adds	r3, #255	; 0xff
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	001a      	movs	r2, r3
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	0013      	movs	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	189b      	adds	r3, r3, r2
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	189b      	adds	r3, r3, r2
 8008c50:	0002      	movs	r2, r0
 8008c52:	0152      	lsls	r2, r2, #5
 8008c54:	1812      	adds	r2, r2, r0
 8008c56:	189b      	adds	r3, r3, r2
 8008c58:	18cb      	adds	r3, r1, r3
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	23a7      	movs	r3, #167	; 0xa7
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	23a8      	movs	r3, #168	; 0xa8
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	5cd3      	ldrb	r3, [r2, r3]
 8008c6e:	0018      	movs	r0, r3
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	2352      	movs	r3, #82	; 0x52
 8008c74:	33ff      	adds	r3, #255	; 0xff
 8008c76:	5cd3      	ldrb	r3, [r2, r3]
 8008c78:	001a      	movs	r2, r3
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	0013      	movs	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	189b      	adds	r3, r3, r2
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	189b      	adds	r3, r3, r2
 8008c86:	0002      	movs	r2, r0
 8008c88:	0152      	lsls	r2, r2, #5
 8008c8a:	1812      	adds	r2, r2, r0
 8008c8c:	189b      	adds	r3, r3, r2
 8008c8e:	18cb      	adds	r3, r1, r3
 8008c90:	3305      	adds	r3, #5
 8008c92:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	2350      	movs	r3, #80	; 0x50
 8008c98:	33ff      	adds	r3, #255	; 0xff
 8008c9a:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	23a8      	movs	r3, #168	; 0xa8
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	5cd3      	ldrb	r3, [r2, r3]
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	2352      	movs	r3, #82	; 0x52
 8008caa:	33ff      	adds	r3, #255	; 0xff
 8008cac:	5cd3      	ldrb	r3, [r2, r3]
 8008cae:	001a      	movs	r2, r3
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	0013      	movs	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	189b      	adds	r3, r3, r2
 8008cbc:	0002      	movs	r2, r0
 8008cbe:	0152      	lsls	r2, r2, #5
 8008cc0:	1812      	adds	r2, r2, r0
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	18cb      	adds	r3, r1, r3
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	23a9      	movs	r3, #169	; 0xa9
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	23a8      	movs	r3, #168	; 0xa8
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	5cd3      	ldrb	r3, [r2, r3]
 8008cda:	0018      	movs	r0, r3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	2352      	movs	r3, #82	; 0x52
 8008ce0:	33ff      	adds	r3, #255	; 0xff
 8008ce2:	5cd3      	ldrb	r3, [r2, r3]
 8008ce4:	001a      	movs	r2, r3
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	0013      	movs	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	189b      	adds	r3, r3, r2
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	0152      	lsls	r2, r2, #5
 8008cf6:	1812      	adds	r2, r2, r0
 8008cf8:	189b      	adds	r3, r3, r2
 8008cfa:	18cb      	adds	r3, r1, r3
 8008cfc:	3309      	adds	r3, #9
 8008cfe:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	2354      	movs	r3, #84	; 0x54
 8008d04:	33ff      	adds	r3, #255	; 0xff
 8008d06:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	23a8      	movs	r3, #168	; 0xa8
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	5cd3      	ldrb	r3, [r2, r3]
 8008d10:	0018      	movs	r0, r3
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	2352      	movs	r3, #82	; 0x52
 8008d16:	33ff      	adds	r3, #255	; 0xff
 8008d18:	5cd3      	ldrb	r3, [r2, r3]
 8008d1a:	001a      	movs	r2, r3
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	0013      	movs	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	189b      	adds	r3, r3, r2
 8008d28:	0002      	movs	r2, r0
 8008d2a:	0152      	lsls	r2, r2, #5
 8008d2c:	1812      	adds	r2, r2, r0
 8008d2e:	189b      	adds	r3, r3, r2
 8008d30:	18cb      	adds	r3, r1, r3
 8008d32:	330a      	adds	r3, #10
 8008d34:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	23aa      	movs	r3, #170	; 0xaa
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e177      	b.n	8009032 <menuSwitch+0x69a>

		} else {
			return MENU_ERROR;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e175      	b.n	8009032 <menuSwitch+0x69a>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 8008d46:	1cfb      	adds	r3, r7, #3
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d000      	beq.n	8008d50 <menuSwitch+0x3b8>
 8008d4e:	e0ab      	b.n	8008ea8 <menuSwitch+0x510>
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	2354      	movs	r3, #84	; 0x54
 8008d54:	33ff      	adds	r3, #255	; 0xff
 8008d56:	5cd3      	ldrb	r3, [r2, r3]
 8008d58:	2bff      	cmp	r3, #255	; 0xff
 8008d5a:	d100      	bne.n	8008d5e <menuSwitch+0x3c6>
 8008d5c:	e0a4      	b.n	8008ea8 <menuSwitch+0x510>

		menu->current.parent = menu->current.entry;
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	23a8      	movs	r3, #168	; 0xa8
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	5cd1      	ldrb	r1, [r2, r3]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	23a9      	movs	r3, #169	; 0xa9
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	54d1      	strb	r1, [r2, r3]
		menu->current.entry = menu->current.childFirst;
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	2354      	movs	r3, #84	; 0x54
 8008d72:	33ff      	adds	r3, #255	; 0xff
 8008d74:	5cd1      	ldrb	r1, [r2, r3]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	23a8      	movs	r3, #168	; 0xa8
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	54d1      	strb	r1, [r2, r3]
		menu->current.level++;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	2352      	movs	r3, #82	; 0x52
 8008d82:	33ff      	adds	r3, #255	; 0xff
 8008d84:	5cd3      	ldrb	r3, [r2, r3]
 8008d86:	3301      	adds	r3, #1
 8008d88:	b2d9      	uxtb	r1, r3
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	2352      	movs	r3, #82	; 0x52
 8008d8e:	33ff      	adds	r3, #255	; 0xff
 8008d90:	54d1      	strb	r1, [r2, r3]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	23a8      	movs	r3, #168	; 0xa8
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	5cd3      	ldrb	r3, [r2, r3]
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	2352      	movs	r3, #82	; 0x52
 8008da0:	33ff      	adds	r3, #255	; 0xff
 8008da2:	5cd3      	ldrb	r3, [r2, r3]
 8008da4:	001a      	movs	r2, r3
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	0013      	movs	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	189b      	adds	r3, r3, r2
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	189b      	adds	r3, r3, r2
 8008db2:	0002      	movs	r2, r0
 8008db4:	0152      	lsls	r2, r2, #5
 8008db6:	1812      	adds	r2, r2, r0
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	18cb      	adds	r3, r1, r3
 8008dbc:	3309      	adds	r3, #9
 8008dbe:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	2354      	movs	r3, #84	; 0x54
 8008dc4:	33ff      	adds	r3, #255	; 0xff
 8008dc6:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	23a8      	movs	r3, #168	; 0xa8
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	5cd3      	ldrb	r3, [r2, r3]
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	2352      	movs	r3, #82	; 0x52
 8008dd6:	33ff      	adds	r3, #255	; 0xff
 8008dd8:	5cd3      	ldrb	r3, [r2, r3]
 8008dda:	001a      	movs	r2, r3
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	0013      	movs	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	189b      	adds	r3, r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	189b      	adds	r3, r3, r2
 8008de8:	0002      	movs	r2, r0
 8008dea:	0152      	lsls	r2, r2, #5
 8008dec:	1812      	adds	r2, r2, r0
 8008dee:	189b      	adds	r3, r3, r2
 8008df0:	18cb      	adds	r3, r1, r3
 8008df2:	330a      	adds	r3, #10
 8008df4:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	23aa      	movs	r3, #170	; 0xaa
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	54d1      	strb	r1, [r2, r3]
		memcpy(menu->current.value,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	334b      	adds	r3, #75	; 0x4b
 8008e02:	33ff      	adds	r3, #255	; 0xff
 8008e04:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	23a8      	movs	r3, #168	; 0xa8
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	5cd3      	ldrb	r3, [r2, r3]
 8008e0e:	0019      	movs	r1, r3
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	2352      	movs	r3, #82	; 0x52
 8008e14:	33ff      	adds	r3, #255	; 0xff
 8008e16:	5cd3      	ldrb	r3, [r2, r3]
 8008e18:	001a      	movs	r2, r3
 8008e1a:	0013      	movs	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	189b      	adds	r3, r3, r2
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	000a      	movs	r2, r1
 8008e26:	0152      	lsls	r2, r2, #5
 8008e28:	1852      	adds	r2, r2, r1
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8008e30:	2204      	movs	r2, #4
 8008e32:	0019      	movs	r1, r3
 8008e34:	f001 f8ca 	bl	8009fcc <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	23a8      	movs	r3, #168	; 0xa8
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	5cd3      	ldrb	r3, [r2, r3]
 8008e40:	0018      	movs	r0, r3
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	2352      	movs	r3, #82	; 0x52
 8008e46:	33ff      	adds	r3, #255	; 0xff
 8008e48:	5cd3      	ldrb	r3, [r2, r3]
 8008e4a:	001a      	movs	r2, r3
 8008e4c:	6879      	ldr	r1, [r7, #4]
 8008e4e:	0013      	movs	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	189b      	adds	r3, r3, r2
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	0002      	movs	r2, r0
 8008e5a:	0152      	lsls	r2, r2, #5
 8008e5c:	1812      	adds	r2, r2, r0
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	18cb      	adds	r3, r1, r3
 8008e62:	3304      	adds	r3, #4
 8008e64:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	23a7      	movs	r3, #167	; 0xa7
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	23a8      	movs	r3, #168	; 0xa8
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	5cd3      	ldrb	r3, [r2, r3]
 8008e76:	0018      	movs	r0, r3
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	2352      	movs	r3, #82	; 0x52
 8008e7c:	33ff      	adds	r3, #255	; 0xff
 8008e7e:	5cd3      	ldrb	r3, [r2, r3]
 8008e80:	001a      	movs	r2, r3
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	0013      	movs	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	189b      	adds	r3, r3, r2
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	189b      	adds	r3, r3, r2
 8008e8e:	0002      	movs	r2, r0
 8008e90:	0152      	lsls	r2, r2, #5
 8008e92:	1812      	adds	r2, r2, r0
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	18cb      	adds	r3, r1, r3
 8008e98:	3305      	adds	r3, #5
 8008e9a:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	2350      	movs	r3, #80	; 0x50
 8008ea0:	33ff      	adds	r3, #255	; 0xff
 8008ea2:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e0c4      	b.n	8009032 <menuSwitch+0x69a>

	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 8008ea8:	1cfb      	adds	r3, r7, #3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d000      	beq.n	8008eb2 <menuSwitch+0x51a>
 8008eb0:	e0be      	b.n	8009030 <menuSwitch+0x698>
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	23a9      	movs	r3, #169	; 0xa9
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	5cd3      	ldrb	r3, [r2, r3]
 8008eba:	2bff      	cmp	r3, #255	; 0xff
 8008ebc:	d100      	bne.n	8008ec0 <menuSwitch+0x528>
 8008ebe:	e0b7      	b.n	8009030 <menuSwitch+0x698>

		menu->current.entry = menu->current.parent;
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	23a9      	movs	r3, #169	; 0xa9
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	5cd1      	ldrb	r1, [r2, r3]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	23a8      	movs	r3, #168	; 0xa8
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	54d1      	strb	r1, [r2, r3]
		menu->current.level--;
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	2352      	movs	r3, #82	; 0x52
 8008ed4:	33ff      	adds	r3, #255	; 0xff
 8008ed6:	5cd3      	ldrb	r3, [r2, r3]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b2d9      	uxtb	r1, r3
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	2352      	movs	r3, #82	; 0x52
 8008ee0:	33ff      	adds	r3, #255	; 0xff
 8008ee2:	54d1      	strb	r1, [r2, r3]
		menu->current.parent = menu->items[menu->current.parent][menu->current.level].parent;
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	23a9      	movs	r3, #169	; 0xa9
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	5cd3      	ldrb	r3, [r2, r3]
 8008eec:	0018      	movs	r0, r3
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	2352      	movs	r3, #82	; 0x52
 8008ef2:	33ff      	adds	r3, #255	; 0xff
 8008ef4:	5cd3      	ldrb	r3, [r2, r3]
 8008ef6:	001a      	movs	r2, r3
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	0013      	movs	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	189b      	adds	r3, r3, r2
 8008f04:	0002      	movs	r2, r0
 8008f06:	0152      	lsls	r2, r2, #5
 8008f08:	1812      	adds	r2, r2, r0
 8008f0a:	189b      	adds	r3, r3, r2
 8008f0c:	18cb      	adds	r3, r1, r3
 8008f0e:	3308      	adds	r3, #8
 8008f10:	7819      	ldrb	r1, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	23a9      	movs	r3, #169	; 0xa9
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	54d1      	strb	r1, [r2, r3]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	23a8      	movs	r3, #168	; 0xa8
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	5cd3      	ldrb	r3, [r2, r3]
 8008f22:	0018      	movs	r0, r3
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	2352      	movs	r3, #82	; 0x52
 8008f28:	33ff      	adds	r3, #255	; 0xff
 8008f2a:	5cd3      	ldrb	r3, [r2, r3]
 8008f2c:	001a      	movs	r2, r3
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	0013      	movs	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	189b      	adds	r3, r3, r2
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	189b      	adds	r3, r3, r2
 8008f3a:	0002      	movs	r2, r0
 8008f3c:	0152      	lsls	r2, r2, #5
 8008f3e:	1812      	adds	r2, r2, r0
 8008f40:	189b      	adds	r3, r3, r2
 8008f42:	18cb      	adds	r3, r1, r3
 8008f44:	3309      	adds	r3, #9
 8008f46:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	2354      	movs	r3, #84	; 0x54
 8008f4c:	33ff      	adds	r3, #255	; 0xff
 8008f4e:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	23a8      	movs	r3, #168	; 0xa8
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	5cd3      	ldrb	r3, [r2, r3]
 8008f58:	0018      	movs	r0, r3
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	2352      	movs	r3, #82	; 0x52
 8008f5e:	33ff      	adds	r3, #255	; 0xff
 8008f60:	5cd3      	ldrb	r3, [r2, r3]
 8008f62:	001a      	movs	r2, r3
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	0013      	movs	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	189b      	adds	r3, r3, r2
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	189b      	adds	r3, r3, r2
 8008f70:	0002      	movs	r2, r0
 8008f72:	0152      	lsls	r2, r2, #5
 8008f74:	1812      	adds	r2, r2, r0
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	18cb      	adds	r3, r1, r3
 8008f7a:	330a      	adds	r3, #10
 8008f7c:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	23aa      	movs	r3, #170	; 0xaa
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	54d1      	strb	r1, [r2, r3]

		memcpy(menu->current.value,
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	334b      	adds	r3, #75	; 0x4b
 8008f8a:	33ff      	adds	r3, #255	; 0xff
 8008f8c:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	23a8      	movs	r3, #168	; 0xa8
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	5cd3      	ldrb	r3, [r2, r3]
 8008f96:	0019      	movs	r1, r3
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	2352      	movs	r3, #82	; 0x52
 8008f9c:	33ff      	adds	r3, #255	; 0xff
 8008f9e:	5cd3      	ldrb	r3, [r2, r3]
 8008fa0:	001a      	movs	r2, r3
 8008fa2:	0013      	movs	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	189b      	adds	r3, r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	189b      	adds	r3, r3, r2
 8008fac:	000a      	movs	r2, r1
 8008fae:	0152      	lsls	r2, r2, #5
 8008fb0:	1852      	adds	r2, r2, r1
 8008fb2:	189b      	adds	r3, r3, r2
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8008fb8:	2204      	movs	r2, #4
 8008fba:	0019      	movs	r1, r3
 8008fbc:	f001 f806 	bl	8009fcc <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	23a8      	movs	r3, #168	; 0xa8
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	5cd3      	ldrb	r3, [r2, r3]
 8008fc8:	0018      	movs	r0, r3
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	2352      	movs	r3, #82	; 0x52
 8008fce:	33ff      	adds	r3, #255	; 0xff
 8008fd0:	5cd3      	ldrb	r3, [r2, r3]
 8008fd2:	001a      	movs	r2, r3
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	0013      	movs	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	189b      	adds	r3, r3, r2
 8008fe0:	0002      	movs	r2, r0
 8008fe2:	0152      	lsls	r2, r2, #5
 8008fe4:	1812      	adds	r2, r2, r0
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	18cb      	adds	r3, r1, r3
 8008fea:	3304      	adds	r3, #4
 8008fec:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	23a7      	movs	r3, #167	; 0xa7
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
									menu->items[menu->current.entry][menu->current.level].value3;
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	23a8      	movs	r3, #168	; 0xa8
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	5cd3      	ldrb	r3, [r2, r3]
 8008ffe:	0018      	movs	r0, r3
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	2352      	movs	r3, #82	; 0x52
 8009004:	33ff      	adds	r3, #255	; 0xff
 8009006:	5cd3      	ldrb	r3, [r2, r3]
 8009008:	001a      	movs	r2, r3
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	0013      	movs	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	189b      	adds	r3, r3, r2
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	189b      	adds	r3, r3, r2
 8009016:	0002      	movs	r2, r0
 8009018:	0152      	lsls	r2, r2, #5
 800901a:	1812      	adds	r2, r2, r0
 800901c:	189b      	adds	r3, r3, r2
 800901e:	18cb      	adds	r3, r1, r3
 8009020:	3305      	adds	r3, #5
 8009022:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	2350      	movs	r3, #80	; 0x50
 8009028:	33ff      	adds	r3, #255	; 0xff
 800902a:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <menuSwitch+0x69a>
	} else {
		return MENU_ERROR;
 8009030:	2300      	movs	r3, #0
	}
}
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b003      	add	sp, #12
 8009038:	bd90      	pop	{r4, r7, pc}
	...

0800903c <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800903c:	b5b0      	push	{r4, r5, r7, lr}
 800903e:	b090      	sub	sp, #64	; 0x40
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8009044:	49ee      	ldr	r1, [pc, #952]	; (8009400 <rtcGetTime+0x3c4>)
 8009046:	4bef      	ldr	r3, [pc, #956]	; (8009404 <rtcGetTime+0x3c8>)
 8009048:	2200      	movs	r2, #0
 800904a:	0018      	movs	r0, r3
 800904c:	f7fb fe98 	bl	8004d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8009050:	49ed      	ldr	r1, [pc, #948]	; (8009408 <rtcGetTime+0x3cc>)
 8009052:	4bec      	ldr	r3, [pc, #944]	; (8009404 <rtcGetTime+0x3c8>)
 8009054:	2200      	movs	r2, #0
 8009056:	0018      	movs	r0, r3
 8009058:	f7fb ff80 	bl	8004f5c <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800905c:	4be8      	ldr	r3, [pc, #928]	; (8009400 <rtcGetTime+0x3c4>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b25a      	sxtb	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 8009066:	4be6      	ldr	r3, [pc, #920]	; (8009400 <rtcGetTime+0x3c4>)
 8009068:	785b      	ldrb	r3, [r3, #1]
 800906a:	b25a      	sxtb	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 8009070:	4be3      	ldr	r3, [pc, #908]	; (8009400 <rtcGetTime+0x3c4>)
 8009072:	789b      	ldrb	r3, [r3, #2]
 8009074:	b25a      	sxtb	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800907a:	4be1      	ldr	r3, [pc, #900]	; (8009400 <rtcGetTime+0x3c4>)
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	0013      	movs	r3, r2
 8009080:	065b      	lsls	r3, r3, #25
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	189b      	adds	r3, r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4adf      	ldr	r2, [pc, #892]	; (800940c <rtcGetTime+0x3d0>)
 8009090:	4694      	mov	ip, r2
 8009092:	4463      	add	r3, ip
 8009094:	21ff      	movs	r1, #255	; 0xff
 8009096:	0018      	movs	r0, r3
 8009098:	f7f7 f834 	bl	8000104 <__udivsi3>
 800909c:	0003      	movs	r3, r0
 800909e:	b25a      	sxtb	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 80090a4:	4bd8      	ldr	r3, [pc, #864]	; (8009408 <rtcGetTime+0x3cc>)
 80090a6:	789b      	ldrb	r3, [r3, #2]
 80090a8:	b25a      	sxtb	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 80090ae:	4bd6      	ldr	r3, [pc, #856]	; (8009408 <rtcGetTime+0x3cc>)
 80090b0:	785b      	ldrb	r3, [r3, #1]
 80090b2:	b25a      	sxtb	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 80090b8:	4bd3      	ldr	r3, [pc, #844]	; (8009408 <rtcGetTime+0x3cc>)
 80090ba:	78db      	ldrb	r3, [r3, #3]
 80090bc:	b25a      	sxtb	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	785b      	ldrb	r3, [r3, #1]
 80090c6:	b25b      	sxtb	r3, r3
 80090c8:	3309      	adds	r3, #9
 80090ca:	210c      	movs	r1, #12
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7f7 f8a3 	bl	8000218 <__divsi3>
 80090d2:	0003      	movs	r3, r0
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7f8 f839 	bl	800114c <__aeabi_i2f>
 80090da:	1c03      	adds	r3, r0, #0
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b25b      	sxtb	r3, r3
 80090e4:	001c      	movs	r4, r3
 80090e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090e8:	f7f7 f9a2 	bl	8000430 <__aeabi_f2uiz>
 80090ec:	0003      	movs	r3, r0
 80090ee:	18e3      	adds	r3, r4, r3
 80090f0:	4ac7      	ldr	r2, [pc, #796]	; (8009410 <rtcGetTime+0x3d4>)
 80090f2:	4694      	mov	ip, r2
 80090f4:	4463      	add	r3, ip
 80090f6:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	b25b      	sxtb	r3, r3
 80090fe:	001a      	movs	r2, r3
 8009100:	0013      	movs	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	009a      	lsls	r2, r3, #2
 800910c:	189b      	adds	r3, r3, r2
 800910e:	2109      	movs	r1, #9
 8009110:	0018      	movs	r0, r3
 8009112:	f7f7 f881 	bl	8000218 <__divsi3>
 8009116:	0003      	movs	r3, r0
 8009118:	0018      	movs	r0, r3
 800911a:	f7f8 f817 	bl	800114c <__aeabi_i2f>
 800911e:	1c03      	adds	r3, r0, #0
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 8009122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009124:	0013      	movs	r3, r2
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	089b      	lsrs	r3, r3, #2
 800912c:	0018      	movs	r0, r3
 800912e:	f7f8 f853 	bl	80011d8 <__aeabi_ui2f>
 8009132:	1c03      	adds	r3, r0, #0
 8009134:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b25b      	sxtb	r3, r3
 800913c:	22fa      	movs	r2, #250	; 0xfa
 800913e:	00d2      	lsls	r2, r2, #3
 8009140:	189a      	adds	r2, r3, r2
 8009142:	0013      	movs	r3, r2
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	189b      	adds	r3, r3, r2
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	1a9b      	subs	r3, r3, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f7f8 ff79 	bl	8002048 <__aeabi_i2d>
 8009156:	2280      	movs	r2, #128	; 0x80
 8009158:	0612      	lsls	r2, r2, #24
 800915a:	4bae      	ldr	r3, [pc, #696]	; (8009414 <rtcGetTime+0x3d8>)
 800915c:	f7f8 f878 	bl	8001250 <__aeabi_dadd>
 8009160:	0002      	movs	r2, r0
 8009162:	000b      	movs	r3, r1
 8009164:	0014      	movs	r4, r2
 8009166:	001d      	movs	r5, r3
 8009168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800916a:	f7f7 f961 	bl	8000430 <__aeabi_f2uiz>
 800916e:	0003      	movs	r3, r0
 8009170:	0018      	movs	r0, r3
 8009172:	f7f8 ff99 	bl	80020a8 <__aeabi_ui2d>
 8009176:	0002      	movs	r2, r0
 8009178:	000b      	movs	r3, r1
 800917a:	0020      	movs	r0, r4
 800917c:	0029      	movs	r1, r5
 800917e:	f7f8 f867 	bl	8001250 <__aeabi_dadd>
 8009182:	0002      	movs	r2, r0
 8009184:	000b      	movs	r3, r1
 8009186:	0014      	movs	r4, r2
 8009188:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800918a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918c:	f7f7 f950 	bl	8000430 <__aeabi_f2uiz>
 8009190:	0003      	movs	r3, r0
 8009192:	0018      	movs	r0, r3
 8009194:	f7f8 ff88 	bl	80020a8 <__aeabi_ui2d>
 8009198:	0002      	movs	r2, r0
 800919a:	000b      	movs	r3, r1
 800919c:	0020      	movs	r0, r4
 800919e:	0029      	movs	r1, r5
 80091a0:	f7f8 fbc0 	bl	8001924 <__aeabi_dsub>
 80091a4:	0002      	movs	r2, r0
 80091a6:	000b      	movs	r3, r1
 80091a8:	0014      	movs	r4, r2
 80091aa:	001d      	movs	r5, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	789b      	ldrb	r3, [r3, #2]
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7f8 ff48 	bl	8002048 <__aeabi_i2d>
 80091b8:	0002      	movs	r2, r0
 80091ba:	000b      	movs	r3, r1
 80091bc:	0020      	movs	r0, r4
 80091be:	0029      	movs	r1, r5
 80091c0:	f7f8 f846 	bl	8001250 <__aeabi_dadd>
 80091c4:	0002      	movs	r2, r0
 80091c6:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 80091c8:	0010      	movs	r0, r2
 80091ca:	0019      	movs	r1, r3
 80091cc:	f7f8 ffda 	bl	8002184 <__aeabi_d2f>
 80091d0:	1c03      	adds	r3, r0, #0
 80091d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	3353      	adds	r3, #83	; 0x53
 80091d8:	2164      	movs	r1, #100	; 0x64
 80091da:	0018      	movs	r0, r3
 80091dc:	f7f6 ff92 	bl	8000104 <__udivsi3>
 80091e0:	0003      	movs	r3, r0
 80091e2:	0018      	movs	r0, r3
 80091e4:	f7f7 fff8 	bl	80011d8 <__aeabi_ui2f>
 80091e8:	1c03      	adds	r3, r0, #0
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 80091ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ee:	f7f7 f91f 	bl	8000430 <__aeabi_f2uiz>
 80091f2:	0003      	movs	r3, r0
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	0013      	movs	r3, r2
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	089b      	lsrs	r3, r3, #2
 8009202:	0018      	movs	r0, r3
 8009204:	f7f7 ffe8 	bl	80011d8 <__aeabi_ui2f>
 8009208:	1c03      	adds	r3, r0, #0
 800920a:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800920c:	6a38      	ldr	r0, [r7, #32]
 800920e:	f7f7 f90f 	bl	8000430 <__aeabi_f2uiz>
 8009212:	0003      	movs	r3, r0
 8009214:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 8009216:	4980      	ldr	r1, [pc, #512]	; (8009418 <rtcGetTime+0x3dc>)
 8009218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800921a:	f7f7 f9ed 	bl	80005f8 <__aeabi_fadd>
 800921e:	1c03      	adds	r3, r0, #0
 8009220:	1c1c      	adds	r4, r3, #0
 8009222:	69f8      	ldr	r0, [r7, #28]
 8009224:	f7f7 ffd8 	bl	80011d8 <__aeabi_ui2f>
 8009228:	1c03      	adds	r3, r0, #0
 800922a:	1c19      	adds	r1, r3, #0
 800922c:	1c20      	adds	r0, r4, #0
 800922e:	f7f7 fda5 	bl	8000d7c <__aeabi_fsub>
 8009232:	1c03      	adds	r3, r0, #0
 8009234:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 8009236:	4b79      	ldr	r3, [pc, #484]	; (800941c <rtcGetTime+0x3e0>)
 8009238:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800923a:	6979      	ldr	r1, [r7, #20]
 800923c:	69b8      	ldr	r0, [r7, #24]
 800923e:	f7f7 fb77 	bl	8000930 <__aeabi_fdiv>
 8009242:	1c03      	adds	r3, r0, #0
 8009244:	1c18      	adds	r0, r3, #0
 8009246:	f7f8 ff55 	bl	80020f4 <__aeabi_f2d>
 800924a:	4a75      	ldr	r2, [pc, #468]	; (8009420 <rtcGetTime+0x3e4>)
 800924c:	4b75      	ldr	r3, [pc, #468]	; (8009424 <rtcGetTime+0x3e8>)
 800924e:	f7f8 fb69 	bl	8001924 <__aeabi_dsub>
 8009252:	0002      	movs	r2, r0
 8009254:	000b      	movs	r3, r1
 8009256:	0010      	movs	r0, r2
 8009258:	0019      	movs	r1, r3
 800925a:	f7f8 ff93 	bl	8002184 <__aeabi_d2f>
 800925e:	1c03      	adds	r3, r0, #0
 8009260:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 8009262:	6938      	ldr	r0, [r7, #16]
 8009264:	f7f7 f8e4 	bl	8000430 <__aeabi_f2uiz>
 8009268:	0003      	movs	r3, r0
 800926a:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7f7 ffb3 	bl	80011d8 <__aeabi_ui2f>
 8009272:	1c03      	adds	r3, r0, #0
 8009274:	1c19      	adds	r1, r3, #0
 8009276:	6938      	ldr	r0, [r7, #16]
 8009278:	f7f7 fd80 	bl	8000d7c <__aeabi_fsub>
 800927c:	1c03      	adds	r3, r0, #0
 800927e:	496a      	ldr	r1, [pc, #424]	; (8009428 <rtcGetTime+0x3ec>)
 8009280:	1c18      	adds	r0, r3, #0
 8009282:	f7f7 fc61 	bl	8000b48 <__aeabi_fmul>
 8009286:	1c03      	adds	r3, r0, #0
 8009288:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800928a:	68b8      	ldr	r0, [r7, #8]
 800928c:	f7f7 f8d0 	bl	8000430 <__aeabi_f2uiz>
 8009290:	0002      	movs	r2, r0
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2224      	movs	r2, #36	; 0x24
 800929a:	5c9b      	ldrb	r3, [r3, r2]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d114      	bne.n	80092ca <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2224      	movs	r2, #36	; 0x24
 80092ce:	5c9b      	ldrb	r3, [r3, r2]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d000      	beq.n	80092d6 <rtcGetTime+0x29a>
 80092d4:	e0f8      	b.n	80094c8 <rtcGetTime+0x48c>

#if RTC_FREEZED_DECIMALS
		chrono->chrono.hundredth = 0;
#else
		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	799b      	ldrb	r3, [r3, #6]
 80092da:	b25b      	sxtb	r3, r3
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7c9b      	ldrb	r3, [r3, #18]
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	b25a      	sxtb	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	779a      	strb	r2, [r3, #30]
#endif

		chrono->chrono.second = chrono->actual.second
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	795b      	ldrb	r3, [r3, #5]
 80092f4:	b25b      	sxtb	r3, r3
 80092f6:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7c5b      	ldrb	r3, [r3, #17]
 80092fc:	b25b      	sxtb	r3, r3
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	b2db      	uxtb	r3, r3
 8009304:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	791b      	ldrb	r3, [r3, #4]
 800930e:	b25b      	sxtb	r3, r3
 8009310:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7c1b      	ldrb	r3, [r3, #16]
 8009316:	b25b      	sxtb	r3, r3
 8009318:	b2db      	uxtb	r3, r3
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	b2db      	uxtb	r3, r3
 800931e:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	78db      	ldrb	r3, [r3, #3]
 8009328:	b25b      	sxtb	r3, r3
 800932a:	b2da      	uxtb	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	7bdb      	ldrb	r3, [r3, #15]
 8009330:	b25b      	sxtb	r3, r3
 8009332:	b2db      	uxtb	r3, r3
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	b2db      	uxtb	r3, r3
 8009338:	b25a      	sxtb	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	789b      	ldrb	r3, [r3, #2]
 8009342:	b25b      	sxtb	r3, r3
 8009344:	b2da      	uxtb	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	7b9b      	ldrb	r3, [r3, #14]
 800934a:	b25b      	sxtb	r3, r3
 800934c:	b2db      	uxtb	r3, r3
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	b2db      	uxtb	r3, r3
 8009352:	b25a      	sxtb	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	b25b      	sxtb	r3, r3
 800935e:	b2da      	uxtb	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7b5b      	ldrb	r3, [r3, #13]
 8009364:	b25b      	sxtb	r3, r3
 8009366:	b2db      	uxtb	r3, r3
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	b2db      	uxtb	r3, r3
 800936c:	b25a      	sxtb	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7f9b      	ldrb	r3, [r3, #30]
 8009376:	b25b      	sxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	da11      	bge.n	80093a0 <rtcGetTime+0x364>
			chrono->chrono.second--;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7f5b      	ldrb	r3, [r3, #29]
 8009380:	b25b      	sxtb	r3, r3
 8009382:	b2db      	uxtb	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	b25a      	sxtb	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7f9b      	ldrb	r3, [r3, #30]
 8009392:	b25b      	sxtb	r3, r3
 8009394:	b2db      	uxtb	r3, r3
 8009396:	3364      	adds	r3, #100	; 0x64
 8009398:	b2db      	uxtb	r3, r3
 800939a:	b25a      	sxtb	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7f5b      	ldrb	r3, [r3, #29]
 80093a4:	b25b      	sxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da11      	bge.n	80093ce <rtcGetTime+0x392>
			chrono->chrono.minute--;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7f1b      	ldrb	r3, [r3, #28]
 80093ae:	b25b      	sxtb	r3, r3
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	b25a      	sxtb	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7f5b      	ldrb	r3, [r3, #29]
 80093c0:	b25b      	sxtb	r3, r3
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	333c      	adds	r3, #60	; 0x3c
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	b25a      	sxtb	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7f1b      	ldrb	r3, [r3, #28]
 80093d2:	b25b      	sxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da29      	bge.n	800942c <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7edb      	ldrb	r3, [r3, #27]
 80093dc:	b25b      	sxtb	r3, r3
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	3b01      	subs	r3, #1
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	b25a      	sxtb	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7f1b      	ldrb	r3, [r3, #28]
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	333c      	adds	r3, #60	; 0x3c
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	b25a      	sxtb	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	771a      	strb	r2, [r3, #28]
 80093fc:	e016      	b.n	800942c <rtcGetTime+0x3f0>
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	20000fd4 	.word	0x20000fd4
 8009404:	20001290 	.word	0x20001290
 8009408:	2000002c 	.word	0x2000002c
 800940c:	0000639c 	.word	0x0000639c
 8009410:	00001a3c 	.word	0x00001a3c
 8009414:	413a62ff 	.word	0x413a62ff
 8009418:	42180000 	.word	0x42180000
 800941c:	41ec3ea6 	.word	0x41ec3ea6
 8009420:	67381d7e 	.word	0x67381d7e
 8009424:	3fd36944 	.word	0x3fd36944
 8009428:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7edb      	ldrb	r3, [r3, #27]
 8009430:	b25b      	sxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	da11      	bge.n	800945a <rtcGetTime+0x41e>
			chrono->chrono.day--;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7e9b      	ldrb	r3, [r3, #26]
 800943a:	b25b      	sxtb	r3, r3
 800943c:	b2db      	uxtb	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b2db      	uxtb	r3, r3
 8009442:	b25a      	sxtb	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	7edb      	ldrb	r3, [r3, #27]
 800944c:	b25b      	sxtb	r3, r3
 800944e:	b2db      	uxtb	r3, r3
 8009450:	3318      	adds	r3, #24
 8009452:	b2db      	uxtb	r3, r3
 8009454:	b25a      	sxtb	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7e9b      	ldrb	r3, [r3, #26]
 800945e:	b25b      	sxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	da11      	bge.n	8009488 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7e5b      	ldrb	r3, [r3, #25]
 8009468:	b25b      	sxtb	r3, r3
 800946a:	b2db      	uxtb	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	b2db      	uxtb	r3, r3
 8009470:	b25a      	sxtb	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7e9b      	ldrb	r3, [r3, #26]
 800947a:	b25b      	sxtb	r3, r3
 800947c:	b2db      	uxtb	r3, r3
 800947e:	331e      	adds	r3, #30
 8009480:	b2db      	uxtb	r3, r3
 8009482:	b25a      	sxtb	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7e5b      	ldrb	r3, [r3, #25]
 800948c:	b25b      	sxtb	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	da11      	bge.n	80094b6 <rtcGetTime+0x47a>
			chrono->chrono.year--;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7e1b      	ldrb	r3, [r3, #24]
 8009496:	b25b      	sxtb	r3, r3
 8009498:	b2db      	uxtb	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b2db      	uxtb	r3, r3
 800949e:	b25a      	sxtb	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7e5b      	ldrb	r3, [r3, #25]
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	330c      	adds	r3, #12
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	b25a      	sxtb	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	765a      	strb	r2, [r3, #25]
		}

		//max chrono count
		if (chrono->chrono.hour >= 5) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	7edb      	ldrb	r3, [r3, #27]
 80094ba:	b25b      	sxtb	r3, r3
 80094bc:	2b04      	cmp	r3, #4
 80094be:	dd03      	ble.n	80094c8 <rtcGetTime+0x48c>
			chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2224      	movs	r2, #36	; 0x24
 80094c4:	2102      	movs	r1, #2
 80094c6:	5499      	strb	r1, [r3, r2]
		}
	}

}
 80094c8:	46c0      	nop			; (mov r8, r8)
 80094ca:	46bd      	mov	sp, r7
 80094cc:	b010      	add	sp, #64	; 0x40
 80094ce:	bdb0      	pop	{r4, r5, r7, pc}

080094d0 <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	78db      	ldrb	r3, [r3, #3]
 80094dc:	b25b      	sxtb	r3, r3
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	4b17      	ldr	r3, [pc, #92]	; (8009540 <rtcSetTime+0x70>)
 80094e2:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	791b      	ldrb	r3, [r3, #4]
 80094e8:	b25b      	sxtb	r3, r3
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	4b14      	ldr	r3, [pc, #80]	; (8009540 <rtcSetTime+0x70>)
 80094ee:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	795b      	ldrb	r3, [r3, #5]
 80094f4:	b25b      	sxtb	r3, r3
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	4b11      	ldr	r3, [pc, #68]	; (8009540 <rtcSetTime+0x70>)
 80094fa:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	789b      	ldrb	r3, [r3, #2]
 8009500:	b25b      	sxtb	r3, r3
 8009502:	b2da      	uxtb	r2, r3
 8009504:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <rtcSetTime+0x74>)
 8009506:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	785b      	ldrb	r3, [r3, #1]
 800950c:	b25b      	sxtb	r3, r3
 800950e:	b2da      	uxtb	r2, r3
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <rtcSetTime+0x74>)
 8009512:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b25b      	sxtb	r3, r3
 800951a:	b2da      	uxtb	r2, r3
 800951c:	4b09      	ldr	r3, [pc, #36]	; (8009544 <rtcSetTime+0x74>)
 800951e:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8009520:	4907      	ldr	r1, [pc, #28]	; (8009540 <rtcSetTime+0x70>)
 8009522:	4b09      	ldr	r3, [pc, #36]	; (8009548 <rtcSetTime+0x78>)
 8009524:	2200      	movs	r2, #0
 8009526:	0018      	movs	r0, r3
 8009528:	f7fb fb82 	bl	8004c30 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800952c:	4905      	ldr	r1, [pc, #20]	; (8009544 <rtcSetTime+0x74>)
 800952e:	4b06      	ldr	r3, [pc, #24]	; (8009548 <rtcSetTime+0x78>)
 8009530:	2200      	movs	r2, #0
 8009532:	0018      	movs	r0, r3
 8009534:	f7fb fc80 	bl	8004e38 <HAL_RTC_SetDate>

}
 8009538:	46c0      	nop			; (mov r8, r8)
 800953a:	46bd      	mov	sp, r7
 800953c:	b002      	add	sp, #8
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000fd4 	.word	0x20000fd4
 8009544:	2000002c 	.word	0x2000002c
 8009548:	20001290 	.word	0x20001290

0800954c <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8009554:	4923      	ldr	r1, [pc, #140]	; (80095e4 <rtcStartChrono+0x98>)
 8009556:	4b24      	ldr	r3, [pc, #144]	; (80095e8 <rtcStartChrono+0x9c>)
 8009558:	2200      	movs	r2, #0
 800955a:	0018      	movs	r0, r3
 800955c:	f7fb fc10 	bl	8004d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8009560:	4922      	ldr	r1, [pc, #136]	; (80095ec <rtcStartChrono+0xa0>)
 8009562:	4b21      	ldr	r3, [pc, #132]	; (80095e8 <rtcStartChrono+0x9c>)
 8009564:	2200      	movs	r2, #0
 8009566:	0018      	movs	r0, r3
 8009568:	f7fb fcf8 	bl	8004f5c <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800956c:	4b1d      	ldr	r3, [pc, #116]	; (80095e4 <rtcStartChrono+0x98>)
 800956e:	789b      	ldrb	r3, [r3, #2]
 8009570:	b25a      	sxtb	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 8009576:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <rtcStartChrono+0x98>)
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	b25a      	sxtb	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 8009580:	4b18      	ldr	r3, [pc, #96]	; (80095e4 <rtcStartChrono+0x98>)
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	0013      	movs	r3, r2
 8009586:	065b      	lsls	r3, r3, #25
 8009588:	1a9b      	subs	r3, r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	189b      	adds	r3, r3, r2
 800958e:	00db      	lsls	r3, r3, #3
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4a16      	ldr	r2, [pc, #88]	; (80095f0 <rtcStartChrono+0xa4>)
 8009596:	4694      	mov	ip, r2
 8009598:	4463      	add	r3, ip
 800959a:	21ff      	movs	r1, #255	; 0xff
 800959c:	0018      	movs	r0, r3
 800959e:	f7f6 fdb1 	bl	8000104 <__udivsi3>
 80095a2:	0003      	movs	r3, r0
 80095a4:	b25a      	sxtb	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <rtcStartChrono+0x98>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	b25a      	sxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 80095b4:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <rtcStartChrono+0xa0>)
 80095b6:	789b      	ldrb	r3, [r3, #2]
 80095b8:	b25a      	sxtb	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 80095be:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <rtcStartChrono+0xa0>)
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	b25a      	sxtb	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <rtcStartChrono+0xa0>)
 80095ca:	78db      	ldrb	r3, [r3, #3]
 80095cc:	b25a      	sxtb	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2224      	movs	r2, #36	; 0x24
 80095d6:	2101      	movs	r1, #1
 80095d8:	5499      	strb	r1, [r3, r2]
}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	46bd      	mov	sp, r7
 80095de:	b002      	add	sp, #8
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	20000fd4 	.word	0x20000fd4
 80095e8:	20001290 	.word	0x20001290
 80095ec:	2000002c 	.word	0x2000002c
 80095f0:	0000639c 	.word	0x0000639c

080095f4 <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80095fc:	4952      	ldr	r1, [pc, #328]	; (8009748 <rtcStopChrono+0x154>)
 80095fe:	4b53      	ldr	r3, [pc, #332]	; (800974c <rtcStopChrono+0x158>)
 8009600:	2200      	movs	r2, #0
 8009602:	0018      	movs	r0, r3
 8009604:	f7fb fbbc 	bl	8004d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8009608:	4951      	ldr	r1, [pc, #324]	; (8009750 <rtcStopChrono+0x15c>)
 800960a:	4b50      	ldr	r3, [pc, #320]	; (800974c <rtcStopChrono+0x158>)
 800960c:	2200      	movs	r2, #0
 800960e:	0018      	movs	r0, r3
 8009610:	f7fb fca4 	bl	8004f5c <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 8009614:	4b4c      	ldr	r3, [pc, #304]	; (8009748 <rtcStopChrono+0x154>)
 8009616:	785b      	ldrb	r3, [r3, #1]
 8009618:	b25a      	sxtb	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800961e:	4b4a      	ldr	r3, [pc, #296]	; (8009748 <rtcStopChrono+0x154>)
 8009620:	789b      	ldrb	r3, [r3, #2]
 8009622:	b25a      	sxtb	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 8009628:	4b47      	ldr	r3, [pc, #284]	; (8009748 <rtcStopChrono+0x154>)
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	0013      	movs	r3, r2
 800962e:	065b      	lsls	r3, r3, #25
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	189b      	adds	r3, r3, r2
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	1a9b      	subs	r3, r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4a45      	ldr	r2, [pc, #276]	; (8009754 <rtcStopChrono+0x160>)
 800963e:	4694      	mov	ip, r2
 8009640:	4463      	add	r3, ip
 8009642:	21ff      	movs	r1, #255	; 0xff
 8009644:	0018      	movs	r0, r3
 8009646:	f7f6 fd5d 	bl	8000104 <__udivsi3>
 800964a:	0003      	movs	r3, r0
 800964c:	b25a      	sxtb	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 8009652:	4b3d      	ldr	r3, [pc, #244]	; (8009748 <rtcStopChrono+0x154>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	b25a      	sxtb	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800965c:	4b3c      	ldr	r3, [pc, #240]	; (8009750 <rtcStopChrono+0x15c>)
 800965e:	789b      	ldrb	r3, [r3, #2]
 8009660:	b25a      	sxtb	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 8009666:	4b3a      	ldr	r3, [pc, #232]	; (8009750 <rtcStopChrono+0x15c>)
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	b25a      	sxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 8009670:	4b37      	ldr	r3, [pc, #220]	; (8009750 <rtcStopChrono+0x15c>)
 8009672:	78db      	ldrb	r3, [r3, #3]
 8009674:	b25a      	sxtb	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	799b      	ldrb	r3, [r3, #6]
 800967e:	b25b      	sxtb	r3, r3
 8009680:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	7c9b      	ldrb	r3, [r3, #18]
 8009686:	b25b      	sxtb	r3, r3
 8009688:	b2db      	uxtb	r3, r3
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	b2db      	uxtb	r3, r3
 800968e:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	795b      	ldrb	r3, [r3, #5]
 8009698:	b25b      	sxtb	r3, r3
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	7c5b      	ldrb	r3, [r3, #17]
 80096a0:	b25b      	sxtb	r3, r3
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	b25a      	sxtb	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	791b      	ldrb	r3, [r3, #4]
 80096b2:	b25b      	sxtb	r3, r3
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	7c1b      	ldrb	r3, [r3, #16]
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	b25a      	sxtb	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	78db      	ldrb	r3, [r3, #3]
 80096cc:	b25b      	sxtb	r3, r3
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	7bdb      	ldrb	r3, [r3, #15]
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	b25a      	sxtb	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	789b      	ldrb	r3, [r3, #2]
 80096e6:	b25b      	sxtb	r3, r3
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7b9b      	ldrb	r3, [r3, #14]
 80096ee:	b25b      	sxtb	r3, r3
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	b25a      	sxtb	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	b25b      	sxtb	r3, r3
 8009702:	b2da      	uxtb	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7b5b      	ldrb	r3, [r3, #13]
 8009708:	b25b      	sxtb	r3, r3
 800970a:	b2db      	uxtb	r3, r3
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	b2db      	uxtb	r3, r3
 8009710:	b25a      	sxtb	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	b25b      	sxtb	r3, r3
 800971c:	b2da      	uxtb	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7b1b      	ldrb	r3, [r3, #12]
 8009722:	b25b      	sxtb	r3, r3
 8009724:	b2db      	uxtb	r3, r3
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	b2db      	uxtb	r3, r3
 800972a:	b25a      	sxtb	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	0018      	movs	r0, r3
 8009734:	f7ff fc82 	bl	800903c <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2224      	movs	r2, #36	; 0x24
 800973c:	2102      	movs	r1, #2
 800973e:	5499      	strb	r1, [r3, r2]


}
 8009740:	46c0      	nop			; (mov r8, r8)
 8009742:	46bd      	mov	sp, r7
 8009744:	b002      	add	sp, #8
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20000fd4 	.word	0x20000fd4
 800974c:	20001290 	.word	0x20001290
 8009750:	2000002c 	.word	0x2000002c
 8009754:	0000639c 	.word	0x0000639c

08009758 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2224      	movs	r2, #36	; 0x24
 8009764:	2101      	movs	r1, #1
 8009766:	5499      	strb	r1, [r3, r2]
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b002      	add	sp, #8
 800976e:	bd80      	pop	{r7, pc}

08009770 <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2224      	movs	r2, #36	; 0x24
 80097ac:	2100      	movs	r1, #0
 80097ae:	5499      	strb	r1, [r3, r2]

}
 80097b0:	46c0      	nop			; (mov r8, r8)
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b002      	add	sp, #8
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	0008      	movs	r0, r1
 80097c2:	0011      	movs	r1, r2
 80097c4:	1cfb      	adds	r3, r7, #3
 80097c6:	1c02      	adds	r2, r0, #0
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	1cbb      	adds	r3, r7, #2
 80097cc:	1c0a      	adds	r2, r1, #0
 80097ce:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 80097d0:	1cbb      	adds	r3, r7, #2
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d000      	beq.n	80097da <rtcChangeValue+0x22>
 80097d8:	e08a      	b.n	80098f0 <rtcChangeValue+0x138>
		switch (element) {
 80097da:	1cfb      	adds	r3, r7, #3
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b05      	cmp	r3, #5
 80097e0:	d900      	bls.n	80097e4 <rtcChangeValue+0x2c>
 80097e2:	e080      	b.n	80098e6 <rtcChangeValue+0x12e>
 80097e4:	009a      	lsls	r2, r3, #2
 80097e6:	4b8c      	ldr	r3, [pc, #560]	; (8009a18 <rtcChangeValue+0x260>)
 80097e8:	18d3      	adds	r3, r2, r3
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	78db      	ldrb	r3, [r3, #3]
 80097f2:	b25b      	sxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd09      	ble.n	800980c <rtcChangeValue+0x54>
				chrono->actual.hour--;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	78db      	ldrb	r3, [r3, #3]
 80097fc:	b25b      	sxtb	r3, r3
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	3b01      	subs	r3, #1
 8009802:	b2db      	uxtb	r3, r3
 8009804:	b25a      	sxtb	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800980a:	e063      	b.n	80098d4 <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	78db      	ldrb	r3, [r3, #3]
 8009810:	b25b      	sxtb	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d15e      	bne.n	80098d4 <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2217      	movs	r2, #23
 800981a:	70da      	strb	r2, [r3, #3]
			break;
 800981c:	e05a      	b.n	80098d4 <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	791b      	ldrb	r3, [r3, #4]
 8009822:	b25b      	sxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	dd09      	ble.n	800983c <rtcChangeValue+0x84>
				chrono->actual.minute--;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	791b      	ldrb	r3, [r3, #4]
 800982c:	b25b      	sxtb	r3, r3
 800982e:	b2db      	uxtb	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b2db      	uxtb	r3, r3
 8009834:	b25a      	sxtb	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800983a:	e04d      	b.n	80098d8 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	791b      	ldrb	r3, [r3, #4]
 8009840:	b25b      	sxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d148      	bne.n	80098d8 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	223b      	movs	r2, #59	; 0x3b
 800984a:	711a      	strb	r2, [r3, #4]
			break;
 800984c:	e044      	b.n	80098d8 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	715a      	strb	r2, [r3, #5]
			break;
 8009854:	e047      	b.n	80098e6 <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	789b      	ldrb	r3, [r3, #2]
 800985a:	b25b      	sxtb	r3, r3
 800985c:	2b01      	cmp	r3, #1
 800985e:	dd09      	ble.n	8009874 <rtcChangeValue+0xbc>
				chrono->actual.day--;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	789b      	ldrb	r3, [r3, #2]
 8009864:	b25b      	sxtb	r3, r3
 8009866:	b2db      	uxtb	r3, r3
 8009868:	3b01      	subs	r3, #1
 800986a:	b2db      	uxtb	r3, r3
 800986c:	b25a      	sxtb	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 8009872:	e033      	b.n	80098dc <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	789b      	ldrb	r3, [r3, #2]
 8009878:	b25b      	sxtb	r3, r3
 800987a:	2b01      	cmp	r3, #1
 800987c:	d12e      	bne.n	80098dc <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	221f      	movs	r2, #31
 8009882:	709a      	strb	r2, [r3, #2]
			break;
 8009884:	e02a      	b.n	80098dc <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	b25b      	sxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	dd09      	ble.n	80098a4 <rtcChangeValue+0xec>
				chrono->actual.month--;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	b25b      	sxtb	r3, r3
 8009896:	b2db      	uxtb	r3, r3
 8009898:	3b01      	subs	r3, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	b25a      	sxtb	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 80098a2:	e01d      	b.n	80098e0 <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d118      	bne.n	80098e0 <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	220c      	movs	r2, #12
 80098b2:	705a      	strb	r2, [r3, #1]
			break;
 80098b4:	e014      	b.n	80098e0 <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd11      	ble.n	80098e4 <rtcChangeValue+0x12c>
				chrono->actual.year--;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	3b01      	subs	r3, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	b25a      	sxtb	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	701a      	strb	r2, [r3, #0]
			break;
 80098d2:	e007      	b.n	80098e4 <rtcChangeValue+0x12c>
			break;
 80098d4:	46c0      	nop			; (mov r8, r8)
 80098d6:	e006      	b.n	80098e6 <rtcChangeValue+0x12e>
			break;
 80098d8:	46c0      	nop			; (mov r8, r8)
 80098da:	e004      	b.n	80098e6 <rtcChangeValue+0x12e>
			break;
 80098dc:	46c0      	nop			; (mov r8, r8)
 80098de:	e002      	b.n	80098e6 <rtcChangeValue+0x12e>
			break;
 80098e0:	46c0      	nop			; (mov r8, r8)
 80098e2:	e000      	b.n	80098e6 <rtcChangeValue+0x12e>
			break;
 80098e4:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7ff fdf1 	bl	80094d0 <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 80098ee:	e08e      	b.n	8009a0e <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 80098f0:	1cbb      	adds	r3, r7, #2
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d000      	beq.n	80098fa <rtcChangeValue+0x142>
 80098f8:	e089      	b.n	8009a0e <rtcChangeValue+0x256>
		switch (element) {
 80098fa:	1cfb      	adds	r3, r7, #3
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d900      	bls.n	8009904 <rtcChangeValue+0x14c>
 8009902:	e080      	b.n	8009a06 <rtcChangeValue+0x24e>
 8009904:	009a      	lsls	r2, r3, #2
 8009906:	4b45      	ldr	r3, [pc, #276]	; (8009a1c <rtcChangeValue+0x264>)
 8009908:	18d3      	adds	r3, r2, r3
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	78db      	ldrb	r3, [r3, #3]
 8009912:	b25b      	sxtb	r3, r3
 8009914:	2b16      	cmp	r3, #22
 8009916:	dc09      	bgt.n	800992c <rtcChangeValue+0x174>
				chrono->actual.hour++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	78db      	ldrb	r3, [r3, #3]
 800991c:	b25b      	sxtb	r3, r3
 800991e:	b2db      	uxtb	r3, r3
 8009920:	3301      	adds	r3, #1
 8009922:	b2db      	uxtb	r3, r3
 8009924:	b25a      	sxtb	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	70da      	strb	r2, [r3, #3]
			break;
 800992a:	e063      	b.n	80099f4 <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	78db      	ldrb	r3, [r3, #3]
 8009930:	b25b      	sxtb	r3, r3
 8009932:	2b16      	cmp	r3, #22
 8009934:	dd5e      	ble.n	80099f4 <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	70da      	strb	r2, [r3, #3]
			break;
 800993c:	e05a      	b.n	80099f4 <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	791b      	ldrb	r3, [r3, #4]
 8009942:	b25b      	sxtb	r3, r3
 8009944:	2b3a      	cmp	r3, #58	; 0x3a
 8009946:	dc09      	bgt.n	800995c <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	791b      	ldrb	r3, [r3, #4]
 800994c:	b25b      	sxtb	r3, r3
 800994e:	b2db      	uxtb	r3, r3
 8009950:	3301      	adds	r3, #1
 8009952:	b2db      	uxtb	r3, r3
 8009954:	b25a      	sxtb	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	711a      	strb	r2, [r3, #4]
			break;
 800995a:	e04d      	b.n	80099f8 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	791b      	ldrb	r3, [r3, #4]
 8009960:	b25b      	sxtb	r3, r3
 8009962:	2b3a      	cmp	r3, #58	; 0x3a
 8009964:	dd48      	ble.n	80099f8 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	711a      	strb	r2, [r3, #4]
			break;
 800996c:	e044      	b.n	80099f8 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	715a      	strb	r2, [r3, #5]
			break;
 8009974:	e047      	b.n	8009a06 <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	789b      	ldrb	r3, [r3, #2]
 800997a:	b25b      	sxtb	r3, r3
 800997c:	2b1e      	cmp	r3, #30
 800997e:	dc09      	bgt.n	8009994 <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	b25b      	sxtb	r3, r3
 8009986:	b2db      	uxtb	r3, r3
 8009988:	3301      	adds	r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	b25a      	sxtb	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	709a      	strb	r2, [r3, #2]
			break;
 8009992:	e033      	b.n	80099fc <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	789b      	ldrb	r3, [r3, #2]
 8009998:	b25b      	sxtb	r3, r3
 800999a:	2b1f      	cmp	r3, #31
 800999c:	d12e      	bne.n	80099fc <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	709a      	strb	r2, [r3, #2]
			break;
 80099a4:	e02a      	b.n	80099fc <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	785b      	ldrb	r3, [r3, #1]
 80099aa:	b25b      	sxtb	r3, r3
 80099ac:	2b0b      	cmp	r3, #11
 80099ae:	dc09      	bgt.n	80099c4 <rtcChangeValue+0x20c>
				chrono->actual.month++;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	785b      	ldrb	r3, [r3, #1]
 80099b4:	b25b      	sxtb	r3, r3
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	3301      	adds	r3, #1
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	b25a      	sxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	705a      	strb	r2, [r3, #1]
			break;
 80099c2:	e01d      	b.n	8009a00 <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	b25b      	sxtb	r3, r3
 80099ca:	2b0c      	cmp	r3, #12
 80099cc:	d118      	bne.n	8009a00 <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	705a      	strb	r2, [r3, #1]
			break;
 80099d4:	e014      	b.n	8009a00 <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	b25b      	sxtb	r3, r3
 80099dc:	2b62      	cmp	r3, #98	; 0x62
 80099de:	dc11      	bgt.n	8009a04 <rtcChangeValue+0x24c>
				chrono->actual.year++;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	3301      	adds	r3, #1
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	b25a      	sxtb	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	701a      	strb	r2, [r3, #0]
			break;
 80099f2:	e007      	b.n	8009a04 <rtcChangeValue+0x24c>
			break;
 80099f4:	46c0      	nop			; (mov r8, r8)
 80099f6:	e006      	b.n	8009a06 <rtcChangeValue+0x24e>
			break;
 80099f8:	46c0      	nop			; (mov r8, r8)
 80099fa:	e004      	b.n	8009a06 <rtcChangeValue+0x24e>
			break;
 80099fc:	46c0      	nop			; (mov r8, r8)
 80099fe:	e002      	b.n	8009a06 <rtcChangeValue+0x24e>
			break;
 8009a00:	46c0      	nop			; (mov r8, r8)
 8009a02:	e000      	b.n	8009a06 <rtcChangeValue+0x24e>
			break;
 8009a04:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f7ff fd61 	bl	80094d0 <rtcSetTime>
}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	46bd      	mov	sp, r7
 8009a12:	b002      	add	sp, #8
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	0800a338 	.word	0x0800a338
 8009a1c:	0800a350 	.word	0x0800a350

08009a20 <rtcBlink>:
 *
 * @param  RTC item handler
 *
 * @retval Even- 1, Odd- 0
 */
uint8_t rtcBlink(RTCChronoTypeDef *chrono) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8009a28:	4910      	ldr	r1, [pc, #64]	; (8009a6c <rtcBlink+0x4c>)
 8009a2a:	4b11      	ldr	r3, [pc, #68]	; (8009a70 <rtcBlink+0x50>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f7fb f9a6 	bl	8004d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8009a34:	490f      	ldr	r1, [pc, #60]	; (8009a74 <rtcBlink+0x54>)
 8009a36:	4b0e      	ldr	r3, [pc, #56]	; (8009a70 <rtcBlink+0x50>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f7fb fa8e 	bl	8004f5c <HAL_RTC_GetDate>

	chrono->actual.second = Time.Seconds;
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <rtcBlink+0x4c>)
 8009a42:	789b      	ldrb	r3, [r3, #2]
 8009a44:	b25a      	sxtb	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	715a      	strb	r2, [r3, #5]

	if (chrono->actual.second % 2) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	795b      	ldrb	r3, [r3, #5]
 8009a4e:	b25b      	sxtb	r3, r3
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2201      	movs	r2, #1
 8009a54:	4013      	ands	r3, r2
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <rtcBlink+0x40>
		return 1;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e000      	b.n	8009a62 <rtcBlink+0x42>
	} else {
		return 0;
 8009a60:	2300      	movs	r3, #0
	}
}
 8009a62:	0018      	movs	r0, r3
 8009a64:	46bd      	mov	sp, r7
 8009a66:	b002      	add	sp, #8
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	20000fd4 	.word	0x20000fd4
 8009a70:	20001290 	.word	0x20001290
 8009a74:	2000002c 	.word	0x2000002c

08009a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a7e:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <HAL_MspInit+0x4c>)
 8009a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a82:	4b10      	ldr	r3, [pc, #64]	; (8009ac4 <HAL_MspInit+0x4c>)
 8009a84:	2101      	movs	r1, #1
 8009a86:	430a      	orrs	r2, r1
 8009a88:	641a      	str	r2, [r3, #64]	; 0x40
 8009a8a:	4b0e      	ldr	r3, [pc, #56]	; (8009ac4 <HAL_MspInit+0x4c>)
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4013      	ands	r3, r2
 8009a92:	607b      	str	r3, [r7, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a96:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <HAL_MspInit+0x4c>)
 8009a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <HAL_MspInit+0x4c>)
 8009a9c:	2180      	movs	r1, #128	; 0x80
 8009a9e:	0549      	lsls	r1, r1, #21
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8009aa4:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <HAL_MspInit+0x4c>)
 8009aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aa8:	2380      	movs	r3, #128	; 0x80
 8009aaa:	055b      	lsls	r3, r3, #21
 8009aac:	4013      	ands	r3, r2
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8009ab2:	2380      	movs	r3, #128	; 0x80
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f7f8 fdb8 	bl	800262c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009abc:	46c0      	nop			; (mov r8, r8)
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	40021000 	.word	0x40021000

08009ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009ac8:	b590      	push	{r4, r7, lr}
 8009aca:	b097      	sub	sp, #92	; 0x5c
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ad0:	2344      	movs	r3, #68	; 0x44
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	2314      	movs	r3, #20
 8009ad8:	001a      	movs	r2, r3
 8009ada:	2100      	movs	r1, #0
 8009adc:	f000 fa7f 	bl	8009fde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ae0:	2410      	movs	r4, #16
 8009ae2:	193b      	adds	r3, r7, r4
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	2334      	movs	r3, #52	; 0x34
 8009ae8:	001a      	movs	r2, r3
 8009aea:	2100      	movs	r1, #0
 8009aec:	f000 fa77 	bl	8009fde <memset>
  if(hadc->Instance==ADC1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a20      	ldr	r2, [pc, #128]	; (8009b78 <HAL_ADC_MspInit+0xb0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d139      	bne.n	8009b6e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009afa:	193b      	adds	r3, r7, r4
 8009afc:	2280      	movs	r2, #128	; 0x80
 8009afe:	01d2      	lsls	r2, r2, #7
 8009b00:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8009b02:	193b      	adds	r3, r7, r4
 8009b04:	2200      	movs	r2, #0
 8009b06:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009b08:	193b      	adds	r3, r7, r4
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f7fa fe42 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 8009b10:	1e03      	subs	r3, r0, #0
 8009b12:	d001      	beq.n	8009b18 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8009b14:	f7fe fde4 	bl	80086e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009b18:	4b18      	ldr	r3, [pc, #96]	; (8009b7c <HAL_ADC_MspInit+0xb4>)
 8009b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b1c:	4b17      	ldr	r3, [pc, #92]	; (8009b7c <HAL_ADC_MspInit+0xb4>)
 8009b1e:	2180      	movs	r1, #128	; 0x80
 8009b20:	0349      	lsls	r1, r1, #13
 8009b22:	430a      	orrs	r2, r1
 8009b24:	641a      	str	r2, [r3, #64]	; 0x40
 8009b26:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <HAL_ADC_MspInit+0xb4>)
 8009b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b2a:	2380      	movs	r3, #128	; 0x80
 8009b2c:	035b      	lsls	r3, r3, #13
 8009b2e:	4013      	ands	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b34:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <HAL_ADC_MspInit+0xb4>)
 8009b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b38:	4b10      	ldr	r3, [pc, #64]	; (8009b7c <HAL_ADC_MspInit+0xb4>)
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8009b40:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <HAL_ADC_MspInit+0xb4>)
 8009b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b44:	2201      	movs	r2, #1
 8009b46:	4013      	ands	r3, r2
 8009b48:	60bb      	str	r3, [r7, #8]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_Pin;
 8009b4c:	2144      	movs	r1, #68	; 0x44
 8009b4e:	187b      	adds	r3, r7, r1
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b54:	187b      	adds	r3, r7, r1
 8009b56:	2203      	movs	r2, #3
 8009b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8009b60:	187a      	adds	r2, r7, r1
 8009b62:	23a0      	movs	r3, #160	; 0xa0
 8009b64:	05db      	lsls	r3, r3, #23
 8009b66:	0011      	movs	r1, r2
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f7f9 fdc1 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	46bd      	mov	sp, r7
 8009b72:	b017      	add	sp, #92	; 0x5c
 8009b74:	bd90      	pop	{r4, r7, pc}
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	40012400 	.word	0x40012400
 8009b7c:	40021000 	.word	0x40021000

08009b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009b80:	b590      	push	{r4, r7, lr}
 8009b82:	b097      	sub	sp, #92	; 0x5c
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b88:	2344      	movs	r3, #68	; 0x44
 8009b8a:	18fb      	adds	r3, r7, r3
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	2314      	movs	r3, #20
 8009b90:	001a      	movs	r2, r3
 8009b92:	2100      	movs	r1, #0
 8009b94:	f000 fa23 	bl	8009fde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009b98:	2410      	movs	r4, #16
 8009b9a:	193b      	adds	r3, r7, r4
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	2334      	movs	r3, #52	; 0x34
 8009ba0:	001a      	movs	r2, r3
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	f000 fa1b 	bl	8009fde <memset>
  if(hi2c->Instance==I2C1)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a22      	ldr	r2, [pc, #136]	; (8009c38 <HAL_I2C_MspInit+0xb8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d13e      	bne.n	8009c30 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009bb2:	193b      	adds	r3, r7, r4
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009bb8:	193b      	adds	r3, r7, r4
 8009bba:	2200      	movs	r2, #0
 8009bbc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009bbe:	193b      	adds	r3, r7, r4
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7fa fde7 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 8009bc6:	1e03      	subs	r3, r0, #0
 8009bc8:	d001      	beq.n	8009bce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8009bca:	f7fe fd89 	bl	80086e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bce:	4b1b      	ldr	r3, [pc, #108]	; (8009c3c <HAL_I2C_MspInit+0xbc>)
 8009bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <HAL_I2C_MspInit+0xbc>)
 8009bd4:	2102      	movs	r1, #2
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8009bda:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <HAL_I2C_MspInit+0xbc>)
 8009bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bde:	2202      	movs	r2, #2
 8009be0:	4013      	ands	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8009be6:	2144      	movs	r1, #68	; 0x44
 8009be8:	187b      	adds	r3, r7, r1
 8009bea:	22c0      	movs	r2, #192	; 0xc0
 8009bec:	0092      	lsls	r2, r2, #2
 8009bee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009bf0:	187b      	adds	r3, r7, r1
 8009bf2:	2212      	movs	r2, #18
 8009bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf6:	187b      	adds	r3, r7, r1
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bfc:	187b      	adds	r3, r7, r1
 8009bfe:	2200      	movs	r2, #0
 8009c00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8009c02:	187b      	adds	r3, r7, r1
 8009c04:	2206      	movs	r2, #6
 8009c06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c08:	187b      	adds	r3, r7, r1
 8009c0a:	4a0d      	ldr	r2, [pc, #52]	; (8009c40 <HAL_I2C_MspInit+0xc0>)
 8009c0c:	0019      	movs	r1, r3
 8009c0e:	0010      	movs	r0, r2
 8009c10:	f7f9 fd6e 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009c14:	4b09      	ldr	r3, [pc, #36]	; (8009c3c <HAL_I2C_MspInit+0xbc>)
 8009c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c18:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <HAL_I2C_MspInit+0xbc>)
 8009c1a:	2180      	movs	r1, #128	; 0x80
 8009c1c:	0389      	lsls	r1, r1, #14
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	63da      	str	r2, [r3, #60]	; 0x3c
 8009c22:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <HAL_I2C_MspInit+0xbc>)
 8009c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c26:	2380      	movs	r3, #128	; 0x80
 8009c28:	039b      	lsls	r3, r3, #14
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	60bb      	str	r3, [r7, #8]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009c30:	46c0      	nop			; (mov r8, r8)
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b017      	add	sp, #92	; 0x5c
 8009c36:	bd90      	pop	{r4, r7, pc}
 8009c38:	40005400 	.word	0x40005400
 8009c3c:	40021000 	.word	0x40021000
 8009c40:	50000400 	.word	0x50000400

08009c44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009c44:	b590      	push	{r4, r7, lr}
 8009c46:	b091      	sub	sp, #68	; 0x44
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009c4c:	240c      	movs	r4, #12
 8009c4e:	193b      	adds	r3, r7, r4
 8009c50:	0018      	movs	r0, r3
 8009c52:	2334      	movs	r3, #52	; 0x34
 8009c54:	001a      	movs	r2, r3
 8009c56:	2100      	movs	r1, #0
 8009c58:	f000 f9c1 	bl	8009fde <memset>
  if(hrtc->Instance==RTC)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a15      	ldr	r2, [pc, #84]	; (8009cb8 <HAL_RTC_MspInit+0x74>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d124      	bne.n	8009cb0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009c66:	193b      	adds	r3, r7, r4
 8009c68:	2280      	movs	r2, #128	; 0x80
 8009c6a:	0292      	lsls	r2, r2, #10
 8009c6c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009c6e:	193b      	adds	r3, r7, r4
 8009c70:	2280      	movs	r2, #128	; 0x80
 8009c72:	0052      	lsls	r2, r2, #1
 8009c74:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c76:	193b      	adds	r3, r7, r4
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f7fa fd8b 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 8009c7e:	1e03      	subs	r3, r0, #0
 8009c80:	d001      	beq.n	8009c86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8009c82:	f7fe fd2d 	bl	80086e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009c86:	4b0d      	ldr	r3, [pc, #52]	; (8009cbc <HAL_RTC_MspInit+0x78>)
 8009c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <HAL_RTC_MspInit+0x78>)
 8009c8c:	2180      	movs	r1, #128	; 0x80
 8009c8e:	0209      	lsls	r1, r1, #8
 8009c90:	430a      	orrs	r2, r1
 8009c92:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <HAL_RTC_MspInit+0x78>)
 8009c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c98:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <HAL_RTC_MspInit+0x78>)
 8009c9a:	2180      	movs	r1, #128	; 0x80
 8009c9c:	00c9      	lsls	r1, r1, #3
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	63da      	str	r2, [r3, #60]	; 0x3c
 8009ca2:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <HAL_RTC_MspInit+0x78>)
 8009ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ca6:	2380      	movs	r3, #128	; 0x80
 8009ca8:	00db      	lsls	r3, r3, #3
 8009caa:	4013      	ands	r3, r2
 8009cac:	60bb      	str	r3, [r7, #8]
 8009cae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009cb0:	46c0      	nop			; (mov r8, r8)
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	b011      	add	sp, #68	; 0x44
 8009cb6:	bd90      	pop	{r4, r7, pc}
 8009cb8:	40002800 	.word	0x40002800
 8009cbc:	40021000 	.word	0x40021000

08009cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009cc0:	b590      	push	{r4, r7, lr}
 8009cc2:	b093      	sub	sp, #76	; 0x4c
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009cc8:	2414      	movs	r4, #20
 8009cca:	193b      	adds	r3, r7, r4
 8009ccc:	0018      	movs	r0, r3
 8009cce:	2334      	movs	r3, #52	; 0x34
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	f000 f983 	bl	8009fde <memset>
  if(htim_base->Instance==TIM1)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a27      	ldr	r2, [pc, #156]	; (8009d7c <HAL_TIM_Base_MspInit+0xbc>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d12d      	bne.n	8009d3e <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8009ce2:	193b      	adds	r3, r7, r4
 8009ce4:	2280      	movs	r2, #128	; 0x80
 8009ce6:	0392      	lsls	r2, r2, #14
 8009ce8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8009cea:	193b      	adds	r3, r7, r4
 8009cec:	2200      	movs	r2, #0
 8009cee:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009cf0:	193b      	adds	r3, r7, r4
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7fa fd4e 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 8009cf8:	1e03      	subs	r3, r0, #0
 8009cfa:	d001      	beq.n	8009d00 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8009cfc:	f7fe fcf0 	bl	80086e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009d00:	4b1f      	ldr	r3, [pc, #124]	; (8009d80 <HAL_TIM_Base_MspInit+0xc0>)
 8009d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d04:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <HAL_TIM_Base_MspInit+0xc0>)
 8009d06:	2180      	movs	r1, #128	; 0x80
 8009d08:	0109      	lsls	r1, r1, #4
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8009d0e:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <HAL_TIM_Base_MspInit+0xc0>)
 8009d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d12:	2380      	movs	r3, #128	; 0x80
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	4013      	ands	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	200d      	movs	r0, #13
 8009d22:	f7f9 fcb3 	bl	800368c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8009d26:	200d      	movs	r0, #13
 8009d28:	f7f9 fcc5 	bl	80036b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2100      	movs	r1, #0
 8009d30:	200e      	movs	r0, #14
 8009d32:	f7f9 fcab 	bl	800368c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009d36:	200e      	movs	r0, #14
 8009d38:	f7f9 fcbd 	bl	80036b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8009d3c:	e019      	b.n	8009d72 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	2380      	movs	r3, #128	; 0x80
 8009d44:	05db      	lsls	r3, r3, #23
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d113      	bne.n	8009d72 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <HAL_TIM_Base_MspInit+0xc0>)
 8009d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <HAL_TIM_Base_MspInit+0xc0>)
 8009d50:	2101      	movs	r1, #1
 8009d52:	430a      	orrs	r2, r1
 8009d54:	63da      	str	r2, [r3, #60]	; 0x3c
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <HAL_TIM_Base_MspInit+0xc0>)
 8009d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009d62:	2200      	movs	r2, #0
 8009d64:	2100      	movs	r1, #0
 8009d66:	200f      	movs	r0, #15
 8009d68:	f7f9 fc90 	bl	800368c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009d6c:	200f      	movs	r0, #15
 8009d6e:	f7f9 fca2 	bl	80036b6 <HAL_NVIC_EnableIRQ>
}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	46bd      	mov	sp, r7
 8009d76:	b013      	add	sp, #76	; 0x4c
 8009d78:	bd90      	pop	{r4, r7, pc}
 8009d7a:	46c0      	nop			; (mov r8, r8)
 8009d7c:	40012c00 	.word	0x40012c00
 8009d80:	40021000 	.word	0x40021000

08009d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b097      	sub	sp, #92	; 0x5c
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d8c:	2344      	movs	r3, #68	; 0x44
 8009d8e:	18fb      	adds	r3, r7, r3
 8009d90:	0018      	movs	r0, r3
 8009d92:	2314      	movs	r3, #20
 8009d94:	001a      	movs	r2, r3
 8009d96:	2100      	movs	r1, #0
 8009d98:	f000 f921 	bl	8009fde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d9c:	2410      	movs	r4, #16
 8009d9e:	193b      	adds	r3, r7, r4
 8009da0:	0018      	movs	r0, r3
 8009da2:	2334      	movs	r3, #52	; 0x34
 8009da4:	001a      	movs	r2, r3
 8009da6:	2100      	movs	r1, #0
 8009da8:	f000 f919 	bl	8009fde <memset>
  if(huart->Instance==USART2)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a22      	ldr	r2, [pc, #136]	; (8009e3c <HAL_UART_MspInit+0xb8>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d13e      	bne.n	8009e34 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009db6:	193b      	adds	r3, r7, r4
 8009db8:	2202      	movs	r2, #2
 8009dba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009dbc:	193b      	adds	r3, r7, r4
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009dc2:	193b      	adds	r3, r7, r4
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f7fa fce5 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 8009dca:	1e03      	subs	r3, r0, #0
 8009dcc:	d001      	beq.n	8009dd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8009dce:	f7fe fc87 	bl	80086e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009dd2:	4b1b      	ldr	r3, [pc, #108]	; (8009e40 <HAL_UART_MspInit+0xbc>)
 8009dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dd6:	4b1a      	ldr	r3, [pc, #104]	; (8009e40 <HAL_UART_MspInit+0xbc>)
 8009dd8:	2180      	movs	r1, #128	; 0x80
 8009dda:	0289      	lsls	r1, r1, #10
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8009de0:	4b17      	ldr	r3, [pc, #92]	; (8009e40 <HAL_UART_MspInit+0xbc>)
 8009de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009de4:	2380      	movs	r3, #128	; 0x80
 8009de6:	029b      	lsls	r3, r3, #10
 8009de8:	4013      	ands	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dee:	4b14      	ldr	r3, [pc, #80]	; (8009e40 <HAL_UART_MspInit+0xbc>)
 8009df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <HAL_UART_MspInit+0xbc>)
 8009df4:	2101      	movs	r1, #1
 8009df6:	430a      	orrs	r2, r1
 8009df8:	635a      	str	r2, [r3, #52]	; 0x34
 8009dfa:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <HAL_UART_MspInit+0xbc>)
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfe:	2201      	movs	r2, #1
 8009e00:	4013      	ands	r3, r2
 8009e02:	60bb      	str	r3, [r7, #8]
 8009e04:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009e06:	2144      	movs	r1, #68	; 0x44
 8009e08:	187b      	adds	r3, r7, r1
 8009e0a:	220c      	movs	r2, #12
 8009e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e0e:	187b      	adds	r3, r7, r1
 8009e10:	2202      	movs	r2, #2
 8009e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e14:	187b      	adds	r3, r7, r1
 8009e16:	2200      	movs	r2, #0
 8009e18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e1a:	187b      	adds	r3, r7, r1
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8009e20:	187b      	adds	r3, r7, r1
 8009e22:	2201      	movs	r2, #1
 8009e24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e26:	187a      	adds	r2, r7, r1
 8009e28:	23a0      	movs	r3, #160	; 0xa0
 8009e2a:	05db      	lsls	r3, r3, #23
 8009e2c:	0011      	movs	r1, r2
 8009e2e:	0018      	movs	r0, r3
 8009e30:	f7f9 fc5e 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009e34:	46c0      	nop			; (mov r8, r8)
 8009e36:	46bd      	mov	sp, r7
 8009e38:	b017      	add	sp, #92	; 0x5c
 8009e3a:	bd90      	pop	{r4, r7, pc}
 8009e3c:	40004400 	.word	0x40004400
 8009e40:	40021000 	.word	0x40021000

08009e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009e48:	e7fe      	b.n	8009e48 <NMI_Handler+0x4>

08009e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e4e:	e7fe      	b.n	8009e4e <HardFault_Handler+0x4>

08009e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009e54:	46c0      	nop			; (mov r8, r8)
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e68:	f7f8 fba0 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e6c:	46c0      	nop			; (mov r8, r8)
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 8009e76:	2008      	movs	r0, #8
 8009e78:	f7f9 fdd8 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8009e7c:	46c0      	nop			; (mov r8, r8)
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8009e86:	2010      	movs	r0, #16
 8009e88:	f7f9 fdd0 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8009e8c:	2020      	movs	r0, #32
 8009e8e:	f7f9 fdcd 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 8009e92:	2040      	movs	r0, #64	; 0x40
 8009e94:	f7f9 fdca 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 8009e98:	2080      	movs	r0, #128	; 0x80
 8009e9a:	f7f9 fdc7 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009e9e:	46c0      	nop			; (mov r8, r8)
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009ea8:	4b03      	ldr	r3, [pc, #12]	; (8009eb8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f7fb fa4c 	bl	8005348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	200012bc 	.word	0x200012bc

08009ebc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009ec0:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <TIM1_CC_IRQHandler+0x14>)
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f7fb fa40 	bl	8005348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8009ec8:	46c0      	nop			; (mov r8, r8)
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	200012bc 	.word	0x200012bc

08009ed4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009ed8:	4b03      	ldr	r3, [pc, #12]	; (8009ee8 <TIM2_IRQHandler+0x14>)
 8009eda:	0018      	movs	r0, r3
 8009edc:	f7fb fa34 	bl	8005348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009ee0:	46c0      	nop			; (mov r8, r8)
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	20001308 	.word	0x20001308

08009eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009ef0:	46c0      	nop			; (mov r8, r8)
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009ef8:	480d      	ldr	r0, [pc, #52]	; (8009f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009efa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009efc:	f7ff fff6 	bl	8009eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009f00:	480c      	ldr	r0, [pc, #48]	; (8009f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8009f02:	490d      	ldr	r1, [pc, #52]	; (8009f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009f04:	4a0d      	ldr	r2, [pc, #52]	; (8009f3c <LoopForever+0xe>)
  movs r3, #0
 8009f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009f08:	e002      	b.n	8009f10 <LoopCopyDataInit>

08009f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f0e:	3304      	adds	r3, #4

08009f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f14:	d3f9      	bcc.n	8009f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f16:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009f18:	4c0a      	ldr	r4, [pc, #40]	; (8009f44 <LoopForever+0x16>)
  movs r3, #0
 8009f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f1c:	e001      	b.n	8009f22 <LoopFillZerobss>

08009f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f20:	3204      	adds	r2, #4

08009f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f24:	d3fb      	bcc.n	8009f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009f26:	f000 f811 	bl	8009f4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009f2a:	f7fd fe61 	bl	8007bf0 <main>

08009f2e <LoopForever>:

LoopForever:
  b LoopForever
 8009f2e:	e7fe      	b.n	8009f2e <LoopForever>
  ldr   r0, =_estack
 8009f30:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8009f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8009f3c:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 8009f40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8009f44:	200013e4 	.word	0x200013e4

08009f48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009f48:	e7fe      	b.n	8009f48 <ADC1_COMP_IRQHandler>
	...

08009f4c <__libc_init_array>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	2600      	movs	r6, #0
 8009f50:	4d0c      	ldr	r5, [pc, #48]	; (8009f84 <__libc_init_array+0x38>)
 8009f52:	4c0d      	ldr	r4, [pc, #52]	; (8009f88 <__libc_init_array+0x3c>)
 8009f54:	1b64      	subs	r4, r4, r5
 8009f56:	10a4      	asrs	r4, r4, #2
 8009f58:	42a6      	cmp	r6, r4
 8009f5a:	d109      	bne.n	8009f70 <__libc_init_array+0x24>
 8009f5c:	2600      	movs	r6, #0
 8009f5e:	f000 f87d 	bl	800a05c <_init>
 8009f62:	4d0a      	ldr	r5, [pc, #40]	; (8009f8c <__libc_init_array+0x40>)
 8009f64:	4c0a      	ldr	r4, [pc, #40]	; (8009f90 <__libc_init_array+0x44>)
 8009f66:	1b64      	subs	r4, r4, r5
 8009f68:	10a4      	asrs	r4, r4, #2
 8009f6a:	42a6      	cmp	r6, r4
 8009f6c:	d105      	bne.n	8009f7a <__libc_init_array+0x2e>
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	00b3      	lsls	r3, r6, #2
 8009f72:	58eb      	ldr	r3, [r5, r3]
 8009f74:	4798      	blx	r3
 8009f76:	3601      	adds	r6, #1
 8009f78:	e7ee      	b.n	8009f58 <__libc_init_array+0xc>
 8009f7a:	00b3      	lsls	r3, r6, #2
 8009f7c:	58eb      	ldr	r3, [r5, r3]
 8009f7e:	4798      	blx	r3
 8009f80:	3601      	adds	r6, #1
 8009f82:	e7f2      	b.n	8009f6a <__libc_init_array+0x1e>
 8009f84:	0800a3f8 	.word	0x0800a3f8
 8009f88:	0800a3f8 	.word	0x0800a3f8
 8009f8c:	0800a3f8 	.word	0x0800a3f8
 8009f90:	0800a3fc 	.word	0x0800a3fc

08009f94 <__itoa>:
 8009f94:	1e93      	subs	r3, r2, #2
 8009f96:	b510      	push	{r4, lr}
 8009f98:	000c      	movs	r4, r1
 8009f9a:	2b22      	cmp	r3, #34	; 0x22
 8009f9c:	d904      	bls.n	8009fa8 <__itoa+0x14>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	001c      	movs	r4, r3
 8009fa2:	700b      	strb	r3, [r1, #0]
 8009fa4:	0020      	movs	r0, r4
 8009fa6:	bd10      	pop	{r4, pc}
 8009fa8:	2a0a      	cmp	r2, #10
 8009faa:	d109      	bne.n	8009fc0 <__itoa+0x2c>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	da07      	bge.n	8009fc0 <__itoa+0x2c>
 8009fb0:	232d      	movs	r3, #45	; 0x2d
 8009fb2:	700b      	strb	r3, [r1, #0]
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	4240      	negs	r0, r0
 8009fb8:	1861      	adds	r1, r4, r1
 8009fba:	f000 f819 	bl	8009ff0 <__utoa>
 8009fbe:	e7f1      	b.n	8009fa4 <__itoa+0x10>
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	e7f9      	b.n	8009fb8 <__itoa+0x24>

08009fc4 <itoa>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	f7ff ffe5 	bl	8009f94 <__itoa>
 8009fca:	bd10      	pop	{r4, pc}

08009fcc <memcpy>:
 8009fcc:	2300      	movs	r3, #0
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d100      	bne.n	8009fd6 <memcpy+0xa>
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	5ccc      	ldrb	r4, [r1, r3]
 8009fd8:	54c4      	strb	r4, [r0, r3]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	e7f8      	b.n	8009fd0 <memcpy+0x4>

08009fde <memset>:
 8009fde:	0003      	movs	r3, r0
 8009fe0:	1882      	adds	r2, r0, r2
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d100      	bne.n	8009fe8 <memset+0xa>
 8009fe6:	4770      	bx	lr
 8009fe8:	7019      	strb	r1, [r3, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	e7f9      	b.n	8009fe2 <memset+0x4>
	...

08009ff0 <__utoa>:
 8009ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ff2:	0016      	movs	r6, r2
 8009ff4:	b08d      	sub	sp, #52	; 0x34
 8009ff6:	0007      	movs	r7, r0
 8009ff8:	000c      	movs	r4, r1
 8009ffa:	2225      	movs	r2, #37	; 0x25
 8009ffc:	4916      	ldr	r1, [pc, #88]	; (800a058 <__utoa+0x68>)
 8009ffe:	a802      	add	r0, sp, #8
 800a000:	f7ff ffe4 	bl	8009fcc <memcpy>
 800a004:	1eb3      	subs	r3, r6, #2
 800a006:	2500      	movs	r5, #0
 800a008:	2b22      	cmp	r3, #34	; 0x22
 800a00a:	d820      	bhi.n	800a04e <__utoa+0x5e>
 800a00c:	1e63      	subs	r3, r4, #1
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	ab02      	add	r3, sp, #8
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	0038      	movs	r0, r7
 800a016:	0031      	movs	r1, r6
 800a018:	f7f6 f8fa 	bl	8000210 <__aeabi_uidivmod>
 800a01c:	000b      	movs	r3, r1
 800a01e:	9a01      	ldr	r2, [sp, #4]
 800a020:	0029      	movs	r1, r5
 800a022:	5cd3      	ldrb	r3, [r2, r3]
 800a024:	9a00      	ldr	r2, [sp, #0]
 800a026:	3501      	adds	r5, #1
 800a028:	5553      	strb	r3, [r2, r5]
 800a02a:	003b      	movs	r3, r7
 800a02c:	0007      	movs	r7, r0
 800a02e:	429e      	cmp	r6, r3
 800a030:	d9f0      	bls.n	800a014 <__utoa+0x24>
 800a032:	2300      	movs	r3, #0
 800a034:	0022      	movs	r2, r4
 800a036:	5563      	strb	r3, [r4, r5]
 800a038:	000b      	movs	r3, r1
 800a03a:	1ac8      	subs	r0, r1, r3
 800a03c:	4283      	cmp	r3, r0
 800a03e:	dd08      	ble.n	800a052 <__utoa+0x62>
 800a040:	7810      	ldrb	r0, [r2, #0]
 800a042:	5ce5      	ldrb	r5, [r4, r3]
 800a044:	7015      	strb	r5, [r2, #0]
 800a046:	54e0      	strb	r0, [r4, r3]
 800a048:	3201      	adds	r2, #1
 800a04a:	3b01      	subs	r3, #1
 800a04c:	e7f5      	b.n	800a03a <__utoa+0x4a>
 800a04e:	7025      	strb	r5, [r4, #0]
 800a050:	002c      	movs	r4, r5
 800a052:	0020      	movs	r0, r4
 800a054:	b00d      	add	sp, #52	; 0x34
 800a056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a058:	0800a3c8 	.word	0x0800a3c8

0800a05c <_init>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	46c0      	nop			; (mov r8, r8)
 800a060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a062:	bc08      	pop	{r3}
 800a064:	469e      	mov	lr, r3
 800a066:	4770      	bx	lr

0800a068 <_fini>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr
