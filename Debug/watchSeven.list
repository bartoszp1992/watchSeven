
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a90  08009a90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a98  08009a98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  08009aac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08009aac  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f43  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003799  00000000  00000000  00040f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00044710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00045cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbeb  00000000  00000000  00047148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b823  00000000  00000000  00063d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2fa1  00000000  00000000  0007f556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001324f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000531c  00000000  00000000  0013254c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080096ac 	.word	0x080096ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080096ac 	.word	0x080096ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f81e 	bl	8000460 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_f2uiz>:
 8000430:	219e      	movs	r1, #158	; 0x9e
 8000432:	b510      	push	{r4, lr}
 8000434:	05c9      	lsls	r1, r1, #23
 8000436:	1c04      	adds	r4, r0, #0
 8000438:	f001 ff5c 	bl	80022f4 <__aeabi_fcmpge>
 800043c:	2800      	cmp	r0, #0
 800043e:	d103      	bne.n	8000448 <__aeabi_f2uiz+0x18>
 8000440:	1c20      	adds	r0, r4, #0
 8000442:	f000 fe63 	bl	800110c <__aeabi_f2iz>
 8000446:	bd10      	pop	{r4, pc}
 8000448:	219e      	movs	r1, #158	; 0x9e
 800044a:	1c20      	adds	r0, r4, #0
 800044c:	05c9      	lsls	r1, r1, #23
 800044e:	f000 fc95 	bl	8000d7c <__aeabi_fsub>
 8000452:	f000 fe5b 	bl	800110c <__aeabi_f2iz>
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	061b      	lsls	r3, r3, #24
 800045a:	469c      	mov	ip, r3
 800045c:	4460      	add	r0, ip
 800045e:	e7f2      	b.n	8000446 <__aeabi_f2uiz+0x16>

08000460 <__udivmoddi4>:
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	4657      	mov	r7, sl
 8000464:	464e      	mov	r6, r9
 8000466:	4645      	mov	r5, r8
 8000468:	46de      	mov	lr, fp
 800046a:	b5e0      	push	{r5, r6, r7, lr}
 800046c:	0004      	movs	r4, r0
 800046e:	000d      	movs	r5, r1
 8000470:	4692      	mov	sl, r2
 8000472:	4699      	mov	r9, r3
 8000474:	b083      	sub	sp, #12
 8000476:	428b      	cmp	r3, r1
 8000478:	d830      	bhi.n	80004dc <__udivmoddi4+0x7c>
 800047a:	d02d      	beq.n	80004d8 <__udivmoddi4+0x78>
 800047c:	4649      	mov	r1, r9
 800047e:	4650      	mov	r0, sl
 8000480:	f001 ff60 	bl	8002344 <__clzdi2>
 8000484:	0029      	movs	r1, r5
 8000486:	0006      	movs	r6, r0
 8000488:	0020      	movs	r0, r4
 800048a:	f001 ff5b 	bl	8002344 <__clzdi2>
 800048e:	1a33      	subs	r3, r6, r0
 8000490:	4698      	mov	r8, r3
 8000492:	3b20      	subs	r3, #32
 8000494:	469b      	mov	fp, r3
 8000496:	d433      	bmi.n	8000500 <__udivmoddi4+0xa0>
 8000498:	465a      	mov	r2, fp
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	4642      	mov	r2, r8
 80004a0:	001f      	movs	r7, r3
 80004a2:	4653      	mov	r3, sl
 80004a4:	4093      	lsls	r3, r2
 80004a6:	001e      	movs	r6, r3
 80004a8:	42af      	cmp	r7, r5
 80004aa:	d83a      	bhi.n	8000522 <__udivmoddi4+0xc2>
 80004ac:	42af      	cmp	r7, r5
 80004ae:	d100      	bne.n	80004b2 <__udivmoddi4+0x52>
 80004b0:	e078      	b.n	80005a4 <__udivmoddi4+0x144>
 80004b2:	465b      	mov	r3, fp
 80004b4:	1ba4      	subs	r4, r4, r6
 80004b6:	41bd      	sbcs	r5, r7
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	da00      	bge.n	80004be <__udivmoddi4+0x5e>
 80004bc:	e075      	b.n	80005aa <__udivmoddi4+0x14a>
 80004be:	2200      	movs	r2, #0
 80004c0:	2300      	movs	r3, #0
 80004c2:	9200      	str	r2, [sp, #0]
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	465a      	mov	r2, fp
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	4642      	mov	r2, r8
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	e028      	b.n	800052a <__udivmoddi4+0xca>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d9cf      	bls.n	800047c <__udivmoddi4+0x1c>
 80004dc:	2200      	movs	r2, #0
 80004de:	2300      	movs	r3, #0
 80004e0:	9200      	str	r2, [sp, #0]
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <__udivmoddi4+0x8e>
 80004ea:	601c      	str	r4, [r3, #0]
 80004ec:	605d      	str	r5, [r3, #4]
 80004ee:	9800      	ldr	r0, [sp, #0]
 80004f0:	9901      	ldr	r1, [sp, #4]
 80004f2:	b003      	add	sp, #12
 80004f4:	bcf0      	pop	{r4, r5, r6, r7}
 80004f6:	46bb      	mov	fp, r7
 80004f8:	46b2      	mov	sl, r6
 80004fa:	46a9      	mov	r9, r5
 80004fc:	46a0      	mov	r8, r4
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000500:	4642      	mov	r2, r8
 8000502:	2320      	movs	r3, #32
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	4652      	mov	r2, sl
 8000508:	40da      	lsrs	r2, r3
 800050a:	4641      	mov	r1, r8
 800050c:	0013      	movs	r3, r2
 800050e:	464a      	mov	r2, r9
 8000510:	408a      	lsls	r2, r1
 8000512:	0017      	movs	r7, r2
 8000514:	4642      	mov	r2, r8
 8000516:	431f      	orrs	r7, r3
 8000518:	4653      	mov	r3, sl
 800051a:	4093      	lsls	r3, r2
 800051c:	001e      	movs	r6, r3
 800051e:	42af      	cmp	r7, r5
 8000520:	d9c4      	bls.n	80004ac <__udivmoddi4+0x4c>
 8000522:	2200      	movs	r2, #0
 8000524:	2300      	movs	r3, #0
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	4643      	mov	r3, r8
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0d9      	beq.n	80004e4 <__udivmoddi4+0x84>
 8000530:	07fb      	lsls	r3, r7, #31
 8000532:	0872      	lsrs	r2, r6, #1
 8000534:	431a      	orrs	r2, r3
 8000536:	4646      	mov	r6, r8
 8000538:	087b      	lsrs	r3, r7, #1
 800053a:	e00e      	b.n	800055a <__udivmoddi4+0xfa>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d101      	bne.n	8000544 <__udivmoddi4+0xe4>
 8000540:	42a2      	cmp	r2, r4
 8000542:	d80c      	bhi.n	800055e <__udivmoddi4+0xfe>
 8000544:	1aa4      	subs	r4, r4, r2
 8000546:	419d      	sbcs	r5, r3
 8000548:	2001      	movs	r0, #1
 800054a:	1924      	adds	r4, r4, r4
 800054c:	416d      	adcs	r5, r5
 800054e:	2100      	movs	r1, #0
 8000550:	3e01      	subs	r6, #1
 8000552:	1824      	adds	r4, r4, r0
 8000554:	414d      	adcs	r5, r1
 8000556:	2e00      	cmp	r6, #0
 8000558:	d006      	beq.n	8000568 <__udivmoddi4+0x108>
 800055a:	42ab      	cmp	r3, r5
 800055c:	d9ee      	bls.n	800053c <__udivmoddi4+0xdc>
 800055e:	3e01      	subs	r6, #1
 8000560:	1924      	adds	r4, r4, r4
 8000562:	416d      	adcs	r5, r5
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1f8      	bne.n	800055a <__udivmoddi4+0xfa>
 8000568:	9800      	ldr	r0, [sp, #0]
 800056a:	9901      	ldr	r1, [sp, #4]
 800056c:	465b      	mov	r3, fp
 800056e:	1900      	adds	r0, r0, r4
 8000570:	4169      	adcs	r1, r5
 8000572:	2b00      	cmp	r3, #0
 8000574:	db24      	blt.n	80005c0 <__udivmoddi4+0x160>
 8000576:	002b      	movs	r3, r5
 8000578:	465a      	mov	r2, fp
 800057a:	4644      	mov	r4, r8
 800057c:	40d3      	lsrs	r3, r2
 800057e:	002a      	movs	r2, r5
 8000580:	40e2      	lsrs	r2, r4
 8000582:	001c      	movs	r4, r3
 8000584:	465b      	mov	r3, fp
 8000586:	0015      	movs	r5, r2
 8000588:	2b00      	cmp	r3, #0
 800058a:	db2a      	blt.n	80005e2 <__udivmoddi4+0x182>
 800058c:	0026      	movs	r6, r4
 800058e:	409e      	lsls	r6, r3
 8000590:	0033      	movs	r3, r6
 8000592:	0026      	movs	r6, r4
 8000594:	4647      	mov	r7, r8
 8000596:	40be      	lsls	r6, r7
 8000598:	0032      	movs	r2, r6
 800059a:	1a80      	subs	r0, r0, r2
 800059c:	4199      	sbcs	r1, r3
 800059e:	9000      	str	r0, [sp, #0]
 80005a0:	9101      	str	r1, [sp, #4]
 80005a2:	e79f      	b.n	80004e4 <__udivmoddi4+0x84>
 80005a4:	42a3      	cmp	r3, r4
 80005a6:	d8bc      	bhi.n	8000522 <__udivmoddi4+0xc2>
 80005a8:	e783      	b.n	80004b2 <__udivmoddi4+0x52>
 80005aa:	4642      	mov	r2, r8
 80005ac:	2320      	movs	r3, #32
 80005ae:	2100      	movs	r1, #0
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	2200      	movs	r2, #0
 80005b4:	9100      	str	r1, [sp, #0]
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	e786      	b.n	80004ce <__udivmoddi4+0x6e>
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	4646      	mov	r6, r8
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0023      	movs	r3, r4
 80005ce:	40f3      	lsrs	r3, r6
 80005d0:	4644      	mov	r4, r8
 80005d2:	4313      	orrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dad4      	bge.n	800058c <__udivmoddi4+0x12c>
 80005e2:	4642      	mov	r2, r8
 80005e4:	002f      	movs	r7, r5
 80005e6:	2320      	movs	r3, #32
 80005e8:	0026      	movs	r6, r4
 80005ea:	4097      	lsls	r7, r2
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	40de      	lsrs	r6, r3
 80005f0:	003b      	movs	r3, r7
 80005f2:	4333      	orrs	r3, r6
 80005f4:	e7cd      	b.n	8000592 <__udivmoddi4+0x132>
 80005f6:	46c0      	nop			; (mov r8, r8)

080005f8 <__aeabi_fadd>:
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	4646      	mov	r6, r8
 80005fc:	46d6      	mov	lr, sl
 80005fe:	464f      	mov	r7, r9
 8000600:	024d      	lsls	r5, r1, #9
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	b5c0      	push	{r6, r7, lr}
 8000606:	0a52      	lsrs	r2, r2, #9
 8000608:	0a6e      	lsrs	r6, r5, #9
 800060a:	0047      	lsls	r7, r0, #1
 800060c:	46b0      	mov	r8, r6
 800060e:	0e3f      	lsrs	r7, r7, #24
 8000610:	004e      	lsls	r6, r1, #1
 8000612:	0fc4      	lsrs	r4, r0, #31
 8000614:	00d0      	lsls	r0, r2, #3
 8000616:	4694      	mov	ip, r2
 8000618:	003b      	movs	r3, r7
 800061a:	4682      	mov	sl, r0
 800061c:	0e36      	lsrs	r6, r6, #24
 800061e:	0fc9      	lsrs	r1, r1, #31
 8000620:	09ad      	lsrs	r5, r5, #6
 8000622:	428c      	cmp	r4, r1
 8000624:	d06d      	beq.n	8000702 <__aeabi_fadd+0x10a>
 8000626:	1bb8      	subs	r0, r7, r6
 8000628:	4681      	mov	r9, r0
 800062a:	2800      	cmp	r0, #0
 800062c:	dd4d      	ble.n	80006ca <__aeabi_fadd+0xd2>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x3c>
 8000632:	e088      	b.n	8000746 <__aeabi_fadd+0x14e>
 8000634:	2fff      	cmp	r7, #255	; 0xff
 8000636:	d05a      	beq.n	80006ee <__aeabi_fadd+0xf6>
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	04db      	lsls	r3, r3, #19
 800063c:	431d      	orrs	r5, r3
 800063e:	464b      	mov	r3, r9
 8000640:	2201      	movs	r2, #1
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dc0a      	bgt.n	800065c <__aeabi_fadd+0x64>
 8000646:	002b      	movs	r3, r5
 8000648:	464a      	mov	r2, r9
 800064a:	4649      	mov	r1, r9
 800064c:	40d3      	lsrs	r3, r2
 800064e:	2220      	movs	r2, #32
 8000650:	1a52      	subs	r2, r2, r1
 8000652:	4095      	lsls	r5, r2
 8000654:	002a      	movs	r2, r5
 8000656:	1e55      	subs	r5, r2, #1
 8000658:	41aa      	sbcs	r2, r5
 800065a:	431a      	orrs	r2, r3
 800065c:	4653      	mov	r3, sl
 800065e:	1a9a      	subs	r2, r3, r2
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d400      	bmi.n	8000666 <__aeabi_fadd+0x6e>
 8000664:	e0b9      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000666:	0192      	lsls	r2, r2, #6
 8000668:	0996      	lsrs	r6, r2, #6
 800066a:	0030      	movs	r0, r6
 800066c:	f001 fe4c 	bl	8002308 <__clzsi2>
 8000670:	3805      	subs	r0, #5
 8000672:	4086      	lsls	r6, r0
 8000674:	4287      	cmp	r7, r0
 8000676:	dd00      	ble.n	800067a <__aeabi_fadd+0x82>
 8000678:	e0d4      	b.n	8000824 <__aeabi_fadd+0x22c>
 800067a:	0033      	movs	r3, r6
 800067c:	1bc7      	subs	r7, r0, r7
 800067e:	2020      	movs	r0, #32
 8000680:	3701      	adds	r7, #1
 8000682:	40fb      	lsrs	r3, r7
 8000684:	1bc7      	subs	r7, r0, r7
 8000686:	40be      	lsls	r6, r7
 8000688:	0032      	movs	r2, r6
 800068a:	1e56      	subs	r6, r2, #1
 800068c:	41b2      	sbcs	r2, r6
 800068e:	2700      	movs	r7, #0
 8000690:	431a      	orrs	r2, r3
 8000692:	0753      	lsls	r3, r2, #29
 8000694:	d004      	beq.n	80006a0 <__aeabi_fadd+0xa8>
 8000696:	230f      	movs	r3, #15
 8000698:	4013      	ands	r3, r2
 800069a:	2b04      	cmp	r3, #4
 800069c:	d000      	beq.n	80006a0 <__aeabi_fadd+0xa8>
 800069e:	3204      	adds	r2, #4
 80006a0:	0153      	lsls	r3, r2, #5
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_fadd+0xae>
 80006a4:	e09c      	b.n	80007e0 <__aeabi_fadd+0x1e8>
 80006a6:	1c7b      	adds	r3, r7, #1
 80006a8:	2ffe      	cmp	r7, #254	; 0xfe
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0xb6>
 80006ac:	e09a      	b.n	80007e4 <__aeabi_fadd+0x1ec>
 80006ae:	0192      	lsls	r2, r2, #6
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	4694      	mov	ip, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	05d8      	lsls	r0, r3, #23
 80006b8:	4663      	mov	r3, ip
 80006ba:	07e4      	lsls	r4, r4, #31
 80006bc:	4318      	orrs	r0, r3
 80006be:	4320      	orrs	r0, r4
 80006c0:	bce0      	pop	{r5, r6, r7}
 80006c2:	46ba      	mov	sl, r7
 80006c4:	46b1      	mov	r9, r6
 80006c6:	46a8      	mov	r8, r5
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d049      	beq.n	8000762 <__aeabi_fadd+0x16a>
 80006ce:	1bf3      	subs	r3, r6, r7
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0xde>
 80006d4:	e0b6      	b.n	8000844 <__aeabi_fadd+0x24c>
 80006d6:	4652      	mov	r2, sl
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d060      	beq.n	800079e <__aeabi_fadd+0x1a6>
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0xec>
 80006e2:	e0fc      	b.n	80008de <__aeabi_fadd+0x2e6>
 80006e4:	2eff      	cmp	r6, #255	; 0xff
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0xf2>
 80006e8:	e0b4      	b.n	8000854 <__aeabi_fadd+0x25c>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d078      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 80006f2:	2080      	movs	r0, #128	; 0x80
 80006f4:	03c0      	lsls	r0, r0, #15
 80006f6:	4310      	orrs	r0, r2
 80006f8:	0242      	lsls	r2, r0, #9
 80006fa:	0a53      	lsrs	r3, r2, #9
 80006fc:	469c      	mov	ip, r3
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	e7d9      	b.n	80006b6 <__aeabi_fadd+0xbe>
 8000702:	1bb9      	subs	r1, r7, r6
 8000704:	2900      	cmp	r1, #0
 8000706:	dd71      	ble.n	80007ec <__aeabi_fadd+0x1f4>
 8000708:	2e00      	cmp	r6, #0
 800070a:	d03f      	beq.n	800078c <__aeabi_fadd+0x194>
 800070c:	2fff      	cmp	r7, #255	; 0xff
 800070e:	d0ee      	beq.n	80006ee <__aeabi_fadd+0xf6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	431d      	orrs	r5, r3
 8000716:	2201      	movs	r2, #1
 8000718:	291b      	cmp	r1, #27
 800071a:	dc07      	bgt.n	800072c <__aeabi_fadd+0x134>
 800071c:	002a      	movs	r2, r5
 800071e:	2320      	movs	r3, #32
 8000720:	40ca      	lsrs	r2, r1
 8000722:	1a59      	subs	r1, r3, r1
 8000724:	408d      	lsls	r5, r1
 8000726:	1e6b      	subs	r3, r5, #1
 8000728:	419d      	sbcs	r5, r3
 800072a:	432a      	orrs	r2, r5
 800072c:	4452      	add	r2, sl
 800072e:	0153      	lsls	r3, r2, #5
 8000730:	d553      	bpl.n	80007da <__aeabi_fadd+0x1e2>
 8000732:	3701      	adds	r7, #1
 8000734:	2fff      	cmp	r7, #255	; 0xff
 8000736:	d055      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 8000738:	2301      	movs	r3, #1
 800073a:	497b      	ldr	r1, [pc, #492]	; (8000928 <__aeabi_fadd+0x330>)
 800073c:	4013      	ands	r3, r2
 800073e:	0852      	lsrs	r2, r2, #1
 8000740:	400a      	ands	r2, r1
 8000742:	431a      	orrs	r2, r3
 8000744:	e7a5      	b.n	8000692 <__aeabi_fadd+0x9a>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d02c      	beq.n	80007a4 <__aeabi_fadd+0x1ac>
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	469c      	mov	ip, r3
 8000750:	44e1      	add	r9, ip
 8000752:	464b      	mov	r3, r9
 8000754:	2b00      	cmp	r3, #0
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x162>
 8000758:	e0ad      	b.n	80008b6 <__aeabi_fadd+0x2be>
 800075a:	2fff      	cmp	r7, #255	; 0xff
 800075c:	d000      	beq.n	8000760 <__aeabi_fadd+0x168>
 800075e:	e76e      	b.n	800063e <__aeabi_fadd+0x46>
 8000760:	e7c5      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000762:	20fe      	movs	r0, #254	; 0xfe
 8000764:	1c7e      	adds	r6, r7, #1
 8000766:	4230      	tst	r0, r6
 8000768:	d160      	bne.n	800082c <__aeabi_fadd+0x234>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x178>
 800076e:	e093      	b.n	8000898 <__aeabi_fadd+0x2a0>
 8000770:	4652      	mov	r2, sl
 8000772:	2a00      	cmp	r2, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x180>
 8000776:	e0b6      	b.n	80008e6 <__aeabi_fadd+0x2ee>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d09c      	beq.n	80006b6 <__aeabi_fadd+0xbe>
 800077c:	1b52      	subs	r2, r2, r5
 800077e:	0150      	lsls	r0, r2, #5
 8000780:	d400      	bmi.n	8000784 <__aeabi_fadd+0x18c>
 8000782:	e0c3      	b.n	800090c <__aeabi_fadd+0x314>
 8000784:	4653      	mov	r3, sl
 8000786:	000c      	movs	r4, r1
 8000788:	1aea      	subs	r2, r5, r3
 800078a:	e782      	b.n	8000692 <__aeabi_fadd+0x9a>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d009      	beq.n	80007a4 <__aeabi_fadd+0x1ac>
 8000790:	3901      	subs	r1, #1
 8000792:	2900      	cmp	r1, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x1a0>
 8000796:	e08b      	b.n	80008b0 <__aeabi_fadd+0x2b8>
 8000798:	2fff      	cmp	r7, #255	; 0xff
 800079a:	d1bc      	bne.n	8000716 <__aeabi_fadd+0x11e>
 800079c:	e7a7      	b.n	80006ee <__aeabi_fadd+0xf6>
 800079e:	000c      	movs	r4, r1
 80007a0:	4642      	mov	r2, r8
 80007a2:	0037      	movs	r7, r6
 80007a4:	2fff      	cmp	r7, #255	; 0xff
 80007a6:	d0a2      	beq.n	80006ee <__aeabi_fadd+0xf6>
 80007a8:	0252      	lsls	r2, r2, #9
 80007aa:	0a53      	lsrs	r3, r2, #9
 80007ac:	469c      	mov	ip, r3
 80007ae:	b2fb      	uxtb	r3, r7
 80007b0:	e781      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007b2:	21fe      	movs	r1, #254	; 0xfe
 80007b4:	3701      	adds	r7, #1
 80007b6:	4239      	tst	r1, r7
 80007b8:	d165      	bne.n	8000886 <__aeabi_fadd+0x28e>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d17e      	bne.n	80008bc <__aeabi_fadd+0x2c4>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x1cc>
 80007c2:	e0aa      	b.n	800091a <__aeabi_fadd+0x322>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x1d2>
 80007c8:	e775      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007ca:	002a      	movs	r2, r5
 80007cc:	4452      	add	r2, sl
 80007ce:	2700      	movs	r7, #0
 80007d0:	0153      	lsls	r3, r2, #5
 80007d2:	d502      	bpl.n	80007da <__aeabi_fadd+0x1e2>
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <__aeabi_fadd+0x334>)
 80007d6:	3701      	adds	r7, #1
 80007d8:	401a      	ands	r2, r3
 80007da:	0753      	lsls	r3, r2, #29
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x1e8>
 80007de:	e75a      	b.n	8000696 <__aeabi_fadd+0x9e>
 80007e0:	08d2      	lsrs	r2, r2, #3
 80007e2:	e7df      	b.n	80007a4 <__aeabi_fadd+0x1ac>
 80007e4:	2200      	movs	r2, #0
 80007e6:	23ff      	movs	r3, #255	; 0xff
 80007e8:	4694      	mov	ip, r2
 80007ea:	e764      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d0e0      	beq.n	80007b2 <__aeabi_fadd+0x1ba>
 80007f0:	1bf3      	subs	r3, r6, r7
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d03e      	beq.n	8000874 <__aeabi_fadd+0x27c>
 80007f6:	2eff      	cmp	r6, #255	; 0xff
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x204>
 80007fa:	e777      	b.n	80006ec <__aeabi_fadd+0xf4>
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0001      	movs	r1, r0
 8000800:	04d2      	lsls	r2, r2, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	468a      	mov	sl, r1
 8000806:	2201      	movs	r2, #1
 8000808:	2b1b      	cmp	r3, #27
 800080a:	dc08      	bgt.n	800081e <__aeabi_fadd+0x226>
 800080c:	4652      	mov	r2, sl
 800080e:	2120      	movs	r1, #32
 8000810:	4650      	mov	r0, sl
 8000812:	40da      	lsrs	r2, r3
 8000814:	1acb      	subs	r3, r1, r3
 8000816:	4098      	lsls	r0, r3
 8000818:	1e43      	subs	r3, r0, #1
 800081a:	4198      	sbcs	r0, r3
 800081c:	4302      	orrs	r2, r0
 800081e:	0037      	movs	r7, r6
 8000820:	1952      	adds	r2, r2, r5
 8000822:	e784      	b.n	800072e <__aeabi_fadd+0x136>
 8000824:	4a41      	ldr	r2, [pc, #260]	; (800092c <__aeabi_fadd+0x334>)
 8000826:	1a3f      	subs	r7, r7, r0
 8000828:	4032      	ands	r2, r6
 800082a:	e732      	b.n	8000692 <__aeabi_fadd+0x9a>
 800082c:	4653      	mov	r3, sl
 800082e:	1b5e      	subs	r6, r3, r5
 8000830:	0173      	lsls	r3, r6, #5
 8000832:	d42d      	bmi.n	8000890 <__aeabi_fadd+0x298>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d000      	beq.n	800083a <__aeabi_fadd+0x242>
 8000838:	e717      	b.n	800066a <__aeabi_fadd+0x72>
 800083a:	2200      	movs	r2, #0
 800083c:	2400      	movs	r4, #0
 800083e:	2300      	movs	r3, #0
 8000840:	4694      	mov	ip, r2
 8000842:	e738      	b.n	80006b6 <__aeabi_fadd+0xbe>
 8000844:	2eff      	cmp	r6, #255	; 0xff
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x252>
 8000848:	e74f      	b.n	80006ea <__aeabi_fadd+0xf2>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	4650      	mov	r0, sl
 800084e:	04d2      	lsls	r2, r2, #19
 8000850:	4310      	orrs	r0, r2
 8000852:	4682      	mov	sl, r0
 8000854:	2201      	movs	r2, #1
 8000856:	2b1b      	cmp	r3, #27
 8000858:	dc08      	bgt.n	800086c <__aeabi_fadd+0x274>
 800085a:	4652      	mov	r2, sl
 800085c:	2420      	movs	r4, #32
 800085e:	4650      	mov	r0, sl
 8000860:	40da      	lsrs	r2, r3
 8000862:	1ae3      	subs	r3, r4, r3
 8000864:	4098      	lsls	r0, r3
 8000866:	1e43      	subs	r3, r0, #1
 8000868:	4198      	sbcs	r0, r3
 800086a:	4302      	orrs	r2, r0
 800086c:	000c      	movs	r4, r1
 800086e:	0037      	movs	r7, r6
 8000870:	1aaa      	subs	r2, r5, r2
 8000872:	e6f5      	b.n	8000660 <__aeabi_fadd+0x68>
 8000874:	2800      	cmp	r0, #0
 8000876:	d093      	beq.n	80007a0 <__aeabi_fadd+0x1a8>
 8000878:	3b01      	subs	r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d04f      	beq.n	800091e <__aeabi_fadd+0x326>
 800087e:	2eff      	cmp	r6, #255	; 0xff
 8000880:	d1c1      	bne.n	8000806 <__aeabi_fadd+0x20e>
 8000882:	4642      	mov	r2, r8
 8000884:	e733      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000886:	2fff      	cmp	r7, #255	; 0xff
 8000888:	d0ac      	beq.n	80007e4 <__aeabi_fadd+0x1ec>
 800088a:	4455      	add	r5, sl
 800088c:	086a      	lsrs	r2, r5, #1
 800088e:	e7a4      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000890:	4653      	mov	r3, sl
 8000892:	000c      	movs	r4, r1
 8000894:	1aee      	subs	r6, r5, r3
 8000896:	e6e8      	b.n	800066a <__aeabi_fadd+0x72>
 8000898:	4653      	mov	r3, sl
 800089a:	2b00      	cmp	r3, #0
 800089c:	d128      	bne.n	80008f0 <__aeabi_fadd+0x2f8>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fadd+0x2ac>
 80008a2:	e722      	b.n	80006ea <__aeabi_fadd+0xf2>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	469c      	mov	ip, r3
 80008aa:	2400      	movs	r4, #0
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	e702      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80008b0:	002a      	movs	r2, r5
 80008b2:	4452      	add	r2, sl
 80008b4:	e73b      	b.n	800072e <__aeabi_fadd+0x136>
 80008b6:	4653      	mov	r3, sl
 80008b8:	1b5a      	subs	r2, r3, r5
 80008ba:	e6d1      	b.n	8000660 <__aeabi_fadd+0x68>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x2ca>
 80008c0:	e714      	b.n	80006ec <__aeabi_fadd+0xf4>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x2d0>
 80008c6:	e712      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	03db      	lsls	r3, r3, #15
 80008cc:	421a      	tst	r2, r3
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x2da>
 80008d0:	e70d      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008d2:	4641      	mov	r1, r8
 80008d4:	4219      	tst	r1, r3
 80008d6:	d000      	beq.n	80008da <__aeabi_fadd+0x2e2>
 80008d8:	e709      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008da:	4642      	mov	r2, r8
 80008dc:	e707      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008de:	000c      	movs	r4, r1
 80008e0:	0037      	movs	r7, r6
 80008e2:	1aaa      	subs	r2, r5, r2
 80008e4:	e6bc      	b.n	8000660 <__aeabi_fadd+0x68>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d013      	beq.n	8000912 <__aeabi_fadd+0x31a>
 80008ea:	000c      	movs	r4, r1
 80008ec:	46c4      	mov	ip, r8
 80008ee:	e6e2      	b.n	80006b6 <__aeabi_fadd+0xbe>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x2fe>
 80008f4:	e6fb      	b.n	80006ee <__aeabi_fadd+0xf6>
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	03db      	lsls	r3, r3, #15
 80008fa:	421a      	tst	r2, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x308>
 80008fe:	e6f6      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000900:	4640      	mov	r0, r8
 8000902:	4218      	tst	r0, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_fadd+0x310>
 8000906:	e6f2      	b.n	80006ee <__aeabi_fadd+0xf6>
 8000908:	000c      	movs	r4, r1
 800090a:	e6ef      	b.n	80006ec <__aeabi_fadd+0xf4>
 800090c:	2a00      	cmp	r2, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x31a>
 8000910:	e763      	b.n	80007da <__aeabi_fadd+0x1e2>
 8000912:	2200      	movs	r2, #0
 8000914:	2400      	movs	r4, #0
 8000916:	4694      	mov	ip, r2
 8000918:	e6cd      	b.n	80006b6 <__aeabi_fadd+0xbe>
 800091a:	46c4      	mov	ip, r8
 800091c:	e6cb      	b.n	80006b6 <__aeabi_fadd+0xbe>
 800091e:	002a      	movs	r2, r5
 8000920:	0037      	movs	r7, r6
 8000922:	4452      	add	r2, sl
 8000924:	e703      	b.n	800072e <__aeabi_fadd+0x136>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	7dffffff 	.word	0x7dffffff
 800092c:	fbffffff 	.word	0xfbffffff

08000930 <__aeabi_fdiv>:
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	464f      	mov	r7, r9
 8000934:	4646      	mov	r6, r8
 8000936:	46d6      	mov	lr, sl
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	b5c0      	push	{r6, r7, lr}
 800093c:	0047      	lsls	r7, r0, #1
 800093e:	1c0c      	adds	r4, r1, #0
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0e3f      	lsrs	r7, r7, #24
 8000944:	0fc6      	lsrs	r6, r0, #31
 8000946:	2f00      	cmp	r7, #0
 8000948:	d066      	beq.n	8000a18 <__aeabi_fdiv+0xe8>
 800094a:	2fff      	cmp	r7, #255	; 0xff
 800094c:	d06c      	beq.n	8000a28 <__aeabi_fdiv+0xf8>
 800094e:	2300      	movs	r3, #0
 8000950:	00ea      	lsls	r2, r5, #3
 8000952:	2580      	movs	r5, #128	; 0x80
 8000954:	4699      	mov	r9, r3
 8000956:	469a      	mov	sl, r3
 8000958:	04ed      	lsls	r5, r5, #19
 800095a:	4315      	orrs	r5, r2
 800095c:	3f7f      	subs	r7, #127	; 0x7f
 800095e:	0260      	lsls	r0, r4, #9
 8000960:	0061      	lsls	r1, r4, #1
 8000962:	0a43      	lsrs	r3, r0, #9
 8000964:	4698      	mov	r8, r3
 8000966:	0e09      	lsrs	r1, r1, #24
 8000968:	0fe4      	lsrs	r4, r4, #31
 800096a:	2900      	cmp	r1, #0
 800096c:	d048      	beq.n	8000a00 <__aeabi_fdiv+0xd0>
 800096e:	29ff      	cmp	r1, #255	; 0xff
 8000970:	d010      	beq.n	8000994 <__aeabi_fdiv+0x64>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	00d8      	lsls	r0, r3, #3
 8000976:	04d2      	lsls	r2, r2, #19
 8000978:	4302      	orrs	r2, r0
 800097a:	4690      	mov	r8, r2
 800097c:	2000      	movs	r0, #0
 800097e:	397f      	subs	r1, #127	; 0x7f
 8000980:	464a      	mov	r2, r9
 8000982:	0033      	movs	r3, r6
 8000984:	1a7f      	subs	r7, r7, r1
 8000986:	4302      	orrs	r2, r0
 8000988:	496c      	ldr	r1, [pc, #432]	; (8000b3c <__aeabi_fdiv+0x20c>)
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	588a      	ldr	r2, [r1, r2]
 800098e:	4063      	eors	r3, r4
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4697      	mov	pc, r2
 8000994:	2b00      	cmp	r3, #0
 8000996:	d16d      	bne.n	8000a74 <__aeabi_fdiv+0x144>
 8000998:	2002      	movs	r0, #2
 800099a:	3fff      	subs	r7, #255	; 0xff
 800099c:	e033      	b.n	8000a06 <__aeabi_fdiv+0xd6>
 800099e:	2300      	movs	r3, #0
 80009a0:	4698      	mov	r8, r3
 80009a2:	0026      	movs	r6, r4
 80009a4:	4645      	mov	r5, r8
 80009a6:	4682      	mov	sl, r0
 80009a8:	4653      	mov	r3, sl
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fdiv+0x80>
 80009ae:	e07f      	b.n	8000ab0 <__aeabi_fdiv+0x180>
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fdiv+0x86>
 80009b4:	e094      	b.n	8000ae0 <__aeabi_fdiv+0x1b0>
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d017      	beq.n	80009ea <__aeabi_fdiv+0xba>
 80009ba:	0038      	movs	r0, r7
 80009bc:	307f      	adds	r0, #127	; 0x7f
 80009be:	2800      	cmp	r0, #0
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fdiv+0x152>
 80009c2:	076b      	lsls	r3, r5, #29
 80009c4:	d004      	beq.n	80009d0 <__aeabi_fdiv+0xa0>
 80009c6:	230f      	movs	r3, #15
 80009c8:	402b      	ands	r3, r5
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fdiv+0xa0>
 80009ce:	3504      	adds	r5, #4
 80009d0:	012b      	lsls	r3, r5, #4
 80009d2:	d503      	bpl.n	80009dc <__aeabi_fdiv+0xac>
 80009d4:	0038      	movs	r0, r7
 80009d6:	4b5a      	ldr	r3, [pc, #360]	; (8000b40 <__aeabi_fdiv+0x210>)
 80009d8:	3080      	adds	r0, #128	; 0x80
 80009da:	401d      	ands	r5, r3
 80009dc:	28fe      	cmp	r0, #254	; 0xfe
 80009de:	dc67      	bgt.n	8000ab0 <__aeabi_fdiv+0x180>
 80009e0:	01ad      	lsls	r5, r5, #6
 80009e2:	0a6d      	lsrs	r5, r5, #9
 80009e4:	b2c0      	uxtb	r0, r0
 80009e6:	e002      	b.n	80009ee <__aeabi_fdiv+0xbe>
 80009e8:	001e      	movs	r6, r3
 80009ea:	2000      	movs	r0, #0
 80009ec:	2500      	movs	r5, #0
 80009ee:	05c0      	lsls	r0, r0, #23
 80009f0:	4328      	orrs	r0, r5
 80009f2:	07f6      	lsls	r6, r6, #31
 80009f4:	4330      	orrs	r0, r6
 80009f6:	bce0      	pop	{r5, r6, r7}
 80009f8:	46ba      	mov	sl, r7
 80009fa:	46b1      	mov	r9, r6
 80009fc:	46a8      	mov	r8, r5
 80009fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12b      	bne.n	8000a5c <__aeabi_fdiv+0x12c>
 8000a04:	2001      	movs	r0, #1
 8000a06:	464a      	mov	r2, r9
 8000a08:	0033      	movs	r3, r6
 8000a0a:	494e      	ldr	r1, [pc, #312]	; (8000b44 <__aeabi_fdiv+0x214>)
 8000a0c:	4302      	orrs	r2, r0
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	588a      	ldr	r2, [r1, r2]
 8000a12:	4063      	eors	r3, r4
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4697      	mov	pc, r2
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d113      	bne.n	8000a44 <__aeabi_fdiv+0x114>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	4699      	mov	r9, r3
 8000a20:	3b03      	subs	r3, #3
 8000a22:	2700      	movs	r7, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	e79a      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d105      	bne.n	8000a38 <__aeabi_fdiv+0x108>
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	4699      	mov	r9, r3
 8000a30:	3b06      	subs	r3, #6
 8000a32:	27ff      	movs	r7, #255	; 0xff
 8000a34:	469a      	mov	sl, r3
 8000a36:	e792      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	3b09      	subs	r3, #9
 8000a3e:	27ff      	movs	r7, #255	; 0xff
 8000a40:	469a      	mov	sl, r3
 8000a42:	e78c      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a44:	0028      	movs	r0, r5
 8000a46:	f001 fc5f 	bl	8002308 <__clzsi2>
 8000a4a:	2776      	movs	r7, #118	; 0x76
 8000a4c:	1f43      	subs	r3, r0, #5
 8000a4e:	409d      	lsls	r5, r3
 8000a50:	2300      	movs	r3, #0
 8000a52:	427f      	negs	r7, r7
 8000a54:	4699      	mov	r9, r3
 8000a56:	469a      	mov	sl, r3
 8000a58:	1a3f      	subs	r7, r7, r0
 8000a5a:	e780      	b.n	800095e <__aeabi_fdiv+0x2e>
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fc53 	bl	8002308 <__clzsi2>
 8000a62:	4642      	mov	r2, r8
 8000a64:	1f43      	subs	r3, r0, #5
 8000a66:	2176      	movs	r1, #118	; 0x76
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	4690      	mov	r8, r2
 8000a70:	2000      	movs	r0, #0
 8000a72:	e785      	b.n	8000980 <__aeabi_fdiv+0x50>
 8000a74:	21ff      	movs	r1, #255	; 0xff
 8000a76:	2003      	movs	r0, #3
 8000a78:	e782      	b.n	8000980 <__aeabi_fdiv+0x50>
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	2500      	movs	r5, #0
 8000a80:	e7b5      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000a82:	2301      	movs	r3, #1
 8000a84:	1a1b      	subs	r3, r3, r0
 8000a86:	2b1b      	cmp	r3, #27
 8000a88:	dcaf      	bgt.n	80009ea <__aeabi_fdiv+0xba>
 8000a8a:	379e      	adds	r7, #158	; 0x9e
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	40bd      	lsls	r5, r7
 8000a90:	40d9      	lsrs	r1, r3
 8000a92:	1e6a      	subs	r2, r5, #1
 8000a94:	4195      	sbcs	r5, r2
 8000a96:	430d      	orrs	r5, r1
 8000a98:	076b      	lsls	r3, r5, #29
 8000a9a:	d004      	beq.n	8000aa6 <__aeabi_fdiv+0x176>
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	402b      	ands	r3, r5
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fdiv+0x176>
 8000aa4:	3504      	adds	r5, #4
 8000aa6:	016b      	lsls	r3, r5, #5
 8000aa8:	d544      	bpl.n	8000b34 <__aeabi_fdiv+0x204>
 8000aaa:	2001      	movs	r0, #1
 8000aac:	2500      	movs	r5, #0
 8000aae:	e79e      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	e79b      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ab6:	2580      	movs	r5, #128	; 0x80
 8000ab8:	2600      	movs	r6, #0
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	03ed      	lsls	r5, r5, #15
 8000abe:	e796      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	03c0      	lsls	r0, r0, #15
 8000ac8:	4205      	tst	r5, r0
 8000aca:	d009      	beq.n	8000ae0 <__aeabi_fdiv+0x1b0>
 8000acc:	4643      	mov	r3, r8
 8000ace:	4203      	tst	r3, r0
 8000ad0:	d106      	bne.n	8000ae0 <__aeabi_fdiv+0x1b0>
 8000ad2:	4645      	mov	r5, r8
 8000ad4:	4305      	orrs	r5, r0
 8000ad6:	026d      	lsls	r5, r5, #9
 8000ad8:	0026      	movs	r6, r4
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	0a6d      	lsrs	r5, r5, #9
 8000ade:	e786      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	03c0      	lsls	r0, r0, #15
 8000ae4:	4305      	orrs	r5, r0
 8000ae6:	026d      	lsls	r5, r5, #9
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	0a6d      	lsrs	r5, r5, #9
 8000aec:	e77f      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000aee:	4641      	mov	r1, r8
 8000af0:	016a      	lsls	r2, r5, #5
 8000af2:	0148      	lsls	r0, r1, #5
 8000af4:	4282      	cmp	r2, r0
 8000af6:	d219      	bcs.n	8000b2c <__aeabi_fdiv+0x1fc>
 8000af8:	211b      	movs	r1, #27
 8000afa:	2500      	movs	r5, #0
 8000afc:	3f01      	subs	r7, #1
 8000afe:	2601      	movs	r6, #1
 8000b00:	0014      	movs	r4, r2
 8000b02:	006d      	lsls	r5, r5, #1
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	db01      	blt.n	8000b0e <__aeabi_fdiv+0x1de>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	d801      	bhi.n	8000b12 <__aeabi_fdiv+0x1e2>
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	4335      	orrs	r5, r6
 8000b12:	3901      	subs	r1, #1
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d1f3      	bne.n	8000b00 <__aeabi_fdiv+0x1d0>
 8000b18:	1e50      	subs	r0, r2, #1
 8000b1a:	4182      	sbcs	r2, r0
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	307f      	adds	r0, #127	; 0x7f
 8000b20:	001e      	movs	r6, r3
 8000b22:	4315      	orrs	r5, r2
 8000b24:	2800      	cmp	r0, #0
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_fdiv+0x1fa>
 8000b28:	e74b      	b.n	80009c2 <__aeabi_fdiv+0x92>
 8000b2a:	e7aa      	b.n	8000a82 <__aeabi_fdiv+0x152>
 8000b2c:	211a      	movs	r1, #26
 8000b2e:	2501      	movs	r5, #1
 8000b30:	1a12      	subs	r2, r2, r0
 8000b32:	e7e4      	b.n	8000afe <__aeabi_fdiv+0x1ce>
 8000b34:	01ad      	lsls	r5, r5, #6
 8000b36:	2000      	movs	r0, #0
 8000b38:	0a6d      	lsrs	r5, r5, #9
 8000b3a:	e758      	b.n	80009ee <__aeabi_fdiv+0xbe>
 8000b3c:	08009778 	.word	0x08009778
 8000b40:	f7ffffff 	.word	0xf7ffffff
 8000b44:	080097b8 	.word	0x080097b8

08000b48 <__aeabi_fmul>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	4657      	mov	r7, sl
 8000b4c:	464e      	mov	r6, r9
 8000b4e:	4645      	mov	r5, r8
 8000b50:	46de      	mov	lr, fp
 8000b52:	0244      	lsls	r4, r0, #9
 8000b54:	b5e0      	push	{r5, r6, r7, lr}
 8000b56:	0045      	lsls	r5, r0, #1
 8000b58:	1c0f      	adds	r7, r1, #0
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	0e2d      	lsrs	r5, r5, #24
 8000b5e:	0fc6      	lsrs	r6, r0, #31
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d047      	beq.n	8000bf4 <__aeabi_fmul+0xac>
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d04d      	beq.n	8000c04 <__aeabi_fmul+0xbc>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2080      	movs	r0, #128	; 0x80
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	469b      	mov	fp, r3
 8000b70:	00e4      	lsls	r4, r4, #3
 8000b72:	04c0      	lsls	r0, r0, #19
 8000b74:	4304      	orrs	r4, r0
 8000b76:	3d7f      	subs	r5, #127	; 0x7f
 8000b78:	0278      	lsls	r0, r7, #9
 8000b7a:	0a43      	lsrs	r3, r0, #9
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	007a      	lsls	r2, r7, #1
 8000b80:	0ffb      	lsrs	r3, r7, #31
 8000b82:	4698      	mov	r8, r3
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	464b      	mov	r3, r9
 8000b88:	d044      	beq.n	8000c14 <__aeabi_fmul+0xcc>
 8000b8a:	2aff      	cmp	r2, #255	; 0xff
 8000b8c:	d011      	beq.n	8000bb2 <__aeabi_fmul+0x6a>
 8000b8e:	00d8      	lsls	r0, r3, #3
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4303      	orrs	r3, r0
 8000b96:	4699      	mov	r9, r3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	3a7f      	subs	r2, #127	; 0x7f
 8000b9c:	18ad      	adds	r5, r5, r2
 8000b9e:	4647      	mov	r7, r8
 8000ba0:	4653      	mov	r3, sl
 8000ba2:	4077      	eors	r7, r6
 8000ba4:	1c69      	adds	r1, r5, #1
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d83f      	bhi.n	8000c2a <__aeabi_fmul+0xe2>
 8000baa:	4a72      	ldr	r2, [pc, #456]	; (8000d74 <__aeabi_fmul+0x22c>)
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	469f      	mov	pc, r3
 8000bb2:	35ff      	adds	r5, #255	; 0xff
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fmul+0x72>
 8000bb8:	e079      	b.n	8000cae <__aeabi_fmul+0x166>
 8000bba:	4652      	mov	r2, sl
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	4692      	mov	sl, r2
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	e7eb      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	464c      	mov	r4, r9
 8000bca:	4683      	mov	fp, r0
 8000bcc:	465b      	mov	r3, fp
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d028      	beq.n	8000c24 <__aeabi_fmul+0xdc>
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fmul+0x90>
 8000bd6:	e0c6      	b.n	8000d66 <__aeabi_fmul+0x21e>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d14f      	bne.n	8000c7c <__aeabi_fmul+0x134>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	07ff      	lsls	r7, r7, #31
 8000be4:	4320      	orrs	r0, r4
 8000be6:	4338      	orrs	r0, r7
 8000be8:	bcf0      	pop	{r4, r5, r6, r7}
 8000bea:	46bb      	mov	fp, r7
 8000bec:	46b2      	mov	sl, r6
 8000bee:	46a9      	mov	r9, r5
 8000bf0:	46a0      	mov	r8, r4
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d171      	bne.n	8000cdc <__aeabi_fmul+0x194>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	2500      	movs	r5, #0
 8000c00:	469b      	mov	fp, r3
 8000c02:	e7b9      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d163      	bne.n	8000cd0 <__aeabi_fmul+0x188>
 8000c08:	2308      	movs	r3, #8
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	3b06      	subs	r3, #6
 8000c0e:	25ff      	movs	r5, #255	; 0xff
 8000c10:	469b      	mov	fp, r3
 8000c12:	e7b1      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d150      	bne.n	8000cba <__aeabi_fmul+0x172>
 8000c18:	4652      	mov	r2, sl
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	4692      	mov	sl, r2
 8000c20:	2001      	movs	r0, #1
 8000c22:	e7bc      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000c24:	20ff      	movs	r0, #255	; 0xff
 8000c26:	2400      	movs	r4, #0
 8000c28:	e7da      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	0c26      	lsrs	r6, r4, #16
 8000c2e:	0424      	lsls	r4, r4, #16
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	0404      	lsls	r4, r0, #16
 8000c34:	0c24      	lsrs	r4, r4, #16
 8000c36:	464b      	mov	r3, r9
 8000c38:	0020      	movs	r0, r4
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	4350      	muls	r0, r2
 8000c3e:	4374      	muls	r4, r6
 8000c40:	435a      	muls	r2, r3
 8000c42:	435e      	muls	r6, r3
 8000c44:	1912      	adds	r2, r2, r4
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	189b      	adds	r3, r3, r2
 8000c4a:	429c      	cmp	r4, r3
 8000c4c:	d903      	bls.n	8000c56 <__aeabi_fmul+0x10e>
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	4694      	mov	ip, r2
 8000c54:	4466      	add	r6, ip
 8000c56:	0400      	lsls	r0, r0, #16
 8000c58:	041a      	lsls	r2, r3, #16
 8000c5a:	0c00      	lsrs	r0, r0, #16
 8000c5c:	1812      	adds	r2, r2, r0
 8000c5e:	0194      	lsls	r4, r2, #6
 8000c60:	1e60      	subs	r0, r4, #1
 8000c62:	4184      	sbcs	r4, r0
 8000c64:	0c1b      	lsrs	r3, r3, #16
 8000c66:	0e92      	lsrs	r2, r2, #26
 8000c68:	199b      	adds	r3, r3, r6
 8000c6a:	4314      	orrs	r4, r2
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	d572      	bpl.n	8000d5a <__aeabi_fmul+0x212>
 8000c74:	2001      	movs	r0, #1
 8000c76:	0863      	lsrs	r3, r4, #1
 8000c78:	4004      	ands	r4, r0
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	0008      	movs	r0, r1
 8000c7e:	307f      	adds	r0, #127	; 0x7f
 8000c80:	2800      	cmp	r0, #0
 8000c82:	dd3c      	ble.n	8000cfe <__aeabi_fmul+0x1b6>
 8000c84:	0763      	lsls	r3, r4, #29
 8000c86:	d004      	beq.n	8000c92 <__aeabi_fmul+0x14a>
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x14a>
 8000c90:	3404      	adds	r4, #4
 8000c92:	0123      	lsls	r3, r4, #4
 8000c94:	d503      	bpl.n	8000c9e <__aeabi_fmul+0x156>
 8000c96:	3180      	adds	r1, #128	; 0x80
 8000c98:	0008      	movs	r0, r1
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <__aeabi_fmul+0x230>)
 8000c9c:	401c      	ands	r4, r3
 8000c9e:	28fe      	cmp	r0, #254	; 0xfe
 8000ca0:	dcc0      	bgt.n	8000c24 <__aeabi_fmul+0xdc>
 8000ca2:	01a4      	lsls	r4, r4, #6
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	b2c0      	uxtb	r0, r0
 8000ca8:	e79a      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000caa:	0037      	movs	r7, r6
 8000cac:	e78e      	b.n	8000bcc <__aeabi_fmul+0x84>
 8000cae:	4652      	mov	r2, sl
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e771      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000cba:	4648      	mov	r0, r9
 8000cbc:	f001 fb24 	bl	8002308 <__clzsi2>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1f43      	subs	r3, r0, #5
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	1a2d      	subs	r5, r5, r0
 8000cc8:	4691      	mov	r9, r2
 8000cca:	2000      	movs	r0, #0
 8000ccc:	3d76      	subs	r5, #118	; 0x76
 8000cce:	e766      	b.n	8000b9e <__aeabi_fmul+0x56>
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b09      	subs	r3, #9
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e74d      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f001 fb13 	bl	8002308 <__clzsi2>
 8000ce2:	2576      	movs	r5, #118	; 0x76
 8000ce4:	1f43      	subs	r3, r0, #5
 8000ce6:	409c      	lsls	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	426d      	negs	r5, r5
 8000cec:	469a      	mov	sl, r3
 8000cee:	469b      	mov	fp, r3
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	e741      	b.n	8000b78 <__aeabi_fmul+0x30>
 8000cf4:	2480      	movs	r4, #128	; 0x80
 8000cf6:	2700      	movs	r7, #0
 8000cf8:	20ff      	movs	r0, #255	; 0xff
 8000cfa:	03e4      	lsls	r4, r4, #15
 8000cfc:	e770      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	2b1b      	cmp	r3, #27
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fmul+0x1c0>
 8000d06:	e769      	b.n	8000bdc <__aeabi_fmul+0x94>
 8000d08:	319e      	adds	r1, #158	; 0x9e
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	408c      	lsls	r4, r1
 8000d0e:	40d8      	lsrs	r0, r3
 8000d10:	1e63      	subs	r3, r4, #1
 8000d12:	419c      	sbcs	r4, r3
 8000d14:	4304      	orrs	r4, r0
 8000d16:	0763      	lsls	r3, r4, #29
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fmul+0x1dc>
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	4023      	ands	r3, r4
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d000      	beq.n	8000d24 <__aeabi_fmul+0x1dc>
 8000d22:	3404      	adds	r4, #4
 8000d24:	0163      	lsls	r3, r4, #5
 8000d26:	d51a      	bpl.n	8000d5e <__aeabi_fmul+0x216>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	e758      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	03c0      	lsls	r0, r0, #15
 8000d32:	4204      	tst	r4, r0
 8000d34:	d009      	beq.n	8000d4a <__aeabi_fmul+0x202>
 8000d36:	464b      	mov	r3, r9
 8000d38:	4203      	tst	r3, r0
 8000d3a:	d106      	bne.n	8000d4a <__aeabi_fmul+0x202>
 8000d3c:	464c      	mov	r4, r9
 8000d3e:	4304      	orrs	r4, r0
 8000d40:	0264      	lsls	r4, r4, #9
 8000d42:	4647      	mov	r7, r8
 8000d44:	20ff      	movs	r0, #255	; 0xff
 8000d46:	0a64      	lsrs	r4, r4, #9
 8000d48:	e74a      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d4a:	2080      	movs	r0, #128	; 0x80
 8000d4c:	03c0      	lsls	r0, r0, #15
 8000d4e:	4304      	orrs	r4, r0
 8000d50:	0264      	lsls	r4, r4, #9
 8000d52:	0037      	movs	r7, r6
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	0a64      	lsrs	r4, r4, #9
 8000d58:	e742      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d5a:	0029      	movs	r1, r5
 8000d5c:	e78e      	b.n	8000c7c <__aeabi_fmul+0x134>
 8000d5e:	01a4      	lsls	r4, r4, #6
 8000d60:	2000      	movs	r0, #0
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	e73c      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	03c0      	lsls	r0, r0, #15
 8000d6a:	4304      	orrs	r4, r0
 8000d6c:	0264      	lsls	r4, r4, #9
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	0a64      	lsrs	r4, r4, #9
 8000d72:	e735      	b.n	8000be0 <__aeabi_fmul+0x98>
 8000d74:	080097f8 	.word	0x080097f8
 8000d78:	f7ffffff 	.word	0xf7ffffff

08000d7c <__aeabi_fsub>:
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	4646      	mov	r6, r8
 8000d80:	46d6      	mov	lr, sl
 8000d82:	464f      	mov	r7, r9
 8000d84:	0243      	lsls	r3, r0, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	00da      	lsls	r2, r3, #3
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	024a      	lsls	r2, r1, #9
 8000d8e:	b5c0      	push	{r6, r7, lr}
 8000d90:	0044      	lsls	r4, r0, #1
 8000d92:	0a56      	lsrs	r6, r2, #9
 8000d94:	1c05      	adds	r5, r0, #0
 8000d96:	46b0      	mov	r8, r6
 8000d98:	0e24      	lsrs	r4, r4, #24
 8000d9a:	004e      	lsls	r6, r1, #1
 8000d9c:	0992      	lsrs	r2, r2, #6
 8000d9e:	001f      	movs	r7, r3
 8000da0:	0020      	movs	r0, r4
 8000da2:	4692      	mov	sl, r2
 8000da4:	0fed      	lsrs	r5, r5, #31
 8000da6:	0e36      	lsrs	r6, r6, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2eff      	cmp	r6, #255	; 0xff
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x34>
 8000dae:	e07f      	b.n	8000eb0 <__aeabi_fsub+0x134>
 8000db0:	2201      	movs	r2, #1
 8000db2:	4051      	eors	r1, r2
 8000db4:	428d      	cmp	r5, r1
 8000db6:	d051      	beq.n	8000e5c <__aeabi_fsub+0xe0>
 8000db8:	1ba2      	subs	r2, r4, r6
 8000dba:	4691      	mov	r9, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	dc00      	bgt.n	8000dc2 <__aeabi_fsub+0x46>
 8000dc0:	e07e      	b.n	8000ec0 <__aeabi_fsub+0x144>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x4c>
 8000dc6:	e099      	b.n	8000efc <__aeabi_fsub+0x180>
 8000dc8:	2cff      	cmp	r4, #255	; 0xff
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x52>
 8000dcc:	e08c      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	04db      	lsls	r3, r3, #19
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	464a      	mov	r2, r9
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2a1b      	cmp	r2, #27
 8000dde:	dc08      	bgt.n	8000df2 <__aeabi_fsub+0x76>
 8000de0:	4653      	mov	r3, sl
 8000de2:	2120      	movs	r1, #32
 8000de4:	40d3      	lsrs	r3, r2
 8000de6:	1a89      	subs	r1, r1, r2
 8000de8:	4652      	mov	r2, sl
 8000dea:	408a      	lsls	r2, r1
 8000dec:	1e51      	subs	r1, r2, #1
 8000dee:	418a      	sbcs	r2, r1
 8000df0:	4313      	orrs	r3, r2
 8000df2:	4662      	mov	r2, ip
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	015a      	lsls	r2, r3, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0x80>
 8000dfa:	e0f3      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8000dfc:	019b      	lsls	r3, r3, #6
 8000dfe:	099e      	lsrs	r6, r3, #6
 8000e00:	0030      	movs	r0, r6
 8000e02:	f001 fa81 	bl	8002308 <__clzsi2>
 8000e06:	3805      	subs	r0, #5
 8000e08:	4086      	lsls	r6, r0
 8000e0a:	4284      	cmp	r4, r0
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_fsub+0x94>
 8000e0e:	e0f7      	b.n	8001000 <__aeabi_fsub+0x284>
 8000e10:	0032      	movs	r2, r6
 8000e12:	1b04      	subs	r4, r0, r4
 8000e14:	2020      	movs	r0, #32
 8000e16:	3401      	adds	r4, #1
 8000e18:	40e2      	lsrs	r2, r4
 8000e1a:	1b04      	subs	r4, r0, r4
 8000e1c:	40a6      	lsls	r6, r4
 8000e1e:	0033      	movs	r3, r6
 8000e20:	1e5e      	subs	r6, r3, #1
 8000e22:	41b3      	sbcs	r3, r6
 8000e24:	2400      	movs	r4, #0
 8000e26:	4313      	orrs	r3, r2
 8000e28:	075a      	lsls	r2, r3, #29
 8000e2a:	d004      	beq.n	8000e36 <__aeabi_fsub+0xba>
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2a04      	cmp	r2, #4
 8000e32:	d000      	beq.n	8000e36 <__aeabi_fsub+0xba>
 8000e34:	3304      	adds	r3, #4
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0xc0>
 8000e3a:	e0d6      	b.n	8000fea <__aeabi_fsub+0x26e>
 8000e3c:	1c62      	adds	r2, r4, #1
 8000e3e:	2cfe      	cmp	r4, #254	; 0xfe
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0xc8>
 8000e42:	e0da      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	0a5f      	lsrs	r7, r3, #9
 8000e48:	b2d0      	uxtb	r0, r2
 8000e4a:	05c0      	lsls	r0, r0, #23
 8000e4c:	4338      	orrs	r0, r7
 8000e4e:	07ed      	lsls	r5, r5, #31
 8000e50:	4328      	orrs	r0, r5
 8000e52:	bce0      	pop	{r5, r6, r7}
 8000e54:	46ba      	mov	sl, r7
 8000e56:	46b1      	mov	r9, r6
 8000e58:	46a8      	mov	r8, r5
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5c:	1ba2      	subs	r2, r4, r6
 8000e5e:	4691      	mov	r9, r2
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dd63      	ble.n	8000f2c <__aeabi_fsub+0x1b0>
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0xee>
 8000e68:	e099      	b.n	8000f9e <__aeabi_fsub+0x222>
 8000e6a:	2cff      	cmp	r4, #255	; 0xff
 8000e6c:	d03c      	beq.n	8000ee8 <__aeabi_fsub+0x16c>
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	4652      	mov	r2, sl
 8000e72:	04db      	lsls	r3, r3, #19
 8000e74:	431a      	orrs	r2, r3
 8000e76:	4692      	mov	sl, r2
 8000e78:	464a      	mov	r2, r9
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2a1b      	cmp	r2, #27
 8000e7e:	dc08      	bgt.n	8000e92 <__aeabi_fsub+0x116>
 8000e80:	4653      	mov	r3, sl
 8000e82:	2120      	movs	r1, #32
 8000e84:	40d3      	lsrs	r3, r2
 8000e86:	1a89      	subs	r1, r1, r2
 8000e88:	4652      	mov	r2, sl
 8000e8a:	408a      	lsls	r2, r1
 8000e8c:	1e51      	subs	r1, r2, #1
 8000e8e:	418a      	sbcs	r2, r1
 8000e90:	4313      	orrs	r3, r2
 8000e92:	4463      	add	r3, ip
 8000e94:	015a      	lsls	r2, r3, #5
 8000e96:	d400      	bmi.n	8000e9a <__aeabi_fsub+0x11e>
 8000e98:	e0a4      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	2cff      	cmp	r4, #255	; 0xff
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x126>
 8000ea0:	e0ab      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4997      	ldr	r1, [pc, #604]	; (8001104 <__aeabi_fsub+0x388>)
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	400b      	ands	r3, r1
 8000eac:	4313      	orrs	r3, r2
 8000eae:	e7bb      	b.n	8000e28 <__aeabi_fsub+0xac>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d032      	beq.n	8000f1a <__aeabi_fsub+0x19e>
 8000eb4:	428d      	cmp	r5, r1
 8000eb6:	d035      	beq.n	8000f24 <__aeabi_fsub+0x1a8>
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	4252      	negs	r2, r2
 8000ebc:	4691      	mov	r9, r2
 8000ebe:	44a1      	add	r9, r4
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	d051      	beq.n	8000f6a <__aeabi_fsub+0x1ee>
 8000ec6:	1b30      	subs	r0, r6, r4
 8000ec8:	2c00      	cmp	r4, #0
 8000eca:	d000      	beq.n	8000ece <__aeabi_fsub+0x152>
 8000ecc:	e09c      	b.n	8001008 <__aeabi_fsub+0x28c>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x15a>
 8000ed4:	e0df      	b.n	8001096 <__aeabi_fsub+0x31a>
 8000ed6:	3801      	subs	r0, #1
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x162>
 8000edc:	e0f7      	b.n	80010ce <__aeabi_fsub+0x352>
 8000ede:	2eff      	cmp	r6, #255	; 0xff
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x168>
 8000ee2:	e099      	b.n	8001018 <__aeabi_fsub+0x29c>
 8000ee4:	000d      	movs	r5, r1
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0x172>
 8000eec:	e085      	b.n	8000ffa <__aeabi_fsub+0x27e>
 8000eee:	2780      	movs	r7, #128	; 0x80
 8000ef0:	03ff      	lsls	r7, r7, #15
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	027f      	lsls	r7, r7, #9
 8000ef6:	20ff      	movs	r0, #255	; 0xff
 8000ef8:	0a7f      	lsrs	r7, r7, #9
 8000efa:	e7a6      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000efc:	4652      	mov	r2, sl
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d074      	beq.n	8000fec <__aeabi_fsub+0x270>
 8000f02:	2201      	movs	r2, #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	4690      	mov	r8, r2
 8000f08:	44c1      	add	r9, r8
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x196>
 8000f10:	e0c8      	b.n	80010a4 <__aeabi_fsub+0x328>
 8000f12:	2cff      	cmp	r4, #255	; 0xff
 8000f14:	d000      	beq.n	8000f18 <__aeabi_fsub+0x19c>
 8000f16:	e75f      	b.n	8000dd8 <__aeabi_fsub+0x5c>
 8000f18:	e7e6      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4051      	eors	r1, r2
 8000f1e:	42a9      	cmp	r1, r5
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x1a8>
 8000f22:	e749      	b.n	8000db8 <__aeabi_fsub+0x3c>
 8000f24:	22ff      	movs	r2, #255	; 0xff
 8000f26:	4252      	negs	r2, r2
 8000f28:	4691      	mov	r9, r2
 8000f2a:	44a1      	add	r9, r4
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d043      	beq.n	8000fba <__aeabi_fsub+0x23e>
 8000f32:	1b31      	subs	r1, r6, r4
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x1be>
 8000f38:	e08c      	b.n	8001054 <__aeabi_fsub+0x2d8>
 8000f3a:	2eff      	cmp	r6, #255	; 0xff
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x1c4>
 8000f3e:	e092      	b.n	8001066 <__aeabi_fsub+0x2ea>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4662      	mov	r2, ip
 8000f44:	04db      	lsls	r3, r3, #19
 8000f46:	431a      	orrs	r2, r3
 8000f48:	4694      	mov	ip, r2
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	291b      	cmp	r1, #27
 8000f4e:	dc09      	bgt.n	8000f64 <__aeabi_fsub+0x1e8>
 8000f50:	2020      	movs	r0, #32
 8000f52:	4663      	mov	r3, ip
 8000f54:	4662      	mov	r2, ip
 8000f56:	40cb      	lsrs	r3, r1
 8000f58:	1a41      	subs	r1, r0, r1
 8000f5a:	408a      	lsls	r2, r1
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	1e48      	subs	r0, r1, #1
 8000f60:	4181      	sbcs	r1, r0
 8000f62:	430b      	orrs	r3, r1
 8000f64:	0034      	movs	r4, r6
 8000f66:	4453      	add	r3, sl
 8000f68:	e794      	b.n	8000e94 <__aeabi_fsub+0x118>
 8000f6a:	22fe      	movs	r2, #254	; 0xfe
 8000f6c:	1c66      	adds	r6, r4, #1
 8000f6e:	4232      	tst	r2, r6
 8000f70:	d164      	bne.n	800103c <__aeabi_fsub+0x2c0>
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0x1fc>
 8000f76:	e082      	b.n	800107e <__aeabi_fsub+0x302>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x204>
 8000f7e:	e0ab      	b.n	80010d8 <__aeabi_fsub+0x35c>
 8000f80:	4653      	mov	r3, sl
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x20c>
 8000f86:	e760      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000f88:	4663      	mov	r3, ip
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_fsub+0x218>
 8000f92:	e0aa      	b.n	80010ea <__aeabi_fsub+0x36e>
 8000f94:	4663      	mov	r3, ip
 8000f96:	4652      	mov	r2, sl
 8000f98:	000d      	movs	r5, r1
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	e744      	b.n	8000e28 <__aeabi_fsub+0xac>
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d023      	beq.n	8000fec <__aeabi_fsub+0x270>
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4252      	negs	r2, r2
 8000fa8:	4690      	mov	r8, r2
 8000faa:	44c1      	add	r9, r8
 8000fac:	464a      	mov	r2, r9
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d075      	beq.n	800109e <__aeabi_fsub+0x322>
 8000fb2:	2cff      	cmp	r4, #255	; 0xff
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x23c>
 8000fb6:	e75f      	b.n	8000e78 <__aeabi_fsub+0xfc>
 8000fb8:	e796      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000fba:	26fe      	movs	r6, #254	; 0xfe
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	4226      	tst	r6, r4
 8000fc0:	d153      	bne.n	800106a <__aeabi_fsub+0x2ee>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d172      	bne.n	80010ac <__aeabi_fsub+0x330>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x252>
 8000fcc:	e093      	b.n	80010f6 <__aeabi_fsub+0x37a>
 8000fce:	4653      	mov	r3, sl
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x25a>
 8000fd4:	e739      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000fd6:	4463      	add	r3, ip
 8000fd8:	2400      	movs	r4, #0
 8000fda:	015a      	lsls	r2, r3, #5
 8000fdc:	d502      	bpl.n	8000fe4 <__aeabi_fsub+0x268>
 8000fde:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <__aeabi_fsub+0x38c>)
 8000fe0:	3401      	adds	r4, #1
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	075a      	lsls	r2, r3, #29
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x26e>
 8000fe8:	e720      	b.n	8000e2c <__aeabi_fsub+0xb0>
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	2cff      	cmp	r4, #255	; 0xff
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x276>
 8000ff0:	e77a      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	0a5f      	lsrs	r7, r3, #9
 8000ff6:	b2e0      	uxtb	r0, r4
 8000ff8:	e727      	b.n	8000e4a <__aeabi_fsub+0xce>
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	2700      	movs	r7, #0
 8000ffe:	e724      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <__aeabi_fsub+0x38c>)
 8001002:	1a24      	subs	r4, r4, r0
 8001004:	4033      	ands	r3, r6
 8001006:	e70f      	b.n	8000e28 <__aeabi_fsub+0xac>
 8001008:	2eff      	cmp	r6, #255	; 0xff
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x292>
 800100c:	e76a      	b.n	8000ee4 <__aeabi_fsub+0x168>
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	4662      	mov	r2, ip
 8001012:	04db      	lsls	r3, r3, #19
 8001014:	431a      	orrs	r2, r3
 8001016:	4694      	mov	ip, r2
 8001018:	2301      	movs	r3, #1
 800101a:	281b      	cmp	r0, #27
 800101c:	dc09      	bgt.n	8001032 <__aeabi_fsub+0x2b6>
 800101e:	2420      	movs	r4, #32
 8001020:	4663      	mov	r3, ip
 8001022:	4662      	mov	r2, ip
 8001024:	40c3      	lsrs	r3, r0
 8001026:	1a20      	subs	r0, r4, r0
 8001028:	4082      	lsls	r2, r0
 800102a:	0010      	movs	r0, r2
 800102c:	1e44      	subs	r4, r0, #1
 800102e:	41a0      	sbcs	r0, r4
 8001030:	4303      	orrs	r3, r0
 8001032:	4652      	mov	r2, sl
 8001034:	000d      	movs	r5, r1
 8001036:	0034      	movs	r4, r6
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	e6dc      	b.n	8000df6 <__aeabi_fsub+0x7a>
 800103c:	4663      	mov	r3, ip
 800103e:	4652      	mov	r2, sl
 8001040:	1a9e      	subs	r6, r3, r2
 8001042:	0173      	lsls	r3, r6, #5
 8001044:	d417      	bmi.n	8001076 <__aeabi_fsub+0x2fa>
 8001046:	2e00      	cmp	r6, #0
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x2d0>
 800104a:	e6d9      	b.n	8000e00 <__aeabi_fsub+0x84>
 800104c:	2500      	movs	r5, #0
 800104e:	2000      	movs	r0, #0
 8001050:	2700      	movs	r7, #0
 8001052:	e6fa      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001054:	4663      	mov	r3, ip
 8001056:	2b00      	cmp	r3, #0
 8001058:	d044      	beq.n	80010e4 <__aeabi_fsub+0x368>
 800105a:	3901      	subs	r1, #1
 800105c:	2900      	cmp	r1, #0
 800105e:	d04c      	beq.n	80010fa <__aeabi_fsub+0x37e>
 8001060:	2eff      	cmp	r6, #255	; 0xff
 8001062:	d000      	beq.n	8001066 <__aeabi_fsub+0x2ea>
 8001064:	e771      	b.n	8000f4a <__aeabi_fsub+0x1ce>
 8001066:	4643      	mov	r3, r8
 8001068:	e73e      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 800106a:	2cff      	cmp	r4, #255	; 0xff
 800106c:	d0c5      	beq.n	8000ffa <__aeabi_fsub+0x27e>
 800106e:	4652      	mov	r2, sl
 8001070:	4462      	add	r2, ip
 8001072:	0853      	lsrs	r3, r2, #1
 8001074:	e7b6      	b.n	8000fe4 <__aeabi_fsub+0x268>
 8001076:	4663      	mov	r3, ip
 8001078:	000d      	movs	r5, r1
 800107a:	1ad6      	subs	r6, r2, r3
 800107c:	e6c0      	b.n	8000e00 <__aeabi_fsub+0x84>
 800107e:	4662      	mov	r2, ip
 8001080:	2a00      	cmp	r2, #0
 8001082:	d116      	bne.n	80010b2 <__aeabi_fsub+0x336>
 8001084:	4653      	mov	r3, sl
 8001086:	2b00      	cmp	r3, #0
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x310>
 800108a:	e72b      	b.n	8000ee4 <__aeabi_fsub+0x168>
 800108c:	2780      	movs	r7, #128	; 0x80
 800108e:	2500      	movs	r5, #0
 8001090:	20ff      	movs	r0, #255	; 0xff
 8001092:	03ff      	lsls	r7, r7, #15
 8001094:	e6d9      	b.n	8000e4a <__aeabi_fsub+0xce>
 8001096:	000d      	movs	r5, r1
 8001098:	4643      	mov	r3, r8
 800109a:	0034      	movs	r4, r6
 800109c:	e7a6      	b.n	8000fec <__aeabi_fsub+0x270>
 800109e:	4653      	mov	r3, sl
 80010a0:	4463      	add	r3, ip
 80010a2:	e6f7      	b.n	8000e94 <__aeabi_fsub+0x118>
 80010a4:	4663      	mov	r3, ip
 80010a6:	4652      	mov	r2, sl
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	e6a4      	b.n	8000df6 <__aeabi_fsub+0x7a>
 80010ac:	4662      	mov	r2, ip
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d0d9      	beq.n	8001066 <__aeabi_fsub+0x2ea>
 80010b2:	4652      	mov	r2, sl
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x33e>
 80010b8:	e716      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	03d2      	lsls	r2, r2, #15
 80010be:	4213      	tst	r3, r2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x348>
 80010c2:	e711      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010c4:	4640      	mov	r0, r8
 80010c6:	4210      	tst	r0, r2
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x350>
 80010ca:	e70d      	b.n	8000ee8 <__aeabi_fsub+0x16c>
 80010cc:	e70a      	b.n	8000ee4 <__aeabi_fsub+0x168>
 80010ce:	4652      	mov	r2, sl
 80010d0:	000d      	movs	r5, r1
 80010d2:	0034      	movs	r4, r6
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	e68e      	b.n	8000df6 <__aeabi_fsub+0x7a>
 80010d8:	4653      	mov	r3, sl
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d008      	beq.n	80010f0 <__aeabi_fsub+0x374>
 80010de:	000d      	movs	r5, r1
 80010e0:	4647      	mov	r7, r8
 80010e2:	e6b2      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010e4:	4643      	mov	r3, r8
 80010e6:	0034      	movs	r4, r6
 80010e8:	e780      	b.n	8000fec <__aeabi_fsub+0x270>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d000      	beq.n	80010f0 <__aeabi_fsub+0x374>
 80010ee:	e779      	b.n	8000fe4 <__aeabi_fsub+0x268>
 80010f0:	2500      	movs	r5, #0
 80010f2:	2700      	movs	r7, #0
 80010f4:	e6a9      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010f6:	4647      	mov	r7, r8
 80010f8:	e6a7      	b.n	8000e4a <__aeabi_fsub+0xce>
 80010fa:	4653      	mov	r3, sl
 80010fc:	0034      	movs	r4, r6
 80010fe:	4463      	add	r3, ip
 8001100:	e6c8      	b.n	8000e94 <__aeabi_fsub+0x118>
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	7dffffff 	.word	0x7dffffff
 8001108:	fbffffff 	.word	0xfbffffff

0800110c <__aeabi_f2iz>:
 800110c:	0241      	lsls	r1, r0, #9
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0fc3      	lsrs	r3, r0, #31
 8001112:	0a49      	lsrs	r1, r1, #9
 8001114:	2000      	movs	r0, #0
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	2a7e      	cmp	r2, #126	; 0x7e
 800111a:	d903      	bls.n	8001124 <__aeabi_f2iz+0x18>
 800111c:	2a9d      	cmp	r2, #157	; 0x9d
 800111e:	d902      	bls.n	8001126 <__aeabi_f2iz+0x1a>
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <__aeabi_f2iz+0x3c>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	2080      	movs	r0, #128	; 0x80
 8001128:	0400      	lsls	r0, r0, #16
 800112a:	4301      	orrs	r1, r0
 800112c:	2a95      	cmp	r2, #149	; 0x95
 800112e:	dc07      	bgt.n	8001140 <__aeabi_f2iz+0x34>
 8001130:	2096      	movs	r0, #150	; 0x96
 8001132:	1a82      	subs	r2, r0, r2
 8001134:	40d1      	lsrs	r1, r2
 8001136:	4248      	negs	r0, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <__aeabi_f2iz+0x18>
 800113c:	0008      	movs	r0, r1
 800113e:	e7f1      	b.n	8001124 <__aeabi_f2iz+0x18>
 8001140:	3a96      	subs	r2, #150	; 0x96
 8001142:	4091      	lsls	r1, r2
 8001144:	e7f7      	b.n	8001136 <__aeabi_f2iz+0x2a>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	7fffffff 	.word	0x7fffffff

0800114c <__aeabi_i2f>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	2800      	cmp	r0, #0
 8001150:	d013      	beq.n	800117a <__aeabi_i2f+0x2e>
 8001152:	17c3      	asrs	r3, r0, #31
 8001154:	18c5      	adds	r5, r0, r3
 8001156:	405d      	eors	r5, r3
 8001158:	0fc4      	lsrs	r4, r0, #31
 800115a:	0028      	movs	r0, r5
 800115c:	f001 f8d4 	bl	8002308 <__clzsi2>
 8001160:	239e      	movs	r3, #158	; 0x9e
 8001162:	0001      	movs	r1, r0
 8001164:	1a1b      	subs	r3, r3, r0
 8001166:	2b96      	cmp	r3, #150	; 0x96
 8001168:	dc0f      	bgt.n	800118a <__aeabi_i2f+0x3e>
 800116a:	2808      	cmp	r0, #8
 800116c:	dd01      	ble.n	8001172 <__aeabi_i2f+0x26>
 800116e:	3908      	subs	r1, #8
 8001170:	408d      	lsls	r5, r1
 8001172:	026d      	lsls	r5, r5, #9
 8001174:	0a6d      	lsrs	r5, r5, #9
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	e002      	b.n	8001180 <__aeabi_i2f+0x34>
 800117a:	2400      	movs	r4, #0
 800117c:	2000      	movs	r0, #0
 800117e:	2500      	movs	r5, #0
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	4328      	orrs	r0, r5
 8001184:	07e4      	lsls	r4, r4, #31
 8001186:	4320      	orrs	r0, r4
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	2b99      	cmp	r3, #153	; 0x99
 800118c:	dd0b      	ble.n	80011a6 <__aeabi_i2f+0x5a>
 800118e:	2205      	movs	r2, #5
 8001190:	002e      	movs	r6, r5
 8001192:	1a12      	subs	r2, r2, r0
 8001194:	40d6      	lsrs	r6, r2
 8001196:	0002      	movs	r2, r0
 8001198:	321b      	adds	r2, #27
 800119a:	4095      	lsls	r5, r2
 800119c:	0028      	movs	r0, r5
 800119e:	1e45      	subs	r5, r0, #1
 80011a0:	41a8      	sbcs	r0, r5
 80011a2:	0035      	movs	r5, r6
 80011a4:	4305      	orrs	r5, r0
 80011a6:	2905      	cmp	r1, #5
 80011a8:	dd01      	ble.n	80011ae <__aeabi_i2f+0x62>
 80011aa:	1f4a      	subs	r2, r1, #5
 80011ac:	4095      	lsls	r5, r2
 80011ae:	002a      	movs	r2, r5
 80011b0:	4e08      	ldr	r6, [pc, #32]	; (80011d4 <__aeabi_i2f+0x88>)
 80011b2:	4032      	ands	r2, r6
 80011b4:	0768      	lsls	r0, r5, #29
 80011b6:	d009      	beq.n	80011cc <__aeabi_i2f+0x80>
 80011b8:	200f      	movs	r0, #15
 80011ba:	4028      	ands	r0, r5
 80011bc:	2804      	cmp	r0, #4
 80011be:	d005      	beq.n	80011cc <__aeabi_i2f+0x80>
 80011c0:	3204      	adds	r2, #4
 80011c2:	0150      	lsls	r0, r2, #5
 80011c4:	d502      	bpl.n	80011cc <__aeabi_i2f+0x80>
 80011c6:	239f      	movs	r3, #159	; 0x9f
 80011c8:	4032      	ands	r2, r6
 80011ca:	1a5b      	subs	r3, r3, r1
 80011cc:	0192      	lsls	r2, r2, #6
 80011ce:	0a55      	lsrs	r5, r2, #9
 80011d0:	b2d8      	uxtb	r0, r3
 80011d2:	e7d5      	b.n	8001180 <__aeabi_i2f+0x34>
 80011d4:	fbffffff 	.word	0xfbffffff

080011d8 <__aeabi_ui2f>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	1e05      	subs	r5, r0, #0
 80011dc:	d00e      	beq.n	80011fc <__aeabi_ui2f+0x24>
 80011de:	f001 f893 	bl	8002308 <__clzsi2>
 80011e2:	239e      	movs	r3, #158	; 0x9e
 80011e4:	0004      	movs	r4, r0
 80011e6:	1a1b      	subs	r3, r3, r0
 80011e8:	2b96      	cmp	r3, #150	; 0x96
 80011ea:	dc0c      	bgt.n	8001206 <__aeabi_ui2f+0x2e>
 80011ec:	2808      	cmp	r0, #8
 80011ee:	dd01      	ble.n	80011f4 <__aeabi_ui2f+0x1c>
 80011f0:	3c08      	subs	r4, #8
 80011f2:	40a5      	lsls	r5, r4
 80011f4:	026d      	lsls	r5, r5, #9
 80011f6:	0a6d      	lsrs	r5, r5, #9
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	e001      	b.n	8001200 <__aeabi_ui2f+0x28>
 80011fc:	2000      	movs	r0, #0
 80011fe:	2500      	movs	r5, #0
 8001200:	05c0      	lsls	r0, r0, #23
 8001202:	4328      	orrs	r0, r5
 8001204:	bd70      	pop	{r4, r5, r6, pc}
 8001206:	2b99      	cmp	r3, #153	; 0x99
 8001208:	dd09      	ble.n	800121e <__aeabi_ui2f+0x46>
 800120a:	0002      	movs	r2, r0
 800120c:	0029      	movs	r1, r5
 800120e:	321b      	adds	r2, #27
 8001210:	4091      	lsls	r1, r2
 8001212:	1e4a      	subs	r2, r1, #1
 8001214:	4191      	sbcs	r1, r2
 8001216:	2205      	movs	r2, #5
 8001218:	1a12      	subs	r2, r2, r0
 800121a:	40d5      	lsrs	r5, r2
 800121c:	430d      	orrs	r5, r1
 800121e:	2c05      	cmp	r4, #5
 8001220:	dd01      	ble.n	8001226 <__aeabi_ui2f+0x4e>
 8001222:	1f62      	subs	r2, r4, #5
 8001224:	4095      	lsls	r5, r2
 8001226:	0029      	movs	r1, r5
 8001228:	4e08      	ldr	r6, [pc, #32]	; (800124c <__aeabi_ui2f+0x74>)
 800122a:	4031      	ands	r1, r6
 800122c:	076a      	lsls	r2, r5, #29
 800122e:	d009      	beq.n	8001244 <__aeabi_ui2f+0x6c>
 8001230:	200f      	movs	r0, #15
 8001232:	4028      	ands	r0, r5
 8001234:	2804      	cmp	r0, #4
 8001236:	d005      	beq.n	8001244 <__aeabi_ui2f+0x6c>
 8001238:	3104      	adds	r1, #4
 800123a:	014a      	lsls	r2, r1, #5
 800123c:	d502      	bpl.n	8001244 <__aeabi_ui2f+0x6c>
 800123e:	239f      	movs	r3, #159	; 0x9f
 8001240:	4031      	ands	r1, r6
 8001242:	1b1b      	subs	r3, r3, r4
 8001244:	0189      	lsls	r1, r1, #6
 8001246:	0a4d      	lsrs	r5, r1, #9
 8001248:	b2d8      	uxtb	r0, r3
 800124a:	e7d9      	b.n	8001200 <__aeabi_ui2f+0x28>
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_dadd>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	464f      	mov	r7, r9
 8001254:	46d6      	mov	lr, sl
 8001256:	4646      	mov	r6, r8
 8001258:	000d      	movs	r5, r1
 800125a:	0001      	movs	r1, r0
 800125c:	0018      	movs	r0, r3
 800125e:	b5c0      	push	{r6, r7, lr}
 8001260:	0017      	movs	r7, r2
 8001262:	032b      	lsls	r3, r5, #12
 8001264:	0a5a      	lsrs	r2, r3, #9
 8001266:	0f4b      	lsrs	r3, r1, #29
 8001268:	4313      	orrs	r3, r2
 800126a:	00ca      	lsls	r2, r1, #3
 800126c:	4691      	mov	r9, r2
 800126e:	0302      	lsls	r2, r0, #12
 8001270:	006e      	lsls	r6, r5, #1
 8001272:	0041      	lsls	r1, r0, #1
 8001274:	0a52      	lsrs	r2, r2, #9
 8001276:	0fec      	lsrs	r4, r5, #31
 8001278:	0f7d      	lsrs	r5, r7, #29
 800127a:	4315      	orrs	r5, r2
 800127c:	0d76      	lsrs	r6, r6, #21
 800127e:	0d49      	lsrs	r1, r1, #21
 8001280:	0fc0      	lsrs	r0, r0, #31
 8001282:	4682      	mov	sl, r0
 8001284:	46ac      	mov	ip, r5
 8001286:	00ff      	lsls	r7, r7, #3
 8001288:	1a72      	subs	r2, r6, r1
 800128a:	4284      	cmp	r4, r0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x40>
 800128e:	e098      	b.n	80013c2 <__aeabi_dadd+0x172>
 8001290:	2a00      	cmp	r2, #0
 8001292:	dc00      	bgt.n	8001296 <__aeabi_dadd+0x46>
 8001294:	e081      	b.n	800139a <__aeabi_dadd+0x14a>
 8001296:	2900      	cmp	r1, #0
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x4c>
 800129a:	e0b6      	b.n	800140a <__aeabi_dadd+0x1ba>
 800129c:	49c9      	ldr	r1, [pc, #804]	; (80015c4 <__aeabi_dadd+0x374>)
 800129e:	428e      	cmp	r6, r1
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x54>
 80012a2:	e172      	b.n	800158a <__aeabi_dadd+0x33a>
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0028      	movs	r0, r5
 80012a8:	0409      	lsls	r1, r1, #16
 80012aa:	4308      	orrs	r0, r1
 80012ac:	4684      	mov	ip, r0
 80012ae:	2a38      	cmp	r2, #56	; 0x38
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dadd+0x64>
 80012b2:	e15e      	b.n	8001572 <__aeabi_dadd+0x322>
 80012b4:	2a1f      	cmp	r2, #31
 80012b6:	dd00      	ble.n	80012ba <__aeabi_dadd+0x6a>
 80012b8:	e1ee      	b.n	8001698 <__aeabi_dadd+0x448>
 80012ba:	2020      	movs	r0, #32
 80012bc:	0039      	movs	r1, r7
 80012be:	4665      	mov	r5, ip
 80012c0:	1a80      	subs	r0, r0, r2
 80012c2:	4087      	lsls	r7, r0
 80012c4:	40d1      	lsrs	r1, r2
 80012c6:	4085      	lsls	r5, r0
 80012c8:	430d      	orrs	r5, r1
 80012ca:	0039      	movs	r1, r7
 80012cc:	1e4f      	subs	r7, r1, #1
 80012ce:	41b9      	sbcs	r1, r7
 80012d0:	4667      	mov	r7, ip
 80012d2:	40d7      	lsrs	r7, r2
 80012d4:	4329      	orrs	r1, r5
 80012d6:	1bdb      	subs	r3, r3, r7
 80012d8:	464a      	mov	r2, r9
 80012da:	1a55      	subs	r5, r2, r1
 80012dc:	45a9      	cmp	r9, r5
 80012de:	4189      	sbcs	r1, r1
 80012e0:	4249      	negs	r1, r1
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	4698      	mov	r8, r3
 80012e6:	4643      	mov	r3, r8
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	d400      	bmi.n	80012ee <__aeabi_dadd+0x9e>
 80012ec:	e0cc      	b.n	8001488 <__aeabi_dadd+0x238>
 80012ee:	4643      	mov	r3, r8
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	0a5b      	lsrs	r3, r3, #9
 80012f4:	4698      	mov	r8, r3
 80012f6:	4643      	mov	r3, r8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0xae>
 80012fc:	e12c      	b.n	8001558 <__aeabi_dadd+0x308>
 80012fe:	4640      	mov	r0, r8
 8001300:	f001 f802 	bl	8002308 <__clzsi2>
 8001304:	0001      	movs	r1, r0
 8001306:	3908      	subs	r1, #8
 8001308:	2220      	movs	r2, #32
 800130a:	0028      	movs	r0, r5
 800130c:	4643      	mov	r3, r8
 800130e:	1a52      	subs	r2, r2, r1
 8001310:	408b      	lsls	r3, r1
 8001312:	40d0      	lsrs	r0, r2
 8001314:	408d      	lsls	r5, r1
 8001316:	4303      	orrs	r3, r0
 8001318:	428e      	cmp	r6, r1
 800131a:	dd00      	ble.n	800131e <__aeabi_dadd+0xce>
 800131c:	e117      	b.n	800154e <__aeabi_dadd+0x2fe>
 800131e:	1b8e      	subs	r6, r1, r6
 8001320:	1c72      	adds	r2, r6, #1
 8001322:	2a1f      	cmp	r2, #31
 8001324:	dd00      	ble.n	8001328 <__aeabi_dadd+0xd8>
 8001326:	e1a7      	b.n	8001678 <__aeabi_dadd+0x428>
 8001328:	2120      	movs	r1, #32
 800132a:	0018      	movs	r0, r3
 800132c:	002e      	movs	r6, r5
 800132e:	1a89      	subs	r1, r1, r2
 8001330:	408d      	lsls	r5, r1
 8001332:	4088      	lsls	r0, r1
 8001334:	40d6      	lsrs	r6, r2
 8001336:	40d3      	lsrs	r3, r2
 8001338:	1e69      	subs	r1, r5, #1
 800133a:	418d      	sbcs	r5, r1
 800133c:	4330      	orrs	r0, r6
 800133e:	4698      	mov	r8, r3
 8001340:	2600      	movs	r6, #0
 8001342:	4305      	orrs	r5, r0
 8001344:	076b      	lsls	r3, r5, #29
 8001346:	d009      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001348:	230f      	movs	r3, #15
 800134a:	402b      	ands	r3, r5
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001350:	1d2b      	adds	r3, r5, #4
 8001352:	42ab      	cmp	r3, r5
 8001354:	41ad      	sbcs	r5, r5
 8001356:	426d      	negs	r5, r5
 8001358:	44a8      	add	r8, r5
 800135a:	001d      	movs	r5, r3
 800135c:	4643      	mov	r3, r8
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	d400      	bmi.n	8001364 <__aeabi_dadd+0x114>
 8001362:	e094      	b.n	800148e <__aeabi_dadd+0x23e>
 8001364:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <__aeabi_dadd+0x374>)
 8001366:	1c72      	adds	r2, r6, #1
 8001368:	429a      	cmp	r2, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x11e>
 800136c:	e09d      	b.n	80014aa <__aeabi_dadd+0x25a>
 800136e:	4641      	mov	r1, r8
 8001370:	4b95      	ldr	r3, [pc, #596]	; (80015c8 <__aeabi_dadd+0x378>)
 8001372:	08ed      	lsrs	r5, r5, #3
 8001374:	4019      	ands	r1, r3
 8001376:	000b      	movs	r3, r1
 8001378:	0552      	lsls	r2, r2, #21
 800137a:	0749      	lsls	r1, r1, #29
 800137c:	025b      	lsls	r3, r3, #9
 800137e:	4329      	orrs	r1, r5
 8001380:	0b1b      	lsrs	r3, r3, #12
 8001382:	0d52      	lsrs	r2, r2, #21
 8001384:	0512      	lsls	r2, r2, #20
 8001386:	4313      	orrs	r3, r2
 8001388:	07e4      	lsls	r4, r4, #31
 800138a:	4323      	orrs	r3, r4
 800138c:	0008      	movs	r0, r1
 800138e:	0019      	movs	r1, r3
 8001390:	bce0      	pop	{r5, r6, r7}
 8001392:	46ba      	mov	sl, r7
 8001394:	46b1      	mov	r9, r6
 8001396:	46a8      	mov	r8, r5
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2a00      	cmp	r2, #0
 800139c:	d043      	beq.n	8001426 <__aeabi_dadd+0x1d6>
 800139e:	1b8a      	subs	r2, r1, r6
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dadd+0x156>
 80013a4:	e12a      	b.n	80015fc <__aeabi_dadd+0x3ac>
 80013a6:	464c      	mov	r4, r9
 80013a8:	431c      	orrs	r4, r3
 80013aa:	d100      	bne.n	80013ae <__aeabi_dadd+0x15e>
 80013ac:	e1d1      	b.n	8001752 <__aeabi_dadd+0x502>
 80013ae:	1e54      	subs	r4, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x166>
 80013b4:	e21f      	b.n	80017f6 <__aeabi_dadd+0x5a6>
 80013b6:	4d83      	ldr	r5, [pc, #524]	; (80015c4 <__aeabi_dadd+0x374>)
 80013b8:	42aa      	cmp	r2, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x16e>
 80013bc:	e272      	b.n	80018a4 <__aeabi_dadd+0x654>
 80013be:	0022      	movs	r2, r4
 80013c0:	e123      	b.n	800160a <__aeabi_dadd+0x3ba>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dadd+0x178>
 80013c6:	e098      	b.n	80014fa <__aeabi_dadd+0x2aa>
 80013c8:	2900      	cmp	r1, #0
 80013ca:	d042      	beq.n	8001452 <__aeabi_dadd+0x202>
 80013cc:	497d      	ldr	r1, [pc, #500]	; (80015c4 <__aeabi_dadd+0x374>)
 80013ce:	428e      	cmp	r6, r1
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x184>
 80013d2:	e0da      	b.n	800158a <__aeabi_dadd+0x33a>
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0028      	movs	r0, r5
 80013d8:	0409      	lsls	r1, r1, #16
 80013da:	4308      	orrs	r0, r1
 80013dc:	4684      	mov	ip, r0
 80013de:	2a38      	cmp	r2, #56	; 0x38
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dadd+0x194>
 80013e2:	e129      	b.n	8001638 <__aeabi_dadd+0x3e8>
 80013e4:	2a1f      	cmp	r2, #31
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_dadd+0x19a>
 80013e8:	e187      	b.n	80016fa <__aeabi_dadd+0x4aa>
 80013ea:	0011      	movs	r1, r2
 80013ec:	4665      	mov	r5, ip
 80013ee:	3920      	subs	r1, #32
 80013f0:	40cd      	lsrs	r5, r1
 80013f2:	2a20      	cmp	r2, #32
 80013f4:	d004      	beq.n	8001400 <__aeabi_dadd+0x1b0>
 80013f6:	2040      	movs	r0, #64	; 0x40
 80013f8:	4661      	mov	r1, ip
 80013fa:	1a82      	subs	r2, r0, r2
 80013fc:	4091      	lsls	r1, r2
 80013fe:	430f      	orrs	r7, r1
 8001400:	0039      	movs	r1, r7
 8001402:	1e4f      	subs	r7, r1, #1
 8001404:	41b9      	sbcs	r1, r7
 8001406:	430d      	orrs	r5, r1
 8001408:	e11b      	b.n	8001642 <__aeabi_dadd+0x3f2>
 800140a:	0029      	movs	r1, r5
 800140c:	4339      	orrs	r1, r7
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x1c2>
 8001410:	e0b5      	b.n	800157e <__aeabi_dadd+0x32e>
 8001412:	1e51      	subs	r1, r2, #1
 8001414:	2a01      	cmp	r2, #1
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x1ca>
 8001418:	e1ab      	b.n	8001772 <__aeabi_dadd+0x522>
 800141a:	486a      	ldr	r0, [pc, #424]	; (80015c4 <__aeabi_dadd+0x374>)
 800141c:	4282      	cmp	r2, r0
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x1d2>
 8001420:	e1b2      	b.n	8001788 <__aeabi_dadd+0x538>
 8001422:	000a      	movs	r2, r1
 8001424:	e743      	b.n	80012ae <__aeabi_dadd+0x5e>
 8001426:	4969      	ldr	r1, [pc, #420]	; (80015cc <__aeabi_dadd+0x37c>)
 8001428:	1c75      	adds	r5, r6, #1
 800142a:	420d      	tst	r5, r1
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x1e0>
 800142e:	e0cf      	b.n	80015d0 <__aeabi_dadd+0x380>
 8001430:	2e00      	cmp	r6, #0
 8001432:	d000      	beq.n	8001436 <__aeabi_dadd+0x1e6>
 8001434:	e193      	b.n	800175e <__aeabi_dadd+0x50e>
 8001436:	4649      	mov	r1, r9
 8001438:	4319      	orrs	r1, r3
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x1ee>
 800143c:	e1d1      	b.n	80017e2 <__aeabi_dadd+0x592>
 800143e:	4661      	mov	r1, ip
 8001440:	4339      	orrs	r1, r7
 8001442:	d000      	beq.n	8001446 <__aeabi_dadd+0x1f6>
 8001444:	e1e3      	b.n	800180e <__aeabi_dadd+0x5be>
 8001446:	4649      	mov	r1, r9
 8001448:	0758      	lsls	r0, r3, #29
 800144a:	08c9      	lsrs	r1, r1, #3
 800144c:	4301      	orrs	r1, r0
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	e026      	b.n	80014a0 <__aeabi_dadd+0x250>
 8001452:	0029      	movs	r1, r5
 8001454:	4339      	orrs	r1, r7
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x20a>
 8001458:	e091      	b.n	800157e <__aeabi_dadd+0x32e>
 800145a:	1e51      	subs	r1, r2, #1
 800145c:	2a01      	cmp	r2, #1
 800145e:	d005      	beq.n	800146c <__aeabi_dadd+0x21c>
 8001460:	4858      	ldr	r0, [pc, #352]	; (80015c4 <__aeabi_dadd+0x374>)
 8001462:	4282      	cmp	r2, r0
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x218>
 8001466:	e18f      	b.n	8001788 <__aeabi_dadd+0x538>
 8001468:	000a      	movs	r2, r1
 800146a:	e7b8      	b.n	80013de <__aeabi_dadd+0x18e>
 800146c:	003d      	movs	r5, r7
 800146e:	444d      	add	r5, r9
 8001470:	454d      	cmp	r5, r9
 8001472:	4189      	sbcs	r1, r1
 8001474:	4463      	add	r3, ip
 8001476:	4698      	mov	r8, r3
 8001478:	4249      	negs	r1, r1
 800147a:	4488      	add	r8, r1
 800147c:	4643      	mov	r3, r8
 800147e:	2602      	movs	r6, #2
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	d500      	bpl.n	8001486 <__aeabi_dadd+0x236>
 8001484:	e0eb      	b.n	800165e <__aeabi_dadd+0x40e>
 8001486:	3e01      	subs	r6, #1
 8001488:	076b      	lsls	r3, r5, #29
 800148a:	d000      	beq.n	800148e <__aeabi_dadd+0x23e>
 800148c:	e75c      	b.n	8001348 <__aeabi_dadd+0xf8>
 800148e:	4643      	mov	r3, r8
 8001490:	08e9      	lsrs	r1, r5, #3
 8001492:	075a      	lsls	r2, r3, #29
 8001494:	4311      	orrs	r1, r2
 8001496:	0032      	movs	r2, r6
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	484a      	ldr	r0, [pc, #296]	; (80015c4 <__aeabi_dadd+0x374>)
 800149c:	4282      	cmp	r2, r0
 800149e:	d021      	beq.n	80014e4 <__aeabi_dadd+0x294>
 80014a0:	031b      	lsls	r3, r3, #12
 80014a2:	0552      	lsls	r2, r2, #21
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	0d52      	lsrs	r2, r2, #21
 80014a8:	e76c      	b.n	8001384 <__aeabi_dadd+0x134>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	e769      	b.n	8001384 <__aeabi_dadd+0x134>
 80014b0:	002a      	movs	r2, r5
 80014b2:	433a      	orrs	r2, r7
 80014b4:	d069      	beq.n	800158a <__aeabi_dadd+0x33a>
 80014b6:	464a      	mov	r2, r9
 80014b8:	0758      	lsls	r0, r3, #29
 80014ba:	08d1      	lsrs	r1, r2, #3
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	031b      	lsls	r3, r3, #12
 80014c2:	4308      	orrs	r0, r1
 80014c4:	421a      	tst	r2, r3
 80014c6:	d007      	beq.n	80014d8 <__aeabi_dadd+0x288>
 80014c8:	0029      	movs	r1, r5
 80014ca:	08ed      	lsrs	r5, r5, #3
 80014cc:	421d      	tst	r5, r3
 80014ce:	d103      	bne.n	80014d8 <__aeabi_dadd+0x288>
 80014d0:	002a      	movs	r2, r5
 80014d2:	08ff      	lsrs	r7, r7, #3
 80014d4:	0748      	lsls	r0, r1, #29
 80014d6:	4338      	orrs	r0, r7
 80014d8:	0f43      	lsrs	r3, r0, #29
 80014da:	00c1      	lsls	r1, r0, #3
 80014dc:	075b      	lsls	r3, r3, #29
 80014de:	08c9      	lsrs	r1, r1, #3
 80014e0:	4319      	orrs	r1, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x29c>
 80014ea:	e213      	b.n	8001914 <__aeabi_dadd+0x6c4>
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0312      	lsls	r2, r2, #12
 80014f0:	4313      	orrs	r3, r2
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <__aeabi_dadd+0x374>)
 80014f6:	0b1b      	lsrs	r3, r3, #12
 80014f8:	e744      	b.n	8001384 <__aeabi_dadd+0x134>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d04b      	beq.n	8001596 <__aeabi_dadd+0x346>
 80014fe:	1b8a      	subs	r2, r1, r6
 8001500:	2e00      	cmp	r6, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x2b6>
 8001504:	e0e7      	b.n	80016d6 <__aeabi_dadd+0x486>
 8001506:	482f      	ldr	r0, [pc, #188]	; (80015c4 <__aeabi_dadd+0x374>)
 8001508:	4281      	cmp	r1, r0
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x2be>
 800150c:	e195      	b.n	800183a <__aeabi_dadd+0x5ea>
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	0400      	lsls	r0, r0, #16
 8001512:	4303      	orrs	r3, r0
 8001514:	2a38      	cmp	r2, #56	; 0x38
 8001516:	dd00      	ble.n	800151a <__aeabi_dadd+0x2ca>
 8001518:	e143      	b.n	80017a2 <__aeabi_dadd+0x552>
 800151a:	2a1f      	cmp	r2, #31
 800151c:	dd00      	ble.n	8001520 <__aeabi_dadd+0x2d0>
 800151e:	e1db      	b.n	80018d8 <__aeabi_dadd+0x688>
 8001520:	2020      	movs	r0, #32
 8001522:	001d      	movs	r5, r3
 8001524:	464e      	mov	r6, r9
 8001526:	1a80      	subs	r0, r0, r2
 8001528:	4085      	lsls	r5, r0
 800152a:	40d6      	lsrs	r6, r2
 800152c:	4335      	orrs	r5, r6
 800152e:	464e      	mov	r6, r9
 8001530:	4086      	lsls	r6, r0
 8001532:	0030      	movs	r0, r6
 8001534:	40d3      	lsrs	r3, r2
 8001536:	1e46      	subs	r6, r0, #1
 8001538:	41b0      	sbcs	r0, r6
 800153a:	449c      	add	ip, r3
 800153c:	4305      	orrs	r5, r0
 800153e:	19ed      	adds	r5, r5, r7
 8001540:	42bd      	cmp	r5, r7
 8001542:	419b      	sbcs	r3, r3
 8001544:	425b      	negs	r3, r3
 8001546:	4463      	add	r3, ip
 8001548:	4698      	mov	r8, r3
 800154a:	000e      	movs	r6, r1
 800154c:	e07f      	b.n	800164e <__aeabi_dadd+0x3fe>
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <__aeabi_dadd+0x378>)
 8001550:	1a76      	subs	r6, r6, r1
 8001552:	4013      	ands	r3, r2
 8001554:	4698      	mov	r8, r3
 8001556:	e6f5      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001558:	0028      	movs	r0, r5
 800155a:	f000 fed5 	bl	8002308 <__clzsi2>
 800155e:	0001      	movs	r1, r0
 8001560:	3118      	adds	r1, #24
 8001562:	291f      	cmp	r1, #31
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x318>
 8001566:	e6cf      	b.n	8001308 <__aeabi_dadd+0xb8>
 8001568:	002b      	movs	r3, r5
 800156a:	3808      	subs	r0, #8
 800156c:	4083      	lsls	r3, r0
 800156e:	2500      	movs	r5, #0
 8001570:	e6d2      	b.n	8001318 <__aeabi_dadd+0xc8>
 8001572:	4662      	mov	r2, ip
 8001574:	433a      	orrs	r2, r7
 8001576:	0011      	movs	r1, r2
 8001578:	1e4f      	subs	r7, r1, #1
 800157a:	41b9      	sbcs	r1, r7
 800157c:	e6ac      	b.n	80012d8 <__aeabi_dadd+0x88>
 800157e:	4649      	mov	r1, r9
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	4301      	orrs	r1, r0
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	e787      	b.n	800149a <__aeabi_dadd+0x24a>
 800158a:	4649      	mov	r1, r9
 800158c:	075a      	lsls	r2, r3, #29
 800158e:	08c9      	lsrs	r1, r1, #3
 8001590:	4311      	orrs	r1, r2
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	e7a6      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <__aeabi_dadd+0x37c>)
 8001598:	1c70      	adds	r0, r6, #1
 800159a:	4208      	tst	r0, r1
 800159c:	d000      	beq.n	80015a0 <__aeabi_dadd+0x350>
 800159e:	e0bb      	b.n	8001718 <__aeabi_dadd+0x4c8>
 80015a0:	2e00      	cmp	r6, #0
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dadd+0x356>
 80015a4:	e114      	b.n	80017d0 <__aeabi_dadd+0x580>
 80015a6:	4649      	mov	r1, r9
 80015a8:	4319      	orrs	r1, r3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x35e>
 80015ac:	e175      	b.n	800189a <__aeabi_dadd+0x64a>
 80015ae:	0029      	movs	r1, r5
 80015b0:	4339      	orrs	r1, r7
 80015b2:	d000      	beq.n	80015b6 <__aeabi_dadd+0x366>
 80015b4:	e17e      	b.n	80018b4 <__aeabi_dadd+0x664>
 80015b6:	4649      	mov	r1, r9
 80015b8:	0758      	lsls	r0, r3, #29
 80015ba:	08c9      	lsrs	r1, r1, #3
 80015bc:	4301      	orrs	r1, r0
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	e76e      	b.n	80014a0 <__aeabi_dadd+0x250>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	000007ff 	.word	0x000007ff
 80015c8:	ff7fffff 	.word	0xff7fffff
 80015cc:	000007fe 	.word	0x000007fe
 80015d0:	4649      	mov	r1, r9
 80015d2:	1bcd      	subs	r5, r1, r7
 80015d4:	4661      	mov	r1, ip
 80015d6:	1a58      	subs	r0, r3, r1
 80015d8:	45a9      	cmp	r9, r5
 80015da:	4189      	sbcs	r1, r1
 80015dc:	4249      	negs	r1, r1
 80015de:	4688      	mov	r8, r1
 80015e0:	0001      	movs	r1, r0
 80015e2:	4640      	mov	r0, r8
 80015e4:	1a09      	subs	r1, r1, r0
 80015e6:	4688      	mov	r8, r1
 80015e8:	0209      	lsls	r1, r1, #8
 80015ea:	d500      	bpl.n	80015ee <__aeabi_dadd+0x39e>
 80015ec:	e0a6      	b.n	800173c <__aeabi_dadd+0x4ec>
 80015ee:	4641      	mov	r1, r8
 80015f0:	4329      	orrs	r1, r5
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x3a6>
 80015f4:	e67f      	b.n	80012f6 <__aeabi_dadd+0xa6>
 80015f6:	2300      	movs	r3, #0
 80015f8:	2400      	movs	r4, #0
 80015fa:	e751      	b.n	80014a0 <__aeabi_dadd+0x250>
 80015fc:	4cc7      	ldr	r4, [pc, #796]	; (800191c <__aeabi_dadd+0x6cc>)
 80015fe:	42a1      	cmp	r1, r4
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x3b4>
 8001602:	e0c7      	b.n	8001794 <__aeabi_dadd+0x544>
 8001604:	2480      	movs	r4, #128	; 0x80
 8001606:	0424      	lsls	r4, r4, #16
 8001608:	4323      	orrs	r3, r4
 800160a:	2a38      	cmp	r2, #56	; 0x38
 800160c:	dc54      	bgt.n	80016b8 <__aeabi_dadd+0x468>
 800160e:	2a1f      	cmp	r2, #31
 8001610:	dd00      	ble.n	8001614 <__aeabi_dadd+0x3c4>
 8001612:	e0cc      	b.n	80017ae <__aeabi_dadd+0x55e>
 8001614:	2420      	movs	r4, #32
 8001616:	4648      	mov	r0, r9
 8001618:	1aa4      	subs	r4, r4, r2
 800161a:	001d      	movs	r5, r3
 800161c:	464e      	mov	r6, r9
 800161e:	40a0      	lsls	r0, r4
 8001620:	40d6      	lsrs	r6, r2
 8001622:	40a5      	lsls	r5, r4
 8001624:	0004      	movs	r4, r0
 8001626:	40d3      	lsrs	r3, r2
 8001628:	4662      	mov	r2, ip
 800162a:	4335      	orrs	r5, r6
 800162c:	1e66      	subs	r6, r4, #1
 800162e:	41b4      	sbcs	r4, r6
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	469c      	mov	ip, r3
 8001634:	4325      	orrs	r5, r4
 8001636:	e044      	b.n	80016c2 <__aeabi_dadd+0x472>
 8001638:	4662      	mov	r2, ip
 800163a:	433a      	orrs	r2, r7
 800163c:	0015      	movs	r5, r2
 800163e:	1e6f      	subs	r7, r5, #1
 8001640:	41bd      	sbcs	r5, r7
 8001642:	444d      	add	r5, r9
 8001644:	454d      	cmp	r5, r9
 8001646:	4189      	sbcs	r1, r1
 8001648:	4249      	negs	r1, r1
 800164a:	4688      	mov	r8, r1
 800164c:	4498      	add	r8, r3
 800164e:	4643      	mov	r3, r8
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	d400      	bmi.n	8001656 <__aeabi_dadd+0x406>
 8001654:	e718      	b.n	8001488 <__aeabi_dadd+0x238>
 8001656:	4bb1      	ldr	r3, [pc, #708]	; (800191c <__aeabi_dadd+0x6cc>)
 8001658:	3601      	adds	r6, #1
 800165a:	429e      	cmp	r6, r3
 800165c:	d049      	beq.n	80016f2 <__aeabi_dadd+0x4a2>
 800165e:	4642      	mov	r2, r8
 8001660:	4baf      	ldr	r3, [pc, #700]	; (8001920 <__aeabi_dadd+0x6d0>)
 8001662:	2101      	movs	r1, #1
 8001664:	401a      	ands	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	086a      	lsrs	r2, r5, #1
 800166a:	400d      	ands	r5, r1
 800166c:	4315      	orrs	r5, r2
 800166e:	07d9      	lsls	r1, r3, #31
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	4698      	mov	r8, r3
 8001674:	430d      	orrs	r5, r1
 8001676:	e665      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001678:	0018      	movs	r0, r3
 800167a:	3e1f      	subs	r6, #31
 800167c:	40f0      	lsrs	r0, r6
 800167e:	2a20      	cmp	r2, #32
 8001680:	d003      	beq.n	800168a <__aeabi_dadd+0x43a>
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	1a8a      	subs	r2, r1, r2
 8001686:	4093      	lsls	r3, r2
 8001688:	431d      	orrs	r5, r3
 800168a:	1e69      	subs	r1, r5, #1
 800168c:	418d      	sbcs	r5, r1
 800168e:	2300      	movs	r3, #0
 8001690:	2600      	movs	r6, #0
 8001692:	4698      	mov	r8, r3
 8001694:	4305      	orrs	r5, r0
 8001696:	e6f7      	b.n	8001488 <__aeabi_dadd+0x238>
 8001698:	0011      	movs	r1, r2
 800169a:	4665      	mov	r5, ip
 800169c:	3920      	subs	r1, #32
 800169e:	40cd      	lsrs	r5, r1
 80016a0:	2a20      	cmp	r2, #32
 80016a2:	d004      	beq.n	80016ae <__aeabi_dadd+0x45e>
 80016a4:	2040      	movs	r0, #64	; 0x40
 80016a6:	4661      	mov	r1, ip
 80016a8:	1a82      	subs	r2, r0, r2
 80016aa:	4091      	lsls	r1, r2
 80016ac:	430f      	orrs	r7, r1
 80016ae:	0039      	movs	r1, r7
 80016b0:	1e4f      	subs	r7, r1, #1
 80016b2:	41b9      	sbcs	r1, r7
 80016b4:	4329      	orrs	r1, r5
 80016b6:	e60f      	b.n	80012d8 <__aeabi_dadd+0x88>
 80016b8:	464a      	mov	r2, r9
 80016ba:	4313      	orrs	r3, r2
 80016bc:	001d      	movs	r5, r3
 80016be:	1e6b      	subs	r3, r5, #1
 80016c0:	419d      	sbcs	r5, r3
 80016c2:	1b7d      	subs	r5, r7, r5
 80016c4:	42af      	cmp	r7, r5
 80016c6:	419b      	sbcs	r3, r3
 80016c8:	4662      	mov	r2, ip
 80016ca:	425b      	negs	r3, r3
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	4698      	mov	r8, r3
 80016d0:	4654      	mov	r4, sl
 80016d2:	000e      	movs	r6, r1
 80016d4:	e607      	b.n	80012e6 <__aeabi_dadd+0x96>
 80016d6:	4648      	mov	r0, r9
 80016d8:	4318      	orrs	r0, r3
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x48e>
 80016dc:	e0b3      	b.n	8001846 <__aeabi_dadd+0x5f6>
 80016de:	1e50      	subs	r0, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x496>
 80016e4:	e10d      	b.n	8001902 <__aeabi_dadd+0x6b2>
 80016e6:	4d8d      	ldr	r5, [pc, #564]	; (800191c <__aeabi_dadd+0x6cc>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x49e>
 80016ec:	e0a5      	b.n	800183a <__aeabi_dadd+0x5ea>
 80016ee:	0002      	movs	r2, r0
 80016f0:	e710      	b.n	8001514 <__aeabi_dadd+0x2c4>
 80016f2:	0032      	movs	r2, r6
 80016f4:	2300      	movs	r3, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	e644      	b.n	8001384 <__aeabi_dadd+0x134>
 80016fa:	2120      	movs	r1, #32
 80016fc:	0038      	movs	r0, r7
 80016fe:	1a89      	subs	r1, r1, r2
 8001700:	4665      	mov	r5, ip
 8001702:	408f      	lsls	r7, r1
 8001704:	408d      	lsls	r5, r1
 8001706:	40d0      	lsrs	r0, r2
 8001708:	1e79      	subs	r1, r7, #1
 800170a:	418f      	sbcs	r7, r1
 800170c:	4305      	orrs	r5, r0
 800170e:	433d      	orrs	r5, r7
 8001710:	4667      	mov	r7, ip
 8001712:	40d7      	lsrs	r7, r2
 8001714:	19db      	adds	r3, r3, r7
 8001716:	e794      	b.n	8001642 <__aeabi_dadd+0x3f2>
 8001718:	4a80      	ldr	r2, [pc, #512]	; (800191c <__aeabi_dadd+0x6cc>)
 800171a:	4290      	cmp	r0, r2
 800171c:	d100      	bne.n	8001720 <__aeabi_dadd+0x4d0>
 800171e:	e0ec      	b.n	80018fa <__aeabi_dadd+0x6aa>
 8001720:	0039      	movs	r1, r7
 8001722:	4449      	add	r1, r9
 8001724:	4549      	cmp	r1, r9
 8001726:	4192      	sbcs	r2, r2
 8001728:	4463      	add	r3, ip
 800172a:	4252      	negs	r2, r2
 800172c:	189b      	adds	r3, r3, r2
 800172e:	07dd      	lsls	r5, r3, #31
 8001730:	0849      	lsrs	r1, r1, #1
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	4698      	mov	r8, r3
 8001736:	0006      	movs	r6, r0
 8001738:	430d      	orrs	r5, r1
 800173a:	e6a5      	b.n	8001488 <__aeabi_dadd+0x238>
 800173c:	464a      	mov	r2, r9
 800173e:	1abd      	subs	r5, r7, r2
 8001740:	42af      	cmp	r7, r5
 8001742:	4189      	sbcs	r1, r1
 8001744:	4662      	mov	r2, ip
 8001746:	4249      	negs	r1, r1
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	1a5b      	subs	r3, r3, r1
 800174c:	4698      	mov	r8, r3
 800174e:	4654      	mov	r4, sl
 8001750:	e5d1      	b.n	80012f6 <__aeabi_dadd+0xa6>
 8001752:	076c      	lsls	r4, r5, #29
 8001754:	08f9      	lsrs	r1, r7, #3
 8001756:	4321      	orrs	r1, r4
 8001758:	08eb      	lsrs	r3, r5, #3
 800175a:	0004      	movs	r4, r0
 800175c:	e69d      	b.n	800149a <__aeabi_dadd+0x24a>
 800175e:	464a      	mov	r2, r9
 8001760:	431a      	orrs	r2, r3
 8001762:	d175      	bne.n	8001850 <__aeabi_dadd+0x600>
 8001764:	4661      	mov	r1, ip
 8001766:	4339      	orrs	r1, r7
 8001768:	d114      	bne.n	8001794 <__aeabi_dadd+0x544>
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	2400      	movs	r4, #0
 800176e:	031b      	lsls	r3, r3, #12
 8001770:	e6bc      	b.n	80014ec <__aeabi_dadd+0x29c>
 8001772:	464a      	mov	r2, r9
 8001774:	1bd5      	subs	r5, r2, r7
 8001776:	45a9      	cmp	r9, r5
 8001778:	4189      	sbcs	r1, r1
 800177a:	4662      	mov	r2, ip
 800177c:	4249      	negs	r1, r1
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	4698      	mov	r8, r3
 8001784:	2601      	movs	r6, #1
 8001786:	e5ae      	b.n	80012e6 <__aeabi_dadd+0x96>
 8001788:	464a      	mov	r2, r9
 800178a:	08d1      	lsrs	r1, r2, #3
 800178c:	075a      	lsls	r2, r3, #29
 800178e:	4311      	orrs	r1, r2
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	e6a7      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001794:	4663      	mov	r3, ip
 8001796:	08f9      	lsrs	r1, r7, #3
 8001798:	075a      	lsls	r2, r3, #29
 800179a:	4654      	mov	r4, sl
 800179c:	4311      	orrs	r1, r2
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	e6a0      	b.n	80014e4 <__aeabi_dadd+0x294>
 80017a2:	464a      	mov	r2, r9
 80017a4:	4313      	orrs	r3, r2
 80017a6:	001d      	movs	r5, r3
 80017a8:	1e6b      	subs	r3, r5, #1
 80017aa:	419d      	sbcs	r5, r3
 80017ac:	e6c7      	b.n	800153e <__aeabi_dadd+0x2ee>
 80017ae:	0014      	movs	r4, r2
 80017b0:	001e      	movs	r6, r3
 80017b2:	3c20      	subs	r4, #32
 80017b4:	40e6      	lsrs	r6, r4
 80017b6:	2a20      	cmp	r2, #32
 80017b8:	d005      	beq.n	80017c6 <__aeabi_dadd+0x576>
 80017ba:	2440      	movs	r4, #64	; 0x40
 80017bc:	1aa2      	subs	r2, r4, r2
 80017be:	4093      	lsls	r3, r2
 80017c0:	464a      	mov	r2, r9
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4691      	mov	r9, r2
 80017c6:	464d      	mov	r5, r9
 80017c8:	1e6b      	subs	r3, r5, #1
 80017ca:	419d      	sbcs	r5, r3
 80017cc:	4335      	orrs	r5, r6
 80017ce:	e778      	b.n	80016c2 <__aeabi_dadd+0x472>
 80017d0:	464a      	mov	r2, r9
 80017d2:	431a      	orrs	r2, r3
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dadd+0x588>
 80017d6:	e66b      	b.n	80014b0 <__aeabi_dadd+0x260>
 80017d8:	076b      	lsls	r3, r5, #29
 80017da:	08f9      	lsrs	r1, r7, #3
 80017dc:	4319      	orrs	r1, r3
 80017de:	08eb      	lsrs	r3, r5, #3
 80017e0:	e680      	b.n	80014e4 <__aeabi_dadd+0x294>
 80017e2:	4661      	mov	r1, ip
 80017e4:	4339      	orrs	r1, r7
 80017e6:	d054      	beq.n	8001892 <__aeabi_dadd+0x642>
 80017e8:	4663      	mov	r3, ip
 80017ea:	08f9      	lsrs	r1, r7, #3
 80017ec:	075c      	lsls	r4, r3, #29
 80017ee:	4321      	orrs	r1, r4
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	0004      	movs	r4, r0
 80017f4:	e654      	b.n	80014a0 <__aeabi_dadd+0x250>
 80017f6:	464a      	mov	r2, r9
 80017f8:	1abd      	subs	r5, r7, r2
 80017fa:	42af      	cmp	r7, r5
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4662      	mov	r2, ip
 8001800:	4249      	negs	r1, r1
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	4698      	mov	r8, r3
 8001808:	0004      	movs	r4, r0
 800180a:	2601      	movs	r6, #1
 800180c:	e56b      	b.n	80012e6 <__aeabi_dadd+0x96>
 800180e:	464a      	mov	r2, r9
 8001810:	1bd5      	subs	r5, r2, r7
 8001812:	45a9      	cmp	r9, r5
 8001814:	4189      	sbcs	r1, r1
 8001816:	4662      	mov	r2, ip
 8001818:	4249      	negs	r1, r1
 800181a:	1a9a      	subs	r2, r3, r2
 800181c:	1a52      	subs	r2, r2, r1
 800181e:	4690      	mov	r8, r2
 8001820:	0212      	lsls	r2, r2, #8
 8001822:	d532      	bpl.n	800188a <__aeabi_dadd+0x63a>
 8001824:	464a      	mov	r2, r9
 8001826:	1abd      	subs	r5, r7, r2
 8001828:	42af      	cmp	r7, r5
 800182a:	4189      	sbcs	r1, r1
 800182c:	4662      	mov	r2, ip
 800182e:	4249      	negs	r1, r1
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	1a5b      	subs	r3, r3, r1
 8001834:	4698      	mov	r8, r3
 8001836:	0004      	movs	r4, r0
 8001838:	e584      	b.n	8001344 <__aeabi_dadd+0xf4>
 800183a:	4663      	mov	r3, ip
 800183c:	08f9      	lsrs	r1, r7, #3
 800183e:	075a      	lsls	r2, r3, #29
 8001840:	4311      	orrs	r1, r2
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	e64e      	b.n	80014e4 <__aeabi_dadd+0x294>
 8001846:	08f9      	lsrs	r1, r7, #3
 8001848:	0768      	lsls	r0, r5, #29
 800184a:	4301      	orrs	r1, r0
 800184c:	08eb      	lsrs	r3, r5, #3
 800184e:	e624      	b.n	800149a <__aeabi_dadd+0x24a>
 8001850:	4662      	mov	r2, ip
 8001852:	433a      	orrs	r2, r7
 8001854:	d100      	bne.n	8001858 <__aeabi_dadd+0x608>
 8001856:	e698      	b.n	800158a <__aeabi_dadd+0x33a>
 8001858:	464a      	mov	r2, r9
 800185a:	08d1      	lsrs	r1, r2, #3
 800185c:	075a      	lsls	r2, r3, #29
 800185e:	4311      	orrs	r1, r2
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	031b      	lsls	r3, r3, #12
 8001866:	421a      	tst	r2, r3
 8001868:	d008      	beq.n	800187c <__aeabi_dadd+0x62c>
 800186a:	4660      	mov	r0, ip
 800186c:	08c5      	lsrs	r5, r0, #3
 800186e:	421d      	tst	r5, r3
 8001870:	d104      	bne.n	800187c <__aeabi_dadd+0x62c>
 8001872:	4654      	mov	r4, sl
 8001874:	002a      	movs	r2, r5
 8001876:	08f9      	lsrs	r1, r7, #3
 8001878:	0743      	lsls	r3, r0, #29
 800187a:	4319      	orrs	r1, r3
 800187c:	0f4b      	lsrs	r3, r1, #29
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	075b      	lsls	r3, r3, #29
 8001882:	08c9      	lsrs	r1, r1, #3
 8001884:	4319      	orrs	r1, r3
 8001886:	0013      	movs	r3, r2
 8001888:	e62c      	b.n	80014e4 <__aeabi_dadd+0x294>
 800188a:	4641      	mov	r1, r8
 800188c:	4329      	orrs	r1, r5
 800188e:	d000      	beq.n	8001892 <__aeabi_dadd+0x642>
 8001890:	e5fa      	b.n	8001488 <__aeabi_dadd+0x238>
 8001892:	2300      	movs	r3, #0
 8001894:	000a      	movs	r2, r1
 8001896:	2400      	movs	r4, #0
 8001898:	e602      	b.n	80014a0 <__aeabi_dadd+0x250>
 800189a:	076b      	lsls	r3, r5, #29
 800189c:	08f9      	lsrs	r1, r7, #3
 800189e:	4319      	orrs	r1, r3
 80018a0:	08eb      	lsrs	r3, r5, #3
 80018a2:	e5fd      	b.n	80014a0 <__aeabi_dadd+0x250>
 80018a4:	4663      	mov	r3, ip
 80018a6:	08f9      	lsrs	r1, r7, #3
 80018a8:	075b      	lsls	r3, r3, #29
 80018aa:	4319      	orrs	r1, r3
 80018ac:	4663      	mov	r3, ip
 80018ae:	0004      	movs	r4, r0
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	e617      	b.n	80014e4 <__aeabi_dadd+0x294>
 80018b4:	003d      	movs	r5, r7
 80018b6:	444d      	add	r5, r9
 80018b8:	4463      	add	r3, ip
 80018ba:	454d      	cmp	r5, r9
 80018bc:	4189      	sbcs	r1, r1
 80018be:	4698      	mov	r8, r3
 80018c0:	4249      	negs	r1, r1
 80018c2:	4488      	add	r8, r1
 80018c4:	4643      	mov	r3, r8
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	d400      	bmi.n	80018cc <__aeabi_dadd+0x67c>
 80018ca:	e5dd      	b.n	8001488 <__aeabi_dadd+0x238>
 80018cc:	4642      	mov	r2, r8
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <__aeabi_dadd+0x6d0>)
 80018d0:	2601      	movs	r6, #1
 80018d2:	401a      	ands	r2, r3
 80018d4:	4690      	mov	r8, r2
 80018d6:	e5d7      	b.n	8001488 <__aeabi_dadd+0x238>
 80018d8:	0010      	movs	r0, r2
 80018da:	001e      	movs	r6, r3
 80018dc:	3820      	subs	r0, #32
 80018de:	40c6      	lsrs	r6, r0
 80018e0:	2a20      	cmp	r2, #32
 80018e2:	d005      	beq.n	80018f0 <__aeabi_dadd+0x6a0>
 80018e4:	2040      	movs	r0, #64	; 0x40
 80018e6:	1a82      	subs	r2, r0, r2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	464a      	mov	r2, r9
 80018ec:	431a      	orrs	r2, r3
 80018ee:	4691      	mov	r9, r2
 80018f0:	464d      	mov	r5, r9
 80018f2:	1e6b      	subs	r3, r5, #1
 80018f4:	419d      	sbcs	r5, r3
 80018f6:	4335      	orrs	r5, r6
 80018f8:	e621      	b.n	800153e <__aeabi_dadd+0x2ee>
 80018fa:	0002      	movs	r2, r0
 80018fc:	2300      	movs	r3, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	e540      	b.n	8001384 <__aeabi_dadd+0x134>
 8001902:	464a      	mov	r2, r9
 8001904:	19d5      	adds	r5, r2, r7
 8001906:	42bd      	cmp	r5, r7
 8001908:	4189      	sbcs	r1, r1
 800190a:	4463      	add	r3, ip
 800190c:	4698      	mov	r8, r3
 800190e:	4249      	negs	r1, r1
 8001910:	4488      	add	r8, r1
 8001912:	e5b3      	b.n	800147c <__aeabi_dadd+0x22c>
 8001914:	2100      	movs	r1, #0
 8001916:	4a01      	ldr	r2, [pc, #4]	; (800191c <__aeabi_dadd+0x6cc>)
 8001918:	000b      	movs	r3, r1
 800191a:	e533      	b.n	8001384 <__aeabi_dadd+0x134>
 800191c:	000007ff 	.word	0x000007ff
 8001920:	ff7fffff 	.word	0xff7fffff

08001924 <__aeabi_dsub>:
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	4657      	mov	r7, sl
 8001928:	464e      	mov	r6, r9
 800192a:	4645      	mov	r5, r8
 800192c:	46de      	mov	lr, fp
 800192e:	0004      	movs	r4, r0
 8001930:	b5e0      	push	{r5, r6, r7, lr}
 8001932:	001f      	movs	r7, r3
 8001934:	0010      	movs	r0, r2
 8001936:	030b      	lsls	r3, r1, #12
 8001938:	0f62      	lsrs	r2, r4, #29
 800193a:	004e      	lsls	r6, r1, #1
 800193c:	0fcd      	lsrs	r5, r1, #31
 800193e:	0a5b      	lsrs	r3, r3, #9
 8001940:	0339      	lsls	r1, r7, #12
 8001942:	4313      	orrs	r3, r2
 8001944:	0a49      	lsrs	r1, r1, #9
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	0f44      	lsrs	r4, r0, #29
 800194a:	4321      	orrs	r1, r4
 800194c:	4cc2      	ldr	r4, [pc, #776]	; (8001c58 <__aeabi_dsub+0x334>)
 800194e:	4691      	mov	r9, r2
 8001950:	4692      	mov	sl, r2
 8001952:	00c0      	lsls	r0, r0, #3
 8001954:	007a      	lsls	r2, r7, #1
 8001956:	4680      	mov	r8, r0
 8001958:	0d76      	lsrs	r6, r6, #21
 800195a:	0d52      	lsrs	r2, r2, #21
 800195c:	0fff      	lsrs	r7, r7, #31
 800195e:	42a2      	cmp	r2, r4
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x40>
 8001962:	e0b4      	b.n	8001ace <__aeabi_dsub+0x1aa>
 8001964:	2401      	movs	r4, #1
 8001966:	4067      	eors	r7, r4
 8001968:	46bb      	mov	fp, r7
 800196a:	42bd      	cmp	r5, r7
 800196c:	d100      	bne.n	8001970 <__aeabi_dsub+0x4c>
 800196e:	e088      	b.n	8001a82 <__aeabi_dsub+0x15e>
 8001970:	1ab4      	subs	r4, r6, r2
 8001972:	46a4      	mov	ip, r4
 8001974:	2c00      	cmp	r4, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x56>
 8001978:	e0b2      	b.n	8001ae0 <__aeabi_dsub+0x1bc>
 800197a:	2a00      	cmp	r2, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x5c>
 800197e:	e0c5      	b.n	8001b0c <__aeabi_dsub+0x1e8>
 8001980:	4ab5      	ldr	r2, [pc, #724]	; (8001c58 <__aeabi_dsub+0x334>)
 8001982:	4296      	cmp	r6, r2
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x64>
 8001986:	e28b      	b.n	8001ea0 <__aeabi_dsub+0x57c>
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	0412      	lsls	r2, r2, #16
 800198c:	4311      	orrs	r1, r2
 800198e:	4662      	mov	r2, ip
 8001990:	2a38      	cmp	r2, #56	; 0x38
 8001992:	dd00      	ble.n	8001996 <__aeabi_dsub+0x72>
 8001994:	e1a1      	b.n	8001cda <__aeabi_dsub+0x3b6>
 8001996:	2a1f      	cmp	r2, #31
 8001998:	dd00      	ble.n	800199c <__aeabi_dsub+0x78>
 800199a:	e216      	b.n	8001dca <__aeabi_dsub+0x4a6>
 800199c:	2720      	movs	r7, #32
 800199e:	000c      	movs	r4, r1
 80019a0:	1abf      	subs	r7, r7, r2
 80019a2:	40bc      	lsls	r4, r7
 80019a4:	0002      	movs	r2, r0
 80019a6:	46a0      	mov	r8, r4
 80019a8:	4664      	mov	r4, ip
 80019aa:	40b8      	lsls	r0, r7
 80019ac:	40e2      	lsrs	r2, r4
 80019ae:	4644      	mov	r4, r8
 80019b0:	4314      	orrs	r4, r2
 80019b2:	0002      	movs	r2, r0
 80019b4:	1e50      	subs	r0, r2, #1
 80019b6:	4182      	sbcs	r2, r0
 80019b8:	4660      	mov	r0, ip
 80019ba:	40c1      	lsrs	r1, r0
 80019bc:	4322      	orrs	r2, r4
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	4649      	mov	r1, r9
 80019c2:	1a8c      	subs	r4, r1, r2
 80019c4:	45a1      	cmp	r9, r4
 80019c6:	4192      	sbcs	r2, r2
 80019c8:	4252      	negs	r2, r2
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	4698      	mov	r8, r3
 80019ce:	4643      	mov	r3, r8
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	d400      	bmi.n	80019d6 <__aeabi_dsub+0xb2>
 80019d4:	e117      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 80019d6:	4643      	mov	r3, r8
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	4698      	mov	r8, r3
 80019de:	4643      	mov	r3, r8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0xc2>
 80019e4:	e16c      	b.n	8001cc0 <__aeabi_dsub+0x39c>
 80019e6:	4640      	mov	r0, r8
 80019e8:	f000 fc8e 	bl	8002308 <__clzsi2>
 80019ec:	0002      	movs	r2, r0
 80019ee:	3a08      	subs	r2, #8
 80019f0:	2120      	movs	r1, #32
 80019f2:	0020      	movs	r0, r4
 80019f4:	4643      	mov	r3, r8
 80019f6:	1a89      	subs	r1, r1, r2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	40c8      	lsrs	r0, r1
 80019fc:	4094      	lsls	r4, r2
 80019fe:	4303      	orrs	r3, r0
 8001a00:	4296      	cmp	r6, r2
 8001a02:	dd00      	ble.n	8001a06 <__aeabi_dsub+0xe2>
 8001a04:	e157      	b.n	8001cb6 <__aeabi_dsub+0x392>
 8001a06:	1b96      	subs	r6, r2, r6
 8001a08:	1c71      	adds	r1, r6, #1
 8001a0a:	291f      	cmp	r1, #31
 8001a0c:	dd00      	ble.n	8001a10 <__aeabi_dsub+0xec>
 8001a0e:	e1cb      	b.n	8001da8 <__aeabi_dsub+0x484>
 8001a10:	2220      	movs	r2, #32
 8001a12:	0018      	movs	r0, r3
 8001a14:	0026      	movs	r6, r4
 8001a16:	1a52      	subs	r2, r2, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4090      	lsls	r0, r2
 8001a1c:	40ce      	lsrs	r6, r1
 8001a1e:	40cb      	lsrs	r3, r1
 8001a20:	1e62      	subs	r2, r4, #1
 8001a22:	4194      	sbcs	r4, r2
 8001a24:	4330      	orrs	r0, r6
 8001a26:	4698      	mov	r8, r3
 8001a28:	2600      	movs	r6, #0
 8001a2a:	4304      	orrs	r4, r0
 8001a2c:	0763      	lsls	r3, r4, #29
 8001a2e:	d009      	beq.n	8001a44 <__aeabi_dsub+0x120>
 8001a30:	230f      	movs	r3, #15
 8001a32:	4023      	ands	r3, r4
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <__aeabi_dsub+0x120>
 8001a38:	1d23      	adds	r3, r4, #4
 8001a3a:	42a3      	cmp	r3, r4
 8001a3c:	41a4      	sbcs	r4, r4
 8001a3e:	4264      	negs	r4, r4
 8001a40:	44a0      	add	r8, r4
 8001a42:	001c      	movs	r4, r3
 8001a44:	4643      	mov	r3, r8
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	d400      	bmi.n	8001a4c <__aeabi_dsub+0x128>
 8001a4a:	e0df      	b.n	8001c0c <__aeabi_dsub+0x2e8>
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <__aeabi_dsub+0x334>)
 8001a4e:	3601      	adds	r6, #1
 8001a50:	429e      	cmp	r6, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x132>
 8001a54:	e0fb      	b.n	8001c4e <__aeabi_dsub+0x32a>
 8001a56:	4642      	mov	r2, r8
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <__aeabi_dsub+0x338>)
 8001a5a:	08e4      	lsrs	r4, r4, #3
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	0571      	lsls	r1, r6, #21
 8001a62:	0752      	lsls	r2, r2, #29
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4322      	orrs	r2, r4
 8001a68:	0b1b      	lsrs	r3, r3, #12
 8001a6a:	0d49      	lsrs	r1, r1, #21
 8001a6c:	0509      	lsls	r1, r1, #20
 8001a6e:	07ed      	lsls	r5, r5, #31
 8001a70:	4319      	orrs	r1, r3
 8001a72:	4329      	orrs	r1, r5
 8001a74:	0010      	movs	r0, r2
 8001a76:	bcf0      	pop	{r4, r5, r6, r7}
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	46b2      	mov	sl, r6
 8001a7c:	46a9      	mov	r9, r5
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a82:	1ab4      	subs	r4, r6, r2
 8001a84:	46a4      	mov	ip, r4
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	dd58      	ble.n	8001b3c <__aeabi_dsub+0x218>
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x16c>
 8001a8e:	e09e      	b.n	8001bce <__aeabi_dsub+0x2aa>
 8001a90:	4a71      	ldr	r2, [pc, #452]	; (8001c58 <__aeabi_dsub+0x334>)
 8001a92:	4296      	cmp	r6, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x174>
 8001a96:	e13b      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2a38      	cmp	r2, #56	; 0x38
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x182>
 8001aa4:	e0c1      	b.n	8001c2a <__aeabi_dsub+0x306>
 8001aa6:	2a1f      	cmp	r2, #31
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_dsub+0x188>
 8001aaa:	e1bb      	b.n	8001e24 <__aeabi_dsub+0x500>
 8001aac:	000c      	movs	r4, r1
 8001aae:	3a20      	subs	r2, #32
 8001ab0:	40d4      	lsrs	r4, r2
 8001ab2:	0022      	movs	r2, r4
 8001ab4:	4664      	mov	r4, ip
 8001ab6:	2c20      	cmp	r4, #32
 8001ab8:	d004      	beq.n	8001ac4 <__aeabi_dsub+0x1a0>
 8001aba:	2740      	movs	r7, #64	; 0x40
 8001abc:	1b3f      	subs	r7, r7, r4
 8001abe:	40b9      	lsls	r1, r7
 8001ac0:	4308      	orrs	r0, r1
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4644      	mov	r4, r8
 8001ac6:	1e61      	subs	r1, r4, #1
 8001ac8:	418c      	sbcs	r4, r1
 8001aca:	4314      	orrs	r4, r2
 8001acc:	e0b1      	b.n	8001c32 <__aeabi_dsub+0x30e>
 8001ace:	000c      	movs	r4, r1
 8001ad0:	4304      	orrs	r4, r0
 8001ad2:	d02a      	beq.n	8001b2a <__aeabi_dsub+0x206>
 8001ad4:	46bb      	mov	fp, r7
 8001ad6:	42bd      	cmp	r5, r7
 8001ad8:	d02d      	beq.n	8001b36 <__aeabi_dsub+0x212>
 8001ada:	4c61      	ldr	r4, [pc, #388]	; (8001c60 <__aeabi_dsub+0x33c>)
 8001adc:	46a4      	mov	ip, r4
 8001ade:	44b4      	add	ip, r6
 8001ae0:	4664      	mov	r4, ip
 8001ae2:	2c00      	cmp	r4, #0
 8001ae4:	d05c      	beq.n	8001ba0 <__aeabi_dsub+0x27c>
 8001ae6:	1b94      	subs	r4, r2, r6
 8001ae8:	46a4      	mov	ip, r4
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x1cc>
 8001aee:	e115      	b.n	8001d1c <__aeabi_dsub+0x3f8>
 8001af0:	464d      	mov	r5, r9
 8001af2:	431d      	orrs	r5, r3
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x1d4>
 8001af6:	e1c3      	b.n	8001e80 <__aeabi_dsub+0x55c>
 8001af8:	1e65      	subs	r5, r4, #1
 8001afa:	2c01      	cmp	r4, #1
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x1dc>
 8001afe:	e20c      	b.n	8001f1a <__aeabi_dsub+0x5f6>
 8001b00:	4e55      	ldr	r6, [pc, #340]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b02:	42b4      	cmp	r4, r6
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x1e4>
 8001b06:	e1f8      	b.n	8001efa <__aeabi_dsub+0x5d6>
 8001b08:	46ac      	mov	ip, r5
 8001b0a:	e10e      	b.n	8001d2a <__aeabi_dsub+0x406>
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	4302      	orrs	r2, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1f0>
 8001b12:	e136      	b.n	8001d82 <__aeabi_dsub+0x45e>
 8001b14:	0022      	movs	r2, r4
 8001b16:	3a01      	subs	r2, #1
 8001b18:	2c01      	cmp	r4, #1
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x1fa>
 8001b1c:	e1c6      	b.n	8001eac <__aeabi_dsub+0x588>
 8001b1e:	4c4e      	ldr	r4, [pc, #312]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b20:	45a4      	cmp	ip, r4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x202>
 8001b24:	e0f4      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001b26:	4694      	mov	ip, r2
 8001b28:	e731      	b.n	800198e <__aeabi_dsub+0x6a>
 8001b2a:	2401      	movs	r4, #1
 8001b2c:	4067      	eors	r7, r4
 8001b2e:	46bb      	mov	fp, r7
 8001b30:	42bd      	cmp	r5, r7
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x212>
 8001b34:	e71c      	b.n	8001970 <__aeabi_dsub+0x4c>
 8001b36:	4c4a      	ldr	r4, [pc, #296]	; (8001c60 <__aeabi_dsub+0x33c>)
 8001b38:	46a4      	mov	ip, r4
 8001b3a:	44b4      	add	ip, r6
 8001b3c:	4664      	mov	r4, ip
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x220>
 8001b42:	e0cf      	b.n	8001ce4 <__aeabi_dsub+0x3c0>
 8001b44:	1b94      	subs	r4, r2, r6
 8001b46:	46a4      	mov	ip, r4
 8001b48:	2e00      	cmp	r6, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x22a>
 8001b4c:	e15c      	b.n	8001e08 <__aeabi_dsub+0x4e4>
 8001b4e:	4e42      	ldr	r6, [pc, #264]	; (8001c58 <__aeabi_dsub+0x334>)
 8001b50:	42b2      	cmp	r2, r6
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x232>
 8001b54:	e1ec      	b.n	8001f30 <__aeabi_dsub+0x60c>
 8001b56:	2680      	movs	r6, #128	; 0x80
 8001b58:	0436      	lsls	r6, r6, #16
 8001b5a:	4333      	orrs	r3, r6
 8001b5c:	4664      	mov	r4, ip
 8001b5e:	2c38      	cmp	r4, #56	; 0x38
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dsub+0x240>
 8001b62:	e1b3      	b.n	8001ecc <__aeabi_dsub+0x5a8>
 8001b64:	2c1f      	cmp	r4, #31
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0x246>
 8001b68:	e238      	b.n	8001fdc <__aeabi_dsub+0x6b8>
 8001b6a:	2620      	movs	r6, #32
 8001b6c:	1b36      	subs	r6, r6, r4
 8001b6e:	001c      	movs	r4, r3
 8001b70:	40b4      	lsls	r4, r6
 8001b72:	464f      	mov	r7, r9
 8001b74:	46a0      	mov	r8, r4
 8001b76:	4664      	mov	r4, ip
 8001b78:	40e7      	lsrs	r7, r4
 8001b7a:	4644      	mov	r4, r8
 8001b7c:	433c      	orrs	r4, r7
 8001b7e:	464f      	mov	r7, r9
 8001b80:	40b7      	lsls	r7, r6
 8001b82:	003e      	movs	r6, r7
 8001b84:	1e77      	subs	r7, r6, #1
 8001b86:	41be      	sbcs	r6, r7
 8001b88:	4334      	orrs	r4, r6
 8001b8a:	4666      	mov	r6, ip
 8001b8c:	40f3      	lsrs	r3, r6
 8001b8e:	18c9      	adds	r1, r1, r3
 8001b90:	1824      	adds	r4, r4, r0
 8001b92:	4284      	cmp	r4, r0
 8001b94:	419b      	sbcs	r3, r3
 8001b96:	425b      	negs	r3, r3
 8001b98:	4698      	mov	r8, r3
 8001b9a:	0016      	movs	r6, r2
 8001b9c:	4488      	add	r8, r1
 8001b9e:	e04e      	b.n	8001c3e <__aeabi_dsub+0x31a>
 8001ba0:	4a30      	ldr	r2, [pc, #192]	; (8001c64 <__aeabi_dsub+0x340>)
 8001ba2:	1c74      	adds	r4, r6, #1
 8001ba4:	4214      	tst	r4, r2
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x286>
 8001ba8:	e0d6      	b.n	8001d58 <__aeabi_dsub+0x434>
 8001baa:	464a      	mov	r2, r9
 8001bac:	431a      	orrs	r2, r3
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	d000      	beq.n	8001bb4 <__aeabi_dsub+0x290>
 8001bb2:	e15b      	b.n	8001e6c <__aeabi_dsub+0x548>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x296>
 8001bb8:	e1a5      	b.n	8001f06 <__aeabi_dsub+0x5e2>
 8001bba:	000a      	movs	r2, r1
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x29e>
 8001bc0:	e1bb      	b.n	8001f3a <__aeabi_dsub+0x616>
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	0759      	lsls	r1, r3, #29
 8001bc6:	08d2      	lsrs	r2, r2, #3
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	e027      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001bce:	000a      	movs	r2, r1
 8001bd0:	4302      	orrs	r2, r0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x2b2>
 8001bd4:	e174      	b.n	8001ec0 <__aeabi_dsub+0x59c>
 8001bd6:	0022      	movs	r2, r4
 8001bd8:	3a01      	subs	r2, #1
 8001bda:	2c01      	cmp	r4, #1
 8001bdc:	d005      	beq.n	8001bea <__aeabi_dsub+0x2c6>
 8001bde:	4c1e      	ldr	r4, [pc, #120]	; (8001c58 <__aeabi_dsub+0x334>)
 8001be0:	45a4      	cmp	ip, r4
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x2c2>
 8001be4:	e094      	b.n	8001d10 <__aeabi_dsub+0x3ec>
 8001be6:	4694      	mov	ip, r2
 8001be8:	e759      	b.n	8001a9e <__aeabi_dsub+0x17a>
 8001bea:	4448      	add	r0, r9
 8001bec:	4548      	cmp	r0, r9
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	185b      	adds	r3, r3, r1
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	0004      	movs	r4, r0
 8001bf6:	4252      	negs	r2, r2
 8001bf8:	4490      	add	r8, r2
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	2602      	movs	r6, #2
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	d500      	bpl.n	8001c04 <__aeabi_dsub+0x2e0>
 8001c02:	e0c4      	b.n	8001d8e <__aeabi_dsub+0x46a>
 8001c04:	3e01      	subs	r6, #1
 8001c06:	0763      	lsls	r3, r4, #29
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x2e8>
 8001c0a:	e711      	b.n	8001a30 <__aeabi_dsub+0x10c>
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	46b4      	mov	ip, r6
 8001c10:	0759      	lsls	r1, r3, #29
 8001c12:	08e2      	lsrs	r2, r4, #3
 8001c14:	430a      	orrs	r2, r1
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	490f      	ldr	r1, [pc, #60]	; (8001c58 <__aeabi_dsub+0x334>)
 8001c1a:	458c      	cmp	ip, r1
 8001c1c:	d040      	beq.n	8001ca0 <__aeabi_dsub+0x37c>
 8001c1e:	4661      	mov	r1, ip
 8001c20:	031b      	lsls	r3, r3, #12
 8001c22:	0549      	lsls	r1, r1, #21
 8001c24:	0b1b      	lsrs	r3, r3, #12
 8001c26:	0d49      	lsrs	r1, r1, #21
 8001c28:	e720      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001c2a:	4301      	orrs	r1, r0
 8001c2c:	000c      	movs	r4, r1
 8001c2e:	1e61      	subs	r1, r4, #1
 8001c30:	418c      	sbcs	r4, r1
 8001c32:	444c      	add	r4, r9
 8001c34:	454c      	cmp	r4, r9
 8001c36:	4192      	sbcs	r2, r2
 8001c38:	4252      	negs	r2, r2
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4498      	add	r8, r3
 8001c3e:	4643      	mov	r3, r8
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	d5e0      	bpl.n	8001c06 <__aeabi_dsub+0x2e2>
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__aeabi_dsub+0x334>)
 8001c46:	3601      	adds	r6, #1
 8001c48:	429e      	cmp	r6, r3
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x32a>
 8001c4c:	e09f      	b.n	8001d8e <__aeabi_dsub+0x46a>
 8001c4e:	0031      	movs	r1, r6
 8001c50:	2300      	movs	r3, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	e70a      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	ff7fffff 	.word	0xff7fffff
 8001c60:	fffff801 	.word	0xfffff801
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x34a>
 8001c6c:	e160      	b.n	8001f30 <__aeabi_dsub+0x60c>
 8001c6e:	000a      	movs	r2, r1
 8001c70:	4302      	orrs	r2, r0
 8001c72:	d04d      	beq.n	8001d10 <__aeabi_dsub+0x3ec>
 8001c74:	464a      	mov	r2, r9
 8001c76:	075c      	lsls	r4, r3, #29
 8001c78:	08d2      	lsrs	r2, r2, #3
 8001c7a:	4322      	orrs	r2, r4
 8001c7c:	2480      	movs	r4, #128	; 0x80
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	0324      	lsls	r4, r4, #12
 8001c82:	4223      	tst	r3, r4
 8001c84:	d007      	beq.n	8001c96 <__aeabi_dsub+0x372>
 8001c86:	08ce      	lsrs	r6, r1, #3
 8001c88:	4226      	tst	r6, r4
 8001c8a:	d104      	bne.n	8001c96 <__aeabi_dsub+0x372>
 8001c8c:	465d      	mov	r5, fp
 8001c8e:	0033      	movs	r3, r6
 8001c90:	08c2      	lsrs	r2, r0, #3
 8001c92:	0749      	lsls	r1, r1, #29
 8001c94:	430a      	orrs	r2, r1
 8001c96:	0f51      	lsrs	r1, r2, #29
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	08d2      	lsrs	r2, r2, #3
 8001c9c:	0749      	lsls	r1, r1, #29
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x384>
 8001ca6:	e1c8      	b.n	800203a <__aeabi_dsub+0x716>
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0309      	lsls	r1, r1, #12
 8001cac:	430b      	orrs	r3, r1
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	49d5      	ldr	r1, [pc, #852]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001cb2:	0b1b      	lsrs	r3, r3, #12
 8001cb4:	e6da      	b.n	8001a6c <__aeabi_dsub+0x148>
 8001cb6:	49d5      	ldr	r1, [pc, #852]	; (800200c <__aeabi_dsub+0x6e8>)
 8001cb8:	1ab6      	subs	r6, r6, r2
 8001cba:	400b      	ands	r3, r1
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	e6b5      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	f000 fb21 	bl	8002308 <__clzsi2>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	3218      	adds	r2, #24
 8001cca:	2a1f      	cmp	r2, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_dsub+0x3ac>
 8001cce:	e68f      	b.n	80019f0 <__aeabi_dsub+0xcc>
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	3808      	subs	r0, #8
 8001cd4:	4083      	lsls	r3, r0
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	e692      	b.n	8001a00 <__aeabi_dsub+0xdc>
 8001cda:	4308      	orrs	r0, r1
 8001cdc:	0002      	movs	r2, r0
 8001cde:	1e50      	subs	r0, r2, #1
 8001ce0:	4182      	sbcs	r2, r0
 8001ce2:	e66d      	b.n	80019c0 <__aeabi_dsub+0x9c>
 8001ce4:	4cca      	ldr	r4, [pc, #808]	; (8002010 <__aeabi_dsub+0x6ec>)
 8001ce6:	1c72      	adds	r2, r6, #1
 8001ce8:	4222      	tst	r2, r4
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x3ca>
 8001cec:	e0ad      	b.n	8001e4a <__aeabi_dsub+0x526>
 8001cee:	464a      	mov	r2, r9
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	2e00      	cmp	r6, #0
 8001cf4:	d1b8      	bne.n	8001c68 <__aeabi_dsub+0x344>
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x3d8>
 8001cfa:	e158      	b.n	8001fae <__aeabi_dsub+0x68a>
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	4302      	orrs	r2, r0
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dsub+0x3e0>
 8001d02:	e159      	b.n	8001fb8 <__aeabi_dsub+0x694>
 8001d04:	464a      	mov	r2, r9
 8001d06:	0759      	lsls	r1, r3, #29
 8001d08:	08d2      	lsrs	r2, r2, #3
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	e786      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001d10:	464a      	mov	r2, r9
 8001d12:	0759      	lsls	r1, r3, #29
 8001d14:	08d2      	lsrs	r2, r2, #3
 8001d16:	430a      	orrs	r2, r1
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	e7c1      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001d1c:	4dba      	ldr	r5, [pc, #744]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001d1e:	42aa      	cmp	r2, r5
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x400>
 8001d22:	e11e      	b.n	8001f62 <__aeabi_dsub+0x63e>
 8001d24:	2580      	movs	r5, #128	; 0x80
 8001d26:	042d      	lsls	r5, r5, #16
 8001d28:	432b      	orrs	r3, r5
 8001d2a:	4664      	mov	r4, ip
 8001d2c:	2c38      	cmp	r4, #56	; 0x38
 8001d2e:	dc5d      	bgt.n	8001dec <__aeabi_dsub+0x4c8>
 8001d30:	2c1f      	cmp	r4, #31
 8001d32:	dd00      	ble.n	8001d36 <__aeabi_dsub+0x412>
 8001d34:	e0d0      	b.n	8001ed8 <__aeabi_dsub+0x5b4>
 8001d36:	2520      	movs	r5, #32
 8001d38:	4667      	mov	r7, ip
 8001d3a:	1b2d      	subs	r5, r5, r4
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	001c      	movs	r4, r3
 8001d40:	40fe      	lsrs	r6, r7
 8001d42:	40ac      	lsls	r4, r5
 8001d44:	4334      	orrs	r4, r6
 8001d46:	464e      	mov	r6, r9
 8001d48:	40ae      	lsls	r6, r5
 8001d4a:	0035      	movs	r5, r6
 8001d4c:	40fb      	lsrs	r3, r7
 8001d4e:	1e6e      	subs	r6, r5, #1
 8001d50:	41b5      	sbcs	r5, r6
 8001d52:	1ac9      	subs	r1, r1, r3
 8001d54:	432c      	orrs	r4, r5
 8001d56:	e04e      	b.n	8001df6 <__aeabi_dsub+0x4d2>
 8001d58:	464a      	mov	r2, r9
 8001d5a:	1a14      	subs	r4, r2, r0
 8001d5c:	45a1      	cmp	r9, r4
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4252      	negs	r2, r2
 8001d62:	4690      	mov	r8, r2
 8001d64:	1a5f      	subs	r7, r3, r1
 8001d66:	003a      	movs	r2, r7
 8001d68:	4647      	mov	r7, r8
 8001d6a:	1bd2      	subs	r2, r2, r7
 8001d6c:	4690      	mov	r8, r2
 8001d6e:	0212      	lsls	r2, r2, #8
 8001d70:	d500      	bpl.n	8001d74 <__aeabi_dsub+0x450>
 8001d72:	e08b      	b.n	8001e8c <__aeabi_dsub+0x568>
 8001d74:	4642      	mov	r2, r8
 8001d76:	4322      	orrs	r2, r4
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x458>
 8001d7a:	e630      	b.n	80019de <__aeabi_dsub+0xba>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2500      	movs	r5, #0
 8001d80:	e74d      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001d82:	464a      	mov	r2, r9
 8001d84:	0759      	lsls	r1, r3, #29
 8001d86:	08d2      	lsrs	r2, r2, #3
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	e744      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001d8e:	4642      	mov	r2, r8
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <__aeabi_dsub+0x6e8>)
 8001d92:	0861      	lsrs	r1, r4, #1
 8001d94:	401a      	ands	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4014      	ands	r4, r2
 8001d9c:	430c      	orrs	r4, r1
 8001d9e:	07da      	lsls	r2, r3, #31
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	4698      	mov	r8, r3
 8001da4:	4314      	orrs	r4, r2
 8001da6:	e641      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001da8:	001a      	movs	r2, r3
 8001daa:	3e1f      	subs	r6, #31
 8001dac:	40f2      	lsrs	r2, r6
 8001dae:	0016      	movs	r6, r2
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x498>
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	1a51      	subs	r1, r2, r1
 8001db8:	408b      	lsls	r3, r1
 8001dba:	431c      	orrs	r4, r3
 8001dbc:	1e62      	subs	r2, r4, #1
 8001dbe:	4194      	sbcs	r4, r2
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4334      	orrs	r4, r6
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	e71d      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001dca:	000c      	movs	r4, r1
 8001dcc:	3a20      	subs	r2, #32
 8001dce:	40d4      	lsrs	r4, r2
 8001dd0:	0022      	movs	r2, r4
 8001dd2:	4664      	mov	r4, ip
 8001dd4:	2c20      	cmp	r4, #32
 8001dd6:	d004      	beq.n	8001de2 <__aeabi_dsub+0x4be>
 8001dd8:	2740      	movs	r7, #64	; 0x40
 8001dda:	1b3f      	subs	r7, r7, r4
 8001ddc:	40b9      	lsls	r1, r7
 8001dde:	4308      	orrs	r0, r1
 8001de0:	4680      	mov	r8, r0
 8001de2:	4644      	mov	r4, r8
 8001de4:	1e61      	subs	r1, r4, #1
 8001de6:	418c      	sbcs	r4, r1
 8001de8:	4322      	orrs	r2, r4
 8001dea:	e5e9      	b.n	80019c0 <__aeabi_dsub+0x9c>
 8001dec:	464c      	mov	r4, r9
 8001dee:	4323      	orrs	r3, r4
 8001df0:	001c      	movs	r4, r3
 8001df2:	1e63      	subs	r3, r4, #1
 8001df4:	419c      	sbcs	r4, r3
 8001df6:	1b04      	subs	r4, r0, r4
 8001df8:	42a0      	cmp	r0, r4
 8001dfa:	419b      	sbcs	r3, r3
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	4698      	mov	r8, r3
 8001e02:	465d      	mov	r5, fp
 8001e04:	0016      	movs	r6, r2
 8001e06:	e5e2      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001e08:	464e      	mov	r6, r9
 8001e0a:	431e      	orrs	r6, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x4ec>
 8001e0e:	e0ae      	b.n	8001f6e <__aeabi_dsub+0x64a>
 8001e10:	1e66      	subs	r6, r4, #1
 8001e12:	2c01      	cmp	r4, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x4f4>
 8001e16:	e0fd      	b.n	8002014 <__aeabi_dsub+0x6f0>
 8001e18:	4f7b      	ldr	r7, [pc, #492]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001e1a:	42bc      	cmp	r4, r7
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x4fc>
 8001e1e:	e107      	b.n	8002030 <__aeabi_dsub+0x70c>
 8001e20:	46b4      	mov	ip, r6
 8001e22:	e69b      	b.n	8001b5c <__aeabi_dsub+0x238>
 8001e24:	4664      	mov	r4, ip
 8001e26:	2220      	movs	r2, #32
 8001e28:	1b12      	subs	r2, r2, r4
 8001e2a:	000c      	movs	r4, r1
 8001e2c:	4094      	lsls	r4, r2
 8001e2e:	0007      	movs	r7, r0
 8001e30:	4090      	lsls	r0, r2
 8001e32:	46a0      	mov	r8, r4
 8001e34:	4664      	mov	r4, ip
 8001e36:	1e42      	subs	r2, r0, #1
 8001e38:	4190      	sbcs	r0, r2
 8001e3a:	4662      	mov	r2, ip
 8001e3c:	40e7      	lsrs	r7, r4
 8001e3e:	4644      	mov	r4, r8
 8001e40:	40d1      	lsrs	r1, r2
 8001e42:	433c      	orrs	r4, r7
 8001e44:	4304      	orrs	r4, r0
 8001e46:	185b      	adds	r3, r3, r1
 8001e48:	e6f3      	b.n	8001c32 <__aeabi_dsub+0x30e>
 8001e4a:	4c6f      	ldr	r4, [pc, #444]	; (8002008 <__aeabi_dsub+0x6e4>)
 8001e4c:	42a2      	cmp	r2, r4
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x52e>
 8001e50:	e0d5      	b.n	8001ffe <__aeabi_dsub+0x6da>
 8001e52:	4448      	add	r0, r9
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	4548      	cmp	r0, r9
 8001e58:	4189      	sbcs	r1, r1
 8001e5a:	4249      	negs	r1, r1
 8001e5c:	185b      	adds	r3, r3, r1
 8001e5e:	07dc      	lsls	r4, r3, #31
 8001e60:	0840      	lsrs	r0, r0, #1
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	4698      	mov	r8, r3
 8001e66:	0016      	movs	r6, r2
 8001e68:	4304      	orrs	r4, r0
 8001e6a:	e6cc      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x54e>
 8001e70:	e082      	b.n	8001f78 <__aeabi_dsub+0x654>
 8001e72:	000a      	movs	r2, r1
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d140      	bne.n	8001efa <__aeabi_dsub+0x5d6>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	e713      	b.n	8001ca8 <__aeabi_dsub+0x384>
 8001e80:	074b      	lsls	r3, r1, #29
 8001e82:	08c2      	lsrs	r2, r0, #3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	465d      	mov	r5, fp
 8001e88:	08cb      	lsrs	r3, r1, #3
 8001e8a:	e6c5      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	1a84      	subs	r4, r0, r2
 8001e90:	42a0      	cmp	r0, r4
 8001e92:	4192      	sbcs	r2, r2
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	4252      	negs	r2, r2
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	465d      	mov	r5, fp
 8001e9e:	e59e      	b.n	80019de <__aeabi_dsub+0xba>
 8001ea0:	464a      	mov	r2, r9
 8001ea2:	0759      	lsls	r1, r3, #29
 8001ea4:	08d2      	lsrs	r2, r2, #3
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	e6f9      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001eac:	464a      	mov	r2, r9
 8001eae:	1a14      	subs	r4, r2, r0
 8001eb0:	45a1      	cmp	r9, r4
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	1a5b      	subs	r3, r3, r1
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	4698      	mov	r8, r3
 8001ebc:	2601      	movs	r6, #1
 8001ebe:	e586      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001ec0:	464a      	mov	r2, r9
 8001ec2:	0759      	lsls	r1, r3, #29
 8001ec4:	08d2      	lsrs	r2, r2, #3
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	e6a5      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001ecc:	464c      	mov	r4, r9
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	001c      	movs	r4, r3
 8001ed2:	1e63      	subs	r3, r4, #1
 8001ed4:	419c      	sbcs	r4, r3
 8001ed6:	e65b      	b.n	8001b90 <__aeabi_dsub+0x26c>
 8001ed8:	4665      	mov	r5, ip
 8001eda:	001e      	movs	r6, r3
 8001edc:	3d20      	subs	r5, #32
 8001ede:	40ee      	lsrs	r6, r5
 8001ee0:	2c20      	cmp	r4, #32
 8001ee2:	d005      	beq.n	8001ef0 <__aeabi_dsub+0x5cc>
 8001ee4:	2540      	movs	r5, #64	; 0x40
 8001ee6:	1b2d      	subs	r5, r5, r4
 8001ee8:	40ab      	lsls	r3, r5
 8001eea:	464c      	mov	r4, r9
 8001eec:	431c      	orrs	r4, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	4654      	mov	r4, sl
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	4334      	orrs	r4, r6
 8001ef8:	e77d      	b.n	8001df6 <__aeabi_dsub+0x4d2>
 8001efa:	074b      	lsls	r3, r1, #29
 8001efc:	08c2      	lsrs	r2, r0, #3
 8001efe:	431a      	orrs	r2, r3
 8001f00:	465d      	mov	r5, fp
 8001f02:	08cb      	lsrs	r3, r1, #3
 8001f04:	e6cc      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f06:	000a      	movs	r2, r1
 8001f08:	4302      	orrs	r2, r0
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x5ea>
 8001f0c:	e736      	b.n	8001d7c <__aeabi_dsub+0x458>
 8001f0e:	074b      	lsls	r3, r1, #29
 8001f10:	08c2      	lsrs	r2, r0, #3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	465d      	mov	r5, fp
 8001f16:	08cb      	lsrs	r3, r1, #3
 8001f18:	e681      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001f1a:	464a      	mov	r2, r9
 8001f1c:	1a84      	subs	r4, r0, r2
 8001f1e:	42a0      	cmp	r0, r4
 8001f20:	4192      	sbcs	r2, r2
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	4252      	negs	r2, r2
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	4698      	mov	r8, r3
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	2601      	movs	r6, #1
 8001f2e:	e54e      	b.n	80019ce <__aeabi_dsub+0xaa>
 8001f30:	074b      	lsls	r3, r1, #29
 8001f32:	08c2      	lsrs	r2, r0, #3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	08cb      	lsrs	r3, r1, #3
 8001f38:	e6b2      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f3a:	464a      	mov	r2, r9
 8001f3c:	1a14      	subs	r4, r2, r0
 8001f3e:	45a1      	cmp	r9, r4
 8001f40:	4192      	sbcs	r2, r2
 8001f42:	1a5f      	subs	r7, r3, r1
 8001f44:	4252      	negs	r2, r2
 8001f46:	1aba      	subs	r2, r7, r2
 8001f48:	4690      	mov	r8, r2
 8001f4a:	0212      	lsls	r2, r2, #8
 8001f4c:	d56b      	bpl.n	8002026 <__aeabi_dsub+0x702>
 8001f4e:	464a      	mov	r2, r9
 8001f50:	1a84      	subs	r4, r0, r2
 8001f52:	42a0      	cmp	r0, r4
 8001f54:	4192      	sbcs	r2, r2
 8001f56:	1acb      	subs	r3, r1, r3
 8001f58:	4252      	negs	r2, r2
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	465d      	mov	r5, fp
 8001f60:	e564      	b.n	8001a2c <__aeabi_dsub+0x108>
 8001f62:	074b      	lsls	r3, r1, #29
 8001f64:	08c2      	lsrs	r2, r0, #3
 8001f66:	431a      	orrs	r2, r3
 8001f68:	465d      	mov	r5, fp
 8001f6a:	08cb      	lsrs	r3, r1, #3
 8001f6c:	e698      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001f6e:	074b      	lsls	r3, r1, #29
 8001f70:	08c2      	lsrs	r2, r0, #3
 8001f72:	431a      	orrs	r2, r3
 8001f74:	08cb      	lsrs	r3, r1, #3
 8001f76:	e64f      	b.n	8001c18 <__aeabi_dsub+0x2f4>
 8001f78:	000a      	movs	r2, r1
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	d090      	beq.n	8001ea0 <__aeabi_dsub+0x57c>
 8001f7e:	464a      	mov	r2, r9
 8001f80:	075c      	lsls	r4, r3, #29
 8001f82:	08d2      	lsrs	r2, r2, #3
 8001f84:	4314      	orrs	r4, r2
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	0312      	lsls	r2, r2, #12
 8001f8c:	4213      	tst	r3, r2
 8001f8e:	d008      	beq.n	8001fa2 <__aeabi_dsub+0x67e>
 8001f90:	08ce      	lsrs	r6, r1, #3
 8001f92:	4216      	tst	r6, r2
 8001f94:	d105      	bne.n	8001fa2 <__aeabi_dsub+0x67e>
 8001f96:	08c0      	lsrs	r0, r0, #3
 8001f98:	0749      	lsls	r1, r1, #29
 8001f9a:	4308      	orrs	r0, r1
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	465d      	mov	r5, fp
 8001fa0:	0033      	movs	r3, r6
 8001fa2:	0f61      	lsrs	r1, r4, #29
 8001fa4:	00e2      	lsls	r2, r4, #3
 8001fa6:	0749      	lsls	r1, r1, #29
 8001fa8:	08d2      	lsrs	r2, r2, #3
 8001faa:	430a      	orrs	r2, r1
 8001fac:	e678      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 8001fae:	074b      	lsls	r3, r1, #29
 8001fb0:	08c2      	lsrs	r2, r0, #3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	08cb      	lsrs	r3, r1, #3
 8001fb6:	e632      	b.n	8001c1e <__aeabi_dsub+0x2fa>
 8001fb8:	4448      	add	r0, r9
 8001fba:	185b      	adds	r3, r3, r1
 8001fbc:	4548      	cmp	r0, r9
 8001fbe:	4192      	sbcs	r2, r2
 8001fc0:	4698      	mov	r8, r3
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	4490      	add	r8, r2
 8001fc6:	4643      	mov	r3, r8
 8001fc8:	0004      	movs	r4, r0
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	d400      	bmi.n	8001fd0 <__aeabi_dsub+0x6ac>
 8001fce:	e61a      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001fd0:	4642      	mov	r2, r8
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <__aeabi_dsub+0x6e8>)
 8001fd4:	2601      	movs	r6, #1
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4690      	mov	r8, r2
 8001fda:	e614      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8001fdc:	4666      	mov	r6, ip
 8001fde:	001f      	movs	r7, r3
 8001fe0:	3e20      	subs	r6, #32
 8001fe2:	40f7      	lsrs	r7, r6
 8001fe4:	2c20      	cmp	r4, #32
 8001fe6:	d005      	beq.n	8001ff4 <__aeabi_dsub+0x6d0>
 8001fe8:	2640      	movs	r6, #64	; 0x40
 8001fea:	1b36      	subs	r6, r6, r4
 8001fec:	40b3      	lsls	r3, r6
 8001fee:	464c      	mov	r4, r9
 8001ff0:	431c      	orrs	r4, r3
 8001ff2:	46a2      	mov	sl, r4
 8001ff4:	4654      	mov	r4, sl
 8001ff6:	1e63      	subs	r3, r4, #1
 8001ff8:	419c      	sbcs	r4, r3
 8001ffa:	433c      	orrs	r4, r7
 8001ffc:	e5c8      	b.n	8001b90 <__aeabi_dsub+0x26c>
 8001ffe:	0011      	movs	r1, r2
 8002000:	2300      	movs	r3, #0
 8002002:	2200      	movs	r2, #0
 8002004:	e532      	b.n	8001a6c <__aeabi_dsub+0x148>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	ff7fffff 	.word	0xff7fffff
 8002010:	000007fe 	.word	0x000007fe
 8002014:	464a      	mov	r2, r9
 8002016:	1814      	adds	r4, r2, r0
 8002018:	4284      	cmp	r4, r0
 800201a:	4192      	sbcs	r2, r2
 800201c:	185b      	adds	r3, r3, r1
 800201e:	4698      	mov	r8, r3
 8002020:	4252      	negs	r2, r2
 8002022:	4490      	add	r8, r2
 8002024:	e5e9      	b.n	8001bfa <__aeabi_dsub+0x2d6>
 8002026:	4642      	mov	r2, r8
 8002028:	4322      	orrs	r2, r4
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x70a>
 800202c:	e6a6      	b.n	8001d7c <__aeabi_dsub+0x458>
 800202e:	e5ea      	b.n	8001c06 <__aeabi_dsub+0x2e2>
 8002030:	074b      	lsls	r3, r1, #29
 8002032:	08c2      	lsrs	r2, r0, #3
 8002034:	431a      	orrs	r2, r3
 8002036:	08cb      	lsrs	r3, r1, #3
 8002038:	e632      	b.n	8001ca0 <__aeabi_dsub+0x37c>
 800203a:	2200      	movs	r2, #0
 800203c:	4901      	ldr	r1, [pc, #4]	; (8002044 <__aeabi_dsub+0x720>)
 800203e:	0013      	movs	r3, r2
 8002040:	e514      	b.n	8001a6c <__aeabi_dsub+0x148>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	000007ff 	.word	0x000007ff

08002048 <__aeabi_i2d>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	2800      	cmp	r0, #0
 800204c:	d016      	beq.n	800207c <__aeabi_i2d+0x34>
 800204e:	17c3      	asrs	r3, r0, #31
 8002050:	18c5      	adds	r5, r0, r3
 8002052:	405d      	eors	r5, r3
 8002054:	0fc4      	lsrs	r4, r0, #31
 8002056:	0028      	movs	r0, r5
 8002058:	f000 f956 	bl	8002308 <__clzsi2>
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <__aeabi_i2d+0x5c>)
 800205e:	1a12      	subs	r2, r2, r0
 8002060:	280a      	cmp	r0, #10
 8002062:	dc16      	bgt.n	8002092 <__aeabi_i2d+0x4a>
 8002064:	0003      	movs	r3, r0
 8002066:	002e      	movs	r6, r5
 8002068:	3315      	adds	r3, #21
 800206a:	409e      	lsls	r6, r3
 800206c:	230b      	movs	r3, #11
 800206e:	1a18      	subs	r0, r3, r0
 8002070:	40c5      	lsrs	r5, r0
 8002072:	0553      	lsls	r3, r2, #21
 8002074:	032d      	lsls	r5, r5, #12
 8002076:	0b2d      	lsrs	r5, r5, #12
 8002078:	0d5b      	lsrs	r3, r3, #21
 800207a:	e003      	b.n	8002084 <__aeabi_i2d+0x3c>
 800207c:	2400      	movs	r4, #0
 800207e:	2300      	movs	r3, #0
 8002080:	2500      	movs	r5, #0
 8002082:	2600      	movs	r6, #0
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	432b      	orrs	r3, r5
 8002088:	07e4      	lsls	r4, r4, #31
 800208a:	4323      	orrs	r3, r4
 800208c:	0030      	movs	r0, r6
 800208e:	0019      	movs	r1, r3
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	380b      	subs	r0, #11
 8002094:	4085      	lsls	r5, r0
 8002096:	0553      	lsls	r3, r2, #21
 8002098:	032d      	lsls	r5, r5, #12
 800209a:	2600      	movs	r6, #0
 800209c:	0b2d      	lsrs	r5, r5, #12
 800209e:	0d5b      	lsrs	r3, r3, #21
 80020a0:	e7f0      	b.n	8002084 <__aeabi_i2d+0x3c>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	0000041e 	.word	0x0000041e

080020a8 <__aeabi_ui2d>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	1e04      	subs	r4, r0, #0
 80020ac:	d010      	beq.n	80020d0 <__aeabi_ui2d+0x28>
 80020ae:	f000 f92b 	bl	8002308 <__clzsi2>
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <__aeabi_ui2d+0x48>)
 80020b4:	1a1b      	subs	r3, r3, r0
 80020b6:	280a      	cmp	r0, #10
 80020b8:	dc11      	bgt.n	80020de <__aeabi_ui2d+0x36>
 80020ba:	220b      	movs	r2, #11
 80020bc:	0021      	movs	r1, r4
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	40d1      	lsrs	r1, r2
 80020c2:	3015      	adds	r0, #21
 80020c4:	030a      	lsls	r2, r1, #12
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	4084      	lsls	r4, r0
 80020ca:	0b12      	lsrs	r2, r2, #12
 80020cc:	0d5b      	lsrs	r3, r3, #21
 80020ce:	e001      	b.n	80020d4 <__aeabi_ui2d+0x2c>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2200      	movs	r2, #0
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	4313      	orrs	r3, r2
 80020d8:	0020      	movs	r0, r4
 80020da:	0019      	movs	r1, r3
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	0022      	movs	r2, r4
 80020e0:	380b      	subs	r0, #11
 80020e2:	4082      	lsls	r2, r0
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	2400      	movs	r4, #0
 80020ea:	0b12      	lsrs	r2, r2, #12
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	e7f1      	b.n	80020d4 <__aeabi_ui2d+0x2c>
 80020f0:	0000041e 	.word	0x0000041e

080020f4 <__aeabi_f2d>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0043      	lsls	r3, r0, #1
 80020f8:	0246      	lsls	r6, r0, #9
 80020fa:	0fc4      	lsrs	r4, r0, #31
 80020fc:	20fe      	movs	r0, #254	; 0xfe
 80020fe:	0e1b      	lsrs	r3, r3, #24
 8002100:	1c59      	adds	r1, r3, #1
 8002102:	0a75      	lsrs	r5, r6, #9
 8002104:	4208      	tst	r0, r1
 8002106:	d00c      	beq.n	8002122 <__aeabi_f2d+0x2e>
 8002108:	22e0      	movs	r2, #224	; 0xe0
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4694      	mov	ip, r2
 800210e:	076d      	lsls	r5, r5, #29
 8002110:	0b36      	lsrs	r6, r6, #12
 8002112:	4463      	add	r3, ip
 8002114:	051b      	lsls	r3, r3, #20
 8002116:	4333      	orrs	r3, r6
 8002118:	07e4      	lsls	r4, r4, #31
 800211a:	4323      	orrs	r3, r4
 800211c:	0028      	movs	r0, r5
 800211e:	0019      	movs	r1, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <__aeabi_f2d+0x5c>
 8002126:	2d00      	cmp	r5, #0
 8002128:	d01b      	beq.n	8002162 <__aeabi_f2d+0x6e>
 800212a:	0028      	movs	r0, r5
 800212c:	f000 f8ec 	bl	8002308 <__clzsi2>
 8002130:	280a      	cmp	r0, #10
 8002132:	dc1c      	bgt.n	800216e <__aeabi_f2d+0x7a>
 8002134:	230b      	movs	r3, #11
 8002136:	002a      	movs	r2, r5
 8002138:	1a1b      	subs	r3, r3, r0
 800213a:	40da      	lsrs	r2, r3
 800213c:	0003      	movs	r3, r0
 800213e:	3315      	adds	r3, #21
 8002140:	409d      	lsls	r5, r3
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <__aeabi_f2d+0x88>)
 8002144:	0312      	lsls	r2, r2, #12
 8002146:	1a1b      	subs	r3, r3, r0
 8002148:	055b      	lsls	r3, r3, #21
 800214a:	0b16      	lsrs	r6, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7e1      	b.n	8002114 <__aeabi_f2d+0x20>
 8002150:	2d00      	cmp	r5, #0
 8002152:	d009      	beq.n	8002168 <__aeabi_f2d+0x74>
 8002154:	0b32      	lsrs	r2, r6, #12
 8002156:	2680      	movs	r6, #128	; 0x80
 8002158:	0336      	lsls	r6, r6, #12
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <__aeabi_f2d+0x8c>)
 800215c:	076d      	lsls	r5, r5, #29
 800215e:	4316      	orrs	r6, r2
 8002160:	e7d8      	b.n	8002114 <__aeabi_f2d+0x20>
 8002162:	2300      	movs	r3, #0
 8002164:	2600      	movs	r6, #0
 8002166:	e7d5      	b.n	8002114 <__aeabi_f2d+0x20>
 8002168:	2600      	movs	r6, #0
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <__aeabi_f2d+0x8c>)
 800216c:	e7d2      	b.n	8002114 <__aeabi_f2d+0x20>
 800216e:	0003      	movs	r3, r0
 8002170:	002a      	movs	r2, r5
 8002172:	3b0b      	subs	r3, #11
 8002174:	409a      	lsls	r2, r3
 8002176:	2500      	movs	r5, #0
 8002178:	e7e3      	b.n	8002142 <__aeabi_f2d+0x4e>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	00000389 	.word	0x00000389
 8002180:	000007ff 	.word	0x000007ff

08002184 <__aeabi_d2f>:
 8002184:	0002      	movs	r2, r0
 8002186:	004b      	lsls	r3, r1, #1
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	0308      	lsls	r0, r1, #12
 800218c:	0d5b      	lsrs	r3, r3, #21
 800218e:	4e3d      	ldr	r6, [pc, #244]	; (8002284 <__aeabi_d2f+0x100>)
 8002190:	0fcc      	lsrs	r4, r1, #31
 8002192:	0a40      	lsrs	r0, r0, #9
 8002194:	0f51      	lsrs	r1, r2, #29
 8002196:	1c5f      	adds	r7, r3, #1
 8002198:	4308      	orrs	r0, r1
 800219a:	00d5      	lsls	r5, r2, #3
 800219c:	4237      	tst	r7, r6
 800219e:	d00a      	beq.n	80021b6 <__aeabi_d2f+0x32>
 80021a0:	4939      	ldr	r1, [pc, #228]	; (8002288 <__aeabi_d2f+0x104>)
 80021a2:	185e      	adds	r6, r3, r1
 80021a4:	2efe      	cmp	r6, #254	; 0xfe
 80021a6:	dd16      	ble.n	80021d6 <__aeabi_d2f+0x52>
 80021a8:	23ff      	movs	r3, #255	; 0xff
 80021aa:	2100      	movs	r1, #0
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	430b      	orrs	r3, r1
 80021b0:	07e0      	lsls	r0, r4, #31
 80021b2:	4318      	orrs	r0, r3
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <__aeabi_d2f+0x44>
 80021ba:	4328      	orrs	r0, r5
 80021bc:	d027      	beq.n	800220e <__aeabi_d2f+0x8a>
 80021be:	2105      	movs	r1, #5
 80021c0:	0189      	lsls	r1, r1, #6
 80021c2:	0a49      	lsrs	r1, r1, #9
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e7f1      	b.n	80021ac <__aeabi_d2f+0x28>
 80021c8:	4305      	orrs	r5, r0
 80021ca:	d0ed      	beq.n	80021a8 <__aeabi_d2f+0x24>
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	03c9      	lsls	r1, r1, #15
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	4301      	orrs	r1, r0
 80021d4:	e7ea      	b.n	80021ac <__aeabi_d2f+0x28>
 80021d6:	2e00      	cmp	r6, #0
 80021d8:	dd1c      	ble.n	8002214 <__aeabi_d2f+0x90>
 80021da:	0192      	lsls	r2, r2, #6
 80021dc:	0011      	movs	r1, r2
 80021de:	1e4a      	subs	r2, r1, #1
 80021e0:	4191      	sbcs	r1, r2
 80021e2:	00c0      	lsls	r0, r0, #3
 80021e4:	0f6d      	lsrs	r5, r5, #29
 80021e6:	4301      	orrs	r1, r0
 80021e8:	4329      	orrs	r1, r5
 80021ea:	074b      	lsls	r3, r1, #29
 80021ec:	d048      	beq.n	8002280 <__aeabi_d2f+0xfc>
 80021ee:	230f      	movs	r3, #15
 80021f0:	400b      	ands	r3, r1
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d000      	beq.n	80021f8 <__aeabi_d2f+0x74>
 80021f6:	3104      	adds	r1, #4
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	04db      	lsls	r3, r3, #19
 80021fc:	400b      	ands	r3, r1
 80021fe:	d03f      	beq.n	8002280 <__aeabi_d2f+0xfc>
 8002200:	1c72      	adds	r2, r6, #1
 8002202:	2efe      	cmp	r6, #254	; 0xfe
 8002204:	d0d0      	beq.n	80021a8 <__aeabi_d2f+0x24>
 8002206:	0189      	lsls	r1, r1, #6
 8002208:	0a49      	lsrs	r1, r1, #9
 800220a:	b2d3      	uxtb	r3, r2
 800220c:	e7ce      	b.n	80021ac <__aeabi_d2f+0x28>
 800220e:	2300      	movs	r3, #0
 8002210:	2100      	movs	r1, #0
 8002212:	e7cb      	b.n	80021ac <__aeabi_d2f+0x28>
 8002214:	0032      	movs	r2, r6
 8002216:	3217      	adds	r2, #23
 8002218:	db22      	blt.n	8002260 <__aeabi_d2f+0xdc>
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	221e      	movs	r2, #30
 800221e:	0409      	lsls	r1, r1, #16
 8002220:	4308      	orrs	r0, r1
 8002222:	1b92      	subs	r2, r2, r6
 8002224:	2a1f      	cmp	r2, #31
 8002226:	dd1d      	ble.n	8002264 <__aeabi_d2f+0xe0>
 8002228:	2102      	movs	r1, #2
 800222a:	4249      	negs	r1, r1
 800222c:	1b8e      	subs	r6, r1, r6
 800222e:	0001      	movs	r1, r0
 8002230:	40f1      	lsrs	r1, r6
 8002232:	000e      	movs	r6, r1
 8002234:	2a20      	cmp	r2, #32
 8002236:	d004      	beq.n	8002242 <__aeabi_d2f+0xbe>
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <__aeabi_d2f+0x108>)
 800223a:	4694      	mov	ip, r2
 800223c:	4463      	add	r3, ip
 800223e:	4098      	lsls	r0, r3
 8002240:	4305      	orrs	r5, r0
 8002242:	0029      	movs	r1, r5
 8002244:	1e4d      	subs	r5, r1, #1
 8002246:	41a9      	sbcs	r1, r5
 8002248:	4331      	orrs	r1, r6
 800224a:	2600      	movs	r6, #0
 800224c:	074b      	lsls	r3, r1, #29
 800224e:	d1ce      	bne.n	80021ee <__aeabi_d2f+0x6a>
 8002250:	2080      	movs	r0, #128	; 0x80
 8002252:	000b      	movs	r3, r1
 8002254:	04c0      	lsls	r0, r0, #19
 8002256:	2201      	movs	r2, #1
 8002258:	4003      	ands	r3, r0
 800225a:	4201      	tst	r1, r0
 800225c:	d1d3      	bne.n	8002206 <__aeabi_d2f+0x82>
 800225e:	e7af      	b.n	80021c0 <__aeabi_d2f+0x3c>
 8002260:	2300      	movs	r3, #0
 8002262:	e7ac      	b.n	80021be <__aeabi_d2f+0x3a>
 8002264:	490a      	ldr	r1, [pc, #40]	; (8002290 <__aeabi_d2f+0x10c>)
 8002266:	468c      	mov	ip, r1
 8002268:	0029      	movs	r1, r5
 800226a:	4463      	add	r3, ip
 800226c:	40d1      	lsrs	r1, r2
 800226e:	409d      	lsls	r5, r3
 8002270:	000a      	movs	r2, r1
 8002272:	0029      	movs	r1, r5
 8002274:	4098      	lsls	r0, r3
 8002276:	1e4d      	subs	r5, r1, #1
 8002278:	41a9      	sbcs	r1, r5
 800227a:	4301      	orrs	r1, r0
 800227c:	4311      	orrs	r1, r2
 800227e:	e7e4      	b.n	800224a <__aeabi_d2f+0xc6>
 8002280:	0033      	movs	r3, r6
 8002282:	e79d      	b.n	80021c0 <__aeabi_d2f+0x3c>
 8002284:	000007fe 	.word	0x000007fe
 8002288:	fffffc80 	.word	0xfffffc80
 800228c:	fffffca2 	.word	0xfffffca2
 8002290:	fffffc82 	.word	0xfffffc82

08002294 <__aeabi_cfrcmple>:
 8002294:	4684      	mov	ip, r0
 8002296:	1c08      	adds	r0, r1, #0
 8002298:	4661      	mov	r1, ip
 800229a:	e7ff      	b.n	800229c <__aeabi_cfcmpeq>

0800229c <__aeabi_cfcmpeq>:
 800229c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800229e:	f000 f8d1 	bl	8002444 <__lesf2>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d401      	bmi.n	80022aa <__aeabi_cfcmpeq+0xe>
 80022a6:	2100      	movs	r1, #0
 80022a8:	42c8      	cmn	r0, r1
 80022aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080022ac <__aeabi_fcmpeq>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	f000 f855 	bl	800235c <__eqsf2>
 80022b2:	4240      	negs	r0, r0
 80022b4:	3001      	adds	r0, #1
 80022b6:	bd10      	pop	{r4, pc}

080022b8 <__aeabi_fcmplt>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	f000 f8c3 	bl	8002444 <__lesf2>
 80022be:	2800      	cmp	r0, #0
 80022c0:	db01      	blt.n	80022c6 <__aeabi_fcmplt+0xe>
 80022c2:	2000      	movs	r0, #0
 80022c4:	bd10      	pop	{r4, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	bd10      	pop	{r4, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)

080022cc <__aeabi_fcmple>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	f000 f8b9 	bl	8002444 <__lesf2>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	dd01      	ble.n	80022da <__aeabi_fcmple+0xe>
 80022d6:	2000      	movs	r0, #0
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	2001      	movs	r0, #1
 80022dc:	bd10      	pop	{r4, pc}
 80022de:	46c0      	nop			; (mov r8, r8)

080022e0 <__aeabi_fcmpgt>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	f000 f863 	bl	80023ac <__gesf2>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	dc01      	bgt.n	80022ee <__aeabi_fcmpgt+0xe>
 80022ea:	2000      	movs	r0, #0
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	2001      	movs	r0, #1
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)

080022f4 <__aeabi_fcmpge>:
 80022f4:	b510      	push	{r4, lr}
 80022f6:	f000 f859 	bl	80023ac <__gesf2>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	da01      	bge.n	8002302 <__aeabi_fcmpge+0xe>
 80022fe:	2000      	movs	r0, #0
 8002300:	bd10      	pop	{r4, pc}
 8002302:	2001      	movs	r0, #1
 8002304:	bd10      	pop	{r4, pc}
 8002306:	46c0      	nop			; (mov r8, r8)

08002308 <__clzsi2>:
 8002308:	211c      	movs	r1, #28
 800230a:	2301      	movs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4298      	cmp	r0, r3
 8002310:	d301      	bcc.n	8002316 <__clzsi2+0xe>
 8002312:	0c00      	lsrs	r0, r0, #16
 8002314:	3910      	subs	r1, #16
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	4298      	cmp	r0, r3
 800231a:	d301      	bcc.n	8002320 <__clzsi2+0x18>
 800231c:	0a00      	lsrs	r0, r0, #8
 800231e:	3908      	subs	r1, #8
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	4298      	cmp	r0, r3
 8002324:	d301      	bcc.n	800232a <__clzsi2+0x22>
 8002326:	0900      	lsrs	r0, r0, #4
 8002328:	3904      	subs	r1, #4
 800232a:	a202      	add	r2, pc, #8	; (adr r2, 8002334 <__clzsi2+0x2c>)
 800232c:	5c10      	ldrb	r0, [r2, r0]
 800232e:	1840      	adds	r0, r0, r1
 8002330:	4770      	bx	lr
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	02020304 	.word	0x02020304
 8002338:	01010101 	.word	0x01010101
	...

08002344 <__clzdi2>:
 8002344:	b510      	push	{r4, lr}
 8002346:	2900      	cmp	r1, #0
 8002348:	d103      	bne.n	8002352 <__clzdi2+0xe>
 800234a:	f7ff ffdd 	bl	8002308 <__clzsi2>
 800234e:	3020      	adds	r0, #32
 8002350:	e002      	b.n	8002358 <__clzdi2+0x14>
 8002352:	1c08      	adds	r0, r1, #0
 8002354:	f7ff ffd8 	bl	8002308 <__clzsi2>
 8002358:	bd10      	pop	{r4, pc}
 800235a:	46c0      	nop			; (mov r8, r8)

0800235c <__eqsf2>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0042      	lsls	r2, r0, #1
 8002360:	024e      	lsls	r6, r1, #9
 8002362:	004c      	lsls	r4, r1, #1
 8002364:	0245      	lsls	r5, r0, #9
 8002366:	0a6d      	lsrs	r5, r5, #9
 8002368:	0e12      	lsrs	r2, r2, #24
 800236a:	0fc3      	lsrs	r3, r0, #31
 800236c:	0a76      	lsrs	r6, r6, #9
 800236e:	0e24      	lsrs	r4, r4, #24
 8002370:	0fc9      	lsrs	r1, r1, #31
 8002372:	2aff      	cmp	r2, #255	; 0xff
 8002374:	d00f      	beq.n	8002396 <__eqsf2+0x3a>
 8002376:	2cff      	cmp	r4, #255	; 0xff
 8002378:	d011      	beq.n	800239e <__eqsf2+0x42>
 800237a:	2001      	movs	r0, #1
 800237c:	42a2      	cmp	r2, r4
 800237e:	d000      	beq.n	8002382 <__eqsf2+0x26>
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	42b5      	cmp	r5, r6
 8002384:	d1fc      	bne.n	8002380 <__eqsf2+0x24>
 8002386:	428b      	cmp	r3, r1
 8002388:	d00d      	beq.n	80023a6 <__eqsf2+0x4a>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d1f8      	bne.n	8002380 <__eqsf2+0x24>
 800238e:	0028      	movs	r0, r5
 8002390:	1e45      	subs	r5, r0, #1
 8002392:	41a8      	sbcs	r0, r5
 8002394:	e7f4      	b.n	8002380 <__eqsf2+0x24>
 8002396:	2001      	movs	r0, #1
 8002398:	2d00      	cmp	r5, #0
 800239a:	d1f1      	bne.n	8002380 <__eqsf2+0x24>
 800239c:	e7eb      	b.n	8002376 <__eqsf2+0x1a>
 800239e:	2001      	movs	r0, #1
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	d1ed      	bne.n	8002380 <__eqsf2+0x24>
 80023a4:	e7e9      	b.n	800237a <__eqsf2+0x1e>
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7ea      	b.n	8002380 <__eqsf2+0x24>
 80023aa:	46c0      	nop			; (mov r8, r8)

080023ac <__gesf2>:
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	0042      	lsls	r2, r0, #1
 80023b0:	0246      	lsls	r6, r0, #9
 80023b2:	024d      	lsls	r5, r1, #9
 80023b4:	004c      	lsls	r4, r1, #1
 80023b6:	0fc3      	lsrs	r3, r0, #31
 80023b8:	0a76      	lsrs	r6, r6, #9
 80023ba:	0e12      	lsrs	r2, r2, #24
 80023bc:	0a6d      	lsrs	r5, r5, #9
 80023be:	0e24      	lsrs	r4, r4, #24
 80023c0:	0fc8      	lsrs	r0, r1, #31
 80023c2:	2aff      	cmp	r2, #255	; 0xff
 80023c4:	d01f      	beq.n	8002406 <__gesf2+0x5a>
 80023c6:	2cff      	cmp	r4, #255	; 0xff
 80023c8:	d010      	beq.n	80023ec <__gesf2+0x40>
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d11f      	bne.n	800240e <__gesf2+0x62>
 80023ce:	4271      	negs	r1, r6
 80023d0:	4171      	adcs	r1, r6
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	d101      	bne.n	80023da <__gesf2+0x2e>
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d01e      	beq.n	8002418 <__gesf2+0x6c>
 80023da:	2900      	cmp	r1, #0
 80023dc:	d10e      	bne.n	80023fc <__gesf2+0x50>
 80023de:	4283      	cmp	r3, r0
 80023e0:	d01e      	beq.n	8002420 <__gesf2+0x74>
 80023e2:	2102      	movs	r1, #2
 80023e4:	1e58      	subs	r0, r3, #1
 80023e6:	4008      	ands	r0, r1
 80023e8:	3801      	subs	r0, #1
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ec:	2d00      	cmp	r5, #0
 80023ee:	d126      	bne.n	800243e <__gesf2+0x92>
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	d1f4      	bne.n	80023de <__gesf2+0x32>
 80023f4:	4271      	negs	r1, r6
 80023f6:	4171      	adcs	r1, r6
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d0f0      	beq.n	80023de <__gesf2+0x32>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1f4      	bne.n	80023ea <__gesf2+0x3e>
 8002400:	2001      	movs	r0, #1
 8002402:	4240      	negs	r0, r0
 8002404:	e7f1      	b.n	80023ea <__gesf2+0x3e>
 8002406:	2e00      	cmp	r6, #0
 8002408:	d119      	bne.n	800243e <__gesf2+0x92>
 800240a:	2cff      	cmp	r4, #255	; 0xff
 800240c:	d0ee      	beq.n	80023ec <__gesf2+0x40>
 800240e:	2c00      	cmp	r4, #0
 8002410:	d1e5      	bne.n	80023de <__gesf2+0x32>
 8002412:	2d00      	cmp	r5, #0
 8002414:	d1e3      	bne.n	80023de <__gesf2+0x32>
 8002416:	e7e4      	b.n	80023e2 <__gesf2+0x36>
 8002418:	2000      	movs	r0, #0
 800241a:	2e00      	cmp	r6, #0
 800241c:	d0e5      	beq.n	80023ea <__gesf2+0x3e>
 800241e:	e7e0      	b.n	80023e2 <__gesf2+0x36>
 8002420:	42a2      	cmp	r2, r4
 8002422:	dc05      	bgt.n	8002430 <__gesf2+0x84>
 8002424:	dbea      	blt.n	80023fc <__gesf2+0x50>
 8002426:	42ae      	cmp	r6, r5
 8002428:	d802      	bhi.n	8002430 <__gesf2+0x84>
 800242a:	d3e7      	bcc.n	80023fc <__gesf2+0x50>
 800242c:	2000      	movs	r0, #0
 800242e:	e7dc      	b.n	80023ea <__gesf2+0x3e>
 8002430:	4241      	negs	r1, r0
 8002432:	4141      	adcs	r1, r0
 8002434:	4248      	negs	r0, r1
 8002436:	2102      	movs	r1, #2
 8002438:	4008      	ands	r0, r1
 800243a:	3801      	subs	r0, #1
 800243c:	e7d5      	b.n	80023ea <__gesf2+0x3e>
 800243e:	2002      	movs	r0, #2
 8002440:	4240      	negs	r0, r0
 8002442:	e7d2      	b.n	80023ea <__gesf2+0x3e>

08002444 <__lesf2>:
 8002444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002446:	0042      	lsls	r2, r0, #1
 8002448:	0246      	lsls	r6, r0, #9
 800244a:	024d      	lsls	r5, r1, #9
 800244c:	004c      	lsls	r4, r1, #1
 800244e:	0fc3      	lsrs	r3, r0, #31
 8002450:	0a76      	lsrs	r6, r6, #9
 8002452:	0e12      	lsrs	r2, r2, #24
 8002454:	0a6d      	lsrs	r5, r5, #9
 8002456:	0e24      	lsrs	r4, r4, #24
 8002458:	0fc8      	lsrs	r0, r1, #31
 800245a:	2aff      	cmp	r2, #255	; 0xff
 800245c:	d00d      	beq.n	800247a <__lesf2+0x36>
 800245e:	2cff      	cmp	r4, #255	; 0xff
 8002460:	d00f      	beq.n	8002482 <__lesf2+0x3e>
 8002462:	2a00      	cmp	r2, #0
 8002464:	d123      	bne.n	80024ae <__lesf2+0x6a>
 8002466:	4271      	negs	r1, r6
 8002468:	4171      	adcs	r1, r6
 800246a:	2c00      	cmp	r4, #0
 800246c:	d10f      	bne.n	800248e <__lesf2+0x4a>
 800246e:	2d00      	cmp	r5, #0
 8002470:	d10d      	bne.n	800248e <__lesf2+0x4a>
 8002472:	2000      	movs	r0, #0
 8002474:	2e00      	cmp	r6, #0
 8002476:	d014      	beq.n	80024a2 <__lesf2+0x5e>
 8002478:	e00d      	b.n	8002496 <__lesf2+0x52>
 800247a:	2e00      	cmp	r6, #0
 800247c:	d110      	bne.n	80024a0 <__lesf2+0x5c>
 800247e:	2cff      	cmp	r4, #255	; 0xff
 8002480:	d115      	bne.n	80024ae <__lesf2+0x6a>
 8002482:	2d00      	cmp	r5, #0
 8002484:	d10c      	bne.n	80024a0 <__lesf2+0x5c>
 8002486:	2a00      	cmp	r2, #0
 8002488:	d103      	bne.n	8002492 <__lesf2+0x4e>
 800248a:	4271      	negs	r1, r6
 800248c:	4171      	adcs	r1, r6
 800248e:	2900      	cmp	r1, #0
 8002490:	d108      	bne.n	80024a4 <__lesf2+0x60>
 8002492:	4283      	cmp	r3, r0
 8002494:	d010      	beq.n	80024b8 <__lesf2+0x74>
 8002496:	2102      	movs	r1, #2
 8002498:	1e58      	subs	r0, r3, #1
 800249a:	4008      	ands	r0, r1
 800249c:	3801      	subs	r0, #1
 800249e:	e000      	b.n	80024a2 <__lesf2+0x5e>
 80024a0:	2002      	movs	r0, #2
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d1fc      	bne.n	80024a2 <__lesf2+0x5e>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e7f9      	b.n	80024a2 <__lesf2+0x5e>
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	d1ef      	bne.n	8002492 <__lesf2+0x4e>
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	d1ed      	bne.n	8002492 <__lesf2+0x4e>
 80024b6:	e7ee      	b.n	8002496 <__lesf2+0x52>
 80024b8:	42a2      	cmp	r2, r4
 80024ba:	dc05      	bgt.n	80024c8 <__lesf2+0x84>
 80024bc:	dbf2      	blt.n	80024a4 <__lesf2+0x60>
 80024be:	42ae      	cmp	r6, r5
 80024c0:	d802      	bhi.n	80024c8 <__lesf2+0x84>
 80024c2:	d3ef      	bcc.n	80024a4 <__lesf2+0x60>
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7ec      	b.n	80024a2 <__lesf2+0x5e>
 80024c8:	4241      	negs	r1, r0
 80024ca:	4141      	adcs	r1, r0
 80024cc:	4248      	negs	r0, r1
 80024ce:	2102      	movs	r1, #2
 80024d0:	4008      	ands	r0, r1
 80024d2:	3801      	subs	r0, #1
 80024d4:	e7e5      	b.n	80024a2 <__lesf2+0x5e>
 80024d6:	46c0      	nop			; (mov r8, r8)

080024d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_Init+0x3c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Init+0x3c>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	0049      	lsls	r1, r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f2:	2003      	movs	r0, #3
 80024f4:	f000 f810 	bl	8002518 <HAL_InitTick>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d003      	beq.n	8002504 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e001      	b.n	8002508 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f006 fde0 	bl	80090c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	781b      	ldrb	r3, [r3, #0]
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_InitTick+0x88>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02b      	beq.n	8002588 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_InitTick+0x8c>)
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_InitTick+0x88>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	0019      	movs	r1, r3
 800253a:	23fa      	movs	r3, #250	; 0xfa
 800253c:	0098      	lsls	r0, r3, #2
 800253e:	f7fd fde1 	bl	8000104 <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	0019      	movs	r1, r3
 8002546:	0020      	movs	r0, r4
 8002548:	f7fd fddc 	bl	8000104 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fdf1 	bl	8003136 <HAL_SYSTICK_Config>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d112      	bne.n	800257e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d80a      	bhi.n	8002574 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	2200      	movs	r2, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f000 fdc0 	bl	80030ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_InitTick+0x90>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00d      	b.n	8002590 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002574:	230f      	movs	r3, #15
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e008      	b.n	8002590 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e003      	b.n	8002590 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002590:	230f      	movs	r3, #15
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b005      	add	sp, #20
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_IncTick+0x1c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	001a      	movs	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x20>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	18d2      	adds	r2, r2, r3
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_IncTick+0x20>)
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	20000004 	.word	0x20000004
 80025cc:	20000028 	.word	0x20000028

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <HAL_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	20000028 	.word	0x20000028

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3301      	adds	r3, #1
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	189b      	adds	r3, r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	f7ff ffe0 	bl	80025d0 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	40010000 	.word	0x40010000
 8002654:	fffff9ff 	.word	0xfffff9ff

08002658 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002668:	401a      	ands	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b002      	add	sp, #8
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	fe3fffff 	.word	0xfe3fffff

08002680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	23e0      	movs	r3, #224	; 0xe0
 800268e:	045b      	lsls	r3, r3, #17
 8002690:	4013      	ands	r3, r2
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b002      	add	sp, #8
 8002698:	bd80      	pop	{r7, pc}

0800269a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	2104      	movs	r1, #4
 80026ae:	400a      	ands	r2, r1
 80026b0:	2107      	movs	r1, #7
 80026b2:	4091      	lsls	r1, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	43d2      	mvns	r2, r2
 80026b8:	401a      	ands	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2104      	movs	r1, #4
 80026be:	400b      	ands	r3, r1
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4099      	lsls	r1, r3
 80026c4:	000b      	movs	r3, r1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	211f      	movs	r1, #31
 80026e8:	400a      	ands	r2, r1
 80026ea:	210f      	movs	r1, #15
 80026ec:	4091      	lsls	r1, r2
 80026ee:	000a      	movs	r2, r1
 80026f0:	43d2      	mvns	r2, r2
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	210f      	movs	r1, #15
 80026fa:	4019      	ands	r1, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	201f      	movs	r0, #31
 8002700:	4003      	ands	r3, r0
 8002702:	4099      	lsls	r1, r3
 8002704:	000b      	movs	r3, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}

08002714 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	035b      	lsls	r3, r3, #13
 8002726:	0b5b      	lsrs	r3, r3, #13
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	0352      	lsls	r2, r2, #13
 8002748:	0b52      	lsrs	r2, r2, #13
 800274a:	43d2      	mvns	r2, r2
 800274c:	401a      	ands	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	0212      	lsls	r2, r2, #8
 8002770:	43d2      	mvns	r2, r2
 8002772:	401a      	ands	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	400b      	ands	r3, r1
 800277c:	4904      	ldr	r1, [pc, #16]	; (8002790 <LL_ADC_SetChannelSamplingTime+0x34>)
 800277e:	400b      	ands	r3, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	07ffff00 	.word	0x07ffff00

08002794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	0552      	lsls	r2, r2, #21
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b002      	add	sp, #8
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	6fffffe8 	.word	0x6fffffe8

080027bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	055b      	lsls	r3, r3, #21
 80027cc:	401a      	ands	r2, r3
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	055b      	lsls	r3, r3, #21
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d101      	bne.n	80027da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <LL_ADC_IsEnabled+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_ADC_IsEnabled+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}

08002806 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	2b04      	cmp	r3, #4
 8002818:	d101      	bne.n	800281e <LL_ADC_REG_IsConversionOngoing+0x18>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002830:	231f      	movs	r3, #31
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e1b1      	b.n	8002bb2 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f006 fc5d 	bl	8009118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2254      	movs	r2, #84	; 0x54
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff ffa3 	bl	80027bc <LL_ADC_IsInternalRegulatorEnabled>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d115      	bne.n	80028a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff ff88 	bl	8002794 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002884:	4bcd      	ldr	r3, [pc, #820]	; (8002bbc <HAL_ADC_Init+0x394>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	49cd      	ldr	r1, [pc, #820]	; (8002bc0 <HAL_ADC_Init+0x398>)
 800288a:	0018      	movs	r0, r3
 800288c:	f7fd fc3a 	bl	8000104 <__udivsi3>
 8002890:	0003      	movs	r3, r0
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002898:	e002      	b.n	80028a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3b01      	subs	r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f9      	bne.n	800289a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff ff86 	bl	80027bc <LL_ADC_IsInternalRegulatorEnabled>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d10f      	bne.n	80028d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	2210      	movs	r2, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2201      	movs	r2, #1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028cc:	231f      	movs	r3, #31
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff94 	bl	8002806 <LL_ADC_REG_IsConversionOngoing>
 80028de:	0003      	movs	r3, r0
 80028e0:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	2210      	movs	r2, #16
 80028e8:	4013      	ands	r3, r2
 80028ea:	d000      	beq.n	80028ee <HAL_ADC_Init+0xc6>
 80028ec:	e154      	b.n	8002b98 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d000      	beq.n	80028f6 <HAL_ADC_Init+0xce>
 80028f4:	e150      	b.n	8002b98 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	4ab2      	ldr	r2, [pc, #712]	; (8002bc4 <HAL_ADC_Init+0x39c>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	2202      	movs	r2, #2
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0018      	movs	r0, r3
 800290c:	f7ff ff6a 	bl	80027e4 <LL_ADC_IsEnabled>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d156      	bne.n	80029c2 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2218      	movs	r2, #24
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0f9b      	lsrs	r3, r3, #30
 8002932:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002938:	4313      	orrs	r3, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	223c      	movs	r2, #60	; 0x3c
 8002944:	5c9b      	ldrb	r3, [r3, r2]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d111      	bne.n	800296e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0f9b      	lsrs	r3, r3, #30
 8002950:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002956:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800295c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002962:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	2201      	movs	r2, #1
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4a94      	ldr	r2, [pc, #592]	; (8002bc8 <HAL_ADC_Init+0x3a0>)
 8002976:	4013      	ands	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	430a      	orrs	r2, r1
 8002982:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	23c0      	movs	r3, #192	; 0xc0
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	429a      	cmp	r2, r3
 800298e:	d018      	beq.n	80029c2 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	05db      	lsls	r3, r3, #23
 8002998:	429a      	cmp	r2, r3
 800299a:	d012      	beq.n	80029c2 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d00c      	beq.n	80029c2 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80029a8:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <HAL_ADC_Init+0x3a4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a88      	ldr	r2, [pc, #544]	; (8002bd0 <HAL_ADC_Init+0x3a8>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	23f0      	movs	r3, #240	; 0xf0
 80029b8:	039b      	lsls	r3, r3, #14
 80029ba:	401a      	ands	r2, r3
 80029bc:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <HAL_ADC_Init+0x3a4>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7e1b      	ldrb	r3, [r3, #24]
 80029c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e5b      	ldrb	r3, [r3, #25]
 80029cc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e9b      	ldrb	r3, [r3, #26]
 80029d4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_ADC_Init+0x1be>
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	015b      	lsls	r3, r3, #5
 80029e4:	e000      	b.n	80029e8 <HAL_ADC_Init+0x1c0>
 80029e6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029ee:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da04      	bge.n	8002a02 <HAL_ADC_Init+0x1da>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	e001      	b.n	8002a06 <HAL_ADC_Init+0x1de>
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002a06:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	5c5b      	ldrb	r3, [r3, r1]
 8002a0e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a10:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	5c9b      	ldrb	r3, [r3, r2]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d115      	bne.n	8002a4e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7e9b      	ldrb	r3, [r3, #26]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	0252      	lsls	r2, r2, #9
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	e00b      	b.n	8002a4e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2201      	movs	r2, #1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	23e0      	movs	r3, #224	; 0xe0
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a64:	4313      	orrs	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <HAL_ADC_Init+0x3ac>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4a53      	ldr	r2, [pc, #332]	; (8002bd8 <HAL_ADC_Init+0x3b0>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	f7ff fdf9 	bl	800269a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	494a      	ldr	r1, [pc, #296]	; (8002bdc <HAL_ADC_Init+0x3b4>)
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	f7ff fdf1 	bl	800269a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2110      	movs	r1, #16
 8002acc:	4249      	negs	r1, r1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad2:	e03a      	b.n	8002b4a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	039b      	lsls	r3, r3, #14
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d134      	bne.n	8002b4a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	e00c      	b.n	8002b00 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	40da      	lsrs	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	220f      	movs	r2, #15
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d006      	beq.n	8002b08 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3301      	adds	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b07      	cmp	r3, #7
 8002b04:	d9ef      	bls.n	8002ae6 <HAL_ADC_Init+0x2be>
 8002b06:	e000      	b.n	8002b0a <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002b08:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	4249      	negs	r1, r1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
 8002b22:	e012      	b.n	8002b4a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	221c      	movs	r2, #28
 8002b34:	4013      	ands	r3, r2
 8002b36:	2210      	movs	r2, #16
 8002b38:	4252      	negs	r2, r2
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_ADC_Init+0x3b8>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10b      	bne.n	8002b72 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	2203      	movs	r2, #3
 8002b66:	4393      	bics	r3, r2
 8002b68:	2201      	movs	r2, #1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b70:	e01c      	b.n	8002bac <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	2212      	movs	r2, #18
 8002b78:	4393      	bics	r3, r2
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2201      	movs	r2, #1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b8e:	231f      	movs	r3, #31
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b96:	e009      	b.n	8002bac <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002bac:	231f      	movs	r3, #31
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b008      	add	sp, #32
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	00030d40 	.word	0x00030d40
 8002bc4:	fffffefd 	.word	0xfffffefd
 8002bc8:	1ffffc02 	.word	0x1ffffc02
 8002bcc:	40012708 	.word	0x40012708
 8002bd0:	ffc3ffff 	.word	0xffc3ffff
 8002bd4:	fffe0219 	.word	0xfffe0219
 8002bd8:	dffffc02 	.word	0xdffffc02
 8002bdc:	07ffff04 	.word	0x07ffff04
 8002be0:	833fffe7 	.word	0x833fffe7

08002be4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2317      	movs	r3, #23
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2254      	movs	r2, #84	; 0x54
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x24>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e1c0      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x3a6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2254      	movs	r2, #84	; 0x54
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff fdf6 	bl	8002806 <LL_ADC_REG_IsConversionOngoing>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d000      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0x3c>
 8002c1e:	e1a3      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d100      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x46>
 8002c28:	e143      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d004      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c3a:	4ac1      	ldr	r2, [pc, #772]	; (8002f40 <HAL_ADC_ConfigChannel+0x35c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0019      	movs	r1, r3
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	f7ff fd62 	bl	8002714 <LL_ADC_REG_SetSequencerChAdd>
 8002c50:	e0c9      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	211f      	movs	r1, #31
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	210f      	movs	r1, #15
 8002c60:	4099      	lsls	r1, r3
 8002c62:	000b      	movs	r3, r1
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4013      	ands	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	035b      	lsls	r3, r3, #13
 8002c70:	0b5b      	lsrs	r3, r3, #13
 8002c72:	d105      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x9c>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	221f      	movs	r2, #31
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	e098      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	d000      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0xa8>
 8002c8a:	e091      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x1cc>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	d000      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0xb4>
 8002c96:	e089      	b.n	8002dac <HAL_ADC_ConfigChannel+0x1c8>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d000      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0xc0>
 8002ca2:	e081      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x1c4>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4013      	ands	r3, r2
 8002cac:	d000      	beq.n	8002cb0 <HAL_ADC_ConfigChannel+0xcc>
 8002cae:	e079      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x1c0>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d000      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0xd8>
 8002cba:	e071      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x1bc>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d000      	beq.n	8002cc8 <HAL_ADC_ConfigChannel+0xe4>
 8002cc6:	e069      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x1b8>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2240      	movs	r2, #64	; 0x40
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d000      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0xf0>
 8002cd2:	e061      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x1b4>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d000      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0xfc>
 8002cde:	e059      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x1b0>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d151      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1ac>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d149      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x1a8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4013      	ands	r3, r2
 8002d02:	d141      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1a4>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d139      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1a0>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	015b      	lsls	r3, r3, #5
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d131      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x19c>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	019b      	lsls	r3, r3, #6
 8002d24:	4013      	ands	r3, r2
 8002d26:	d129      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x198>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	01db      	lsls	r3, r3, #7
 8002d30:	4013      	ands	r3, r2
 8002d32:	d121      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x194>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d119      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x190>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	025b      	lsls	r3, r3, #9
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x18c>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	4013      	ands	r3, r2
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x188>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	02db      	lsls	r3, r3, #11
 8002d60:	4013      	ands	r3, r2
 8002d62:	d001      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x184>
 8002d64:	2312      	movs	r3, #18
 8002d66:	e024      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e022      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d6c:	2311      	movs	r3, #17
 8002d6e:	e020      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d70:	2310      	movs	r3, #16
 8002d72:	e01e      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d74:	230f      	movs	r3, #15
 8002d76:	e01c      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d78:	230e      	movs	r3, #14
 8002d7a:	e01a      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d7c:	230d      	movs	r3, #13
 8002d7e:	e018      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d80:	230c      	movs	r3, #12
 8002d82:	e016      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d84:	230b      	movs	r3, #11
 8002d86:	e014      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d88:	230a      	movs	r3, #10
 8002d8a:	e012      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d8c:	2309      	movs	r3, #9
 8002d8e:	e010      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d90:	2308      	movs	r3, #8
 8002d92:	e00e      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d94:	2307      	movs	r3, #7
 8002d96:	e00c      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d98:	2306      	movs	r3, #6
 8002d9a:	e00a      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002d9c:	2305      	movs	r3, #5
 8002d9e:	e008      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e006      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002da4:	2303      	movs	r3, #3
 8002da6:	e004      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ce>
 8002db0:	2300      	movs	r3, #0
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	6852      	ldr	r2, [r2, #4]
 8002db6:	201f      	movs	r0, #31
 8002db8:	4002      	ands	r2, r0
 8002dba:	4093      	lsls	r3, r2
 8002dbc:	000a      	movs	r2, r1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d808      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	001a      	movs	r2, r3
 8002de2:	f7ff fc77 	bl	80026d4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	001a      	movs	r2, r3
 8002df4:	f7ff fcb2 	bl	800275c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db00      	blt.n	8002e02 <HAL_ADC_ConfigChannel+0x21e>
 8002e00:	e0bc      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e02:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7ff fc3b 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_ADC_ConfigChannel+0x364>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d122      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e20:	d11d      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0412      	lsls	r2, r2, #16
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	0010      	movs	r0, r2
 8002e30:	f7ff fc12 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_ADC_ConfigChannel+0x368>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4945      	ldr	r1, [pc, #276]	; (8002f50 <HAL_ADC_ConfigChannel+0x36c>)
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7fd f962 	bl	8000104 <__udivsi3>
 8002e40:	0003      	movs	r3, r0
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	0013      	movs	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e4e:	e002      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f9      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5c:	e08e      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3c      	ldr	r2, [pc, #240]	; (8002f54 <HAL_ADC_ConfigChannel+0x370>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10e      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x2a2>
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	045b      	lsls	r3, r3, #17
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d109      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	0452      	lsls	r2, r2, #17
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	4a32      	ldr	r2, [pc, #200]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	0010      	movs	r0, r2
 8002e80:	f7ff fbea 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8002e84:	e07a      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_ADC_ConfigChannel+0x374>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d000      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x2ae>
 8002e90:	e074      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	03db      	lsls	r3, r3, #15
 8002e98:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e9a:	d000      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x2ba>
 8002e9c:	e06e      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	03d2      	lsls	r2, r2, #15
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	0010      	movs	r0, r2
 8002eac:	f7ff fbd4 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8002eb0:	e064      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_ADC_ConfigChannel+0x35c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	f7ff fc2f 	bl	8002736 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da4d      	bge.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff fbcc 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <HAL_ADC_ConfigChannel+0x364>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_ADC_ConfigChannel+0x378>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002efe:	0019      	movs	r1, r3
 8002f00:	0010      	movs	r0, r2
 8002f02:	f7ff fba9 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8002f06:	e039      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <HAL_ADC_ConfigChannel+0x370>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <HAL_ADC_ConfigChannel+0x37c>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f7ff fb9b 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8002f22:	e02b      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <HAL_ADC_ConfigChannel+0x374>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d126      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <HAL_ADC_ConfigChannel+0x380>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	4a03      	ldr	r2, [pc, #12]	; (8002f44 <HAL_ADC_ConfigChannel+0x360>)
 8002f36:	0019      	movs	r1, r3
 8002f38:	0010      	movs	r0, r2
 8002f3a:	f7ff fb8d 	bl	8002658 <LL_ADC_SetCommonPathInternalCh>
 8002f3e:	e01d      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
 8002f40:	80000004 	.word	0x80000004
 8002f44:	40012708 	.word	0x40012708
 8002f48:	b0001000 	.word	0xb0001000
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	00030d40 	.word	0x00030d40
 8002f54:	b8004000 	.word	0xb8004000
 8002f58:	b4002000 	.word	0xb4002000
 8002f5c:	ff7fffff 	.word	0xff7fffff
 8002f60:	feffffff 	.word	0xfeffffff
 8002f64:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f74:	2317      	movs	r3, #23
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2254      	movs	r2, #84	; 0x54
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f84:	2317      	movs	r3, #23
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b006      	add	sp, #24
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)

08002f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa6:	d809      	bhi.n	8002fbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	001a      	movs	r2, r3
 8002fae:	231f      	movs	r3, #31
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <__NVIC_EnableIRQ+0x30>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4091      	lsls	r1, r2
 8002fb8:	000a      	movs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	0002      	movs	r2, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b7f      	cmp	r3, #127	; 0x7f
 8002fdc:	d828      	bhi.n	8003030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fde:	4a2f      	ldr	r2, [pc, #188]	; (800309c <__NVIC_SetPriority+0xd4>)
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b25b      	sxtb	r3, r3
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	33c0      	adds	r3, #192	; 0xc0
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	589b      	ldr	r3, [r3, r2]
 8002fee:	1dfa      	adds	r2, r7, #7
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	00d2      	lsls	r2, r2, #3
 8002ffa:	21ff      	movs	r1, #255	; 0xff
 8002ffc:	4091      	lsls	r1, r2
 8002ffe:	000a      	movs	r2, r1
 8003000:	43d2      	mvns	r2, r2
 8003002:	401a      	ands	r2, r3
 8003004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	401a      	ands	r2, r3
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	0018      	movs	r0, r3
 8003014:	2303      	movs	r3, #3
 8003016:	4003      	ands	r3, r0
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800301c:	481f      	ldr	r0, [pc, #124]	; (800309c <__NVIC_SetPriority+0xd4>)
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b25b      	sxtb	r3, r3
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	430a      	orrs	r2, r1
 8003028:	33c0      	adds	r3, #192	; 0xc0
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800302e:	e031      	b.n	8003094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003030:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <__NVIC_SetPriority+0xd8>)
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	0019      	movs	r1, r3
 8003038:	230f      	movs	r3, #15
 800303a:	400b      	ands	r3, r1
 800303c:	3b08      	subs	r3, #8
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3306      	adds	r3, #6
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	18d3      	adds	r3, r2, r3
 8003046:	3304      	adds	r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1dfa      	adds	r2, r7, #7
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	0011      	movs	r1, r2
 8003050:	2203      	movs	r2, #3
 8003052:	400a      	ands	r2, r1
 8003054:	00d2      	lsls	r2, r2, #3
 8003056:	21ff      	movs	r1, #255	; 0xff
 8003058:	4091      	lsls	r1, r2
 800305a:	000a      	movs	r2, r1
 800305c:	43d2      	mvns	r2, r2
 800305e:	401a      	ands	r2, r3
 8003060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	401a      	ands	r2, r3
 800306a:	1dfb      	adds	r3, r7, #7
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	0018      	movs	r0, r3
 8003070:	2303      	movs	r3, #3
 8003072:	4003      	ands	r3, r0
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <__NVIC_SetPriority+0xd8>)
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	001c      	movs	r4, r3
 8003080:	230f      	movs	r3, #15
 8003082:	4023      	ands	r3, r4
 8003084:	3b08      	subs	r3, #8
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	430a      	orrs	r2, r1
 800308a:	3306      	adds	r3, #6
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	18c3      	adds	r3, r0, r3
 8003090:	3304      	adds	r3, #4
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b003      	add	sp, #12
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1e5a      	subs	r2, r3, #1
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	045b      	lsls	r3, r3, #17
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d301      	bcc.n	80030bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b8:	2301      	movs	r3, #1
 80030ba:	e010      	b.n	80030de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <SysTick_Config+0x44>)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	3a01      	subs	r2, #1
 80030c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c4:	2301      	movs	r3, #1
 80030c6:	425b      	negs	r3, r3
 80030c8:	2103      	movs	r1, #3
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff ff7c 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SysTick_Config+0x44>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <SysTick_Config+0x44>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	210f      	movs	r1, #15
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	1c02      	adds	r2, r0, #0
 80030fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	187b      	adds	r3, r7, r1
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b25b      	sxtb	r3, r3
 8003106:	0011      	movs	r1, r2
 8003108:	0018      	movs	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b004      	add	sp, #16
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	0002      	movs	r2, r0
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b25b      	sxtb	r3, r3
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff ff33 	bl	8002f94 <__NVIC_EnableIRQ>
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b002      	add	sp, #8
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff ffaf 	bl	80030a4 <SysTick_Config>
 8003146:	0003      	movs	r3, r0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315e:	e147      	b.n	80033f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4091      	lsls	r1, r2
 800316a:	000a      	movs	r2, r1
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d100      	bne.n	8003178 <HAL_GPIO_Init+0x28>
 8003176:	e138      	b.n	80033ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	4013      	ands	r3, r2
 8003180:	2b01      	cmp	r3, #1
 8003182:	d005      	beq.n	8003190 <HAL_GPIO_Init+0x40>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2203      	movs	r2, #3
 800318a:	4013      	ands	r3, r2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d130      	bne.n	80031f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	409a      	lsls	r2, r3
 800319e:	0013      	movs	r3, r2
 80031a0:	43da      	mvns	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	0013      	movs	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031c6:	2201      	movs	r2, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	43da      	mvns	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	2201      	movs	r2, #1
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
 80031e4:	0013      	movs	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d017      	beq.n	800322e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	43da      	mvns	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	4013      	ands	r3, r2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d123      	bne.n	8003282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	58d3      	ldr	r3, [r2, r3]
 8003246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2207      	movs	r2, #7
 800324c:	4013      	ands	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	409a      	lsls	r2, r3
 8003254:	0013      	movs	r3, r2
 8003256:	43da      	mvns	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2107      	movs	r1, #7
 8003266:	400b      	ands	r3, r1
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	409a      	lsls	r2, r3
 800326c:	0013      	movs	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	08da      	lsrs	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3208      	adds	r2, #8
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	6939      	ldr	r1, [r7, #16]
 8003280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	409a      	lsls	r2, r3
 8003290:	0013      	movs	r3, r2
 8003292:	43da      	mvns	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	401a      	ands	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	0013      	movs	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	23c0      	movs	r3, #192	; 0xc0
 80032bc:	029b      	lsls	r3, r3, #10
 80032be:	4013      	ands	r3, r2
 80032c0:	d100      	bne.n	80032c4 <HAL_GPIO_Init+0x174>
 80032c2:	e092      	b.n	80033ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80032c4:	4a50      	ldr	r2, [pc, #320]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3318      	adds	r3, #24
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	589b      	ldr	r3, [r3, r2]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4013      	ands	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	220f      	movs	r2, #15
 80032dc:	409a      	lsls	r2, r3
 80032de:	0013      	movs	r3, r2
 80032e0:	43da      	mvns	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	23a0      	movs	r3, #160	; 0xa0
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x1ca>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a45      	ldr	r2, [pc, #276]	; (800340c <HAL_GPIO_Init+0x2bc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x1c6>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a44      	ldr	r2, [pc, #272]	; (8003410 <HAL_GPIO_Init+0x2c0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x1c2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a43      	ldr	r2, [pc, #268]	; (8003414 <HAL_GPIO_Init+0x2c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x1be>
 800330a:	2303      	movs	r3, #3
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x1cc>
 800330e:	2305      	movs	r3, #5
 8003310:	e004      	b.n	800331c <HAL_GPIO_Init+0x1cc>
 8003312:	2302      	movs	r3, #2
 8003314:	e002      	b.n	800331c <HAL_GPIO_Init+0x1cc>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_GPIO_Init+0x1cc>
 800331a:	2300      	movs	r3, #0
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	2103      	movs	r1, #3
 8003320:	400a      	ands	r2, r1
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	4093      	lsls	r3, r2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800332c:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3318      	adds	r3, #24
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800333a:	4a33      	ldr	r2, [pc, #204]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	58d3      	ldr	r3, [r2, r3]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	025b      	lsls	r3, r3, #9
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003360:	4929      	ldr	r1, [pc, #164]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 800336a:	2384      	movs	r3, #132	; 0x84
 800336c:	58d3      	ldr	r3, [r2, r3]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43da      	mvns	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	029b      	lsls	r3, r3, #10
 8003382:	4013      	ands	r3, r2
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800338e:	491e      	ldr	r1, [pc, #120]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 8003390:	2284      	movs	r2, #132	; 0x84
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43da      	mvns	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	035b      	lsls	r3, r3, #13
 80033ae:	4013      	ands	r3, r2
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	039b      	lsls	r3, r3, #14
 80033d8:	4013      	ands	r3, r2
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_GPIO_Init+0x2b8>)
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3301      	adds	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	40da      	lsrs	r2, r3
 80033f8:	1e13      	subs	r3, r2, #0
 80033fa:	d000      	beq.n	80033fe <HAL_GPIO_Init+0x2ae>
 80033fc:	e6b0      	b.n	8003160 <HAL_GPIO_Init+0x10>
  }
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b006      	add	sp, #24
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021800 	.word	0x40021800
 800340c:	50000400 	.word	0x50000400
 8003410:	50000800 	.word	0x50000800
 8003414:	50000c00 	.word	0x50000c00

08003418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	000a      	movs	r2, r1
 8003422:	1cbb      	adds	r3, r7, #2
 8003424:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	1cba      	adds	r2, r7, #2
 800342c:	8812      	ldrh	r2, [r2, #0]
 800342e:	4013      	ands	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003432:	230f      	movs	r3, #15
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e003      	b.n	8003444 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003444:	230f      	movs	r3, #15
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	781b      	ldrb	r3, [r3, #0]
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	0008      	movs	r0, r1
 800345c:	0011      	movs	r1, r2
 800345e:	1cbb      	adds	r3, r7, #2
 8003460:	1c02      	adds	r2, r0, #0
 8003462:	801a      	strh	r2, [r3, #0]
 8003464:	1c7b      	adds	r3, r7, #1
 8003466:	1c0a      	adds	r2, r1, #0
 8003468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800346a:	1c7b      	adds	r3, r7, #1
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003472:	1cbb      	adds	r3, r7, #2
 8003474:	881a      	ldrh	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800347a:	e003      	b.n	8003484 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800347c:	1cbb      	adds	r3, r7, #2
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	0002      	movs	r2, r0
 8003494:	1dbb      	adds	r3, r7, #6
 8003496:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	1dba      	adds	r2, r7, #6
 800349e:	8812      	ldrh	r2, [r2, #0]
 80034a0:	4013      	ands	r3, r2
 80034a2:	d008      	beq.n	80034b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034a6:	1dba      	adds	r2, r7, #6
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80034ac:	1dbb      	adds	r3, r7, #6
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f003 ff84 	bl	80073be <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	1dba      	adds	r2, r7, #6
 80034bc:	8812      	ldrh	r2, [r2, #0]
 80034be:	4013      	ands	r3, r2
 80034c0:	d008      	beq.n	80034d4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80034c4:	1dba      	adds	r2, r7, #6
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80034ca:	1dbb      	adds	r3, r7, #6
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f003 ff66 	bl	80073a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021800 	.word	0x40021800

080034e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e082      	b.n	80035f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2241      	movs	r2, #65	; 0x41
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2240      	movs	r2, #64	; 0x40
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f005 fe61 	bl	80091d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2241      	movs	r2, #65	; 0x41
 8003512:	2124      	movs	r1, #36	; 0x24
 8003514:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4934      	ldr	r1, [pc, #208]	; (8003600 <HAL_I2C_Init+0x120>)
 8003530:	400a      	ands	r2, r1
 8003532:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4931      	ldr	r1, [pc, #196]	; (8003604 <HAL_I2C_Init+0x124>)
 8003540:	400a      	ands	r2, r1
 8003542:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0209      	lsls	r1, r1, #8
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	e007      	b.n	800356e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2184      	movs	r1, #132	; 0x84
 8003568:	0209      	lsls	r1, r1, #8
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d104      	bne.n	8003580 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <HAL_I2C_Init+0x128>)
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	491a      	ldr	r1, [pc, #104]	; (8003604 <HAL_I2C_Init+0x124>)
 800359c:	400a      	ands	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69d9      	ldr	r1, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2241      	movs	r2, #65	; 0x41
 80035e4:	2120      	movs	r1, #32
 80035e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2242      	movs	r2, #66	; 0x42
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	f0ffffff 	.word	0xf0ffffff
 8003604:	ffff7fff 	.word	0xffff7fff
 8003608:	02008000 	.word	0x02008000

0800360c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2241      	movs	r2, #65	; 0x41
 800361a:	5c9b      	ldrb	r3, [r3, r2]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b20      	cmp	r3, #32
 8003620:	d138      	bne.n	8003694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2240      	movs	r2, #64	; 0x40
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800362c:	2302      	movs	r3, #2
 800362e:	e032      	b.n	8003696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	2101      	movs	r1, #1
 8003636:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	2124      	movs	r1, #36	; 0x24
 800363e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	438a      	bics	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4911      	ldr	r1, [pc, #68]	; (80036a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800365c:	400a      	ands	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2101      	movs	r1, #1
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2241      	movs	r2, #65	; 0x41
 8003684:	2120      	movs	r1, #32
 8003686:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2240      	movs	r2, #64	; 0x40
 800368c:	2100      	movs	r1, #0
 800368e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b002      	add	sp, #8
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	ffffefff 	.word	0xffffefff

080036a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2241      	movs	r2, #65	; 0x41
 80036b2:	5c9b      	ldrb	r3, [r3, r2]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d139      	bne.n	800372e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	5c9b      	ldrb	r3, [r3, r2]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e033      	b.n	8003730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2240      	movs	r2, #64	; 0x40
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2241      	movs	r2, #65	; 0x41
 80036d4:	2124      	movs	r1, #36	; 0x24
 80036d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	438a      	bics	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2241      	movs	r2, #65	; 0x41
 800371e:	2120      	movs	r1, #32
 8003720:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2240      	movs	r2, #64	; 0x40
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}
 8003738:	fffff0ff 	.word	0xfffff0ff

0800373c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0049      	lsls	r1, r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40007000 	.word	0x40007000

08003758 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	000a      	movs	r2, r1
 8003762:	1cfb      	adds	r3, r7, #3
 8003764:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_PWR_EnterSTOPMode+0x68>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2207      	movs	r2, #7
 8003772:	4393      	bics	r3, r2
 8003774:	001a      	movs	r2, r3
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_PWR_EnterSTOPMode+0x68>)
 8003778:	2101      	movs	r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e005      	b.n	800378c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <HAL_PWR_EnterSTOPMode+0x68>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_PWR_EnterSTOPMode+0x68>)
 8003786:	2107      	movs	r1, #7
 8003788:	438a      	bics	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003792:	2104      	movs	r1, #4
 8003794:	430a      	orrs	r2, r1
 8003796:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003798:	1cfb      	adds	r3, r7, #3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80037a0:	bf30      	wfi
 80037a2:	e002      	b.n	80037aa <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80037a4:	bf40      	sev
    __WFE();
 80037a6:	bf20      	wfe
    __WFE();
 80037a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 80037b0:	2104      	movs	r1, #4
 80037b2:	438a      	bics	r2, r1
 80037b4:	611a      	str	r2, [r3, #16]
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	40007000 	.word	0x40007000
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a19      	ldr	r2, [pc, #100]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d11f      	bne.n	800382c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	0013      	movs	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4912      	ldr	r1, [pc, #72]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fc fc82 	bl	8000104 <__udivsi3>
 8003800:	0003      	movs	r3, r0
 8003802:	3301      	adds	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003806:	e008      	b.n	800381a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3b01      	subs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e009      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	401a      	ands	r2, r3
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	429a      	cmp	r2, r3
 800382a:	d0ed      	beq.n	8003808 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	40007000 	.word	0x40007000
 800383c:	fffff9ff 	.word	0xfffff9ff
 8003840:	20000008 	.word	0x20000008
 8003844:	000f4240 	.word	0x000f4240

08003848 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <LL_RCC_GetAPB1Prescaler+0x14>)
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	23e0      	movs	r3, #224	; 0xe0
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	4013      	ands	r3, r2
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e304      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	4013      	ands	r3, r2
 800387a:	d100      	bne.n	800387e <HAL_RCC_OscConfig+0x1e>
 800387c:	e07c      	b.n	8003978 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387e:	4bc3      	ldr	r3, [pc, #780]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2238      	movs	r2, #56	; 0x38
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	4bc0      	ldr	r3, [pc, #768]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b10      	cmp	r3, #16
 8003896:	d102      	bne.n	800389e <HAL_RCC_OscConfig+0x3e>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d10b      	bne.n	80038bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	4bb9      	ldr	r3, [pc, #740]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	4013      	ands	r3, r2
 80038ae:	d062      	beq.n	8003976 <HAL_RCC_OscConfig+0x116>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d15e      	bne.n	8003976 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e2df      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	025b      	lsls	r3, r3, #9
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x78>
 80038c8:	4bb0      	ldr	r3, [pc, #704]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4baf      	ldr	r3, [pc, #700]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	0249      	lsls	r1, r1, #9
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e020      	b.n	800391a <HAL_RCC_OscConfig+0xba>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	23a0      	movs	r3, #160	; 0xa0
 80038de:	02db      	lsls	r3, r3, #11
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d10e      	bne.n	8003902 <HAL_RCC_OscConfig+0xa2>
 80038e4:	4ba9      	ldr	r3, [pc, #676]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4ba8      	ldr	r3, [pc, #672]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	02c9      	lsls	r1, r1, #11
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	4ba6      	ldr	r3, [pc, #664]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4ba5      	ldr	r3, [pc, #660]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	0249      	lsls	r1, r1, #9
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e00b      	b.n	800391a <HAL_RCC_OscConfig+0xba>
 8003902:	4ba2      	ldr	r3, [pc, #648]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4ba1      	ldr	r3, [pc, #644]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003908:	49a1      	ldr	r1, [pc, #644]	; (8003b90 <HAL_RCC_OscConfig+0x330>)
 800390a:	400a      	ands	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	4b9f      	ldr	r3, [pc, #636]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b9e      	ldr	r3, [pc, #632]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003914:	499f      	ldr	r1, [pc, #636]	; (8003b94 <HAL_RCC_OscConfig+0x334>)
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe fe55 	bl	80025d0 <HAL_GetTick>
 8003926:	0003      	movs	r3, r0
 8003928:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe fe50 	bl	80025d0 <HAL_GetTick>
 8003930:	0002      	movs	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e29e      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393e:	4b93      	ldr	r3, [pc, #588]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	4013      	ands	r3, r2
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0xcc>
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe fe40 	bl	80025d0 <HAL_GetTick>
 8003950:	0003      	movs	r3, r0
 8003952:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003956:	f7fe fe3b 	bl	80025d0 <HAL_GetTick>
 800395a:	0002      	movs	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	; 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e289      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	4013      	ands	r3, r2
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0xf6>
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003976:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2202      	movs	r2, #2
 800397e:	4013      	ands	r3, r2
 8003980:	d100      	bne.n	8003984 <HAL_RCC_OscConfig+0x124>
 8003982:	e099      	b.n	8003ab8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003984:	4b81      	ldr	r3, [pc, #516]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2238      	movs	r2, #56	; 0x38
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800398e:	4b7f      	ldr	r3, [pc, #508]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2203      	movs	r2, #3
 8003994:	4013      	ands	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b10      	cmp	r3, #16
 800399c:	d102      	bne.n	80039a4 <HAL_RCC_OscConfig+0x144>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d002      	beq.n	80039aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d135      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039aa:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4013      	ands	r3, r2
 80039b4:	d005      	beq.n	80039c2 <HAL_RCC_OscConfig+0x162>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e25c      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b72      	ldr	r3, [pc, #456]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a74      	ldr	r2, [pc, #464]	; (8003b98 <HAL_RCC_OscConfig+0x338>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	4b6e      	ldr	r3, [pc, #440]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d112      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039de:	4b6b      	ldr	r3, [pc, #428]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x33c>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80039f2:	4b66      	ldr	r3, [pc, #408]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0adb      	lsrs	r3, r3, #11
 80039f8:	2207      	movs	r2, #7
 80039fa:	4013      	ands	r3, r2
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x340>)
 80039fe:	40da      	lsrs	r2, r3
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <HAL_RCC_OscConfig+0x344>)
 8003a02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_OscConfig+0x348>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7fe fd85 	bl	8002518 <HAL_InitTick>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d051      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e232      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d030      	beq.n	8003a80 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5e      	ldr	r2, [pc, #376]	; (8003b9c <HAL_RCC_OscConfig+0x33c>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	4b57      	ldr	r3, [pc, #348]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a32:	4b56      	ldr	r3, [pc, #344]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b55      	ldr	r3, [pc, #340]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a38:	2180      	movs	r1, #128	; 0x80
 8003a3a:	0049      	lsls	r1, r1, #1
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fdc6 	bl	80025d0 <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fdc1 	bl	80025d0 <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e20f      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4013      	ands	r3, r2
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <HAL_RCC_OscConfig+0x338>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	021a      	lsls	r2, r3, #8
 8003a78:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	e01b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a80:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003a86:	4949      	ldr	r1, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x34c>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fda0 	bl	80025d0 <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe fd9b 	bl	80025d0 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1e9      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa8:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x236>
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d047      	beq.n	8003b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2238      	movs	r2, #56	; 0x38
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b18      	cmp	r3, #24
 8003acc:	d10a      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ace:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d03c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x2f2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d138      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e1cb      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003aee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af0:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	430a      	orrs	r2, r1
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fe fd6a 	bl	80025d0 <HAL_GetTick>
 8003afc:	0003      	movs	r3, r0
 8003afe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b02:	f7fe fd65 	bl	80025d0 <HAL_GetTick>
 8003b06:	0002      	movs	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e1b3      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d0f1      	beq.n	8003b02 <HAL_RCC_OscConfig+0x2a2>
 8003b1e:	e018      	b.n	8003b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	438a      	bics	r2, r1
 8003b2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fd50 	bl	80025d0 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe fd4b 	bl	80025d0 <HAL_GetTick>
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e199      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d1f1      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2fe>
 8003b5c:	e0c6      	b.n	8003cec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	231f      	movs	r3, #31
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2238      	movs	r2, #56	; 0x38
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d11e      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x32c>)
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <HAL_RCC_OscConfig+0x31e>
 8003b7c:	e0b6      	b.n	8003cec <HAL_RCC_OscConfig+0x48c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d000      	beq.n	8003b88 <HAL_RCC_OscConfig+0x328>
 8003b86:	e0b1      	b.n	8003cec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e177      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	fffeffff 	.word	0xfffeffff
 8003b94:	fffbffff 	.word	0xfffbffff
 8003b98:	ffff80ff 	.word	0xffff80ff
 8003b9c:	ffffc7ff 	.word	0xffffc7ff
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	20000008 	.word	0x20000008
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bb0:	4bb4      	ldr	r3, [pc, #720]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	055b      	lsls	r3, r3, #21
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x360>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x362>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4baf      	ldr	r3, [pc, #700]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bca:	4bae      	ldr	r3, [pc, #696]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	0549      	lsls	r1, r1, #21
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bd4:	4bab      	ldr	r3, [pc, #684]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	055b      	lsls	r3, r3, #21
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003be2:	231f      	movs	r3, #31
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bea:	4ba7      	ldr	r3, [pc, #668]	; (8003e88 <HAL_RCC_OscConfig+0x628>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d11a      	bne.n	8003c2c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf6:	4ba4      	ldr	r3, [pc, #656]	; (8003e88 <HAL_RCC_OscConfig+0x628>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4ba3      	ldr	r3, [pc, #652]	; (8003e88 <HAL_RCC_OscConfig+0x628>)
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	0049      	lsls	r1, r1, #1
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c04:	f7fe fce4 	bl	80025d0 <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fe fcdf 	bl	80025d0 <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e12d      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c20:	4b99      	ldr	r3, [pc, #612]	; (8003e88 <HAL_RCC_OscConfig+0x628>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x3e2>
 8003c34:	4b93      	ldr	r3, [pc, #588]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c38:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c40:	e01c      	b.n	8003c7c <HAL_RCC_OscConfig+0x41c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x404>
 8003c4a:	4b8e      	ldr	r3, [pc, #568]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c4e:	4b8d      	ldr	r3, [pc, #564]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c50:	2104      	movs	r1, #4
 8003c52:	430a      	orrs	r2, r1
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c56:	4b8b      	ldr	r3, [pc, #556]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c5a:	4b8a      	ldr	r3, [pc, #552]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0x41c>
 8003c64:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c68:	4b86      	ldr	r3, [pc, #536]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c70:	4b84      	ldr	r3, [pc, #528]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c74:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003c76:	2104      	movs	r1, #4
 8003c78:	438a      	bics	r2, r1
 8003c7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe fca4 	bl	80025d0 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fe fc9f 	bl	80025d0 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	4a7c      	ldr	r2, [pc, #496]	; (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0ec      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x42e>
 8003cac:	e013      	b.n	8003cd6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe fc8f 	bl	80025d0 <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb6:	e009      	b.n	8003ccc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fe fc8a 	bl	80025d0 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	4a72      	ldr	r2, [pc, #456]	; (8003e8c <HAL_RCC_OscConfig+0x62c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0d7      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ccc:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003cd6:	231f      	movs	r3, #31
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	4b67      	ldr	r3, [pc, #412]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003ce6:	496a      	ldr	r1, [pc, #424]	; (8003e90 <HAL_RCC_OscConfig+0x630>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d100      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x496>
 8003cf4:	e0c1      	b.n	8003e7a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf6:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2238      	movs	r2, #56	; 0x38
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d100      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4a4>
 8003d02:	e081      	b.n	8003e08 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d156      	bne.n	8003dba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b5c      	ldr	r3, [pc, #368]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d12:	4960      	ldr	r1, [pc, #384]	; (8003e94 <HAL_RCC_OscConfig+0x634>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fc5a 	bl	80025d0 <HAL_GetTick>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fe fc55 	bl	80025d0 <HAL_GetTick>
 8003d26:	0002      	movs	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0a3      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d34:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	049b      	lsls	r3, r3, #18
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d40:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_RCC_OscConfig+0x638>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1a      	ldr	r2, [r3, #32]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	0449      	lsls	r1, r1, #17
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0549      	lsls	r1, r1, #21
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fc1e 	bl	80025d0 <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe fc19 	bl	80025d0 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e067      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dac:	4b35      	ldr	r3, [pc, #212]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	049b      	lsls	r3, r3, #18
 8003db4:	4013      	ands	r3, r2
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x53a>
 8003db8:	e05f      	b.n	8003e7a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dc0:	4934      	ldr	r1, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x634>)
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dcc:	2103      	movs	r1, #3
 8003dce:	438a      	bics	r2, r1
 8003dd0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dd8:	4930      	ldr	r1, [pc, #192]	; (8003e9c <HAL_RCC_OscConfig+0x63c>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe fbf7 	bl	80025d0 <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe fbf2 	bl	80025d0 <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e040      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	049b      	lsls	r3, r3, #18
 8003e02:	4013      	ands	r3, r2
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x588>
 8003e06:	e038      	b.n	8003e7a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e033      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_RCC_OscConfig+0x624>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d126      	bne.n	8003e76 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2270      	movs	r2, #112	; 0x70
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d11f      	bne.n	8003e76 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	23fe      	movs	r3, #254	; 0xfe
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d116      	bne.n	8003e76 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	23f8      	movs	r3, #248	; 0xf8
 8003e4c:	039b      	lsls	r3, r3, #14
 8003e4e:	401a      	ands	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d10e      	bne.n	8003e76 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	23e0      	movs	r3, #224	; 0xe0
 8003e5c:	051b      	lsls	r3, r3, #20
 8003e5e:	401a      	ands	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	0f5b      	lsrs	r3, r3, #29
 8003e6c:	075a      	lsls	r2, r3, #29
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b008      	add	sp, #32
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	00001388 	.word	0x00001388
 8003e90:	efffffff 	.word	0xefffffff
 8003e94:	feffffff 	.word	0xfeffffff
 8003e98:	11c1808c 	.word	0x11c1808c
 8003e9c:	eefeffff 	.word	0xeefeffff

08003ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0e9      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2207      	movs	r2, #7
 8003eba:	4013      	ands	r3, r2
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d91e      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b73      	ldr	r3, [pc, #460]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2207      	movs	r2, #7
 8003ec8:	4393      	bics	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	4b70      	ldr	r3, [pc, #448]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ed4:	f7fe fb7c 	bl	80025d0 <HAL_GetTick>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003edc:	e009      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ede:	f7fe fb77 	bl	80025d0 <HAL_GetTick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	4a6a      	ldr	r2, [pc, #424]	; (8004094 <HAL_RCC_ClockConfig+0x1f4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0ca      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ef2:	4b67      	ldr	r3, [pc, #412]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2207      	movs	r2, #7
 8003ef8:	4013      	ands	r3, r2
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1ee      	bne.n	8003ede <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2202      	movs	r2, #2
 8003f06:	4013      	ands	r3, r2
 8003f08:	d015      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	d006      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f14:	4b60      	ldr	r3, [pc, #384]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f1a:	21e0      	movs	r1, #224	; 0xe0
 8003f1c:	01c9      	lsls	r1, r1, #7
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a5d      	ldr	r2, [pc, #372]	; (800409c <HAL_RCC_ClockConfig+0x1fc>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d057      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	4013      	ands	r3, r2
 8003f52:	d12b      	bne.n	8003fac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e097      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f60:	4b4d      	ldr	r3, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	049b      	lsls	r3, r3, #18
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d11f      	bne.n	8003fac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e08b      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4013      	ands	r3, r2
 8003f82:	d113      	bne.n	8003fac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e07f      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f94:	2202      	movs	r2, #2
 8003f96:	4013      	ands	r3, r2
 8003f98:	d108      	bne.n	8003fac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e074      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e06d      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fac:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	4393      	bics	r3, r2
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fe fb06 	bl	80025d0 <HAL_GetTick>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc8:	e009      	b.n	8003fde <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fca:	f7fe fb01 	bl	80025d0 <HAL_GetTick>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <HAL_RCC_ClockConfig+0x1f4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e054      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2238      	movs	r2, #56	; 0x38
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1ec      	bne.n	8003fca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d21e      	bcs.n	800403c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2207      	movs	r2, #7
 8004004:	4393      	bics	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004010:	f7fe fade 	bl	80025d0 <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004018:	e009      	b.n	800402e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401a:	f7fe fad9 	bl	80025d0 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_RCC_ClockConfig+0x1f4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e02c      	b.n	8004088 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800402e:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2207      	movs	r2, #7
 8004034:	4013      	ands	r3, r2
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d1ee      	bne.n	800401a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2204      	movs	r2, #4
 8004042:	4013      	ands	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <HAL_RCC_ClockConfig+0x200>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8004056:	430a      	orrs	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800405a:	f000 f829 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 800405e:	0001      	movs	r1, r0
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	220f      	movs	r2, #15
 8004068:	401a      	ands	r2, r3
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCC_ClockConfig+0x204>)
 800406c:	0092      	lsls	r2, r2, #2
 800406e:	58d3      	ldr	r3, [r2, r3]
 8004070:	221f      	movs	r2, #31
 8004072:	4013      	ands	r3, r2
 8004074:	000a      	movs	r2, r1
 8004076:	40da      	lsrs	r2, r3
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x208>)
 800407a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_ClockConfig+0x20c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0018      	movs	r0, r3
 8004082:	f7fe fa49 	bl	8002518 <HAL_InitTick>
 8004086:	0003      	movs	r3, r0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b004      	add	sp, #16
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40022000 	.word	0x40022000
 8004094:	00001388 	.word	0x00001388
 8004098:	40021000 	.word	0x40021000
 800409c:	fffff0ff 	.word	0xfffff0ff
 80040a0:	ffff8fff 	.word	0xffff8fff
 80040a4:	08009a08 	.word	0x08009a08
 80040a8:	20000008 	.word	0x20000008
 80040ac:	20000000 	.word	0x20000000

080040b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040b6:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2238      	movs	r2, #56	; 0x38
 80040bc:	4013      	ands	r3, r2
 80040be:	d10f      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80040c0:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0adb      	lsrs	r3, r3, #11
 80040c6:	2207      	movs	r2, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	2201      	movs	r2, #1
 80040cc:	409a      	lsls	r2, r3
 80040ce:	0013      	movs	r3, r2
 80040d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	4835      	ldr	r0, [pc, #212]	; (80041ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80040d6:	f7fc f815 	bl	8000104 <__udivsi3>
 80040da:	0003      	movs	r3, r0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e05d      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2238      	movs	r2, #56	; 0x38
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d102      	bne.n	80040f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e054      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f2:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2238      	movs	r2, #56	; 0x38
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d138      	bne.n	8004170 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80040fe:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2203      	movs	r2, #3
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	2207      	movs	r2, #7
 8004110:	4013      	ands	r3, r2
 8004112:	3301      	adds	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d10d      	bne.n	8004138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4824      	ldr	r0, [pc, #144]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004120:	f7fb fff0 	bl	8000104 <__udivsi3>
 8004124:	0003      	movs	r3, r0
 8004126:	0019      	movs	r1, r3
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	227f      	movs	r2, #127	; 0x7f
 8004130:	4013      	ands	r3, r2
 8004132:	434b      	muls	r3, r1
 8004134:	617b      	str	r3, [r7, #20]
        break;
 8004136:	e00d      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	481c      	ldr	r0, [pc, #112]	; (80041ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800413c:	f7fb ffe2 	bl	8000104 <__udivsi3>
 8004140:	0003      	movs	r3, r0
 8004142:	0019      	movs	r1, r3
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	227f      	movs	r2, #127	; 0x7f
 800414c:	4013      	ands	r3, r2
 800414e:	434b      	muls	r3, r1
 8004150:	617b      	str	r3, [r7, #20]
        break;
 8004152:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	0f5b      	lsrs	r3, r3, #29
 800415a:	2207      	movs	r2, #7
 800415c:	4013      	ands	r3, r2
 800415e:	3301      	adds	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	6978      	ldr	r0, [r7, #20]
 8004166:	f7fb ffcd 	bl	8000104 <__udivsi3>
 800416a:	0003      	movs	r3, r0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	e015      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2238      	movs	r2, #56	; 0x38
 8004176:	4013      	ands	r3, r2
 8004178:	2b20      	cmp	r3, #32
 800417a:	d103      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e00b      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2238      	movs	r2, #56	; 0x38
 800418a:	4013      	ands	r3, r2
 800418c:	2b18      	cmp	r3, #24
 800418e:	d103      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004190:	23fa      	movs	r3, #250	; 0xfa
 8004192:	01db      	lsls	r3, r3, #7
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e001      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800419c:	693b      	ldr	r3, [r7, #16]
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b006      	add	sp, #24
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	40021000 	.word	0x40021000
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	007a1200 	.word	0x007a1200

080041b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b02      	ldr	r3, [pc, #8]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	20000008 	.word	0x20000008

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041cc:	f7ff fff2 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d0:	0004      	movs	r4, r0
 80041d2:	f7ff fb39 	bl	8003848 <LL_RCC_GetAPB1Prescaler>
 80041d6:	0003      	movs	r3, r0
 80041d8:	0b1a      	lsrs	r2, r3, #12
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	58d3      	ldr	r3, [r2, r3]
 80041e0:	221f      	movs	r2, #31
 80041e2:	4013      	ands	r3, r2
 80041e4:	40dc      	lsrs	r4, r3
 80041e6:	0023      	movs	r3, r4
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bdb0      	pop	{r4, r5, r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	08009a48 	.word	0x08009a48

080041f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80041fc:	2313      	movs	r3, #19
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004204:	2312      	movs	r3, #18
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	029b      	lsls	r3, r3, #10
 8004214:	4013      	ands	r3, r2
 8004216:	d100      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004218:	e0a3      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2011      	movs	r0, #17
 800421c:	183b      	adds	r3, r7, r0
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4bc3      	ldr	r3, [pc, #780]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	055b      	lsls	r3, r3, #21
 800422a:	4013      	ands	r3, r2
 800422c:	d110      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	4bc0      	ldr	r3, [pc, #768]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004232:	4bbf      	ldr	r3, [pc, #764]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	0549      	lsls	r1, r1, #21
 8004238:	430a      	orrs	r2, r1
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
 800423c:	4bbc      	ldr	r3, [pc, #752]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800423e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	055b      	lsls	r3, r3, #21
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	183b      	adds	r3, r7, r0
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004250:	4bb8      	ldr	r3, [pc, #736]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4bb7      	ldr	r3, [pc, #732]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	0049      	lsls	r1, r1, #1
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425e:	f7fe f9b7 	bl	80025d0 <HAL_GetTick>
 8004262:	0003      	movs	r3, r0
 8004264:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004266:	e00b      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fe f9b2 	bl	80025d0 <HAL_GetTick>
 800426c:	0002      	movs	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d904      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004276:	2313      	movs	r3, #19
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	2203      	movs	r2, #3
 800427c:	701a      	strb	r2, [r3, #0]
        break;
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004280:	4bac      	ldr	r3, [pc, #688]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d0ed      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800428c:	2313      	movs	r3, #19
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d154      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004296:	4ba6      	ldr	r3, [pc, #664]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800429a:	23c0      	movs	r3, #192	; 0xc0
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4013      	ands	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d019      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d014      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b2:	4b9f      	ldr	r3, [pc, #636]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	4aa0      	ldr	r2, [pc, #640]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b9c      	ldr	r3, [pc, #624]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c0:	4b9b      	ldr	r3, [pc, #620]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	0249      	lsls	r1, r1, #9
 80042c6:	430a      	orrs	r2, r1
 80042c8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ca:	4b99      	ldr	r3, [pc, #612]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ce:	4b98      	ldr	r3, [pc, #608]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042d0:	499a      	ldr	r1, [pc, #616]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80042d2:	400a      	ands	r2, r1
 80042d4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d6:	4b96      	ldr	r3, [pc, #600]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2201      	movs	r2, #1
 80042e0:	4013      	ands	r3, r2
 80042e2:	d016      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe f974 	bl	80025d0 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	e00c      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fe f96f 	bl	80025d0 <HAL_GetTick>
 80042f2:	0002      	movs	r2, r0
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	4a91      	ldr	r2, [pc, #580]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d904      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80042fe:	2313      	movs	r3, #19
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2203      	movs	r2, #3
 8004304:	701a      	strb	r2, [r3, #0]
            break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004308:	4b89      	ldr	r3, [pc, #548]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2202      	movs	r2, #2
 800430e:	4013      	ands	r3, r2
 8004310:	d0ed      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004312:	2313      	movs	r3, #19
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431c:	4b84      	ldr	r3, [pc, #528]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	4a85      	ldr	r2, [pc, #532]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800432a:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800432c:	430a      	orrs	r2, r1
 800432e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004330:	e00c      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004332:	2312      	movs	r3, #18
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2213      	movs	r2, #19
 8004338:	18ba      	adds	r2, r7, r2
 800433a:	7812      	ldrb	r2, [r2, #0]
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e005      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	2312      	movs	r3, #18
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2213      	movs	r2, #19
 8004346:	18ba      	adds	r2, r7, r2
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434c:	2311      	movs	r3, #17
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b76      	ldr	r3, [pc, #472]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435a:	4b75      	ldr	r3, [pc, #468]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800435c:	4979      	ldr	r1, [pc, #484]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800435e:	400a      	ands	r2, r1
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2201      	movs	r2, #1
 8004368:	4013      	ands	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800436c:	4b70      	ldr	r3, [pc, #448]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	2203      	movs	r2, #3
 8004372:	4393      	bics	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4b6d      	ldr	r3, [pc, #436]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800437c:	430a      	orrs	r2, r1
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2202      	movs	r2, #2
 8004386:	4013      	ands	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800438a:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	220c      	movs	r2, #12
 8004390:	4393      	bics	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800439a:	430a      	orrs	r2, r1
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2210      	movs	r2, #16
 80043a4:	4013      	ands	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a8:	4b61      	ldr	r3, [pc, #388]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	4a66      	ldr	r2, [pc, #408]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c8:	4b59      	ldr	r3, [pc, #356]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	4a5f      	ldr	r2, [pc, #380]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	4b56      	ldr	r3, [pc, #344]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043d8:	430a      	orrs	r2, r1
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4013      	ands	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e8:	4b51      	ldr	r3, [pc, #324]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	4a58      	ldr	r2, [pc, #352]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	4b4e      	ldr	r3, [pc, #312]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2220      	movs	r2, #32
 8004402:	4013      	ands	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800440c:	4013      	ands	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004416:	430a      	orrs	r2, r1
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	01db      	lsls	r3, r3, #7
 8004422:	4013      	ands	r3, r2
 8004424:	d015      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004426:	4b42      	ldr	r3, [pc, #264]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	0899      	lsrs	r1, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004434:	430a      	orrs	r2, r1
 8004436:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	05db      	lsls	r3, r3, #23
 8004440:	429a      	cmp	r2, r3
 8004442:	d106      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004444:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	0249      	lsls	r1, r1, #9
 800444e:	430a      	orrs	r2, r1
 8004450:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	031b      	lsls	r3, r3, #12
 800445a:	4013      	ands	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800445e:	4b34      	ldr	r3, [pc, #208]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	4393      	bics	r3, r2
 8004466:	0019      	movs	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800446e:	430a      	orrs	r2, r1
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	039b      	lsls	r3, r3, #14
 800447a:	4013      	ands	r3, r2
 800447c:	d016      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	4a35      	ldr	r2, [pc, #212]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004484:	4013      	ands	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448c:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800448e:	430a      	orrs	r2, r1
 8004490:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	03db      	lsls	r3, r3, #15
 800449a:	429a      	cmp	r2, r3
 800449c:	d106      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	0449      	lsls	r1, r1, #17
 80044a8:	430a      	orrs	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	03db      	lsls	r3, r3, #15
 80044b4:	4013      	ands	r3, r2
 80044b6:	d016      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80044b8:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	4a27      	ldr	r2, [pc, #156]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80044be:	4013      	ands	r3, r2
 80044c0:	0019      	movs	r1, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044c8:	430a      	orrs	r2, r1
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	045b      	lsls	r3, r3, #17
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d106      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	0449      	lsls	r1, r1, #17
 80044e2:	430a      	orrs	r2, r1
 80044e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	d016      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004502:	430a      	orrs	r2, r1
 8004504:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	01db      	lsls	r3, r3, #7
 800450e:	429a      	cmp	r2, r3
 8004510:	d106      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	0249      	lsls	r1, r1, #9
 800451c:	430a      	orrs	r2, r1
 800451e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004520:	2312      	movs	r3, #18
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	781b      	ldrb	r3, [r3, #0]
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b006      	add	sp, #24
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
 8004538:	fffffcff 	.word	0xfffffcff
 800453c:	fffeffff 	.word	0xfffeffff
 8004540:	00001388 	.word	0x00001388
 8004544:	efffffff 	.word	0xefffffff
 8004548:	fffff3ff 	.word	0xfffff3ff
 800454c:	fff3ffff 	.word	0xfff3ffff
 8004550:	ffcfffff 	.word	0xffcfffff
 8004554:	ffffcfff 	.word	0xffffcfff
 8004558:	ffbfffff 	.word	0xffbfffff
 800455c:	feffffff 	.word	0xfeffffff
 8004560:	ffff3fff 	.word	0xffff3fff

08004564 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004564:	b5b0      	push	{r4, r5, r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800456c:	230f      	movs	r3, #15
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d100      	bne.n	800457c <HAL_RTC_Init+0x18>
 800457a:	e080      	b.n	800467e <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2229      	movs	r2, #41	; 0x29
 8004580:	5c9b      	ldrb	r3, [r3, r2]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2228      	movs	r2, #40	; 0x28
 800458c:	2100      	movs	r1, #0
 800458e:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2288      	movs	r2, #136	; 0x88
 8004594:	0212      	lsls	r2, r2, #8
 8004596:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f004 fe7a 	bl	8009294 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2229      	movs	r2, #41	; 0x29
 80045a4:	2102      	movs	r1, #2
 80045a6:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	22ca      	movs	r2, #202	; 0xca
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2253      	movs	r2, #83	; 0x53
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80045b8:	250f      	movs	r5, #15
 80045ba:	197c      	adds	r4, r7, r5
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 fa71 	bl	8004aa6 <RTC_EnterInitMode>
 80045c4:	0003      	movs	r3, r0
 80045c6:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80045c8:	0028      	movs	r0, r5
 80045ca:	183b      	adds	r3, r7, r0
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d148      	bne.n	8004664 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	492b      	ldr	r1, [pc, #172]	; (800468c <HAL_RTC_Init+0x128>)
 80045de:	400a      	ands	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6999      	ldr	r1, [r3, #24]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6912      	ldr	r2, [r2, #16]
 8004608:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6919      	ldr	r1, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	041a      	lsls	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800461e:	0005      	movs	r5, r0
 8004620:	183c      	adds	r4, r7, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0018      	movs	r0, r3
 8004626:	f000 fa81 	bl	8004b2c <RTC_ExitInitMode>
 800462a:	0003      	movs	r3, r0
 800462c:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800462e:	197b      	adds	r3, r7, r5
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d116      	bne.n	8004664 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	00d2      	lsls	r2, r2, #3
 8004642:	08d2      	lsrs	r2, r2, #3
 8004644:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6999      	ldr	r1, [r3, #24]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800466c:	230f      	movs	r3, #15
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2229      	movs	r2, #41	; 0x29
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800467e:	230f      	movs	r3, #15
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	781b      	ldrb	r3, [r3, #0]
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b004      	add	sp, #16
 800468a:	bdb0      	pop	{r4, r5, r7, pc}
 800468c:	fb8fffbf 	.word	0xfb8fffbf

08004690 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2228      	movs	r2, #40	; 0x28
 80046a0:	5c9b      	ldrb	r3, [r3, r2]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_RTC_SetTime+0x1a>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e092      	b.n	80047d0 <HAL_RTC_SetTime+0x140>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2228      	movs	r2, #40	; 0x28
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2229      	movs	r2, #41	; 0x29
 80046b6:	2102      	movs	r1, #2
 80046b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	22ca      	movs	r2, #202	; 0xca
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2253      	movs	r2, #83	; 0x53
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046ca:	2513      	movs	r5, #19
 80046cc:	197c      	adds	r4, r7, r5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 f9e8 	bl	8004aa6 <RTC_EnterInitMode>
 80046d6:	0003      	movs	r3, r0
 80046d8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80046da:	197b      	adds	r3, r7, r5
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d162      	bne.n	80047a8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d125      	bne.n	8004734 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	4013      	ands	r3, r2
 80046f2:	d102      	bne.n	80046fa <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 fa58 	bl	8004bb4 <RTC_ByteToBcd2>
 8004704:	0003      	movs	r3, r0
 8004706:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fa51 	bl	8004bb4 <RTC_ByteToBcd2>
 8004712:	0003      	movs	r3, r0
 8004714:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004716:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	789b      	ldrb	r3, [r3, #2]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 fa49 	bl	8004bb4 <RTC_ByteToBcd2>
 8004722:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004724:	0022      	movs	r2, r4
 8004726:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e017      	b.n	8004764 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2240      	movs	r2, #64	; 0x40
 800473c:	4013      	ands	r3, r2
 800473e:	d102      	bne.n	8004746 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2200      	movs	r2, #0
 8004744:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004752:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004758:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	78db      	ldrb	r3, [r3, #3]
 800475e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	491b      	ldr	r1, [pc, #108]	; (80047d8 <HAL_RTC_SetTime+0x148>)
 800476c:	400a      	ands	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4918      	ldr	r1, [pc, #96]	; (80047dc <HAL_RTC_SetTime+0x14c>)
 800477c:	400a      	ands	r2, r1
 800477e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004798:	2313      	movs	r3, #19
 800479a:	18fc      	adds	r4, r7, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f9c4 	bl	8004b2c <RTC_ExitInitMode>
 80047a4:	0003      	movs	r3, r0
 80047a6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80047b0:	2313      	movs	r3, #19
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2229      	movs	r2, #41	; 0x29
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2228      	movs	r2, #40	; 0x28
 80047c6:	2100      	movs	r1, #0
 80047c8:	5499      	strb	r1, [r3, r2]

  return status;
 80047ca:	2313      	movs	r3, #19
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	781b      	ldrb	r3, [r3, #0]
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b006      	add	sp, #24
 80047d6:	bdb0      	pop	{r4, r5, r7, pc}
 80047d8:	007f7f7f 	.word	0x007f7f7f
 80047dc:	fffbffff 	.word	0xfffbffff

080047e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	045b      	lsls	r3, r3, #17
 80047fe:	0c5a      	lsrs	r2, r3, #17
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a22      	ldr	r2, [pc, #136]	; (8004894 <HAL_RTC_GetTime+0xb4>)
 800480c:	4013      	ands	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	b2db      	uxtb	r3, r3
 8004816:	223f      	movs	r2, #63	; 0x3f
 8004818:	4013      	ands	r3, r2
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	b2db      	uxtb	r3, r3
 8004826:	227f      	movs	r2, #127	; 0x7f
 8004828:	4013      	ands	r3, r2
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	227f      	movs	r2, #127	; 0x7f
 8004836:	4013      	ands	r3, r2
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	0d9b      	lsrs	r3, r3, #22
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2201      	movs	r2, #1
 8004846:	4013      	ands	r3, r2
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11a      	bne.n	800488a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f9d3 	bl	8004c04 <RTC_Bcd2ToByte>
 800485e:	0003      	movs	r3, r0
 8004860:	001a      	movs	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f9ca 	bl	8004c04 <RTC_Bcd2ToByte>
 8004870:	0003      	movs	r3, r0
 8004872:	001a      	movs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	789b      	ldrb	r3, [r3, #2]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f9c1 	bl	8004c04 <RTC_Bcd2ToByte>
 8004882:	0003      	movs	r3, r0
 8004884:	001a      	movs	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b006      	add	sp, #24
 8004892:	bd80      	pop	{r7, pc}
 8004894:	007f7f7f 	.word	0x007f7f7f

08004898 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2228      	movs	r2, #40	; 0x28
 80048a8:	5c9b      	ldrb	r3, [r3, r2]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_RTC_SetDate+0x1a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e07e      	b.n	80049b0 <HAL_RTC_SetDate+0x118>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2228      	movs	r2, #40	; 0x28
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2229      	movs	r2, #41	; 0x29
 80048be:	2102      	movs	r1, #2
 80048c0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10e      	bne.n	80048e6 <HAL_RTC_SetDate+0x4e>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	001a      	movs	r2, r3
 80048ce:	2310      	movs	r3, #16
 80048d0:	4013      	ands	r3, r2
 80048d2:	d008      	beq.n	80048e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2210      	movs	r2, #16
 80048da:	4393      	bics	r3, r2
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	330a      	adds	r3, #10
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11c      	bne.n	8004926 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	78db      	ldrb	r3, [r3, #3]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 f95f 	bl	8004bb4 <RTC_ByteToBcd2>
 80048f6:	0003      	movs	r3, r0
 80048f8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 f958 	bl	8004bb4 <RTC_ByteToBcd2>
 8004904:	0003      	movs	r3, r0
 8004906:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004908:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	789b      	ldrb	r3, [r3, #2]
 800490e:	0018      	movs	r0, r3
 8004910:	f000 f950 	bl	8004bb4 <RTC_ByteToBcd2>
 8004914:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004916:	0022      	movs	r2, r4
 8004918:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e00e      	b.n	8004944 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004932:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004938:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	22ca      	movs	r2, #202	; 0xca
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2253      	movs	r2, #83	; 0x53
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004954:	2513      	movs	r5, #19
 8004956:	197c      	adds	r4, r7, r5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f8a3 	bl	8004aa6 <RTC_EnterInitMode>
 8004960:	0003      	movs	r3, r0
 8004962:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004964:	0028      	movs	r0, r5
 8004966:	183b      	adds	r3, r7, r0
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4910      	ldr	r1, [pc, #64]	; (80049b8 <HAL_RTC_SetDate+0x120>)
 8004976:	400a      	ands	r2, r1
 8004978:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800497a:	183c      	adds	r4, r7, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 f8d4 	bl	8004b2c <RTC_ExitInitMode>
 8004984:	0003      	movs	r3, r0
 8004986:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	22ff      	movs	r2, #255	; 0xff
 800498e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004990:	2313      	movs	r3, #19
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2229      	movs	r2, #41	; 0x29
 800499e:	2101      	movs	r1, #1
 80049a0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2228      	movs	r2, #40	; 0x28
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]

  return status;
 80049aa:	2313      	movs	r3, #19
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bdb0      	pop	{r4, r5, r7, pc}
 80049b8:	00ffff3f 	.word	0x00ffff3f

080049bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <HAL_RTC_GetDate+0x98>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	221f      	movs	r2, #31
 80049e6:	4013      	ands	r3, r2
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	223f      	movs	r2, #63	; 0x3f
 80049f4:	4013      	ands	r3, r2
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	0b5b      	lsrs	r3, r3, #13
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2207      	movs	r2, #7
 8004a04:	4013      	ands	r3, r2
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11a      	bne.n	8004a48 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 f8f4 	bl	8004c04 <RTC_Bcd2ToByte>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	001a      	movs	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f8eb 	bl	8004c04 <RTC_Bcd2ToByte>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	001a      	movs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f8e2 	bl	8004c04 <RTC_Bcd2ToByte>
 8004a40:	0003      	movs	r3, r0
 8004a42:	001a      	movs	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b006      	add	sp, #24
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	00ffff3f 	.word	0x00ffff3f

08004a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	21a0      	movs	r1, #160	; 0xa0
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a70:	f7fd fdae 	bl	80025d0 <HAL_GetTick>
 8004a74:	0003      	movs	r3, r0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004a78:	e00a      	b.n	8004a90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a7a:	f7fd fda9 	bl	80025d0 <HAL_GetTick>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	23fa      	movs	r3, #250	; 0xfa
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d901      	bls.n	8004a90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d0ee      	beq.n	8004a7a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004aae:	230f      	movs	r3, #15
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d12c      	bne.n	8004b1c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2180      	movs	r1, #128	; 0x80
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ad2:	f7fd fd7d 	bl	80025d0 <HAL_GetTick>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ada:	e014      	b.n	8004b06 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004adc:	f7fd fd78 	bl	80025d0 <HAL_GetTick>
 8004ae0:	0002      	movs	r2, r0
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	1ad2      	subs	r2, r2, r3
 8004ae6:	200f      	movs	r0, #15
 8004ae8:	183b      	adds	r3, r7, r0
 8004aea:	1839      	adds	r1, r7, r0
 8004aec:	7809      	ldrb	r1, [r1, #0]
 8004aee:	7019      	strb	r1, [r3, #0]
 8004af0:	23fa      	movs	r3, #250	; 0xfa
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d906      	bls.n	8004b06 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004af8:	183b      	adds	r3, r7, r0
 8004afa:	2203      	movs	r2, #3
 8004afc:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2229      	movs	r2, #41	; 0x29
 8004b02:	2103      	movs	r1, #3
 8004b04:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2240      	movs	r2, #64	; 0x40
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d104      	bne.n	8004b1c <RTC_EnterInitMode+0x76>
 8004b12:	230f      	movs	r3, #15
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d1df      	bne.n	8004adc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b1c:	230f      	movs	r3, #15
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	781b      	ldrb	r3, [r3, #0]
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b004      	add	sp, #16
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	240f      	movs	r4, #15
 8004b36:	193b      	adds	r3, r7, r4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	438a      	bics	r2, r1
 8004b46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d10d      	bne.n	8004b6e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7ff ff7f 	bl	8004a58 <HAL_RTC_WaitForSynchro>
 8004b5a:	1e03      	subs	r3, r0, #0
 8004b5c:	d021      	beq.n	8004ba2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2229      	movs	r2, #41	; 0x29
 8004b62:	2103      	movs	r1, #3
 8004b64:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004b66:	193b      	adds	r3, r7, r4
 8004b68:	2203      	movs	r2, #3
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e019      	b.n	8004ba2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b74:	2120      	movs	r1, #32
 8004b76:	438a      	bics	r2, r1
 8004b78:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7ff ff6b 	bl	8004a58 <HAL_RTC_WaitForSynchro>
 8004b82:	1e03      	subs	r3, r0, #0
 8004b84:	d007      	beq.n	8004b96 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2229      	movs	r2, #41	; 0x29
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004b8e:	230f      	movs	r3, #15
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2203      	movs	r2, #3
 8004b94:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <RTC_ExitInitMode+0x84>)
 8004b9c:	2120      	movs	r1, #32
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004ba2:	230f      	movs	r3, #15
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b005      	add	sp, #20
 8004bae:	bd90      	pop	{r4, r7, pc}
 8004bb0:	40002800 	.word	0x40002800

08004bb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	0002      	movs	r2, r0
 8004bbc:	1dfb      	adds	r3, r7, #7
 8004bbe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004bc4:	230b      	movs	r3, #11
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	1dfa      	adds	r2, r7, #7
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004bce:	e008      	b.n	8004be2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004bd6:	220b      	movs	r2, #11
 8004bd8:	18bb      	adds	r3, r7, r2
 8004bda:	18ba      	adds	r2, r7, r2
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	3a0a      	subs	r2, #10
 8004be0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004be2:	210b      	movs	r1, #11
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d8f1      	bhi.n	8004bd0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b2db      	uxtb	r3, r3
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b004      	add	sp, #16
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004c10:	1dfb      	adds	r3, r7, #7
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	001a      	movs	r2, r3
 8004c1a:	0013      	movs	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	210f      	movs	r1, #15
 8004c2e:	400b      	ands	r3, r1
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	18d3      	adds	r3, r2, r3
 8004c34:	b2db      	uxtb	r3, r3
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b004      	add	sp, #16
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e04a      	b.n	8004ce6 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	223d      	movs	r2, #61	; 0x3d
 8004c54:	5c9b      	ldrb	r3, [r3, r2]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	223c      	movs	r2, #60	; 0x3c
 8004c60:	2100      	movs	r1, #0
 8004c62:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f004 fb52 	bl	8009310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	223d      	movs	r2, #61	; 0x3d
 8004c70:	2102      	movs	r1, #2
 8004c72:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	0010      	movs	r0, r2
 8004c80:	f000 fab0 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2248      	movs	r2, #72	; 0x48
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	223e      	movs	r2, #62	; 0x3e
 8004c90:	2101      	movs	r1, #1
 8004c92:	5499      	strb	r1, [r3, r2]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	223f      	movs	r2, #63	; 0x3f
 8004c98:	2101      	movs	r1, #1
 8004c9a:	5499      	strb	r1, [r3, r2]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	5499      	strb	r1, [r3, r2]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2241      	movs	r2, #65	; 0x41
 8004ca8:	2101      	movs	r1, #1
 8004caa:	5499      	strb	r1, [r3, r2]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2242      	movs	r2, #66	; 0x42
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	5499      	strb	r1, [r3, r2]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2243      	movs	r2, #67	; 0x43
 8004cb8:	2101      	movs	r1, #1
 8004cba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2244      	movs	r2, #68	; 0x44
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	5499      	strb	r1, [r3, r2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2245      	movs	r2, #69	; 0x45
 8004cc8:	2101      	movs	r1, #1
 8004cca:	5499      	strb	r1, [r3, r2]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2246      	movs	r2, #70	; 0x46
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	5499      	strb	r1, [r3, r2]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2247      	movs	r2, #71	; 0x47
 8004cd8:	2101      	movs	r1, #1
 8004cda:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	223d      	movs	r2, #61	; 0x3d
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b002      	add	sp, #8
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	223d      	movs	r2, #61	; 0x3d
 8004cfc:	5c9b      	ldrb	r3, [r3, r2]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d001      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e042      	b.n	8004d8e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	223d      	movs	r2, #61	; 0x3d
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <HAL_TIM_Base_Start_IT+0xa8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00f      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0x5a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	05db      	lsls	r3, r3, #23
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d009      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0x5a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_TIM_Base_Start_IT+0xac>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0x5a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d116      	bne.n	8004d78 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d016      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x9a>
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	025b      	lsls	r3, r3, #9
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d011      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2101      	movs	r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	e008      	b.n	8004d8a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2101      	movs	r1, #1
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	00010007 	.word	0x00010007

08004da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2202      	movs	r2, #2
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d124      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d11d      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	4252      	negs	r2, r2
 8004dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2203      	movs	r2, #3
 8004de4:	4013      	ands	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 f9e2 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004df0:	e007      	b.n	8004e02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f000 f9d5 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 f9e1 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d125      	bne.n	8004e62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11e      	bne.n	8004e62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2205      	movs	r2, #5
 8004e2a:	4252      	negs	r2, r2
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	23c0      	movs	r3, #192	; 0xc0
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 f9b5 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e007      	b.n	8004e5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f9a8 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 f9b4 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2208      	movs	r2, #8
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d124      	bne.n	8004eba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2208      	movs	r2, #8
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d11d      	bne.n	8004eba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2209      	movs	r2, #9
 8004e84:	4252      	negs	r2, r2
 8004e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	2203      	movs	r2, #3
 8004e96:	4013      	ands	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f000 f989 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004ea2:	e007      	b.n	8004eb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 f97c 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f988 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d125      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	2210      	movs	r2, #16
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d11e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2211      	movs	r2, #17
 8004edc:	4252      	negs	r2, r2
 8004ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	23c0      	movs	r3, #192	; 0xc0
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 f95c 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e007      	b.n	8004f0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 f94f 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 f95b 	bl	80051c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10f      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d108      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2202      	movs	r2, #2
 8004f36:	4252      	negs	r2, r2
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f002 fa4d 	bl	80073dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d10f      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2280      	movs	r2, #128	; 0x80
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d108      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2281      	movs	r2, #129	; 0x81
 8004f64:	4252      	negs	r2, r2
 8004f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 facc 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2280      	movs	r2, #128	; 0x80
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_TIM_IRQHandler+0x260>)
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 fabb 	bl	8005518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2240      	movs	r2, #64	; 0x40
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d10f      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2240      	movs	r2, #64	; 0x40
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d108      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2241      	movs	r2, #65	; 0x41
 8004fc4:	4252      	negs	r2, r2
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f902 	bl	80051d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d10f      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d108      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2221      	movs	r2, #33	; 0x21
 8004ff2:	4252      	negs	r2, r2
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 fa7d 	bl	80054f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b002      	add	sp, #8
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	fffffeff 	.word	0xfffffeff

0800500c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	223c      	movs	r2, #60	; 0x3c
 800501a:	5c9b      	ldrb	r3, [r3, r2]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIM_ConfigClockSource+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e0b7      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x188>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	223c      	movs	r2, #60	; 0x3c
 8005028:	2101      	movs	r1, #1
 800502a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	223d      	movs	r2, #61	; 0x3d
 8005030:	2102      	movs	r1, #2
 8005032:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a57      	ldr	r2, [pc, #348]	; (800519c <HAL_TIM_ConfigClockSource+0x190>)
 8005040:	4013      	ands	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a56      	ldr	r2, [pc, #344]	; (80051a0 <HAL_TIM_ConfigClockSource+0x194>)
 8005048:	4013      	ands	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	0192      	lsls	r2, r2, #6
 800505c:	4293      	cmp	r3, r2
 800505e:	d040      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xd6>
 8005060:	2280      	movs	r2, #128	; 0x80
 8005062:	0192      	lsls	r2, r2, #6
 8005064:	4293      	cmp	r3, r2
 8005066:	d900      	bls.n	800506a <HAL_TIM_ConfigClockSource+0x5e>
 8005068:	e088      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	0152      	lsls	r2, r2, #5
 800506e:	4293      	cmp	r3, r2
 8005070:	d100      	bne.n	8005074 <HAL_TIM_ConfigClockSource+0x68>
 8005072:	e085      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	0152      	lsls	r2, r2, #5
 8005078:	4293      	cmp	r3, r2
 800507a:	d900      	bls.n	800507e <HAL_TIM_ConfigClockSource+0x72>
 800507c:	e07e      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800507e:	2b70      	cmp	r3, #112	; 0x70
 8005080:	d018      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0xa8>
 8005082:	d900      	bls.n	8005086 <HAL_TIM_ConfigClockSource+0x7a>
 8005084:	e07a      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 8005086:	2b60      	cmp	r3, #96	; 0x60
 8005088:	d04f      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x11e>
 800508a:	d900      	bls.n	800508e <HAL_TIM_ConfigClockSource+0x82>
 800508c:	e076      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800508e:	2b50      	cmp	r3, #80	; 0x50
 8005090:	d03b      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xfe>
 8005092:	d900      	bls.n	8005096 <HAL_TIM_ConfigClockSource+0x8a>
 8005094:	e072      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d057      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x13e>
 800509a:	d900      	bls.n	800509e <HAL_TIM_ConfigClockSource+0x92>
 800509c:	e06e      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 800509e:	2b30      	cmp	r3, #48	; 0x30
 80050a0:	d063      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050a2:	d86b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d060      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050a8:	d868      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x170>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d05d      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d05b      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050b2:	e063      	b.n	800517c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	6899      	ldr	r1, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f000 f98a 	bl	80053dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2277      	movs	r2, #119	; 0x77
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
      break;
 80050e0:	e04f      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6899      	ldr	r1, [r3, #8]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f000 f973 	bl	80053dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2180      	movs	r1, #128	; 0x80
 8005102:	01c9      	lsls	r1, r1, #7
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
      break;
 8005108:	e03b      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	001a      	movs	r2, r3
 8005118:	f000 f8e4 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2150      	movs	r1, #80	; 0x50
 8005122:	0018      	movs	r0, r3
 8005124:	f000 f93e 	bl	80053a4 <TIM_ITRx_SetConfig>
      break;
 8005128:	e02b      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	001a      	movs	r2, r3
 8005138:	f000 f902 	bl	8005340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2160      	movs	r1, #96	; 0x60
 8005142:	0018      	movs	r0, r3
 8005144:	f000 f92e 	bl	80053a4 <TIM_ITRx_SetConfig>
      break;
 8005148:	e01b      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	001a      	movs	r2, r3
 8005158:	f000 f8c4 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	0018      	movs	r0, r3
 8005164:	f000 f91e 	bl	80053a4 <TIM_ITRx_SetConfig>
      break;
 8005168:	e00b      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	0019      	movs	r1, r3
 8005174:	0010      	movs	r0, r2
 8005176:	f000 f915 	bl	80053a4 <TIM_ITRx_SetConfig>
        break;
 800517a:	e002      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	e000      	b.n	8005182 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005180:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	223d      	movs	r2, #61	; 0x3d
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	223c      	movs	r2, #60	; 0x3c
 800518e:	2100      	movs	r1, #0
 8005190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b004      	add	sp, #16
 800519a:	bd80      	pop	{r7, pc}
 800519c:	ffceff88 	.word	0xffceff88
 80051a0:	ffff00ff 	.word	0xffff00ff

080051a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b002      	add	sp, #8
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b002      	add	sp, #8
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <TIM_Base_SetConfig+0xe4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d008      	beq.n	800520e <TIM_Base_SetConfig+0x2a>
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	05db      	lsls	r3, r3, #23
 8005202:	429a      	cmp	r2, r3
 8005204:	d003      	beq.n	800520e <TIM_Base_SetConfig+0x2a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a30      	ldr	r2, [pc, #192]	; (80052cc <TIM_Base_SetConfig+0xe8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2270      	movs	r2, #112	; 0x70
 8005212:	4393      	bics	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_Base_SetConfig+0xe4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d018      	beq.n	800525a <TIM_Base_SetConfig+0x76>
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	05db      	lsls	r3, r3, #23
 800522e:	429a      	cmp	r2, r3
 8005230:	d013      	beq.n	800525a <TIM_Base_SetConfig+0x76>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a25      	ldr	r2, [pc, #148]	; (80052cc <TIM_Base_SetConfig+0xe8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00f      	beq.n	800525a <TIM_Base_SetConfig+0x76>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <TIM_Base_SetConfig+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00b      	beq.n	800525a <TIM_Base_SetConfig+0x76>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a23      	ldr	r2, [pc, #140]	; (80052d4 <TIM_Base_SetConfig+0xf0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d007      	beq.n	800525a <TIM_Base_SetConfig+0x76>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <TIM_Base_SetConfig+0xf4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_Base_SetConfig+0x76>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a21      	ldr	r2, [pc, #132]	; (80052dc <TIM_Base_SetConfig+0xf8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <TIM_Base_SetConfig+0xfc>)
 800525e:	4013      	ands	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2280      	movs	r2, #128	; 0x80
 8005270:	4393      	bics	r3, r2
 8005272:	001a      	movs	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <TIM_Base_SetConfig+0xe4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_Base_SetConfig+0xce>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <TIM_Base_SetConfig+0xf0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_Base_SetConfig+0xce>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <TIM_Base_SetConfig+0xf4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_Base_SetConfig+0xce>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <TIM_Base_SetConfig+0xf8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d103      	bne.n	80052ba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	615a      	str	r2, [r3, #20]
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b004      	add	sp, #16
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40002000 	.word	0x40002000
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	fffffcff 	.word	0xfffffcff

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	2201      	movs	r2, #1
 80052fc:	4393      	bics	r3, r2
 80052fe:	001a      	movs	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	22f0      	movs	r2, #240	; 0xf0
 800530e:	4393      	bics	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	220a      	movs	r2, #10
 8005320:	4393      	bics	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b006      	add	sp, #24
 800533e:	bd80      	pop	{r7, pc}

08005340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	2210      	movs	r2, #16
 8005352:	4393      	bics	r3, r2
 8005354:	001a      	movs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <TIM_TI2_ConfigInputStage+0x60>)
 800536a:	4013      	ands	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	22a0      	movs	r2, #160	; 0xa0
 800537c:	4393      	bics	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b006      	add	sp, #24
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	ffff0fff 	.word	0xffff0fff

080053a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <TIM_ITRx_SetConfig+0x34>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	2207      	movs	r2, #7
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	609a      	str	r2, [r3, #8]
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b004      	add	sp, #16
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	ffcfff8f 	.word	0xffcfff8f

080053dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <TIM_ETR_SetConfig+0x3c>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	021a      	lsls	r2, r3, #8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	431a      	orrs	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b006      	add	sp, #24
 8005416:	bd80      	pop	{r7, pc}
 8005418:	ffff00ff 	.word	0xffff00ff

0800541c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223c      	movs	r2, #60	; 0x3c
 800542a:	5c9b      	ldrb	r3, [r3, r2]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e055      	b.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	223c      	movs	r2, #60	; 0x3c
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	223d      	movs	r2, #61	; 0x3d
 8005440:	2102      	movs	r1, #2
 8005442:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d108      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a22      	ldr	r2, [pc, #136]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005462:	4013      	ands	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2270      	movs	r2, #112	; 0x70
 8005474:	4393      	bics	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	429a      	cmp	r2, r3
 800549e:	d009      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2280      	movs	r2, #128	; 0x80
 80054b8:	4393      	bics	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223d      	movs	r2, #61	; 0x3d
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223c      	movs	r2, #60	; 0x3c
 80054da:	2100      	movs	r1, #0
 80054dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	0018      	movs	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b004      	add	sp, #16
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	ff0fffff 	.word	0xff0fffff
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40014000 	.word	0x40014000

080054f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e046      	b.n	80055c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2284      	movs	r2, #132	; 0x84
 800553e:	589b      	ldr	r3, [r3, r2]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f003 ff40 	bl	80093d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2284      	movs	r2, #132	; 0x84
 8005558:	2124      	movs	r1, #36	; 0x24
 800555a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2101      	movs	r1, #1
 8005568:	438a      	bics	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f830 	bl	80055d4 <UART_SetConfig>
 8005574:	0003      	movs	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e024      	b.n	80055c8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fb01 	bl	8005b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	490d      	ldr	r1, [pc, #52]	; (80055d0 <HAL_UART_Init+0xa8>)
 800559a:	400a      	ands	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	212a      	movs	r1, #42	; 0x2a
 80055aa:	438a      	bics	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2101      	movs	r1, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 fb99 	bl	8005cf8 <UART_CheckIdleState>
 80055c6:	0003      	movs	r3, r0
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	ffffb7ff 	.word	0xffffb7ff

080055d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b5b0      	push	{r4, r5, r7, lr}
 80055d6:	b090      	sub	sp, #64	; 0x40
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055dc:	231a      	movs	r3, #26
 80055de:	2220      	movs	r2, #32
 80055e0:	4694      	mov	ip, r2
 80055e2:	44bc      	add	ip, r7
 80055e4:	4463      	add	r3, ip
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4ab9      	ldr	r2, [pc, #740]	; (80058f0 <UART_SetConfig+0x31c>)
 800560a:	4013      	ands	r3, r2
 800560c:	0019      	movs	r1, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005614:	430b      	orrs	r3, r1
 8005616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4ab5      	ldr	r2, [pc, #724]	; (80058f4 <UART_SetConfig+0x320>)
 8005620:	4013      	ands	r3, r2
 8005622:	0018      	movs	r0, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	68d9      	ldr	r1, [r3, #12]
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	0003      	movs	r3, r0
 800562e:	430b      	orrs	r3, r1
 8005630:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4aae      	ldr	r2, [pc, #696]	; (80058f8 <UART_SetConfig+0x324>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005648:	4313      	orrs	r3, r2
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4aaa      	ldr	r2, [pc, #680]	; (80058fc <UART_SetConfig+0x328>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	430b      	orrs	r3, r1
 8005660:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	220f      	movs	r2, #15
 800566a:	4393      	bics	r3, r2
 800566c:	0018      	movs	r0, r3
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	0003      	movs	r3, r0
 8005678:	430b      	orrs	r3, r1
 800567a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a9f      	ldr	r2, [pc, #636]	; (8005900 <UART_SetConfig+0x32c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d136      	bne.n	80056f4 <UART_SetConfig+0x120>
 8005686:	4b9f      	ldr	r3, [pc, #636]	; (8005904 <UART_SetConfig+0x330>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	2203      	movs	r2, #3
 800568c:	4013      	ands	r3, r2
 800568e:	2b03      	cmp	r3, #3
 8005690:	d020      	beq.n	80056d4 <UART_SetConfig+0x100>
 8005692:	d827      	bhi.n	80056e4 <UART_SetConfig+0x110>
 8005694:	2b02      	cmp	r3, #2
 8005696:	d00d      	beq.n	80056b4 <UART_SetConfig+0xe0>
 8005698:	d824      	bhi.n	80056e4 <UART_SetConfig+0x110>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <UART_SetConfig+0xd0>
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d010      	beq.n	80056c4 <UART_SetConfig+0xf0>
 80056a2:	e01f      	b.n	80056e4 <UART_SetConfig+0x110>
 80056a4:	231b      	movs	r3, #27
 80056a6:	2220      	movs	r2, #32
 80056a8:	4694      	mov	ip, r2
 80056aa:	44bc      	add	ip, r7
 80056ac:	4463      	add	r3, ip
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e0c5      	b.n	8005840 <UART_SetConfig+0x26c>
 80056b4:	231b      	movs	r3, #27
 80056b6:	2220      	movs	r2, #32
 80056b8:	4694      	mov	ip, r2
 80056ba:	44bc      	add	ip, r7
 80056bc:	4463      	add	r3, ip
 80056be:	2202      	movs	r2, #2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e0bd      	b.n	8005840 <UART_SetConfig+0x26c>
 80056c4:	231b      	movs	r3, #27
 80056c6:	2220      	movs	r2, #32
 80056c8:	4694      	mov	ip, r2
 80056ca:	44bc      	add	ip, r7
 80056cc:	4463      	add	r3, ip
 80056ce:	2204      	movs	r2, #4
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e0b5      	b.n	8005840 <UART_SetConfig+0x26c>
 80056d4:	231b      	movs	r3, #27
 80056d6:	2220      	movs	r2, #32
 80056d8:	4694      	mov	ip, r2
 80056da:	44bc      	add	ip, r7
 80056dc:	4463      	add	r3, ip
 80056de:	2208      	movs	r2, #8
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e0ad      	b.n	8005840 <UART_SetConfig+0x26c>
 80056e4:	231b      	movs	r3, #27
 80056e6:	2220      	movs	r2, #32
 80056e8:	4694      	mov	ip, r2
 80056ea:	44bc      	add	ip, r7
 80056ec:	4463      	add	r3, ip
 80056ee:	2210      	movs	r2, #16
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e0a5      	b.n	8005840 <UART_SetConfig+0x26c>
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a83      	ldr	r2, [pc, #524]	; (8005908 <UART_SetConfig+0x334>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d136      	bne.n	800576c <UART_SetConfig+0x198>
 80056fe:	4b81      	ldr	r3, [pc, #516]	; (8005904 <UART_SetConfig+0x330>)
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	220c      	movs	r2, #12
 8005704:	4013      	ands	r3, r2
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d020      	beq.n	800574c <UART_SetConfig+0x178>
 800570a:	d827      	bhi.n	800575c <UART_SetConfig+0x188>
 800570c:	2b08      	cmp	r3, #8
 800570e:	d00d      	beq.n	800572c <UART_SetConfig+0x158>
 8005710:	d824      	bhi.n	800575c <UART_SetConfig+0x188>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <UART_SetConfig+0x148>
 8005716:	2b04      	cmp	r3, #4
 8005718:	d010      	beq.n	800573c <UART_SetConfig+0x168>
 800571a:	e01f      	b.n	800575c <UART_SetConfig+0x188>
 800571c:	231b      	movs	r3, #27
 800571e:	2220      	movs	r2, #32
 8005720:	4694      	mov	ip, r2
 8005722:	44bc      	add	ip, r7
 8005724:	4463      	add	r3, ip
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e089      	b.n	8005840 <UART_SetConfig+0x26c>
 800572c:	231b      	movs	r3, #27
 800572e:	2220      	movs	r2, #32
 8005730:	4694      	mov	ip, r2
 8005732:	44bc      	add	ip, r7
 8005734:	4463      	add	r3, ip
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e081      	b.n	8005840 <UART_SetConfig+0x26c>
 800573c:	231b      	movs	r3, #27
 800573e:	2220      	movs	r2, #32
 8005740:	4694      	mov	ip, r2
 8005742:	44bc      	add	ip, r7
 8005744:	4463      	add	r3, ip
 8005746:	2204      	movs	r2, #4
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e079      	b.n	8005840 <UART_SetConfig+0x26c>
 800574c:	231b      	movs	r3, #27
 800574e:	2220      	movs	r2, #32
 8005750:	4694      	mov	ip, r2
 8005752:	44bc      	add	ip, r7
 8005754:	4463      	add	r3, ip
 8005756:	2208      	movs	r2, #8
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e071      	b.n	8005840 <UART_SetConfig+0x26c>
 800575c:	231b      	movs	r3, #27
 800575e:	2220      	movs	r2, #32
 8005760:	4694      	mov	ip, r2
 8005762:	44bc      	add	ip, r7
 8005764:	4463      	add	r3, ip
 8005766:	2210      	movs	r2, #16
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e069      	b.n	8005840 <UART_SetConfig+0x26c>
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a66      	ldr	r2, [pc, #408]	; (800590c <UART_SetConfig+0x338>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d107      	bne.n	8005786 <UART_SetConfig+0x1b2>
 8005776:	231b      	movs	r3, #27
 8005778:	2220      	movs	r2, #32
 800577a:	4694      	mov	ip, r2
 800577c:	44bc      	add	ip, r7
 800577e:	4463      	add	r3, ip
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	e05c      	b.n	8005840 <UART_SetConfig+0x26c>
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a61      	ldr	r2, [pc, #388]	; (8005910 <UART_SetConfig+0x33c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d107      	bne.n	80057a0 <UART_SetConfig+0x1cc>
 8005790:	231b      	movs	r3, #27
 8005792:	2220      	movs	r2, #32
 8005794:	4694      	mov	ip, r2
 8005796:	44bc      	add	ip, r7
 8005798:	4463      	add	r3, ip
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e04f      	b.n	8005840 <UART_SetConfig+0x26c>
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a54      	ldr	r2, [pc, #336]	; (80058f8 <UART_SetConfig+0x324>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d143      	bne.n	8005832 <UART_SetConfig+0x25e>
 80057aa:	4b56      	ldr	r3, [pc, #344]	; (8005904 <UART_SetConfig+0x330>)
 80057ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ae:	23c0      	movs	r3, #192	; 0xc0
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	4013      	ands	r3, r2
 80057b4:	22c0      	movs	r2, #192	; 0xc0
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d02a      	beq.n	8005812 <UART_SetConfig+0x23e>
 80057bc:	22c0      	movs	r2, #192	; 0xc0
 80057be:	0112      	lsls	r2, r2, #4
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d82e      	bhi.n	8005822 <UART_SetConfig+0x24e>
 80057c4:	2280      	movs	r2, #128	; 0x80
 80057c6:	0112      	lsls	r2, r2, #4
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d012      	beq.n	80057f2 <UART_SetConfig+0x21e>
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	0112      	lsls	r2, r2, #4
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d826      	bhi.n	8005822 <UART_SetConfig+0x24e>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <UART_SetConfig+0x20e>
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	00d2      	lsls	r2, r2, #3
 80057dc:	4293      	cmp	r3, r2
 80057de:	d010      	beq.n	8005802 <UART_SetConfig+0x22e>
 80057e0:	e01f      	b.n	8005822 <UART_SetConfig+0x24e>
 80057e2:	231b      	movs	r3, #27
 80057e4:	2220      	movs	r2, #32
 80057e6:	4694      	mov	ip, r2
 80057e8:	44bc      	add	ip, r7
 80057ea:	4463      	add	r3, ip
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e026      	b.n	8005840 <UART_SetConfig+0x26c>
 80057f2:	231b      	movs	r3, #27
 80057f4:	2220      	movs	r2, #32
 80057f6:	4694      	mov	ip, r2
 80057f8:	44bc      	add	ip, r7
 80057fa:	4463      	add	r3, ip
 80057fc:	2202      	movs	r2, #2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e01e      	b.n	8005840 <UART_SetConfig+0x26c>
 8005802:	231b      	movs	r3, #27
 8005804:	2220      	movs	r2, #32
 8005806:	4694      	mov	ip, r2
 8005808:	44bc      	add	ip, r7
 800580a:	4463      	add	r3, ip
 800580c:	2204      	movs	r2, #4
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e016      	b.n	8005840 <UART_SetConfig+0x26c>
 8005812:	231b      	movs	r3, #27
 8005814:	2220      	movs	r2, #32
 8005816:	4694      	mov	ip, r2
 8005818:	44bc      	add	ip, r7
 800581a:	4463      	add	r3, ip
 800581c:	2208      	movs	r2, #8
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e00e      	b.n	8005840 <UART_SetConfig+0x26c>
 8005822:	231b      	movs	r3, #27
 8005824:	2220      	movs	r2, #32
 8005826:	4694      	mov	ip, r2
 8005828:	44bc      	add	ip, r7
 800582a:	4463      	add	r3, ip
 800582c:	2210      	movs	r2, #16
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e006      	b.n	8005840 <UART_SetConfig+0x26c>
 8005832:	231b      	movs	r3, #27
 8005834:	2220      	movs	r2, #32
 8005836:	4694      	mov	ip, r2
 8005838:	44bc      	add	ip, r7
 800583a:	4463      	add	r3, ip
 800583c:	2210      	movs	r2, #16
 800583e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <UART_SetConfig+0x324>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d000      	beq.n	800584c <UART_SetConfig+0x278>
 800584a:	e0ad      	b.n	80059a8 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800584c:	231b      	movs	r3, #27
 800584e:	2220      	movs	r2, #32
 8005850:	4694      	mov	ip, r2
 8005852:	44bc      	add	ip, r7
 8005854:	4463      	add	r3, ip
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d015      	beq.n	8005888 <UART_SetConfig+0x2b4>
 800585c:	dc18      	bgt.n	8005890 <UART_SetConfig+0x2bc>
 800585e:	2b04      	cmp	r3, #4
 8005860:	d00d      	beq.n	800587e <UART_SetConfig+0x2aa>
 8005862:	dc15      	bgt.n	8005890 <UART_SetConfig+0x2bc>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <UART_SetConfig+0x29a>
 8005868:	2b02      	cmp	r3, #2
 800586a:	d005      	beq.n	8005878 <UART_SetConfig+0x2a4>
 800586c:	e010      	b.n	8005890 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800586e:	f7fe fcab 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005872:	0003      	movs	r3, r0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005876:	e015      	b.n	80058a4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005878:	4b26      	ldr	r3, [pc, #152]	; (8005914 <UART_SetConfig+0x340>)
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800587c:	e012      	b.n	80058a4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587e:	f7fe fc17 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8005882:	0003      	movs	r3, r0
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005886:	e00d      	b.n	80058a4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800588e:	e009      	b.n	80058a4 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005894:	231a      	movs	r3, #26
 8005896:	2220      	movs	r2, #32
 8005898:	4694      	mov	ip, r2
 800589a:	44bc      	add	ip, r7
 800589c:	4463      	add	r3, ip
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
        break;
 80058a2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d100      	bne.n	80058ac <UART_SetConfig+0x2d8>
 80058aa:	e154      	b.n	8005b56 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <UART_SetConfig+0x344>)
 80058b2:	0052      	lsls	r2, r2, #1
 80058b4:	5ad3      	ldrh	r3, [r2, r3]
 80058b6:	0019      	movs	r1, r3
 80058b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80058ba:	f7fa fc23 	bl	8000104 <__udivsi3>
 80058be:	0003      	movs	r3, r0
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	0013      	movs	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d305      	bcc.n	80058de <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058da:	429a      	cmp	r2, r3
 80058dc:	d91e      	bls.n	800591c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80058de:	231a      	movs	r3, #26
 80058e0:	2220      	movs	r2, #32
 80058e2:	4694      	mov	ip, r2
 80058e4:	44bc      	add	ip, r7
 80058e6:	4463      	add	r3, ip
 80058e8:	2201      	movs	r2, #1
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e133      	b.n	8005b56 <UART_SetConfig+0x582>
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	cfff69f3 	.word	0xcfff69f3
 80058f4:	ffffcfff 	.word	0xffffcfff
 80058f8:	40008000 	.word	0x40008000
 80058fc:	11fff4ff 	.word	0x11fff4ff
 8005900:	40013800 	.word	0x40013800
 8005904:	40021000 	.word	0x40021000
 8005908:	40004400 	.word	0x40004400
 800590c:	40004800 	.word	0x40004800
 8005910:	40004c00 	.word	0x40004c00
 8005914:	00f42400 	.word	0x00f42400
 8005918:	08009838 	.word	0x08009838
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005928:	4b97      	ldr	r3, [pc, #604]	; (8005b88 <UART_SetConfig+0x5b4>)
 800592a:	0052      	lsls	r2, r2, #1
 800592c:	5ad3      	ldrh	r3, [r2, r3]
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	69b8      	ldr	r0, [r7, #24]
 800593a:	69f9      	ldr	r1, [r7, #28]
 800593c:	f7fa fd58 	bl	80003f0 <__aeabi_uldivmod>
 8005940:	0002      	movs	r2, r0
 8005942:	000b      	movs	r3, r1
 8005944:	0e11      	lsrs	r1, r2, #24
 8005946:	021d      	lsls	r5, r3, #8
 8005948:	430d      	orrs	r5, r1
 800594a:	0214      	lsls	r4, r2, #8
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	1900      	adds	r0, r0, r4
 800595e:	4169      	adcs	r1, r5
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f7fa fd3f 	bl	80003f0 <__aeabi_uldivmod>
 8005972:	0002      	movs	r2, r0
 8005974:	000b      	movs	r3, r1
 8005976:	0013      	movs	r3, r2
 8005978:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800597a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597c:	23c0      	movs	r3, #192	; 0xc0
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	429a      	cmp	r2, r3
 8005982:	d309      	bcc.n	8005998 <UART_SetConfig+0x3c4>
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	035b      	lsls	r3, r3, #13
 800598a:	429a      	cmp	r2, r3
 800598c:	d204      	bcs.n	8005998 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	e0de      	b.n	8005b56 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8005998:	231a      	movs	r3, #26
 800599a:	2220      	movs	r2, #32
 800599c:	4694      	mov	ip, r2
 800599e:	44bc      	add	ip, r7
 80059a0:	4463      	add	r3, ip
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	e0d6      	b.n	8005b56 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d000      	beq.n	80059b6 <UART_SetConfig+0x3e2>
 80059b4:	e074      	b.n	8005aa0 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80059b6:	231b      	movs	r3, #27
 80059b8:	2220      	movs	r2, #32
 80059ba:	4694      	mov	ip, r2
 80059bc:	44bc      	add	ip, r7
 80059be:	4463      	add	r3, ip
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d015      	beq.n	80059f2 <UART_SetConfig+0x41e>
 80059c6:	dc18      	bgt.n	80059fa <UART_SetConfig+0x426>
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d00d      	beq.n	80059e8 <UART_SetConfig+0x414>
 80059cc:	dc15      	bgt.n	80059fa <UART_SetConfig+0x426>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <UART_SetConfig+0x404>
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d005      	beq.n	80059e2 <UART_SetConfig+0x40e>
 80059d6:	e010      	b.n	80059fa <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fe fbf6 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 80059dc:	0003      	movs	r3, r0
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059e0:	e015      	b.n	8005a0e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e2:	4b6a      	ldr	r3, [pc, #424]	; (8005b8c <UART_SetConfig+0x5b8>)
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059e6:	e012      	b.n	8005a0e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e8:	f7fe fb62 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 80059ec:	0003      	movs	r3, r0
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059f0:	e00d      	b.n	8005a0e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059f8:	e009      	b.n	8005a0e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80059fe:	231a      	movs	r3, #26
 8005a00:	2220      	movs	r2, #32
 8005a02:	4694      	mov	ip, r2
 8005a04:	44bc      	add	ip, r7
 8005a06:	4463      	add	r3, ip
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
        break;
 8005a0c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d100      	bne.n	8005a16 <UART_SetConfig+0x442>
 8005a14:	e09f      	b.n	8005b56 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a1a:	4b5b      	ldr	r3, [pc, #364]	; (8005b88 <UART_SetConfig+0x5b4>)
 8005a1c:	0052      	lsls	r2, r2, #1
 8005a1e:	5ad3      	ldrh	r3, [r2, r3]
 8005a20:	0019      	movs	r1, r3
 8005a22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a24:	f7fa fb6e 	bl	8000104 <__udivsi3>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	005a      	lsls	r2, r3, #1
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	18d2      	adds	r2, r2, r3
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	0019      	movs	r1, r3
 8005a3a:	0010      	movs	r0, r2
 8005a3c:	f7fa fb62 	bl	8000104 <__udivsi3>
 8005a40:	0003      	movs	r3, r0
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d921      	bls.n	8005a90 <UART_SetConfig+0x4bc>
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	025b      	lsls	r3, r3, #9
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d21c      	bcs.n	8005a90 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	200e      	movs	r0, #14
 8005a5c:	2420      	movs	r4, #32
 8005a5e:	193b      	adds	r3, r7, r4
 8005a60:	181b      	adds	r3, r3, r0
 8005a62:	210f      	movs	r1, #15
 8005a64:	438a      	bics	r2, r1
 8005a66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2207      	movs	r2, #7
 8005a70:	4013      	ands	r3, r2
 8005a72:	b299      	uxth	r1, r3
 8005a74:	193b      	adds	r3, r7, r4
 8005a76:	181b      	adds	r3, r3, r0
 8005a78:	193a      	adds	r2, r7, r4
 8005a7a:	1812      	adds	r2, r2, r0
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	193a      	adds	r2, r7, r4
 8005a88:	1812      	adds	r2, r2, r0
 8005a8a:	8812      	ldrh	r2, [r2, #0]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e062      	b.n	8005b56 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	231a      	movs	r3, #26
 8005a92:	2220      	movs	r2, #32
 8005a94:	4694      	mov	ip, r2
 8005a96:	44bc      	add	ip, r7
 8005a98:	4463      	add	r3, ip
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e05a      	b.n	8005b56 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	4694      	mov	ip, r2
 8005aa6:	44bc      	add	ip, r7
 8005aa8:	4463      	add	r3, ip
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d015      	beq.n	8005adc <UART_SetConfig+0x508>
 8005ab0:	dc18      	bgt.n	8005ae4 <UART_SetConfig+0x510>
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d00d      	beq.n	8005ad2 <UART_SetConfig+0x4fe>
 8005ab6:	dc15      	bgt.n	8005ae4 <UART_SetConfig+0x510>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <UART_SetConfig+0x4ee>
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d005      	beq.n	8005acc <UART_SetConfig+0x4f8>
 8005ac0:	e010      	b.n	8005ae4 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac2:	f7fe fb81 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aca:	e015      	b.n	8005af8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <UART_SetConfig+0x5b8>)
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ad0:	e012      	b.n	8005af8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad2:	f7fe faed 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ada:	e00d      	b.n	8005af8 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae2:	e009      	b.n	8005af8 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005ae8:	231a      	movs	r3, #26
 8005aea:	2220      	movs	r2, #32
 8005aec:	4694      	mov	ip, r2
 8005aee:	44bc      	add	ip, r7
 8005af0:	4463      	add	r3, ip
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
        break;
 8005af6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02b      	beq.n	8005b56 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b02:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <UART_SetConfig+0x5b4>)
 8005b04:	0052      	lsls	r2, r2, #1
 8005b06:	5ad3      	ldrh	r3, [r2, r3]
 8005b08:	0019      	movs	r1, r3
 8005b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b0c:	f7fa fafa 	bl	8000104 <__udivsi3>
 8005b10:	0003      	movs	r3, r0
 8005b12:	001a      	movs	r2, r3
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	18d2      	adds	r2, r2, r3
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	0019      	movs	r1, r3
 8005b22:	0010      	movs	r0, r2
 8005b24:	f7fa faee 	bl	8000104 <__udivsi3>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b0f      	cmp	r3, #15
 8005b32:	d909      	bls.n	8005b48 <UART_SetConfig+0x574>
 8005b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b36:	2380      	movs	r3, #128	; 0x80
 8005b38:	025b      	lsls	r3, r3, #9
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d204      	bcs.n	8005b48 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e006      	b.n	8005b56 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8005b48:	231a      	movs	r3, #26
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	4694      	mov	ip, r2
 8005b4e:	44bc      	add	ip, r7
 8005b50:	4463      	add	r3, ip
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	226a      	movs	r2, #106	; 0x6a
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2268      	movs	r2, #104	; 0x68
 8005b62:	2101      	movs	r1, #1
 8005b64:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	2200      	movs	r2, #0
 8005b6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	2200      	movs	r2, #0
 8005b70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b72:	231a      	movs	r3, #26
 8005b74:	2220      	movs	r2, #32
 8005b76:	4694      	mov	ip, r2
 8005b78:	44bc      	add	ip, r7
 8005b7a:	4463      	add	r3, ip
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b010      	add	sp, #64	; 0x40
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	08009838 	.word	0x08009838
 8005b8c:	00f42400 	.word	0x00f42400

08005b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <UART_AdvFeatureConfig+0x144>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4a43      	ldr	r2, [pc, #268]	; (8005cd8 <UART_AdvFeatureConfig+0x148>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	0019      	movs	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	2204      	movs	r2, #4
 8005be2:	4013      	ands	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	4a3b      	ldr	r2, [pc, #236]	; (8005cdc <UART_AdvFeatureConfig+0x14c>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	2208      	movs	r2, #8
 8005c04:	4013      	ands	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <UART_AdvFeatureConfig+0x150>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	2210      	movs	r2, #16
 8005c26:	4013      	ands	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a2c      	ldr	r2, [pc, #176]	; (8005ce4 <UART_AdvFeatureConfig+0x154>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	0019      	movs	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	2220      	movs	r2, #32
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4a25      	ldr	r2, [pc, #148]	; (8005ce8 <UART_AdvFeatureConfig+0x158>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	0019      	movs	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	2240      	movs	r2, #64	; 0x40
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d01d      	beq.n	8005caa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <UART_AdvFeatureConfig+0x15c>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	0019      	movs	r1, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	035b      	lsls	r3, r3, #13
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10b      	bne.n	8005caa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <UART_AdvFeatureConfig+0x160>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	4a0e      	ldr	r2, [pc, #56]	; (8005cf4 <UART_AdvFeatureConfig+0x164>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b002      	add	sp, #8
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	fffdffff 	.word	0xfffdffff
 8005cd8:	fffeffff 	.word	0xfffeffff
 8005cdc:	fffbffff 	.word	0xfffbffff
 8005ce0:	ffff7fff 	.word	0xffff7fff
 8005ce4:	ffffefff 	.word	0xffffefff
 8005ce8:	ffffdfff 	.word	0xffffdfff
 8005cec:	ffefffff 	.word	0xffefffff
 8005cf0:	ff9fffff 	.word	0xff9fffff
 8005cf4:	fff7ffff 	.word	0xfff7ffff

08005cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	228c      	movs	r2, #140	; 0x8c
 8005d04:	2100      	movs	r1, #0
 8005d06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d08:	f7fc fc62 	bl	80025d0 <HAL_GetTick>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2208      	movs	r2, #8
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d10c      	bne.n	8005d38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2280      	movs	r2, #128	; 0x80
 8005d22:	0391      	lsls	r1, r2, #14
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <UART_CheckIdleState+0x90>)
 8005d28:	9200      	str	r2, [sp, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f000 f82e 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005d30:	1e03      	subs	r3, r0, #0
 8005d32:	d001      	beq.n	8005d38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e023      	b.n	8005d80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d10c      	bne.n	8005d60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	03d1      	lsls	r1, r2, #15
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4a0e      	ldr	r2, [pc, #56]	; (8005d88 <UART_CheckIdleState+0x90>)
 8005d50:	9200      	str	r2, [sp, #0]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f000 f81a 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005d58:	1e03      	subs	r3, r0, #0
 8005d5a:	d001      	beq.n	8005d60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e00f      	b.n	8005d80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2284      	movs	r2, #132	; 0x84
 8005d64:	2120      	movs	r1, #32
 8005d66:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2288      	movs	r2, #136	; 0x88
 8005d6c:	2120      	movs	r1, #32
 8005d6e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b004      	add	sp, #16
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	01ffffff 	.word	0x01ffffff

08005d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b094      	sub	sp, #80	; 0x50
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	e0a7      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005da0:	3301      	adds	r3, #1
 8005da2:	d100      	bne.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005da4:	e0a3      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fc fc13 	bl	80025d0 <HAL_GetTick>
 8005daa:	0002      	movs	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d13f      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	f383 8810 	msr	PRIMASK, r3
}
 8005dd0:	46c0      	nop			; (mov r8, r8)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	494e      	ldr	r1, [pc, #312]	; (8005f18 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005dde:	400a      	ands	r2, r1
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	f383 8810 	msr	PRIMASK, r3
}
 8005dec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dee:	f3ef 8310 	mrs	r3, PRIMASK
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df6:	643b      	str	r3, [r7, #64]	; 0x40
 8005df8:	2301      	movs	r3, #1
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f383 8810 	msr	PRIMASK, r3
}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2101      	movs	r1, #1
 8005e10:	438a      	bics	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1a:	f383 8810 	msr	PRIMASK, r3
}
 8005e1e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2284      	movs	r2, #132	; 0x84
 8005e24:	2120      	movs	r1, #32
 8005e26:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2288      	movs	r2, #136	; 0x88
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2280      	movs	r2, #128	; 0x80
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e069      	b.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2204      	movs	r2, #4
 8005e44:	4013      	ands	r3, r2
 8005e46:	d052      	beq.n	8005eee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	401a      	ands	r2, r3
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d148      	bne.n	8005eee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2280      	movs	r2, #128	; 0x80
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e66:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e6c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e70:	2301      	movs	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f383 8810 	msr	PRIMASK, r3
}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4924      	ldr	r1, [pc, #144]	; (8005f18 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e88:	400a      	ands	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f383 8810 	msr	PRIMASK, r3
}
 8005e96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e98:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f383 8810 	msr	PRIMASK, r3
}
 8005eac:	46c0      	nop			; (mov r8, r8)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	438a      	bics	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]
 8005ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	f383 8810 	msr	PRIMASK, r3
}
 8005ec8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2284      	movs	r2, #132	; 0x84
 8005ece:	2120      	movs	r1, #32
 8005ed0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2288      	movs	r2, #136	; 0x88
 8005ed6:	2120      	movs	r1, #32
 8005ed8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	228c      	movs	r2, #140	; 0x8c
 8005ede:	2120      	movs	r1, #32
 8005ee0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e010      	b.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	425a      	negs	r2, r3
 8005efe:	4153      	adcs	r3, r2
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	001a      	movs	r2, r3
 8005f04:	1dfb      	adds	r3, r7, #7
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d100      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x182>
 8005f0c:	e747      	b.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b014      	add	sp, #80	; 0x50
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	fffffe5f 	.word	0xfffffe5f

08005f1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	5c9b      	ldrb	r3, [r3, r2]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e027      	b.n	8005f82 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	2101      	movs	r1, #1
 8005f38:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2284      	movs	r2, #132	; 0x84
 8005f3e:	2124      	movs	r1, #36	; 0x24
 8005f40:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2101      	movs	r1, #1
 8005f56:	438a      	bics	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2284      	movs	r2, #132	; 0x84
 8005f74:	2120      	movs	r1, #32
 8005f76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b004      	add	sp, #16
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	dfffffff 	.word	0xdfffffff

08005f90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	5c9b      	ldrb	r3, [r3, r2]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e02e      	b.n	8006006 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2280      	movs	r2, #128	; 0x80
 8005fac:	2101      	movs	r1, #1
 8005fae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2284      	movs	r2, #132	; 0x84
 8005fb4:	2124      	movs	r1, #36	; 0x24
 8005fb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2101      	movs	r1, #1
 8005fcc:	438a      	bics	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	08d9      	lsrs	r1, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f000 f854 	bl	8006094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2284      	movs	r2, #132	; 0x84
 8005ff8:	2120      	movs	r1, #32
 8005ffa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	2100      	movs	r1, #0
 8006002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2280      	movs	r2, #128	; 0x80
 800601e:	5c9b      	ldrb	r3, [r3, r2]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e02f      	b.n	8006088 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2280      	movs	r2, #128	; 0x80
 800602c:	2101      	movs	r1, #1
 800602e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2284      	movs	r2, #132	; 0x84
 8006034:	2124      	movs	r1, #36	; 0x24
 8006036:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2101      	movs	r1, #1
 800604c:	438a      	bics	r2, r1
 800604e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006058:	4013      	ands	r3, r2
 800605a:	0019      	movs	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f813 	bl	8006094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2284      	movs	r2, #132	; 0x84
 800607a:	2120      	movs	r1, #32
 800607c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2280      	movs	r2, #128	; 0x80
 8006082:	2100      	movs	r1, #0
 8006084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b004      	add	sp, #16
 800608e:	bd80      	pop	{r7, pc}
 8006090:	f1ffffff 	.word	0xf1ffffff

08006094 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	226a      	movs	r2, #106	; 0x6a
 80060a8:	2101      	movs	r1, #1
 80060aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2268      	movs	r2, #104	; 0x68
 80060b0:	2101      	movs	r1, #1
 80060b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060b4:	e043      	b.n	800613e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060b6:	260f      	movs	r6, #15
 80060b8:	19bb      	adds	r3, r7, r6
 80060ba:	2208      	movs	r2, #8
 80060bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060be:	200e      	movs	r0, #14
 80060c0:	183b      	adds	r3, r7, r0
 80060c2:	2208      	movs	r2, #8
 80060c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	0e5b      	lsrs	r3, r3, #25
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	240d      	movs	r4, #13
 80060d2:	193b      	adds	r3, r7, r4
 80060d4:	2107      	movs	r1, #7
 80060d6:	400a      	ands	r2, r1
 80060d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	0f5b      	lsrs	r3, r3, #29
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	250c      	movs	r5, #12
 80060e6:	197b      	adds	r3, r7, r5
 80060e8:	2107      	movs	r1, #7
 80060ea:	400a      	ands	r2, r1
 80060ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ee:	183b      	adds	r3, r7, r0
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	197a      	adds	r2, r7, r5
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	4914      	ldr	r1, [pc, #80]	; (8006148 <UARTEx_SetNbDataToProcess+0xb4>)
 80060f8:	5c8a      	ldrb	r2, [r1, r2]
 80060fa:	435a      	muls	r2, r3
 80060fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80060fe:	197b      	adds	r3, r7, r5
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4a12      	ldr	r2, [pc, #72]	; (800614c <UARTEx_SetNbDataToProcess+0xb8>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006106:	0019      	movs	r1, r3
 8006108:	f7fa f886 	bl	8000218 <__divsi3>
 800610c:	0003      	movs	r3, r0
 800610e:	b299      	uxth	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	226a      	movs	r2, #106	; 0x6a
 8006114:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006116:	19bb      	adds	r3, r7, r6
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	193a      	adds	r2, r7, r4
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	490a      	ldr	r1, [pc, #40]	; (8006148 <UARTEx_SetNbDataToProcess+0xb4>)
 8006120:	5c8a      	ldrb	r2, [r1, r2]
 8006122:	435a      	muls	r2, r3
 8006124:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006126:	193b      	adds	r3, r7, r4
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	4a08      	ldr	r2, [pc, #32]	; (800614c <UARTEx_SetNbDataToProcess+0xb8>)
 800612c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800612e:	0019      	movs	r1, r3
 8006130:	f7fa f872 	bl	8000218 <__divsi3>
 8006134:	0003      	movs	r3, r0
 8006136:	b299      	uxth	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2268      	movs	r2, #104	; 0x68
 800613c:	5299      	strh	r1, [r3, r2]
}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	46bd      	mov	sp, r7
 8006142:	b005      	add	sp, #20
 8006144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	08009850 	.word	0x08009850
 800614c:	08009858 	.word	0x08009858

08006150 <LEDmultiplexing>:
static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay);
static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character);
void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition);


void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 8006150:	b590      	push	{r4, r7, lr}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 f9ba 	bl	80064d4 <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2265      	movs	r2, #101	; 0x65
 8006164:	5c9a      	ldrb	r2, [r3, r2]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f000 f970 	bl	8006450 <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2265      	movs	r2, #101	; 0x65
 8006174:	5c9b      	ldrb	r3, [r3, r2]
 8006176:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2260      	movs	r2, #96	; 0x60
 800617c:	185b      	adds	r3, r3, r1
 800617e:	189b      	adds	r3, r3, r2
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0011      	movs	r1, r2
 8006186:	0018      	movs	r0, r3
 8006188:	f000 fa10 	bl	80065ac <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2264      	movs	r2, #100	; 0x64
 8006190:	5c9a      	ldrb	r2, [r3, r2]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2165      	movs	r1, #101	; 0x65
 8006196:	5c5b      	ldrb	r3, [r3, r1]
 8006198:	429a      	cmp	r2, r3
 800619a:	d107      	bne.n	80061ac <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	0019      	movs	r1, r3
 80061a8:	f7fd f953 	bl	8003452 <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2265      	movs	r2, #101	; 0x65
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	3301      	adds	r3, #1
 80061b4:	b2d9      	uxtb	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2265      	movs	r2, #101	; 0x65
 80061ba:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2265      	movs	r2, #101	; 0x65
 80061c0:	5c9b      	ldrb	r3, [r3, r2]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d903      	bls.n	80061ce <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2265      	movs	r2, #101	; 0x65
 80061ca:	2100      	movs	r1, #0
 80061cc:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	226c      	movs	r2, #108	; 0x6c
 80061d2:	5a9b      	ldrh	r3, [r3, r2]
 80061d4:	3301      	adds	r3, #1
 80061d6:	b299      	uxth	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	226c      	movs	r2, #108	; 0x6c
 80061dc:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	226c      	movs	r2, #108	; 0x6c
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	211e      	movs	r1, #30
 80061e6:	0018      	movs	r0, r3
 80061e8:	f7fa f812 	bl	8000210 <__aeabi_uidivmod>
 80061ec:	000b      	movs	r3, r1
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d000      	beq.n	80061f6 <LEDmultiplexing+0xa6>
 80061f4:	e0a2      	b.n	800633c <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2267      	movs	r2, #103	; 0x67
 80061fa:	5c9b      	ldrb	r3, [r3, r2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d100      	bne.n	8006202 <LEDmultiplexing+0xb2>
 8006200:	e09c      	b.n	800633c <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2267      	movs	r2, #103	; 0x67
 8006206:	5c9b      	ldrb	r3, [r3, r2]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d13f      	bne.n	800628c <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 800620c:	230f      	movs	r3, #15
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2203      	movs	r2, #3
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e015      	b.n	8006242 <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 8006216:	240f      	movs	r4, #15
 8006218:	193b      	adds	r3, r7, r4
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	193b      	adds	r3, r7, r4
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	2060      	movs	r0, #96	; 0x60
 8006226:	188a      	adds	r2, r1, r2
 8006228:	1812      	adds	r2, r2, r0
 800622a:	7810      	ldrb	r0, [r2, #0]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	2160      	movs	r1, #96	; 0x60
 8006230:	18d3      	adds	r3, r2, r3
 8006232:	185b      	adds	r3, r3, r1
 8006234:	1c02      	adds	r2, r0, #0
 8006236:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8006238:	193b      	adds	r3, r7, r4
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	193b      	adds	r3, r7, r4
 800623e:	3a01      	subs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	230f      	movs	r3, #15
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e4      	bne.n	8006216 <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2266      	movs	r2, #102	; 0x66
 8006250:	5c9b      	ldrb	r3, [r3, r2]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d80c      	bhi.n	8006270 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2266      	movs	r2, #102	; 0x66
 800625a:	5c9b      	ldrb	r3, [r3, r2]
 800625c:	0019      	movs	r1, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2268      	movs	r2, #104	; 0x68
 8006262:	185b      	adds	r3, r3, r1
 8006264:	189b      	adds	r3, r3, r2
 8006266:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2260      	movs	r2, #96	; 0x60
 800626c:	5499      	strb	r1, [r3, r2]
 800626e:	e00d      	b.n	800628c <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2266      	movs	r2, #102	; 0x66
 8006274:	5c9b      	ldrb	r3, [r3, r2]
 8006276:	001a      	movs	r2, r3
 8006278:	2307      	movs	r3, #7
 800627a:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	216e      	movs	r1, #110	; 0x6e
 8006280:	18d3      	adds	r3, r2, r3
 8006282:	185b      	adds	r3, r3, r1
 8006284:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2260      	movs	r2, #96	; 0x60
 800628a:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2267      	movs	r2, #103	; 0x67
 8006290:	5c9b      	ldrb	r3, [r3, r2]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d13d      	bne.n	8006312 <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 8006296:	230e      	movs	r3, #14
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e015      	b.n	80062cc <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 80062a0:	240e      	movs	r4, #14
 80062a2:	193b      	adds	r3, r7, r4
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	193b      	adds	r3, r7, r4
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	2060      	movs	r0, #96	; 0x60
 80062b0:	188a      	adds	r2, r1, r2
 80062b2:	1812      	adds	r2, r2, r0
 80062b4:	7810      	ldrb	r0, [r2, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	2160      	movs	r1, #96	; 0x60
 80062ba:	18d3      	adds	r3, r2, r3
 80062bc:	185b      	adds	r3, r3, r1
 80062be:	1c02      	adds	r2, r0, #0
 80062c0:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 80062c2:	193b      	adds	r3, r7, r4
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	193b      	adds	r3, r7, r4
 80062c8:	3201      	adds	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	230e      	movs	r3, #14
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d9e4      	bls.n	80062a0 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2266      	movs	r2, #102	; 0x66
 80062da:	5c9b      	ldrb	r3, [r3, r2]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d80c      	bhi.n	80062fa <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2266      	movs	r2, #102	; 0x66
 80062e4:	5c9b      	ldrb	r3, [r3, r2]
 80062e6:	0019      	movs	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2268      	movs	r2, #104	; 0x68
 80062ec:	185b      	adds	r3, r3, r1
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2263      	movs	r2, #99	; 0x63
 80062f6:	5499      	strb	r1, [r3, r2]
 80062f8:	e00b      	b.n	8006312 <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2266      	movs	r2, #102	; 0x66
 80062fe:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 8006300:	3b04      	subs	r3, #4
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	216e      	movs	r1, #110	; 0x6e
 8006306:	18d3      	adds	r3, r2, r3
 8006308:	185b      	adds	r3, r3, r1
 800630a:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2263      	movs	r2, #99	; 0x63
 8006310:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2266      	movs	r2, #102	; 0x66
 8006316:	5c9b      	ldrb	r3, [r3, r2]
 8006318:	3301      	adds	r3, #1
 800631a:	b2d9      	uxtb	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2266      	movs	r2, #102	; 0x66
 8006320:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2266      	movs	r2, #102	; 0x66
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	2b07      	cmp	r3, #7
 800632a:	d907      	bls.n	800633c <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2266      	movs	r2, #102	; 0x66
 8006330:	2100      	movs	r1, #0
 8006332:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2267      	movs	r2, #103	; 0x67
 8006338:	2100      	movs	r1, #0
 800633a:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 800633c:	46c0      	nop			; (mov r8, r8)
 800633e:	46bd      	mov	sp, r7
 8006340:	b005      	add	sp, #20
 8006342:	bd90      	pop	{r4, r7, pc}

08006344 <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	000a      	movs	r2, r1
 800634e:	1cfb      	adds	r3, r7, #3
 8006350:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1cfa      	adds	r2, r7, #3
 8006356:	2167      	movs	r1, #103	; 0x67
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2266      	movs	r2, #102	; 0x66
 8006360:	2100      	movs	r1, #0
 8006362:	5499      	strb	r1, [r3, r2]

}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	b002      	add	sp, #8
 800636a:	bd80      	pop	{r7, pc}

0800636c <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	000a      	movs	r2, r1
 8006376:	1cfb      	adds	r3, r7, #3
 8006378:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 800637a:	1cfb      	adds	r3, r7, #3
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d108      	bne.n	8006394 <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6858      	ldr	r0, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	0019      	movs	r1, r3
 800638e:	f7fd f860 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 8006392:	e059      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 8006394:	1cfb      	adds	r3, r7, #3
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d108      	bne.n	80063ae <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68d8      	ldr	r0, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	891b      	ldrh	r3, [r3, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	0019      	movs	r1, r3
 80063a8:	f7fd f853 	bl	8003452 <HAL_GPIO_WritePin>
}
 80063ac:	e04c      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 80063ae:	1cfb      	adds	r3, r7, #3
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d108      	bne.n	80063c8 <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6958      	ldr	r0, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	8a1b      	ldrh	r3, [r3, #16]
 80063be:	2200      	movs	r2, #0
 80063c0:	0019      	movs	r1, r3
 80063c2:	f7fd f846 	bl	8003452 <HAL_GPIO_WritePin>
}
 80063c6:	e03f      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 80063c8:	1cfb      	adds	r3, r7, #3
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d108      	bne.n	80063e2 <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69d8      	ldr	r0, [r3, #28]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8b1b      	ldrh	r3, [r3, #24]
 80063d8:	2200      	movs	r2, #0
 80063da:	0019      	movs	r1, r3
 80063dc:	f7fd f839 	bl	8003452 <HAL_GPIO_WritePin>
}
 80063e0:	e032      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 80063e2:	1cfb      	adds	r3, r7, #3
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d108      	bne.n	80063fc <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8c1b      	ldrh	r3, [r3, #32]
 80063f2:	2200      	movs	r2, #0
 80063f4:	0019      	movs	r1, r3
 80063f6:	f7fd f82c 	bl	8003452 <HAL_GPIO_WritePin>
}
 80063fa:	e025      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 80063fc:	1cfb      	adds	r3, r7, #3
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b06      	cmp	r3, #6
 8006402:	d108      	bne.n	8006416 <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	2200      	movs	r2, #0
 800640e:	0019      	movs	r1, r3
 8006410:	f7fd f81f 	bl	8003452 <HAL_GPIO_WritePin>
}
 8006414:	e018      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 8006416:	1cfb      	adds	r3, r7, #3
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b07      	cmp	r3, #7
 800641c:	d108      	bne.n	8006430 <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006426:	2200      	movs	r2, #0
 8006428:	0019      	movs	r1, r3
 800642a:	f7fd f812 	bl	8003452 <HAL_GPIO_WritePin>
}
 800642e:	e00b      	b.n	8006448 <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 8006430:	1cfb      	adds	r3, r7, #3
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d107      	bne.n	8006448 <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006440:	2200      	movs	r2, #0
 8006442:	0019      	movs	r1, r3
 8006444:	f7fd f805 	bl	8003452 <HAL_GPIO_WritePin>
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}

08006450 <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	000a      	movs	r2, r1
 800645a:	1cfb      	adds	r3, r7, #3
 800645c:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 800645e:	1cfb      	adds	r3, r7, #3
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2240      	movs	r2, #64	; 0x40
 800646e:	5a9b      	ldrh	r3, [r3, r2]
 8006470:	2201      	movs	r2, #1
 8006472:	0019      	movs	r1, r3
 8006474:	f7fc ffed 	bl	8003452 <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 8006478:	e028      	b.n	80064cc <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 800647a:	1cfb      	adds	r3, r7, #3
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d109      	bne.n	8006496 <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2248      	movs	r2, #72	; 0x48
 800648a:	5a9b      	ldrh	r3, [r3, r2]
 800648c:	2201      	movs	r2, #1
 800648e:	0019      	movs	r1, r3
 8006490:	f7fc ffdf 	bl	8003452 <HAL_GPIO_WritePin>
}
 8006494:	e01a      	b.n	80064cc <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 8006496:	1cfb      	adds	r3, r7, #3
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d109      	bne.n	80064b2 <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2250      	movs	r2, #80	; 0x50
 80064a6:	5a9b      	ldrh	r3, [r3, r2]
 80064a8:	2201      	movs	r2, #1
 80064aa:	0019      	movs	r1, r3
 80064ac:	f7fc ffd1 	bl	8003452 <HAL_GPIO_WritePin>
}
 80064b0:	e00c      	b.n	80064cc <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 80064b2:	1cfb      	adds	r3, r7, #3
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d108      	bne.n	80064cc <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2258      	movs	r2, #88	; 0x58
 80064c2:	5a9b      	ldrh	r3, [r3, r2]
 80064c4:	2201      	movs	r2, #1
 80064c6:	0019      	movs	r1, r3
 80064c8:	f7fc ffc3 	bl	8003452 <HAL_GPIO_WritePin>
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b002      	add	sp, #8
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, LED_FIELD_OFF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	5a9b      	ldrh	r3, [r3, r2]
 80064e6:	2200      	movs	r2, #0
 80064e8:	0019      	movs	r1, r3
 80064ea:	f7fc ffb2 	bl	8003452 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, LED_FIELD_OFF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2248      	movs	r2, #72	; 0x48
 80064f6:	5a9b      	ldrh	r3, [r3, r2]
 80064f8:	2200      	movs	r2, #0
 80064fa:	0019      	movs	r1, r3
 80064fc:	f7fc ffa9 	bl	8003452 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, LED_FIELD_OFF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2250      	movs	r2, #80	; 0x50
 8006508:	5a9b      	ldrh	r3, [r3, r2]
 800650a:	2200      	movs	r2, #0
 800650c:	0019      	movs	r1, r3
 800650e:	f7fc ffa0 	bl	8003452 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, LED_FIELD_OFF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2258      	movs	r2, #88	; 0x58
 800651a:	5a9b      	ldrh	r3, [r3, r2]
 800651c:	2200      	movs	r2, #0
 800651e:	0019      	movs	r1, r3
 8006520:	f7fc ff97 	bl	8003452 <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, LED_SEGMENT_OFF);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6858      	ldr	r0, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	2201      	movs	r2, #1
 800652e:	0019      	movs	r1, r3
 8006530:	f7fc ff8f 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, LED_SEGMENT_OFF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68d8      	ldr	r0, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	891b      	ldrh	r3, [r3, #8]
 800653c:	2201      	movs	r2, #1
 800653e:	0019      	movs	r1, r3
 8006540:	f7fc ff87 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, LED_SEGMENT_OFF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6958      	ldr	r0, [r3, #20]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8a1b      	ldrh	r3, [r3, #16]
 800654c:	2201      	movs	r2, #1
 800654e:	0019      	movs	r1, r3
 8006550:	f7fc ff7f 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, LED_SEGMENT_OFF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69d8      	ldr	r0, [r3, #28]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8b1b      	ldrh	r3, [r3, #24]
 800655c:	2201      	movs	r2, #1
 800655e:	0019      	movs	r1, r3
 8006560:	f7fc ff77 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, LED_SEGMENT_OFF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8c1b      	ldrh	r3, [r3, #32]
 800656c:	2201      	movs	r2, #1
 800656e:	0019      	movs	r1, r3
 8006570:	f7fc ff6f 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, LED_SEGMENT_OFF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657c:	2201      	movs	r2, #1
 800657e:	0019      	movs	r1, r3
 8006580:	f7fc ff67 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, LED_SEGMENT_OFF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800658c:	2201      	movs	r2, #1
 800658e:	0019      	movs	r1, r3
 8006590:	f7fc ff5f 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800659c:	2201      	movs	r2, #1
 800659e:	0019      	movs	r1, r3
 80065a0:	f7fc ff57 	bl	8003452 <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b002      	add	sp, #8
 80065aa:	bd80      	pop	{r7, pc}

080065ac <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	000a      	movs	r2, r1
 80065b6:	1cfb      	adds	r3, r7, #3
 80065b8:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 80065ba:	1cfb      	adds	r3, r7, #3
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b2f      	cmp	r3, #47	; 0x2f
 80065c0:	d800      	bhi.n	80065c4 <_LEDwriteCharacter+0x18>
 80065c2:	e10f      	b.n	80067e4 <_LEDwriteCharacter+0x238>
 80065c4:	1cfb      	adds	r3, r7, #3
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b39      	cmp	r3, #57	; 0x39
 80065ca:	d900      	bls.n	80065ce <_LEDwriteCharacter+0x22>
 80065cc:	e10a      	b.n	80067e4 <_LEDwriteCharacter+0x238>
		switch (character) {
 80065ce:	1cfb      	adds	r3, r7, #3
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	3b30      	subs	r3, #48	; 0x30
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d900      	bls.n	80065da <_LEDwriteCharacter+0x2e>
 80065d8:	e2e7      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
 80065da:	009a      	lsls	r2, r3, #2
 80065dc:	4bea      	ldr	r3, [pc, #936]	; (8006988 <_LEDwriteCharacter+0x3dc>)
 80065de:	18d3      	adds	r3, r2, r3
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2102      	movs	r1, #2
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff febf 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2103      	movs	r1, #3
 80065f2:	0018      	movs	r0, r3
 80065f4:	f7ff feba 	bl	800636c <_LEDsegmentOn>
			break;
 80065f8:	e0f3      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2101      	movs	r1, #1
 80065fe:	0018      	movs	r0, r3
 8006600:	f7ff feb4 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2102      	movs	r1, #2
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff feaf 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2107      	movs	r1, #7
 8006612:	0018      	movs	r0, r3
 8006614:	f7ff feaa 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2105      	movs	r1, #5
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff fea5 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2104      	movs	r1, #4
 8006626:	0018      	movs	r0, r3
 8006628:	f7ff fea0 	bl	800636c <_LEDsegmentOn>
			break;
 800662c:	e0d9      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2101      	movs	r1, #1
 8006632:	0018      	movs	r0, r3
 8006634:	f7ff fe9a 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2102      	movs	r1, #2
 800663c:	0018      	movs	r0, r3
 800663e:	f7ff fe95 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2107      	movs	r1, #7
 8006646:	0018      	movs	r0, r3
 8006648:	f7ff fe90 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2103      	movs	r1, #3
 8006650:	0018      	movs	r0, r3
 8006652:	f7ff fe8b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2104      	movs	r1, #4
 800665a:	0018      	movs	r0, r3
 800665c:	f7ff fe86 	bl	800636c <_LEDsegmentOn>
			break;
 8006660:	e0bf      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2106      	movs	r1, #6
 8006666:	0018      	movs	r0, r3
 8006668:	f7ff fe80 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2107      	movs	r1, #7
 8006670:	0018      	movs	r0, r3
 8006672:	f7ff fe7b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2102      	movs	r1, #2
 800667a:	0018      	movs	r0, r3
 800667c:	f7ff fe76 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2103      	movs	r1, #3
 8006684:	0018      	movs	r0, r3
 8006686:	f7ff fe71 	bl	800636c <_LEDsegmentOn>
			break;
 800668a:	e0aa      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2101      	movs	r1, #1
 8006690:	0018      	movs	r0, r3
 8006692:	f7ff fe6b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2106      	movs	r1, #6
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff fe66 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2107      	movs	r1, #7
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7ff fe61 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2103      	movs	r1, #3
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7ff fe5c 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2104      	movs	r1, #4
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7ff fe57 	bl	800636c <_LEDsegmentOn>
			break;
 80066be:	e090      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2101      	movs	r1, #1
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7ff fe51 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2103      	movs	r1, #3
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7ff fe4c 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2104      	movs	r1, #4
 80066d8:	0018      	movs	r0, r3
 80066da:	f7ff fe47 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2105      	movs	r1, #5
 80066e2:	0018      	movs	r0, r3
 80066e4:	f7ff fe42 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2106      	movs	r1, #6
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7ff fe3d 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2107      	movs	r1, #7
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7ff fe38 	bl	800636c <_LEDsegmentOn>
			break;
 80066fc:	e071      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2101      	movs	r1, #1
 8006702:	0018      	movs	r0, r3
 8006704:	f7ff fe32 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2102      	movs	r1, #2
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff fe2d 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2103      	movs	r1, #3
 8006716:	0018      	movs	r0, r3
 8006718:	f7ff fe28 	bl	800636c <_LEDsegmentOn>
			break;
 800671c:	e061      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2101      	movs	r1, #1
 8006722:	0018      	movs	r0, r3
 8006724:	f7ff fe22 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2102      	movs	r1, #2
 800672c:	0018      	movs	r0, r3
 800672e:	f7ff fe1d 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2103      	movs	r1, #3
 8006736:	0018      	movs	r0, r3
 8006738:	f7ff fe18 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2104      	movs	r1, #4
 8006740:	0018      	movs	r0, r3
 8006742:	f7ff fe13 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2105      	movs	r1, #5
 800674a:	0018      	movs	r0, r3
 800674c:	f7ff fe0e 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2106      	movs	r1, #6
 8006754:	0018      	movs	r0, r3
 8006756:	f7ff fe09 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2107      	movs	r1, #7
 800675e:	0018      	movs	r0, r3
 8006760:	f7ff fe04 	bl	800636c <_LEDsegmentOn>
			break;
 8006764:	e03d      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2101      	movs	r1, #1
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff fdfe 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2102      	movs	r1, #2
 8006774:	0018      	movs	r0, r3
 8006776:	f7ff fdf9 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2103      	movs	r1, #3
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff fdf4 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2104      	movs	r1, #4
 8006788:	0018      	movs	r0, r3
 800678a:	f7ff fdef 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2106      	movs	r1, #6
 8006792:	0018      	movs	r0, r3
 8006794:	f7ff fdea 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2107      	movs	r1, #7
 800679c:	0018      	movs	r0, r3
 800679e:	f7ff fde5 	bl	800636c <_LEDsegmentOn>
			break;
 80067a2:	e01e      	b.n	80067e2 <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2101      	movs	r1, #1
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff fddf 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2102      	movs	r1, #2
 80067b2:	0018      	movs	r0, r3
 80067b4:	f7ff fdda 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2103      	movs	r1, #3
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff fdd5 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2104      	movs	r1, #4
 80067c6:	0018      	movs	r0, r3
 80067c8:	f7ff fdd0 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2105      	movs	r1, #5
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7ff fdcb 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2106      	movs	r1, #6
 80067da:	0018      	movs	r0, r3
 80067dc:	f7ff fdc6 	bl	800636c <_LEDsegmentOn>
			break;
 80067e0:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 80067e2:	e1e2      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		}
	} else {
		switch (character) {
 80067e4:	1cfb      	adds	r3, r7, #3
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	3b2d      	subs	r3, #45	; 0x2d
 80067ea:	2b47      	cmp	r3, #71	; 0x47
 80067ec:	d900      	bls.n	80067f0 <_LEDwriteCharacter+0x244>
 80067ee:	e1dc      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
 80067f0:	009a      	lsls	r2, r3, #2
 80067f2:	4b66      	ldr	r3, [pc, #408]	; (800698c <_LEDwriteCharacter+0x3e0>)
 80067f4:	18d3      	adds	r3, r2, r3
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2101      	movs	r1, #1
 80067fe:	0018      	movs	r0, r3
 8006800:	f7ff fdb4 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2102      	movs	r1, #2
 8006808:	0018      	movs	r0, r3
 800680a:	f7ff fdaf 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2103      	movs	r1, #3
 8006812:	0018      	movs	r0, r3
 8006814:	f7ff fdaa 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2105      	movs	r1, #5
 800681c:	0018      	movs	r0, r3
 800681e:	f7ff fda5 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2106      	movs	r1, #6
 8006826:	0018      	movs	r0, r3
 8006828:	f7ff fda0 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2107      	movs	r1, #7
 8006830:	0018      	movs	r0, r3
 8006832:	f7ff fd9b 	bl	800636c <_LEDsegmentOn>
			break;
 8006836:	e1b8      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2103      	movs	r1, #3
 800683c:	0018      	movs	r0, r3
 800683e:	f7ff fd95 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2104      	movs	r1, #4
 8006846:	0018      	movs	r0, r3
 8006848:	f7ff fd90 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2105      	movs	r1, #5
 8006850:	0018      	movs	r0, r3
 8006852:	f7ff fd8b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2106      	movs	r1, #6
 800685a:	0018      	movs	r0, r3
 800685c:	f7ff fd86 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2107      	movs	r1, #7
 8006864:	0018      	movs	r0, r3
 8006866:	f7ff fd81 	bl	800636c <_LEDsegmentOn>
			break;
 800686a:	e19e      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2101      	movs	r1, #1
 8006870:	0018      	movs	r0, r3
 8006872:	f7ff fd7b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2104      	movs	r1, #4
 800687a:	0018      	movs	r0, r3
 800687c:	f7ff fd76 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2105      	movs	r1, #5
 8006884:	0018      	movs	r0, r3
 8006886:	f7ff fd71 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2106      	movs	r1, #6
 800688e:	0018      	movs	r0, r3
 8006890:	f7ff fd6c 	bl	800636c <_LEDsegmentOn>
			break;
 8006894:	e189      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2104      	movs	r1, #4
 800689a:	0018      	movs	r0, r3
 800689c:	f7ff fd66 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2105      	movs	r1, #5
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7ff fd61 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2107      	movs	r1, #7
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7ff fd5c 	bl	800636c <_LEDsegmentOn>
			break;
 80068b4:	e179      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2101      	movs	r1, #1
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7ff fd56 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2102      	movs	r1, #2
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff fd51 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2103      	movs	r1, #3
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7ff fd4c 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2104      	movs	r1, #4
 80068d8:	0018      	movs	r0, r3
 80068da:	f7ff fd47 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2105      	movs	r1, #5
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7ff fd42 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2106      	movs	r1, #6
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff fd3d 	bl	800636c <_LEDsegmentOn>
			break;
 80068f2:	e15a      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2102      	movs	r1, #2
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7ff fd37 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2103      	movs	r1, #3
 8006902:	0018      	movs	r0, r3
 8006904:	f7ff fd32 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2104      	movs	r1, #4
 800690c:	0018      	movs	r0, r3
 800690e:	f7ff fd2d 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2105      	movs	r1, #5
 8006916:	0018      	movs	r0, r3
 8006918:	f7ff fd28 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2107      	movs	r1, #7
 8006920:	0018      	movs	r0, r3
 8006922:	f7ff fd23 	bl	800636c <_LEDsegmentOn>
			break;
 8006926:	e140      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2101      	movs	r1, #1
 800692c:	0018      	movs	r0, r3
 800692e:	f7ff fd1d 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2104      	movs	r1, #4
 8006936:	0018      	movs	r0, r3
 8006938:	f7ff fd18 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2105      	movs	r1, #5
 8006940:	0018      	movs	r0, r3
 8006942:	f7ff fd13 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2106      	movs	r1, #6
 800694a:	0018      	movs	r0, r3
 800694c:	f7ff fd0e 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2107      	movs	r1, #7
 8006954:	0018      	movs	r0, r3
 8006956:	f7ff fd09 	bl	800636c <_LEDsegmentOn>
			break;
 800695a:	e126      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2101      	movs	r1, #1
 8006960:	0018      	movs	r0, r3
 8006962:	f7ff fd03 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2105      	movs	r1, #5
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff fcfe 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2106      	movs	r1, #6
 8006974:	0018      	movs	r0, r3
 8006976:	f7ff fcf9 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2107      	movs	r1, #7
 800697e:	0018      	movs	r0, r3
 8006980:	f7ff fcf4 	bl	800636c <_LEDsegmentOn>
			break;
 8006984:	e111      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	08009860 	.word	0x08009860
 800698c:	08009888 	.word	0x08009888
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2102      	movs	r1, #2
 8006994:	0018      	movs	r0, r3
 8006996:	f7ff fce9 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2103      	movs	r1, #3
 800699e:	0018      	movs	r0, r3
 80069a0:	f7ff fce4 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2105      	movs	r1, #5
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7ff fcdf 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2106      	movs	r1, #6
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7ff fcda 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2107      	movs	r1, #7
 80069bc:	0018      	movs	r0, r3
 80069be:	f7ff fcd5 	bl	800636c <_LEDsegmentOn>
			break;
 80069c2:	e0f2      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2103      	movs	r1, #3
 80069c8:	0018      	movs	r0, r3
 80069ca:	f7ff fccf 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2105      	movs	r1, #5
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff fcca 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2106      	movs	r1, #6
 80069dc:	0018      	movs	r0, r3
 80069de:	f7ff fcc5 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2107      	movs	r1, #7
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff fcc0 	bl	800636c <_LEDsegmentOn>
			break;
 80069ec:	e0dd      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2102      	movs	r1, #2
 80069f2:	0018      	movs	r0, r3
 80069f4:	f7ff fcba 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2103      	movs	r1, #3
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7ff fcb5 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2104      	movs	r1, #4
 8006a06:	0018      	movs	r0, r3
 8006a08:	f7ff fcb0 	bl	800636c <_LEDsegmentOn>
			break;
 8006a0c:	e0cd      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2104      	movs	r1, #4
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7ff fcaa 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2105      	movs	r1, #5
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7ff fca5 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2106      	movs	r1, #6
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7ff fca0 	bl	800636c <_LEDsegmentOn>
			break;
 8006a2c:	e0bd      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2101      	movs	r1, #1
 8006a32:	0018      	movs	r0, r3
 8006a34:	f7ff fc9a 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2102      	movs	r1, #2
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f7ff fc95 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2103      	movs	r1, #3
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7ff fc90 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2104      	movs	r1, #4
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff fc8b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2105      	movs	r1, #5
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7ff fc86 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2106      	movs	r1, #6
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff fc81 	bl	800636c <_LEDsegmentOn>
			break;
 8006a6a:	e09e      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2103      	movs	r1, #3
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7ff fc7b 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2104      	movs	r1, #4
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7ff fc76 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2105      	movs	r1, #5
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7ff fc71 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2107      	movs	r1, #7
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7ff fc6c 	bl	800636c <_LEDsegmentOn>
			break;
 8006a94:	e089      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7ff fc66 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7ff fc61 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2105      	movs	r1, #5
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f7ff fc5c 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2106      	movs	r1, #6
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7ff fc57 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2107      	movs	r1, #7
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7ff fc52 	bl	800636c <_LEDsegmentOn>
			break;
 8006ac8:	e06f      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2105      	movs	r1, #5
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7ff fc4c 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2107      	movs	r1, #7
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7ff fc47 	bl	800636c <_LEDsegmentOn>
			break;
 8006ade:	e064      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f7ff fc41 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2106      	movs	r1, #6
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7ff fc3c 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2107      	movs	r1, #7
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7ff fc37 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2103      	movs	r1, #3
 8006b02:	0018      	movs	r0, r3
 8006b04:	f7ff fc32 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2104      	movs	r1, #4
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7ff fc2d 	bl	800636c <_LEDsegmentOn>
			break;
 8006b12:	e04a      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2105      	movs	r1, #5
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7ff fc27 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2106      	movs	r1, #6
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7ff fc22 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2107      	movs	r1, #7
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f7ff fc1d 	bl	800636c <_LEDsegmentOn>
			break;
 8006b32:	e03a      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2102      	movs	r1, #2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7ff fc17 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2103      	movs	r1, #3
 8006b42:	0018      	movs	r0, r3
 8006b44:	f7ff fc12 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2104      	movs	r1, #4
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7ff fc0d 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2105      	movs	r1, #5
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7ff fc08 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2106      	movs	r1, #6
 8006b60:	0018      	movs	r0, r3
 8006b62:	f7ff fc03 	bl	800636c <_LEDsegmentOn>
			break;
 8006b66:	e020      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2107      	movs	r1, #7
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff fbfd 	bl	800636c <_LEDsegmentOn>
			break;
 8006b72:	e01a      	b.n	8006baa <_LEDwriteCharacter+0x5fe>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2104      	movs	r1, #4
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7ff fbf7 	bl	800636c <_LEDsegmentOn>
			break;
 8006b7e:	e014      	b.n	8006baa <_LEDwriteCharacter+0x5fe>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2101      	movs	r1, #1
 8006b84:	0018      	movs	r0, r3
 8006b86:	f7ff fbf1 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7ff fbec 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2106      	movs	r1, #6
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7ff fbe7 	bl	800636c <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2107      	movs	r1, #7
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7ff fbe2 	bl	800636c <_LEDsegmentOn>
			break;
 8006ba8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b002      	add	sp, #8
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)

08006bb4 <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	1dbb      	adds	r3, r7, #6
 8006bc2:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1dba      	adds	r2, r7, #6
 8006bce:	2140      	movs	r1, #64	; 0x40
 8006bd0:	8812      	ldrh	r2, [r2, #0]
 8006bd2:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	2318      	movs	r3, #24
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2148      	movs	r1, #72	; 0x48
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	18ba      	adds	r2, r7, r2
 8006bf2:	2150      	movs	r1, #80	; 0x50
 8006bf4:	8812      	ldrh	r2, [r2, #0]
 8006bf6:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfc:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2228      	movs	r2, #40	; 0x28
 8006c02:	18ba      	adds	r2, r7, r2
 8006c04:	2158      	movs	r1, #88	; 0x58
 8006c06:	8812      	ldrh	r2, [r2, #0]
 8006c08:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0e:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2230      	movs	r2, #48	; 0x30
 8006c14:	18ba      	adds	r2, r7, r2
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1e:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2238      	movs	r2, #56	; 0x38
 8006c24:	18ba      	adds	r2, r7, r2
 8006c26:	8812      	ldrh	r2, [r2, #0]
 8006c28:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c2e:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2240      	movs	r2, #64	; 0x40
 8006c34:	18ba      	adds	r2, r7, r2
 8006c36:	8812      	ldrh	r2, [r2, #0]
 8006c38:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c3e:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2248      	movs	r2, #72	; 0x48
 8006c44:	18ba      	adds	r2, r7, r2
 8006c46:	8812      	ldrh	r2, [r2, #0]
 8006c48:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2250      	movs	r2, #80	; 0x50
 8006c54:	18ba      	adds	r2, r7, r2
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	2118      	movs	r1, #24
 8006c66:	468c      	mov	ip, r1
 8006c68:	44bc      	add	ip, r7
 8006c6a:	4462      	add	r2, ip
 8006c6c:	8812      	ldrh	r2, [r2, #0]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c74:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2248      	movs	r2, #72	; 0x48
 8006c7a:	2118      	movs	r1, #24
 8006c7c:	468c      	mov	ip, r1
 8006c7e:	44bc      	add	ip, r7
 8006c80:	4462      	add	r2, ip
 8006c82:	8812      	ldrh	r2, [r2, #0]
 8006c84:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2250      	movs	r2, #80	; 0x50
 8006c90:	2118      	movs	r1, #24
 8006c92:	468c      	mov	ip, r1
 8006c94:	44bc      	add	ip, r7
 8006c96:	4462      	add	r2, ip
 8006c98:	8812      	ldrh	r2, [r2, #0]
 8006c9a:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 f82f 	bl	8006d02 <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2265      	movs	r2, #101	; 0x65
 8006ca8:	2100      	movs	r1, #0
 8006caa:	5499      	strb	r1, [r3, r2]
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char* separator){
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8006cbe:	230f      	movs	r3, #15
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e012      	b.n	8006cee <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 8006cc8:	240f      	movs	r4, #15
 8006cca:	193b      	adds	r3, r7, r4
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	18d2      	adds	r2, r2, r3
 8006cd2:	193b      	adds	r3, r7, r4
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	7810      	ldrb	r0, [r2, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	2168      	movs	r1, #104	; 0x68
 8006cdc:	18d3      	adds	r3, r2, r3
 8006cde:	185b      	adds	r3, r3, r1
 8006ce0:	1c02      	adds	r2, r0, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8006ce4:	193b      	adds	r3, r7, r4
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	3201      	adds	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	230f      	movs	r3, #15
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d9e7      	bls.n	8006cc8 <LEDseparator+0x14>
	}
}
 8006cf8:	46c0      	nop			; (mov r8, r8)
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b005      	add	sp, #20
 8006d00:	bd90      	pop	{r4, r7, pc}

08006d02 <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3360      	adds	r3, #96	; 0x60
 8006d0e:	2204      	movs	r2, #4
 8006d10:	2120      	movs	r1, #32
 8006d12:	0018      	movs	r0, r3
 8006d14:	f002 fc8b 	bl	800962e <memset>
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2264      	movs	r2, #100	; 0x64
 8006d1c:	2104      	movs	r1, #4
 8006d1e:	5499      	strb	r1, [r3, r2]
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b002      	add	sp, #8
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	0008      	movs	r0, r1
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	0019      	movs	r1, r3
 8006d36:	230b      	movs	r3, #11
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	1c02      	adds	r2, r0, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	230a      	movs	r3, #10
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	1c0a      	adds	r2, r1, #0
 8006d44:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8006d46:	2317      	movs	r3, #23
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e02f      	b.n	8006db0 <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 8006d50:	230a      	movs	r3, #10
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10e      	bne.n	8006d78 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 8006d5a:	2117      	movs	r1, #23
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	18d2      	adds	r2, r2, r3
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	7810      	ldrb	r0, [r2, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	2160      	movs	r1, #96	; 0x60
 8006d6e:	18d3      	adds	r3, r2, r3
 8006d70:	185b      	adds	r3, r3, r1
 8006d72:	1c02      	adds	r2, r0, #0
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e015      	b.n	8006da4 <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8006d78:	2117      	movs	r1, #23
 8006d7a:	187b      	adds	r3, r7, r1
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	18d2      	adds	r2, r2, r3
 8006d82:	187b      	adds	r3, r7, r1
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	7810      	ldrb	r0, [r2, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	216e      	movs	r1, #110	; 0x6e
 8006d8c:	18d3      	adds	r3, r2, r3
 8006d8e:	185b      	adds	r3, r3, r1
 8006d90:	1c02      	adds	r2, r0, #0
 8006d92:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8006d94:	230a      	movs	r3, #10
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	0011      	movs	r1, r2
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f7ff fad0 	bl	8006344 <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8006da4:	2117      	movs	r1, #23
 8006da6:	187b      	adds	r3, r7, r1
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	187b      	adds	r3, r7, r1
 8006dac:	3201      	adds	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	2317      	movs	r3, #23
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d9ca      	bls.n	8006d50 <LEDstr+0x28>
		}

	}
}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b006      	add	sp, #24
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	000a      	movs	r2, r1
 8006dce:	1cfb      	adds	r3, r7, #3
 8006dd0:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	1cfa      	adds	r2, r7, #3
 8006dd6:	2164      	movs	r1, #100	; 0x64
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8006ddc:	46c0      	nop			; (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b002      	add	sp, #8
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <interfaceWrite>:
 *      Author: bartosz
 */

#include "interface.h"

void interfaceWrite(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af02      	add	r7, sp, #8

	//								WRITE DATA TO CLOCK
	twoIntsToArray(buffer, chronograph.actual.hour, chronograph.actual.minute);
 8006dea:	4b65      	ldr	r3, [pc, #404]	; (8006f80 <interfaceWrite+0x19c>)
 8006dec:	2103      	movs	r1, #3
 8006dee:	5659      	ldrsb	r1, [r3, r1]
 8006df0:	4b63      	ldr	r3, [pc, #396]	; (8006f80 <interfaceWrite+0x19c>)
 8006df2:	2204      	movs	r2, #4
 8006df4:	569a      	ldrsb	r2, [r3, r2]
 8006df6:	4b63      	ldr	r3, [pc, #396]	; (8006f84 <interfaceWrite+0x1a0>)
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f000 f8e1 	bl	8006fc0 <twoIntsToArray>
	if (rtcBlink(&chronograph)) {
 8006dfe:	4b60      	ldr	r3, [pc, #384]	; (8006f80 <interfaceWrite+0x19c>)
 8006e00:	0018      	movs	r0, r3
 8006e02:	f002 f935 	bl	8009070 <rtcBlink>
 8006e06:	1e03      	subs	r3, r0, #0
 8006e08:	d00a      	beq.n	8006e20 <interfaceWrite+0x3c>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON, 0);
 8006e0a:	4b5e      	ldr	r3, [pc, #376]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e0c:	485e      	ldr	r0, [pc, #376]	; (8006f88 <interfaceWrite+0x1a4>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	9201      	str	r2, [sp, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	9200      	str	r2, [sp, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f001 f8dd 	bl	8007fd8 <menuItemChangeValue>
 8006e1e:	e009      	b.n	8006e34 <interfaceWrite+0x50>
	} else {
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_DISABLED, 0);
 8006e20:	4b58      	ldr	r3, [pc, #352]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e22:	4859      	ldr	r0, [pc, #356]	; (8006f88 <interfaceWrite+0x1a4>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	9201      	str	r2, [sp, #4]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	f001 f8d2 	bl	8007fd8 <menuItemChangeValue>
	}

	oneIntToArray(buffer, 2, chronograph.actual.second);
 8006e34:	4b52      	ldr	r3, [pc, #328]	; (8006f80 <interfaceWrite+0x19c>)
 8006e36:	2205      	movs	r2, #5
 8006e38:	569a      	ldrsb	r2, [r3, r2]
 8006e3a:	4b52      	ldr	r3, [pc, #328]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e3c:	2102      	movs	r1, #2
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 f915 	bl	800706e <oneIntToArray>
	if (rtcBlink(&chronograph)) {
 8006e44:	4b4e      	ldr	r3, [pc, #312]	; (8006f80 <interfaceWrite+0x19c>)
 8006e46:	0018      	movs	r0, r3
 8006e48:	f002 f912 	bl	8009070 <rtcBlink>
 8006e4c:	1e03      	subs	r3, r0, #0
 8006e4e:	d00a      	beq.n	8006e66 <interfaceWrite+0x82>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON, 0);
 8006e50:	4b4c      	ldr	r3, [pc, #304]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e52:	484d      	ldr	r0, [pc, #308]	; (8006f88 <interfaceWrite+0x1a4>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	9200      	str	r2, [sp, #0]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	2101      	movs	r1, #1
 8006e60:	f001 f8ba 	bl	8007fd8 <menuItemChangeValue>
 8006e64:	e009      	b.n	8006e7a <interfaceWrite+0x96>
	} else {
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_DISABLED,
 8006e66:	4b47      	ldr	r3, [pc, #284]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e68:	4847      	ldr	r0, [pc, #284]	; (8006f88 <interfaceWrite+0x1a4>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	9201      	str	r2, [sp, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	9200      	str	r2, [sp, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	2101      	movs	r1, #1
 8006e76:	f001 f8af 	bl	8007fd8 <menuItemChangeValue>
				0);
	}


	//								WRITE DATA TO CALENDAR
	twoIntsToArray(buffer, chronograph.actual.day, chronograph.actual.month);
 8006e7a:	4b41      	ldr	r3, [pc, #260]	; (8006f80 <interfaceWrite+0x19c>)
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	5659      	ldrsb	r1, [r3, r1]
 8006e80:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <interfaceWrite+0x19c>)
 8006e82:	2201      	movs	r2, #1
 8006e84:	569a      	ldrsb	r2, [r3, r2]
 8006e86:	4b3f      	ldr	r3, [pc, #252]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 f899 	bl	8006fc0 <twoIntsToArray>
	menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT, 0);
 8006e8e:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <interfaceWrite+0x1a0>)
 8006e90:	483d      	ldr	r0, [pc, #244]	; (8006f88 <interfaceWrite+0x1a4>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	9201      	str	r2, [sp, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	9200      	str	r2, [sp, #0]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f001 f89b 	bl	8007fd8 <menuItemChangeValue>



	//								WRITE DATA TO SETTINGS_CLOCK
	oneIntToArray(buffer, 0, chronograph.actual.hour);
 8006ea2:	4b37      	ldr	r3, [pc, #220]	; (8006f80 <interfaceWrite+0x19c>)
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	569a      	ldrsb	r2, [r3, r2]
 8006ea8:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <interfaceWrite+0x1a0>)
 8006eaa:	2100      	movs	r1, #0
 8006eac:	0018      	movs	r0, r3
 8006eae:	f000 f8de 	bl	800706e <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, buffer, INTER_COLON, 1);
 8006eb2:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <interfaceWrite+0x1a0>)
 8006eb4:	4834      	ldr	r0, [pc, #208]	; (8006f88 <interfaceWrite+0x1a4>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	9201      	str	r2, [sp, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	9200      	str	r2, [sp, #0]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	f001 f889 	bl	8007fd8 <menuItemChangeValue>

	oneIntToArray(buffer, 2, chronograph.actual.minute);
 8006ec6:	4b2e      	ldr	r3, [pc, #184]	; (8006f80 <interfaceWrite+0x19c>)
 8006ec8:	2204      	movs	r2, #4
 8006eca:	569a      	ldrsb	r2, [r3, r2]
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	; (8006f84 <interfaceWrite+0x1a0>)
 8006ece:	2102      	movs	r1, #2
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f8cc 	bl	800706e <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, buffer, INTER_COLON,
 8006ed6:	4b2b      	ldr	r3, [pc, #172]	; (8006f84 <interfaceWrite+0x1a0>)
 8006ed8:	482b      	ldr	r0, [pc, #172]	; (8006f88 <interfaceWrite+0x1a4>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	9201      	str	r2, [sp, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	9200      	str	r2, [sp, #0]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	f001 f877 	bl	8007fd8 <menuItemChangeValue>
			1);

	oneIntToArray(buffer, 2, chronograph.actual.second);
 8006eea:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <interfaceWrite+0x19c>)
 8006eec:	2205      	movs	r2, #5
 8006eee:	569a      	ldrsb	r2, [r3, r2]
 8006ef0:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <interfaceWrite+0x1a0>)
 8006ef2:	2102      	movs	r1, #2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f8ba 	bl	800706e <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, buffer, INTER_COLON,
 8006efa:	4b22      	ldr	r3, [pc, #136]	; (8006f84 <interfaceWrite+0x1a0>)
 8006efc:	4822      	ldr	r0, [pc, #136]	; (8006f88 <interfaceWrite+0x1a4>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	9201      	str	r2, [sp, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	9200      	str	r2, [sp, #0]
 8006f06:	2202      	movs	r2, #2
 8006f08:	2102      	movs	r1, #2
 8006f0a:	f001 f865 	bl	8007fd8 <menuItemChangeValue>
			1);


	//								WRITE DATA TO SETTINGS_CALENDAR
	oneIntToArray(buffer, 0, chronograph.actual.day);
 8006f0e:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <interfaceWrite+0x19c>)
 8006f10:	2202      	movs	r2, #2
 8006f12:	569a      	ldrsb	r2, [r3, r2]
 8006f14:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <interfaceWrite+0x1a0>)
 8006f16:	2100      	movs	r1, #0
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 f8a8 	bl	800706e <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, buffer, INTER_DOT, 1);
 8006f1e:	4b19      	ldr	r3, [pc, #100]	; (8006f84 <interfaceWrite+0x1a0>)
 8006f20:	4819      	ldr	r0, [pc, #100]	; (8006f88 <interfaceWrite+0x1a4>)
 8006f22:	2201      	movs	r2, #1
 8006f24:	9201      	str	r2, [sp, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	9200      	str	r2, [sp, #0]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	2103      	movs	r1, #3
 8006f2e:	f001 f853 	bl	8007fd8 <menuItemChangeValue>

	oneIntToArray(buffer, 2, chronograph.actual.month);
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <interfaceWrite+0x19c>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	569a      	ldrsb	r2, [r3, r2]
 8006f38:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <interfaceWrite+0x1a0>)
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 f896 	bl	800706e <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, buffer, INTER_DOT,
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <interfaceWrite+0x1a0>)
 8006f44:	4810      	ldr	r0, [pc, #64]	; (8006f88 <interfaceWrite+0x1a4>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	9201      	str	r2, [sp, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	9200      	str	r2, [sp, #0]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	2104      	movs	r1, #4
 8006f52:	f001 f841 	bl	8007fd8 <menuItemChangeValue>
			1);

	oneIntToArray(buffer, 0, chronograph.actual.year);
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <interfaceWrite+0x19c>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	569a      	ldrsb	r2, [r3, r2]
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <interfaceWrite+0x1a0>)
 8006f5e:	2100      	movs	r1, #0
 8006f60:	0018      	movs	r0, r3
 8006f62:	f000 f884 	bl	800706e <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, buffer,
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <interfaceWrite+0x1a0>)
 8006f68:	4807      	ldr	r0, [pc, #28]	; (8006f88 <interfaceWrite+0x1a4>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	9201      	str	r2, [sp, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	9200      	str	r2, [sp, #0]
 8006f72:	2202      	movs	r2, #2
 8006f74:	2105      	movs	r1, #5
 8006f76:	f001 f82f 	bl	8007fd8 <menuItemChangeValue>
			INTER_DISABLED, 1);




}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200001ac 	.word	0x200001ac
 8006f84:	20000030 	.word	0x20000030
 8006f88:	2000004c 	.word	0x2000004c

08006f8c <interfaceShowActual>:

void interfaceShowActual(void) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
	LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 8006f90:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <interfaceShowActual+0x28>)
 8006f92:	4809      	ldr	r0, [pc, #36]	; (8006fb8 <interfaceShowActual+0x2c>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	2100      	movs	r1, #0
 8006f98:	f7ff fec6 	bl	8006d28 <LEDstr>
	LEDdot(&display, menu.current.value2);
 8006f9c:	4a07      	ldr	r2, [pc, #28]	; (8006fbc <interfaceShowActual+0x30>)
 8006f9e:	2386      	movs	r3, #134	; 0x86
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	5cd2      	ldrb	r2, [r2, r3]
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <interfaceShowActual+0x2c>)
 8006fa6:	0011      	movs	r1, r2
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f7ff ff0b 	bl	8006dc4 <LEDdot>
}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20000154 	.word	0x20000154
 8006fb8:	200001d4 	.word	0x200001d4
 8006fbc:	2000004c 	.word	0x2000004c

08006fc0 <twoIntsToArray>:

void twoIntsToArray(char *destination, int8_t int1, int8_t int2) {
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	0008      	movs	r0, r1
 8006fca:	0011      	movs	r1, r2
 8006fcc:	1cfb      	adds	r3, r7, #3
 8006fce:	1c02      	adds	r2, r0, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	1cbb      	adds	r3, r7, #2
 8006fd4:	1c0a      	adds	r2, r1, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
	memset(destination, 0, sizeof(buffer));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	2100      	movs	r1, #0
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f002 fb25 	bl	800962e <memset>

	char halfBuffer1[2];
	char halfBuffer2[2];

	itoa(int1, halfBuffer1, 10);
 8006fe4:	1cfb      	adds	r3, r7, #3
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	240c      	movs	r4, #12
 8006fec:	1939      	adds	r1, r7, r4
 8006fee:	220a      	movs	r2, #10
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f002 fb0f 	bl	8009614 <itoa>
	itoa(int2, halfBuffer2, 10);
 8006ff6:	1cbb      	adds	r3, r7, #2
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	2508      	movs	r5, #8
 8006ffe:	1979      	adds	r1, r7, r5
 8007000:	220a      	movs	r2, #10
 8007002:	0018      	movs	r0, r3
 8007004:	f002 fb06 	bl	8009614 <itoa>

	destination[0] = halfBuffer1[0];
 8007008:	0021      	movs	r1, r4
 800700a:	187b      	adds	r3, r7, r1
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	701a      	strb	r2, [r3, #0]
	destination[1] = halfBuffer1[1];
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3301      	adds	r3, #1
 8007016:	187a      	adds	r2, r7, r1
 8007018:	7852      	ldrb	r2, [r2, #1]
 800701a:	701a      	strb	r2, [r3, #0]
	destination[2] = halfBuffer2[0];
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3302      	adds	r3, #2
 8007020:	197a      	adds	r2, r7, r5
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	701a      	strb	r2, [r3, #0]
	destination[3] = halfBuffer2[1];
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3303      	adds	r3, #3
 800702a:	197a      	adds	r2, r7, r5
 800702c:	7852      	ldrb	r2, [r2, #1]
 800702e:	701a      	strb	r2, [r3, #0]

	if (destination[1] == 0) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3301      	adds	r3, #1
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d107      	bne.n	800704a <twoIntsToArray+0x8a>
		destination[1] = destination[0];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3301      	adds	r3, #1
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	701a      	strb	r2, [r3, #0]
		destination[0] = '0';
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2230      	movs	r2, #48	; 0x30
 8007048:	701a      	strb	r2, [r3, #0]
	}
	if (destination[3] == 0) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3303      	adds	r3, #3
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <twoIntsToArray+0xa6>
		destination[3] = destination[2];
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3303      	adds	r3, #3
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7892      	ldrb	r2, [r2, #2]
 800705c:	701a      	strb	r2, [r3, #0]
		destination[2] = '0';
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3302      	adds	r3, #2
 8007062:	2230      	movs	r2, #48	; 0x30
 8007064:	701a      	strb	r2, [r3, #0]
	}
}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	46bd      	mov	sp, r7
 800706a:	b004      	add	sp, #16
 800706c:	bdb0      	pop	{r4, r5, r7, pc}

0800706e <oneIntToArray>:

void oneIntToArray(char *destination, uint8_t offset, int8_t integer) {
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	0008      	movs	r0, r1
 8007078:	0011      	movs	r1, r2
 800707a:	1cfb      	adds	r3, r7, #3
 800707c:	1c02      	adds	r2, r0, #0
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	1cbb      	adds	r3, r7, #2
 8007082:	1c0a      	adds	r2, r1, #0
 8007084:	701a      	strb	r2, [r3, #0]
	memset(destination, 0, sizeof(buffer));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2204      	movs	r2, #4
 800708a:	2100      	movs	r1, #0
 800708c:	0018      	movs	r0, r3
 800708e:	f002 face 	bl	800962e <memset>
	itoa(integer, &destination[offset], 10);
 8007092:	1cbb      	adds	r3, r7, #2
 8007094:	2000      	movs	r0, #0
 8007096:	5618      	ldrsb	r0, [r3, r0]
 8007098:	1cfb      	adds	r3, r7, #3
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	18d3      	adds	r3, r2, r3
 80070a0:	220a      	movs	r2, #10
 80070a2:	0019      	movs	r1, r3
 80070a4:	f002 fab6 	bl	8009614 <itoa>

	if (destination[offset + 1] == 0) {
 80070a8:	1cfb      	adds	r3, r7, #3
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	18d3      	adds	r3, r2, r3
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d110      	bne.n	80070da <oneIntToArray+0x6c>
		destination[offset + 1] = destination[offset];
 80070b8:	1cfb      	adds	r3, r7, #3
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	18d2      	adds	r2, r2, r3
 80070c0:	1cfb      	adds	r3, r7, #3
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	18cb      	adds	r3, r1, r3
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	701a      	strb	r2, [r3, #0]
		destination[offset] = '0';
 80070ce:	1cfb      	adds	r3, r7, #3
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	18d3      	adds	r3, r2, r3
 80070d6:	2230      	movs	r2, #48	; 0x30
 80070d8:	701a      	strb	r2, [r3, #0]
	}
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b002      	add	sp, #8
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <encoderAction>:
 *      Author: bartosz
 */

#include "interrupts.h"

void encoderAction(uint8_t direction) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	0002      	movs	r2, r0
 80070ec:	1dfb      	adds	r3, r7, #7
 80070ee:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 80070f0:	1dfb      	adds	r3, r7, #7
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d11f      	bne.n	8007138 <encoderAction+0x54>
		if (menuSwitch(&menu, MENU_ENTER)) {
 80070f8:	4b7d      	ldr	r3, [pc, #500]	; (80072f0 <encoderAction+0x20c>)
 80070fa:	2100      	movs	r1, #0
 80070fc:	0018      	movs	r0, r3
 80070fe:	f001 f8b1 	bl	8008264 <menuSwitch>
 8007102:	1e03      	subs	r3, r0, #0
 8007104:	d00f      	beq.n	8007126 <encoderAction+0x42>
			LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DIR_LEFT);
 8007106:	4a7b      	ldr	r2, [pc, #492]	; (80072f4 <encoderAction+0x210>)
 8007108:	487b      	ldr	r0, [pc, #492]	; (80072f8 <encoderAction+0x214>)
 800710a:	2301      	movs	r3, #1
 800710c:	2100      	movs	r1, #0
 800710e:	f7ff fe0b 	bl	8006d28 <LEDstr>
			LEDdot(&display, menu.current.value2);
 8007112:	4a77      	ldr	r2, [pc, #476]	; (80072f0 <encoderAction+0x20c>)
 8007114:	2386      	movs	r3, #134	; 0x86
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	5cd2      	ldrb	r2, [r2, r3]
 800711a:	4b77      	ldr	r3, [pc, #476]	; (80072f8 <encoderAction+0x214>)
 800711c:	0011      	movs	r1, r2
 800711e:	0018      	movs	r0, r3
 8007120:	f7ff fe50 	bl	8006dc4 <LEDdot>
 8007124:	e008      	b.n	8007138 <encoderAction+0x54>
		} else { //if theres no child under item
			if (menu.current.value3) { //check thats editable
 8007126:	4a72      	ldr	r2, [pc, #456]	; (80072f0 <encoderAction+0x20c>)
 8007128:	230e      	movs	r3, #14
 800712a:	33ff      	adds	r3, #255	; 0xff
 800712c:	5cd3      	ldrb	r3, [r2, r3]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <encoderAction+0x54>
				flags[FLAG_LOCKED] = 1;
 8007132:	4b72      	ldr	r3, [pc, #456]	; (80072fc <encoderAction+0x218>)
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if (direction == ENCODER_ACTION_EXIT) {
 8007138:	1dfb      	adds	r3, r7, #7
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b03      	cmp	r3, #3
 800713e:	d11d      	bne.n	800717c <encoderAction+0x98>

		if (!flags[FLAG_LOCKED]) {
 8007140:	4b6e      	ldr	r3, [pc, #440]	; (80072fc <encoderAction+0x218>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d116      	bne.n	8007176 <encoderAction+0x92>
			if (menuSwitch(&menu, MENU_EXIT)) {
 8007148:	4b69      	ldr	r3, [pc, #420]	; (80072f0 <encoderAction+0x20c>)
 800714a:	2101      	movs	r1, #1
 800714c:	0018      	movs	r0, r3
 800714e:	f001 f889 	bl	8008264 <menuSwitch>
 8007152:	1e03      	subs	r3, r0, #0
 8007154:	d012      	beq.n	800717c <encoderAction+0x98>
				LEDstr(&display, 0, menu.current.value,
 8007156:	4a67      	ldr	r2, [pc, #412]	; (80072f4 <encoderAction+0x210>)
 8007158:	4867      	ldr	r0, [pc, #412]	; (80072f8 <encoderAction+0x214>)
 800715a:	2302      	movs	r3, #2
 800715c:	2100      	movs	r1, #0
 800715e:	f7ff fde3 	bl	8006d28 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8007162:	4a63      	ldr	r2, [pc, #396]	; (80072f0 <encoderAction+0x20c>)
 8007164:	2386      	movs	r3, #134	; 0x86
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	5cd2      	ldrb	r2, [r2, r3]
 800716a:	4b63      	ldr	r3, [pc, #396]	; (80072f8 <encoderAction+0x214>)
 800716c:	0011      	movs	r1, r2
 800716e:	0018      	movs	r0, r3
 8007170:	f7ff fe28 	bl	8006dc4 <LEDdot>
 8007174:	e002      	b.n	800717c <encoderAction+0x98>
			}
		}else{
			flags[FLAG_LOCKED] = 0;
 8007176:	4b61      	ldr	r3, [pc, #388]	; (80072fc <encoderAction+0x218>)
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
		}

	}

	if (direction == ENCODER_ACTION_LEFT) {
 800717c:	1dfb      	adds	r3, r7, #7
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d155      	bne.n	8007230 <encoderAction+0x14c>

		if (!flags[FLAG_LOCKED]) {
 8007184:	4b5d      	ldr	r3, [pc, #372]	; (80072fc <encoderAction+0x218>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d116      	bne.n	80071ba <encoderAction+0xd6>
			if (menuSwitch(&menu, MENU_UP)) {
 800718c:	4b58      	ldr	r3, [pc, #352]	; (80072f0 <encoderAction+0x20c>)
 800718e:	2102      	movs	r1, #2
 8007190:	0018      	movs	r0, r3
 8007192:	f001 f867 	bl	8008264 <menuSwitch>
 8007196:	1e03      	subs	r3, r0, #0
 8007198:	d04b      	beq.n	8007232 <encoderAction+0x14e>
				LEDstr(&display, 0, menu.current.value,
 800719a:	4a56      	ldr	r2, [pc, #344]	; (80072f4 <encoderAction+0x210>)
 800719c:	4856      	ldr	r0, [pc, #344]	; (80072f8 <encoderAction+0x214>)
 800719e:	2301      	movs	r3, #1
 80071a0:	2100      	movs	r1, #0
 80071a2:	f7ff fdc1 	bl	8006d28 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 80071a6:	4a52      	ldr	r2, [pc, #328]	; (80072f0 <encoderAction+0x20c>)
 80071a8:	2386      	movs	r3, #134	; 0x86
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	5cd2      	ldrb	r2, [r2, r3]
 80071ae:	4b52      	ldr	r3, [pc, #328]	; (80072f8 <encoderAction+0x214>)
 80071b0:	0011      	movs	r1, r2
 80071b2:	0018      	movs	r0, r3
 80071b4:	f7ff fe06 	bl	8006dc4 <LEDdot>
 80071b8:	e03b      	b.n	8007232 <encoderAction+0x14e>
			}
		} else {

			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 80071ba:	4a4d      	ldr	r2, [pc, #308]	; (80072f0 <encoderAction+0x20c>)
 80071bc:	2310      	movs	r3, #16
 80071be:	33ff      	adds	r3, #255	; 0xff
 80071c0:	5cd3      	ldrb	r3, [r2, r3]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d134      	bne.n	8007230 <encoderAction+0x14c>

				switch (menu.current.entry) {
 80071c6:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <encoderAction+0x20c>)
 80071c8:	2387      	movs	r3, #135	; 0x87
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	5cd3      	ldrb	r3, [r2, r3]
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	d82f      	bhi.n	8007232 <encoderAction+0x14e>
 80071d2:	009a      	lsls	r2, r3, #2
 80071d4:	4b4a      	ldr	r3, [pc, #296]	; (8007300 <encoderAction+0x21c>)
 80071d6:	18d3      	adds	r3, r2, r3
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	469f      	mov	pc, r3
				case SETTINGS_CLOCK_HOUR:
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 80071dc:	4b49      	ldr	r3, [pc, #292]	; (8007304 <encoderAction+0x220>)
 80071de:	2201      	movs	r2, #1
 80071e0:	2100      	movs	r1, #0
 80071e2:	0018      	movs	r0, r3
 80071e4:	f001 fe10 	bl	8008e08 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80071e8:	e023      	b.n	8007232 <encoderAction+0x14e>
				case SETTINGS_CLOCK_MINUTE:
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 80071ea:	4b46      	ldr	r3, [pc, #280]	; (8007304 <encoderAction+0x220>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	2101      	movs	r1, #1
 80071f0:	0018      	movs	r0, r3
 80071f2:	f001 fe09 	bl	8008e08 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 80071f6:	e01c      	b.n	8007232 <encoderAction+0x14e>
				case SETTINGS_CLOCK_SECONDS:
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <encoderAction+0x220>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	2102      	movs	r1, #2
 80071fe:	0018      	movs	r0, r3
 8007200:	f001 fe02 	bl	8008e08 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8007204:	e015      	b.n	8007232 <encoderAction+0x14e>
				case SETTINGS_CALENDAR_DAY:
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 8007206:	4b3f      	ldr	r3, [pc, #252]	; (8007304 <encoderAction+0x220>)
 8007208:	2201      	movs	r2, #1
 800720a:	2103      	movs	r1, #3
 800720c:	0018      	movs	r0, r3
 800720e:	f001 fdfb 	bl	8008e08 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8007212:	e00e      	b.n	8007232 <encoderAction+0x14e>
				case SETTINGS_CALENDAR_MONTH:
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 8007214:	4b3b      	ldr	r3, [pc, #236]	; (8007304 <encoderAction+0x220>)
 8007216:	2201      	movs	r2, #1
 8007218:	2104      	movs	r1, #4
 800721a:	0018      	movs	r0, r3
 800721c:	f001 fdf4 	bl	8008e08 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8007220:	e007      	b.n	8007232 <encoderAction+0x14e>
				case SETTINGS_CALENDAR_YEAR:
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 8007222:	4b38      	ldr	r3, [pc, #224]	; (8007304 <encoderAction+0x220>)
 8007224:	2201      	movs	r2, #1
 8007226:	2105      	movs	r1, #5
 8007228:	0018      	movs	r0, r3
 800722a:	f001 fded 	bl	8008e08 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800722e:	e000      	b.n	8007232 <encoderAction+0x14e>
				}

			}
 8007230:	46c0      	nop			; (mov r8, r8)

		}

	}
	if (direction == ENCODER_ACTION_RIGHT) {
 8007232:	1dfb      	adds	r3, r7, #7
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d155      	bne.n	80072e6 <encoderAction+0x202>

		if (!flags[FLAG_LOCKED]) {
 800723a:	4b30      	ldr	r3, [pc, #192]	; (80072fc <encoderAction+0x218>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d116      	bne.n	8007270 <encoderAction+0x18c>
			if (menuSwitch(&menu, MENU_DOWN)) {
 8007242:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <encoderAction+0x20c>)
 8007244:	2103      	movs	r1, #3
 8007246:	0018      	movs	r0, r3
 8007248:	f001 f80c 	bl	8008264 <menuSwitch>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d04b      	beq.n	80072e8 <encoderAction+0x204>
				LEDstr(&display, 0, menu.current.value,
 8007250:	4a28      	ldr	r2, [pc, #160]	; (80072f4 <encoderAction+0x210>)
 8007252:	4829      	ldr	r0, [pc, #164]	; (80072f8 <encoderAction+0x214>)
 8007254:	2302      	movs	r3, #2
 8007256:	2100      	movs	r1, #0
 8007258:	f7ff fd66 	bl	8006d28 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <encoderAction+0x20c>)
 800725e:	2386      	movs	r3, #134	; 0x86
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	5cd2      	ldrb	r2, [r2, r3]
 8007264:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <encoderAction+0x214>)
 8007266:	0011      	movs	r1, r2
 8007268:	0018      	movs	r0, r3
 800726a:	f7ff fdab 	bl	8006dc4 <LEDdot>
			}

		}

	}
}
 800726e:	e03b      	b.n	80072e8 <encoderAction+0x204>
			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 8007270:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <encoderAction+0x20c>)
 8007272:	2310      	movs	r3, #16
 8007274:	33ff      	adds	r3, #255	; 0xff
 8007276:	5cd3      	ldrb	r3, [r2, r3]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d134      	bne.n	80072e6 <encoderAction+0x202>
				switch (menu.current.entry) {
 800727c:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <encoderAction+0x20c>)
 800727e:	2387      	movs	r3, #135	; 0x87
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	5cd3      	ldrb	r3, [r2, r3]
 8007284:	2b05      	cmp	r3, #5
 8007286:	d82f      	bhi.n	80072e8 <encoderAction+0x204>
 8007288:	009a      	lsls	r2, r3, #2
 800728a:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <encoderAction+0x224>)
 800728c:	18d3      	adds	r3, r2, r3
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	469f      	mov	pc, r3
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <encoderAction+0x220>)
 8007294:	2200      	movs	r2, #0
 8007296:	2100      	movs	r1, #0
 8007298:	0018      	movs	r0, r3
 800729a:	f001 fdb5 	bl	8008e08 <rtcChangeValue>
					break;
 800729e:	e023      	b.n	80072e8 <encoderAction+0x204>
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 80072a0:	4b18      	ldr	r3, [pc, #96]	; (8007304 <encoderAction+0x220>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	2101      	movs	r1, #1
 80072a6:	0018      	movs	r0, r3
 80072a8:	f001 fdae 	bl	8008e08 <rtcChangeValue>
					break;
 80072ac:	e01c      	b.n	80072e8 <encoderAction+0x204>
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <encoderAction+0x220>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	2102      	movs	r1, #2
 80072b4:	0018      	movs	r0, r3
 80072b6:	f001 fda7 	bl	8008e08 <rtcChangeValue>
					break;
 80072ba:	e015      	b.n	80072e8 <encoderAction+0x204>
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <encoderAction+0x220>)
 80072be:	2200      	movs	r2, #0
 80072c0:	2103      	movs	r1, #3
 80072c2:	0018      	movs	r0, r3
 80072c4:	f001 fda0 	bl	8008e08 <rtcChangeValue>
					break;
 80072c8:	e00e      	b.n	80072e8 <encoderAction+0x204>
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 80072ca:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <encoderAction+0x220>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	2104      	movs	r1, #4
 80072d0:	0018      	movs	r0, r3
 80072d2:	f001 fd99 	bl	8008e08 <rtcChangeValue>
					break;
 80072d6:	e007      	b.n	80072e8 <encoderAction+0x204>
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 80072d8:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <encoderAction+0x220>)
 80072da:	2200      	movs	r2, #0
 80072dc:	2105      	movs	r1, #5
 80072de:	0018      	movs	r0, r3
 80072e0:	f001 fd92 	bl	8008e08 <rtcChangeValue>
					break;
 80072e4:	e000      	b.n	80072e8 <encoderAction+0x204>
			}
 80072e6:	46c0      	nop			; (mov r8, r8)
}
 80072e8:	46c0      	nop			; (mov r8, r8)
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b002      	add	sp, #8
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	2000004c 	.word	0x2000004c
 80072f4:	20000154 	.word	0x20000154
 80072f8:	200001d4 	.word	0x200001d4
 80072fc:	20000048 	.word	0x20000048
 8007300:	080099a8 	.word	0x080099a8
 8007304:	200001ac 	.word	0x200001ac
 8007308:	080099c0 	.word	0x080099c0

0800730c <GPIO_EXTI_Rising_FallingCallback>:

void GPIO_EXTI_Rising_FallingCallback(uint16_t GPIO_Pin) {
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	0002      	movs	r2, r0
 8007314:	1dbb      	adds	r3, r7, #6
 8007316:	801a      	strh	r2, [r3, #0]

	TIM2->CNT = 0; // reset timer if interrupt occurs
 8007318:	2380      	movs	r3, #128	; 0x80
 800731a:	05db      	lsls	r3, r3, #23
 800731c:	2200      	movs	r2, #0
 800731e:	625a      	str	r2, [r3, #36]	; 0x24

	if (GPIO_Pin == ENC1_Pin) {
 8007320:	1dbb      	adds	r3, r7, #6
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	2b80      	cmp	r3, #128	; 0x80
 8007326:	d111      	bne.n	800734c <GPIO_EXTI_Rising_FallingCallback+0x40>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007328:	4b1c      	ldr	r3, [pc, #112]	; (800739c <GPIO_EXTI_Rising_FallingCallback+0x90>)
 800732a:	2180      	movs	r1, #128	; 0x80
 800732c:	0018      	movs	r0, r3
 800732e:	f7fc f873 	bl	8003418 <HAL_GPIO_ReadPin>
 8007332:	0003      	movs	r3, r0
 8007334:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8007336:	4b19      	ldr	r3, [pc, #100]	; (800739c <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007338:	2140      	movs	r1, #64	; 0x40
 800733a:	0018      	movs	r0, r3
 800733c:	f7fc f86c 	bl	8003418 <HAL_GPIO_ReadPin>
 8007340:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007342:	429c      	cmp	r4, r3
 8007344:	d002      	beq.n	800734c <GPIO_EXTI_Rising_FallingCallback+0x40>
			encoderAction(ENCODER_ACTION_LEFT);
 8007346:	2000      	movs	r0, #0
 8007348:	f7ff fecc 	bl	80070e4 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 800734c:	1dbb      	adds	r3, r7, #6
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d111      	bne.n	8007378 <GPIO_EXTI_Rising_FallingCallback+0x6c>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007356:	2180      	movs	r1, #128	; 0x80
 8007358:	0018      	movs	r0, r3
 800735a:	f7fc f85d 	bl	8003418 <HAL_GPIO_ReadPin>
 800735e:	0003      	movs	r3, r0
 8007360:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8007362:	4b0e      	ldr	r3, [pc, #56]	; (800739c <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8007364:	2140      	movs	r1, #64	; 0x40
 8007366:	0018      	movs	r0, r3
 8007368:	f7fc f856 	bl	8003418 <HAL_GPIO_ReadPin>
 800736c:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800736e:	429c      	cmp	r4, r3
 8007370:	d002      	beq.n	8007378 <GPIO_EXTI_Rising_FallingCallback+0x6c>
			encoderAction(ENCODER_ACTION_RIGHT);
 8007372:	2001      	movs	r0, #1
 8007374:	f7ff feb6 	bl	80070e4 <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 8007378:	1dbb      	adds	r3, r7, #6
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2b20      	cmp	r3, #32
 800737e:	d102      	bne.n	8007386 <GPIO_EXTI_Rising_FallingCallback+0x7a>
		encoderAction(ENCODER_ACTION_ENTER);
 8007380:	2002      	movs	r0, #2
 8007382:	f7ff feaf 	bl	80070e4 <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 8007386:	1dbb      	adds	r3, r7, #6
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	2b10      	cmp	r3, #16
 800738c:	d102      	bne.n	8007394 <GPIO_EXTI_Rising_FallingCallback+0x88>
		encoderAction(ENCODER_ACTION_EXIT);
 800738e:	2003      	movs	r0, #3
 8007390:	f7ff fea8 	bl	80070e4 <encoderAction>
	}

	if (GPIO_Pin == MODE_Pin) {

	}
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	46bd      	mov	sp, r7
 8007398:	b003      	add	sp, #12
 800739a:	bd90      	pop	{r4, r7, pc}
 800739c:	50000400 	.word	0x50000400

080073a0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	0002      	movs	r2, r0
 80073a8:	1dbb      	adds	r3, r7, #6
 80073aa:	801a      	strh	r2, [r3, #0]
	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 80073ac:	1dbb      	adds	r3, r7, #6
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	0018      	movs	r0, r3
 80073b2:	f7ff ffab 	bl	800730c <GPIO_EXTI_Rising_FallingCallback>
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b002      	add	sp, #8
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	0002      	movs	r2, r0
 80073c6:	1dbb      	adds	r3, r7, #6
 80073c8:	801a      	strh	r2, [r3, #0]

	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 80073ca:	1dbb      	adds	r3, r7, #6
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7ff ff9c 	bl	800730c <GPIO_EXTI_Rising_FallingCallback>

}
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b002      	add	sp, #8
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d103      	bne.n	80073f6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7fe fead 	bl	8006150 <LEDmultiplexing>
	}
	if (htim->Instance == TIM2) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	2380      	movs	r3, #128	; 0x80
 80073fc:	05db      	lsls	r3, r3, #23
 80073fe:	429a      	cmp	r2, r3
 8007400:	d102      	bne.n	8007408 <HAL_TIM_PeriodElapsedCallback+0x2c>
		flags[FLAG_SLEEP] = 1;
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007404:	2201      	movs	r2, #1
 8007406:	705a      	strb	r2, [r3, #1]
	}
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	46bd      	mov	sp, r7
 800740c:	b002      	add	sp, #8
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40012c00 	.word	0x40012c00
 8007414:	200001d4 	.word	0x200001d4
 8007418:	20000048 	.word	0x20000048

0800741c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800741c:	b580      	push	{r7, lr}
 800741e:	b096      	sub	sp, #88	; 0x58
 8007420:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE BEGIN 1 */
aktualnyCzas.hour = 20;
 8007422:	4bfe      	ldr	r3, [pc, #1016]	; (800781c <main+0x400>)
 8007424:	2214      	movs	r2, #20
 8007426:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007428:	f7fb f856 	bl	80024d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800742c:	f000 fa9e 	bl	800796c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007430:	f000 fd04 	bl	8007e3c <MX_GPIO_Init>
	MX_TIM1_Init();
 8007434:	f000 fc02 	bl	8007c3c <MX_TIM1_Init>
	MX_ADC1_Init();
 8007438:	f000 faee 	bl	8007a18 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800743c:	f000 fcb0 	bl	8007da0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8007440:	f000 fb50 	bl	8007ae4 <MX_I2C1_Init>
	MX_RTC_Init();
 8007444:	f000 fb8e 	bl	8007b64 <MX_RTC_Init>
	MX_TIM2_Init();
 8007448:	f000 fc54 	bl	8007cf4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 800744c:	4bf4      	ldr	r3, [pc, #976]	; (8007820 <main+0x404>)
 800744e:	0018      	movs	r0, r3
 8007450:	f7fd fc4e 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8007454:	4bf3      	ldr	r3, [pc, #972]	; (8007824 <main+0x408>)
 8007456:	0018      	movs	r0, r3
 8007458:	f7fd fc4a 	bl	8004cf0 <HAL_TIM_Base_Start_IT>

	//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 800745c:	23a0      	movs	r3, #160	; 0xa0
 800745e:	05da      	lsls	r2, r3, #23
 8007460:	49f1      	ldr	r1, [pc, #964]	; (8007828 <main+0x40c>)
 8007462:	48f2      	ldr	r0, [pc, #968]	; (800782c <main+0x410>)
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	9314      	str	r3, [sp, #80]	; 0x50
 800746a:	23a0      	movs	r3, #160	; 0xa0
 800746c:	05db      	lsls	r3, r3, #23
 800746e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007470:	2301      	movs	r3, #1
 8007472:	9312      	str	r3, [sp, #72]	; 0x48
 8007474:	4bee      	ldr	r3, [pc, #952]	; (8007830 <main+0x414>)
 8007476:	9311      	str	r3, [sp, #68]	; 0x44
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	9310      	str	r3, [sp, #64]	; 0x40
 800747e:	23a0      	movs	r3, #160	; 0xa0
 8007480:	05db      	lsls	r3, r3, #23
 8007482:	930f      	str	r3, [sp, #60]	; 0x3c
 8007484:	2304      	movs	r3, #4
 8007486:	930e      	str	r3, [sp, #56]	; 0x38
 8007488:	4be9      	ldr	r3, [pc, #932]	; (8007830 <main+0x414>)
 800748a:	930d      	str	r3, [sp, #52]	; 0x34
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	930c      	str	r3, [sp, #48]	; 0x30
 8007492:	23a0      	movs	r3, #160	; 0xa0
 8007494:	05db      	lsls	r3, r3, #23
 8007496:	930b      	str	r3, [sp, #44]	; 0x2c
 8007498:	2302      	movs	r3, #2
 800749a:	930a      	str	r3, [sp, #40]	; 0x28
 800749c:	4be4      	ldr	r3, [pc, #912]	; (8007830 <main+0x414>)
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	9308      	str	r3, [sp, #32]
 80074a4:	23a0      	movs	r3, #160	; 0xa0
 80074a6:	05db      	lsls	r3, r3, #23
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	2380      	movs	r3, #128	; 0x80
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	9306      	str	r3, [sp, #24]
 80074b0:	23a0      	movs	r3, #160	; 0xa0
 80074b2:	05db      	lsls	r3, r3, #23
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	23a0      	movs	r3, #160	; 0xa0
 80074bc:	05db      	lsls	r3, r3, #23
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	23a0      	movs	r3, #160	; 0xa0
 80074c8:	05db      	lsls	r3, r3, #23
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	015b      	lsls	r3, r3, #5
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	0013      	movs	r3, r2
 80074d4:	2240      	movs	r2, #64	; 0x40
 80074d6:	f7ff fb6d 	bl	8006bb4 <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "    ");
 80074da:	4ad6      	ldr	r2, [pc, #856]	; (8007834 <main+0x418>)
 80074dc:	4bd3      	ldr	r3, [pc, #844]	; (800782c <main+0x410>)
 80074de:	0011      	movs	r1, r2
 80074e0:	0018      	movs	r0, r3
 80074e2:	f7ff fbe7 	bl	8006cb4 <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 80074e6:	48d4      	ldr	r0, [pc, #848]	; (8007838 <main+0x41c>)
 80074e8:	2301      	movs	r3, #1
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	2300      	movs	r3, #0
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	23ff      	movs	r3, #255	; 0xff
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	f000 fe3f 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 80074fa:	48cf      	ldr	r0, [pc, #828]	; (8007838 <main+0x41c>)
 80074fc:	23ff      	movs	r3, #255	; 0xff
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	23ff      	movs	r3, #255	; 0xff
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	23ff      	movs	r3, #255	; 0xff
 8007506:	2200      	movs	r2, #0
 8007508:	2101      	movs	r1, #1
 800750a:	f000 fe35 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800750e:	48ca      	ldr	r0, [pc, #808]	; (8007838 <main+0x41c>)
 8007510:	23ff      	movs	r3, #255	; 0xff
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	23ff      	movs	r3, #255	; 0xff
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	23ff      	movs	r3, #255	; 0xff
 800751a:	2200      	movs	r2, #0
 800751c:	2102      	movs	r1, #2
 800751e:	f000 fe2b 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007522:	48c5      	ldr	r0, [pc, #788]	; (8007838 <main+0x41c>)
 8007524:	23ff      	movs	r3, #255	; 0xff
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	23ff      	movs	r3, #255	; 0xff
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	23ff      	movs	r3, #255	; 0xff
 800752e:	2200      	movs	r2, #0
 8007530:	2103      	movs	r1, #3
 8007532:	f000 fe21 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8007536:	48c0      	ldr	r0, [pc, #768]	; (8007838 <main+0x41c>)
 8007538:	23ff      	movs	r3, #255	; 0xff
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	23ff      	movs	r3, #255	; 0xff
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	2200      	movs	r2, #0
 8007544:	2104      	movs	r1, #4
 8007546:	f000 fe17 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, AZIMUTH, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800754a:	48bb      	ldr	r0, [pc, #748]	; (8007838 <main+0x41c>)
 800754c:	23ff      	movs	r3, #255	; 0xff
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	23ff      	movs	r3, #255	; 0xff
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	23ff      	movs	r3, #255	; 0xff
 8007556:	2200      	movs	r2, #0
 8007558:	2105      	movs	r1, #5
 800755a:	f000 fe0d 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, 2, 3);
 800755e:	48b6      	ldr	r0, [pc, #728]	; (8007838 <main+0x41c>)
 8007560:	2303      	movs	r3, #3
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	2302      	movs	r3, #2
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	23ff      	movs	r3, #255	; 0xff
 800756a:	2200      	movs	r2, #0
 800756c:	2106      	movs	r1, #6
 800756e:	f000 fe03 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, 4, 7);
 8007572:	48b1      	ldr	r0, [pc, #708]	; (8007838 <main+0x41c>)
 8007574:	2307      	movs	r3, #7
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	2304      	movs	r3, #4
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	23ff      	movs	r3, #255	; 0xff
 800757e:	2200      	movs	r2, #0
 8007580:	2107      	movs	r1, #7
 8007582:	f000 fdf9 	bl	8008178 <menuItemInit>

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 8007586:	48ac      	ldr	r0, [pc, #688]	; (8007838 <main+0x41c>)
 8007588:	23ff      	movs	r3, #255	; 0xff
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	23ff      	movs	r3, #255	; 0xff
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	2300      	movs	r3, #0
 8007592:	2201      	movs	r2, #1
 8007594:	2100      	movs	r1, #0
 8007596:	f000 fdef 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 800759a:	48a7      	ldr	r0, [pc, #668]	; (8007838 <main+0x41c>)
 800759c:	23ff      	movs	r3, #255	; 0xff
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	23ff      	movs	r3, #255	; 0xff
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	2300      	movs	r3, #0
 80075a6:	2201      	movs	r2, #1
 80075a8:	2101      	movs	r1, #1
 80075aa:	f000 fde5 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 80075ae:	48a2      	ldr	r0, [pc, #648]	; (8007838 <main+0x41c>)
 80075b0:	23ff      	movs	r3, #255	; 0xff
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	23ff      	movs	r3, #255	; 0xff
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	2306      	movs	r3, #6
 80075ba:	2201      	movs	r2, #1
 80075bc:	2102      	movs	r1, #2
 80075be:	f000 fddb 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 80075c2:	489d      	ldr	r0, [pc, #628]	; (8007838 <main+0x41c>)
 80075c4:	23ff      	movs	r3, #255	; 0xff
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	23ff      	movs	r3, #255	; 0xff
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2306      	movs	r3, #6
 80075ce:	2201      	movs	r2, #1
 80075d0:	2103      	movs	r1, #3
 80075d2:	f000 fdd1 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, SETTINGS_CLOCK_HOUR,
 80075d6:	4898      	ldr	r0, [pc, #608]	; (8007838 <main+0x41c>)
 80075d8:	2302      	movs	r3, #2
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2307      	movs	r3, #7
 80075e2:	2201      	movs	r2, #1
 80075e4:	2104      	movs	r1, #4
 80075e6:	f000 fdc7 	bl	8008178 <menuItemInit>
	SETTINGS_CLOCK_SECONDS);
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS, SETTINGS_CALENDAR_DAY,
 80075ea:	4893      	ldr	r0, [pc, #588]	; (8007838 <main+0x41c>)
 80075ec:	2305      	movs	r3, #5
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	2303      	movs	r3, #3
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2307      	movs	r3, #7
 80075f6:	2201      	movs	r2, #1
 80075f8:	2105      	movs	r1, #5
 80075fa:	f000 fdbd 	bl	8008178 <menuItemInit>
	SETTINGS_CALENDAR_YEAR);
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS, MENU_NONE, MENU_NONE);
 80075fe:	488e      	ldr	r0, [pc, #568]	; (8007838 <main+0x41c>)
 8007600:	23ff      	movs	r3, #255	; 0xff
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	23ff      	movs	r3, #255	; 0xff
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	2307      	movs	r3, #7
 800760a:	2201      	movs	r2, #1
 800760c:	2106      	movs	r1, #6
 800760e:	f000 fdb3 	bl	8008178 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS, MENU_NONE, MENU_NONE);
 8007612:	4889      	ldr	r0, [pc, #548]	; (8007838 <main+0x41c>)
 8007614:	23ff      	movs	r3, #255	; 0xff
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	23ff      	movs	r3, #255	; 0xff
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2307      	movs	r3, #7
 800761e:	2201      	movs	r2, #1
 8007620:	2107      	movs	r1, #7
 8007622:	f000 fda9 	bl	8008178 <menuItemInit>

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOUR, 2, SETTINGS_CLOCK, MENU_NONE,
 8007626:	4884      	ldr	r0, [pc, #528]	; (8007838 <main+0x41c>)
 8007628:	23ff      	movs	r3, #255	; 0xff
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	23ff      	movs	r3, #255	; 0xff
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2304      	movs	r3, #4
 8007632:	2202      	movs	r2, #2
 8007634:	2100      	movs	r1, #0
 8007636:	f000 fd9f 	bl	8008178 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_MINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 800763a:	487f      	ldr	r0, [pc, #508]	; (8007838 <main+0x41c>)
 800763c:	23ff      	movs	r3, #255	; 0xff
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	23ff      	movs	r3, #255	; 0xff
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2304      	movs	r3, #4
 8007646:	2202      	movs	r2, #2
 8007648:	2101      	movs	r1, #1
 800764a:	f000 fd95 	bl	8008178 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK, MENU_NONE,
 800764e:	487a      	ldr	r0, [pc, #488]	; (8007838 <main+0x41c>)
 8007650:	23ff      	movs	r3, #255	; 0xff
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	23ff      	movs	r3, #255	; 0xff
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2304      	movs	r3, #4
 800765a:	2202      	movs	r2, #2
 800765c:	2102      	movs	r1, #2
 800765e:	f000 fd8b 	bl	8008178 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAY, 2, SETTINGS_CALENDAR,
 8007662:	4875      	ldr	r0, [pc, #468]	; (8007838 <main+0x41c>)
 8007664:	23ff      	movs	r3, #255	; 0xff
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	23ff      	movs	r3, #255	; 0xff
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2305      	movs	r3, #5
 800766e:	2202      	movs	r2, #2
 8007670:	2103      	movs	r1, #3
 8007672:	f000 fd81 	bl	8008178 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_MONTH, 2, SETTINGS_CALENDAR,
 8007676:	4870      	ldr	r0, [pc, #448]	; (8007838 <main+0x41c>)
 8007678:	23ff      	movs	r3, #255	; 0xff
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	23ff      	movs	r3, #255	; 0xff
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2305      	movs	r3, #5
 8007682:	2202      	movs	r2, #2
 8007684:	2104      	movs	r1, #4
 8007686:	f000 fd77 	bl	8008178 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR, MENU_NONE,
 800768a:	486b      	ldr	r0, [pc, #428]	; (8007838 <main+0x41c>)
 800768c:	23ff      	movs	r3, #255	; 0xff
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	23ff      	movs	r3, #255	; 0xff
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2305      	movs	r3, #5
 8007696:	2202      	movs	r2, #2
 8007698:	2105      	movs	r1, #5
 800769a:	f000 fd6d 	bl	8008178 <menuItemInit>
	MENU_NONE);

	//												MENU ITEMS VALUES
	//level 1
	//value1-string for display, value2-dot postion, value3- is editable
	menuItemChangeValue(&menu, CLOCK, 0, "2114", INTER_COLON, 0);
 800769e:	4b67      	ldr	r3, [pc, #412]	; (800783c <main+0x420>)
 80076a0:	4865      	ldr	r0, [pc, #404]	; (8007838 <main+0x41c>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	9201      	str	r2, [sp, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	9200      	str	r2, [sp, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2100      	movs	r1, #0
 80076ae:	f000 fc93 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, BAROMETER, 0, "1024", INTER_DISABLED, 0);
 80076b2:	4b63      	ldr	r3, [pc, #396]	; (8007840 <main+0x424>)
 80076b4:	4860      	ldr	r0, [pc, #384]	; (8007838 <main+0x41c>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	9201      	str	r2, [sp, #4]
 80076ba:	2204      	movs	r2, #4
 80076bc:	9200      	str	r2, [sp, #0]
 80076be:	2200      	movs	r2, #0
 80076c0:	2101      	movs	r1, #1
 80076c2:	f000 fc89 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, HIGROMETER, 0, "42 H", INTER_DISABLED, 0);
 80076c6:	4b5f      	ldr	r3, [pc, #380]	; (8007844 <main+0x428>)
 80076c8:	485b      	ldr	r0, [pc, #364]	; (8007838 <main+0x41c>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	9200      	str	r2, [sp, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2102      	movs	r1, #2
 80076d6:	f000 fc7f 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, TEMPERATURE, 0, "20 ^", INTER_DISABLED, 0);
 80076da:	4b5b      	ldr	r3, [pc, #364]	; (8007848 <main+0x42c>)
 80076dc:	4856      	ldr	r0, [pc, #344]	; (8007838 <main+0x41c>)
 80076de:	2200      	movs	r2, #0
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	9200      	str	r2, [sp, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	2103      	movs	r1, #3
 80076ea:	f000 fc75 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, ALTITUDE, 0, " 102", INTER_DISABLED, 0);
 80076ee:	4b57      	ldr	r3, [pc, #348]	; (800784c <main+0x430>)
 80076f0:	4851      	ldr	r0, [pc, #324]	; (8007838 <main+0x41c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	9201      	str	r2, [sp, #4]
 80076f6:	2204      	movs	r2, #4
 80076f8:	9200      	str	r2, [sp, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	2104      	movs	r1, #4
 80076fe:	f000 fc6b 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, AZIMUTH, 0, "350^", INTER_DISABLED, 0);
 8007702:	4b53      	ldr	r3, [pc, #332]	; (8007850 <main+0x434>)
 8007704:	484c      	ldr	r0, [pc, #304]	; (8007838 <main+0x41c>)
 8007706:	2200      	movs	r2, #0
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	9200      	str	r2, [sp, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	2105      	movs	r1, #5
 8007712:	f000 fc61 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, CHRONO, 0, "0000", INTER_COLON, 0);
 8007716:	4b4f      	ldr	r3, [pc, #316]	; (8007854 <main+0x438>)
 8007718:	4847      	ldr	r0, [pc, #284]	; (8007838 <main+0x41c>)
 800771a:	2200      	movs	r2, #0
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	9200      	str	r2, [sp, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	2106      	movs	r1, #6
 8007726:	f000 fc57 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", INTER_DISABLED, 0);
 800772a:	4b4b      	ldr	r3, [pc, #300]	; (8007858 <main+0x43c>)
 800772c:	4842      	ldr	r0, [pc, #264]	; (8007838 <main+0x41c>)
 800772e:	2200      	movs	r2, #0
 8007730:	9201      	str	r2, [sp, #4]
 8007732:	2204      	movs	r2, #4
 8007734:	9200      	str	r2, [sp, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	2107      	movs	r1, #7
 800773a:	f000 fc4d 	bl	8007fd8 <menuItemChangeValue>

	//level 2
	menuItemChangeValue(&menu, CLOCK_DATE, 1, "1604", INTER_DOT, 0);
 800773e:	4b47      	ldr	r3, [pc, #284]	; (800785c <main+0x440>)
 8007740:	483d      	ldr	r0, [pc, #244]	; (8007838 <main+0x41c>)
 8007742:	2200      	movs	r2, #0
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	9200      	str	r2, [sp, #0]
 800774a:	2201      	movs	r2, #1
 800774c:	2100      	movs	r1, #0
 800774e:	f000 fc43 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, " :45", INTER_COLON, 0);
 8007752:	4b43      	ldr	r3, [pc, #268]	; (8007860 <main+0x444>)
 8007754:	4838      	ldr	r0, [pc, #224]	; (8007838 <main+0x41c>)
 8007756:	2200      	movs	r2, #0
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	9200      	str	r2, [sp, #0]
 800775e:	2201      	movs	r2, #1
 8007760:	2101      	movs	r1, #1
 8007762:	f000 fc39 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, CHRONO_HOURS, 1, "02 h", INTER_DISABLED, 0);
 8007766:	4b3f      	ldr	r3, [pc, #252]	; (8007864 <main+0x448>)
 8007768:	4833      	ldr	r0, [pc, #204]	; (8007838 <main+0x41c>)
 800776a:	2200      	movs	r2, #0
 800776c:	9201      	str	r2, [sp, #4]
 800776e:	2204      	movs	r2, #4
 8007770:	9200      	str	r2, [sp, #0]
 8007772:	2201      	movs	r2, #1
 8007774:	2102      	movs	r1, #2
 8007776:	f000 fc2f 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", INTER_COLON, 0);
 800777a:	4b3b      	ldr	r3, [pc, #236]	; (8007868 <main+0x44c>)
 800777c:	482e      	ldr	r0, [pc, #184]	; (8007838 <main+0x41c>)
 800777e:	2200      	movs	r2, #0
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	9200      	str	r2, [sp, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	2103      	movs	r1, #3
 800778a:	f000 fc25 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", INTER_DISABLED, 0);
 800778e:	4b37      	ldr	r3, [pc, #220]	; (800786c <main+0x450>)
 8007790:	4829      	ldr	r0, [pc, #164]	; (8007838 <main+0x41c>)
 8007792:	2200      	movs	r2, #0
 8007794:	9201      	str	r2, [sp, #4]
 8007796:	2204      	movs	r2, #4
 8007798:	9200      	str	r2, [sp, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	2104      	movs	r1, #4
 800779e:	f000 fc1b 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", INTER_DISABLED, 0);
 80077a2:	4b33      	ldr	r3, [pc, #204]	; (8007870 <main+0x454>)
 80077a4:	4824      	ldr	r0, [pc, #144]	; (8007838 <main+0x41c>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	9201      	str	r2, [sp, #4]
 80077aa:	2204      	movs	r2, #4
 80077ac:	9200      	str	r2, [sp, #0]
 80077ae:	2201      	movs	r2, #1
 80077b0:	2105      	movs	r1, #5
 80077b2:	f000 fc11 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ", INTER_DISABLED,
 80077b6:	4b2f      	ldr	r3, [pc, #188]	; (8007874 <main+0x458>)
 80077b8:	481f      	ldr	r0, [pc, #124]	; (8007838 <main+0x41c>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	9201      	str	r2, [sp, #4]
 80077be:	2204      	movs	r2, #4
 80077c0:	9200      	str	r2, [sp, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	2106      	movs	r1, #6
 80077c6:	f000 fc07 	bl	8007fd8 <menuItemChangeValue>
			1);
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ", INTER_DISABLED,
 80077ca:	4b2b      	ldr	r3, [pc, #172]	; (8007878 <main+0x45c>)
 80077cc:	481a      	ldr	r0, [pc, #104]	; (8007838 <main+0x41c>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	9201      	str	r2, [sp, #4]
 80077d2:	2204      	movs	r2, #4
 80077d4:	9200      	str	r2, [sp, #0]
 80077d6:	2201      	movs	r2, #1
 80077d8:	2107      	movs	r1, #7
 80077da:	f000 fbfd 	bl	8007fd8 <menuItemChangeValue>
			1);

	//level 3
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, "21  ",
 80077de:	4b27      	ldr	r3, [pc, #156]	; (800787c <main+0x460>)
 80077e0:	4815      	ldr	r0, [pc, #84]	; (8007838 <main+0x41c>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	9200      	str	r2, [sp, #0]
 80077ea:	2202      	movs	r2, #2
 80077ec:	2100      	movs	r1, #0
 80077ee:	f000 fbf3 	bl	8007fd8 <menuItemChangeValue>
	INTER_COLON, 1);
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, "  14", INTER_COLON,
 80077f2:	4b23      	ldr	r3, [pc, #140]	; (8007880 <main+0x464>)
 80077f4:	4810      	ldr	r0, [pc, #64]	; (8007838 <main+0x41c>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	9201      	str	r2, [sp, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	9200      	str	r2, [sp, #0]
 80077fe:	2202      	movs	r2, #2
 8007800:	2101      	movs	r1, #1
 8007802:	f000 fbe9 	bl	8007fd8 <menuItemChangeValue>
			1);
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, "  45", INTER_COLON,
 8007806:	4b1f      	ldr	r3, [pc, #124]	; (8007884 <main+0x468>)
 8007808:	480b      	ldr	r0, [pc, #44]	; (8007838 <main+0x41c>)
 800780a:	2201      	movs	r2, #1
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	9200      	str	r2, [sp, #0]
 8007812:	2202      	movs	r2, #2
 8007814:	2102      	movs	r1, #2
 8007816:	f000 fbdf 	bl	8007fd8 <menuItemChangeValue>
 800781a:	e035      	b.n	8007888 <main+0x46c>
 800781c:	20000400 	.word	0x20000400
 8007820:	200002d8 	.word	0x200002d8
 8007824:	20000324 	.word	0x20000324
 8007828:	50000800 	.word	0x50000800
 800782c:	200001d4 	.word	0x200001d4
 8007830:	50000400 	.word	0x50000400
 8007834:	080096c4 	.word	0x080096c4
 8007838:	2000004c 	.word	0x2000004c
 800783c:	080096cc 	.word	0x080096cc
 8007840:	080096d4 	.word	0x080096d4
 8007844:	080096dc 	.word	0x080096dc
 8007848:	080096e4 	.word	0x080096e4
 800784c:	080096ec 	.word	0x080096ec
 8007850:	080096f4 	.word	0x080096f4
 8007854:	080096fc 	.word	0x080096fc
 8007858:	08009704 	.word	0x08009704
 800785c:	08009708 	.word	0x08009708
 8007860:	08009710 	.word	0x08009710
 8007864:	08009718 	.word	0x08009718
 8007868:	08009720 	.word	0x08009720
 800786c:	08009728 	.word	0x08009728
 8007870:	08009730 	.word	0x08009730
 8007874:	08009738 	.word	0x08009738
 8007878:	08009740 	.word	0x08009740
 800787c:	08009748 	.word	0x08009748
 8007880:	08009750 	.word	0x08009750
 8007884:	08009758 	.word	0x08009758
			1);
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, "16  ", INTER_DOT, 1);
 8007888:	4b30      	ldr	r3, [pc, #192]	; (800794c <main+0x530>)
 800788a:	4831      	ldr	r0, [pc, #196]	; (8007950 <main+0x534>)
 800788c:	2201      	movs	r2, #1
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	9200      	str	r2, [sp, #0]
 8007894:	2202      	movs	r2, #2
 8007896:	2103      	movs	r1, #3
 8007898:	f000 fb9e 	bl	8007fd8 <menuItemChangeValue>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, "  04", INTER_DOT,
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <main+0x538>)
 800789e:	482c      	ldr	r0, [pc, #176]	; (8007950 <main+0x534>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	9201      	str	r2, [sp, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	9200      	str	r2, [sp, #0]
 80078a8:	2202      	movs	r2, #2
 80078aa:	2104      	movs	r1, #4
 80078ac:	f000 fb94 	bl	8007fd8 <menuItemChangeValue>
			1);
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, "2022",
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <main+0x53c>)
 80078b2:	4827      	ldr	r0, [pc, #156]	; (8007950 <main+0x534>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	9201      	str	r2, [sp, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	9200      	str	r2, [sp, #0]
 80078bc:	2202      	movs	r2, #2
 80078be:	2105      	movs	r1, #5
 80078c0:	f000 fb8a 	bl	8007fd8 <menuItemChangeValue>
	INTER_DISABLED, 1);

	menuReset(&menu);
 80078c4:	4b22      	ldr	r3, [pc, #136]	; (8007950 <main+0x534>)
 80078c6:	0018      	movs	r0, r3
 80078c8:	f000 fb75 	bl	8007fb6 <menuReset>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//read RTC time
		rtcGetTime(&chronograph);
 80078cc:	4b23      	ldr	r3, [pc, #140]	; (800795c <main+0x540>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f001 f81a 	bl	8008908 <rtcGetTime>

		//write actual values to menu matrix
		interfaceWrite();
 80078d4:	f7ff fa86 	bl	8006de4 <interfaceWrite>

		//display current item
		if (display.transitionStatus == LED_TRANSITION_DISABLED) {
 80078d8:	4b21      	ldr	r3, [pc, #132]	; (8007960 <main+0x544>)
 80078da:	2267      	movs	r2, #103	; 0x67
 80078dc:	5c9b      	ldrb	r3, [r3, r2]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <main+0x4ca>
			interfaceShowActual();
 80078e2:	f7ff fb53 	bl	8006f8c <interfaceShowActual>
		}

		//												LOW POWER SECTION
		if (flags[FLAG_SLEEP]
 80078e6:	4b1f      	ldr	r3, [pc, #124]	; (8007964 <main+0x548>)
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d025      	beq.n	800793a <main+0x51e>
				&& HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) {
 80078ee:	4b1e      	ldr	r3, [pc, #120]	; (8007968 <main+0x54c>)
 80078f0:	2108      	movs	r1, #8
 80078f2:	0018      	movs	r0, r3
 80078f4:	f7fb fd90 	bl	8003418 <HAL_GPIO_ReadPin>
 80078f8:	0003      	movs	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d11d      	bne.n	800793a <main+0x51e>
			LEDclear(&display);
 80078fe:	4b18      	ldr	r3, [pc, #96]	; (8007960 <main+0x544>)
 8007900:	0018      	movs	r0, r3
 8007902:	f7ff f9fe 	bl	8006d02 <LEDclear>
			flags[FLAG_SLEEP] = 0;
 8007906:	4b17      	ldr	r3, [pc, #92]	; (8007964 <main+0x548>)
 8007908:	2200      	movs	r2, #0
 800790a:	705a      	strb	r2, [r3, #1]
			HAL_Delay(10);
 800790c:	200a      	movs	r0, #10
 800790e:	f7fa fe69 	bl	80025e4 <HAL_Delay>
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 0);
 8007912:	23a0      	movs	r3, #160	; 0xa0
 8007914:	05db      	lsls	r3, r3, #23
 8007916:	2200      	movs	r2, #0
 8007918:	2102      	movs	r1, #2
 800791a:	0018      	movs	r0, r3
 800791c:	f7fb fd99 	bl	8003452 <HAL_GPIO_WritePin>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	01db      	lsls	r3, r3, #7
 8007924:	2101      	movs	r1, #1
 8007926:	0018      	movs	r0, r3
 8007928:	f7fb ff16 	bl	8003758 <HAL_PWR_EnterSTOPMode>

			//											AFTER WAKE UP
			menuReset(&menu);
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <main+0x534>)
 800792e:	0018      	movs	r0, r3
 8007930:	f000 fb41 	bl	8007fb6 <menuReset>
			flags[FLAG_LOCKED] = 0;
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <main+0x548>)
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800793a:	23a0      	movs	r3, #160	; 0xa0
 800793c:	05db      	lsls	r3, r3, #23
 800793e:	2201      	movs	r2, #1
 8007940:	2102      	movs	r1, #2
 8007942:	0018      	movs	r0, r3
 8007944:	f7fb fd85 	bl	8003452 <HAL_GPIO_WritePin>
		rtcGetTime(&chronograph);
 8007948:	e7c0      	b.n	80078cc <main+0x4b0>
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	08009760 	.word	0x08009760
 8007950:	2000004c 	.word	0x2000004c
 8007954:	08009768 	.word	0x08009768
 8007958:	08009770 	.word	0x08009770
 800795c:	200001ac 	.word	0x200001ac
 8007960:	200001d4 	.word	0x200001d4
 8007964:	20000048 	.word	0x20000048
 8007968:	50000400 	.word	0x50000400

0800796c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b093      	sub	sp, #76	; 0x4c
 8007970:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007972:	2410      	movs	r4, #16
 8007974:	193b      	adds	r3, r7, r4
 8007976:	0018      	movs	r0, r3
 8007978:	2338      	movs	r3, #56	; 0x38
 800797a:	001a      	movs	r2, r3
 800797c:	2100      	movs	r1, #0
 800797e:	f001 fe56 	bl	800962e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007982:	003b      	movs	r3, r7
 8007984:	0018      	movs	r0, r3
 8007986:	2310      	movs	r3, #16
 8007988:	001a      	movs	r2, r3
 800798a:	2100      	movs	r1, #0
 800798c:	f001 fe4f 	bl	800962e <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	0018      	movs	r0, r3
 8007996:	f7fb ff17 	bl	80037c8 <HAL_PWREx_ControlVoltageScaling>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800799a:	f7fb fecf 	bl	800373c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800799e:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <SystemClock_Config+0xa8>)
 80079a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <SystemClock_Config+0xa8>)
 80079a4:	2118      	movs	r1, #24
 80079a6:	438a      	bics	r2, r1
 80079a8:	65da      	str	r2, [r3, #92]	; 0x5c

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80079aa:	193b      	adds	r3, r7, r4
 80079ac:	2206      	movs	r2, #6
 80079ae:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80079b0:	193b      	adds	r3, r7, r4
 80079b2:	2201      	movs	r2, #1
 80079b4:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80079b6:	193b      	adds	r3, r7, r4
 80079b8:	2280      	movs	r2, #128	; 0x80
 80079ba:	0052      	lsls	r2, r2, #1
 80079bc:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80079be:	193b      	adds	r3, r7, r4
 80079c0:	2200      	movs	r2, #0
 80079c2:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80079c4:	193b      	adds	r3, r7, r4
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80079ca:	193b      	adds	r3, r7, r4
 80079cc:	2200      	movs	r2, #0
 80079ce:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80079d0:	193b      	adds	r3, r7, r4
 80079d2:	0018      	movs	r0, r3
 80079d4:	f7fb ff44 	bl	8003860 <HAL_RCC_OscConfig>
 80079d8:	1e03      	subs	r3, r0, #0
 80079da:	d001      	beq.n	80079e0 <SystemClock_Config+0x74>
		Error_Handler();
 80079dc:	f000 fae6 	bl	8007fac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80079e0:	003b      	movs	r3, r7
 80079e2:	2207      	movs	r2, #7
 80079e4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80079e6:	003b      	movs	r3, r7
 80079e8:	2200      	movs	r2, #0
 80079ea:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079ec:	003b      	movs	r3, r7
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079f2:	003b      	movs	r3, r7
 80079f4:	2200      	movs	r2, #0
 80079f6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80079f8:	003b      	movs	r3, r7
 80079fa:	2100      	movs	r1, #0
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7fc fa4f 	bl	8003ea0 <HAL_RCC_ClockConfig>
 8007a02:	1e03      	subs	r3, r0, #0
 8007a04:	d001      	beq.n	8007a0a <SystemClock_Config+0x9e>
		Error_Handler();
 8007a06:	f000 fad1 	bl	8007fac <Error_Handler>
	}
}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b013      	add	sp, #76	; 0x4c
 8007a10:	bd90      	pop	{r4, r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	40021000 	.word	0x40021000

08007a18 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8007a1e:	1d3b      	adds	r3, r7, #4
 8007a20:	0018      	movs	r0, r3
 8007a22:	230c      	movs	r3, #12
 8007a24:	001a      	movs	r2, r3
 8007a26:	2100      	movs	r1, #0
 8007a28:	f001 fe01 	bl	800962e <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8007a2c:	4b2b      	ldr	r3, [pc, #172]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <MX_ADC1_Init+0xc8>)
 8007a30:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007a32:	4b2a      	ldr	r3, [pc, #168]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a34:	2280      	movs	r2, #128	; 0x80
 8007a36:	05d2      	lsls	r2, r2, #23
 8007a38:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007a3a:	4b28      	ldr	r3, [pc, #160]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007a40:	4b26      	ldr	r3, [pc, #152]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007a46:	4b25      	ldr	r3, [pc, #148]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007a4c:	4b23      	ldr	r3, [pc, #140]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a4e:	2204      	movs	r2, #4
 8007a50:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8007a52:	4b22      	ldr	r3, [pc, #136]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8007a58:	4b20      	ldr	r3, [pc, #128]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8007a64:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007a6a:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a70:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8007a76:	4b19      	ldr	r3, [pc, #100]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a78:	222c      	movs	r2, #44	; 0x2c
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007a7e:	4b17      	ldr	r3, [pc, #92]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8007a84:	4b15      	ldr	r3, [pc, #84]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8007a8a:	4b14      	ldr	r3, [pc, #80]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8007a90:	4b12      	ldr	r3, [pc, #72]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a92:	223c      	movs	r2, #60	; 0x3c
 8007a94:	2100      	movs	r1, #0
 8007a96:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8007a98:	4b10      	ldr	r3, [pc, #64]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7fa fec1 	bl	8002828 <HAL_ADC_Init>
 8007aa6:	1e03      	subs	r3, r0, #0
 8007aa8:	d001      	beq.n	8007aae <MX_ADC1_Init+0x96>
		Error_Handler();
 8007aaa:	f000 fa7f 	bl	8007fac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8007aae:	1d3b      	adds	r3, r7, #4
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007ab4:	1d3b      	adds	r3, r7, #4
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	2200      	movs	r2, #0
 8007abe:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8007ac0:	1d3a      	adds	r2, r7, #4
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <MX_ADC1_Init+0xc4>)
 8007ac4:	0011      	movs	r1, r2
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f7fb f88c 	bl	8002be4 <HAL_ADC_ConfigChannel>
 8007acc:	1e03      	subs	r3, r0, #0
 8007ace:	d001      	beq.n	8007ad4 <MX_ADC1_Init+0xbc>
		Error_Handler();
 8007ad0:	f000 fa6c 	bl	8007fac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8007ad4:	46c0      	nop			; (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b004      	add	sp, #16
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000248 	.word	0x20000248
 8007ae0:	40012400 	.word	0x40012400

08007ae4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <MX_I2C1_Init+0x78>)
 8007aec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 8007aee:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007af0:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <MX_I2C1_Init+0x7c>)
 8007af2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8007af4:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007afa:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b00:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b0c:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b12:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b20:	0018      	movs	r0, r3
 8007b22:	f7fb fcdd 	bl	80034e0 <HAL_I2C_Init>
 8007b26:	1e03      	subs	r3, r0, #0
 8007b28:	d001      	beq.n	8007b2e <MX_I2C1_Init+0x4a>
		Error_Handler();
 8007b2a:	f000 fa3f 	bl	8007fac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b30:	2100      	movs	r1, #0
 8007b32:	0018      	movs	r0, r3
 8007b34:	f7fb fd6a 	bl	800360c <HAL_I2CEx_ConfigAnalogFilter>
 8007b38:	1e03      	subs	r3, r0, #0
 8007b3a:	d001      	beq.n	8007b40 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8007b3c:	f000 fa36 	bl	8007fac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <MX_I2C1_Init+0x74>)
 8007b42:	2100      	movs	r1, #0
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7fb fdad 	bl	80036a4 <HAL_I2CEx_ConfigDigitalFilter>
 8007b4a:	1e03      	subs	r3, r0, #0
 8007b4c:	d001      	beq.n	8007b52 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8007b4e:	f000 fa2d 	bl	8007fac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000160 	.word	0x20000160
 8007b5c:	40005400 	.word	0x40005400
 8007b60:	00303d5b 	.word	0x00303d5b

08007b64 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	2314      	movs	r3, #20
 8007b70:	001a      	movs	r2, r3
 8007b72:	2100      	movs	r1, #0
 8007b74:	f001 fd5b 	bl	800962e <memset>
	RTC_DateTypeDef sDate = { 0 };
 8007b78:	003b      	movs	r3, r7
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8007b7e:	4b2d      	ldr	r3, [pc, #180]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007b80:	4a2d      	ldr	r2, [pc, #180]	; (8007c38 <MX_RTC_Init+0xd4>)
 8007b82:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007b8c:	227f      	movs	r2, #127	; 0x7f
 8007b8e:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007b92:	22ff      	movs	r2, #255	; 0xff
 8007b94:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007b9c:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007ba2:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007ba8:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007baa:	2280      	movs	r2, #128	; 0x80
 8007bac:	05d2      	lsls	r2, r2, #23
 8007bae:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8007bb0:	4b20      	ldr	r3, [pc, #128]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f7fc fcd3 	bl	8004564 <HAL_RTC_Init>
 8007bbe:	1e03      	subs	r3, r0, #0
 8007bc0:	d001      	beq.n	8007bc6 <MX_RTC_Init+0x62>
		Error_Handler();
 8007bc2:	f000 f9f3 	bl	8007fac <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8007bcc:	1d3b      	adds	r3, r7, #4
 8007bce:	2200      	movs	r2, #0
 8007bd0:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 8007bd2:	1d3b      	adds	r3, r7, #4
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0;
 8007bd8:	1d3b      	adds	r3, r7, #4
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007bde:	1d3b      	adds	r3, r7, #4
 8007be0:	2200      	movs	r2, #0
 8007be2:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	2200      	movs	r2, #0
 8007be8:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007bea:	1d39      	adds	r1, r7, #4
 8007bec:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f7fc fd4d 	bl	8004690 <HAL_RTC_SetTime>
 8007bf6:	1e03      	subs	r3, r0, #0
 8007bf8:	d001      	beq.n	8007bfe <MX_RTC_Init+0x9a>
		Error_Handler();
 8007bfa:	f000 f9d7 	bl	8007fac <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007bfe:	003b      	movs	r3, r7
 8007c00:	2201      	movs	r2, #1
 8007c02:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_APRIL;
 8007c04:	003b      	movs	r3, r7
 8007c06:	2204      	movs	r2, #4
 8007c08:	705a      	strb	r2, [r3, #1]
	sDate.Date = 1;
 8007c0a:	003b      	movs	r3, r7
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	709a      	strb	r2, [r3, #2]
	sDate.Year = 20;
 8007c10:	003b      	movs	r3, r7
 8007c12:	2214      	movs	r2, #20
 8007c14:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007c16:	0039      	movs	r1, r7
 8007c18:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <MX_RTC_Init+0xd0>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f7fc fe3b 	bl	8004898 <HAL_RTC_SetDate>
 8007c22:	1e03      	subs	r3, r0, #0
 8007c24:	d001      	beq.n	8007c2a <MX_RTC_Init+0xc6>
		Error_Handler();
 8007c26:	f000 f9c1 	bl	8007fac <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b006      	add	sp, #24
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	200002ac 	.word	0x200002ac
 8007c38:	40002800 	.word	0x40002800

08007c3c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007c42:	2310      	movs	r3, #16
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	0018      	movs	r0, r3
 8007c48:	2310      	movs	r3, #16
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f001 fcee 	bl	800962e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007c52:	1d3b      	adds	r3, r7, #4
 8007c54:	0018      	movs	r0, r3
 8007c56:	230c      	movs	r3, #12
 8007c58:	001a      	movs	r2, r3
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	f001 fce7 	bl	800962e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8007c60:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c62:	4a22      	ldr	r2, [pc, #136]	; (8007cec <MX_TIM1_Init+0xb0>)
 8007c64:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4;
 8007c66:	4b20      	ldr	r3, [pc, #128]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c68:	2204      	movs	r2, #4
 8007c6a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1999;
 8007c72:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c74:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <MX_TIM1_Init+0xb4>)
 8007c76:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c78:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c84:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8007c8a:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	f7fc ffd6 	bl	8004c3e <HAL_TIM_Base_Init>
 8007c92:	1e03      	subs	r3, r0, #0
 8007c94:	d001      	beq.n	8007c9a <MX_TIM1_Init+0x5e>
		Error_Handler();
 8007c96:	f000 f989 	bl	8007fac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c9a:	2110      	movs	r1, #16
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	2280      	movs	r2, #128	; 0x80
 8007ca0:	0152      	lsls	r2, r2, #5
 8007ca2:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8007ca4:	187a      	adds	r2, r7, r1
 8007ca6:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007ca8:	0011      	movs	r1, r2
 8007caa:	0018      	movs	r0, r3
 8007cac:	f7fd f9ae 	bl	800500c <HAL_TIM_ConfigClockSource>
 8007cb0:	1e03      	subs	r3, r0, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8007cb4:	f000 f97a 	bl	8007fac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cb8:	1d3b      	adds	r3, r7, #4
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007cbe:	1d3b      	adds	r3, r7, #4
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cc4:	1d3b      	adds	r3, r7, #4
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8007cca:	1d3a      	adds	r2, r7, #4
 8007ccc:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <MX_TIM1_Init+0xac>)
 8007cce:	0011      	movs	r1, r2
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f7fd fba3 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8007cd6:	1e03      	subs	r3, r0, #0
 8007cd8:	d001      	beq.n	8007cde <MX_TIM1_Init+0xa2>
			!= HAL_OK) {
		Error_Handler();
 8007cda:	f000 f967 	bl	8007fac <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b008      	add	sp, #32
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	200002d8 	.word	0x200002d8
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	000007cf 	.word	0x000007cf

08007cf4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007cfa:	2310      	movs	r3, #16
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	0018      	movs	r0, r3
 8007d00:	2310      	movs	r3, #16
 8007d02:	001a      	movs	r2, r3
 8007d04:	2100      	movs	r1, #0
 8007d06:	f001 fc92 	bl	800962e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	230c      	movs	r3, #12
 8007d10:	001a      	movs	r2, r3
 8007d12:	2100      	movs	r1, #0
 8007d14:	f001 fc8b 	bl	800962e <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d1a:	2280      	movs	r2, #128	; 0x80
 8007d1c:	05d2      	lsls	r2, r2, #23
 8007d1e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8879;
 8007d20:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d22:	4a1d      	ldr	r2, [pc, #116]	; (8007d98 <MX_TIM2_Init+0xa4>)
 8007d24:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d26:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8999;
 8007d2c:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d2e:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <MX_TIM2_Init+0xa8>)
 8007d30:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d32:	4b18      	ldr	r3, [pc, #96]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d38:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d40:	0018      	movs	r0, r3
 8007d42:	f7fc ff7c 	bl	8004c3e <HAL_TIM_Base_Init>
 8007d46:	1e03      	subs	r3, r0, #0
 8007d48:	d001      	beq.n	8007d4e <MX_TIM2_Init+0x5a>
		Error_Handler();
 8007d4a:	f000 f92f 	bl	8007fac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d4e:	2110      	movs	r1, #16
 8007d50:	187b      	adds	r3, r7, r1
 8007d52:	2280      	movs	r2, #128	; 0x80
 8007d54:	0152      	lsls	r2, r2, #5
 8007d56:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8007d58:	187a      	adds	r2, r7, r1
 8007d5a:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d5c:	0011      	movs	r1, r2
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f7fd f954 	bl	800500c <HAL_TIM_ConfigClockSource>
 8007d64:	1e03      	subs	r3, r0, #0
 8007d66:	d001      	beq.n	8007d6c <MX_TIM2_Init+0x78>
		Error_Handler();
 8007d68:	f000 f920 	bl	8007fac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d6c:	1d3b      	adds	r3, r7, #4
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d72:	1d3b      	adds	r3, r7, #4
 8007d74:	2200      	movs	r2, #0
 8007d76:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8007d78:	1d3a      	adds	r2, r7, #4
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <MX_TIM2_Init+0xa0>)
 8007d7c:	0011      	movs	r1, r2
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f7fd fb4c 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8007d84:	1e03      	subs	r3, r0, #0
 8007d86:	d001      	beq.n	8007d8c <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8007d88:	f000 f910 	bl	8007fac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8007d8c:	46c0      	nop			; (mov r8, r8)
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	b008      	add	sp, #32
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000324 	.word	0x20000324
 8007d98:	000022af 	.word	0x000022af
 8007d9c:	00002327 	.word	0x00002327

08007da0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8007da4:	4b23      	ldr	r3, [pc, #140]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007da6:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <MX_USART2_UART_Init+0x98>)
 8007da8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8007daa:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dac:	2296      	movs	r2, #150	; 0x96
 8007dae:	0192      	lsls	r2, r2, #6
 8007db0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007db2:	4b20      	ldr	r3, [pc, #128]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8007db8:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dc6:	220c      	movs	r2, #12
 8007dc8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dca:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007dd0:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007dd6:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ddc:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8007de8:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dea:	0018      	movs	r0, r3
 8007dec:	f7fd fb9c 	bl	8005528 <HAL_UART_Init>
 8007df0:	1e03      	subs	r3, r0, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8007df4:	f000 f8da 	bl	8007fac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8007df8:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7fe f8c7 	bl	8005f90 <HAL_UARTEx_SetTxFifoThreshold>
 8007e02:	1e03      	subs	r3, r0, #0
 8007e04:	d001      	beq.n	8007e0a <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8007e06:	f000 f8d1 	bl	8007fac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7fe f8fe 	bl	8006010 <HAL_UARTEx_SetRxFifoThreshold>
 8007e14:	1e03      	subs	r3, r0, #0
 8007e16:	d001      	beq.n	8007e1c <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8007e18:	f000 f8c8 	bl	8007fac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <MX_USART2_UART_Init+0x94>)
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f7fe f87c 	bl	8005f1c <HAL_UARTEx_DisableFifoMode>
 8007e24:	1e03      	subs	r3, r0, #0
 8007e26:	d001      	beq.n	8007e2c <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8007e28:	f000 f8c0 	bl	8007fac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8007e2c:	46c0      	nop			; (mov r8, r8)
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	20000370 	.word	0x20000370
 8007e38:	40004400 	.word	0x40004400

08007e3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8007e3c:	b590      	push	{r4, r7, lr}
 8007e3e:	b089      	sub	sp, #36	; 0x24
 8007e40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007e42:	240c      	movs	r4, #12
 8007e44:	193b      	adds	r3, r7, r4
 8007e46:	0018      	movs	r0, r3
 8007e48:	2314      	movs	r3, #20
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f001 fbee 	bl	800962e <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007e52:	4b52      	ldr	r3, [pc, #328]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e56:	4b51      	ldr	r3, [pc, #324]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e58:	2102      	movs	r1, #2
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e5e:	4b4f      	ldr	r3, [pc, #316]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e62:	2202      	movs	r2, #2
 8007e64:	4013      	ands	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
 8007e68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007e6a:	4b4c      	ldr	r3, [pc, #304]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e6e:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e70:	2104      	movs	r1, #4
 8007e72:	430a      	orrs	r2, r1
 8007e74:	635a      	str	r2, [r3, #52]	; 0x34
 8007e76:	4b49      	ldr	r3, [pc, #292]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	607b      	str	r3, [r7, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007e82:	4b46      	ldr	r3, [pc, #280]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e86:	4b45      	ldr	r3, [pc, #276]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e88:	2101      	movs	r1, #1
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e8e:	4b43      	ldr	r3, [pc, #268]	; (8007f9c <MX_GPIO_Init+0x160>)
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	2201      	movs	r2, #1
 8007e94:	4013      	ands	r3, r2
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8007e9a:	4941      	ldr	r1, [pc, #260]	; (8007fa0 <MX_GPIO_Init+0x164>)
 8007e9c:	23a0      	movs	r3, #160	; 0xa0
 8007e9e:	05db      	lsls	r3, r3, #23
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7fb fad5 	bl	8003452 <HAL_GPIO_WritePin>
			ENCODER_ACTIVE_Pin | LED1_Pin | LED2_Pin | DISP_B_Pin | DISP_3_Pin
					| DISP_D_Pin | DISP_DP_Pin | DISP_A_Pin | DISP_F_Pin
					| DISP_1_Pin | DISP_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DISP_G_Pin | DISP_C_Pin | DISP_E_Pin,
 8007ea8:	4b3e      	ldr	r3, [pc, #248]	; (8007fa4 <MX_GPIO_Init+0x168>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2107      	movs	r1, #7
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f7fb facf 	bl	8003452 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_0_GPIO_Port, DISP_0_Pin, GPIO_PIN_RESET);
 8007eb4:	4b3c      	ldr	r3, [pc, #240]	; (8007fa8 <MX_GPIO_Init+0x16c>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2140      	movs	r1, #64	; 0x40
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f7fb fac9 	bl	8003452 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ENCODER_ACTIVE_Pin LED1_Pin LED2_Pin DISP_B_Pin
	 DISP_3_Pin DISP_D_Pin DISP_DP_Pin DISP_A_Pin
	 DISP_F_Pin DISP_1_Pin DISP_2_Pin */
	GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin | LED1_Pin | LED2_Pin | DISP_B_Pin
 8007ec0:	193b      	adds	r3, r7, r4
 8007ec2:	4a37      	ldr	r2, [pc, #220]	; (8007fa0 <MX_GPIO_Init+0x164>)
 8007ec4:	601a      	str	r2, [r3, #0]
			| DISP_3_Pin | DISP_D_Pin | DISP_DP_Pin | DISP_A_Pin | DISP_F_Pin
			| DISP_1_Pin | DISP_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ec6:	193b      	adds	r3, r7, r4
 8007ec8:	2201      	movs	r2, #1
 8007eca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ecc:	193b      	adds	r3, r7, r4
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ed2:	193b      	adds	r3, r7, r4
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed8:	193a      	adds	r2, r7, r4
 8007eda:	23a0      	movs	r3, #160	; 0xa0
 8007edc:	05db      	lsls	r3, r3, #23
 8007ede:	0011      	movs	r1, r2
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f7fb f935 	bl	8003150 <HAL_GPIO_Init>

	/*Configure GPIO pins : DISP_G_Pin DISP_C_Pin DISP_E_Pin */
	GPIO_InitStruct.Pin = DISP_G_Pin | DISP_C_Pin | DISP_E_Pin;
 8007ee6:	193b      	adds	r3, r7, r4
 8007ee8:	2207      	movs	r2, #7
 8007eea:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007eec:	193b      	adds	r3, r7, r4
 8007eee:	2201      	movs	r2, #1
 8007ef0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef2:	193b      	adds	r3, r7, r4
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ef8:	193b      	adds	r3, r7, r4
 8007efa:	2200      	movs	r2, #0
 8007efc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007efe:	193b      	adds	r3, r7, r4
 8007f00:	4a28      	ldr	r2, [pc, #160]	; (8007fa4 <MX_GPIO_Init+0x168>)
 8007f02:	0019      	movs	r1, r3
 8007f04:	0010      	movs	r0, r2
 8007f06:	f7fb f923 	bl	8003150 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_0_Pin */
	GPIO_InitStruct.Pin = DISP_0_Pin;
 8007f0a:	193b      	adds	r3, r7, r4
 8007f0c:	2240      	movs	r2, #64	; 0x40
 8007f0e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f10:	193b      	adds	r3, r7, r4
 8007f12:	2201      	movs	r2, #1
 8007f14:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f16:	193b      	adds	r3, r7, r4
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f1c:	193b      	adds	r3, r7, r4
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_0_GPIO_Port, &GPIO_InitStruct);
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	4a20      	ldr	r2, [pc, #128]	; (8007fa8 <MX_GPIO_Init+0x16c>)
 8007f26:	0019      	movs	r1, r3
 8007f28:	0010      	movs	r0, r2
 8007f2a:	f7fb f911 	bl	8003150 <HAL_GPIO_Init>

	/*Configure GPIO pins : MODE_Pin BUTTON2_Pin BUTTON1_Pin */
	GPIO_InitStruct.Pin = MODE_Pin | BUTTON2_Pin | BUTTON1_Pin;
 8007f2e:	0021      	movs	r1, r4
 8007f30:	187b      	adds	r3, r7, r1
 8007f32:	2238      	movs	r2, #56	; 0x38
 8007f34:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	2284      	movs	r2, #132	; 0x84
 8007f3a:	0392      	lsls	r2, r2, #14
 8007f3c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f3e:	187b      	adds	r3, r7, r1
 8007f40:	2201      	movs	r2, #1
 8007f42:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f44:	000c      	movs	r4, r1
 8007f46:	187b      	adds	r3, r7, r1
 8007f48:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <MX_GPIO_Init+0x168>)
 8007f4a:	0019      	movs	r1, r3
 8007f4c:	0010      	movs	r0, r2
 8007f4e:	f7fb f8ff 	bl	8003150 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENC2_Pin ENC1_Pin */
	GPIO_InitStruct.Pin = ENC2_Pin | ENC1_Pin;
 8007f52:	0021      	movs	r1, r4
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	22c0      	movs	r2, #192	; 0xc0
 8007f58:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007f5a:	187b      	adds	r3, r7, r1
 8007f5c:	22c4      	movs	r2, #196	; 0xc4
 8007f5e:	0392      	lsls	r2, r2, #14
 8007f60:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	2200      	movs	r2, #0
 8007f66:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	4a0e      	ldr	r2, [pc, #56]	; (8007fa4 <MX_GPIO_Init+0x168>)
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	0010      	movs	r0, r2
 8007f70:	f7fb f8ee 	bl	8003150 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	2006      	movs	r0, #6
 8007f7a:	f7fb f8b7 	bl	80030ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8007f7e:	2006      	movs	r0, #6
 8007f80:	f7fb f8c9 	bl	8003116 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007f84:	2200      	movs	r2, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	2007      	movs	r0, #7
 8007f8a:	f7fb f8af 	bl	80030ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007f8e:	2007      	movs	r0, #7
 8007f90:	f7fb f8c1 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b009      	add	sp, #36	; 0x24
 8007f9a:	bd90      	pop	{r4, r7, pc}
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	00009ff2 	.word	0x00009ff2
 8007fa4:	50000400 	.word	0x50000400
 8007fa8:	50000800 	.word	0x50000800

08007fac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007fb0:	b672      	cpsid	i
}
 8007fb2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007fb4:	e7fe      	b.n	8007fb4 <Error_Handler+0x8>

08007fb6 <menuReset>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuReset(MenuTypeDef *menu) {
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	2384      	movs	r3, #132	; 0x84
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	18d3      	adds	r3, r2, r3
 8007fc8:	220b      	movs	r2, #11
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f001 fb26 	bl	800961c <memcpy>
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b002      	add	sp, #8
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2, uint8_t value3) {
 8007fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	0008      	movs	r0, r1
 8007fe2:	0011      	movs	r1, r2
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	230b      	movs	r3, #11
 8007fe8:	18fb      	adds	r3, r7, r3
 8007fea:	1c02      	adds	r2, r0, #0
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	230a      	movs	r3, #10
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	1c0a      	adds	r2, r1, #0
 8007ff4:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 8007ff6:	2317      	movs	r3, #23
 8007ff8:	18fb      	adds	r3, r7, r3
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e01f      	b.n	8008040 <menuItemChangeValue+0x68>

		menu->items[entry][level].value[i] = value[i];
 8008000:	2617      	movs	r6, #23
 8008002:	19bb      	adds	r3, r7, r6
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	18d3      	adds	r3, r2, r3
 800800a:	220b      	movs	r2, #11
 800800c:	18ba      	adds	r2, r7, r2
 800800e:	7811      	ldrb	r1, [r2, #0]
 8008010:	220a      	movs	r2, #10
 8008012:	18ba      	adds	r2, r7, r2
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	19b8      	adds	r0, r7, r6
 8008018:	7800      	ldrb	r0, [r0, #0]
 800801a:	781d      	ldrb	r5, [r3, #0]
 800801c:	68fc      	ldr	r4, [r7, #12]
 800801e:	0013      	movs	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	189b      	adds	r3, r3, r2
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	189b      	adds	r3, r3, r2
 8008028:	000a      	movs	r2, r1
 800802a:	0152      	lsls	r2, r2, #5
 800802c:	1852      	adds	r2, r2, r1
 800802e:	189b      	adds	r3, r3, r2
 8008030:	18e3      	adds	r3, r4, r3
 8008032:	1c2a      	adds	r2, r5, #0
 8008034:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 8008036:	19bb      	adds	r3, r7, r6
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	19bb      	adds	r3, r7, r6
 800803c:	3201      	adds	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	2317      	movs	r3, #23
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d9da      	bls.n	8008000 <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 800804a:	240b      	movs	r4, #11
 800804c:	193b      	adds	r3, r7, r4
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	250a      	movs	r5, #10
 8008052:	197b      	adds	r3, r7, r5
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	0013      	movs	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	189b      	adds	r3, r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	189b      	adds	r3, r3, r2
 8008062:	000a      	movs	r2, r1
 8008064:	0152      	lsls	r2, r2, #5
 8008066:	1852      	adds	r2, r2, r1
 8008068:	189b      	adds	r3, r3, r2
 800806a:	18c3      	adds	r3, r0, r3
 800806c:	1d1a      	adds	r2, r3, #4
 800806e:	2328      	movs	r3, #40	; 0x28
 8008070:	2108      	movs	r1, #8
 8008072:	468c      	mov	ip, r1
 8008074:	44bc      	add	ip, r7
 8008076:	4463      	add	r3, ip
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].value3 = value3;
 800807c:	193b      	adds	r3, r7, r4
 800807e:	7819      	ldrb	r1, [r3, #0]
 8008080:	197b      	adds	r3, r7, r5
 8008082:	781a      	ldrb	r2, [r3, #0]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	0013      	movs	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	189b      	adds	r3, r3, r2
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	189b      	adds	r3, r3, r2
 8008090:	000a      	movs	r2, r1
 8008092:	0152      	lsls	r2, r2, #5
 8008094:	1852      	adds	r2, r2, r1
 8008096:	189b      	adds	r3, r3, r2
 8008098:	18c3      	adds	r3, r0, r3
 800809a:	3305      	adds	r3, #5
 800809c:	222c      	movs	r2, #44	; 0x2c
 800809e:	2108      	movs	r1, #8
 80080a0:	468c      	mov	ip, r1
 80080a2:	44bc      	add	ip, r7
 80080a4:	4462      	add	r2, ip
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	701a      	strb	r2, [r3, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	2387      	movs	r3, #135	; 0x87
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	5cd3      	ldrb	r3, [r2, r3]
 80080b2:	193a      	adds	r2, r7, r4
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d15a      	bne.n	8008170 <menuItemChangeValue+0x198>
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	2310      	movs	r3, #16
 80080be:	33ff      	adds	r3, #255	; 0xff
 80080c0:	5cd3      	ldrb	r3, [r2, r3]
 80080c2:	197a      	adds	r2, r7, r5
 80080c4:	7812      	ldrb	r2, [r2, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d152      	bne.n	8008170 <menuItemChangeValue+0x198>
		memcpy(menu->current.value,
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3309      	adds	r3, #9
 80080ce:	33ff      	adds	r3, #255	; 0xff
 80080d0:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	2387      	movs	r3, #135	; 0x87
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	5cd3      	ldrb	r3, [r2, r3]
 80080da:	0019      	movs	r1, r3
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	2310      	movs	r3, #16
 80080e0:	33ff      	adds	r3, #255	; 0xff
 80080e2:	5cd3      	ldrb	r3, [r2, r3]
 80080e4:	001a      	movs	r2, r3
 80080e6:	0013      	movs	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	189b      	adds	r3, r3, r2
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	189b      	adds	r3, r3, r2
 80080f0:	000a      	movs	r2, r1
 80080f2:	0152      	lsls	r2, r2, #5
 80080f4:	1852      	adds	r2, r2, r1
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 80080fc:	2204      	movs	r2, #4
 80080fe:	0019      	movs	r1, r3
 8008100:	f001 fa8c 	bl	800961c <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	2387      	movs	r3, #135	; 0x87
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	5cd3      	ldrb	r3, [r2, r3]
 800810c:	0018      	movs	r0, r3
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	2310      	movs	r3, #16
 8008112:	33ff      	adds	r3, #255	; 0xff
 8008114:	5cd3      	ldrb	r3, [r2, r3]
 8008116:	001a      	movs	r2, r3
 8008118:	68f9      	ldr	r1, [r7, #12]
 800811a:	0013      	movs	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	189b      	adds	r3, r3, r2
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	189b      	adds	r3, r3, r2
 8008124:	0002      	movs	r2, r0
 8008126:	0152      	lsls	r2, r2, #5
 8008128:	1812      	adds	r2, r2, r0
 800812a:	189b      	adds	r3, r3, r2
 800812c:	18cb      	adds	r3, r1, r3
 800812e:	3304      	adds	r3, #4
 8008130:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	2386      	movs	r3, #134	; 0x86
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	2387      	movs	r3, #135	; 0x87
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	5cd3      	ldrb	r3, [r2, r3]
 8008142:	0018      	movs	r0, r3
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	2310      	movs	r3, #16
 8008148:	33ff      	adds	r3, #255	; 0xff
 800814a:	5cd3      	ldrb	r3, [r2, r3]
 800814c:	001a      	movs	r2, r3
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	0013      	movs	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	189b      	adds	r3, r3, r2
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	189b      	adds	r3, r3, r2
 800815a:	0002      	movs	r2, r0
 800815c:	0152      	lsls	r2, r2, #5
 800815e:	1812      	adds	r2, r2, r0
 8008160:	189b      	adds	r3, r3, r2
 8008162:	18cb      	adds	r3, r1, r3
 8008164:	3305      	adds	r3, #5
 8008166:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	230e      	movs	r3, #14
 800816c:	33ff      	adds	r3, #255	; 0xff
 800816e:	54d1      	strb	r1, [r2, r3]
	}

}
 8008170:	46c0      	nop			; (mov r8, r8)
 8008172:	46bd      	mov	sp, r7
 8008174:	b007      	add	sp, #28
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008178 <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	000c      	movs	r4, r1
 8008182:	0010      	movs	r0, r2
 8008184:	0019      	movs	r1, r3
 8008186:	1cfb      	adds	r3, r7, #3
 8008188:	1c22      	adds	r2, r4, #0
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	1cbb      	adds	r3, r7, #2
 800818e:	1c02      	adds	r2, r0, #0
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	1c7b      	adds	r3, r7, #1
 8008194:	1c0a      	adds	r2, r1, #0
 8008196:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 8008198:	1cfb      	adds	r3, r7, #3
 800819a:	7819      	ldrb	r1, [r3, #0]
 800819c:	1cbb      	adds	r3, r7, #2
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	0013      	movs	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	189b      	adds	r3, r3, r2
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	000a      	movs	r2, r1
 80081ae:	0152      	lsls	r2, r2, #5
 80081b0:	1852      	adds	r2, r2, r1
 80081b2:	189b      	adds	r3, r3, r2
 80081b4:	18c3      	adds	r3, r0, r3
 80081b6:	3306      	adds	r3, #6
 80081b8:	1cfa      	adds	r2, r7, #3
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 80081be:	1cfb      	adds	r3, r7, #3
 80081c0:	7819      	ldrb	r1, [r3, #0]
 80081c2:	1cbb      	adds	r3, r7, #2
 80081c4:	781a      	ldrb	r2, [r3, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	0013      	movs	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	189b      	adds	r3, r3, r2
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	189b      	adds	r3, r3, r2
 80081d2:	000a      	movs	r2, r1
 80081d4:	0152      	lsls	r2, r2, #5
 80081d6:	1852      	adds	r2, r2, r1
 80081d8:	189b      	adds	r3, r3, r2
 80081da:	18c3      	adds	r3, r0, r3
 80081dc:	3307      	adds	r3, #7
 80081de:	1cba      	adds	r2, r7, #2
 80081e0:	7812      	ldrb	r2, [r2, #0]
 80081e2:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 80081e4:	1cfb      	adds	r3, r7, #3
 80081e6:	7819      	ldrb	r1, [r3, #0]
 80081e8:	1cbb      	adds	r3, r7, #2
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	0013      	movs	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	189b      	adds	r3, r3, r2
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	189b      	adds	r3, r3, r2
 80081f8:	000a      	movs	r2, r1
 80081fa:	0152      	lsls	r2, r2, #5
 80081fc:	1852      	adds	r2, r2, r1
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	18c3      	adds	r3, r0, r3
 8008202:	3308      	adds	r3, #8
 8008204:	1c7a      	adds	r2, r7, #1
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 800820a:	1cfb      	adds	r3, r7, #3
 800820c:	7819      	ldrb	r1, [r3, #0]
 800820e:	1cbb      	adds	r3, r7, #2
 8008210:	781a      	ldrb	r2, [r3, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	0013      	movs	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	189b      	adds	r3, r3, r2
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	189b      	adds	r3, r3, r2
 800821e:	000a      	movs	r2, r1
 8008220:	0152      	lsls	r2, r2, #5
 8008222:	1852      	adds	r2, r2, r1
 8008224:	189b      	adds	r3, r3, r2
 8008226:	18c3      	adds	r3, r0, r3
 8008228:	3309      	adds	r3, #9
 800822a:	001a      	movs	r2, r3
 800822c:	2318      	movs	r3, #24
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 8008234:	1cfb      	adds	r3, r7, #3
 8008236:	7819      	ldrb	r1, [r3, #0]
 8008238:	1cbb      	adds	r3, r7, #2
 800823a:	781a      	ldrb	r2, [r3, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	0013      	movs	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	189b      	adds	r3, r3, r2
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	189b      	adds	r3, r3, r2
 8008248:	000a      	movs	r2, r1
 800824a:	0152      	lsls	r2, r2, #5
 800824c:	1852      	adds	r2, r2, r1
 800824e:	189b      	adds	r3, r3, r2
 8008250:	18c3      	adds	r3, r0, r3
 8008252:	330a      	adds	r3, #10
 8008254:	221c      	movs	r2, #28
 8008256:	18ba      	adds	r2, r7, r2
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	701a      	strb	r2, [r3, #0]

}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	b003      	add	sp, #12
 8008262:	bd90      	pop	{r4, r7, pc}

08008264 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	000a      	movs	r2, r1
 800826e:	1cfb      	adds	r3, r7, #3
 8008270:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 8008272:	1cfb      	adds	r3, r7, #3
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d000      	beq.n	800827c <menuSwitch+0x18>
 800827a:	e0e2      	b.n	8008442 <menuSwitch+0x1de>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	2310      	movs	r3, #16
 8008280:	33ff      	adds	r3, #255	; 0xff
 8008282:	5cd3      	ldrb	r3, [r2, r3]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <menuSwitch+0x30>
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	2387      	movs	r3, #135	; 0x87
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	5cd3      	ldrb	r3, [r2, r3]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d124      	bne.n	80082de <menuSwitch+0x7a>
				|| (menu->current.level != 0
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	2310      	movs	r3, #16
 8008298:	33ff      	adds	r3, #255	; 0xff
 800829a:	5cd3      	ldrb	r3, [r2, r3]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d100      	bne.n	80082a2 <menuSwitch+0x3e>
 80082a0:	e0cd      	b.n	800843e <menuSwitch+0x1da>
						&& menu->current.entry
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	2387      	movs	r3, #135	; 0x87
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	5cd1      	ldrb	r1, [r2, r3]
								> menu->items[menu->current.parent][menu->current.level
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	2388      	movs	r3, #136	; 0x88
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	5cd3      	ldrb	r3, [r2, r3]
 80082b2:	001c      	movs	r4, r3
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	2310      	movs	r3, #16
 80082b8:	33ff      	adds	r3, #255	; 0xff
 80082ba:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childFirst)) {
 80082bc:	1e5a      	subs	r2, r3, #1
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	0013      	movs	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	189b      	adds	r3, r3, r2
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	189b      	adds	r3, r3, r2
 80082ca:	0022      	movs	r2, r4
 80082cc:	0152      	lsls	r2, r2, #5
 80082ce:	1912      	adds	r2, r2, r4
 80082d0:	189b      	adds	r3, r3, r2
 80082d2:	18c3      	adds	r3, r0, r3
 80082d4:	3309      	adds	r3, #9
 80082d6:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 80082d8:	4299      	cmp	r1, r3
 80082da:	d800      	bhi.n	80082de <menuSwitch+0x7a>
 80082dc:	e0af      	b.n	800843e <menuSwitch+0x1da>

			menu->current.entry--;
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	2387      	movs	r3, #135	; 0x87
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	5cd3      	ldrb	r3, [r2, r3]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b2d9      	uxtb	r1, r3
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	2387      	movs	r3, #135	; 0x87
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	54d1      	strb	r1, [r2, r3]
			memcpy(menu->current.value,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3309      	adds	r3, #9
 80082f6:	33ff      	adds	r3, #255	; 0xff
 80082f8:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	2387      	movs	r3, #135	; 0x87
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	5cd3      	ldrb	r3, [r2, r3]
 8008302:	0019      	movs	r1, r3
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	2310      	movs	r3, #16
 8008308:	33ff      	adds	r3, #255	; 0xff
 800830a:	5cd3      	ldrb	r3, [r2, r3]
 800830c:	001a      	movs	r2, r3
 800830e:	0013      	movs	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	189b      	adds	r3, r3, r2
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	189b      	adds	r3, r3, r2
 8008318:	000a      	movs	r2, r1
 800831a:	0152      	lsls	r2, r2, #5
 800831c:	1852      	adds	r2, r2, r1
 800831e:	189b      	adds	r3, r3, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 8008324:	2204      	movs	r2, #4
 8008326:	0019      	movs	r1, r3
 8008328:	f001 f978 	bl	800961c <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	2387      	movs	r3, #135	; 0x87
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	5cd3      	ldrb	r3, [r2, r3]
 8008334:	0018      	movs	r0, r3
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	2310      	movs	r3, #16
 800833a:	33ff      	adds	r3, #255	; 0xff
 800833c:	5cd3      	ldrb	r3, [r2, r3]
 800833e:	001a      	movs	r2, r3
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	0013      	movs	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	189b      	adds	r3, r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	189b      	adds	r3, r3, r2
 800834c:	0002      	movs	r2, r0
 800834e:	0152      	lsls	r2, r2, #5
 8008350:	1812      	adds	r2, r2, r0
 8008352:	189b      	adds	r3, r3, r2
 8008354:	18cb      	adds	r3, r1, r3
 8008356:	3304      	adds	r3, #4
 8008358:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	2386      	movs	r3, #134	; 0x86
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	2387      	movs	r3, #135	; 0x87
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	5cd3      	ldrb	r3, [r2, r3]
 800836a:	0018      	movs	r0, r3
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	2310      	movs	r3, #16
 8008370:	33ff      	adds	r3, #255	; 0xff
 8008372:	5cd3      	ldrb	r3, [r2, r3]
 8008374:	001a      	movs	r2, r3
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	0013      	movs	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	189b      	adds	r3, r3, r2
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	189b      	adds	r3, r3, r2
 8008382:	0002      	movs	r2, r0
 8008384:	0152      	lsls	r2, r2, #5
 8008386:	1812      	adds	r2, r2, r0
 8008388:	189b      	adds	r3, r3, r2
 800838a:	18cb      	adds	r3, r1, r3
 800838c:	3305      	adds	r3, #5
 800838e:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	230e      	movs	r3, #14
 8008394:	33ff      	adds	r3, #255	; 0xff
 8008396:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	2387      	movs	r3, #135	; 0x87
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	5cd3      	ldrb	r3, [r2, r3]
 80083a0:	0018      	movs	r0, r3
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	2310      	movs	r3, #16
 80083a6:	33ff      	adds	r3, #255	; 0xff
 80083a8:	5cd3      	ldrb	r3, [r2, r3]
 80083aa:	001a      	movs	r2, r3
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	0013      	movs	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	0002      	movs	r2, r0
 80083ba:	0152      	lsls	r2, r2, #5
 80083bc:	1812      	adds	r2, r2, r0
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	18cb      	adds	r3, r1, r3
 80083c2:	3308      	adds	r3, #8
 80083c4:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	2388      	movs	r3, #136	; 0x88
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	2387      	movs	r3, #135	; 0x87
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	5cd3      	ldrb	r3, [r2, r3]
 80083d6:	0018      	movs	r0, r3
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	2310      	movs	r3, #16
 80083dc:	33ff      	adds	r3, #255	; 0xff
 80083de:	5cd3      	ldrb	r3, [r2, r3]
 80083e0:	001a      	movs	r2, r3
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	0013      	movs	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	189b      	adds	r3, r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	189b      	adds	r3, r3, r2
 80083ee:	0002      	movs	r2, r0
 80083f0:	0152      	lsls	r2, r2, #5
 80083f2:	1812      	adds	r2, r2, r0
 80083f4:	189b      	adds	r3, r3, r2
 80083f6:	18cb      	adds	r3, r1, r3
 80083f8:	3309      	adds	r3, #9
 80083fa:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	2312      	movs	r3, #18
 8008400:	33ff      	adds	r3, #255	; 0xff
 8008402:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	2387      	movs	r3, #135	; 0x87
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	5cd3      	ldrb	r3, [r2, r3]
 800840c:	0018      	movs	r0, r3
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	2310      	movs	r3, #16
 8008412:	33ff      	adds	r3, #255	; 0xff
 8008414:	5cd3      	ldrb	r3, [r2, r3]
 8008416:	001a      	movs	r2, r3
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	0013      	movs	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	189b      	adds	r3, r3, r2
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	189b      	adds	r3, r3, r2
 8008424:	0002      	movs	r2, r0
 8008426:	0152      	lsls	r2, r2, #5
 8008428:	1812      	adds	r2, r2, r0
 800842a:	189b      	adds	r3, r3, r2
 800842c:	18cb      	adds	r3, r1, r3
 800842e:	330a      	adds	r3, #10
 8008430:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	2389      	movs	r3, #137	; 0x89
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800843a:	2301      	movs	r3, #1
 800843c:	e25f      	b.n	80088fe <menuSwitch+0x69a>
		} else {
			return MENU_ERROR;
 800843e:	2300      	movs	r3, #0
 8008440:	e25d      	b.n	80088fe <menuSwitch+0x69a>
		}

	} else if (direction == MENU_DOWN) {
 8008442:	1cfb      	adds	r3, r7, #3
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d000      	beq.n	800844c <menuSwitch+0x1e8>
 800844a:	e0e2      	b.n	8008612 <menuSwitch+0x3ae>

		if ((menu->current.level == 0
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	2310      	movs	r3, #16
 8008450:	33ff      	adds	r3, #255	; 0xff
 8008452:	5cd3      	ldrb	r3, [r2, r3]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <menuSwitch+0x200>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	2387      	movs	r3, #135	; 0x87
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	5cd3      	ldrb	r3, [r2, r3]
 8008460:	2b06      	cmp	r3, #6
 8008462:	d924      	bls.n	80084ae <menuSwitch+0x24a>
				|| (menu->current.level != 0
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	2310      	movs	r3, #16
 8008468:	33ff      	adds	r3, #255	; 0xff
 800846a:	5cd3      	ldrb	r3, [r2, r3]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d100      	bne.n	8008472 <menuSwitch+0x20e>
 8008470:	e0cd      	b.n	800860e <menuSwitch+0x3aa>
						&& menu->current.entry
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	2387      	movs	r3, #135	; 0x87
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	5cd1      	ldrb	r1, [r2, r3]
								< menu->items[menu->current.parent][menu->current.level
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	2388      	movs	r3, #136	; 0x88
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	5cd3      	ldrb	r3, [r2, r3]
 8008482:	001c      	movs	r4, r3
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	2310      	movs	r3, #16
 8008488:	33ff      	adds	r3, #255	; 0xff
 800848a:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childLast)) {
 800848c:	1e5a      	subs	r2, r3, #1
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	0013      	movs	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	189b      	adds	r3, r3, r2
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	189b      	adds	r3, r3, r2
 800849a:	0022      	movs	r2, r4
 800849c:	0152      	lsls	r2, r2, #5
 800849e:	1912      	adds	r2, r2, r4
 80084a0:	189b      	adds	r3, r3, r2
 80084a2:	18c3      	adds	r3, r0, r3
 80084a4:	330a      	adds	r3, #10
 80084a6:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 80084a8:	4299      	cmp	r1, r3
 80084aa:	d300      	bcc.n	80084ae <menuSwitch+0x24a>
 80084ac:	e0af      	b.n	800860e <menuSwitch+0x3aa>

			menu->current.entry++;
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	2387      	movs	r3, #135	; 0x87
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	5cd3      	ldrb	r3, [r2, r3]
 80084b6:	3301      	adds	r3, #1
 80084b8:	b2d9      	uxtb	r1, r3
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	2387      	movs	r3, #135	; 0x87
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	54d1      	strb	r1, [r2, r3]

			memcpy(menu->current.value,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3309      	adds	r3, #9
 80084c6:	33ff      	adds	r3, #255	; 0xff
 80084c8:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	2387      	movs	r3, #135	; 0x87
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	5cd3      	ldrb	r3, [r2, r3]
 80084d2:	0019      	movs	r1, r3
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	2310      	movs	r3, #16
 80084d8:	33ff      	adds	r3, #255	; 0xff
 80084da:	5cd3      	ldrb	r3, [r2, r3]
 80084dc:	001a      	movs	r2, r3
 80084de:	0013      	movs	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	189b      	adds	r3, r3, r2
 80084e8:	000a      	movs	r2, r1
 80084ea:	0152      	lsls	r2, r2, #5
 80084ec:	1852      	adds	r2, r2, r1
 80084ee:	189b      	adds	r3, r3, r2
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 80084f4:	2204      	movs	r2, #4
 80084f6:	0019      	movs	r1, r3
 80084f8:	f001 f890 	bl	800961c <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	2387      	movs	r3, #135	; 0x87
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	5cd3      	ldrb	r3, [r2, r3]
 8008504:	0018      	movs	r0, r3
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	2310      	movs	r3, #16
 800850a:	33ff      	adds	r3, #255	; 0xff
 800850c:	5cd3      	ldrb	r3, [r2, r3]
 800850e:	001a      	movs	r2, r3
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	0013      	movs	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	189b      	adds	r3, r3, r2
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	189b      	adds	r3, r3, r2
 800851c:	0002      	movs	r2, r0
 800851e:	0152      	lsls	r2, r2, #5
 8008520:	1812      	adds	r2, r2, r0
 8008522:	189b      	adds	r3, r3, r2
 8008524:	18cb      	adds	r3, r1, r3
 8008526:	3304      	adds	r3, #4
 8008528:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	2386      	movs	r3, #134	; 0x86
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	2387      	movs	r3, #135	; 0x87
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	5cd3      	ldrb	r3, [r2, r3]
 800853a:	0018      	movs	r0, r3
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	2310      	movs	r3, #16
 8008540:	33ff      	adds	r3, #255	; 0xff
 8008542:	5cd3      	ldrb	r3, [r2, r3]
 8008544:	001a      	movs	r2, r3
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	0013      	movs	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	189b      	adds	r3, r3, r2
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	189b      	adds	r3, r3, r2
 8008552:	0002      	movs	r2, r0
 8008554:	0152      	lsls	r2, r2, #5
 8008556:	1812      	adds	r2, r2, r0
 8008558:	189b      	adds	r3, r3, r2
 800855a:	18cb      	adds	r3, r1, r3
 800855c:	3305      	adds	r3, #5
 800855e:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	230e      	movs	r3, #14
 8008564:	33ff      	adds	r3, #255	; 0xff
 8008566:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	2387      	movs	r3, #135	; 0x87
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	5cd3      	ldrb	r3, [r2, r3]
 8008570:	0018      	movs	r0, r3
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	2310      	movs	r3, #16
 8008576:	33ff      	adds	r3, #255	; 0xff
 8008578:	5cd3      	ldrb	r3, [r2, r3]
 800857a:	001a      	movs	r2, r3
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	0013      	movs	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	189b      	adds	r3, r3, r2
 8008584:	005b      	lsls	r3, r3, #1
 8008586:	189b      	adds	r3, r3, r2
 8008588:	0002      	movs	r2, r0
 800858a:	0152      	lsls	r2, r2, #5
 800858c:	1812      	adds	r2, r2, r0
 800858e:	189b      	adds	r3, r3, r2
 8008590:	18cb      	adds	r3, r1, r3
 8008592:	3308      	adds	r3, #8
 8008594:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	2388      	movs	r3, #136	; 0x88
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	2387      	movs	r3, #135	; 0x87
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	5cd3      	ldrb	r3, [r2, r3]
 80085a6:	0018      	movs	r0, r3
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	2310      	movs	r3, #16
 80085ac:	33ff      	adds	r3, #255	; 0xff
 80085ae:	5cd3      	ldrb	r3, [r2, r3]
 80085b0:	001a      	movs	r2, r3
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	0013      	movs	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	0002      	movs	r2, r0
 80085c0:	0152      	lsls	r2, r2, #5
 80085c2:	1812      	adds	r2, r2, r0
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	18cb      	adds	r3, r1, r3
 80085c8:	3309      	adds	r3, #9
 80085ca:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	2312      	movs	r3, #18
 80085d0:	33ff      	adds	r3, #255	; 0xff
 80085d2:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	2387      	movs	r3, #135	; 0x87
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	5cd3      	ldrb	r3, [r2, r3]
 80085dc:	0018      	movs	r0, r3
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	2310      	movs	r3, #16
 80085e2:	33ff      	adds	r3, #255	; 0xff
 80085e4:	5cd3      	ldrb	r3, [r2, r3]
 80085e6:	001a      	movs	r2, r3
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	0013      	movs	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	189b      	adds	r3, r3, r2
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	189b      	adds	r3, r3, r2
 80085f4:	0002      	movs	r2, r0
 80085f6:	0152      	lsls	r2, r2, #5
 80085f8:	1812      	adds	r2, r2, r0
 80085fa:	189b      	adds	r3, r3, r2
 80085fc:	18cb      	adds	r3, r1, r3
 80085fe:	330a      	adds	r3, #10
 8008600:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	2389      	movs	r3, #137	; 0x89
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800860a:	2301      	movs	r3, #1
 800860c:	e177      	b.n	80088fe <menuSwitch+0x69a>

		} else {
			return MENU_ERROR;
 800860e:	2300      	movs	r3, #0
 8008610:	e175      	b.n	80088fe <menuSwitch+0x69a>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 8008612:	1cfb      	adds	r3, r7, #3
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d000      	beq.n	800861c <menuSwitch+0x3b8>
 800861a:	e0ab      	b.n	8008774 <menuSwitch+0x510>
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	2312      	movs	r3, #18
 8008620:	33ff      	adds	r3, #255	; 0xff
 8008622:	5cd3      	ldrb	r3, [r2, r3]
 8008624:	2bff      	cmp	r3, #255	; 0xff
 8008626:	d100      	bne.n	800862a <menuSwitch+0x3c6>
 8008628:	e0a4      	b.n	8008774 <menuSwitch+0x510>

		menu->current.parent = menu->current.entry;
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	2387      	movs	r3, #135	; 0x87
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	5cd1      	ldrb	r1, [r2, r3]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	2388      	movs	r3, #136	; 0x88
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	54d1      	strb	r1, [r2, r3]
		menu->current.entry = menu->current.childFirst;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	2312      	movs	r3, #18
 800863e:	33ff      	adds	r3, #255	; 0xff
 8008640:	5cd1      	ldrb	r1, [r2, r3]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	2387      	movs	r3, #135	; 0x87
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	54d1      	strb	r1, [r2, r3]
		menu->current.level++;
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	2310      	movs	r3, #16
 800864e:	33ff      	adds	r3, #255	; 0xff
 8008650:	5cd3      	ldrb	r3, [r2, r3]
 8008652:	3301      	adds	r3, #1
 8008654:	b2d9      	uxtb	r1, r3
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	2310      	movs	r3, #16
 800865a:	33ff      	adds	r3, #255	; 0xff
 800865c:	54d1      	strb	r1, [r2, r3]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	2387      	movs	r3, #135	; 0x87
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	5cd3      	ldrb	r3, [r2, r3]
 8008666:	0018      	movs	r0, r3
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	2310      	movs	r3, #16
 800866c:	33ff      	adds	r3, #255	; 0xff
 800866e:	5cd3      	ldrb	r3, [r2, r3]
 8008670:	001a      	movs	r2, r3
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	0013      	movs	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	189b      	adds	r3, r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	189b      	adds	r3, r3, r2
 800867e:	0002      	movs	r2, r0
 8008680:	0152      	lsls	r2, r2, #5
 8008682:	1812      	adds	r2, r2, r0
 8008684:	189b      	adds	r3, r3, r2
 8008686:	18cb      	adds	r3, r1, r3
 8008688:	3309      	adds	r3, #9
 800868a:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	2312      	movs	r3, #18
 8008690:	33ff      	adds	r3, #255	; 0xff
 8008692:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	2387      	movs	r3, #135	; 0x87
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	5cd3      	ldrb	r3, [r2, r3]
 800869c:	0018      	movs	r0, r3
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	2310      	movs	r3, #16
 80086a2:	33ff      	adds	r3, #255	; 0xff
 80086a4:	5cd3      	ldrb	r3, [r2, r3]
 80086a6:	001a      	movs	r2, r3
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	0013      	movs	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	189b      	adds	r3, r3, r2
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	189b      	adds	r3, r3, r2
 80086b4:	0002      	movs	r2, r0
 80086b6:	0152      	lsls	r2, r2, #5
 80086b8:	1812      	adds	r2, r2, r0
 80086ba:	189b      	adds	r3, r3, r2
 80086bc:	18cb      	adds	r3, r1, r3
 80086be:	330a      	adds	r3, #10
 80086c0:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	2389      	movs	r3, #137	; 0x89
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	54d1      	strb	r1, [r2, r3]
		memcpy(menu->current.value,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3309      	adds	r3, #9
 80086ce:	33ff      	adds	r3, #255	; 0xff
 80086d0:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	2387      	movs	r3, #135	; 0x87
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	5cd3      	ldrb	r3, [r2, r3]
 80086da:	0019      	movs	r1, r3
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	2310      	movs	r3, #16
 80086e0:	33ff      	adds	r3, #255	; 0xff
 80086e2:	5cd3      	ldrb	r3, [r2, r3]
 80086e4:	001a      	movs	r2, r3
 80086e6:	0013      	movs	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	189b      	adds	r3, r3, r2
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	189b      	adds	r3, r3, r2
 80086f0:	000a      	movs	r2, r1
 80086f2:	0152      	lsls	r2, r2, #5
 80086f4:	1852      	adds	r2, r2, r1
 80086f6:	189b      	adds	r3, r3, r2
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 80086fc:	2204      	movs	r2, #4
 80086fe:	0019      	movs	r1, r3
 8008700:	f000 ff8c 	bl	800961c <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	2387      	movs	r3, #135	; 0x87
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	5cd3      	ldrb	r3, [r2, r3]
 800870c:	0018      	movs	r0, r3
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	2310      	movs	r3, #16
 8008712:	33ff      	adds	r3, #255	; 0xff
 8008714:	5cd3      	ldrb	r3, [r2, r3]
 8008716:	001a      	movs	r2, r3
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	0013      	movs	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	189b      	adds	r3, r3, r2
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	189b      	adds	r3, r3, r2
 8008724:	0002      	movs	r2, r0
 8008726:	0152      	lsls	r2, r2, #5
 8008728:	1812      	adds	r2, r2, r0
 800872a:	189b      	adds	r3, r3, r2
 800872c:	18cb      	adds	r3, r1, r3
 800872e:	3304      	adds	r3, #4
 8008730:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	2386      	movs	r3, #134	; 0x86
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	2387      	movs	r3, #135	; 0x87
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	5cd3      	ldrb	r3, [r2, r3]
 8008742:	0018      	movs	r0, r3
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	2310      	movs	r3, #16
 8008748:	33ff      	adds	r3, #255	; 0xff
 800874a:	5cd3      	ldrb	r3, [r2, r3]
 800874c:	001a      	movs	r2, r3
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	0013      	movs	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	189b      	adds	r3, r3, r2
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	189b      	adds	r3, r3, r2
 800875a:	0002      	movs	r2, r0
 800875c:	0152      	lsls	r2, r2, #5
 800875e:	1812      	adds	r2, r2, r0
 8008760:	189b      	adds	r3, r3, r2
 8008762:	18cb      	adds	r3, r1, r3
 8008764:	3305      	adds	r3, #5
 8008766:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	230e      	movs	r3, #14
 800876c:	33ff      	adds	r3, #255	; 0xff
 800876e:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 8008770:	2301      	movs	r3, #1
 8008772:	e0c4      	b.n	80088fe <menuSwitch+0x69a>

	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 8008774:	1cfb      	adds	r3, r7, #3
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d000      	beq.n	800877e <menuSwitch+0x51a>
 800877c:	e0be      	b.n	80088fc <menuSwitch+0x698>
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	2388      	movs	r3, #136	; 0x88
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	5cd3      	ldrb	r3, [r2, r3]
 8008786:	2bff      	cmp	r3, #255	; 0xff
 8008788:	d100      	bne.n	800878c <menuSwitch+0x528>
 800878a:	e0b7      	b.n	80088fc <menuSwitch+0x698>

		menu->current.entry = menu->current.parent;
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	2388      	movs	r3, #136	; 0x88
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	5cd1      	ldrb	r1, [r2, r3]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	2387      	movs	r3, #135	; 0x87
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	54d1      	strb	r1, [r2, r3]
		menu->current.level--;
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	2310      	movs	r3, #16
 80087a0:	33ff      	adds	r3, #255	; 0xff
 80087a2:	5cd3      	ldrb	r3, [r2, r3]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b2d9      	uxtb	r1, r3
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	2310      	movs	r3, #16
 80087ac:	33ff      	adds	r3, #255	; 0xff
 80087ae:	54d1      	strb	r1, [r2, r3]
		menu->current.parent = menu->items[menu->current.parent][menu->current.level].parent;
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	2388      	movs	r3, #136	; 0x88
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	5cd3      	ldrb	r3, [r2, r3]
 80087b8:	0018      	movs	r0, r3
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	2310      	movs	r3, #16
 80087be:	33ff      	adds	r3, #255	; 0xff
 80087c0:	5cd3      	ldrb	r3, [r2, r3]
 80087c2:	001a      	movs	r2, r3
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	0013      	movs	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	189b      	adds	r3, r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	189b      	adds	r3, r3, r2
 80087d0:	0002      	movs	r2, r0
 80087d2:	0152      	lsls	r2, r2, #5
 80087d4:	1812      	adds	r2, r2, r0
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	18cb      	adds	r3, r1, r3
 80087da:	3308      	adds	r3, #8
 80087dc:	7819      	ldrb	r1, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	2388      	movs	r3, #136	; 0x88
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	54d1      	strb	r1, [r2, r3]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	2387      	movs	r3, #135	; 0x87
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	5cd3      	ldrb	r3, [r2, r3]
 80087ee:	0018      	movs	r0, r3
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	2310      	movs	r3, #16
 80087f4:	33ff      	adds	r3, #255	; 0xff
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
 80087f8:	001a      	movs	r2, r3
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	0013      	movs	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	189b      	adds	r3, r3, r2
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	189b      	adds	r3, r3, r2
 8008806:	0002      	movs	r2, r0
 8008808:	0152      	lsls	r2, r2, #5
 800880a:	1812      	adds	r2, r2, r0
 800880c:	189b      	adds	r3, r3, r2
 800880e:	18cb      	adds	r3, r1, r3
 8008810:	3309      	adds	r3, #9
 8008812:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	2312      	movs	r3, #18
 8008818:	33ff      	adds	r3, #255	; 0xff
 800881a:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	2387      	movs	r3, #135	; 0x87
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	5cd3      	ldrb	r3, [r2, r3]
 8008824:	0018      	movs	r0, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	2310      	movs	r3, #16
 800882a:	33ff      	adds	r3, #255	; 0xff
 800882c:	5cd3      	ldrb	r3, [r2, r3]
 800882e:	001a      	movs	r2, r3
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	0013      	movs	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	189b      	adds	r3, r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	189b      	adds	r3, r3, r2
 800883c:	0002      	movs	r2, r0
 800883e:	0152      	lsls	r2, r2, #5
 8008840:	1812      	adds	r2, r2, r0
 8008842:	189b      	adds	r3, r3, r2
 8008844:	18cb      	adds	r3, r1, r3
 8008846:	330a      	adds	r3, #10
 8008848:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	2389      	movs	r3, #137	; 0x89
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	54d1      	strb	r1, [r2, r3]

		memcpy(menu->current.value,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3309      	adds	r3, #9
 8008856:	33ff      	adds	r3, #255	; 0xff
 8008858:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	2387      	movs	r3, #135	; 0x87
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	5cd3      	ldrb	r3, [r2, r3]
 8008862:	0019      	movs	r1, r3
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	2310      	movs	r3, #16
 8008868:	33ff      	adds	r3, #255	; 0xff
 800886a:	5cd3      	ldrb	r3, [r2, r3]
 800886c:	001a      	movs	r2, r3
 800886e:	0013      	movs	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	189b      	adds	r3, r3, r2
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	189b      	adds	r3, r3, r2
 8008878:	000a      	movs	r2, r1
 800887a:	0152      	lsls	r2, r2, #5
 800887c:	1852      	adds	r2, r2, r1
 800887e:	189b      	adds	r3, r3, r2
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8008884:	2204      	movs	r2, #4
 8008886:	0019      	movs	r1, r3
 8008888:	f000 fec8 	bl	800961c <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	2387      	movs	r3, #135	; 0x87
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	5cd3      	ldrb	r3, [r2, r3]
 8008894:	0018      	movs	r0, r3
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	2310      	movs	r3, #16
 800889a:	33ff      	adds	r3, #255	; 0xff
 800889c:	5cd3      	ldrb	r3, [r2, r3]
 800889e:	001a      	movs	r2, r3
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	0013      	movs	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	189b      	adds	r3, r3, r2
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	189b      	adds	r3, r3, r2
 80088ac:	0002      	movs	r2, r0
 80088ae:	0152      	lsls	r2, r2, #5
 80088b0:	1812      	adds	r2, r2, r0
 80088b2:	189b      	adds	r3, r3, r2
 80088b4:	18cb      	adds	r3, r1, r3
 80088b6:	3304      	adds	r3, #4
 80088b8:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	2386      	movs	r3, #134	; 0x86
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
									menu->items[menu->current.entry][menu->current.level].value3;
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	2387      	movs	r3, #135	; 0x87
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	5cd3      	ldrb	r3, [r2, r3]
 80088ca:	0018      	movs	r0, r3
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	2310      	movs	r3, #16
 80088d0:	33ff      	adds	r3, #255	; 0xff
 80088d2:	5cd3      	ldrb	r3, [r2, r3]
 80088d4:	001a      	movs	r2, r3
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	0013      	movs	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	189b      	adds	r3, r3, r2
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	0002      	movs	r2, r0
 80088e4:	0152      	lsls	r2, r2, #5
 80088e6:	1812      	adds	r2, r2, r0
 80088e8:	189b      	adds	r3, r3, r2
 80088ea:	18cb      	adds	r3, r1, r3
 80088ec:	3305      	adds	r3, #5
 80088ee:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	230e      	movs	r3, #14
 80088f4:	33ff      	adds	r3, #255	; 0xff
 80088f6:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <menuSwitch+0x69a>
	} else {
		return MENU_ERROR;
 80088fc:	2300      	movs	r3, #0
	}
}
 80088fe:	0018      	movs	r0, r3
 8008900:	46bd      	mov	sp, r7
 8008902:	b003      	add	sp, #12
 8008904:	bd90      	pop	{r4, r7, pc}
	...

08008908 <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 8008908:	b5b0      	push	{r4, r5, r7, lr}
 800890a:	b090      	sub	sp, #64	; 0x40
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8008910:	49f4      	ldr	r1, [pc, #976]	; (8008ce4 <rtcGetTime+0x3dc>)
 8008912:	4bf5      	ldr	r3, [pc, #980]	; (8008ce8 <rtcGetTime+0x3e0>)
 8008914:	2200      	movs	r2, #0
 8008916:	0018      	movs	r0, r3
 8008918:	f7fb ff62 	bl	80047e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800891c:	49f3      	ldr	r1, [pc, #972]	; (8008cec <rtcGetTime+0x3e4>)
 800891e:	4bf2      	ldr	r3, [pc, #968]	; (8008ce8 <rtcGetTime+0x3e0>)
 8008920:	2200      	movs	r2, #0
 8008922:	0018      	movs	r0, r3
 8008924:	f7fc f84a 	bl	80049bc <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 8008928:	4bee      	ldr	r3, [pc, #952]	; (8008ce4 <rtcGetTime+0x3dc>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b25a      	sxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 8008932:	4bec      	ldr	r3, [pc, #944]	; (8008ce4 <rtcGetTime+0x3dc>)
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	b25a      	sxtb	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800893c:	4be9      	ldr	r3, [pc, #932]	; (8008ce4 <rtcGetTime+0x3dc>)
 800893e:	789b      	ldrb	r3, [r3, #2]
 8008940:	b25a      	sxtb	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	715a      	strb	r2, [r3, #5]

	chrono->actual.decimal = (((255 - Time.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 8008946:	4be7      	ldr	r3, [pc, #924]	; (8008ce4 <rtcGetTime+0x3dc>)
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	0013      	movs	r3, r2
 800894c:	065b      	lsls	r3, r3, #25
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	189b      	adds	r3, r3, r2
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	1a9b      	subs	r3, r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4ae5      	ldr	r2, [pc, #916]	; (8008cf0 <rtcGetTime+0x3e8>)
 800895c:	4694      	mov	ip, r2
 800895e:	4463      	add	r3, ip
 8008960:	49e4      	ldr	r1, [pc, #912]	; (8008cf4 <rtcGetTime+0x3ec>)
 8008962:	0018      	movs	r0, r3
 8008964:	f7f7 fbce 	bl	8000104 <__udivsi3>
 8008968:	0003      	movs	r3, r0
 800896a:	b25a      	sxtb	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 8008970:	4bde      	ldr	r3, [pc, #888]	; (8008cec <rtcGetTime+0x3e4>)
 8008972:	789b      	ldrb	r3, [r3, #2]
 8008974:	b25a      	sxtb	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800897a:	4bdc      	ldr	r3, [pc, #880]	; (8008cec <rtcGetTime+0x3e4>)
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	b25a      	sxtb	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 8008984:	4bd9      	ldr	r3, [pc, #868]	; (8008cec <rtcGetTime+0x3e4>)
 8008986:	78db      	ldrb	r3, [r3, #3]
 8008988:	b25a      	sxtb	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	b25b      	sxtb	r3, r3
 8008994:	3309      	adds	r3, #9
 8008996:	210c      	movs	r1, #12
 8008998:	0018      	movs	r0, r3
 800899a:	f7f7 fc3d 	bl	8000218 <__divsi3>
 800899e:	0003      	movs	r3, r0
 80089a0:	0018      	movs	r0, r3
 80089a2:	f7f8 fbd3 	bl	800114c <__aeabi_i2f>
 80089a6:	1c03      	adds	r3, r0, #0
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b25b      	sxtb	r3, r3
 80089b0:	001c      	movs	r4, r3
 80089b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089b4:	f7f7 fd3c 	bl	8000430 <__aeabi_f2uiz>
 80089b8:	0003      	movs	r3, r0
 80089ba:	18e3      	adds	r3, r4, r3
 80089bc:	4ace      	ldr	r2, [pc, #824]	; (8008cf8 <rtcGetTime+0x3f0>)
 80089be:	4694      	mov	ip, r2
 80089c0:	4463      	add	r3, ip
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	b25b      	sxtb	r3, r3
 80089ca:	001a      	movs	r2, r3
 80089cc:	0013      	movs	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	009a      	lsls	r2, r3, #2
 80089d8:	189b      	adds	r3, r3, r2
 80089da:	2109      	movs	r1, #9
 80089dc:	0018      	movs	r0, r3
 80089de:	f7f7 fc1b 	bl	8000218 <__divsi3>
 80089e2:	0003      	movs	r3, r0
 80089e4:	0018      	movs	r0, r3
 80089e6:	f7f8 fbb1 	bl	800114c <__aeabi_i2f>
 80089ea:	1c03      	adds	r3, r0, #0
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 80089ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f0:	0013      	movs	r3, r2
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	089b      	lsrs	r3, r3, #2
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7f8 fbed 	bl	80011d8 <__aeabi_ui2f>
 80089fe:	1c03      	adds	r3, r0, #0
 8008a00:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	22fa      	movs	r2, #250	; 0xfa
 8008a0a:	00d2      	lsls	r2, r2, #3
 8008a0c:	189a      	adds	r2, r3, r2
 8008a0e:	0013      	movs	r3, r2
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	189b      	adds	r3, r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7f9 fb13 	bl	8002048 <__aeabi_i2d>
 8008a22:	2280      	movs	r2, #128	; 0x80
 8008a24:	0612      	lsls	r2, r2, #24
 8008a26:	4bb5      	ldr	r3, [pc, #724]	; (8008cfc <rtcGetTime+0x3f4>)
 8008a28:	f7f8 fc12 	bl	8001250 <__aeabi_dadd>
 8008a2c:	0002      	movs	r2, r0
 8008a2e:	000b      	movs	r3, r1
 8008a30:	0014      	movs	r4, r2
 8008a32:	001d      	movs	r5, r3
 8008a34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a36:	f7f7 fcfb 	bl	8000430 <__aeabi_f2uiz>
 8008a3a:	0003      	movs	r3, r0
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7f9 fb33 	bl	80020a8 <__aeabi_ui2d>
 8008a42:	0002      	movs	r2, r0
 8008a44:	000b      	movs	r3, r1
 8008a46:	0020      	movs	r0, r4
 8008a48:	0029      	movs	r1, r5
 8008a4a:	f7f8 fc01 	bl	8001250 <__aeabi_dadd>
 8008a4e:	0002      	movs	r2, r0
 8008a50:	000b      	movs	r3, r1
 8008a52:	0014      	movs	r4, r2
 8008a54:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 8008a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a58:	f7f7 fcea 	bl	8000430 <__aeabi_f2uiz>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f7f9 fb22 	bl	80020a8 <__aeabi_ui2d>
 8008a64:	0002      	movs	r2, r0
 8008a66:	000b      	movs	r3, r1
 8008a68:	0020      	movs	r0, r4
 8008a6a:	0029      	movs	r1, r5
 8008a6c:	f7f8 ff5a 	bl	8001924 <__aeabi_dsub>
 8008a70:	0002      	movs	r2, r0
 8008a72:	000b      	movs	r3, r1
 8008a74:	0014      	movs	r4, r2
 8008a76:	001d      	movs	r5, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	789b      	ldrb	r3, [r3, #2]
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f7f9 fae2 	bl	8002048 <__aeabi_i2d>
 8008a84:	0002      	movs	r2, r0
 8008a86:	000b      	movs	r3, r1
 8008a88:	0020      	movs	r0, r4
 8008a8a:	0029      	movs	r1, r5
 8008a8c:	f7f8 fbe0 	bl	8001250 <__aeabi_dadd>
 8008a90:	0002      	movs	r2, r0
 8008a92:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 8008a94:	0010      	movs	r0, r2
 8008a96:	0019      	movs	r1, r3
 8008a98:	f7f9 fb74 	bl	8002184 <__aeabi_d2f>
 8008a9c:	1c03      	adds	r3, r0, #0
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	3353      	adds	r3, #83	; 0x53
 8008aa4:	2164      	movs	r1, #100	; 0x64
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	f7f7 fb2c 	bl	8000104 <__udivsi3>
 8008aac:	0003      	movs	r3, r0
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7f8 fb92 	bl	80011d8 <__aeabi_ui2f>
 8008ab4:	1c03      	adds	r3, r0, #0
 8008ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 8008ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aba:	f7f7 fcb9 	bl	8000430 <__aeabi_f2uiz>
 8008abe:	0003      	movs	r3, r0
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	0013      	movs	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	189b      	adds	r3, r3, r2
 8008acc:	089b      	lsrs	r3, r3, #2
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7f8 fb82 	bl	80011d8 <__aeabi_ui2f>
 8008ad4:	1c03      	adds	r3, r0, #0
 8008ad6:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 8008ad8:	6a38      	ldr	r0, [r7, #32]
 8008ada:	f7f7 fca9 	bl	8000430 <__aeabi_f2uiz>
 8008ade:	0003      	movs	r3, r0
 8008ae0:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 8008ae2:	4987      	ldr	r1, [pc, #540]	; (8008d00 <rtcGetTime+0x3f8>)
 8008ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_fadd>
 8008aea:	1c03      	adds	r3, r0, #0
 8008aec:	1c1c      	adds	r4, r3, #0
 8008aee:	69f8      	ldr	r0, [r7, #28]
 8008af0:	f7f8 fb72 	bl	80011d8 <__aeabi_ui2f>
 8008af4:	1c03      	adds	r3, r0, #0
 8008af6:	1c19      	adds	r1, r3, #0
 8008af8:	1c20      	adds	r0, r4, #0
 8008afa:	f7f8 f93f 	bl	8000d7c <__aeabi_fsub>
 8008afe:	1c03      	adds	r3, r0, #0
 8008b00:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 8008b02:	4b80      	ldr	r3, [pc, #512]	; (8008d04 <rtcGetTime+0x3fc>)
 8008b04:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 8008b06:	6979      	ldr	r1, [r7, #20]
 8008b08:	69b8      	ldr	r0, [r7, #24]
 8008b0a:	f7f7 ff11 	bl	8000930 <__aeabi_fdiv>
 8008b0e:	1c03      	adds	r3, r0, #0
 8008b10:	1c18      	adds	r0, r3, #0
 8008b12:	f7f9 faef 	bl	80020f4 <__aeabi_f2d>
 8008b16:	4a7c      	ldr	r2, [pc, #496]	; (8008d08 <rtcGetTime+0x400>)
 8008b18:	4b7c      	ldr	r3, [pc, #496]	; (8008d0c <rtcGetTime+0x404>)
 8008b1a:	f7f8 ff03 	bl	8001924 <__aeabi_dsub>
 8008b1e:	0002      	movs	r2, r0
 8008b20:	000b      	movs	r3, r1
 8008b22:	0010      	movs	r0, r2
 8008b24:	0019      	movs	r1, r3
 8008b26:	f7f9 fb2d 	bl	8002184 <__aeabi_d2f>
 8008b2a:	1c03      	adds	r3, r0, #0
 8008b2c:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 8008b2e:	6938      	ldr	r0, [r7, #16]
 8008b30:	f7f7 fc7e 	bl	8000430 <__aeabi_f2uiz>
 8008b34:	0003      	movs	r3, r0
 8008b36:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7f8 fb4d 	bl	80011d8 <__aeabi_ui2f>
 8008b3e:	1c03      	adds	r3, r0, #0
 8008b40:	1c19      	adds	r1, r3, #0
 8008b42:	6938      	ldr	r0, [r7, #16]
 8008b44:	f7f8 f91a 	bl	8000d7c <__aeabi_fsub>
 8008b48:	1c03      	adds	r3, r0, #0
 8008b4a:	4971      	ldr	r1, [pc, #452]	; (8008d10 <rtcGetTime+0x408>)
 8008b4c:	1c18      	adds	r0, r3, #0
 8008b4e:	f7f7 fffb 	bl	8000b48 <__aeabi_fmul>
 8008b52:	1c03      	adds	r3, r0, #0
 8008b54:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 8008b56:	68b8      	ldr	r0, [r7, #8]
 8008b58:	f7f7 fc6a 	bl	8000430 <__aeabi_f2uiz>
 8008b5c:	0002      	movs	r2, r0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2224      	movs	r2, #36	; 0x24
 8008b66:	5c9b      	ldrb	r3, [r3, r2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d114      	bne.n	8008b96 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	775a      	strb	r2, [r3, #29]
		chrono->chrono.decimal = 0;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2224      	movs	r2, #36	; 0x24
 8008b9a:	5c9b      	ldrb	r3, [r3, r2]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d000      	beq.n	8008ba2 <rtcGetTime+0x29a>
 8008ba0:	e0ef      	b.n	8008d82 <rtcGetTime+0x47a>

		chrono->chrono.decimal = 0;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	779a      	strb	r2, [r3, #30]
		chrono->chrono.second = chrono->actual.second
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	795b      	ldrb	r3, [r3, #5]
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7c5b      	ldrb	r3, [r3, #17]
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	791b      	ldrb	r3, [r3, #4]
 8008bc6:	b25b      	sxtb	r3, r3
 8008bc8:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7c1b      	ldrb	r3, [r3, #16]
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	78db      	ldrb	r3, [r3, #3]
 8008be0:	b25b      	sxtb	r3, r3
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7bdb      	ldrb	r3, [r3, #15]
 8008be8:	b25b      	sxtb	r3, r3
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	b25a      	sxtb	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	789b      	ldrb	r3, [r3, #2]
 8008bfa:	b25b      	sxtb	r3, r3
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7b9b      	ldrb	r3, [r3, #14]
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	b25a      	sxtb	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	b25b      	sxtb	r3, r3
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	7b5b      	ldrb	r3, [r3, #13]
 8008c1c:	b25b      	sxtb	r3, r3
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	b25a      	sxtb	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.decimal < 0) {
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7f9b      	ldrb	r3, [r3, #30]
 8008c2e:	b25b      	sxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da11      	bge.n	8008c58 <rtcGetTime+0x350>
			chrono->chrono.second--;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	7f5b      	ldrb	r3, [r3, #29]
 8008c38:	b25b      	sxtb	r3, r3
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	b25a      	sxtb	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	775a      	strb	r2, [r3, #29]
			chrono->chrono.decimal = chrono->chrono.decimal + 10;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	7f9b      	ldrb	r3, [r3, #30]
 8008c4a:	b25b      	sxtb	r3, r3
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	330a      	adds	r3, #10
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	b25a      	sxtb	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	7f5b      	ldrb	r3, [r3, #29]
 8008c5c:	b25b      	sxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	da11      	bge.n	8008c86 <rtcGetTime+0x37e>
			chrono->chrono.minute--;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7f1b      	ldrb	r3, [r3, #28]
 8008c66:	b25b      	sxtb	r3, r3
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	b25a      	sxtb	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7f5b      	ldrb	r3, [r3, #29]
 8008c78:	b25b      	sxtb	r3, r3
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	333c      	adds	r3, #60	; 0x3c
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	b25a      	sxtb	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	7f1b      	ldrb	r3, [r3, #28]
 8008c8a:	b25b      	sxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	da11      	bge.n	8008cb4 <rtcGetTime+0x3ac>
			chrono->chrono.hour--;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7edb      	ldrb	r3, [r3, #27]
 8008c94:	b25b      	sxtb	r3, r3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	b25a      	sxtb	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7f1b      	ldrb	r3, [r3, #28]
 8008ca6:	b25b      	sxtb	r3, r3
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	333c      	adds	r3, #60	; 0x3c
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	b25a      	sxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	771a      	strb	r2, [r3, #28]
		}

		if (chrono->chrono.hour < 0) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7edb      	ldrb	r3, [r3, #27]
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da2a      	bge.n	8008d14 <rtcGetTime+0x40c>
			chrono->chrono.day--;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	7e9b      	ldrb	r3, [r3, #26]
 8008cc2:	b25b      	sxtb	r3, r3
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	b25a      	sxtb	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7edb      	ldrb	r3, [r3, #27]
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	3318      	adds	r3, #24
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	b25a      	sxtb	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	76da      	strb	r2, [r3, #27]
 8008ce2:	e017      	b.n	8008d14 <rtcGetTime+0x40c>
 8008ce4:	20000034 	.word	0x20000034
 8008ce8:	200002ac 	.word	0x200002ac
 8008cec:	2000002c 	.word	0x2000002c
 8008cf0:	0000639c 	.word	0x0000639c
 8008cf4:	000009f6 	.word	0x000009f6
 8008cf8:	00001a3c 	.word	0x00001a3c
 8008cfc:	413a62ff 	.word	0x413a62ff
 8008d00:	42180000 	.word	0x42180000
 8008d04:	41ec3ea6 	.word	0x41ec3ea6
 8008d08:	67381d7e 	.word	0x67381d7e
 8008d0c:	3fd36944 	.word	0x3fd36944
 8008d10:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.day < 0) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7e9b      	ldrb	r3, [r3, #26]
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da11      	bge.n	8008d42 <rtcGetTime+0x43a>
			chrono->chrono.month--;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7e5b      	ldrb	r3, [r3, #25]
 8008d22:	b25b      	sxtb	r3, r3
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	b25a      	sxtb	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	7e9b      	ldrb	r3, [r3, #26]
 8008d34:	b25b      	sxtb	r3, r3
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	331e      	adds	r3, #30
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	b25a      	sxtb	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7e5b      	ldrb	r3, [r3, #25]
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da11      	bge.n	8008d70 <rtcGetTime+0x468>
			chrono->chrono.year--;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7e1b      	ldrb	r3, [r3, #24]
 8008d50:	b25b      	sxtb	r3, r3
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	b25a      	sxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7e5b      	ldrb	r3, [r3, #25]
 8008d62:	b25b      	sxtb	r3, r3
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	330c      	adds	r3, #12
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	b25a      	sxtb	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	765a      	strb	r2, [r3, #25]
		}

		//max chrono count
		if (chrono->chrono.hour >= 5) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	7edb      	ldrb	r3, [r3, #27]
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	dd03      	ble.n	8008d82 <rtcGetTime+0x47a>
			chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2224      	movs	r2, #36	; 0x24
 8008d7e:	2102      	movs	r1, #2
 8008d80:	5499      	strb	r1, [r3, r2]
		}
	}

}
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	46bd      	mov	sp, r7
 8008d86:	b010      	add	sp, #64	; 0x40
 8008d88:	bdb0      	pop	{r4, r5, r7, pc}
 8008d8a:	46c0      	nop			; (mov r8, r8)

08008d8c <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	78db      	ldrb	r3, [r3, #3]
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	4b17      	ldr	r3, [pc, #92]	; (8008dfc <rtcSetTime+0x70>)
 8008d9e:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	791b      	ldrb	r3, [r3, #4]
 8008da4:	b25b      	sxtb	r3, r3
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	4b14      	ldr	r3, [pc, #80]	; (8008dfc <rtcSetTime+0x70>)
 8008daa:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	795b      	ldrb	r3, [r3, #5]
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <rtcSetTime+0x70>)
 8008db6:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	789b      	ldrb	r3, [r3, #2]
 8008dbc:	b25b      	sxtb	r3, r3
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <rtcSetTime+0x74>)
 8008dc2:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <rtcSetTime+0x74>)
 8008dce:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <rtcSetTime+0x74>)
 8008dda:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8008ddc:	4907      	ldr	r1, [pc, #28]	; (8008dfc <rtcSetTime+0x70>)
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <rtcSetTime+0x78>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	0018      	movs	r0, r3
 8008de4:	f7fb fc54 	bl	8004690 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8008de8:	4905      	ldr	r1, [pc, #20]	; (8008e00 <rtcSetTime+0x74>)
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <rtcSetTime+0x78>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7fb fd52 	bl	8004898 <HAL_RTC_SetDate>

}
 8008df4:	46c0      	nop			; (mov r8, r8)
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b002      	add	sp, #8
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000034 	.word	0x20000034
 8008e00:	2000002c 	.word	0x2000002c
 8008e04:	200002ac 	.word	0x200002ac

08008e08 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	0008      	movs	r0, r1
 8008e12:	0011      	movs	r1, r2
 8008e14:	1cfb      	adds	r3, r7, #3
 8008e16:	1c02      	adds	r2, r0, #0
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	1cbb      	adds	r3, r7, #2
 8008e1c:	1c0a      	adds	r2, r1, #0
 8008e1e:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 8008e20:	1cbb      	adds	r3, r7, #2
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d000      	beq.n	8008e2a <rtcChangeValue+0x22>
 8008e28:	e08a      	b.n	8008f40 <rtcChangeValue+0x138>
		switch (element) {
 8008e2a:	1cfb      	adds	r3, r7, #3
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b05      	cmp	r3, #5
 8008e30:	d900      	bls.n	8008e34 <rtcChangeValue+0x2c>
 8008e32:	e080      	b.n	8008f36 <rtcChangeValue+0x12e>
 8008e34:	009a      	lsls	r2, r3, #2
 8008e36:	4b8c      	ldr	r3, [pc, #560]	; (8009068 <rtcChangeValue+0x260>)
 8008e38:	18d3      	adds	r3, r2, r3
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	78db      	ldrb	r3, [r3, #3]
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd09      	ble.n	8008e5c <rtcChangeValue+0x54>
				chrono->actual.hour--;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	78db      	ldrb	r3, [r3, #3]
 8008e4c:	b25b      	sxtb	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	b25a      	sxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 8008e5a:	e063      	b.n	8008f24 <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	78db      	ldrb	r3, [r3, #3]
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d15e      	bne.n	8008f24 <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2217      	movs	r2, #23
 8008e6a:	70da      	strb	r2, [r3, #3]
			break;
 8008e6c:	e05a      	b.n	8008f24 <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	791b      	ldrb	r3, [r3, #4]
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd09      	ble.n	8008e8c <rtcChangeValue+0x84>
				chrono->actual.minute--;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	791b      	ldrb	r3, [r3, #4]
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	b25a      	sxtb	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 8008e8a:	e04d      	b.n	8008f28 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	791b      	ldrb	r3, [r3, #4]
 8008e90:	b25b      	sxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d148      	bne.n	8008f28 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	223b      	movs	r2, #59	; 0x3b
 8008e9a:	711a      	strb	r2, [r3, #4]
			break;
 8008e9c:	e044      	b.n	8008f28 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	715a      	strb	r2, [r3, #5]
			break;
 8008ea4:	e047      	b.n	8008f36 <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	789b      	ldrb	r3, [r3, #2]
 8008eaa:	b25b      	sxtb	r3, r3
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	dd09      	ble.n	8008ec4 <rtcChangeValue+0xbc>
				chrono->actual.day--;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	789b      	ldrb	r3, [r3, #2]
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	b25a      	sxtb	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 8008ec2:	e033      	b.n	8008f2c <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	789b      	ldrb	r3, [r3, #2]
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d12e      	bne.n	8008f2c <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	221f      	movs	r2, #31
 8008ed2:	709a      	strb	r2, [r3, #2]
			break;
 8008ed4:	e02a      	b.n	8008f2c <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	b25b      	sxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	dd09      	ble.n	8008ef4 <rtcChangeValue+0xec>
				chrono->actual.month--;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	b25b      	sxtb	r3, r3
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	b25a      	sxtb	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 8008ef2:	e01d      	b.n	8008f30 <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	b25b      	sxtb	r3, r3
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d118      	bne.n	8008f30 <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	220c      	movs	r2, #12
 8008f02:	705a      	strb	r2, [r3, #1]
			break;
 8008f04:	e014      	b.n	8008f30 <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd11      	ble.n	8008f34 <rtcChangeValue+0x12c>
				chrono->actual.year--;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	b25a      	sxtb	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	701a      	strb	r2, [r3, #0]
			break;
 8008f22:	e007      	b.n	8008f34 <rtcChangeValue+0x12c>
			break;
 8008f24:	46c0      	nop			; (mov r8, r8)
 8008f26:	e006      	b.n	8008f36 <rtcChangeValue+0x12e>
			break;
 8008f28:	46c0      	nop			; (mov r8, r8)
 8008f2a:	e004      	b.n	8008f36 <rtcChangeValue+0x12e>
			break;
 8008f2c:	46c0      	nop			; (mov r8, r8)
 8008f2e:	e002      	b.n	8008f36 <rtcChangeValue+0x12e>
			break;
 8008f30:	46c0      	nop			; (mov r8, r8)
 8008f32:	e000      	b.n	8008f36 <rtcChangeValue+0x12e>
			break;
 8008f34:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f7ff ff27 	bl	8008d8c <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 8008f3e:	e08e      	b.n	800905e <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 8008f40:	1cbb      	adds	r3, r7, #2
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d000      	beq.n	8008f4a <rtcChangeValue+0x142>
 8008f48:	e089      	b.n	800905e <rtcChangeValue+0x256>
		switch (element) {
 8008f4a:	1cfb      	adds	r3, r7, #3
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d900      	bls.n	8008f54 <rtcChangeValue+0x14c>
 8008f52:	e080      	b.n	8009056 <rtcChangeValue+0x24e>
 8008f54:	009a      	lsls	r2, r3, #2
 8008f56:	4b45      	ldr	r3, [pc, #276]	; (800906c <rtcChangeValue+0x264>)
 8008f58:	18d3      	adds	r3, r2, r3
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	78db      	ldrb	r3, [r3, #3]
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	2b16      	cmp	r3, #22
 8008f66:	dc09      	bgt.n	8008f7c <rtcChangeValue+0x174>
				chrono->actual.hour++;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	78db      	ldrb	r3, [r3, #3]
 8008f6c:	b25b      	sxtb	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	3301      	adds	r3, #1
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	b25a      	sxtb	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	70da      	strb	r2, [r3, #3]
			break;
 8008f7a:	e063      	b.n	8009044 <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	78db      	ldrb	r3, [r3, #3]
 8008f80:	b25b      	sxtb	r3, r3
 8008f82:	2b16      	cmp	r3, #22
 8008f84:	dd5e      	ble.n	8009044 <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	70da      	strb	r2, [r3, #3]
			break;
 8008f8c:	e05a      	b.n	8009044 <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	791b      	ldrb	r3, [r3, #4]
 8008f92:	b25b      	sxtb	r3, r3
 8008f94:	2b3a      	cmp	r3, #58	; 0x3a
 8008f96:	dc09      	bgt.n	8008fac <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	791b      	ldrb	r3, [r3, #4]
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	b25a      	sxtb	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	711a      	strb	r2, [r3, #4]
			break;
 8008faa:	e04d      	b.n	8009048 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	791b      	ldrb	r3, [r3, #4]
 8008fb0:	b25b      	sxtb	r3, r3
 8008fb2:	2b3a      	cmp	r3, #58	; 0x3a
 8008fb4:	dd48      	ble.n	8009048 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	711a      	strb	r2, [r3, #4]
			break;
 8008fbc:	e044      	b.n	8009048 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	715a      	strb	r2, [r3, #5]
			break;
 8008fc4:	e047      	b.n	8009056 <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	789b      	ldrb	r3, [r3, #2]
 8008fca:	b25b      	sxtb	r3, r3
 8008fcc:	2b1e      	cmp	r3, #30
 8008fce:	dc09      	bgt.n	8008fe4 <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	789b      	ldrb	r3, [r3, #2]
 8008fd4:	b25b      	sxtb	r3, r3
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	b25a      	sxtb	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	709a      	strb	r2, [r3, #2]
			break;
 8008fe2:	e033      	b.n	800904c <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	789b      	ldrb	r3, [r3, #2]
 8008fe8:	b25b      	sxtb	r3, r3
 8008fea:	2b1f      	cmp	r3, #31
 8008fec:	d12e      	bne.n	800904c <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	709a      	strb	r2, [r3, #2]
			break;
 8008ff4:	e02a      	b.n	800904c <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	b25b      	sxtb	r3, r3
 8008ffc:	2b0b      	cmp	r3, #11
 8008ffe:	dc09      	bgt.n	8009014 <rtcChangeValue+0x20c>
				chrono->actual.month++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	b25b      	sxtb	r3, r3
 8009006:	b2db      	uxtb	r3, r3
 8009008:	3301      	adds	r3, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	b25a      	sxtb	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	705a      	strb	r2, [r3, #1]
			break;
 8009012:	e01d      	b.n	8009050 <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	785b      	ldrb	r3, [r3, #1]
 8009018:	b25b      	sxtb	r3, r3
 800901a:	2b0c      	cmp	r3, #12
 800901c:	d118      	bne.n	8009050 <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	705a      	strb	r2, [r3, #1]
			break;
 8009024:	e014      	b.n	8009050 <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b25b      	sxtb	r3, r3
 800902c:	2b62      	cmp	r3, #98	; 0x62
 800902e:	dc11      	bgt.n	8009054 <rtcChangeValue+0x24c>
				chrono->actual.year++;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	b25b      	sxtb	r3, r3
 8009036:	b2db      	uxtb	r3, r3
 8009038:	3301      	adds	r3, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	b25a      	sxtb	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	701a      	strb	r2, [r3, #0]
			break;
 8009042:	e007      	b.n	8009054 <rtcChangeValue+0x24c>
			break;
 8009044:	46c0      	nop			; (mov r8, r8)
 8009046:	e006      	b.n	8009056 <rtcChangeValue+0x24e>
			break;
 8009048:	46c0      	nop			; (mov r8, r8)
 800904a:	e004      	b.n	8009056 <rtcChangeValue+0x24e>
			break;
 800904c:	46c0      	nop			; (mov r8, r8)
 800904e:	e002      	b.n	8009056 <rtcChangeValue+0x24e>
			break;
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	e000      	b.n	8009056 <rtcChangeValue+0x24e>
			break;
 8009054:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	0018      	movs	r0, r3
 800905a:	f7ff fe97 	bl	8008d8c <rtcSetTime>
}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	46bd      	mov	sp, r7
 8009062:	b002      	add	sp, #8
 8009064:	bd80      	pop	{r7, pc}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	080099d8 	.word	0x080099d8
 800906c:	080099f0 	.word	0x080099f0

08009070 <rtcBlink>:
 *
 * @param  RTC item handler
 *
 * @retval Even- 1, Odd- 0
 */
uint8_t rtcBlink(RTCChronoTypeDef *chrono) {
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8009078:	4910      	ldr	r1, [pc, #64]	; (80090bc <rtcBlink+0x4c>)
 800907a:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <rtcBlink+0x50>)
 800907c:	2200      	movs	r2, #0
 800907e:	0018      	movs	r0, r3
 8009080:	f7fb fbae 	bl	80047e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8009084:	490f      	ldr	r1, [pc, #60]	; (80090c4 <rtcBlink+0x54>)
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <rtcBlink+0x50>)
 8009088:	2200      	movs	r2, #0
 800908a:	0018      	movs	r0, r3
 800908c:	f7fb fc96 	bl	80049bc <HAL_RTC_GetDate>

	chrono->actual.second = Time.Seconds;
 8009090:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <rtcBlink+0x4c>)
 8009092:	789b      	ldrb	r3, [r3, #2]
 8009094:	b25a      	sxtb	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	715a      	strb	r2, [r3, #5]

	if (chrono->actual.second % 2) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	795b      	ldrb	r3, [r3, #5]
 800909e:	b25b      	sxtb	r3, r3
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2201      	movs	r2, #1
 80090a4:	4013      	ands	r3, r2
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <rtcBlink+0x40>
		return 1;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <rtcBlink+0x42>
	} else {
		return 0;
 80090b0:	2300      	movs	r3, #0
	}
}
 80090b2:	0018      	movs	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b002      	add	sp, #8
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	20000034 	.word	0x20000034
 80090c0:	200002ac 	.word	0x200002ac
 80090c4:	2000002c 	.word	0x2000002c

080090c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090ce:	4b11      	ldr	r3, [pc, #68]	; (8009114 <HAL_MspInit+0x4c>)
 80090d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090d2:	4b10      	ldr	r3, [pc, #64]	; (8009114 <HAL_MspInit+0x4c>)
 80090d4:	2101      	movs	r1, #1
 80090d6:	430a      	orrs	r2, r1
 80090d8:	641a      	str	r2, [r3, #64]	; 0x40
 80090da:	4b0e      	ldr	r3, [pc, #56]	; (8009114 <HAL_MspInit+0x4c>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	2201      	movs	r2, #1
 80090e0:	4013      	ands	r3, r2
 80090e2:	607b      	str	r3, [r7, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <HAL_MspInit+0x4c>)
 80090e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <HAL_MspInit+0x4c>)
 80090ec:	2180      	movs	r1, #128	; 0x80
 80090ee:	0549      	lsls	r1, r1, #21
 80090f0:	430a      	orrs	r2, r1
 80090f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80090f4:	4b07      	ldr	r3, [pc, #28]	; (8009114 <HAL_MspInit+0x4c>)
 80090f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	055b      	lsls	r3, r3, #21
 80090fc:	4013      	ands	r3, r2
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8009102:	2380      	movs	r3, #128	; 0x80
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	0018      	movs	r0, r3
 8009108:	f7f9 fa90 	bl	800262c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800910c:	46c0      	nop			; (mov r8, r8)
 800910e:	46bd      	mov	sp, r7
 8009110:	b002      	add	sp, #8
 8009112:	bd80      	pop	{r7, pc}
 8009114:	40021000 	.word	0x40021000

08009118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b097      	sub	sp, #92	; 0x5c
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009120:	2344      	movs	r3, #68	; 0x44
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	0018      	movs	r0, r3
 8009126:	2314      	movs	r3, #20
 8009128:	001a      	movs	r2, r3
 800912a:	2100      	movs	r1, #0
 800912c:	f000 fa7f 	bl	800962e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009130:	2410      	movs	r4, #16
 8009132:	193b      	adds	r3, r7, r4
 8009134:	0018      	movs	r0, r3
 8009136:	2334      	movs	r3, #52	; 0x34
 8009138:	001a      	movs	r2, r3
 800913a:	2100      	movs	r1, #0
 800913c:	f000 fa77 	bl	800962e <memset>
  if(hadc->Instance==ADC1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a20      	ldr	r2, [pc, #128]	; (80091c8 <HAL_ADC_MspInit+0xb0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d139      	bne.n	80091be <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800914a:	193b      	adds	r3, r7, r4
 800914c:	2280      	movs	r2, #128	; 0x80
 800914e:	01d2      	lsls	r2, r2, #7
 8009150:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8009152:	193b      	adds	r3, r7, r4
 8009154:	2200      	movs	r2, #0
 8009156:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009158:	193b      	adds	r3, r7, r4
 800915a:	0018      	movs	r0, r3
 800915c:	f7fb f84a 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8009160:	1e03      	subs	r3, r0, #0
 8009162:	d001      	beq.n	8009168 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8009164:	f7fe ff22 	bl	8007fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009168:	4b18      	ldr	r3, [pc, #96]	; (80091cc <HAL_ADC_MspInit+0xb4>)
 800916a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800916c:	4b17      	ldr	r3, [pc, #92]	; (80091cc <HAL_ADC_MspInit+0xb4>)
 800916e:	2180      	movs	r1, #128	; 0x80
 8009170:	0349      	lsls	r1, r1, #13
 8009172:	430a      	orrs	r2, r1
 8009174:	641a      	str	r2, [r3, #64]	; 0x40
 8009176:	4b15      	ldr	r3, [pc, #84]	; (80091cc <HAL_ADC_MspInit+0xb4>)
 8009178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	035b      	lsls	r3, r3, #13
 800917e:	4013      	ands	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009184:	4b11      	ldr	r3, [pc, #68]	; (80091cc <HAL_ADC_MspInit+0xb4>)
 8009186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <HAL_ADC_MspInit+0xb4>)
 800918a:	2101      	movs	r1, #1
 800918c:	430a      	orrs	r2, r1
 800918e:	635a      	str	r2, [r3, #52]	; 0x34
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <HAL_ADC_MspInit+0xb4>)
 8009192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009194:	2201      	movs	r2, #1
 8009196:	4013      	ands	r3, r2
 8009198:	60bb      	str	r3, [r7, #8]
 800919a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_Pin;
 800919c:	2144      	movs	r1, #68	; 0x44
 800919e:	187b      	adds	r3, r7, r1
 80091a0:	2201      	movs	r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80091a4:	187b      	adds	r3, r7, r1
 80091a6:	2203      	movs	r2, #3
 80091a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	2200      	movs	r2, #0
 80091ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 80091b0:	187a      	adds	r2, r7, r1
 80091b2:	23a0      	movs	r3, #160	; 0xa0
 80091b4:	05db      	lsls	r3, r3, #23
 80091b6:	0011      	movs	r1, r2
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7f9 ffc9 	bl	8003150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	46bd      	mov	sp, r7
 80091c2:	b017      	add	sp, #92	; 0x5c
 80091c4:	bd90      	pop	{r4, r7, pc}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	40012400 	.word	0x40012400
 80091cc:	40021000 	.word	0x40021000

080091d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80091d0:	b590      	push	{r4, r7, lr}
 80091d2:	b097      	sub	sp, #92	; 0x5c
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d8:	2344      	movs	r3, #68	; 0x44
 80091da:	18fb      	adds	r3, r7, r3
 80091dc:	0018      	movs	r0, r3
 80091de:	2314      	movs	r3, #20
 80091e0:	001a      	movs	r2, r3
 80091e2:	2100      	movs	r1, #0
 80091e4:	f000 fa23 	bl	800962e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80091e8:	2410      	movs	r4, #16
 80091ea:	193b      	adds	r3, r7, r4
 80091ec:	0018      	movs	r0, r3
 80091ee:	2334      	movs	r3, #52	; 0x34
 80091f0:	001a      	movs	r2, r3
 80091f2:	2100      	movs	r1, #0
 80091f4:	f000 fa1b 	bl	800962e <memset>
  if(hi2c->Instance==I2C1)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a22      	ldr	r2, [pc, #136]	; (8009288 <HAL_I2C_MspInit+0xb8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d13e      	bne.n	8009280 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009202:	193b      	adds	r3, r7, r4
 8009204:	2220      	movs	r2, #32
 8009206:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009208:	193b      	adds	r3, r7, r4
 800920a:	2200      	movs	r2, #0
 800920c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800920e:	193b      	adds	r3, r7, r4
 8009210:	0018      	movs	r0, r3
 8009212:	f7fa ffef 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8009216:	1e03      	subs	r3, r0, #0
 8009218:	d001      	beq.n	800921e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800921a:	f7fe fec7 	bl	8007fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800921e:	4b1b      	ldr	r3, [pc, #108]	; (800928c <HAL_I2C_MspInit+0xbc>)
 8009220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009222:	4b1a      	ldr	r3, [pc, #104]	; (800928c <HAL_I2C_MspInit+0xbc>)
 8009224:	2102      	movs	r1, #2
 8009226:	430a      	orrs	r2, r1
 8009228:	635a      	str	r2, [r3, #52]	; 0x34
 800922a:	4b18      	ldr	r3, [pc, #96]	; (800928c <HAL_I2C_MspInit+0xbc>)
 800922c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922e:	2202      	movs	r2, #2
 8009230:	4013      	ands	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8009236:	2144      	movs	r1, #68	; 0x44
 8009238:	187b      	adds	r3, r7, r1
 800923a:	22c0      	movs	r2, #192	; 0xc0
 800923c:	0092      	lsls	r2, r2, #2
 800923e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009240:	187b      	adds	r3, r7, r1
 8009242:	2212      	movs	r2, #18
 8009244:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009246:	187b      	adds	r3, r7, r1
 8009248:	2200      	movs	r2, #0
 800924a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800924c:	187b      	adds	r3, r7, r1
 800924e:	2200      	movs	r2, #0
 8009250:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8009252:	187b      	adds	r3, r7, r1
 8009254:	2206      	movs	r2, #6
 8009256:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009258:	187b      	adds	r3, r7, r1
 800925a:	4a0d      	ldr	r2, [pc, #52]	; (8009290 <HAL_I2C_MspInit+0xc0>)
 800925c:	0019      	movs	r1, r3
 800925e:	0010      	movs	r0, r2
 8009260:	f7f9 ff76 	bl	8003150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <HAL_I2C_MspInit+0xbc>)
 8009266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009268:	4b08      	ldr	r3, [pc, #32]	; (800928c <HAL_I2C_MspInit+0xbc>)
 800926a:	2180      	movs	r1, #128	; 0x80
 800926c:	0389      	lsls	r1, r1, #14
 800926e:	430a      	orrs	r2, r1
 8009270:	63da      	str	r2, [r3, #60]	; 0x3c
 8009272:	4b06      	ldr	r3, [pc, #24]	; (800928c <HAL_I2C_MspInit+0xbc>)
 8009274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009276:	2380      	movs	r3, #128	; 0x80
 8009278:	039b      	lsls	r3, r3, #14
 800927a:	4013      	ands	r3, r2
 800927c:	60bb      	str	r3, [r7, #8]
 800927e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009280:	46c0      	nop			; (mov r8, r8)
 8009282:	46bd      	mov	sp, r7
 8009284:	b017      	add	sp, #92	; 0x5c
 8009286:	bd90      	pop	{r4, r7, pc}
 8009288:	40005400 	.word	0x40005400
 800928c:	40021000 	.word	0x40021000
 8009290:	50000400 	.word	0x50000400

08009294 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009294:	b590      	push	{r4, r7, lr}
 8009296:	b091      	sub	sp, #68	; 0x44
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800929c:	240c      	movs	r4, #12
 800929e:	193b      	adds	r3, r7, r4
 80092a0:	0018      	movs	r0, r3
 80092a2:	2334      	movs	r3, #52	; 0x34
 80092a4:	001a      	movs	r2, r3
 80092a6:	2100      	movs	r1, #0
 80092a8:	f000 f9c1 	bl	800962e <memset>
  if(hrtc->Instance==RTC)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a15      	ldr	r2, [pc, #84]	; (8009308 <HAL_RTC_MspInit+0x74>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d124      	bne.n	8009300 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80092b6:	193b      	adds	r3, r7, r4
 80092b8:	2280      	movs	r2, #128	; 0x80
 80092ba:	0292      	lsls	r2, r2, #10
 80092bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80092be:	193b      	adds	r3, r7, r4
 80092c0:	2280      	movs	r2, #128	; 0x80
 80092c2:	0052      	lsls	r2, r2, #1
 80092c4:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80092c6:	193b      	adds	r3, r7, r4
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7fa ff93 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 80092ce:	1e03      	subs	r3, r0, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80092d2:	f7fe fe6b 	bl	8007fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80092d6:	4b0d      	ldr	r3, [pc, #52]	; (800930c <HAL_RTC_MspInit+0x78>)
 80092d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092da:	4b0c      	ldr	r3, [pc, #48]	; (800930c <HAL_RTC_MspInit+0x78>)
 80092dc:	2180      	movs	r1, #128	; 0x80
 80092de:	0209      	lsls	r1, r1, #8
 80092e0:	430a      	orrs	r2, r1
 80092e2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80092e4:	4b09      	ldr	r3, [pc, #36]	; (800930c <HAL_RTC_MspInit+0x78>)
 80092e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e8:	4b08      	ldr	r3, [pc, #32]	; (800930c <HAL_RTC_MspInit+0x78>)
 80092ea:	2180      	movs	r1, #128	; 0x80
 80092ec:	00c9      	lsls	r1, r1, #3
 80092ee:	430a      	orrs	r2, r1
 80092f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80092f2:	4b06      	ldr	r3, [pc, #24]	; (800930c <HAL_RTC_MspInit+0x78>)
 80092f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092f6:	2380      	movs	r3, #128	; 0x80
 80092f8:	00db      	lsls	r3, r3, #3
 80092fa:	4013      	ands	r3, r2
 80092fc:	60bb      	str	r3, [r7, #8]
 80092fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009300:	46c0      	nop			; (mov r8, r8)
 8009302:	46bd      	mov	sp, r7
 8009304:	b011      	add	sp, #68	; 0x44
 8009306:	bd90      	pop	{r4, r7, pc}
 8009308:	40002800 	.word	0x40002800
 800930c:	40021000 	.word	0x40021000

08009310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009310:	b590      	push	{r4, r7, lr}
 8009312:	b093      	sub	sp, #76	; 0x4c
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009318:	2414      	movs	r4, #20
 800931a:	193b      	adds	r3, r7, r4
 800931c:	0018      	movs	r0, r3
 800931e:	2334      	movs	r3, #52	; 0x34
 8009320:	001a      	movs	r2, r3
 8009322:	2100      	movs	r1, #0
 8009324:	f000 f983 	bl	800962e <memset>
  if(htim_base->Instance==TIM1)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <HAL_TIM_Base_MspInit+0xbc>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d12d      	bne.n	800938e <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8009332:	193b      	adds	r3, r7, r4
 8009334:	2280      	movs	r2, #128	; 0x80
 8009336:	0392      	lsls	r2, r2, #14
 8009338:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800933a:	193b      	adds	r3, r7, r4
 800933c:	2200      	movs	r2, #0
 800933e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009340:	193b      	adds	r3, r7, r4
 8009342:	0018      	movs	r0, r3
 8009344:	f7fa ff56 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8009348:	1e03      	subs	r3, r0, #0
 800934a:	d001      	beq.n	8009350 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800934c:	f7fe fe2e 	bl	8007fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009350:	4b1f      	ldr	r3, [pc, #124]	; (80093d0 <HAL_TIM_Base_MspInit+0xc0>)
 8009352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009354:	4b1e      	ldr	r3, [pc, #120]	; (80093d0 <HAL_TIM_Base_MspInit+0xc0>)
 8009356:	2180      	movs	r1, #128	; 0x80
 8009358:	0109      	lsls	r1, r1, #4
 800935a:	430a      	orrs	r2, r1
 800935c:	641a      	str	r2, [r3, #64]	; 0x40
 800935e:	4b1c      	ldr	r3, [pc, #112]	; (80093d0 <HAL_TIM_Base_MspInit+0xc0>)
 8009360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009362:	2380      	movs	r3, #128	; 0x80
 8009364:	011b      	lsls	r3, r3, #4
 8009366:	4013      	ands	r3, r2
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	200d      	movs	r0, #13
 8009372:	f7f9 febb 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8009376:	200d      	movs	r0, #13
 8009378:	f7f9 fecd 	bl	8003116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	200e      	movs	r0, #14
 8009382:	f7f9 feb3 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009386:	200e      	movs	r0, #14
 8009388:	f7f9 fec5 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800938c:	e019      	b.n	80093c2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	2380      	movs	r3, #128	; 0x80
 8009394:	05db      	lsls	r3, r3, #23
 8009396:	429a      	cmp	r2, r3
 8009398:	d113      	bne.n	80093c2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800939a:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <HAL_TIM_Base_MspInit+0xc0>)
 800939c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800939e:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <HAL_TIM_Base_MspInit+0xc0>)
 80093a0:	2101      	movs	r1, #1
 80093a2:	430a      	orrs	r2, r1
 80093a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <HAL_TIM_Base_MspInit+0xc0>)
 80093a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093aa:	2201      	movs	r2, #1
 80093ac:	4013      	ands	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	200f      	movs	r0, #15
 80093b8:	f7f9 fe98 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80093bc:	200f      	movs	r0, #15
 80093be:	f7f9 feaa 	bl	8003116 <HAL_NVIC_EnableIRQ>
}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b013      	add	sp, #76	; 0x4c
 80093c8:	bd90      	pop	{r4, r7, pc}
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	40021000 	.word	0x40021000

080093d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b097      	sub	sp, #92	; 0x5c
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093dc:	2344      	movs	r3, #68	; 0x44
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	0018      	movs	r0, r3
 80093e2:	2314      	movs	r3, #20
 80093e4:	001a      	movs	r2, r3
 80093e6:	2100      	movs	r1, #0
 80093e8:	f000 f921 	bl	800962e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80093ec:	2410      	movs	r4, #16
 80093ee:	193b      	adds	r3, r7, r4
 80093f0:	0018      	movs	r0, r3
 80093f2:	2334      	movs	r3, #52	; 0x34
 80093f4:	001a      	movs	r2, r3
 80093f6:	2100      	movs	r1, #0
 80093f8:	f000 f919 	bl	800962e <memset>
  if(huart->Instance==USART2)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a22      	ldr	r2, [pc, #136]	; (800948c <HAL_UART_MspInit+0xb8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d13e      	bne.n	8009484 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009406:	193b      	adds	r3, r7, r4
 8009408:	2202      	movs	r2, #2
 800940a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800940c:	193b      	adds	r3, r7, r4
 800940e:	2200      	movs	r2, #0
 8009410:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009412:	193b      	adds	r3, r7, r4
 8009414:	0018      	movs	r0, r3
 8009416:	f7fa feed 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 800941a:	1e03      	subs	r3, r0, #0
 800941c:	d001      	beq.n	8009422 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800941e:	f7fe fdc5 	bl	8007fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009422:	4b1b      	ldr	r3, [pc, #108]	; (8009490 <HAL_UART_MspInit+0xbc>)
 8009424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009426:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <HAL_UART_MspInit+0xbc>)
 8009428:	2180      	movs	r1, #128	; 0x80
 800942a:	0289      	lsls	r1, r1, #10
 800942c:	430a      	orrs	r2, r1
 800942e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <HAL_UART_MspInit+0xbc>)
 8009432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009434:	2380      	movs	r3, #128	; 0x80
 8009436:	029b      	lsls	r3, r3, #10
 8009438:	4013      	ands	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800943e:	4b14      	ldr	r3, [pc, #80]	; (8009490 <HAL_UART_MspInit+0xbc>)
 8009440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <HAL_UART_MspInit+0xbc>)
 8009444:	2101      	movs	r1, #1
 8009446:	430a      	orrs	r2, r1
 8009448:	635a      	str	r2, [r3, #52]	; 0x34
 800944a:	4b11      	ldr	r3, [pc, #68]	; (8009490 <HAL_UART_MspInit+0xbc>)
 800944c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944e:	2201      	movs	r2, #1
 8009450:	4013      	ands	r3, r2
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009456:	2144      	movs	r1, #68	; 0x44
 8009458:	187b      	adds	r3, r7, r1
 800945a:	220c      	movs	r2, #12
 800945c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800945e:	187b      	adds	r3, r7, r1
 8009460:	2202      	movs	r2, #2
 8009462:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009464:	187b      	adds	r3, r7, r1
 8009466:	2200      	movs	r2, #0
 8009468:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800946a:	187b      	adds	r3, r7, r1
 800946c:	2200      	movs	r2, #0
 800946e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8009470:	187b      	adds	r3, r7, r1
 8009472:	2201      	movs	r2, #1
 8009474:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009476:	187a      	adds	r2, r7, r1
 8009478:	23a0      	movs	r3, #160	; 0xa0
 800947a:	05db      	lsls	r3, r3, #23
 800947c:	0011      	movs	r1, r2
 800947e:	0018      	movs	r0, r3
 8009480:	f7f9 fe66 	bl	8003150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009484:	46c0      	nop			; (mov r8, r8)
 8009486:	46bd      	mov	sp, r7
 8009488:	b017      	add	sp, #92	; 0x5c
 800948a:	bd90      	pop	{r4, r7, pc}
 800948c:	40004400 	.word	0x40004400
 8009490:	40021000 	.word	0x40021000

08009494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009498:	e7fe      	b.n	8009498 <NMI_Handler+0x4>

0800949a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800949e:	e7fe      	b.n	800949e <HardFault_Handler+0x4>

080094a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80094a4:	46c0      	nop			; (mov r8, r8)
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80094b8:	f7f9 f878 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80094bc:	46c0      	nop			; (mov r8, r8)
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 80094c6:	2008      	movs	r0, #8
 80094c8:	f7f9 ffe0 	bl	800348c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80094cc:	46c0      	nop			; (mov r8, r8)
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 80094d6:	2010      	movs	r0, #16
 80094d8:	f7f9 ffd8 	bl	800348c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 80094dc:	2020      	movs	r0, #32
 80094de:	f7f9 ffd5 	bl	800348c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 80094e2:	2040      	movs	r0, #64	; 0x40
 80094e4:	f7f9 ffd2 	bl	800348c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 80094e8:	2080      	movs	r0, #128	; 0x80
 80094ea:	f7f9 ffcf 	bl	800348c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80094f8:	4b03      	ldr	r3, [pc, #12]	; (8009508 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80094fa:	0018      	movs	r0, r3
 80094fc:	f7fb fc54 	bl	8004da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8009500:	46c0      	nop			; (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	200002d8 	.word	0x200002d8

0800950c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009510:	4b03      	ldr	r3, [pc, #12]	; (8009520 <TIM1_CC_IRQHandler+0x14>)
 8009512:	0018      	movs	r0, r3
 8009514:	f7fb fc48 	bl	8004da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8009518:	46c0      	nop			; (mov r8, r8)
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	200002d8 	.word	0x200002d8

08009524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009528:	4b03      	ldr	r3, [pc, #12]	; (8009538 <TIM2_IRQHandler+0x14>)
 800952a:	0018      	movs	r0, r3
 800952c:	f7fb fc3c 	bl	8004da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009530:	46c0      	nop			; (mov r8, r8)
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	20000324 	.word	0x20000324

0800953c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009540:	46c0      	nop			; (mov r8, r8)
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009548:	480d      	ldr	r0, [pc, #52]	; (8009580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800954a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800954c:	f7ff fff6 	bl	800953c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009550:	480c      	ldr	r0, [pc, #48]	; (8009584 <LoopForever+0x6>)
  ldr r1, =_edata
 8009552:	490d      	ldr	r1, [pc, #52]	; (8009588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009554:	4a0d      	ldr	r2, [pc, #52]	; (800958c <LoopForever+0xe>)
  movs r3, #0
 8009556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009558:	e002      	b.n	8009560 <LoopCopyDataInit>

0800955a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800955a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800955c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800955e:	3304      	adds	r3, #4

08009560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009564:	d3f9      	bcc.n	800955a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009566:	4a0a      	ldr	r2, [pc, #40]	; (8009590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009568:	4c0a      	ldr	r4, [pc, #40]	; (8009594 <LoopForever+0x16>)
  movs r3, #0
 800956a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800956c:	e001      	b.n	8009572 <LoopFillZerobss>

0800956e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800956e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009570:	3204      	adds	r2, #4

08009572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009574:	d3fb      	bcc.n	800956e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009576:	f000 f811 	bl	800959c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800957a:	f7fd ff4f 	bl	800741c <main>

0800957e <LoopForever>:

LoopForever:
  b LoopForever
 800957e:	e7fe      	b.n	800957e <LoopForever>
  ldr   r0, =_estack
 8009580:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8009584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800958c:	08009aa0 	.word	0x08009aa0
  ldr r2, =_sbss
 8009590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8009594:	20000404 	.word	0x20000404

08009598 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009598:	e7fe      	b.n	8009598 <ADC1_COMP_IRQHandler>
	...

0800959c <__libc_init_array>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	2600      	movs	r6, #0
 80095a0:	4d0c      	ldr	r5, [pc, #48]	; (80095d4 <__libc_init_array+0x38>)
 80095a2:	4c0d      	ldr	r4, [pc, #52]	; (80095d8 <__libc_init_array+0x3c>)
 80095a4:	1b64      	subs	r4, r4, r5
 80095a6:	10a4      	asrs	r4, r4, #2
 80095a8:	42a6      	cmp	r6, r4
 80095aa:	d109      	bne.n	80095c0 <__libc_init_array+0x24>
 80095ac:	2600      	movs	r6, #0
 80095ae:	f000 f87d 	bl	80096ac <_init>
 80095b2:	4d0a      	ldr	r5, [pc, #40]	; (80095dc <__libc_init_array+0x40>)
 80095b4:	4c0a      	ldr	r4, [pc, #40]	; (80095e0 <__libc_init_array+0x44>)
 80095b6:	1b64      	subs	r4, r4, r5
 80095b8:	10a4      	asrs	r4, r4, #2
 80095ba:	42a6      	cmp	r6, r4
 80095bc:	d105      	bne.n	80095ca <__libc_init_array+0x2e>
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	00b3      	lsls	r3, r6, #2
 80095c2:	58eb      	ldr	r3, [r5, r3]
 80095c4:	4798      	blx	r3
 80095c6:	3601      	adds	r6, #1
 80095c8:	e7ee      	b.n	80095a8 <__libc_init_array+0xc>
 80095ca:	00b3      	lsls	r3, r6, #2
 80095cc:	58eb      	ldr	r3, [r5, r3]
 80095ce:	4798      	blx	r3
 80095d0:	3601      	adds	r6, #1
 80095d2:	e7f2      	b.n	80095ba <__libc_init_array+0x1e>
 80095d4:	08009a98 	.word	0x08009a98
 80095d8:	08009a98 	.word	0x08009a98
 80095dc:	08009a98 	.word	0x08009a98
 80095e0:	08009a9c 	.word	0x08009a9c

080095e4 <__itoa>:
 80095e4:	1e93      	subs	r3, r2, #2
 80095e6:	b510      	push	{r4, lr}
 80095e8:	000c      	movs	r4, r1
 80095ea:	2b22      	cmp	r3, #34	; 0x22
 80095ec:	d904      	bls.n	80095f8 <__itoa+0x14>
 80095ee:	2300      	movs	r3, #0
 80095f0:	001c      	movs	r4, r3
 80095f2:	700b      	strb	r3, [r1, #0]
 80095f4:	0020      	movs	r0, r4
 80095f6:	bd10      	pop	{r4, pc}
 80095f8:	2a0a      	cmp	r2, #10
 80095fa:	d109      	bne.n	8009610 <__itoa+0x2c>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	da07      	bge.n	8009610 <__itoa+0x2c>
 8009600:	232d      	movs	r3, #45	; 0x2d
 8009602:	700b      	strb	r3, [r1, #0]
 8009604:	2101      	movs	r1, #1
 8009606:	4240      	negs	r0, r0
 8009608:	1861      	adds	r1, r4, r1
 800960a:	f000 f819 	bl	8009640 <__utoa>
 800960e:	e7f1      	b.n	80095f4 <__itoa+0x10>
 8009610:	2100      	movs	r1, #0
 8009612:	e7f9      	b.n	8009608 <__itoa+0x24>

08009614 <itoa>:
 8009614:	b510      	push	{r4, lr}
 8009616:	f7ff ffe5 	bl	80095e4 <__itoa>
 800961a:	bd10      	pop	{r4, pc}

0800961c <memcpy>:
 800961c:	2300      	movs	r3, #0
 800961e:	b510      	push	{r4, lr}
 8009620:	429a      	cmp	r2, r3
 8009622:	d100      	bne.n	8009626 <memcpy+0xa>
 8009624:	bd10      	pop	{r4, pc}
 8009626:	5ccc      	ldrb	r4, [r1, r3]
 8009628:	54c4      	strb	r4, [r0, r3]
 800962a:	3301      	adds	r3, #1
 800962c:	e7f8      	b.n	8009620 <memcpy+0x4>

0800962e <memset>:
 800962e:	0003      	movs	r3, r0
 8009630:	1882      	adds	r2, r0, r2
 8009632:	4293      	cmp	r3, r2
 8009634:	d100      	bne.n	8009638 <memset+0xa>
 8009636:	4770      	bx	lr
 8009638:	7019      	strb	r1, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	e7f9      	b.n	8009632 <memset+0x4>
	...

08009640 <__utoa>:
 8009640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009642:	0016      	movs	r6, r2
 8009644:	b08d      	sub	sp, #52	; 0x34
 8009646:	0007      	movs	r7, r0
 8009648:	000c      	movs	r4, r1
 800964a:	2225      	movs	r2, #37	; 0x25
 800964c:	4916      	ldr	r1, [pc, #88]	; (80096a8 <__utoa+0x68>)
 800964e:	a802      	add	r0, sp, #8
 8009650:	f7ff ffe4 	bl	800961c <memcpy>
 8009654:	1eb3      	subs	r3, r6, #2
 8009656:	2500      	movs	r5, #0
 8009658:	2b22      	cmp	r3, #34	; 0x22
 800965a:	d820      	bhi.n	800969e <__utoa+0x5e>
 800965c:	1e63      	subs	r3, r4, #1
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	ab02      	add	r3, sp, #8
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	0038      	movs	r0, r7
 8009666:	0031      	movs	r1, r6
 8009668:	f7f6 fdd2 	bl	8000210 <__aeabi_uidivmod>
 800966c:	000b      	movs	r3, r1
 800966e:	9a01      	ldr	r2, [sp, #4]
 8009670:	0029      	movs	r1, r5
 8009672:	5cd3      	ldrb	r3, [r2, r3]
 8009674:	9a00      	ldr	r2, [sp, #0]
 8009676:	3501      	adds	r5, #1
 8009678:	5553      	strb	r3, [r2, r5]
 800967a:	003b      	movs	r3, r7
 800967c:	0007      	movs	r7, r0
 800967e:	429e      	cmp	r6, r3
 8009680:	d9f0      	bls.n	8009664 <__utoa+0x24>
 8009682:	2300      	movs	r3, #0
 8009684:	0022      	movs	r2, r4
 8009686:	5563      	strb	r3, [r4, r5]
 8009688:	000b      	movs	r3, r1
 800968a:	1ac8      	subs	r0, r1, r3
 800968c:	4283      	cmp	r3, r0
 800968e:	dd08      	ble.n	80096a2 <__utoa+0x62>
 8009690:	7810      	ldrb	r0, [r2, #0]
 8009692:	5ce5      	ldrb	r5, [r4, r3]
 8009694:	7015      	strb	r5, [r2, #0]
 8009696:	54e0      	strb	r0, [r4, r3]
 8009698:	3201      	adds	r2, #1
 800969a:	3b01      	subs	r3, #1
 800969c:	e7f5      	b.n	800968a <__utoa+0x4a>
 800969e:	7025      	strb	r5, [r4, #0]
 80096a0:	002c      	movs	r4, r5
 80096a2:	0020      	movs	r0, r4
 80096a4:	b00d      	add	sp, #52	; 0x34
 80096a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a8:	08009a68 	.word	0x08009a68

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
