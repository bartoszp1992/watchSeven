
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b794  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800b850  0800b850  0001b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbac  0800bbac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbb4  0800bbb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbb8  0800bbb8  0001bbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800bbbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  2000000c  0800bbc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800bbc8  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fe2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db4  00000000  00000000  00046016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00049dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  0004b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d446  00000000  00000000  0004c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d71b  00000000  00000000  00069e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b381f  00000000  00000000  00087549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ad68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005700  00000000  00000000  0013adbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b838 	.word	0x0800b838

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800b838 	.word	0x0800b838

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_ldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d115      	bne.n	8000420 <__aeabi_ldivmod+0x30>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d113      	bne.n	8000420 <__aeabi_ldivmod+0x30>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	db06      	blt.n	800040a <__aeabi_ldivmod+0x1a>
 80003fc:	dc01      	bgt.n	8000402 <__aeabi_ldivmod+0x12>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d006      	beq.n	8000410 <__aeabi_ldivmod+0x20>
 8000402:	2000      	movs	r0, #0
 8000404:	43c0      	mvns	r0, r0
 8000406:	0841      	lsrs	r1, r0, #1
 8000408:	e002      	b.n	8000410 <__aeabi_ldivmod+0x20>
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	0609      	lsls	r1, r1, #24
 800040e:	2000      	movs	r0, #0
 8000410:	b407      	push	{r0, r1, r2}
 8000412:	4802      	ldr	r0, [pc, #8]	; (800041c <__aeabi_ldivmod+0x2c>)
 8000414:	a101      	add	r1, pc, #4	; (adr r1, 800041c <__aeabi_ldivmod+0x2c>)
 8000416:	1840      	adds	r0, r0, r1
 8000418:	9002      	str	r0, [sp, #8]
 800041a:	bd03      	pop	{r0, r1, pc}
 800041c:	ffffffd1 	.word	0xffffffd1
 8000420:	b403      	push	{r0, r1}
 8000422:	4668      	mov	r0, sp
 8000424:	b501      	push	{r0, lr}
 8000426:	9802      	ldr	r0, [sp, #8]
 8000428:	f000 f932 	bl	8000690 <__gnu_ldivmod_helper>
 800042c:	9b01      	ldr	r3, [sp, #4]
 800042e:	469e      	mov	lr, r3
 8000430:	b002      	add	sp, #8
 8000432:	bc0c      	pop	{r2, r3}
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_uldivmod>:
 8000438:	2b00      	cmp	r3, #0
 800043a:	d111      	bne.n	8000460 <__aeabi_uldivmod+0x28>
 800043c:	2a00      	cmp	r2, #0
 800043e:	d10f      	bne.n	8000460 <__aeabi_uldivmod+0x28>
 8000440:	2900      	cmp	r1, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_uldivmod+0xe>
 8000444:	2800      	cmp	r0, #0
 8000446:	d002      	beq.n	800044e <__aeabi_uldivmod+0x16>
 8000448:	2100      	movs	r1, #0
 800044a:	43c9      	mvns	r1, r1
 800044c:	1c08      	adds	r0, r1, #0
 800044e:	b407      	push	{r0, r1, r2}
 8000450:	4802      	ldr	r0, [pc, #8]	; (800045c <__aeabi_uldivmod+0x24>)
 8000452:	a102      	add	r1, pc, #8	; (adr r1, 800045c <__aeabi_uldivmod+0x24>)
 8000454:	1840      	adds	r0, r0, r1
 8000456:	9002      	str	r0, [sp, #8]
 8000458:	bd03      	pop	{r0, r1, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	ffffff91 	.word	0xffffff91
 8000460:	b403      	push	{r0, r1}
 8000462:	4668      	mov	r0, sp
 8000464:	b501      	push	{r0, lr}
 8000466:	9802      	ldr	r0, [sp, #8]
 8000468:	f000 f846 	bl	80004f8 <__udivmoddi4>
 800046c:	9b01      	ldr	r3, [sp, #4]
 800046e:	469e      	mov	lr, r3
 8000470:	b002      	add	sp, #8
 8000472:	bc0c      	pop	{r2, r3}
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_lmul>:
 8000478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047a:	0415      	lsls	r5, r2, #16
 800047c:	0c2d      	lsrs	r5, r5, #16
 800047e:	000f      	movs	r7, r1
 8000480:	0001      	movs	r1, r0
 8000482:	002e      	movs	r6, r5
 8000484:	46c6      	mov	lr, r8
 8000486:	4684      	mov	ip, r0
 8000488:	0400      	lsls	r0, r0, #16
 800048a:	0c14      	lsrs	r4, r2, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	0c09      	lsrs	r1, r1, #16
 8000490:	4346      	muls	r6, r0
 8000492:	434d      	muls	r5, r1
 8000494:	4360      	muls	r0, r4
 8000496:	4361      	muls	r1, r4
 8000498:	1940      	adds	r0, r0, r5
 800049a:	0c34      	lsrs	r4, r6, #16
 800049c:	1824      	adds	r4, r4, r0
 800049e:	b500      	push	{lr}
 80004a0:	42a5      	cmp	r5, r4
 80004a2:	d903      	bls.n	80004ac <__aeabi_lmul+0x34>
 80004a4:	2080      	movs	r0, #128	; 0x80
 80004a6:	0240      	lsls	r0, r0, #9
 80004a8:	4680      	mov	r8, r0
 80004aa:	4441      	add	r1, r8
 80004ac:	0c25      	lsrs	r5, r4, #16
 80004ae:	186d      	adds	r5, r5, r1
 80004b0:	4661      	mov	r1, ip
 80004b2:	4359      	muls	r1, r3
 80004b4:	437a      	muls	r2, r7
 80004b6:	0430      	lsls	r0, r6, #16
 80004b8:	1949      	adds	r1, r1, r5
 80004ba:	0424      	lsls	r4, r4, #16
 80004bc:	0c00      	lsrs	r0, r0, #16
 80004be:	1820      	adds	r0, r4, r0
 80004c0:	1889      	adds	r1, r1, r2
 80004c2:	bc80      	pop	{r7}
 80004c4:	46b8      	mov	r8, r7
 80004c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004c8 <__aeabi_f2uiz>:
 80004c8:	219e      	movs	r1, #158	; 0x9e
 80004ca:	b510      	push	{r4, lr}
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	1c04      	adds	r4, r0, #0
 80004d0:	f001 ff7a 	bl	80023c8 <__aeabi_fcmpge>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d103      	bne.n	80004e0 <__aeabi_f2uiz+0x18>
 80004d8:	1c20      	adds	r0, r4, #0
 80004da:	f000 fe81 	bl	80011e0 <__aeabi_f2iz>
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	1c20      	adds	r0, r4, #0
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	f000 fcb3 	bl	8000e50 <__aeabi_fsub>
 80004ea:	f000 fe79 	bl	80011e0 <__aeabi_f2iz>
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	469c      	mov	ip, r3
 80004f4:	4460      	add	r0, ip
 80004f6:	e7f2      	b.n	80004de <__aeabi_f2uiz+0x16>

080004f8 <__udivmoddi4>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	4657      	mov	r7, sl
 80004fc:	464e      	mov	r6, r9
 80004fe:	4645      	mov	r5, r8
 8000500:	46de      	mov	lr, fp
 8000502:	b5e0      	push	{r5, r6, r7, lr}
 8000504:	0004      	movs	r4, r0
 8000506:	000d      	movs	r5, r1
 8000508:	4692      	mov	sl, r2
 800050a:	4699      	mov	r9, r3
 800050c:	b083      	sub	sp, #12
 800050e:	428b      	cmp	r3, r1
 8000510:	d830      	bhi.n	8000574 <__udivmoddi4+0x7c>
 8000512:	d02d      	beq.n	8000570 <__udivmoddi4+0x78>
 8000514:	4649      	mov	r1, r9
 8000516:	4650      	mov	r0, sl
 8000518:	f001 ff7e 	bl	8002418 <__clzdi2>
 800051c:	0029      	movs	r1, r5
 800051e:	0006      	movs	r6, r0
 8000520:	0020      	movs	r0, r4
 8000522:	f001 ff79 	bl	8002418 <__clzdi2>
 8000526:	1a33      	subs	r3, r6, r0
 8000528:	4698      	mov	r8, r3
 800052a:	3b20      	subs	r3, #32
 800052c:	469b      	mov	fp, r3
 800052e:	d433      	bmi.n	8000598 <__udivmoddi4+0xa0>
 8000530:	465a      	mov	r2, fp
 8000532:	4653      	mov	r3, sl
 8000534:	4093      	lsls	r3, r2
 8000536:	4642      	mov	r2, r8
 8000538:	001f      	movs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d83a      	bhi.n	80005ba <__udivmoddi4+0xc2>
 8000544:	42af      	cmp	r7, r5
 8000546:	d100      	bne.n	800054a <__udivmoddi4+0x52>
 8000548:	e078      	b.n	800063c <__udivmoddi4+0x144>
 800054a:	465b      	mov	r3, fp
 800054c:	1ba4      	subs	r4, r4, r6
 800054e:	41bd      	sbcs	r5, r7
 8000550:	2b00      	cmp	r3, #0
 8000552:	da00      	bge.n	8000556 <__udivmoddi4+0x5e>
 8000554:	e075      	b.n	8000642 <__udivmoddi4+0x14a>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	465a      	mov	r2, fp
 8000562:	4093      	lsls	r3, r2
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	4642      	mov	r2, r8
 800056a:	4093      	lsls	r3, r2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e028      	b.n	80005c2 <__udivmoddi4+0xca>
 8000570:	4282      	cmp	r2, r0
 8000572:	d9cf      	bls.n	8000514 <__udivmoddi4+0x1c>
 8000574:	2200      	movs	r2, #0
 8000576:	2300      	movs	r3, #0
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <__udivmoddi4+0x8e>
 8000582:	601c      	str	r4, [r3, #0]
 8000584:	605d      	str	r5, [r3, #4]
 8000586:	9800      	ldr	r0, [sp, #0]
 8000588:	9901      	ldr	r1, [sp, #4]
 800058a:	b003      	add	sp, #12
 800058c:	bcf0      	pop	{r4, r5, r6, r7}
 800058e:	46bb      	mov	fp, r7
 8000590:	46b2      	mov	sl, r6
 8000592:	46a9      	mov	r9, r5
 8000594:	46a0      	mov	r8, r4
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4652      	mov	r2, sl
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	4641      	mov	r1, r8
 80005a4:	0013      	movs	r3, r2
 80005a6:	464a      	mov	r2, r9
 80005a8:	408a      	lsls	r2, r1
 80005aa:	0017      	movs	r7, r2
 80005ac:	4642      	mov	r2, r8
 80005ae:	431f      	orrs	r7, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	4093      	lsls	r3, r2
 80005b4:	001e      	movs	r6, r3
 80005b6:	42af      	cmp	r7, r5
 80005b8:	d9c4      	bls.n	8000544 <__udivmoddi4+0x4c>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2300      	movs	r3, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0d9      	beq.n	800057c <__udivmoddi4+0x84>
 80005c8:	07fb      	lsls	r3, r7, #31
 80005ca:	0872      	lsrs	r2, r6, #1
 80005cc:	431a      	orrs	r2, r3
 80005ce:	4646      	mov	r6, r8
 80005d0:	087b      	lsrs	r3, r7, #1
 80005d2:	e00e      	b.n	80005f2 <__udivmoddi4+0xfa>
 80005d4:	42ab      	cmp	r3, r5
 80005d6:	d101      	bne.n	80005dc <__udivmoddi4+0xe4>
 80005d8:	42a2      	cmp	r2, r4
 80005da:	d80c      	bhi.n	80005f6 <__udivmoddi4+0xfe>
 80005dc:	1aa4      	subs	r4, r4, r2
 80005de:	419d      	sbcs	r5, r3
 80005e0:	2001      	movs	r0, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2100      	movs	r1, #0
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1824      	adds	r4, r4, r0
 80005ec:	414d      	adcs	r5, r1
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d006      	beq.n	8000600 <__udivmoddi4+0x108>
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	d9ee      	bls.n	80005d4 <__udivmoddi4+0xdc>
 80005f6:	3e01      	subs	r6, #1
 80005f8:	1924      	adds	r4, r4, r4
 80005fa:	416d      	adcs	r5, r5
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d1f8      	bne.n	80005f2 <__udivmoddi4+0xfa>
 8000600:	9800      	ldr	r0, [sp, #0]
 8000602:	9901      	ldr	r1, [sp, #4]
 8000604:	465b      	mov	r3, fp
 8000606:	1900      	adds	r0, r0, r4
 8000608:	4169      	adcs	r1, r5
 800060a:	2b00      	cmp	r3, #0
 800060c:	db24      	blt.n	8000658 <__udivmoddi4+0x160>
 800060e:	002b      	movs	r3, r5
 8000610:	465a      	mov	r2, fp
 8000612:	4644      	mov	r4, r8
 8000614:	40d3      	lsrs	r3, r2
 8000616:	002a      	movs	r2, r5
 8000618:	40e2      	lsrs	r2, r4
 800061a:	001c      	movs	r4, r3
 800061c:	465b      	mov	r3, fp
 800061e:	0015      	movs	r5, r2
 8000620:	2b00      	cmp	r3, #0
 8000622:	db2a      	blt.n	800067a <__udivmoddi4+0x182>
 8000624:	0026      	movs	r6, r4
 8000626:	409e      	lsls	r6, r3
 8000628:	0033      	movs	r3, r6
 800062a:	0026      	movs	r6, r4
 800062c:	4647      	mov	r7, r8
 800062e:	40be      	lsls	r6, r7
 8000630:	0032      	movs	r2, r6
 8000632:	1a80      	subs	r0, r0, r2
 8000634:	4199      	sbcs	r1, r3
 8000636:	9000      	str	r0, [sp, #0]
 8000638:	9101      	str	r1, [sp, #4]
 800063a:	e79f      	b.n	800057c <__udivmoddi4+0x84>
 800063c:	42a3      	cmp	r3, r4
 800063e:	d8bc      	bhi.n	80005ba <__udivmoddi4+0xc2>
 8000640:	e783      	b.n	800054a <__udivmoddi4+0x52>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	2100      	movs	r1, #0
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	9100      	str	r1, [sp, #0]
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	40da      	lsrs	r2, r3
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	e786      	b.n	8000566 <__udivmoddi4+0x6e>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	4646      	mov	r6, r8
 8000662:	409a      	lsls	r2, r3
 8000664:	0023      	movs	r3, r4
 8000666:	40f3      	lsrs	r3, r6
 8000668:	4644      	mov	r4, r8
 800066a:	4313      	orrs	r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	40e2      	lsrs	r2, r4
 8000670:	001c      	movs	r4, r3
 8000672:	465b      	mov	r3, fp
 8000674:	0015      	movs	r5, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	dad4      	bge.n	8000624 <__udivmoddi4+0x12c>
 800067a:	4642      	mov	r2, r8
 800067c:	002f      	movs	r7, r5
 800067e:	2320      	movs	r3, #32
 8000680:	0026      	movs	r6, r4
 8000682:	4097      	lsls	r7, r2
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	40de      	lsrs	r6, r3
 8000688:	003b      	movs	r3, r7
 800068a:	4333      	orrs	r3, r6
 800068c:	e7cd      	b.n	800062a <__udivmoddi4+0x132>
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <__gnu_ldivmod_helper>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	46ce      	mov	lr, r9
 8000694:	4647      	mov	r7, r8
 8000696:	b580      	push	{r7, lr}
 8000698:	4691      	mov	r9, r2
 800069a:	4698      	mov	r8, r3
 800069c:	0004      	movs	r4, r0
 800069e:	000d      	movs	r5, r1
 80006a0:	f001 fec6 	bl	8002430 <__divdi3>
 80006a4:	0007      	movs	r7, r0
 80006a6:	000e      	movs	r6, r1
 80006a8:	0002      	movs	r2, r0
 80006aa:	000b      	movs	r3, r1
 80006ac:	4648      	mov	r0, r9
 80006ae:	4641      	mov	r1, r8
 80006b0:	f7ff fee2 	bl	8000478 <__aeabi_lmul>
 80006b4:	1a24      	subs	r4, r4, r0
 80006b6:	418d      	sbcs	r5, r1
 80006b8:	9b08      	ldr	r3, [sp, #32]
 80006ba:	0038      	movs	r0, r7
 80006bc:	0031      	movs	r1, r6
 80006be:	601c      	str	r4, [r3, #0]
 80006c0:	605d      	str	r5, [r3, #4]
 80006c2:	bcc0      	pop	{r6, r7}
 80006c4:	46b9      	mov	r9, r7
 80006c6:	46b0      	mov	r8, r6
 80006c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)

080006cc <__aeabi_fadd>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	4646      	mov	r6, r8
 80006d0:	46d6      	mov	lr, sl
 80006d2:	464f      	mov	r7, r9
 80006d4:	024d      	lsls	r5, r1, #9
 80006d6:	0242      	lsls	r2, r0, #9
 80006d8:	b5c0      	push	{r6, r7, lr}
 80006da:	0a52      	lsrs	r2, r2, #9
 80006dc:	0a6e      	lsrs	r6, r5, #9
 80006de:	0047      	lsls	r7, r0, #1
 80006e0:	46b0      	mov	r8, r6
 80006e2:	0e3f      	lsrs	r7, r7, #24
 80006e4:	004e      	lsls	r6, r1, #1
 80006e6:	0fc4      	lsrs	r4, r0, #31
 80006e8:	00d0      	lsls	r0, r2, #3
 80006ea:	4694      	mov	ip, r2
 80006ec:	003b      	movs	r3, r7
 80006ee:	4682      	mov	sl, r0
 80006f0:	0e36      	lsrs	r6, r6, #24
 80006f2:	0fc9      	lsrs	r1, r1, #31
 80006f4:	09ad      	lsrs	r5, r5, #6
 80006f6:	428c      	cmp	r4, r1
 80006f8:	d06d      	beq.n	80007d6 <__aeabi_fadd+0x10a>
 80006fa:	1bb8      	subs	r0, r7, r6
 80006fc:	4681      	mov	r9, r0
 80006fe:	2800      	cmp	r0, #0
 8000700:	dd4d      	ble.n	800079e <__aeabi_fadd+0xd2>
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x3c>
 8000706:	e088      	b.n	800081a <__aeabi_fadd+0x14e>
 8000708:	2fff      	cmp	r7, #255	; 0xff
 800070a:	d05a      	beq.n	80007c2 <__aeabi_fadd+0xf6>
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	04db      	lsls	r3, r3, #19
 8000710:	431d      	orrs	r5, r3
 8000712:	464b      	mov	r3, r9
 8000714:	2201      	movs	r2, #1
 8000716:	2b1b      	cmp	r3, #27
 8000718:	dc0a      	bgt.n	8000730 <__aeabi_fadd+0x64>
 800071a:	002b      	movs	r3, r5
 800071c:	464a      	mov	r2, r9
 800071e:	4649      	mov	r1, r9
 8000720:	40d3      	lsrs	r3, r2
 8000722:	2220      	movs	r2, #32
 8000724:	1a52      	subs	r2, r2, r1
 8000726:	4095      	lsls	r5, r2
 8000728:	002a      	movs	r2, r5
 800072a:	1e55      	subs	r5, r2, #1
 800072c:	41aa      	sbcs	r2, r5
 800072e:	431a      	orrs	r2, r3
 8000730:	4653      	mov	r3, sl
 8000732:	1a9a      	subs	r2, r3, r2
 8000734:	0153      	lsls	r3, r2, #5
 8000736:	d400      	bmi.n	800073a <__aeabi_fadd+0x6e>
 8000738:	e0b9      	b.n	80008ae <__aeabi_fadd+0x1e2>
 800073a:	0192      	lsls	r2, r2, #6
 800073c:	0996      	lsrs	r6, r2, #6
 800073e:	0030      	movs	r0, r6
 8000740:	f001 fe4c 	bl	80023dc <__clzsi2>
 8000744:	3805      	subs	r0, #5
 8000746:	4086      	lsls	r6, r0
 8000748:	4287      	cmp	r7, r0
 800074a:	dd00      	ble.n	800074e <__aeabi_fadd+0x82>
 800074c:	e0d4      	b.n	80008f8 <__aeabi_fadd+0x22c>
 800074e:	0033      	movs	r3, r6
 8000750:	1bc7      	subs	r7, r0, r7
 8000752:	2020      	movs	r0, #32
 8000754:	3701      	adds	r7, #1
 8000756:	40fb      	lsrs	r3, r7
 8000758:	1bc7      	subs	r7, r0, r7
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1e56      	subs	r6, r2, #1
 8000760:	41b2      	sbcs	r2, r6
 8000762:	2700      	movs	r7, #0
 8000764:	431a      	orrs	r2, r3
 8000766:	0753      	lsls	r3, r2, #29
 8000768:	d004      	beq.n	8000774 <__aeabi_fadd+0xa8>
 800076a:	230f      	movs	r3, #15
 800076c:	4013      	ands	r3, r2
 800076e:	2b04      	cmp	r3, #4
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0xa8>
 8000772:	3204      	adds	r2, #4
 8000774:	0153      	lsls	r3, r2, #5
 8000776:	d400      	bmi.n	800077a <__aeabi_fadd+0xae>
 8000778:	e09c      	b.n	80008b4 <__aeabi_fadd+0x1e8>
 800077a:	1c7b      	adds	r3, r7, #1
 800077c:	2ffe      	cmp	r7, #254	; 0xfe
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0xb6>
 8000780:	e09a      	b.n	80008b8 <__aeabi_fadd+0x1ec>
 8000782:	0192      	lsls	r2, r2, #6
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	4694      	mov	ip, r2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	05d8      	lsls	r0, r3, #23
 800078c:	4663      	mov	r3, ip
 800078e:	07e4      	lsls	r4, r4, #31
 8000790:	4318      	orrs	r0, r3
 8000792:	4320      	orrs	r0, r4
 8000794:	bce0      	pop	{r5, r6, r7}
 8000796:	46ba      	mov	sl, r7
 8000798:	46b1      	mov	r9, r6
 800079a:	46a8      	mov	r8, r5
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079e:	2800      	cmp	r0, #0
 80007a0:	d049      	beq.n	8000836 <__aeabi_fadd+0x16a>
 80007a2:	1bf3      	subs	r3, r6, r7
 80007a4:	2f00      	cmp	r7, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0xde>
 80007a8:	e0b6      	b.n	8000918 <__aeabi_fadd+0x24c>
 80007aa:	4652      	mov	r2, sl
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d060      	beq.n	8000872 <__aeabi_fadd+0x1a6>
 80007b0:	3b01      	subs	r3, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fadd+0xec>
 80007b6:	e0fc      	b.n	80009b2 <__aeabi_fadd+0x2e6>
 80007b8:	2eff      	cmp	r6, #255	; 0xff
 80007ba:	d000      	beq.n	80007be <__aeabi_fadd+0xf2>
 80007bc:	e0b4      	b.n	8000928 <__aeabi_fadd+0x25c>
 80007be:	000c      	movs	r4, r1
 80007c0:	4642      	mov	r2, r8
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d078      	beq.n	80008b8 <__aeabi_fadd+0x1ec>
 80007c6:	2080      	movs	r0, #128	; 0x80
 80007c8:	03c0      	lsls	r0, r0, #15
 80007ca:	4310      	orrs	r0, r2
 80007cc:	0242      	lsls	r2, r0, #9
 80007ce:	0a53      	lsrs	r3, r2, #9
 80007d0:	469c      	mov	ip, r3
 80007d2:	23ff      	movs	r3, #255	; 0xff
 80007d4:	e7d9      	b.n	800078a <__aeabi_fadd+0xbe>
 80007d6:	1bb9      	subs	r1, r7, r6
 80007d8:	2900      	cmp	r1, #0
 80007da:	dd71      	ble.n	80008c0 <__aeabi_fadd+0x1f4>
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d03f      	beq.n	8000860 <__aeabi_fadd+0x194>
 80007e0:	2fff      	cmp	r7, #255	; 0xff
 80007e2:	d0ee      	beq.n	80007c2 <__aeabi_fadd+0xf6>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	431d      	orrs	r5, r3
 80007ea:	2201      	movs	r2, #1
 80007ec:	291b      	cmp	r1, #27
 80007ee:	dc07      	bgt.n	8000800 <__aeabi_fadd+0x134>
 80007f0:	002a      	movs	r2, r5
 80007f2:	2320      	movs	r3, #32
 80007f4:	40ca      	lsrs	r2, r1
 80007f6:	1a59      	subs	r1, r3, r1
 80007f8:	408d      	lsls	r5, r1
 80007fa:	1e6b      	subs	r3, r5, #1
 80007fc:	419d      	sbcs	r5, r3
 80007fe:	432a      	orrs	r2, r5
 8000800:	4452      	add	r2, sl
 8000802:	0153      	lsls	r3, r2, #5
 8000804:	d553      	bpl.n	80008ae <__aeabi_fadd+0x1e2>
 8000806:	3701      	adds	r7, #1
 8000808:	2fff      	cmp	r7, #255	; 0xff
 800080a:	d055      	beq.n	80008b8 <__aeabi_fadd+0x1ec>
 800080c:	2301      	movs	r3, #1
 800080e:	497b      	ldr	r1, [pc, #492]	; (80009fc <__aeabi_fadd+0x330>)
 8000810:	4013      	ands	r3, r2
 8000812:	0852      	lsrs	r2, r2, #1
 8000814:	400a      	ands	r2, r1
 8000816:	431a      	orrs	r2, r3
 8000818:	e7a5      	b.n	8000766 <__aeabi_fadd+0x9a>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d02c      	beq.n	8000878 <__aeabi_fadd+0x1ac>
 800081e:	2301      	movs	r3, #1
 8000820:	425b      	negs	r3, r3
 8000822:	469c      	mov	ip, r3
 8000824:	44e1      	add	r9, ip
 8000826:	464b      	mov	r3, r9
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x162>
 800082c:	e0ad      	b.n	800098a <__aeabi_fadd+0x2be>
 800082e:	2fff      	cmp	r7, #255	; 0xff
 8000830:	d000      	beq.n	8000834 <__aeabi_fadd+0x168>
 8000832:	e76e      	b.n	8000712 <__aeabi_fadd+0x46>
 8000834:	e7c5      	b.n	80007c2 <__aeabi_fadd+0xf6>
 8000836:	20fe      	movs	r0, #254	; 0xfe
 8000838:	1c7e      	adds	r6, r7, #1
 800083a:	4230      	tst	r0, r6
 800083c:	d160      	bne.n	8000900 <__aeabi_fadd+0x234>
 800083e:	2f00      	cmp	r7, #0
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x178>
 8000842:	e093      	b.n	800096c <__aeabi_fadd+0x2a0>
 8000844:	4652      	mov	r2, sl
 8000846:	2a00      	cmp	r2, #0
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x180>
 800084a:	e0b6      	b.n	80009ba <__aeabi_fadd+0x2ee>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d09c      	beq.n	800078a <__aeabi_fadd+0xbe>
 8000850:	1b52      	subs	r2, r2, r5
 8000852:	0150      	lsls	r0, r2, #5
 8000854:	d400      	bmi.n	8000858 <__aeabi_fadd+0x18c>
 8000856:	e0c3      	b.n	80009e0 <__aeabi_fadd+0x314>
 8000858:	4653      	mov	r3, sl
 800085a:	000c      	movs	r4, r1
 800085c:	1aea      	subs	r2, r5, r3
 800085e:	e782      	b.n	8000766 <__aeabi_fadd+0x9a>
 8000860:	2d00      	cmp	r5, #0
 8000862:	d009      	beq.n	8000878 <__aeabi_fadd+0x1ac>
 8000864:	3901      	subs	r1, #1
 8000866:	2900      	cmp	r1, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x1a0>
 800086a:	e08b      	b.n	8000984 <__aeabi_fadd+0x2b8>
 800086c:	2fff      	cmp	r7, #255	; 0xff
 800086e:	d1bc      	bne.n	80007ea <__aeabi_fadd+0x11e>
 8000870:	e7a7      	b.n	80007c2 <__aeabi_fadd+0xf6>
 8000872:	000c      	movs	r4, r1
 8000874:	4642      	mov	r2, r8
 8000876:	0037      	movs	r7, r6
 8000878:	2fff      	cmp	r7, #255	; 0xff
 800087a:	d0a2      	beq.n	80007c2 <__aeabi_fadd+0xf6>
 800087c:	0252      	lsls	r2, r2, #9
 800087e:	0a53      	lsrs	r3, r2, #9
 8000880:	469c      	mov	ip, r3
 8000882:	b2fb      	uxtb	r3, r7
 8000884:	e781      	b.n	800078a <__aeabi_fadd+0xbe>
 8000886:	21fe      	movs	r1, #254	; 0xfe
 8000888:	3701      	adds	r7, #1
 800088a:	4239      	tst	r1, r7
 800088c:	d165      	bne.n	800095a <__aeabi_fadd+0x28e>
 800088e:	2b00      	cmp	r3, #0
 8000890:	d17e      	bne.n	8000990 <__aeabi_fadd+0x2c4>
 8000892:	2800      	cmp	r0, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x1cc>
 8000896:	e0aa      	b.n	80009ee <__aeabi_fadd+0x322>
 8000898:	2d00      	cmp	r5, #0
 800089a:	d100      	bne.n	800089e <__aeabi_fadd+0x1d2>
 800089c:	e775      	b.n	800078a <__aeabi_fadd+0xbe>
 800089e:	002a      	movs	r2, r5
 80008a0:	4452      	add	r2, sl
 80008a2:	2700      	movs	r7, #0
 80008a4:	0153      	lsls	r3, r2, #5
 80008a6:	d502      	bpl.n	80008ae <__aeabi_fadd+0x1e2>
 80008a8:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <__aeabi_fadd+0x334>)
 80008aa:	3701      	adds	r7, #1
 80008ac:	401a      	ands	r2, r3
 80008ae:	0753      	lsls	r3, r2, #29
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x1e8>
 80008b2:	e75a      	b.n	800076a <__aeabi_fadd+0x9e>
 80008b4:	08d2      	lsrs	r2, r2, #3
 80008b6:	e7df      	b.n	8000878 <__aeabi_fadd+0x1ac>
 80008b8:	2200      	movs	r2, #0
 80008ba:	23ff      	movs	r3, #255	; 0xff
 80008bc:	4694      	mov	ip, r2
 80008be:	e764      	b.n	800078a <__aeabi_fadd+0xbe>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d0e0      	beq.n	8000886 <__aeabi_fadd+0x1ba>
 80008c4:	1bf3      	subs	r3, r6, r7
 80008c6:	2f00      	cmp	r7, #0
 80008c8:	d03e      	beq.n	8000948 <__aeabi_fadd+0x27c>
 80008ca:	2eff      	cmp	r6, #255	; 0xff
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fadd+0x204>
 80008ce:	e777      	b.n	80007c0 <__aeabi_fadd+0xf4>
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0001      	movs	r1, r0
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	4311      	orrs	r1, r2
 80008d8:	468a      	mov	sl, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	2b1b      	cmp	r3, #27
 80008de:	dc08      	bgt.n	80008f2 <__aeabi_fadd+0x226>
 80008e0:	4652      	mov	r2, sl
 80008e2:	2120      	movs	r1, #32
 80008e4:	4650      	mov	r0, sl
 80008e6:	40da      	lsrs	r2, r3
 80008e8:	1acb      	subs	r3, r1, r3
 80008ea:	4098      	lsls	r0, r3
 80008ec:	1e43      	subs	r3, r0, #1
 80008ee:	4198      	sbcs	r0, r3
 80008f0:	4302      	orrs	r2, r0
 80008f2:	0037      	movs	r7, r6
 80008f4:	1952      	adds	r2, r2, r5
 80008f6:	e784      	b.n	8000802 <__aeabi_fadd+0x136>
 80008f8:	4a41      	ldr	r2, [pc, #260]	; (8000a00 <__aeabi_fadd+0x334>)
 80008fa:	1a3f      	subs	r7, r7, r0
 80008fc:	4032      	ands	r2, r6
 80008fe:	e732      	b.n	8000766 <__aeabi_fadd+0x9a>
 8000900:	4653      	mov	r3, sl
 8000902:	1b5e      	subs	r6, r3, r5
 8000904:	0173      	lsls	r3, r6, #5
 8000906:	d42d      	bmi.n	8000964 <__aeabi_fadd+0x298>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x242>
 800090c:	e717      	b.n	800073e <__aeabi_fadd+0x72>
 800090e:	2200      	movs	r2, #0
 8000910:	2400      	movs	r4, #0
 8000912:	2300      	movs	r3, #0
 8000914:	4694      	mov	ip, r2
 8000916:	e738      	b.n	800078a <__aeabi_fadd+0xbe>
 8000918:	2eff      	cmp	r6, #255	; 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fadd+0x252>
 800091c:	e74f      	b.n	80007be <__aeabi_fadd+0xf2>
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	4650      	mov	r0, sl
 8000922:	04d2      	lsls	r2, r2, #19
 8000924:	4310      	orrs	r0, r2
 8000926:	4682      	mov	sl, r0
 8000928:	2201      	movs	r2, #1
 800092a:	2b1b      	cmp	r3, #27
 800092c:	dc08      	bgt.n	8000940 <__aeabi_fadd+0x274>
 800092e:	4652      	mov	r2, sl
 8000930:	2420      	movs	r4, #32
 8000932:	4650      	mov	r0, sl
 8000934:	40da      	lsrs	r2, r3
 8000936:	1ae3      	subs	r3, r4, r3
 8000938:	4098      	lsls	r0, r3
 800093a:	1e43      	subs	r3, r0, #1
 800093c:	4198      	sbcs	r0, r3
 800093e:	4302      	orrs	r2, r0
 8000940:	000c      	movs	r4, r1
 8000942:	0037      	movs	r7, r6
 8000944:	1aaa      	subs	r2, r5, r2
 8000946:	e6f5      	b.n	8000734 <__aeabi_fadd+0x68>
 8000948:	2800      	cmp	r0, #0
 800094a:	d093      	beq.n	8000874 <__aeabi_fadd+0x1a8>
 800094c:	3b01      	subs	r3, #1
 800094e:	2b00      	cmp	r3, #0
 8000950:	d04f      	beq.n	80009f2 <__aeabi_fadd+0x326>
 8000952:	2eff      	cmp	r6, #255	; 0xff
 8000954:	d1c1      	bne.n	80008da <__aeabi_fadd+0x20e>
 8000956:	4642      	mov	r2, r8
 8000958:	e733      	b.n	80007c2 <__aeabi_fadd+0xf6>
 800095a:	2fff      	cmp	r7, #255	; 0xff
 800095c:	d0ac      	beq.n	80008b8 <__aeabi_fadd+0x1ec>
 800095e:	4455      	add	r5, sl
 8000960:	086a      	lsrs	r2, r5, #1
 8000962:	e7a4      	b.n	80008ae <__aeabi_fadd+0x1e2>
 8000964:	4653      	mov	r3, sl
 8000966:	000c      	movs	r4, r1
 8000968:	1aee      	subs	r6, r5, r3
 800096a:	e6e8      	b.n	800073e <__aeabi_fadd+0x72>
 800096c:	4653      	mov	r3, sl
 800096e:	2b00      	cmp	r3, #0
 8000970:	d128      	bne.n	80009c4 <__aeabi_fadd+0x2f8>
 8000972:	2d00      	cmp	r5, #0
 8000974:	d000      	beq.n	8000978 <__aeabi_fadd+0x2ac>
 8000976:	e722      	b.n	80007be <__aeabi_fadd+0xf2>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	03db      	lsls	r3, r3, #15
 800097c:	469c      	mov	ip, r3
 800097e:	2400      	movs	r4, #0
 8000980:	23ff      	movs	r3, #255	; 0xff
 8000982:	e702      	b.n	800078a <__aeabi_fadd+0xbe>
 8000984:	002a      	movs	r2, r5
 8000986:	4452      	add	r2, sl
 8000988:	e73b      	b.n	8000802 <__aeabi_fadd+0x136>
 800098a:	4653      	mov	r3, sl
 800098c:	1b5a      	subs	r2, r3, r5
 800098e:	e6d1      	b.n	8000734 <__aeabi_fadd+0x68>
 8000990:	2800      	cmp	r0, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fadd+0x2ca>
 8000994:	e714      	b.n	80007c0 <__aeabi_fadd+0xf4>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x2d0>
 800099a:	e712      	b.n	80007c2 <__aeabi_fadd+0xf6>
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	03db      	lsls	r3, r3, #15
 80009a0:	421a      	tst	r2, r3
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fadd+0x2da>
 80009a4:	e70d      	b.n	80007c2 <__aeabi_fadd+0xf6>
 80009a6:	4641      	mov	r1, r8
 80009a8:	4219      	tst	r1, r3
 80009aa:	d000      	beq.n	80009ae <__aeabi_fadd+0x2e2>
 80009ac:	e709      	b.n	80007c2 <__aeabi_fadd+0xf6>
 80009ae:	4642      	mov	r2, r8
 80009b0:	e707      	b.n	80007c2 <__aeabi_fadd+0xf6>
 80009b2:	000c      	movs	r4, r1
 80009b4:	0037      	movs	r7, r6
 80009b6:	1aaa      	subs	r2, r5, r2
 80009b8:	e6bc      	b.n	8000734 <__aeabi_fadd+0x68>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d013      	beq.n	80009e6 <__aeabi_fadd+0x31a>
 80009be:	000c      	movs	r4, r1
 80009c0:	46c4      	mov	ip, r8
 80009c2:	e6e2      	b.n	800078a <__aeabi_fadd+0xbe>
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fadd+0x2fe>
 80009c8:	e6fb      	b.n	80007c2 <__aeabi_fadd+0xf6>
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	03db      	lsls	r3, r3, #15
 80009ce:	421a      	tst	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fadd+0x308>
 80009d2:	e6f6      	b.n	80007c2 <__aeabi_fadd+0xf6>
 80009d4:	4640      	mov	r0, r8
 80009d6:	4218      	tst	r0, r3
 80009d8:	d000      	beq.n	80009dc <__aeabi_fadd+0x310>
 80009da:	e6f2      	b.n	80007c2 <__aeabi_fadd+0xf6>
 80009dc:	000c      	movs	r4, r1
 80009de:	e6ef      	b.n	80007c0 <__aeabi_fadd+0xf4>
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fadd+0x31a>
 80009e4:	e763      	b.n	80008ae <__aeabi_fadd+0x1e2>
 80009e6:	2200      	movs	r2, #0
 80009e8:	2400      	movs	r4, #0
 80009ea:	4694      	mov	ip, r2
 80009ec:	e6cd      	b.n	800078a <__aeabi_fadd+0xbe>
 80009ee:	46c4      	mov	ip, r8
 80009f0:	e6cb      	b.n	800078a <__aeabi_fadd+0xbe>
 80009f2:	002a      	movs	r2, r5
 80009f4:	0037      	movs	r7, r6
 80009f6:	4452      	add	r2, sl
 80009f8:	e703      	b.n	8000802 <__aeabi_fadd+0x136>
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	7dffffff 	.word	0x7dffffff
 8000a00:	fbffffff 	.word	0xfbffffff

08000a04 <__aeabi_fdiv>:
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	464f      	mov	r7, r9
 8000a08:	4646      	mov	r6, r8
 8000a0a:	46d6      	mov	lr, sl
 8000a0c:	0245      	lsls	r5, r0, #9
 8000a0e:	b5c0      	push	{r6, r7, lr}
 8000a10:	0047      	lsls	r7, r0, #1
 8000a12:	1c0c      	adds	r4, r1, #0
 8000a14:	0a6d      	lsrs	r5, r5, #9
 8000a16:	0e3f      	lsrs	r7, r7, #24
 8000a18:	0fc6      	lsrs	r6, r0, #31
 8000a1a:	2f00      	cmp	r7, #0
 8000a1c:	d066      	beq.n	8000aec <__aeabi_fdiv+0xe8>
 8000a1e:	2fff      	cmp	r7, #255	; 0xff
 8000a20:	d06c      	beq.n	8000afc <__aeabi_fdiv+0xf8>
 8000a22:	2300      	movs	r3, #0
 8000a24:	00ea      	lsls	r2, r5, #3
 8000a26:	2580      	movs	r5, #128	; 0x80
 8000a28:	4699      	mov	r9, r3
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	04ed      	lsls	r5, r5, #19
 8000a2e:	4315      	orrs	r5, r2
 8000a30:	3f7f      	subs	r7, #127	; 0x7f
 8000a32:	0260      	lsls	r0, r4, #9
 8000a34:	0061      	lsls	r1, r4, #1
 8000a36:	0a43      	lsrs	r3, r0, #9
 8000a38:	4698      	mov	r8, r3
 8000a3a:	0e09      	lsrs	r1, r1, #24
 8000a3c:	0fe4      	lsrs	r4, r4, #31
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	d048      	beq.n	8000ad4 <__aeabi_fdiv+0xd0>
 8000a42:	29ff      	cmp	r1, #255	; 0xff
 8000a44:	d010      	beq.n	8000a68 <__aeabi_fdiv+0x64>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	00d8      	lsls	r0, r3, #3
 8000a4a:	04d2      	lsls	r2, r2, #19
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	2000      	movs	r0, #0
 8000a52:	397f      	subs	r1, #127	; 0x7f
 8000a54:	464a      	mov	r2, r9
 8000a56:	0033      	movs	r3, r6
 8000a58:	1a7f      	subs	r7, r7, r1
 8000a5a:	4302      	orrs	r2, r0
 8000a5c:	496c      	ldr	r1, [pc, #432]	; (8000c10 <__aeabi_fdiv+0x20c>)
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	588a      	ldr	r2, [r1, r2]
 8000a62:	4063      	eors	r3, r4
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4697      	mov	pc, r2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d16d      	bne.n	8000b48 <__aeabi_fdiv+0x144>
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	3fff      	subs	r7, #255	; 0xff
 8000a70:	e033      	b.n	8000ada <__aeabi_fdiv+0xd6>
 8000a72:	2300      	movs	r3, #0
 8000a74:	4698      	mov	r8, r3
 8000a76:	0026      	movs	r6, r4
 8000a78:	4645      	mov	r5, r8
 8000a7a:	4682      	mov	sl, r0
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fdiv+0x80>
 8000a82:	e07f      	b.n	8000b84 <__aeabi_fdiv+0x180>
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fdiv+0x86>
 8000a88:	e094      	b.n	8000bb4 <__aeabi_fdiv+0x1b0>
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d017      	beq.n	8000abe <__aeabi_fdiv+0xba>
 8000a8e:	0038      	movs	r0, r7
 8000a90:	307f      	adds	r0, #127	; 0x7f
 8000a92:	2800      	cmp	r0, #0
 8000a94:	dd5f      	ble.n	8000b56 <__aeabi_fdiv+0x152>
 8000a96:	076b      	lsls	r3, r5, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fdiv+0xa0>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	402b      	ands	r3, r5
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fdiv+0xa0>
 8000aa2:	3504      	adds	r5, #4
 8000aa4:	012b      	lsls	r3, r5, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fdiv+0xac>
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <__aeabi_fdiv+0x210>)
 8000aac:	3080      	adds	r0, #128	; 0x80
 8000aae:	401d      	ands	r5, r3
 8000ab0:	28fe      	cmp	r0, #254	; 0xfe
 8000ab2:	dc67      	bgt.n	8000b84 <__aeabi_fdiv+0x180>
 8000ab4:	01ad      	lsls	r5, r5, #6
 8000ab6:	0a6d      	lsrs	r5, r5, #9
 8000ab8:	b2c0      	uxtb	r0, r0
 8000aba:	e002      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000abc:	001e      	movs	r6, r3
 8000abe:	2000      	movs	r0, #0
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	05c0      	lsls	r0, r0, #23
 8000ac4:	4328      	orrs	r0, r5
 8000ac6:	07f6      	lsls	r6, r6, #31
 8000ac8:	4330      	orrs	r0, r6
 8000aca:	bce0      	pop	{r5, r6, r7}
 8000acc:	46ba      	mov	sl, r7
 8000ace:	46b1      	mov	r9, r6
 8000ad0:	46a8      	mov	r8, r5
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d12b      	bne.n	8000b30 <__aeabi_fdiv+0x12c>
 8000ad8:	2001      	movs	r0, #1
 8000ada:	464a      	mov	r2, r9
 8000adc:	0033      	movs	r3, r6
 8000ade:	494e      	ldr	r1, [pc, #312]	; (8000c18 <__aeabi_fdiv+0x214>)
 8000ae0:	4302      	orrs	r2, r0
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	588a      	ldr	r2, [r1, r2]
 8000ae6:	4063      	eors	r3, r4
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4697      	mov	pc, r2
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d113      	bne.n	8000b18 <__aeabi_fdiv+0x114>
 8000af0:	2304      	movs	r3, #4
 8000af2:	4699      	mov	r9, r3
 8000af4:	3b03      	subs	r3, #3
 8000af6:	2700      	movs	r7, #0
 8000af8:	469a      	mov	sl, r3
 8000afa:	e79a      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d105      	bne.n	8000b0c <__aeabi_fdiv+0x108>
 8000b00:	2308      	movs	r3, #8
 8000b02:	4699      	mov	r9, r3
 8000b04:	3b06      	subs	r3, #6
 8000b06:	27ff      	movs	r7, #255	; 0xff
 8000b08:	469a      	mov	sl, r3
 8000b0a:	e792      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b09      	subs	r3, #9
 8000b12:	27ff      	movs	r7, #255	; 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e78c      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000b18:	0028      	movs	r0, r5
 8000b1a:	f001 fc5f 	bl	80023dc <__clzsi2>
 8000b1e:	2776      	movs	r7, #118	; 0x76
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409d      	lsls	r5, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	427f      	negs	r7, r7
 8000b28:	4699      	mov	r9, r3
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	1a3f      	subs	r7, r7, r0
 8000b2e:	e780      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fc53 	bl	80023dc <__clzsi2>
 8000b36:	4642      	mov	r2, r8
 8000b38:	1f43      	subs	r3, r0, #5
 8000b3a:	2176      	movs	r1, #118	; 0x76
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	4249      	negs	r1, r1
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	4690      	mov	r8, r2
 8000b44:	2000      	movs	r0, #0
 8000b46:	e785      	b.n	8000a54 <__aeabi_fdiv+0x50>
 8000b48:	21ff      	movs	r1, #255	; 0xff
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	e782      	b.n	8000a54 <__aeabi_fdiv+0x50>
 8000b4e:	001e      	movs	r6, r3
 8000b50:	20ff      	movs	r0, #255	; 0xff
 8000b52:	2500      	movs	r5, #0
 8000b54:	e7b5      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000b56:	2301      	movs	r3, #1
 8000b58:	1a1b      	subs	r3, r3, r0
 8000b5a:	2b1b      	cmp	r3, #27
 8000b5c:	dcaf      	bgt.n	8000abe <__aeabi_fdiv+0xba>
 8000b5e:	379e      	adds	r7, #158	; 0x9e
 8000b60:	0029      	movs	r1, r5
 8000b62:	40bd      	lsls	r5, r7
 8000b64:	40d9      	lsrs	r1, r3
 8000b66:	1e6a      	subs	r2, r5, #1
 8000b68:	4195      	sbcs	r5, r2
 8000b6a:	430d      	orrs	r5, r1
 8000b6c:	076b      	lsls	r3, r5, #29
 8000b6e:	d004      	beq.n	8000b7a <__aeabi_fdiv+0x176>
 8000b70:	230f      	movs	r3, #15
 8000b72:	402b      	ands	r3, r5
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fdiv+0x176>
 8000b78:	3504      	adds	r5, #4
 8000b7a:	016b      	lsls	r3, r5, #5
 8000b7c:	d544      	bpl.n	8000c08 <__aeabi_fdiv+0x204>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2500      	movs	r5, #0
 8000b82:	e79e      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	2500      	movs	r5, #0
 8000b88:	e79b      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000b8a:	2580      	movs	r5, #128	; 0x80
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	20ff      	movs	r0, #255	; 0xff
 8000b90:	03ed      	lsls	r5, r5, #15
 8000b92:	e796      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000b94:	2300      	movs	r3, #0
 8000b96:	4698      	mov	r8, r3
 8000b98:	2080      	movs	r0, #128	; 0x80
 8000b9a:	03c0      	lsls	r0, r0, #15
 8000b9c:	4205      	tst	r5, r0
 8000b9e:	d009      	beq.n	8000bb4 <__aeabi_fdiv+0x1b0>
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	4203      	tst	r3, r0
 8000ba4:	d106      	bne.n	8000bb4 <__aeabi_fdiv+0x1b0>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	4305      	orrs	r5, r0
 8000baa:	026d      	lsls	r5, r5, #9
 8000bac:	0026      	movs	r6, r4
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	0a6d      	lsrs	r5, r5, #9
 8000bb2:	e786      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000bb4:	2080      	movs	r0, #128	; 0x80
 8000bb6:	03c0      	lsls	r0, r0, #15
 8000bb8:	4305      	orrs	r5, r0
 8000bba:	026d      	lsls	r5, r5, #9
 8000bbc:	20ff      	movs	r0, #255	; 0xff
 8000bbe:	0a6d      	lsrs	r5, r5, #9
 8000bc0:	e77f      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	016a      	lsls	r2, r5, #5
 8000bc6:	0148      	lsls	r0, r1, #5
 8000bc8:	4282      	cmp	r2, r0
 8000bca:	d219      	bcs.n	8000c00 <__aeabi_fdiv+0x1fc>
 8000bcc:	211b      	movs	r1, #27
 8000bce:	2500      	movs	r5, #0
 8000bd0:	3f01      	subs	r7, #1
 8000bd2:	2601      	movs	r6, #1
 8000bd4:	0014      	movs	r4, r2
 8000bd6:	006d      	lsls	r5, r5, #1
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	db01      	blt.n	8000be2 <__aeabi_fdiv+0x1de>
 8000bde:	4290      	cmp	r0, r2
 8000be0:	d801      	bhi.n	8000be6 <__aeabi_fdiv+0x1e2>
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	4335      	orrs	r5, r6
 8000be6:	3901      	subs	r1, #1
 8000be8:	2900      	cmp	r1, #0
 8000bea:	d1f3      	bne.n	8000bd4 <__aeabi_fdiv+0x1d0>
 8000bec:	1e50      	subs	r0, r2, #1
 8000bee:	4182      	sbcs	r2, r0
 8000bf0:	0038      	movs	r0, r7
 8000bf2:	307f      	adds	r0, #127	; 0x7f
 8000bf4:	001e      	movs	r6, r3
 8000bf6:	4315      	orrs	r5, r2
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	dd00      	ble.n	8000bfe <__aeabi_fdiv+0x1fa>
 8000bfc:	e74b      	b.n	8000a96 <__aeabi_fdiv+0x92>
 8000bfe:	e7aa      	b.n	8000b56 <__aeabi_fdiv+0x152>
 8000c00:	211a      	movs	r1, #26
 8000c02:	2501      	movs	r5, #1
 8000c04:	1a12      	subs	r2, r2, r0
 8000c06:	e7e4      	b.n	8000bd2 <__aeabi_fdiv+0x1ce>
 8000c08:	01ad      	lsls	r5, r5, #6
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	0a6d      	lsrs	r5, r5, #9
 8000c0e:	e758      	b.n	8000ac2 <__aeabi_fdiv+0xbe>
 8000c10:	0800b88c 	.word	0x0800b88c
 8000c14:	f7ffffff 	.word	0xf7ffffff
 8000c18:	0800b8cc 	.word	0x0800b8cc

08000c1c <__aeabi_fmul>:
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	4657      	mov	r7, sl
 8000c20:	464e      	mov	r6, r9
 8000c22:	4645      	mov	r5, r8
 8000c24:	46de      	mov	lr, fp
 8000c26:	0244      	lsls	r4, r0, #9
 8000c28:	b5e0      	push	{r5, r6, r7, lr}
 8000c2a:	0045      	lsls	r5, r0, #1
 8000c2c:	1c0f      	adds	r7, r1, #0
 8000c2e:	0a64      	lsrs	r4, r4, #9
 8000c30:	0e2d      	lsrs	r5, r5, #24
 8000c32:	0fc6      	lsrs	r6, r0, #31
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d047      	beq.n	8000cc8 <__aeabi_fmul+0xac>
 8000c38:	2dff      	cmp	r5, #255	; 0xff
 8000c3a:	d04d      	beq.n	8000cd8 <__aeabi_fmul+0xbc>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2080      	movs	r0, #128	; 0x80
 8000c40:	469a      	mov	sl, r3
 8000c42:	469b      	mov	fp, r3
 8000c44:	00e4      	lsls	r4, r4, #3
 8000c46:	04c0      	lsls	r0, r0, #19
 8000c48:	4304      	orrs	r4, r0
 8000c4a:	3d7f      	subs	r5, #127	; 0x7f
 8000c4c:	0278      	lsls	r0, r7, #9
 8000c4e:	0a43      	lsrs	r3, r0, #9
 8000c50:	4699      	mov	r9, r3
 8000c52:	007a      	lsls	r2, r7, #1
 8000c54:	0ffb      	lsrs	r3, r7, #31
 8000c56:	4698      	mov	r8, r3
 8000c58:	0e12      	lsrs	r2, r2, #24
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	d044      	beq.n	8000ce8 <__aeabi_fmul+0xcc>
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d011      	beq.n	8000c86 <__aeabi_fmul+0x6a>
 8000c62:	00d8      	lsls	r0, r3, #3
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	04db      	lsls	r3, r3, #19
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	3a7f      	subs	r2, #127	; 0x7f
 8000c70:	18ad      	adds	r5, r5, r2
 8000c72:	4647      	mov	r7, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	4077      	eors	r7, r6
 8000c78:	1c69      	adds	r1, r5, #1
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d83f      	bhi.n	8000cfe <__aeabi_fmul+0xe2>
 8000c7e:	4a72      	ldr	r2, [pc, #456]	; (8000e48 <__aeabi_fmul+0x22c>)
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	58d3      	ldr	r3, [r2, r3]
 8000c84:	469f      	mov	pc, r3
 8000c86:	35ff      	adds	r5, #255	; 0xff
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fmul+0x72>
 8000c8c:	e079      	b.n	8000d82 <__aeabi_fmul+0x166>
 8000c8e:	4652      	mov	r2, sl
 8000c90:	2302      	movs	r3, #2
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4692      	mov	sl, r2
 8000c96:	2002      	movs	r0, #2
 8000c98:	e7eb      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000c9a:	4647      	mov	r7, r8
 8000c9c:	464c      	mov	r4, r9
 8000c9e:	4683      	mov	fp, r0
 8000ca0:	465b      	mov	r3, fp
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d028      	beq.n	8000cf8 <__aeabi_fmul+0xdc>
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fmul+0x90>
 8000caa:	e0c6      	b.n	8000e3a <__aeabi_fmul+0x21e>
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d14f      	bne.n	8000d50 <__aeabi_fmul+0x134>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	05c0      	lsls	r0, r0, #23
 8000cb6:	07ff      	lsls	r7, r7, #31
 8000cb8:	4320      	orrs	r0, r4
 8000cba:	4338      	orrs	r0, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	46bb      	mov	fp, r7
 8000cc0:	46b2      	mov	sl, r6
 8000cc2:	46a9      	mov	r9, r5
 8000cc4:	46a0      	mov	r8, r4
 8000cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc8:	2c00      	cmp	r4, #0
 8000cca:	d171      	bne.n	8000db0 <__aeabi_fmul+0x194>
 8000ccc:	2304      	movs	r3, #4
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	469b      	mov	fp, r3
 8000cd6:	e7b9      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d163      	bne.n	8000da4 <__aeabi_fmul+0x188>
 8000cdc:	2308      	movs	r3, #8
 8000cde:	469a      	mov	sl, r3
 8000ce0:	3b06      	subs	r3, #6
 8000ce2:	25ff      	movs	r5, #255	; 0xff
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	e7b1      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d150      	bne.n	8000d8e <__aeabi_fmul+0x172>
 8000cec:	4652      	mov	r2, sl
 8000cee:	3301      	adds	r3, #1
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	4692      	mov	sl, r2
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	e7bc      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000cf8:	20ff      	movs	r0, #255	; 0xff
 8000cfa:	2400      	movs	r4, #0
 8000cfc:	e7da      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000cfe:	4648      	mov	r0, r9
 8000d00:	0c26      	lsrs	r6, r4, #16
 8000d02:	0424      	lsls	r4, r4, #16
 8000d04:	0c22      	lsrs	r2, r4, #16
 8000d06:	0404      	lsls	r4, r0, #16
 8000d08:	0c24      	lsrs	r4, r4, #16
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	0020      	movs	r0, r4
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	4350      	muls	r0, r2
 8000d12:	4374      	muls	r4, r6
 8000d14:	435a      	muls	r2, r3
 8000d16:	435e      	muls	r6, r3
 8000d18:	1912      	adds	r2, r2, r4
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	429c      	cmp	r4, r3
 8000d20:	d903      	bls.n	8000d2a <__aeabi_fmul+0x10e>
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	0252      	lsls	r2, r2, #9
 8000d26:	4694      	mov	ip, r2
 8000d28:	4466      	add	r6, ip
 8000d2a:	0400      	lsls	r0, r0, #16
 8000d2c:	041a      	lsls	r2, r3, #16
 8000d2e:	0c00      	lsrs	r0, r0, #16
 8000d30:	1812      	adds	r2, r2, r0
 8000d32:	0194      	lsls	r4, r2, #6
 8000d34:	1e60      	subs	r0, r4, #1
 8000d36:	4184      	sbcs	r4, r0
 8000d38:	0c1b      	lsrs	r3, r3, #16
 8000d3a:	0e92      	lsrs	r2, r2, #26
 8000d3c:	199b      	adds	r3, r3, r6
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	431c      	orrs	r4, r3
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	d572      	bpl.n	8000e2e <__aeabi_fmul+0x212>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	0863      	lsrs	r3, r4, #1
 8000d4c:	4004      	ands	r4, r0
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	0008      	movs	r0, r1
 8000d52:	307f      	adds	r0, #127	; 0x7f
 8000d54:	2800      	cmp	r0, #0
 8000d56:	dd3c      	ble.n	8000dd2 <__aeabi_fmul+0x1b6>
 8000d58:	0763      	lsls	r3, r4, #29
 8000d5a:	d004      	beq.n	8000d66 <__aeabi_fmul+0x14a>
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fmul+0x14a>
 8000d64:	3404      	adds	r4, #4
 8000d66:	0123      	lsls	r3, r4, #4
 8000d68:	d503      	bpl.n	8000d72 <__aeabi_fmul+0x156>
 8000d6a:	3180      	adds	r1, #128	; 0x80
 8000d6c:	0008      	movs	r0, r1
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <__aeabi_fmul+0x230>)
 8000d70:	401c      	ands	r4, r3
 8000d72:	28fe      	cmp	r0, #254	; 0xfe
 8000d74:	dcc0      	bgt.n	8000cf8 <__aeabi_fmul+0xdc>
 8000d76:	01a4      	lsls	r4, r4, #6
 8000d78:	0a64      	lsrs	r4, r4, #9
 8000d7a:	b2c0      	uxtb	r0, r0
 8000d7c:	e79a      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000d7e:	0037      	movs	r7, r6
 8000d80:	e78e      	b.n	8000ca0 <__aeabi_fmul+0x84>
 8000d82:	4652      	mov	r2, sl
 8000d84:	2303      	movs	r3, #3
 8000d86:	431a      	orrs	r2, r3
 8000d88:	4692      	mov	sl, r2
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	e771      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	f001 fb24 	bl	80023dc <__clzsi2>
 8000d94:	464a      	mov	r2, r9
 8000d96:	1f43      	subs	r3, r0, #5
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	1a2d      	subs	r5, r5, r0
 8000d9c:	4691      	mov	r9, r2
 8000d9e:	2000      	movs	r0, #0
 8000da0:	3d76      	subs	r5, #118	; 0x76
 8000da2:	e766      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000da4:	230c      	movs	r3, #12
 8000da6:	469a      	mov	sl, r3
 8000da8:	3b09      	subs	r3, #9
 8000daa:	25ff      	movs	r5, #255	; 0xff
 8000dac:	469b      	mov	fp, r3
 8000dae:	e74d      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000db0:	0020      	movs	r0, r4
 8000db2:	f001 fb13 	bl	80023dc <__clzsi2>
 8000db6:	2576      	movs	r5, #118	; 0x76
 8000db8:	1f43      	subs	r3, r0, #5
 8000dba:	409c      	lsls	r4, r3
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	426d      	negs	r5, r5
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	469b      	mov	fp, r3
 8000dc4:	1a2d      	subs	r5, r5, r0
 8000dc6:	e741      	b.n	8000c4c <__aeabi_fmul+0x30>
 8000dc8:	2480      	movs	r4, #128	; 0x80
 8000dca:	2700      	movs	r7, #0
 8000dcc:	20ff      	movs	r0, #255	; 0xff
 8000dce:	03e4      	lsls	r4, r4, #15
 8000dd0:	e770      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	1a1b      	subs	r3, r3, r0
 8000dd6:	2b1b      	cmp	r3, #27
 8000dd8:	dd00      	ble.n	8000ddc <__aeabi_fmul+0x1c0>
 8000dda:	e769      	b.n	8000cb0 <__aeabi_fmul+0x94>
 8000ddc:	319e      	adds	r1, #158	; 0x9e
 8000dde:	0020      	movs	r0, r4
 8000de0:	408c      	lsls	r4, r1
 8000de2:	40d8      	lsrs	r0, r3
 8000de4:	1e63      	subs	r3, r4, #1
 8000de6:	419c      	sbcs	r4, r3
 8000de8:	4304      	orrs	r4, r0
 8000dea:	0763      	lsls	r3, r4, #29
 8000dec:	d004      	beq.n	8000df8 <__aeabi_fmul+0x1dc>
 8000dee:	230f      	movs	r3, #15
 8000df0:	4023      	ands	r3, r4
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d000      	beq.n	8000df8 <__aeabi_fmul+0x1dc>
 8000df6:	3404      	adds	r4, #4
 8000df8:	0163      	lsls	r3, r4, #5
 8000dfa:	d51a      	bpl.n	8000e32 <__aeabi_fmul+0x216>
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	2400      	movs	r4, #0
 8000e00:	e758      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000e02:	2080      	movs	r0, #128	; 0x80
 8000e04:	03c0      	lsls	r0, r0, #15
 8000e06:	4204      	tst	r4, r0
 8000e08:	d009      	beq.n	8000e1e <__aeabi_fmul+0x202>
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	4203      	tst	r3, r0
 8000e0e:	d106      	bne.n	8000e1e <__aeabi_fmul+0x202>
 8000e10:	464c      	mov	r4, r9
 8000e12:	4304      	orrs	r4, r0
 8000e14:	0264      	lsls	r4, r4, #9
 8000e16:	4647      	mov	r7, r8
 8000e18:	20ff      	movs	r0, #255	; 0xff
 8000e1a:	0a64      	lsrs	r4, r4, #9
 8000e1c:	e74a      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000e1e:	2080      	movs	r0, #128	; 0x80
 8000e20:	03c0      	lsls	r0, r0, #15
 8000e22:	4304      	orrs	r4, r0
 8000e24:	0264      	lsls	r4, r4, #9
 8000e26:	0037      	movs	r7, r6
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	e742      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000e2e:	0029      	movs	r1, r5
 8000e30:	e78e      	b.n	8000d50 <__aeabi_fmul+0x134>
 8000e32:	01a4      	lsls	r4, r4, #6
 8000e34:	2000      	movs	r0, #0
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e73c      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	03c0      	lsls	r0, r0, #15
 8000e3e:	4304      	orrs	r4, r0
 8000e40:	0264      	lsls	r4, r4, #9
 8000e42:	20ff      	movs	r0, #255	; 0xff
 8000e44:	0a64      	lsrs	r4, r4, #9
 8000e46:	e735      	b.n	8000cb4 <__aeabi_fmul+0x98>
 8000e48:	0800b90c 	.word	0x0800b90c
 8000e4c:	f7ffffff 	.word	0xf7ffffff

08000e50 <__aeabi_fsub>:
 8000e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e52:	4646      	mov	r6, r8
 8000e54:	46d6      	mov	lr, sl
 8000e56:	464f      	mov	r7, r9
 8000e58:	0243      	lsls	r3, r0, #9
 8000e5a:	0a5b      	lsrs	r3, r3, #9
 8000e5c:	00da      	lsls	r2, r3, #3
 8000e5e:	4694      	mov	ip, r2
 8000e60:	024a      	lsls	r2, r1, #9
 8000e62:	b5c0      	push	{r6, r7, lr}
 8000e64:	0044      	lsls	r4, r0, #1
 8000e66:	0a56      	lsrs	r6, r2, #9
 8000e68:	1c05      	adds	r5, r0, #0
 8000e6a:	46b0      	mov	r8, r6
 8000e6c:	0e24      	lsrs	r4, r4, #24
 8000e6e:	004e      	lsls	r6, r1, #1
 8000e70:	0992      	lsrs	r2, r2, #6
 8000e72:	001f      	movs	r7, r3
 8000e74:	0020      	movs	r0, r4
 8000e76:	4692      	mov	sl, r2
 8000e78:	0fed      	lsrs	r5, r5, #31
 8000e7a:	0e36      	lsrs	r6, r6, #24
 8000e7c:	0fc9      	lsrs	r1, r1, #31
 8000e7e:	2eff      	cmp	r6, #255	; 0xff
 8000e80:	d100      	bne.n	8000e84 <__aeabi_fsub+0x34>
 8000e82:	e07f      	b.n	8000f84 <__aeabi_fsub+0x134>
 8000e84:	2201      	movs	r2, #1
 8000e86:	4051      	eors	r1, r2
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d051      	beq.n	8000f30 <__aeabi_fsub+0xe0>
 8000e8c:	1ba2      	subs	r2, r4, r6
 8000e8e:	4691      	mov	r9, r2
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	dc00      	bgt.n	8000e96 <__aeabi_fsub+0x46>
 8000e94:	e07e      	b.n	8000f94 <__aeabi_fsub+0x144>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_fsub+0x4c>
 8000e9a:	e099      	b.n	8000fd0 <__aeabi_fsub+0x180>
 8000e9c:	2cff      	cmp	r4, #255	; 0xff
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x52>
 8000ea0:	e08c      	b.n	8000fbc <__aeabi_fsub+0x16c>
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	4652      	mov	r2, sl
 8000ea6:	04db      	lsls	r3, r3, #19
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4692      	mov	sl, r2
 8000eac:	464a      	mov	r2, r9
 8000eae:	2301      	movs	r3, #1
 8000eb0:	2a1b      	cmp	r2, #27
 8000eb2:	dc08      	bgt.n	8000ec6 <__aeabi_fsub+0x76>
 8000eb4:	4653      	mov	r3, sl
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	40d3      	lsrs	r3, r2
 8000eba:	1a89      	subs	r1, r1, r2
 8000ebc:	4652      	mov	r2, sl
 8000ebe:	408a      	lsls	r2, r1
 8000ec0:	1e51      	subs	r1, r2, #1
 8000ec2:	418a      	sbcs	r2, r1
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	4662      	mov	r2, ip
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	015a      	lsls	r2, r3, #5
 8000ecc:	d400      	bmi.n	8000ed0 <__aeabi_fsub+0x80>
 8000ece:	e0f3      	b.n	80010b8 <__aeabi_fsub+0x268>
 8000ed0:	019b      	lsls	r3, r3, #6
 8000ed2:	099e      	lsrs	r6, r3, #6
 8000ed4:	0030      	movs	r0, r6
 8000ed6:	f001 fa81 	bl	80023dc <__clzsi2>
 8000eda:	3805      	subs	r0, #5
 8000edc:	4086      	lsls	r6, r0
 8000ede:	4284      	cmp	r4, r0
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_fsub+0x94>
 8000ee2:	e0f7      	b.n	80010d4 <__aeabi_fsub+0x284>
 8000ee4:	0032      	movs	r2, r6
 8000ee6:	1b04      	subs	r4, r0, r4
 8000ee8:	2020      	movs	r0, #32
 8000eea:	3401      	adds	r4, #1
 8000eec:	40e2      	lsrs	r2, r4
 8000eee:	1b04      	subs	r4, r0, r4
 8000ef0:	40a6      	lsls	r6, r4
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	1e5e      	subs	r6, r3, #1
 8000ef6:	41b3      	sbcs	r3, r6
 8000ef8:	2400      	movs	r4, #0
 8000efa:	4313      	orrs	r3, r2
 8000efc:	075a      	lsls	r2, r3, #29
 8000efe:	d004      	beq.n	8000f0a <__aeabi_fsub+0xba>
 8000f00:	220f      	movs	r2, #15
 8000f02:	401a      	ands	r2, r3
 8000f04:	2a04      	cmp	r2, #4
 8000f06:	d000      	beq.n	8000f0a <__aeabi_fsub+0xba>
 8000f08:	3304      	adds	r3, #4
 8000f0a:	015a      	lsls	r2, r3, #5
 8000f0c:	d400      	bmi.n	8000f10 <__aeabi_fsub+0xc0>
 8000f0e:	e0d6      	b.n	80010be <__aeabi_fsub+0x26e>
 8000f10:	1c62      	adds	r2, r4, #1
 8000f12:	2cfe      	cmp	r4, #254	; 0xfe
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0xc8>
 8000f16:	e0da      	b.n	80010ce <__aeabi_fsub+0x27e>
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	0a5f      	lsrs	r7, r3, #9
 8000f1c:	b2d0      	uxtb	r0, r2
 8000f1e:	05c0      	lsls	r0, r0, #23
 8000f20:	4338      	orrs	r0, r7
 8000f22:	07ed      	lsls	r5, r5, #31
 8000f24:	4328      	orrs	r0, r5
 8000f26:	bce0      	pop	{r5, r6, r7}
 8000f28:	46ba      	mov	sl, r7
 8000f2a:	46b1      	mov	r9, r6
 8000f2c:	46a8      	mov	r8, r5
 8000f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f30:	1ba2      	subs	r2, r4, r6
 8000f32:	4691      	mov	r9, r2
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	dd63      	ble.n	8001000 <__aeabi_fsub+0x1b0>
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0xee>
 8000f3c:	e099      	b.n	8001072 <__aeabi_fsub+0x222>
 8000f3e:	2cff      	cmp	r4, #255	; 0xff
 8000f40:	d03c      	beq.n	8000fbc <__aeabi_fsub+0x16c>
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	4652      	mov	r2, sl
 8000f46:	04db      	lsls	r3, r3, #19
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4692      	mov	sl, r2
 8000f4c:	464a      	mov	r2, r9
 8000f4e:	2301      	movs	r3, #1
 8000f50:	2a1b      	cmp	r2, #27
 8000f52:	dc08      	bgt.n	8000f66 <__aeabi_fsub+0x116>
 8000f54:	4653      	mov	r3, sl
 8000f56:	2120      	movs	r1, #32
 8000f58:	40d3      	lsrs	r3, r2
 8000f5a:	1a89      	subs	r1, r1, r2
 8000f5c:	4652      	mov	r2, sl
 8000f5e:	408a      	lsls	r2, r1
 8000f60:	1e51      	subs	r1, r2, #1
 8000f62:	418a      	sbcs	r2, r1
 8000f64:	4313      	orrs	r3, r2
 8000f66:	4463      	add	r3, ip
 8000f68:	015a      	lsls	r2, r3, #5
 8000f6a:	d400      	bmi.n	8000f6e <__aeabi_fsub+0x11e>
 8000f6c:	e0a4      	b.n	80010b8 <__aeabi_fsub+0x268>
 8000f6e:	3401      	adds	r4, #1
 8000f70:	2cff      	cmp	r4, #255	; 0xff
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x126>
 8000f74:	e0ab      	b.n	80010ce <__aeabi_fsub+0x27e>
 8000f76:	2201      	movs	r2, #1
 8000f78:	4997      	ldr	r1, [pc, #604]	; (80011d8 <__aeabi_fsub+0x388>)
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	400b      	ands	r3, r1
 8000f80:	4313      	orrs	r3, r2
 8000f82:	e7bb      	b.n	8000efc <__aeabi_fsub+0xac>
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d032      	beq.n	8000fee <__aeabi_fsub+0x19e>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d035      	beq.n	8000ff8 <__aeabi_fsub+0x1a8>
 8000f8c:	22ff      	movs	r2, #255	; 0xff
 8000f8e:	4252      	negs	r2, r2
 8000f90:	4691      	mov	r9, r2
 8000f92:	44a1      	add	r9, r4
 8000f94:	464a      	mov	r2, r9
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d051      	beq.n	800103e <__aeabi_fsub+0x1ee>
 8000f9a:	1b30      	subs	r0, r6, r4
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_fsub+0x152>
 8000fa0:	e09c      	b.n	80010dc <__aeabi_fsub+0x28c>
 8000fa2:	4663      	mov	r3, ip
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fsub+0x15a>
 8000fa8:	e0df      	b.n	800116a <__aeabi_fsub+0x31a>
 8000faa:	3801      	subs	r0, #1
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x162>
 8000fb0:	e0f7      	b.n	80011a2 <__aeabi_fsub+0x352>
 8000fb2:	2eff      	cmp	r6, #255	; 0xff
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x168>
 8000fb6:	e099      	b.n	80010ec <__aeabi_fsub+0x29c>
 8000fb8:	000d      	movs	r5, r1
 8000fba:	4643      	mov	r3, r8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x172>
 8000fc0:	e085      	b.n	80010ce <__aeabi_fsub+0x27e>
 8000fc2:	2780      	movs	r7, #128	; 0x80
 8000fc4:	03ff      	lsls	r7, r7, #15
 8000fc6:	431f      	orrs	r7, r3
 8000fc8:	027f      	lsls	r7, r7, #9
 8000fca:	20ff      	movs	r0, #255	; 0xff
 8000fcc:	0a7f      	lsrs	r7, r7, #9
 8000fce:	e7a6      	b.n	8000f1e <__aeabi_fsub+0xce>
 8000fd0:	4652      	mov	r2, sl
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	d074      	beq.n	80010c0 <__aeabi_fsub+0x270>
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4252      	negs	r2, r2
 8000fda:	4690      	mov	r8, r2
 8000fdc:	44c1      	add	r9, r8
 8000fde:	464a      	mov	r2, r9
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x196>
 8000fe4:	e0c8      	b.n	8001178 <__aeabi_fsub+0x328>
 8000fe6:	2cff      	cmp	r4, #255	; 0xff
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x19c>
 8000fea:	e75f      	b.n	8000eac <__aeabi_fsub+0x5c>
 8000fec:	e7e6      	b.n	8000fbc <__aeabi_fsub+0x16c>
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4051      	eors	r1, r2
 8000ff2:	42a9      	cmp	r1, r5
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_fsub+0x1a8>
 8000ff6:	e749      	b.n	8000e8c <__aeabi_fsub+0x3c>
 8000ff8:	22ff      	movs	r2, #255	; 0xff
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	4691      	mov	r9, r2
 8000ffe:	44a1      	add	r9, r4
 8001000:	464a      	mov	r2, r9
 8001002:	2a00      	cmp	r2, #0
 8001004:	d043      	beq.n	800108e <__aeabi_fsub+0x23e>
 8001006:	1b31      	subs	r1, r6, r4
 8001008:	2c00      	cmp	r4, #0
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x1be>
 800100c:	e08c      	b.n	8001128 <__aeabi_fsub+0x2d8>
 800100e:	2eff      	cmp	r6, #255	; 0xff
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x1c4>
 8001012:	e092      	b.n	800113a <__aeabi_fsub+0x2ea>
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	4662      	mov	r2, ip
 8001018:	04db      	lsls	r3, r3, #19
 800101a:	431a      	orrs	r2, r3
 800101c:	4694      	mov	ip, r2
 800101e:	2301      	movs	r3, #1
 8001020:	291b      	cmp	r1, #27
 8001022:	dc09      	bgt.n	8001038 <__aeabi_fsub+0x1e8>
 8001024:	2020      	movs	r0, #32
 8001026:	4663      	mov	r3, ip
 8001028:	4662      	mov	r2, ip
 800102a:	40cb      	lsrs	r3, r1
 800102c:	1a41      	subs	r1, r0, r1
 800102e:	408a      	lsls	r2, r1
 8001030:	0011      	movs	r1, r2
 8001032:	1e48      	subs	r0, r1, #1
 8001034:	4181      	sbcs	r1, r0
 8001036:	430b      	orrs	r3, r1
 8001038:	0034      	movs	r4, r6
 800103a:	4453      	add	r3, sl
 800103c:	e794      	b.n	8000f68 <__aeabi_fsub+0x118>
 800103e:	22fe      	movs	r2, #254	; 0xfe
 8001040:	1c66      	adds	r6, r4, #1
 8001042:	4232      	tst	r2, r6
 8001044:	d164      	bne.n	8001110 <__aeabi_fsub+0x2c0>
 8001046:	2c00      	cmp	r4, #0
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x1fc>
 800104a:	e082      	b.n	8001152 <__aeabi_fsub+0x302>
 800104c:	4663      	mov	r3, ip
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x204>
 8001052:	e0ab      	b.n	80011ac <__aeabi_fsub+0x35c>
 8001054:	4653      	mov	r3, sl
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fsub+0x20c>
 800105a:	e760      	b.n	8000f1e <__aeabi_fsub+0xce>
 800105c:	4663      	mov	r3, ip
 800105e:	4652      	mov	r2, sl
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	015a      	lsls	r2, r3, #5
 8001064:	d400      	bmi.n	8001068 <__aeabi_fsub+0x218>
 8001066:	e0aa      	b.n	80011be <__aeabi_fsub+0x36e>
 8001068:	4663      	mov	r3, ip
 800106a:	4652      	mov	r2, sl
 800106c:	000d      	movs	r5, r1
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	e744      	b.n	8000efc <__aeabi_fsub+0xac>
 8001072:	4652      	mov	r2, sl
 8001074:	2a00      	cmp	r2, #0
 8001076:	d023      	beq.n	80010c0 <__aeabi_fsub+0x270>
 8001078:	2201      	movs	r2, #1
 800107a:	4252      	negs	r2, r2
 800107c:	4690      	mov	r8, r2
 800107e:	44c1      	add	r9, r8
 8001080:	464a      	mov	r2, r9
 8001082:	2a00      	cmp	r2, #0
 8001084:	d075      	beq.n	8001172 <__aeabi_fsub+0x322>
 8001086:	2cff      	cmp	r4, #255	; 0xff
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x23c>
 800108a:	e75f      	b.n	8000f4c <__aeabi_fsub+0xfc>
 800108c:	e796      	b.n	8000fbc <__aeabi_fsub+0x16c>
 800108e:	26fe      	movs	r6, #254	; 0xfe
 8001090:	3401      	adds	r4, #1
 8001092:	4226      	tst	r6, r4
 8001094:	d153      	bne.n	800113e <__aeabi_fsub+0x2ee>
 8001096:	2800      	cmp	r0, #0
 8001098:	d172      	bne.n	8001180 <__aeabi_fsub+0x330>
 800109a:	4663      	mov	r3, ip
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x252>
 80010a0:	e093      	b.n	80011ca <__aeabi_fsub+0x37a>
 80010a2:	4653      	mov	r3, sl
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_fsub+0x25a>
 80010a8:	e739      	b.n	8000f1e <__aeabi_fsub+0xce>
 80010aa:	4463      	add	r3, ip
 80010ac:	2400      	movs	r4, #0
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	d502      	bpl.n	80010b8 <__aeabi_fsub+0x268>
 80010b2:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <__aeabi_fsub+0x38c>)
 80010b4:	3401      	adds	r4, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	075a      	lsls	r2, r3, #29
 80010ba:	d000      	beq.n	80010be <__aeabi_fsub+0x26e>
 80010bc:	e720      	b.n	8000f00 <__aeabi_fsub+0xb0>
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	2cff      	cmp	r4, #255	; 0xff
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x276>
 80010c4:	e77a      	b.n	8000fbc <__aeabi_fsub+0x16c>
 80010c6:	025b      	lsls	r3, r3, #9
 80010c8:	0a5f      	lsrs	r7, r3, #9
 80010ca:	b2e0      	uxtb	r0, r4
 80010cc:	e727      	b.n	8000f1e <__aeabi_fsub+0xce>
 80010ce:	20ff      	movs	r0, #255	; 0xff
 80010d0:	2700      	movs	r7, #0
 80010d2:	e724      	b.n	8000f1e <__aeabi_fsub+0xce>
 80010d4:	4b41      	ldr	r3, [pc, #260]	; (80011dc <__aeabi_fsub+0x38c>)
 80010d6:	1a24      	subs	r4, r4, r0
 80010d8:	4033      	ands	r3, r6
 80010da:	e70f      	b.n	8000efc <__aeabi_fsub+0xac>
 80010dc:	2eff      	cmp	r6, #255	; 0xff
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x292>
 80010e0:	e76a      	b.n	8000fb8 <__aeabi_fsub+0x168>
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	4662      	mov	r2, ip
 80010e6:	04db      	lsls	r3, r3, #19
 80010e8:	431a      	orrs	r2, r3
 80010ea:	4694      	mov	ip, r2
 80010ec:	2301      	movs	r3, #1
 80010ee:	281b      	cmp	r0, #27
 80010f0:	dc09      	bgt.n	8001106 <__aeabi_fsub+0x2b6>
 80010f2:	2420      	movs	r4, #32
 80010f4:	4663      	mov	r3, ip
 80010f6:	4662      	mov	r2, ip
 80010f8:	40c3      	lsrs	r3, r0
 80010fa:	1a20      	subs	r0, r4, r0
 80010fc:	4082      	lsls	r2, r0
 80010fe:	0010      	movs	r0, r2
 8001100:	1e44      	subs	r4, r0, #1
 8001102:	41a0      	sbcs	r0, r4
 8001104:	4303      	orrs	r3, r0
 8001106:	4652      	mov	r2, sl
 8001108:	000d      	movs	r5, r1
 800110a:	0034      	movs	r4, r6
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	e6dc      	b.n	8000eca <__aeabi_fsub+0x7a>
 8001110:	4663      	mov	r3, ip
 8001112:	4652      	mov	r2, sl
 8001114:	1a9e      	subs	r6, r3, r2
 8001116:	0173      	lsls	r3, r6, #5
 8001118:	d417      	bmi.n	800114a <__aeabi_fsub+0x2fa>
 800111a:	2e00      	cmp	r6, #0
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x2d0>
 800111e:	e6d9      	b.n	8000ed4 <__aeabi_fsub+0x84>
 8001120:	2500      	movs	r5, #0
 8001122:	2000      	movs	r0, #0
 8001124:	2700      	movs	r7, #0
 8001126:	e6fa      	b.n	8000f1e <__aeabi_fsub+0xce>
 8001128:	4663      	mov	r3, ip
 800112a:	2b00      	cmp	r3, #0
 800112c:	d044      	beq.n	80011b8 <__aeabi_fsub+0x368>
 800112e:	3901      	subs	r1, #1
 8001130:	2900      	cmp	r1, #0
 8001132:	d04c      	beq.n	80011ce <__aeabi_fsub+0x37e>
 8001134:	2eff      	cmp	r6, #255	; 0xff
 8001136:	d000      	beq.n	800113a <__aeabi_fsub+0x2ea>
 8001138:	e771      	b.n	800101e <__aeabi_fsub+0x1ce>
 800113a:	4643      	mov	r3, r8
 800113c:	e73e      	b.n	8000fbc <__aeabi_fsub+0x16c>
 800113e:	2cff      	cmp	r4, #255	; 0xff
 8001140:	d0c5      	beq.n	80010ce <__aeabi_fsub+0x27e>
 8001142:	4652      	mov	r2, sl
 8001144:	4462      	add	r2, ip
 8001146:	0853      	lsrs	r3, r2, #1
 8001148:	e7b6      	b.n	80010b8 <__aeabi_fsub+0x268>
 800114a:	4663      	mov	r3, ip
 800114c:	000d      	movs	r5, r1
 800114e:	1ad6      	subs	r6, r2, r3
 8001150:	e6c0      	b.n	8000ed4 <__aeabi_fsub+0x84>
 8001152:	4662      	mov	r2, ip
 8001154:	2a00      	cmp	r2, #0
 8001156:	d116      	bne.n	8001186 <__aeabi_fsub+0x336>
 8001158:	4653      	mov	r3, sl
 800115a:	2b00      	cmp	r3, #0
 800115c:	d000      	beq.n	8001160 <__aeabi_fsub+0x310>
 800115e:	e72b      	b.n	8000fb8 <__aeabi_fsub+0x168>
 8001160:	2780      	movs	r7, #128	; 0x80
 8001162:	2500      	movs	r5, #0
 8001164:	20ff      	movs	r0, #255	; 0xff
 8001166:	03ff      	lsls	r7, r7, #15
 8001168:	e6d9      	b.n	8000f1e <__aeabi_fsub+0xce>
 800116a:	000d      	movs	r5, r1
 800116c:	4643      	mov	r3, r8
 800116e:	0034      	movs	r4, r6
 8001170:	e7a6      	b.n	80010c0 <__aeabi_fsub+0x270>
 8001172:	4653      	mov	r3, sl
 8001174:	4463      	add	r3, ip
 8001176:	e6f7      	b.n	8000f68 <__aeabi_fsub+0x118>
 8001178:	4663      	mov	r3, ip
 800117a:	4652      	mov	r2, sl
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	e6a4      	b.n	8000eca <__aeabi_fsub+0x7a>
 8001180:	4662      	mov	r2, ip
 8001182:	2a00      	cmp	r2, #0
 8001184:	d0d9      	beq.n	800113a <__aeabi_fsub+0x2ea>
 8001186:	4652      	mov	r2, sl
 8001188:	2a00      	cmp	r2, #0
 800118a:	d100      	bne.n	800118e <__aeabi_fsub+0x33e>
 800118c:	e716      	b.n	8000fbc <__aeabi_fsub+0x16c>
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	03d2      	lsls	r2, r2, #15
 8001192:	4213      	tst	r3, r2
 8001194:	d100      	bne.n	8001198 <__aeabi_fsub+0x348>
 8001196:	e711      	b.n	8000fbc <__aeabi_fsub+0x16c>
 8001198:	4640      	mov	r0, r8
 800119a:	4210      	tst	r0, r2
 800119c:	d000      	beq.n	80011a0 <__aeabi_fsub+0x350>
 800119e:	e70d      	b.n	8000fbc <__aeabi_fsub+0x16c>
 80011a0:	e70a      	b.n	8000fb8 <__aeabi_fsub+0x168>
 80011a2:	4652      	mov	r2, sl
 80011a4:	000d      	movs	r5, r1
 80011a6:	0034      	movs	r4, r6
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	e68e      	b.n	8000eca <__aeabi_fsub+0x7a>
 80011ac:	4653      	mov	r3, sl
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <__aeabi_fsub+0x374>
 80011b2:	000d      	movs	r5, r1
 80011b4:	4647      	mov	r7, r8
 80011b6:	e6b2      	b.n	8000f1e <__aeabi_fsub+0xce>
 80011b8:	4643      	mov	r3, r8
 80011ba:	0034      	movs	r4, r6
 80011bc:	e780      	b.n	80010c0 <__aeabi_fsub+0x270>
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d000      	beq.n	80011c4 <__aeabi_fsub+0x374>
 80011c2:	e779      	b.n	80010b8 <__aeabi_fsub+0x268>
 80011c4:	2500      	movs	r5, #0
 80011c6:	2700      	movs	r7, #0
 80011c8:	e6a9      	b.n	8000f1e <__aeabi_fsub+0xce>
 80011ca:	4647      	mov	r7, r8
 80011cc:	e6a7      	b.n	8000f1e <__aeabi_fsub+0xce>
 80011ce:	4653      	mov	r3, sl
 80011d0:	0034      	movs	r4, r6
 80011d2:	4463      	add	r3, ip
 80011d4:	e6c8      	b.n	8000f68 <__aeabi_fsub+0x118>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	7dffffff 	.word	0x7dffffff
 80011dc:	fbffffff 	.word	0xfbffffff

080011e0 <__aeabi_f2iz>:
 80011e0:	0241      	lsls	r1, r0, #9
 80011e2:	0042      	lsls	r2, r0, #1
 80011e4:	0fc3      	lsrs	r3, r0, #31
 80011e6:	0a49      	lsrs	r1, r1, #9
 80011e8:	2000      	movs	r0, #0
 80011ea:	0e12      	lsrs	r2, r2, #24
 80011ec:	2a7e      	cmp	r2, #126	; 0x7e
 80011ee:	d903      	bls.n	80011f8 <__aeabi_f2iz+0x18>
 80011f0:	2a9d      	cmp	r2, #157	; 0x9d
 80011f2:	d902      	bls.n	80011fa <__aeabi_f2iz+0x1a>
 80011f4:	4a09      	ldr	r2, [pc, #36]	; (800121c <__aeabi_f2iz+0x3c>)
 80011f6:	1898      	adds	r0, r3, r2
 80011f8:	4770      	bx	lr
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	0400      	lsls	r0, r0, #16
 80011fe:	4301      	orrs	r1, r0
 8001200:	2a95      	cmp	r2, #149	; 0x95
 8001202:	dc07      	bgt.n	8001214 <__aeabi_f2iz+0x34>
 8001204:	2096      	movs	r0, #150	; 0x96
 8001206:	1a82      	subs	r2, r0, r2
 8001208:	40d1      	lsrs	r1, r2
 800120a:	4248      	negs	r0, r1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f3      	bne.n	80011f8 <__aeabi_f2iz+0x18>
 8001210:	0008      	movs	r0, r1
 8001212:	e7f1      	b.n	80011f8 <__aeabi_f2iz+0x18>
 8001214:	3a96      	subs	r2, #150	; 0x96
 8001216:	4091      	lsls	r1, r2
 8001218:	e7f7      	b.n	800120a <__aeabi_f2iz+0x2a>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	7fffffff 	.word	0x7fffffff

08001220 <__aeabi_i2f>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	2800      	cmp	r0, #0
 8001224:	d013      	beq.n	800124e <__aeabi_i2f+0x2e>
 8001226:	17c3      	asrs	r3, r0, #31
 8001228:	18c5      	adds	r5, r0, r3
 800122a:	405d      	eors	r5, r3
 800122c:	0fc4      	lsrs	r4, r0, #31
 800122e:	0028      	movs	r0, r5
 8001230:	f001 f8d4 	bl	80023dc <__clzsi2>
 8001234:	239e      	movs	r3, #158	; 0x9e
 8001236:	0001      	movs	r1, r0
 8001238:	1a1b      	subs	r3, r3, r0
 800123a:	2b96      	cmp	r3, #150	; 0x96
 800123c:	dc0f      	bgt.n	800125e <__aeabi_i2f+0x3e>
 800123e:	2808      	cmp	r0, #8
 8001240:	dd01      	ble.n	8001246 <__aeabi_i2f+0x26>
 8001242:	3908      	subs	r1, #8
 8001244:	408d      	lsls	r5, r1
 8001246:	026d      	lsls	r5, r5, #9
 8001248:	0a6d      	lsrs	r5, r5, #9
 800124a:	b2d8      	uxtb	r0, r3
 800124c:	e002      	b.n	8001254 <__aeabi_i2f+0x34>
 800124e:	2400      	movs	r4, #0
 8001250:	2000      	movs	r0, #0
 8001252:	2500      	movs	r5, #0
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	4328      	orrs	r0, r5
 8001258:	07e4      	lsls	r4, r4, #31
 800125a:	4320      	orrs	r0, r4
 800125c:	bd70      	pop	{r4, r5, r6, pc}
 800125e:	2b99      	cmp	r3, #153	; 0x99
 8001260:	dd0b      	ble.n	800127a <__aeabi_i2f+0x5a>
 8001262:	2205      	movs	r2, #5
 8001264:	002e      	movs	r6, r5
 8001266:	1a12      	subs	r2, r2, r0
 8001268:	40d6      	lsrs	r6, r2
 800126a:	0002      	movs	r2, r0
 800126c:	321b      	adds	r2, #27
 800126e:	4095      	lsls	r5, r2
 8001270:	0028      	movs	r0, r5
 8001272:	1e45      	subs	r5, r0, #1
 8001274:	41a8      	sbcs	r0, r5
 8001276:	0035      	movs	r5, r6
 8001278:	4305      	orrs	r5, r0
 800127a:	2905      	cmp	r1, #5
 800127c:	dd01      	ble.n	8001282 <__aeabi_i2f+0x62>
 800127e:	1f4a      	subs	r2, r1, #5
 8001280:	4095      	lsls	r5, r2
 8001282:	002a      	movs	r2, r5
 8001284:	4e08      	ldr	r6, [pc, #32]	; (80012a8 <__aeabi_i2f+0x88>)
 8001286:	4032      	ands	r2, r6
 8001288:	0768      	lsls	r0, r5, #29
 800128a:	d009      	beq.n	80012a0 <__aeabi_i2f+0x80>
 800128c:	200f      	movs	r0, #15
 800128e:	4028      	ands	r0, r5
 8001290:	2804      	cmp	r0, #4
 8001292:	d005      	beq.n	80012a0 <__aeabi_i2f+0x80>
 8001294:	3204      	adds	r2, #4
 8001296:	0150      	lsls	r0, r2, #5
 8001298:	d502      	bpl.n	80012a0 <__aeabi_i2f+0x80>
 800129a:	239f      	movs	r3, #159	; 0x9f
 800129c:	4032      	ands	r2, r6
 800129e:	1a5b      	subs	r3, r3, r1
 80012a0:	0192      	lsls	r2, r2, #6
 80012a2:	0a55      	lsrs	r5, r2, #9
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	e7d5      	b.n	8001254 <__aeabi_i2f+0x34>
 80012a8:	fbffffff 	.word	0xfbffffff

080012ac <__aeabi_ui2f>:
 80012ac:	b570      	push	{r4, r5, r6, lr}
 80012ae:	1e05      	subs	r5, r0, #0
 80012b0:	d00e      	beq.n	80012d0 <__aeabi_ui2f+0x24>
 80012b2:	f001 f893 	bl	80023dc <__clzsi2>
 80012b6:	239e      	movs	r3, #158	; 0x9e
 80012b8:	0004      	movs	r4, r0
 80012ba:	1a1b      	subs	r3, r3, r0
 80012bc:	2b96      	cmp	r3, #150	; 0x96
 80012be:	dc0c      	bgt.n	80012da <__aeabi_ui2f+0x2e>
 80012c0:	2808      	cmp	r0, #8
 80012c2:	dd01      	ble.n	80012c8 <__aeabi_ui2f+0x1c>
 80012c4:	3c08      	subs	r4, #8
 80012c6:	40a5      	lsls	r5, r4
 80012c8:	026d      	lsls	r5, r5, #9
 80012ca:	0a6d      	lsrs	r5, r5, #9
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	e001      	b.n	80012d4 <__aeabi_ui2f+0x28>
 80012d0:	2000      	movs	r0, #0
 80012d2:	2500      	movs	r5, #0
 80012d4:	05c0      	lsls	r0, r0, #23
 80012d6:	4328      	orrs	r0, r5
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
 80012da:	2b99      	cmp	r3, #153	; 0x99
 80012dc:	dd09      	ble.n	80012f2 <__aeabi_ui2f+0x46>
 80012de:	0002      	movs	r2, r0
 80012e0:	0029      	movs	r1, r5
 80012e2:	321b      	adds	r2, #27
 80012e4:	4091      	lsls	r1, r2
 80012e6:	1e4a      	subs	r2, r1, #1
 80012e8:	4191      	sbcs	r1, r2
 80012ea:	2205      	movs	r2, #5
 80012ec:	1a12      	subs	r2, r2, r0
 80012ee:	40d5      	lsrs	r5, r2
 80012f0:	430d      	orrs	r5, r1
 80012f2:	2c05      	cmp	r4, #5
 80012f4:	dd01      	ble.n	80012fa <__aeabi_ui2f+0x4e>
 80012f6:	1f62      	subs	r2, r4, #5
 80012f8:	4095      	lsls	r5, r2
 80012fa:	0029      	movs	r1, r5
 80012fc:	4e08      	ldr	r6, [pc, #32]	; (8001320 <__aeabi_ui2f+0x74>)
 80012fe:	4031      	ands	r1, r6
 8001300:	076a      	lsls	r2, r5, #29
 8001302:	d009      	beq.n	8001318 <__aeabi_ui2f+0x6c>
 8001304:	200f      	movs	r0, #15
 8001306:	4028      	ands	r0, r5
 8001308:	2804      	cmp	r0, #4
 800130a:	d005      	beq.n	8001318 <__aeabi_ui2f+0x6c>
 800130c:	3104      	adds	r1, #4
 800130e:	014a      	lsls	r2, r1, #5
 8001310:	d502      	bpl.n	8001318 <__aeabi_ui2f+0x6c>
 8001312:	239f      	movs	r3, #159	; 0x9f
 8001314:	4031      	ands	r1, r6
 8001316:	1b1b      	subs	r3, r3, r4
 8001318:	0189      	lsls	r1, r1, #6
 800131a:	0a4d      	lsrs	r5, r1, #9
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	e7d9      	b.n	80012d4 <__aeabi_ui2f+0x28>
 8001320:	fbffffff 	.word	0xfbffffff

08001324 <__aeabi_dadd>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	464f      	mov	r7, r9
 8001328:	46d6      	mov	lr, sl
 800132a:	4646      	mov	r6, r8
 800132c:	000d      	movs	r5, r1
 800132e:	0001      	movs	r1, r0
 8001330:	0018      	movs	r0, r3
 8001332:	b5c0      	push	{r6, r7, lr}
 8001334:	0017      	movs	r7, r2
 8001336:	032b      	lsls	r3, r5, #12
 8001338:	0a5a      	lsrs	r2, r3, #9
 800133a:	0f4b      	lsrs	r3, r1, #29
 800133c:	4313      	orrs	r3, r2
 800133e:	00ca      	lsls	r2, r1, #3
 8001340:	4691      	mov	r9, r2
 8001342:	0302      	lsls	r2, r0, #12
 8001344:	006e      	lsls	r6, r5, #1
 8001346:	0041      	lsls	r1, r0, #1
 8001348:	0a52      	lsrs	r2, r2, #9
 800134a:	0fec      	lsrs	r4, r5, #31
 800134c:	0f7d      	lsrs	r5, r7, #29
 800134e:	4315      	orrs	r5, r2
 8001350:	0d76      	lsrs	r6, r6, #21
 8001352:	0d49      	lsrs	r1, r1, #21
 8001354:	0fc0      	lsrs	r0, r0, #31
 8001356:	4682      	mov	sl, r0
 8001358:	46ac      	mov	ip, r5
 800135a:	00ff      	lsls	r7, r7, #3
 800135c:	1a72      	subs	r2, r6, r1
 800135e:	4284      	cmp	r4, r0
 8001360:	d100      	bne.n	8001364 <__aeabi_dadd+0x40>
 8001362:	e098      	b.n	8001496 <__aeabi_dadd+0x172>
 8001364:	2a00      	cmp	r2, #0
 8001366:	dc00      	bgt.n	800136a <__aeabi_dadd+0x46>
 8001368:	e081      	b.n	800146e <__aeabi_dadd+0x14a>
 800136a:	2900      	cmp	r1, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x4c>
 800136e:	e0b6      	b.n	80014de <__aeabi_dadd+0x1ba>
 8001370:	49c9      	ldr	r1, [pc, #804]	; (8001698 <__aeabi_dadd+0x374>)
 8001372:	428e      	cmp	r6, r1
 8001374:	d100      	bne.n	8001378 <__aeabi_dadd+0x54>
 8001376:	e172      	b.n	800165e <__aeabi_dadd+0x33a>
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0028      	movs	r0, r5
 800137c:	0409      	lsls	r1, r1, #16
 800137e:	4308      	orrs	r0, r1
 8001380:	4684      	mov	ip, r0
 8001382:	2a38      	cmp	r2, #56	; 0x38
 8001384:	dd00      	ble.n	8001388 <__aeabi_dadd+0x64>
 8001386:	e15e      	b.n	8001646 <__aeabi_dadd+0x322>
 8001388:	2a1f      	cmp	r2, #31
 800138a:	dd00      	ble.n	800138e <__aeabi_dadd+0x6a>
 800138c:	e1ee      	b.n	800176c <__aeabi_dadd+0x448>
 800138e:	2020      	movs	r0, #32
 8001390:	0039      	movs	r1, r7
 8001392:	4665      	mov	r5, ip
 8001394:	1a80      	subs	r0, r0, r2
 8001396:	4087      	lsls	r7, r0
 8001398:	40d1      	lsrs	r1, r2
 800139a:	4085      	lsls	r5, r0
 800139c:	430d      	orrs	r5, r1
 800139e:	0039      	movs	r1, r7
 80013a0:	1e4f      	subs	r7, r1, #1
 80013a2:	41b9      	sbcs	r1, r7
 80013a4:	4667      	mov	r7, ip
 80013a6:	40d7      	lsrs	r7, r2
 80013a8:	4329      	orrs	r1, r5
 80013aa:	1bdb      	subs	r3, r3, r7
 80013ac:	464a      	mov	r2, r9
 80013ae:	1a55      	subs	r5, r2, r1
 80013b0:	45a9      	cmp	r9, r5
 80013b2:	4189      	sbcs	r1, r1
 80013b4:	4249      	negs	r1, r1
 80013b6:	1a5b      	subs	r3, r3, r1
 80013b8:	4698      	mov	r8, r3
 80013ba:	4643      	mov	r3, r8
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	d400      	bmi.n	80013c2 <__aeabi_dadd+0x9e>
 80013c0:	e0cc      	b.n	800155c <__aeabi_dadd+0x238>
 80013c2:	4643      	mov	r3, r8
 80013c4:	025b      	lsls	r3, r3, #9
 80013c6:	0a5b      	lsrs	r3, r3, #9
 80013c8:	4698      	mov	r8, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0xae>
 80013d0:	e12c      	b.n	800162c <__aeabi_dadd+0x308>
 80013d2:	4640      	mov	r0, r8
 80013d4:	f001 f802 	bl	80023dc <__clzsi2>
 80013d8:	0001      	movs	r1, r0
 80013da:	3908      	subs	r1, #8
 80013dc:	2220      	movs	r2, #32
 80013de:	0028      	movs	r0, r5
 80013e0:	4643      	mov	r3, r8
 80013e2:	1a52      	subs	r2, r2, r1
 80013e4:	408b      	lsls	r3, r1
 80013e6:	40d0      	lsrs	r0, r2
 80013e8:	408d      	lsls	r5, r1
 80013ea:	4303      	orrs	r3, r0
 80013ec:	428e      	cmp	r6, r1
 80013ee:	dd00      	ble.n	80013f2 <__aeabi_dadd+0xce>
 80013f0:	e117      	b.n	8001622 <__aeabi_dadd+0x2fe>
 80013f2:	1b8e      	subs	r6, r1, r6
 80013f4:	1c72      	adds	r2, r6, #1
 80013f6:	2a1f      	cmp	r2, #31
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dadd+0xd8>
 80013fa:	e1a7      	b.n	800174c <__aeabi_dadd+0x428>
 80013fc:	2120      	movs	r1, #32
 80013fe:	0018      	movs	r0, r3
 8001400:	002e      	movs	r6, r5
 8001402:	1a89      	subs	r1, r1, r2
 8001404:	408d      	lsls	r5, r1
 8001406:	4088      	lsls	r0, r1
 8001408:	40d6      	lsrs	r6, r2
 800140a:	40d3      	lsrs	r3, r2
 800140c:	1e69      	subs	r1, r5, #1
 800140e:	418d      	sbcs	r5, r1
 8001410:	4330      	orrs	r0, r6
 8001412:	4698      	mov	r8, r3
 8001414:	2600      	movs	r6, #0
 8001416:	4305      	orrs	r5, r0
 8001418:	076b      	lsls	r3, r5, #29
 800141a:	d009      	beq.n	8001430 <__aeabi_dadd+0x10c>
 800141c:	230f      	movs	r3, #15
 800141e:	402b      	ands	r3, r5
 8001420:	2b04      	cmp	r3, #4
 8001422:	d005      	beq.n	8001430 <__aeabi_dadd+0x10c>
 8001424:	1d2b      	adds	r3, r5, #4
 8001426:	42ab      	cmp	r3, r5
 8001428:	41ad      	sbcs	r5, r5
 800142a:	426d      	negs	r5, r5
 800142c:	44a8      	add	r8, r5
 800142e:	001d      	movs	r5, r3
 8001430:	4643      	mov	r3, r8
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	d400      	bmi.n	8001438 <__aeabi_dadd+0x114>
 8001436:	e094      	b.n	8001562 <__aeabi_dadd+0x23e>
 8001438:	4b97      	ldr	r3, [pc, #604]	; (8001698 <__aeabi_dadd+0x374>)
 800143a:	1c72      	adds	r2, r6, #1
 800143c:	429a      	cmp	r2, r3
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x11e>
 8001440:	e09d      	b.n	800157e <__aeabi_dadd+0x25a>
 8001442:	4641      	mov	r1, r8
 8001444:	4b95      	ldr	r3, [pc, #596]	; (800169c <__aeabi_dadd+0x378>)
 8001446:	08ed      	lsrs	r5, r5, #3
 8001448:	4019      	ands	r1, r3
 800144a:	000b      	movs	r3, r1
 800144c:	0552      	lsls	r2, r2, #21
 800144e:	0749      	lsls	r1, r1, #29
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	4329      	orrs	r1, r5
 8001454:	0b1b      	lsrs	r3, r3, #12
 8001456:	0d52      	lsrs	r2, r2, #21
 8001458:	0512      	lsls	r2, r2, #20
 800145a:	4313      	orrs	r3, r2
 800145c:	07e4      	lsls	r4, r4, #31
 800145e:	4323      	orrs	r3, r4
 8001460:	0008      	movs	r0, r1
 8001462:	0019      	movs	r1, r3
 8001464:	bce0      	pop	{r5, r6, r7}
 8001466:	46ba      	mov	sl, r7
 8001468:	46b1      	mov	r9, r6
 800146a:	46a8      	mov	r8, r5
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	2a00      	cmp	r2, #0
 8001470:	d043      	beq.n	80014fa <__aeabi_dadd+0x1d6>
 8001472:	1b8a      	subs	r2, r1, r6
 8001474:	2e00      	cmp	r6, #0
 8001476:	d000      	beq.n	800147a <__aeabi_dadd+0x156>
 8001478:	e12a      	b.n	80016d0 <__aeabi_dadd+0x3ac>
 800147a:	464c      	mov	r4, r9
 800147c:	431c      	orrs	r4, r3
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x15e>
 8001480:	e1d1      	b.n	8001826 <__aeabi_dadd+0x502>
 8001482:	1e54      	subs	r4, r2, #1
 8001484:	2a01      	cmp	r2, #1
 8001486:	d100      	bne.n	800148a <__aeabi_dadd+0x166>
 8001488:	e21f      	b.n	80018ca <__aeabi_dadd+0x5a6>
 800148a:	4d83      	ldr	r5, [pc, #524]	; (8001698 <__aeabi_dadd+0x374>)
 800148c:	42aa      	cmp	r2, r5
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x16e>
 8001490:	e272      	b.n	8001978 <__aeabi_dadd+0x654>
 8001492:	0022      	movs	r2, r4
 8001494:	e123      	b.n	80016de <__aeabi_dadd+0x3ba>
 8001496:	2a00      	cmp	r2, #0
 8001498:	dc00      	bgt.n	800149c <__aeabi_dadd+0x178>
 800149a:	e098      	b.n	80015ce <__aeabi_dadd+0x2aa>
 800149c:	2900      	cmp	r1, #0
 800149e:	d042      	beq.n	8001526 <__aeabi_dadd+0x202>
 80014a0:	497d      	ldr	r1, [pc, #500]	; (8001698 <__aeabi_dadd+0x374>)
 80014a2:	428e      	cmp	r6, r1
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x184>
 80014a6:	e0da      	b.n	800165e <__aeabi_dadd+0x33a>
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0028      	movs	r0, r5
 80014ac:	0409      	lsls	r1, r1, #16
 80014ae:	4308      	orrs	r0, r1
 80014b0:	4684      	mov	ip, r0
 80014b2:	2a38      	cmp	r2, #56	; 0x38
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x194>
 80014b6:	e129      	b.n	800170c <__aeabi_dadd+0x3e8>
 80014b8:	2a1f      	cmp	r2, #31
 80014ba:	dc00      	bgt.n	80014be <__aeabi_dadd+0x19a>
 80014bc:	e187      	b.n	80017ce <__aeabi_dadd+0x4aa>
 80014be:	0011      	movs	r1, r2
 80014c0:	4665      	mov	r5, ip
 80014c2:	3920      	subs	r1, #32
 80014c4:	40cd      	lsrs	r5, r1
 80014c6:	2a20      	cmp	r2, #32
 80014c8:	d004      	beq.n	80014d4 <__aeabi_dadd+0x1b0>
 80014ca:	2040      	movs	r0, #64	; 0x40
 80014cc:	4661      	mov	r1, ip
 80014ce:	1a82      	subs	r2, r0, r2
 80014d0:	4091      	lsls	r1, r2
 80014d2:	430f      	orrs	r7, r1
 80014d4:	0039      	movs	r1, r7
 80014d6:	1e4f      	subs	r7, r1, #1
 80014d8:	41b9      	sbcs	r1, r7
 80014da:	430d      	orrs	r5, r1
 80014dc:	e11b      	b.n	8001716 <__aeabi_dadd+0x3f2>
 80014de:	0029      	movs	r1, r5
 80014e0:	4339      	orrs	r1, r7
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x1c2>
 80014e4:	e0b5      	b.n	8001652 <__aeabi_dadd+0x32e>
 80014e6:	1e51      	subs	r1, r2, #1
 80014e8:	2a01      	cmp	r2, #1
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x1ca>
 80014ec:	e1ab      	b.n	8001846 <__aeabi_dadd+0x522>
 80014ee:	486a      	ldr	r0, [pc, #424]	; (8001698 <__aeabi_dadd+0x374>)
 80014f0:	4282      	cmp	r2, r0
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x1d2>
 80014f4:	e1b2      	b.n	800185c <__aeabi_dadd+0x538>
 80014f6:	000a      	movs	r2, r1
 80014f8:	e743      	b.n	8001382 <__aeabi_dadd+0x5e>
 80014fa:	4969      	ldr	r1, [pc, #420]	; (80016a0 <__aeabi_dadd+0x37c>)
 80014fc:	1c75      	adds	r5, r6, #1
 80014fe:	420d      	tst	r5, r1
 8001500:	d000      	beq.n	8001504 <__aeabi_dadd+0x1e0>
 8001502:	e0cf      	b.n	80016a4 <__aeabi_dadd+0x380>
 8001504:	2e00      	cmp	r6, #0
 8001506:	d000      	beq.n	800150a <__aeabi_dadd+0x1e6>
 8001508:	e193      	b.n	8001832 <__aeabi_dadd+0x50e>
 800150a:	4649      	mov	r1, r9
 800150c:	4319      	orrs	r1, r3
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x1ee>
 8001510:	e1d1      	b.n	80018b6 <__aeabi_dadd+0x592>
 8001512:	4661      	mov	r1, ip
 8001514:	4339      	orrs	r1, r7
 8001516:	d000      	beq.n	800151a <__aeabi_dadd+0x1f6>
 8001518:	e1e3      	b.n	80018e2 <__aeabi_dadd+0x5be>
 800151a:	4649      	mov	r1, r9
 800151c:	0758      	lsls	r0, r3, #29
 800151e:	08c9      	lsrs	r1, r1, #3
 8001520:	4301      	orrs	r1, r0
 8001522:	08db      	lsrs	r3, r3, #3
 8001524:	e026      	b.n	8001574 <__aeabi_dadd+0x250>
 8001526:	0029      	movs	r1, r5
 8001528:	4339      	orrs	r1, r7
 800152a:	d100      	bne.n	800152e <__aeabi_dadd+0x20a>
 800152c:	e091      	b.n	8001652 <__aeabi_dadd+0x32e>
 800152e:	1e51      	subs	r1, r2, #1
 8001530:	2a01      	cmp	r2, #1
 8001532:	d005      	beq.n	8001540 <__aeabi_dadd+0x21c>
 8001534:	4858      	ldr	r0, [pc, #352]	; (8001698 <__aeabi_dadd+0x374>)
 8001536:	4282      	cmp	r2, r0
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x218>
 800153a:	e18f      	b.n	800185c <__aeabi_dadd+0x538>
 800153c:	000a      	movs	r2, r1
 800153e:	e7b8      	b.n	80014b2 <__aeabi_dadd+0x18e>
 8001540:	003d      	movs	r5, r7
 8001542:	444d      	add	r5, r9
 8001544:	454d      	cmp	r5, r9
 8001546:	4189      	sbcs	r1, r1
 8001548:	4463      	add	r3, ip
 800154a:	4698      	mov	r8, r3
 800154c:	4249      	negs	r1, r1
 800154e:	4488      	add	r8, r1
 8001550:	4643      	mov	r3, r8
 8001552:	2602      	movs	r6, #2
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	d500      	bpl.n	800155a <__aeabi_dadd+0x236>
 8001558:	e0eb      	b.n	8001732 <__aeabi_dadd+0x40e>
 800155a:	3e01      	subs	r6, #1
 800155c:	076b      	lsls	r3, r5, #29
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x23e>
 8001560:	e75c      	b.n	800141c <__aeabi_dadd+0xf8>
 8001562:	4643      	mov	r3, r8
 8001564:	08e9      	lsrs	r1, r5, #3
 8001566:	075a      	lsls	r2, r3, #29
 8001568:	4311      	orrs	r1, r2
 800156a:	0032      	movs	r2, r6
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	484a      	ldr	r0, [pc, #296]	; (8001698 <__aeabi_dadd+0x374>)
 8001570:	4282      	cmp	r2, r0
 8001572:	d021      	beq.n	80015b8 <__aeabi_dadd+0x294>
 8001574:	031b      	lsls	r3, r3, #12
 8001576:	0552      	lsls	r2, r2, #21
 8001578:	0b1b      	lsrs	r3, r3, #12
 800157a:	0d52      	lsrs	r2, r2, #21
 800157c:	e76c      	b.n	8001458 <__aeabi_dadd+0x134>
 800157e:	2300      	movs	r3, #0
 8001580:	2100      	movs	r1, #0
 8001582:	e769      	b.n	8001458 <__aeabi_dadd+0x134>
 8001584:	002a      	movs	r2, r5
 8001586:	433a      	orrs	r2, r7
 8001588:	d069      	beq.n	800165e <__aeabi_dadd+0x33a>
 800158a:	464a      	mov	r2, r9
 800158c:	0758      	lsls	r0, r3, #29
 800158e:	08d1      	lsrs	r1, r2, #3
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	031b      	lsls	r3, r3, #12
 8001596:	4308      	orrs	r0, r1
 8001598:	421a      	tst	r2, r3
 800159a:	d007      	beq.n	80015ac <__aeabi_dadd+0x288>
 800159c:	0029      	movs	r1, r5
 800159e:	08ed      	lsrs	r5, r5, #3
 80015a0:	421d      	tst	r5, r3
 80015a2:	d103      	bne.n	80015ac <__aeabi_dadd+0x288>
 80015a4:	002a      	movs	r2, r5
 80015a6:	08ff      	lsrs	r7, r7, #3
 80015a8:	0748      	lsls	r0, r1, #29
 80015aa:	4338      	orrs	r0, r7
 80015ac:	0f43      	lsrs	r3, r0, #29
 80015ae:	00c1      	lsls	r1, r0, #3
 80015b0:	075b      	lsls	r3, r3, #29
 80015b2:	08c9      	lsrs	r1, r1, #3
 80015b4:	4319      	orrs	r1, r3
 80015b6:	0013      	movs	r3, r2
 80015b8:	000a      	movs	r2, r1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dadd+0x29c>
 80015be:	e213      	b.n	80019e8 <__aeabi_dadd+0x6c4>
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	0312      	lsls	r2, r2, #12
 80015c4:	4313      	orrs	r3, r2
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	4a33      	ldr	r2, [pc, #204]	; (8001698 <__aeabi_dadd+0x374>)
 80015ca:	0b1b      	lsrs	r3, r3, #12
 80015cc:	e744      	b.n	8001458 <__aeabi_dadd+0x134>
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	d04b      	beq.n	800166a <__aeabi_dadd+0x346>
 80015d2:	1b8a      	subs	r2, r1, r6
 80015d4:	2e00      	cmp	r6, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x2b6>
 80015d8:	e0e7      	b.n	80017aa <__aeabi_dadd+0x486>
 80015da:	482f      	ldr	r0, [pc, #188]	; (8001698 <__aeabi_dadd+0x374>)
 80015dc:	4281      	cmp	r1, r0
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x2be>
 80015e0:	e195      	b.n	800190e <__aeabi_dadd+0x5ea>
 80015e2:	2080      	movs	r0, #128	; 0x80
 80015e4:	0400      	lsls	r0, r0, #16
 80015e6:	4303      	orrs	r3, r0
 80015e8:	2a38      	cmp	r2, #56	; 0x38
 80015ea:	dd00      	ble.n	80015ee <__aeabi_dadd+0x2ca>
 80015ec:	e143      	b.n	8001876 <__aeabi_dadd+0x552>
 80015ee:	2a1f      	cmp	r2, #31
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dadd+0x2d0>
 80015f2:	e1db      	b.n	80019ac <__aeabi_dadd+0x688>
 80015f4:	2020      	movs	r0, #32
 80015f6:	001d      	movs	r5, r3
 80015f8:	464e      	mov	r6, r9
 80015fa:	1a80      	subs	r0, r0, r2
 80015fc:	4085      	lsls	r5, r0
 80015fe:	40d6      	lsrs	r6, r2
 8001600:	4335      	orrs	r5, r6
 8001602:	464e      	mov	r6, r9
 8001604:	4086      	lsls	r6, r0
 8001606:	0030      	movs	r0, r6
 8001608:	40d3      	lsrs	r3, r2
 800160a:	1e46      	subs	r6, r0, #1
 800160c:	41b0      	sbcs	r0, r6
 800160e:	449c      	add	ip, r3
 8001610:	4305      	orrs	r5, r0
 8001612:	19ed      	adds	r5, r5, r7
 8001614:	42bd      	cmp	r5, r7
 8001616:	419b      	sbcs	r3, r3
 8001618:	425b      	negs	r3, r3
 800161a:	4463      	add	r3, ip
 800161c:	4698      	mov	r8, r3
 800161e:	000e      	movs	r6, r1
 8001620:	e07f      	b.n	8001722 <__aeabi_dadd+0x3fe>
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <__aeabi_dadd+0x378>)
 8001624:	1a76      	subs	r6, r6, r1
 8001626:	4013      	ands	r3, r2
 8001628:	4698      	mov	r8, r3
 800162a:	e6f5      	b.n	8001418 <__aeabi_dadd+0xf4>
 800162c:	0028      	movs	r0, r5
 800162e:	f000 fed5 	bl	80023dc <__clzsi2>
 8001632:	0001      	movs	r1, r0
 8001634:	3118      	adds	r1, #24
 8001636:	291f      	cmp	r1, #31
 8001638:	dc00      	bgt.n	800163c <__aeabi_dadd+0x318>
 800163a:	e6cf      	b.n	80013dc <__aeabi_dadd+0xb8>
 800163c:	002b      	movs	r3, r5
 800163e:	3808      	subs	r0, #8
 8001640:	4083      	lsls	r3, r0
 8001642:	2500      	movs	r5, #0
 8001644:	e6d2      	b.n	80013ec <__aeabi_dadd+0xc8>
 8001646:	4662      	mov	r2, ip
 8001648:	433a      	orrs	r2, r7
 800164a:	0011      	movs	r1, r2
 800164c:	1e4f      	subs	r7, r1, #1
 800164e:	41b9      	sbcs	r1, r7
 8001650:	e6ac      	b.n	80013ac <__aeabi_dadd+0x88>
 8001652:	4649      	mov	r1, r9
 8001654:	0758      	lsls	r0, r3, #29
 8001656:	08c9      	lsrs	r1, r1, #3
 8001658:	4301      	orrs	r1, r0
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	e787      	b.n	800156e <__aeabi_dadd+0x24a>
 800165e:	4649      	mov	r1, r9
 8001660:	075a      	lsls	r2, r3, #29
 8001662:	08c9      	lsrs	r1, r1, #3
 8001664:	4311      	orrs	r1, r2
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	e7a6      	b.n	80015b8 <__aeabi_dadd+0x294>
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <__aeabi_dadd+0x37c>)
 800166c:	1c70      	adds	r0, r6, #1
 800166e:	4208      	tst	r0, r1
 8001670:	d000      	beq.n	8001674 <__aeabi_dadd+0x350>
 8001672:	e0bb      	b.n	80017ec <__aeabi_dadd+0x4c8>
 8001674:	2e00      	cmp	r6, #0
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x356>
 8001678:	e114      	b.n	80018a4 <__aeabi_dadd+0x580>
 800167a:	4649      	mov	r1, r9
 800167c:	4319      	orrs	r1, r3
 800167e:	d100      	bne.n	8001682 <__aeabi_dadd+0x35e>
 8001680:	e175      	b.n	800196e <__aeabi_dadd+0x64a>
 8001682:	0029      	movs	r1, r5
 8001684:	4339      	orrs	r1, r7
 8001686:	d000      	beq.n	800168a <__aeabi_dadd+0x366>
 8001688:	e17e      	b.n	8001988 <__aeabi_dadd+0x664>
 800168a:	4649      	mov	r1, r9
 800168c:	0758      	lsls	r0, r3, #29
 800168e:	08c9      	lsrs	r1, r1, #3
 8001690:	4301      	orrs	r1, r0
 8001692:	08db      	lsrs	r3, r3, #3
 8001694:	e76e      	b.n	8001574 <__aeabi_dadd+0x250>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	000007ff 	.word	0x000007ff
 800169c:	ff7fffff 	.word	0xff7fffff
 80016a0:	000007fe 	.word	0x000007fe
 80016a4:	4649      	mov	r1, r9
 80016a6:	1bcd      	subs	r5, r1, r7
 80016a8:	4661      	mov	r1, ip
 80016aa:	1a58      	subs	r0, r3, r1
 80016ac:	45a9      	cmp	r9, r5
 80016ae:	4189      	sbcs	r1, r1
 80016b0:	4249      	negs	r1, r1
 80016b2:	4688      	mov	r8, r1
 80016b4:	0001      	movs	r1, r0
 80016b6:	4640      	mov	r0, r8
 80016b8:	1a09      	subs	r1, r1, r0
 80016ba:	4688      	mov	r8, r1
 80016bc:	0209      	lsls	r1, r1, #8
 80016be:	d500      	bpl.n	80016c2 <__aeabi_dadd+0x39e>
 80016c0:	e0a6      	b.n	8001810 <__aeabi_dadd+0x4ec>
 80016c2:	4641      	mov	r1, r8
 80016c4:	4329      	orrs	r1, r5
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x3a6>
 80016c8:	e67f      	b.n	80013ca <__aeabi_dadd+0xa6>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2400      	movs	r4, #0
 80016ce:	e751      	b.n	8001574 <__aeabi_dadd+0x250>
 80016d0:	4cc7      	ldr	r4, [pc, #796]	; (80019f0 <__aeabi_dadd+0x6cc>)
 80016d2:	42a1      	cmp	r1, r4
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dadd+0x3b4>
 80016d6:	e0c7      	b.n	8001868 <__aeabi_dadd+0x544>
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4323      	orrs	r3, r4
 80016de:	2a38      	cmp	r2, #56	; 0x38
 80016e0:	dc54      	bgt.n	800178c <__aeabi_dadd+0x468>
 80016e2:	2a1f      	cmp	r2, #31
 80016e4:	dd00      	ble.n	80016e8 <__aeabi_dadd+0x3c4>
 80016e6:	e0cc      	b.n	8001882 <__aeabi_dadd+0x55e>
 80016e8:	2420      	movs	r4, #32
 80016ea:	4648      	mov	r0, r9
 80016ec:	1aa4      	subs	r4, r4, r2
 80016ee:	001d      	movs	r5, r3
 80016f0:	464e      	mov	r6, r9
 80016f2:	40a0      	lsls	r0, r4
 80016f4:	40d6      	lsrs	r6, r2
 80016f6:	40a5      	lsls	r5, r4
 80016f8:	0004      	movs	r4, r0
 80016fa:	40d3      	lsrs	r3, r2
 80016fc:	4662      	mov	r2, ip
 80016fe:	4335      	orrs	r5, r6
 8001700:	1e66      	subs	r6, r4, #1
 8001702:	41b4      	sbcs	r4, r6
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	469c      	mov	ip, r3
 8001708:	4325      	orrs	r5, r4
 800170a:	e044      	b.n	8001796 <__aeabi_dadd+0x472>
 800170c:	4662      	mov	r2, ip
 800170e:	433a      	orrs	r2, r7
 8001710:	0015      	movs	r5, r2
 8001712:	1e6f      	subs	r7, r5, #1
 8001714:	41bd      	sbcs	r5, r7
 8001716:	444d      	add	r5, r9
 8001718:	454d      	cmp	r5, r9
 800171a:	4189      	sbcs	r1, r1
 800171c:	4249      	negs	r1, r1
 800171e:	4688      	mov	r8, r1
 8001720:	4498      	add	r8, r3
 8001722:	4643      	mov	r3, r8
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	d400      	bmi.n	800172a <__aeabi_dadd+0x406>
 8001728:	e718      	b.n	800155c <__aeabi_dadd+0x238>
 800172a:	4bb1      	ldr	r3, [pc, #708]	; (80019f0 <__aeabi_dadd+0x6cc>)
 800172c:	3601      	adds	r6, #1
 800172e:	429e      	cmp	r6, r3
 8001730:	d049      	beq.n	80017c6 <__aeabi_dadd+0x4a2>
 8001732:	4642      	mov	r2, r8
 8001734:	4baf      	ldr	r3, [pc, #700]	; (80019f4 <__aeabi_dadd+0x6d0>)
 8001736:	2101      	movs	r1, #1
 8001738:	401a      	ands	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	086a      	lsrs	r2, r5, #1
 800173e:	400d      	ands	r5, r1
 8001740:	4315      	orrs	r5, r2
 8001742:	07d9      	lsls	r1, r3, #31
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	4698      	mov	r8, r3
 8001748:	430d      	orrs	r5, r1
 800174a:	e665      	b.n	8001418 <__aeabi_dadd+0xf4>
 800174c:	0018      	movs	r0, r3
 800174e:	3e1f      	subs	r6, #31
 8001750:	40f0      	lsrs	r0, r6
 8001752:	2a20      	cmp	r2, #32
 8001754:	d003      	beq.n	800175e <__aeabi_dadd+0x43a>
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	1a8a      	subs	r2, r1, r2
 800175a:	4093      	lsls	r3, r2
 800175c:	431d      	orrs	r5, r3
 800175e:	1e69      	subs	r1, r5, #1
 8001760:	418d      	sbcs	r5, r1
 8001762:	2300      	movs	r3, #0
 8001764:	2600      	movs	r6, #0
 8001766:	4698      	mov	r8, r3
 8001768:	4305      	orrs	r5, r0
 800176a:	e6f7      	b.n	800155c <__aeabi_dadd+0x238>
 800176c:	0011      	movs	r1, r2
 800176e:	4665      	mov	r5, ip
 8001770:	3920      	subs	r1, #32
 8001772:	40cd      	lsrs	r5, r1
 8001774:	2a20      	cmp	r2, #32
 8001776:	d004      	beq.n	8001782 <__aeabi_dadd+0x45e>
 8001778:	2040      	movs	r0, #64	; 0x40
 800177a:	4661      	mov	r1, ip
 800177c:	1a82      	subs	r2, r0, r2
 800177e:	4091      	lsls	r1, r2
 8001780:	430f      	orrs	r7, r1
 8001782:	0039      	movs	r1, r7
 8001784:	1e4f      	subs	r7, r1, #1
 8001786:	41b9      	sbcs	r1, r7
 8001788:	4329      	orrs	r1, r5
 800178a:	e60f      	b.n	80013ac <__aeabi_dadd+0x88>
 800178c:	464a      	mov	r2, r9
 800178e:	4313      	orrs	r3, r2
 8001790:	001d      	movs	r5, r3
 8001792:	1e6b      	subs	r3, r5, #1
 8001794:	419d      	sbcs	r5, r3
 8001796:	1b7d      	subs	r5, r7, r5
 8001798:	42af      	cmp	r7, r5
 800179a:	419b      	sbcs	r3, r3
 800179c:	4662      	mov	r2, ip
 800179e:	425b      	negs	r3, r3
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	4698      	mov	r8, r3
 80017a4:	4654      	mov	r4, sl
 80017a6:	000e      	movs	r6, r1
 80017a8:	e607      	b.n	80013ba <__aeabi_dadd+0x96>
 80017aa:	4648      	mov	r0, r9
 80017ac:	4318      	orrs	r0, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x48e>
 80017b0:	e0b3      	b.n	800191a <__aeabi_dadd+0x5f6>
 80017b2:	1e50      	subs	r0, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x496>
 80017b8:	e10d      	b.n	80019d6 <__aeabi_dadd+0x6b2>
 80017ba:	4d8d      	ldr	r5, [pc, #564]	; (80019f0 <__aeabi_dadd+0x6cc>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x49e>
 80017c0:	e0a5      	b.n	800190e <__aeabi_dadd+0x5ea>
 80017c2:	0002      	movs	r2, r0
 80017c4:	e710      	b.n	80015e8 <__aeabi_dadd+0x2c4>
 80017c6:	0032      	movs	r2, r6
 80017c8:	2300      	movs	r3, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	e644      	b.n	8001458 <__aeabi_dadd+0x134>
 80017ce:	2120      	movs	r1, #32
 80017d0:	0038      	movs	r0, r7
 80017d2:	1a89      	subs	r1, r1, r2
 80017d4:	4665      	mov	r5, ip
 80017d6:	408f      	lsls	r7, r1
 80017d8:	408d      	lsls	r5, r1
 80017da:	40d0      	lsrs	r0, r2
 80017dc:	1e79      	subs	r1, r7, #1
 80017de:	418f      	sbcs	r7, r1
 80017e0:	4305      	orrs	r5, r0
 80017e2:	433d      	orrs	r5, r7
 80017e4:	4667      	mov	r7, ip
 80017e6:	40d7      	lsrs	r7, r2
 80017e8:	19db      	adds	r3, r3, r7
 80017ea:	e794      	b.n	8001716 <__aeabi_dadd+0x3f2>
 80017ec:	4a80      	ldr	r2, [pc, #512]	; (80019f0 <__aeabi_dadd+0x6cc>)
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dadd+0x4d0>
 80017f2:	e0ec      	b.n	80019ce <__aeabi_dadd+0x6aa>
 80017f4:	0039      	movs	r1, r7
 80017f6:	4449      	add	r1, r9
 80017f8:	4549      	cmp	r1, r9
 80017fa:	4192      	sbcs	r2, r2
 80017fc:	4463      	add	r3, ip
 80017fe:	4252      	negs	r2, r2
 8001800:	189b      	adds	r3, r3, r2
 8001802:	07dd      	lsls	r5, r3, #31
 8001804:	0849      	lsrs	r1, r1, #1
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	4698      	mov	r8, r3
 800180a:	0006      	movs	r6, r0
 800180c:	430d      	orrs	r5, r1
 800180e:	e6a5      	b.n	800155c <__aeabi_dadd+0x238>
 8001810:	464a      	mov	r2, r9
 8001812:	1abd      	subs	r5, r7, r2
 8001814:	42af      	cmp	r7, r5
 8001816:	4189      	sbcs	r1, r1
 8001818:	4662      	mov	r2, ip
 800181a:	4249      	negs	r1, r1
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	1a5b      	subs	r3, r3, r1
 8001820:	4698      	mov	r8, r3
 8001822:	4654      	mov	r4, sl
 8001824:	e5d1      	b.n	80013ca <__aeabi_dadd+0xa6>
 8001826:	076c      	lsls	r4, r5, #29
 8001828:	08f9      	lsrs	r1, r7, #3
 800182a:	4321      	orrs	r1, r4
 800182c:	08eb      	lsrs	r3, r5, #3
 800182e:	0004      	movs	r4, r0
 8001830:	e69d      	b.n	800156e <__aeabi_dadd+0x24a>
 8001832:	464a      	mov	r2, r9
 8001834:	431a      	orrs	r2, r3
 8001836:	d175      	bne.n	8001924 <__aeabi_dadd+0x600>
 8001838:	4661      	mov	r1, ip
 800183a:	4339      	orrs	r1, r7
 800183c:	d114      	bne.n	8001868 <__aeabi_dadd+0x544>
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	2400      	movs	r4, #0
 8001842:	031b      	lsls	r3, r3, #12
 8001844:	e6bc      	b.n	80015c0 <__aeabi_dadd+0x29c>
 8001846:	464a      	mov	r2, r9
 8001848:	1bd5      	subs	r5, r2, r7
 800184a:	45a9      	cmp	r9, r5
 800184c:	4189      	sbcs	r1, r1
 800184e:	4662      	mov	r2, ip
 8001850:	4249      	negs	r1, r1
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	4698      	mov	r8, r3
 8001858:	2601      	movs	r6, #1
 800185a:	e5ae      	b.n	80013ba <__aeabi_dadd+0x96>
 800185c:	464a      	mov	r2, r9
 800185e:	08d1      	lsrs	r1, r2, #3
 8001860:	075a      	lsls	r2, r3, #29
 8001862:	4311      	orrs	r1, r2
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	e6a7      	b.n	80015b8 <__aeabi_dadd+0x294>
 8001868:	4663      	mov	r3, ip
 800186a:	08f9      	lsrs	r1, r7, #3
 800186c:	075a      	lsls	r2, r3, #29
 800186e:	4654      	mov	r4, sl
 8001870:	4311      	orrs	r1, r2
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	e6a0      	b.n	80015b8 <__aeabi_dadd+0x294>
 8001876:	464a      	mov	r2, r9
 8001878:	4313      	orrs	r3, r2
 800187a:	001d      	movs	r5, r3
 800187c:	1e6b      	subs	r3, r5, #1
 800187e:	419d      	sbcs	r5, r3
 8001880:	e6c7      	b.n	8001612 <__aeabi_dadd+0x2ee>
 8001882:	0014      	movs	r4, r2
 8001884:	001e      	movs	r6, r3
 8001886:	3c20      	subs	r4, #32
 8001888:	40e6      	lsrs	r6, r4
 800188a:	2a20      	cmp	r2, #32
 800188c:	d005      	beq.n	800189a <__aeabi_dadd+0x576>
 800188e:	2440      	movs	r4, #64	; 0x40
 8001890:	1aa2      	subs	r2, r4, r2
 8001892:	4093      	lsls	r3, r2
 8001894:	464a      	mov	r2, r9
 8001896:	431a      	orrs	r2, r3
 8001898:	4691      	mov	r9, r2
 800189a:	464d      	mov	r5, r9
 800189c:	1e6b      	subs	r3, r5, #1
 800189e:	419d      	sbcs	r5, r3
 80018a0:	4335      	orrs	r5, r6
 80018a2:	e778      	b.n	8001796 <__aeabi_dadd+0x472>
 80018a4:	464a      	mov	r2, r9
 80018a6:	431a      	orrs	r2, r3
 80018a8:	d000      	beq.n	80018ac <__aeabi_dadd+0x588>
 80018aa:	e66b      	b.n	8001584 <__aeabi_dadd+0x260>
 80018ac:	076b      	lsls	r3, r5, #29
 80018ae:	08f9      	lsrs	r1, r7, #3
 80018b0:	4319      	orrs	r1, r3
 80018b2:	08eb      	lsrs	r3, r5, #3
 80018b4:	e680      	b.n	80015b8 <__aeabi_dadd+0x294>
 80018b6:	4661      	mov	r1, ip
 80018b8:	4339      	orrs	r1, r7
 80018ba:	d054      	beq.n	8001966 <__aeabi_dadd+0x642>
 80018bc:	4663      	mov	r3, ip
 80018be:	08f9      	lsrs	r1, r7, #3
 80018c0:	075c      	lsls	r4, r3, #29
 80018c2:	4321      	orrs	r1, r4
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	0004      	movs	r4, r0
 80018c8:	e654      	b.n	8001574 <__aeabi_dadd+0x250>
 80018ca:	464a      	mov	r2, r9
 80018cc:	1abd      	subs	r5, r7, r2
 80018ce:	42af      	cmp	r7, r5
 80018d0:	4189      	sbcs	r1, r1
 80018d2:	4662      	mov	r2, ip
 80018d4:	4249      	negs	r1, r1
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	1a5b      	subs	r3, r3, r1
 80018da:	4698      	mov	r8, r3
 80018dc:	0004      	movs	r4, r0
 80018de:	2601      	movs	r6, #1
 80018e0:	e56b      	b.n	80013ba <__aeabi_dadd+0x96>
 80018e2:	464a      	mov	r2, r9
 80018e4:	1bd5      	subs	r5, r2, r7
 80018e6:	45a9      	cmp	r9, r5
 80018e8:	4189      	sbcs	r1, r1
 80018ea:	4662      	mov	r2, ip
 80018ec:	4249      	negs	r1, r1
 80018ee:	1a9a      	subs	r2, r3, r2
 80018f0:	1a52      	subs	r2, r2, r1
 80018f2:	4690      	mov	r8, r2
 80018f4:	0212      	lsls	r2, r2, #8
 80018f6:	d532      	bpl.n	800195e <__aeabi_dadd+0x63a>
 80018f8:	464a      	mov	r2, r9
 80018fa:	1abd      	subs	r5, r7, r2
 80018fc:	42af      	cmp	r7, r5
 80018fe:	4189      	sbcs	r1, r1
 8001900:	4662      	mov	r2, ip
 8001902:	4249      	negs	r1, r1
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	4698      	mov	r8, r3
 800190a:	0004      	movs	r4, r0
 800190c:	e584      	b.n	8001418 <__aeabi_dadd+0xf4>
 800190e:	4663      	mov	r3, ip
 8001910:	08f9      	lsrs	r1, r7, #3
 8001912:	075a      	lsls	r2, r3, #29
 8001914:	4311      	orrs	r1, r2
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	e64e      	b.n	80015b8 <__aeabi_dadd+0x294>
 800191a:	08f9      	lsrs	r1, r7, #3
 800191c:	0768      	lsls	r0, r5, #29
 800191e:	4301      	orrs	r1, r0
 8001920:	08eb      	lsrs	r3, r5, #3
 8001922:	e624      	b.n	800156e <__aeabi_dadd+0x24a>
 8001924:	4662      	mov	r2, ip
 8001926:	433a      	orrs	r2, r7
 8001928:	d100      	bne.n	800192c <__aeabi_dadd+0x608>
 800192a:	e698      	b.n	800165e <__aeabi_dadd+0x33a>
 800192c:	464a      	mov	r2, r9
 800192e:	08d1      	lsrs	r1, r2, #3
 8001930:	075a      	lsls	r2, r3, #29
 8001932:	4311      	orrs	r1, r2
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	031b      	lsls	r3, r3, #12
 800193a:	421a      	tst	r2, r3
 800193c:	d008      	beq.n	8001950 <__aeabi_dadd+0x62c>
 800193e:	4660      	mov	r0, ip
 8001940:	08c5      	lsrs	r5, r0, #3
 8001942:	421d      	tst	r5, r3
 8001944:	d104      	bne.n	8001950 <__aeabi_dadd+0x62c>
 8001946:	4654      	mov	r4, sl
 8001948:	002a      	movs	r2, r5
 800194a:	08f9      	lsrs	r1, r7, #3
 800194c:	0743      	lsls	r3, r0, #29
 800194e:	4319      	orrs	r1, r3
 8001950:	0f4b      	lsrs	r3, r1, #29
 8001952:	00c9      	lsls	r1, r1, #3
 8001954:	075b      	lsls	r3, r3, #29
 8001956:	08c9      	lsrs	r1, r1, #3
 8001958:	4319      	orrs	r1, r3
 800195a:	0013      	movs	r3, r2
 800195c:	e62c      	b.n	80015b8 <__aeabi_dadd+0x294>
 800195e:	4641      	mov	r1, r8
 8001960:	4329      	orrs	r1, r5
 8001962:	d000      	beq.n	8001966 <__aeabi_dadd+0x642>
 8001964:	e5fa      	b.n	800155c <__aeabi_dadd+0x238>
 8001966:	2300      	movs	r3, #0
 8001968:	000a      	movs	r2, r1
 800196a:	2400      	movs	r4, #0
 800196c:	e602      	b.n	8001574 <__aeabi_dadd+0x250>
 800196e:	076b      	lsls	r3, r5, #29
 8001970:	08f9      	lsrs	r1, r7, #3
 8001972:	4319      	orrs	r1, r3
 8001974:	08eb      	lsrs	r3, r5, #3
 8001976:	e5fd      	b.n	8001574 <__aeabi_dadd+0x250>
 8001978:	4663      	mov	r3, ip
 800197a:	08f9      	lsrs	r1, r7, #3
 800197c:	075b      	lsls	r3, r3, #29
 800197e:	4319      	orrs	r1, r3
 8001980:	4663      	mov	r3, ip
 8001982:	0004      	movs	r4, r0
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	e617      	b.n	80015b8 <__aeabi_dadd+0x294>
 8001988:	003d      	movs	r5, r7
 800198a:	444d      	add	r5, r9
 800198c:	4463      	add	r3, ip
 800198e:	454d      	cmp	r5, r9
 8001990:	4189      	sbcs	r1, r1
 8001992:	4698      	mov	r8, r3
 8001994:	4249      	negs	r1, r1
 8001996:	4488      	add	r8, r1
 8001998:	4643      	mov	r3, r8
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	d400      	bmi.n	80019a0 <__aeabi_dadd+0x67c>
 800199e:	e5dd      	b.n	800155c <__aeabi_dadd+0x238>
 80019a0:	4642      	mov	r2, r8
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <__aeabi_dadd+0x6d0>)
 80019a4:	2601      	movs	r6, #1
 80019a6:	401a      	ands	r2, r3
 80019a8:	4690      	mov	r8, r2
 80019aa:	e5d7      	b.n	800155c <__aeabi_dadd+0x238>
 80019ac:	0010      	movs	r0, r2
 80019ae:	001e      	movs	r6, r3
 80019b0:	3820      	subs	r0, #32
 80019b2:	40c6      	lsrs	r6, r0
 80019b4:	2a20      	cmp	r2, #32
 80019b6:	d005      	beq.n	80019c4 <__aeabi_dadd+0x6a0>
 80019b8:	2040      	movs	r0, #64	; 0x40
 80019ba:	1a82      	subs	r2, r0, r2
 80019bc:	4093      	lsls	r3, r2
 80019be:	464a      	mov	r2, r9
 80019c0:	431a      	orrs	r2, r3
 80019c2:	4691      	mov	r9, r2
 80019c4:	464d      	mov	r5, r9
 80019c6:	1e6b      	subs	r3, r5, #1
 80019c8:	419d      	sbcs	r5, r3
 80019ca:	4335      	orrs	r5, r6
 80019cc:	e621      	b.n	8001612 <__aeabi_dadd+0x2ee>
 80019ce:	0002      	movs	r2, r0
 80019d0:	2300      	movs	r3, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	e540      	b.n	8001458 <__aeabi_dadd+0x134>
 80019d6:	464a      	mov	r2, r9
 80019d8:	19d5      	adds	r5, r2, r7
 80019da:	42bd      	cmp	r5, r7
 80019dc:	4189      	sbcs	r1, r1
 80019de:	4463      	add	r3, ip
 80019e0:	4698      	mov	r8, r3
 80019e2:	4249      	negs	r1, r1
 80019e4:	4488      	add	r8, r1
 80019e6:	e5b3      	b.n	8001550 <__aeabi_dadd+0x22c>
 80019e8:	2100      	movs	r1, #0
 80019ea:	4a01      	ldr	r2, [pc, #4]	; (80019f0 <__aeabi_dadd+0x6cc>)
 80019ec:	000b      	movs	r3, r1
 80019ee:	e533      	b.n	8001458 <__aeabi_dadd+0x134>
 80019f0:	000007ff 	.word	0x000007ff
 80019f4:	ff7fffff 	.word	0xff7fffff

080019f8 <__aeabi_dsub>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	4657      	mov	r7, sl
 80019fc:	464e      	mov	r6, r9
 80019fe:	4645      	mov	r5, r8
 8001a00:	46de      	mov	lr, fp
 8001a02:	0004      	movs	r4, r0
 8001a04:	b5e0      	push	{r5, r6, r7, lr}
 8001a06:	001f      	movs	r7, r3
 8001a08:	0010      	movs	r0, r2
 8001a0a:	030b      	lsls	r3, r1, #12
 8001a0c:	0f62      	lsrs	r2, r4, #29
 8001a0e:	004e      	lsls	r6, r1, #1
 8001a10:	0fcd      	lsrs	r5, r1, #31
 8001a12:	0a5b      	lsrs	r3, r3, #9
 8001a14:	0339      	lsls	r1, r7, #12
 8001a16:	4313      	orrs	r3, r2
 8001a18:	0a49      	lsrs	r1, r1, #9
 8001a1a:	00e2      	lsls	r2, r4, #3
 8001a1c:	0f44      	lsrs	r4, r0, #29
 8001a1e:	4321      	orrs	r1, r4
 8001a20:	4cc2      	ldr	r4, [pc, #776]	; (8001d2c <__aeabi_dsub+0x334>)
 8001a22:	4691      	mov	r9, r2
 8001a24:	4692      	mov	sl, r2
 8001a26:	00c0      	lsls	r0, r0, #3
 8001a28:	007a      	lsls	r2, r7, #1
 8001a2a:	4680      	mov	r8, r0
 8001a2c:	0d76      	lsrs	r6, r6, #21
 8001a2e:	0d52      	lsrs	r2, r2, #21
 8001a30:	0fff      	lsrs	r7, r7, #31
 8001a32:	42a2      	cmp	r2, r4
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x40>
 8001a36:	e0b4      	b.n	8001ba2 <__aeabi_dsub+0x1aa>
 8001a38:	2401      	movs	r4, #1
 8001a3a:	4067      	eors	r7, r4
 8001a3c:	46bb      	mov	fp, r7
 8001a3e:	42bd      	cmp	r5, r7
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x4c>
 8001a42:	e088      	b.n	8001b56 <__aeabi_dsub+0x15e>
 8001a44:	1ab4      	subs	r4, r6, r2
 8001a46:	46a4      	mov	ip, r4
 8001a48:	2c00      	cmp	r4, #0
 8001a4a:	dc00      	bgt.n	8001a4e <__aeabi_dsub+0x56>
 8001a4c:	e0b2      	b.n	8001bb4 <__aeabi_dsub+0x1bc>
 8001a4e:	2a00      	cmp	r2, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x5c>
 8001a52:	e0c5      	b.n	8001be0 <__aeabi_dsub+0x1e8>
 8001a54:	4ab5      	ldr	r2, [pc, #724]	; (8001d2c <__aeabi_dsub+0x334>)
 8001a56:	4296      	cmp	r6, r2
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x64>
 8001a5a:	e28b      	b.n	8001f74 <__aeabi_dsub+0x57c>
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	0412      	lsls	r2, r2, #16
 8001a60:	4311      	orrs	r1, r2
 8001a62:	4662      	mov	r2, ip
 8001a64:	2a38      	cmp	r2, #56	; 0x38
 8001a66:	dd00      	ble.n	8001a6a <__aeabi_dsub+0x72>
 8001a68:	e1a1      	b.n	8001dae <__aeabi_dsub+0x3b6>
 8001a6a:	2a1f      	cmp	r2, #31
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dsub+0x78>
 8001a6e:	e216      	b.n	8001e9e <__aeabi_dsub+0x4a6>
 8001a70:	2720      	movs	r7, #32
 8001a72:	000c      	movs	r4, r1
 8001a74:	1abf      	subs	r7, r7, r2
 8001a76:	40bc      	lsls	r4, r7
 8001a78:	0002      	movs	r2, r0
 8001a7a:	46a0      	mov	r8, r4
 8001a7c:	4664      	mov	r4, ip
 8001a7e:	40b8      	lsls	r0, r7
 8001a80:	40e2      	lsrs	r2, r4
 8001a82:	4644      	mov	r4, r8
 8001a84:	4314      	orrs	r4, r2
 8001a86:	0002      	movs	r2, r0
 8001a88:	1e50      	subs	r0, r2, #1
 8001a8a:	4182      	sbcs	r2, r0
 8001a8c:	4660      	mov	r0, ip
 8001a8e:	40c1      	lsrs	r1, r0
 8001a90:	4322      	orrs	r2, r4
 8001a92:	1a5b      	subs	r3, r3, r1
 8001a94:	4649      	mov	r1, r9
 8001a96:	1a8c      	subs	r4, r1, r2
 8001a98:	45a1      	cmp	r9, r4
 8001a9a:	4192      	sbcs	r2, r2
 8001a9c:	4252      	negs	r2, r2
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	d400      	bmi.n	8001aaa <__aeabi_dsub+0xb2>
 8001aa8:	e117      	b.n	8001cda <__aeabi_dsub+0x2e2>
 8001aaa:	4643      	mov	r3, r8
 8001aac:	025b      	lsls	r3, r3, #9
 8001aae:	0a5b      	lsrs	r3, r3, #9
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	4643      	mov	r3, r8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0xc2>
 8001ab8:	e16c      	b.n	8001d94 <__aeabi_dsub+0x39c>
 8001aba:	4640      	mov	r0, r8
 8001abc:	f000 fc8e 	bl	80023dc <__clzsi2>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	3a08      	subs	r2, #8
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	4643      	mov	r3, r8
 8001aca:	1a89      	subs	r1, r1, r2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4094      	lsls	r4, r2
 8001ad2:	4303      	orrs	r3, r0
 8001ad4:	4296      	cmp	r6, r2
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0xe2>
 8001ad8:	e157      	b.n	8001d8a <__aeabi_dsub+0x392>
 8001ada:	1b96      	subs	r6, r2, r6
 8001adc:	1c71      	adds	r1, r6, #1
 8001ade:	291f      	cmp	r1, #31
 8001ae0:	dd00      	ble.n	8001ae4 <__aeabi_dsub+0xec>
 8001ae2:	e1cb      	b.n	8001e7c <__aeabi_dsub+0x484>
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	0026      	movs	r6, r4
 8001aea:	1a52      	subs	r2, r2, r1
 8001aec:	4094      	lsls	r4, r2
 8001aee:	4090      	lsls	r0, r2
 8001af0:	40ce      	lsrs	r6, r1
 8001af2:	40cb      	lsrs	r3, r1
 8001af4:	1e62      	subs	r2, r4, #1
 8001af6:	4194      	sbcs	r4, r2
 8001af8:	4330      	orrs	r0, r6
 8001afa:	4698      	mov	r8, r3
 8001afc:	2600      	movs	r6, #0
 8001afe:	4304      	orrs	r4, r0
 8001b00:	0763      	lsls	r3, r4, #29
 8001b02:	d009      	beq.n	8001b18 <__aeabi_dsub+0x120>
 8001b04:	230f      	movs	r3, #15
 8001b06:	4023      	ands	r3, r4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d005      	beq.n	8001b18 <__aeabi_dsub+0x120>
 8001b0c:	1d23      	adds	r3, r4, #4
 8001b0e:	42a3      	cmp	r3, r4
 8001b10:	41a4      	sbcs	r4, r4
 8001b12:	4264      	negs	r4, r4
 8001b14:	44a0      	add	r8, r4
 8001b16:	001c      	movs	r4, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	d400      	bmi.n	8001b20 <__aeabi_dsub+0x128>
 8001b1e:	e0df      	b.n	8001ce0 <__aeabi_dsub+0x2e8>
 8001b20:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <__aeabi_dsub+0x334>)
 8001b22:	3601      	adds	r6, #1
 8001b24:	429e      	cmp	r6, r3
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dsub+0x132>
 8001b28:	e0fb      	b.n	8001d22 <__aeabi_dsub+0x32a>
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <__aeabi_dsub+0x338>)
 8001b2e:	08e4      	lsrs	r4, r4, #3
 8001b30:	401a      	ands	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	0571      	lsls	r1, r6, #21
 8001b36:	0752      	lsls	r2, r2, #29
 8001b38:	025b      	lsls	r3, r3, #9
 8001b3a:	4322      	orrs	r2, r4
 8001b3c:	0b1b      	lsrs	r3, r3, #12
 8001b3e:	0d49      	lsrs	r1, r1, #21
 8001b40:	0509      	lsls	r1, r1, #20
 8001b42:	07ed      	lsls	r5, r5, #31
 8001b44:	4319      	orrs	r1, r3
 8001b46:	4329      	orrs	r1, r5
 8001b48:	0010      	movs	r0, r2
 8001b4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b4c:	46bb      	mov	fp, r7
 8001b4e:	46b2      	mov	sl, r6
 8001b50:	46a9      	mov	r9, r5
 8001b52:	46a0      	mov	r8, r4
 8001b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b56:	1ab4      	subs	r4, r6, r2
 8001b58:	46a4      	mov	ip, r4
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	dd58      	ble.n	8001c10 <__aeabi_dsub+0x218>
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x16c>
 8001b62:	e09e      	b.n	8001ca2 <__aeabi_dsub+0x2aa>
 8001b64:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <__aeabi_dsub+0x334>)
 8001b66:	4296      	cmp	r6, r2
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x174>
 8001b6a:	e13b      	b.n	8001de4 <__aeabi_dsub+0x3ec>
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0412      	lsls	r2, r2, #16
 8001b70:	4311      	orrs	r1, r2
 8001b72:	4662      	mov	r2, ip
 8001b74:	2a38      	cmp	r2, #56	; 0x38
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_dsub+0x182>
 8001b78:	e0c1      	b.n	8001cfe <__aeabi_dsub+0x306>
 8001b7a:	2a1f      	cmp	r2, #31
 8001b7c:	dc00      	bgt.n	8001b80 <__aeabi_dsub+0x188>
 8001b7e:	e1bb      	b.n	8001ef8 <__aeabi_dsub+0x500>
 8001b80:	000c      	movs	r4, r1
 8001b82:	3a20      	subs	r2, #32
 8001b84:	40d4      	lsrs	r4, r2
 8001b86:	0022      	movs	r2, r4
 8001b88:	4664      	mov	r4, ip
 8001b8a:	2c20      	cmp	r4, #32
 8001b8c:	d004      	beq.n	8001b98 <__aeabi_dsub+0x1a0>
 8001b8e:	2740      	movs	r7, #64	; 0x40
 8001b90:	1b3f      	subs	r7, r7, r4
 8001b92:	40b9      	lsls	r1, r7
 8001b94:	4308      	orrs	r0, r1
 8001b96:	4680      	mov	r8, r0
 8001b98:	4644      	mov	r4, r8
 8001b9a:	1e61      	subs	r1, r4, #1
 8001b9c:	418c      	sbcs	r4, r1
 8001b9e:	4314      	orrs	r4, r2
 8001ba0:	e0b1      	b.n	8001d06 <__aeabi_dsub+0x30e>
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	4304      	orrs	r4, r0
 8001ba6:	d02a      	beq.n	8001bfe <__aeabi_dsub+0x206>
 8001ba8:	46bb      	mov	fp, r7
 8001baa:	42bd      	cmp	r5, r7
 8001bac:	d02d      	beq.n	8001c0a <__aeabi_dsub+0x212>
 8001bae:	4c61      	ldr	r4, [pc, #388]	; (8001d34 <__aeabi_dsub+0x33c>)
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	44b4      	add	ip, r6
 8001bb4:	4664      	mov	r4, ip
 8001bb6:	2c00      	cmp	r4, #0
 8001bb8:	d05c      	beq.n	8001c74 <__aeabi_dsub+0x27c>
 8001bba:	1b94      	subs	r4, r2, r6
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2e00      	cmp	r6, #0
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_dsub+0x1cc>
 8001bc2:	e115      	b.n	8001df0 <__aeabi_dsub+0x3f8>
 8001bc4:	464d      	mov	r5, r9
 8001bc6:	431d      	orrs	r5, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x1d4>
 8001bca:	e1c3      	b.n	8001f54 <__aeabi_dsub+0x55c>
 8001bcc:	1e65      	subs	r5, r4, #1
 8001bce:	2c01      	cmp	r4, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x1dc>
 8001bd2:	e20c      	b.n	8001fee <__aeabi_dsub+0x5f6>
 8001bd4:	4e55      	ldr	r6, [pc, #340]	; (8001d2c <__aeabi_dsub+0x334>)
 8001bd6:	42b4      	cmp	r4, r6
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x1e4>
 8001bda:	e1f8      	b.n	8001fce <__aeabi_dsub+0x5d6>
 8001bdc:	46ac      	mov	ip, r5
 8001bde:	e10e      	b.n	8001dfe <__aeabi_dsub+0x406>
 8001be0:	000a      	movs	r2, r1
 8001be2:	4302      	orrs	r2, r0
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x1f0>
 8001be6:	e136      	b.n	8001e56 <__aeabi_dsub+0x45e>
 8001be8:	0022      	movs	r2, r4
 8001bea:	3a01      	subs	r2, #1
 8001bec:	2c01      	cmp	r4, #1
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x1fa>
 8001bf0:	e1c6      	b.n	8001f80 <__aeabi_dsub+0x588>
 8001bf2:	4c4e      	ldr	r4, [pc, #312]	; (8001d2c <__aeabi_dsub+0x334>)
 8001bf4:	45a4      	cmp	ip, r4
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x202>
 8001bf8:	e0f4      	b.n	8001de4 <__aeabi_dsub+0x3ec>
 8001bfa:	4694      	mov	ip, r2
 8001bfc:	e731      	b.n	8001a62 <__aeabi_dsub+0x6a>
 8001bfe:	2401      	movs	r4, #1
 8001c00:	4067      	eors	r7, r4
 8001c02:	46bb      	mov	fp, r7
 8001c04:	42bd      	cmp	r5, r7
 8001c06:	d000      	beq.n	8001c0a <__aeabi_dsub+0x212>
 8001c08:	e71c      	b.n	8001a44 <__aeabi_dsub+0x4c>
 8001c0a:	4c4a      	ldr	r4, [pc, #296]	; (8001d34 <__aeabi_dsub+0x33c>)
 8001c0c:	46a4      	mov	ip, r4
 8001c0e:	44b4      	add	ip, r6
 8001c10:	4664      	mov	r4, ip
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x220>
 8001c16:	e0cf      	b.n	8001db8 <__aeabi_dsub+0x3c0>
 8001c18:	1b94      	subs	r4, r2, r6
 8001c1a:	46a4      	mov	ip, r4
 8001c1c:	2e00      	cmp	r6, #0
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x22a>
 8001c20:	e15c      	b.n	8001edc <__aeabi_dsub+0x4e4>
 8001c22:	4e42      	ldr	r6, [pc, #264]	; (8001d2c <__aeabi_dsub+0x334>)
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x232>
 8001c28:	e1ec      	b.n	8002004 <__aeabi_dsub+0x60c>
 8001c2a:	2680      	movs	r6, #128	; 0x80
 8001c2c:	0436      	lsls	r6, r6, #16
 8001c2e:	4333      	orrs	r3, r6
 8001c30:	4664      	mov	r4, ip
 8001c32:	2c38      	cmp	r4, #56	; 0x38
 8001c34:	dd00      	ble.n	8001c38 <__aeabi_dsub+0x240>
 8001c36:	e1b3      	b.n	8001fa0 <__aeabi_dsub+0x5a8>
 8001c38:	2c1f      	cmp	r4, #31
 8001c3a:	dd00      	ble.n	8001c3e <__aeabi_dsub+0x246>
 8001c3c:	e238      	b.n	80020b0 <__aeabi_dsub+0x6b8>
 8001c3e:	2620      	movs	r6, #32
 8001c40:	1b36      	subs	r6, r6, r4
 8001c42:	001c      	movs	r4, r3
 8001c44:	40b4      	lsls	r4, r6
 8001c46:	464f      	mov	r7, r9
 8001c48:	46a0      	mov	r8, r4
 8001c4a:	4664      	mov	r4, ip
 8001c4c:	40e7      	lsrs	r7, r4
 8001c4e:	4644      	mov	r4, r8
 8001c50:	433c      	orrs	r4, r7
 8001c52:	464f      	mov	r7, r9
 8001c54:	40b7      	lsls	r7, r6
 8001c56:	003e      	movs	r6, r7
 8001c58:	1e77      	subs	r7, r6, #1
 8001c5a:	41be      	sbcs	r6, r7
 8001c5c:	4334      	orrs	r4, r6
 8001c5e:	4666      	mov	r6, ip
 8001c60:	40f3      	lsrs	r3, r6
 8001c62:	18c9      	adds	r1, r1, r3
 8001c64:	1824      	adds	r4, r4, r0
 8001c66:	4284      	cmp	r4, r0
 8001c68:	419b      	sbcs	r3, r3
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	4698      	mov	r8, r3
 8001c6e:	0016      	movs	r6, r2
 8001c70:	4488      	add	r8, r1
 8001c72:	e04e      	b.n	8001d12 <__aeabi_dsub+0x31a>
 8001c74:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <__aeabi_dsub+0x340>)
 8001c76:	1c74      	adds	r4, r6, #1
 8001c78:	4214      	tst	r4, r2
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x286>
 8001c7c:	e0d6      	b.n	8001e2c <__aeabi_dsub+0x434>
 8001c7e:	464a      	mov	r2, r9
 8001c80:	431a      	orrs	r2, r3
 8001c82:	2e00      	cmp	r6, #0
 8001c84:	d000      	beq.n	8001c88 <__aeabi_dsub+0x290>
 8001c86:	e15b      	b.n	8001f40 <__aeabi_dsub+0x548>
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x296>
 8001c8c:	e1a5      	b.n	8001fda <__aeabi_dsub+0x5e2>
 8001c8e:	000a      	movs	r2, r1
 8001c90:	4302      	orrs	r2, r0
 8001c92:	d000      	beq.n	8001c96 <__aeabi_dsub+0x29e>
 8001c94:	e1bb      	b.n	800200e <__aeabi_dsub+0x616>
 8001c96:	464a      	mov	r2, r9
 8001c98:	0759      	lsls	r1, r3, #29
 8001c9a:	08d2      	lsrs	r2, r2, #3
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	e027      	b.n	8001cf2 <__aeabi_dsub+0x2fa>
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	4302      	orrs	r2, r0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x2b2>
 8001ca8:	e174      	b.n	8001f94 <__aeabi_dsub+0x59c>
 8001caa:	0022      	movs	r2, r4
 8001cac:	3a01      	subs	r2, #1
 8001cae:	2c01      	cmp	r4, #1
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dsub+0x2c6>
 8001cb2:	4c1e      	ldr	r4, [pc, #120]	; (8001d2c <__aeabi_dsub+0x334>)
 8001cb4:	45a4      	cmp	ip, r4
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x2c2>
 8001cb8:	e094      	b.n	8001de4 <__aeabi_dsub+0x3ec>
 8001cba:	4694      	mov	ip, r2
 8001cbc:	e759      	b.n	8001b72 <__aeabi_dsub+0x17a>
 8001cbe:	4448      	add	r0, r9
 8001cc0:	4548      	cmp	r0, r9
 8001cc2:	4192      	sbcs	r2, r2
 8001cc4:	185b      	adds	r3, r3, r1
 8001cc6:	4698      	mov	r8, r3
 8001cc8:	0004      	movs	r4, r0
 8001cca:	4252      	negs	r2, r2
 8001ccc:	4490      	add	r8, r2
 8001cce:	4643      	mov	r3, r8
 8001cd0:	2602      	movs	r6, #2
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	d500      	bpl.n	8001cd8 <__aeabi_dsub+0x2e0>
 8001cd6:	e0c4      	b.n	8001e62 <__aeabi_dsub+0x46a>
 8001cd8:	3e01      	subs	r6, #1
 8001cda:	0763      	lsls	r3, r4, #29
 8001cdc:	d000      	beq.n	8001ce0 <__aeabi_dsub+0x2e8>
 8001cde:	e711      	b.n	8001b04 <__aeabi_dsub+0x10c>
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	46b4      	mov	ip, r6
 8001ce4:	0759      	lsls	r1, r3, #29
 8001ce6:	08e2      	lsrs	r2, r4, #3
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	08db      	lsrs	r3, r3, #3
 8001cec:	490f      	ldr	r1, [pc, #60]	; (8001d2c <__aeabi_dsub+0x334>)
 8001cee:	458c      	cmp	ip, r1
 8001cf0:	d040      	beq.n	8001d74 <__aeabi_dsub+0x37c>
 8001cf2:	4661      	mov	r1, ip
 8001cf4:	031b      	lsls	r3, r3, #12
 8001cf6:	0549      	lsls	r1, r1, #21
 8001cf8:	0b1b      	lsrs	r3, r3, #12
 8001cfa:	0d49      	lsrs	r1, r1, #21
 8001cfc:	e720      	b.n	8001b40 <__aeabi_dsub+0x148>
 8001cfe:	4301      	orrs	r1, r0
 8001d00:	000c      	movs	r4, r1
 8001d02:	1e61      	subs	r1, r4, #1
 8001d04:	418c      	sbcs	r4, r1
 8001d06:	444c      	add	r4, r9
 8001d08:	454c      	cmp	r4, r9
 8001d0a:	4192      	sbcs	r2, r2
 8001d0c:	4252      	negs	r2, r2
 8001d0e:	4690      	mov	r8, r2
 8001d10:	4498      	add	r8, r3
 8001d12:	4643      	mov	r3, r8
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	d5e0      	bpl.n	8001cda <__aeabi_dsub+0x2e2>
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__aeabi_dsub+0x334>)
 8001d1a:	3601      	adds	r6, #1
 8001d1c:	429e      	cmp	r6, r3
 8001d1e:	d000      	beq.n	8001d22 <__aeabi_dsub+0x32a>
 8001d20:	e09f      	b.n	8001e62 <__aeabi_dsub+0x46a>
 8001d22:	0031      	movs	r1, r6
 8001d24:	2300      	movs	r3, #0
 8001d26:	2200      	movs	r2, #0
 8001d28:	e70a      	b.n	8001b40 <__aeabi_dsub+0x148>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	000007ff 	.word	0x000007ff
 8001d30:	ff7fffff 	.word	0xff7fffff
 8001d34:	fffff801 	.word	0xfffff801
 8001d38:	000007fe 	.word	0x000007fe
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x34a>
 8001d40:	e160      	b.n	8002004 <__aeabi_dsub+0x60c>
 8001d42:	000a      	movs	r2, r1
 8001d44:	4302      	orrs	r2, r0
 8001d46:	d04d      	beq.n	8001de4 <__aeabi_dsub+0x3ec>
 8001d48:	464a      	mov	r2, r9
 8001d4a:	075c      	lsls	r4, r3, #29
 8001d4c:	08d2      	lsrs	r2, r2, #3
 8001d4e:	4322      	orrs	r2, r4
 8001d50:	2480      	movs	r4, #128	; 0x80
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	0324      	lsls	r4, r4, #12
 8001d56:	4223      	tst	r3, r4
 8001d58:	d007      	beq.n	8001d6a <__aeabi_dsub+0x372>
 8001d5a:	08ce      	lsrs	r6, r1, #3
 8001d5c:	4226      	tst	r6, r4
 8001d5e:	d104      	bne.n	8001d6a <__aeabi_dsub+0x372>
 8001d60:	465d      	mov	r5, fp
 8001d62:	0033      	movs	r3, r6
 8001d64:	08c2      	lsrs	r2, r0, #3
 8001d66:	0749      	lsls	r1, r1, #29
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	0f51      	lsrs	r1, r2, #29
 8001d6c:	00d2      	lsls	r2, r2, #3
 8001d6e:	08d2      	lsrs	r2, r2, #3
 8001d70:	0749      	lsls	r1, r1, #29
 8001d72:	430a      	orrs	r2, r1
 8001d74:	0011      	movs	r1, r2
 8001d76:	4319      	orrs	r1, r3
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x384>
 8001d7a:	e1c8      	b.n	800210e <__aeabi_dsub+0x716>
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0309      	lsls	r1, r1, #12
 8001d80:	430b      	orrs	r3, r1
 8001d82:	031b      	lsls	r3, r3, #12
 8001d84:	49d5      	ldr	r1, [pc, #852]	; (80020dc <__aeabi_dsub+0x6e4>)
 8001d86:	0b1b      	lsrs	r3, r3, #12
 8001d88:	e6da      	b.n	8001b40 <__aeabi_dsub+0x148>
 8001d8a:	49d5      	ldr	r1, [pc, #852]	; (80020e0 <__aeabi_dsub+0x6e8>)
 8001d8c:	1ab6      	subs	r6, r6, r2
 8001d8e:	400b      	ands	r3, r1
 8001d90:	4698      	mov	r8, r3
 8001d92:	e6b5      	b.n	8001b00 <__aeabi_dsub+0x108>
 8001d94:	0020      	movs	r0, r4
 8001d96:	f000 fb21 	bl	80023dc <__clzsi2>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	3218      	adds	r2, #24
 8001d9e:	2a1f      	cmp	r2, #31
 8001da0:	dc00      	bgt.n	8001da4 <__aeabi_dsub+0x3ac>
 8001da2:	e68f      	b.n	8001ac4 <__aeabi_dsub+0xcc>
 8001da4:	0023      	movs	r3, r4
 8001da6:	3808      	subs	r0, #8
 8001da8:	4083      	lsls	r3, r0
 8001daa:	2400      	movs	r4, #0
 8001dac:	e692      	b.n	8001ad4 <__aeabi_dsub+0xdc>
 8001dae:	4308      	orrs	r0, r1
 8001db0:	0002      	movs	r2, r0
 8001db2:	1e50      	subs	r0, r2, #1
 8001db4:	4182      	sbcs	r2, r0
 8001db6:	e66d      	b.n	8001a94 <__aeabi_dsub+0x9c>
 8001db8:	4cca      	ldr	r4, [pc, #808]	; (80020e4 <__aeabi_dsub+0x6ec>)
 8001dba:	1c72      	adds	r2, r6, #1
 8001dbc:	4222      	tst	r2, r4
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x3ca>
 8001dc0:	e0ad      	b.n	8001f1e <__aeabi_dsub+0x526>
 8001dc2:	464a      	mov	r2, r9
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d1b8      	bne.n	8001d3c <__aeabi_dsub+0x344>
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x3d8>
 8001dce:	e158      	b.n	8002082 <__aeabi_dsub+0x68a>
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	4302      	orrs	r2, r0
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x3e0>
 8001dd6:	e159      	b.n	800208c <__aeabi_dsub+0x694>
 8001dd8:	464a      	mov	r2, r9
 8001dda:	0759      	lsls	r1, r3, #29
 8001ddc:	08d2      	lsrs	r2, r2, #3
 8001dde:	430a      	orrs	r2, r1
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	e786      	b.n	8001cf2 <__aeabi_dsub+0x2fa>
 8001de4:	464a      	mov	r2, r9
 8001de6:	0759      	lsls	r1, r3, #29
 8001de8:	08d2      	lsrs	r2, r2, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	e7c1      	b.n	8001d74 <__aeabi_dsub+0x37c>
 8001df0:	4dba      	ldr	r5, [pc, #744]	; (80020dc <__aeabi_dsub+0x6e4>)
 8001df2:	42aa      	cmp	r2, r5
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x400>
 8001df6:	e11e      	b.n	8002036 <__aeabi_dsub+0x63e>
 8001df8:	2580      	movs	r5, #128	; 0x80
 8001dfa:	042d      	lsls	r5, r5, #16
 8001dfc:	432b      	orrs	r3, r5
 8001dfe:	4664      	mov	r4, ip
 8001e00:	2c38      	cmp	r4, #56	; 0x38
 8001e02:	dc5d      	bgt.n	8001ec0 <__aeabi_dsub+0x4c8>
 8001e04:	2c1f      	cmp	r4, #31
 8001e06:	dd00      	ble.n	8001e0a <__aeabi_dsub+0x412>
 8001e08:	e0d0      	b.n	8001fac <__aeabi_dsub+0x5b4>
 8001e0a:	2520      	movs	r5, #32
 8001e0c:	4667      	mov	r7, ip
 8001e0e:	1b2d      	subs	r5, r5, r4
 8001e10:	464e      	mov	r6, r9
 8001e12:	001c      	movs	r4, r3
 8001e14:	40fe      	lsrs	r6, r7
 8001e16:	40ac      	lsls	r4, r5
 8001e18:	4334      	orrs	r4, r6
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	40ae      	lsls	r6, r5
 8001e1e:	0035      	movs	r5, r6
 8001e20:	40fb      	lsrs	r3, r7
 8001e22:	1e6e      	subs	r6, r5, #1
 8001e24:	41b5      	sbcs	r5, r6
 8001e26:	1ac9      	subs	r1, r1, r3
 8001e28:	432c      	orrs	r4, r5
 8001e2a:	e04e      	b.n	8001eca <__aeabi_dsub+0x4d2>
 8001e2c:	464a      	mov	r2, r9
 8001e2e:	1a14      	subs	r4, r2, r0
 8001e30:	45a1      	cmp	r9, r4
 8001e32:	4192      	sbcs	r2, r2
 8001e34:	4252      	negs	r2, r2
 8001e36:	4690      	mov	r8, r2
 8001e38:	1a5f      	subs	r7, r3, r1
 8001e3a:	003a      	movs	r2, r7
 8001e3c:	4647      	mov	r7, r8
 8001e3e:	1bd2      	subs	r2, r2, r7
 8001e40:	4690      	mov	r8, r2
 8001e42:	0212      	lsls	r2, r2, #8
 8001e44:	d500      	bpl.n	8001e48 <__aeabi_dsub+0x450>
 8001e46:	e08b      	b.n	8001f60 <__aeabi_dsub+0x568>
 8001e48:	4642      	mov	r2, r8
 8001e4a:	4322      	orrs	r2, r4
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_dsub+0x458>
 8001e4e:	e630      	b.n	8001ab2 <__aeabi_dsub+0xba>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2500      	movs	r5, #0
 8001e54:	e74d      	b.n	8001cf2 <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	0759      	lsls	r1, r3, #29
 8001e5a:	08d2      	lsrs	r2, r2, #3
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	e744      	b.n	8001cec <__aeabi_dsub+0x2f4>
 8001e62:	4642      	mov	r2, r8
 8001e64:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <__aeabi_dsub+0x6e8>)
 8001e66:	0861      	lsrs	r1, r4, #1
 8001e68:	401a      	ands	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4014      	ands	r4, r2
 8001e70:	430c      	orrs	r4, r1
 8001e72:	07da      	lsls	r2, r3, #31
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	4698      	mov	r8, r3
 8001e78:	4314      	orrs	r4, r2
 8001e7a:	e641      	b.n	8001b00 <__aeabi_dsub+0x108>
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	3e1f      	subs	r6, #31
 8001e80:	40f2      	lsrs	r2, r6
 8001e82:	0016      	movs	r6, r2
 8001e84:	2920      	cmp	r1, #32
 8001e86:	d003      	beq.n	8001e90 <__aeabi_dsub+0x498>
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	1a51      	subs	r1, r2, r1
 8001e8c:	408b      	lsls	r3, r1
 8001e8e:	431c      	orrs	r4, r3
 8001e90:	1e62      	subs	r2, r4, #1
 8001e92:	4194      	sbcs	r4, r2
 8001e94:	2300      	movs	r3, #0
 8001e96:	4334      	orrs	r4, r6
 8001e98:	4698      	mov	r8, r3
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	e71d      	b.n	8001cda <__aeabi_dsub+0x2e2>
 8001e9e:	000c      	movs	r4, r1
 8001ea0:	3a20      	subs	r2, #32
 8001ea2:	40d4      	lsrs	r4, r2
 8001ea4:	0022      	movs	r2, r4
 8001ea6:	4664      	mov	r4, ip
 8001ea8:	2c20      	cmp	r4, #32
 8001eaa:	d004      	beq.n	8001eb6 <__aeabi_dsub+0x4be>
 8001eac:	2740      	movs	r7, #64	; 0x40
 8001eae:	1b3f      	subs	r7, r7, r4
 8001eb0:	40b9      	lsls	r1, r7
 8001eb2:	4308      	orrs	r0, r1
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	4644      	mov	r4, r8
 8001eb8:	1e61      	subs	r1, r4, #1
 8001eba:	418c      	sbcs	r4, r1
 8001ebc:	4322      	orrs	r2, r4
 8001ebe:	e5e9      	b.n	8001a94 <__aeabi_dsub+0x9c>
 8001ec0:	464c      	mov	r4, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	001c      	movs	r4, r3
 8001ec6:	1e63      	subs	r3, r4, #1
 8001ec8:	419c      	sbcs	r4, r3
 8001eca:	1b04      	subs	r4, r0, r4
 8001ecc:	42a0      	cmp	r0, r4
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	1acb      	subs	r3, r1, r3
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	465d      	mov	r5, fp
 8001ed8:	0016      	movs	r6, r2
 8001eda:	e5e2      	b.n	8001aa2 <__aeabi_dsub+0xaa>
 8001edc:	464e      	mov	r6, r9
 8001ede:	431e      	orrs	r6, r3
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x4ec>
 8001ee2:	e0ae      	b.n	8002042 <__aeabi_dsub+0x64a>
 8001ee4:	1e66      	subs	r6, r4, #1
 8001ee6:	2c01      	cmp	r4, #1
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x4f4>
 8001eea:	e0fd      	b.n	80020e8 <__aeabi_dsub+0x6f0>
 8001eec:	4f7b      	ldr	r7, [pc, #492]	; (80020dc <__aeabi_dsub+0x6e4>)
 8001eee:	42bc      	cmp	r4, r7
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x4fc>
 8001ef2:	e107      	b.n	8002104 <__aeabi_dsub+0x70c>
 8001ef4:	46b4      	mov	ip, r6
 8001ef6:	e69b      	b.n	8001c30 <__aeabi_dsub+0x238>
 8001ef8:	4664      	mov	r4, ip
 8001efa:	2220      	movs	r2, #32
 8001efc:	1b12      	subs	r2, r2, r4
 8001efe:	000c      	movs	r4, r1
 8001f00:	4094      	lsls	r4, r2
 8001f02:	0007      	movs	r7, r0
 8001f04:	4090      	lsls	r0, r2
 8001f06:	46a0      	mov	r8, r4
 8001f08:	4664      	mov	r4, ip
 8001f0a:	1e42      	subs	r2, r0, #1
 8001f0c:	4190      	sbcs	r0, r2
 8001f0e:	4662      	mov	r2, ip
 8001f10:	40e7      	lsrs	r7, r4
 8001f12:	4644      	mov	r4, r8
 8001f14:	40d1      	lsrs	r1, r2
 8001f16:	433c      	orrs	r4, r7
 8001f18:	4304      	orrs	r4, r0
 8001f1a:	185b      	adds	r3, r3, r1
 8001f1c:	e6f3      	b.n	8001d06 <__aeabi_dsub+0x30e>
 8001f1e:	4c6f      	ldr	r4, [pc, #444]	; (80020dc <__aeabi_dsub+0x6e4>)
 8001f20:	42a2      	cmp	r2, r4
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x52e>
 8001f24:	e0d5      	b.n	80020d2 <__aeabi_dsub+0x6da>
 8001f26:	4448      	add	r0, r9
 8001f28:	185b      	adds	r3, r3, r1
 8001f2a:	4548      	cmp	r0, r9
 8001f2c:	4189      	sbcs	r1, r1
 8001f2e:	4249      	negs	r1, r1
 8001f30:	185b      	adds	r3, r3, r1
 8001f32:	07dc      	lsls	r4, r3, #31
 8001f34:	0840      	lsrs	r0, r0, #1
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	4698      	mov	r8, r3
 8001f3a:	0016      	movs	r6, r2
 8001f3c:	4304      	orrs	r4, r0
 8001f3e:	e6cc      	b.n	8001cda <__aeabi_dsub+0x2e2>
 8001f40:	2a00      	cmp	r2, #0
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x54e>
 8001f44:	e082      	b.n	800204c <__aeabi_dsub+0x654>
 8001f46:	000a      	movs	r2, r1
 8001f48:	4302      	orrs	r2, r0
 8001f4a:	d140      	bne.n	8001fce <__aeabi_dsub+0x5d6>
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	2500      	movs	r5, #0
 8001f50:	031b      	lsls	r3, r3, #12
 8001f52:	e713      	b.n	8001d7c <__aeabi_dsub+0x384>
 8001f54:	074b      	lsls	r3, r1, #29
 8001f56:	08c2      	lsrs	r2, r0, #3
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	465d      	mov	r5, fp
 8001f5c:	08cb      	lsrs	r3, r1, #3
 8001f5e:	e6c5      	b.n	8001cec <__aeabi_dsub+0x2f4>
 8001f60:	464a      	mov	r2, r9
 8001f62:	1a84      	subs	r4, r0, r2
 8001f64:	42a0      	cmp	r0, r4
 8001f66:	4192      	sbcs	r2, r2
 8001f68:	1acb      	subs	r3, r1, r3
 8001f6a:	4252      	negs	r2, r2
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	4698      	mov	r8, r3
 8001f70:	465d      	mov	r5, fp
 8001f72:	e59e      	b.n	8001ab2 <__aeabi_dsub+0xba>
 8001f74:	464a      	mov	r2, r9
 8001f76:	0759      	lsls	r1, r3, #29
 8001f78:	08d2      	lsrs	r2, r2, #3
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	e6f9      	b.n	8001d74 <__aeabi_dsub+0x37c>
 8001f80:	464a      	mov	r2, r9
 8001f82:	1a14      	subs	r4, r2, r0
 8001f84:	45a1      	cmp	r9, r4
 8001f86:	4192      	sbcs	r2, r2
 8001f88:	1a5b      	subs	r3, r3, r1
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	4698      	mov	r8, r3
 8001f90:	2601      	movs	r6, #1
 8001f92:	e586      	b.n	8001aa2 <__aeabi_dsub+0xaa>
 8001f94:	464a      	mov	r2, r9
 8001f96:	0759      	lsls	r1, r3, #29
 8001f98:	08d2      	lsrs	r2, r2, #3
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	e6a5      	b.n	8001cec <__aeabi_dsub+0x2f4>
 8001fa0:	464c      	mov	r4, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	001c      	movs	r4, r3
 8001fa6:	1e63      	subs	r3, r4, #1
 8001fa8:	419c      	sbcs	r4, r3
 8001faa:	e65b      	b.n	8001c64 <__aeabi_dsub+0x26c>
 8001fac:	4665      	mov	r5, ip
 8001fae:	001e      	movs	r6, r3
 8001fb0:	3d20      	subs	r5, #32
 8001fb2:	40ee      	lsrs	r6, r5
 8001fb4:	2c20      	cmp	r4, #32
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x5cc>
 8001fb8:	2540      	movs	r5, #64	; 0x40
 8001fba:	1b2d      	subs	r5, r5, r4
 8001fbc:	40ab      	lsls	r3, r5
 8001fbe:	464c      	mov	r4, r9
 8001fc0:	431c      	orrs	r4, r3
 8001fc2:	46a2      	mov	sl, r4
 8001fc4:	4654      	mov	r4, sl
 8001fc6:	1e63      	subs	r3, r4, #1
 8001fc8:	419c      	sbcs	r4, r3
 8001fca:	4334      	orrs	r4, r6
 8001fcc:	e77d      	b.n	8001eca <__aeabi_dsub+0x4d2>
 8001fce:	074b      	lsls	r3, r1, #29
 8001fd0:	08c2      	lsrs	r2, r0, #3
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	465d      	mov	r5, fp
 8001fd6:	08cb      	lsrs	r3, r1, #3
 8001fd8:	e6cc      	b.n	8001d74 <__aeabi_dsub+0x37c>
 8001fda:	000a      	movs	r2, r1
 8001fdc:	4302      	orrs	r2, r0
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x5ea>
 8001fe0:	e736      	b.n	8001e50 <__aeabi_dsub+0x458>
 8001fe2:	074b      	lsls	r3, r1, #29
 8001fe4:	08c2      	lsrs	r2, r0, #3
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	465d      	mov	r5, fp
 8001fea:	08cb      	lsrs	r3, r1, #3
 8001fec:	e681      	b.n	8001cf2 <__aeabi_dsub+0x2fa>
 8001fee:	464a      	mov	r2, r9
 8001ff0:	1a84      	subs	r4, r0, r2
 8001ff2:	42a0      	cmp	r0, r4
 8001ff4:	4192      	sbcs	r2, r2
 8001ff6:	1acb      	subs	r3, r1, r3
 8001ff8:	4252      	negs	r2, r2
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	4698      	mov	r8, r3
 8001ffe:	465d      	mov	r5, fp
 8002000:	2601      	movs	r6, #1
 8002002:	e54e      	b.n	8001aa2 <__aeabi_dsub+0xaa>
 8002004:	074b      	lsls	r3, r1, #29
 8002006:	08c2      	lsrs	r2, r0, #3
 8002008:	431a      	orrs	r2, r3
 800200a:	08cb      	lsrs	r3, r1, #3
 800200c:	e6b2      	b.n	8001d74 <__aeabi_dsub+0x37c>
 800200e:	464a      	mov	r2, r9
 8002010:	1a14      	subs	r4, r2, r0
 8002012:	45a1      	cmp	r9, r4
 8002014:	4192      	sbcs	r2, r2
 8002016:	1a5f      	subs	r7, r3, r1
 8002018:	4252      	negs	r2, r2
 800201a:	1aba      	subs	r2, r7, r2
 800201c:	4690      	mov	r8, r2
 800201e:	0212      	lsls	r2, r2, #8
 8002020:	d56b      	bpl.n	80020fa <__aeabi_dsub+0x702>
 8002022:	464a      	mov	r2, r9
 8002024:	1a84      	subs	r4, r0, r2
 8002026:	42a0      	cmp	r0, r4
 8002028:	4192      	sbcs	r2, r2
 800202a:	1acb      	subs	r3, r1, r3
 800202c:	4252      	negs	r2, r2
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	4698      	mov	r8, r3
 8002032:	465d      	mov	r5, fp
 8002034:	e564      	b.n	8001b00 <__aeabi_dsub+0x108>
 8002036:	074b      	lsls	r3, r1, #29
 8002038:	08c2      	lsrs	r2, r0, #3
 800203a:	431a      	orrs	r2, r3
 800203c:	465d      	mov	r5, fp
 800203e:	08cb      	lsrs	r3, r1, #3
 8002040:	e698      	b.n	8001d74 <__aeabi_dsub+0x37c>
 8002042:	074b      	lsls	r3, r1, #29
 8002044:	08c2      	lsrs	r2, r0, #3
 8002046:	431a      	orrs	r2, r3
 8002048:	08cb      	lsrs	r3, r1, #3
 800204a:	e64f      	b.n	8001cec <__aeabi_dsub+0x2f4>
 800204c:	000a      	movs	r2, r1
 800204e:	4302      	orrs	r2, r0
 8002050:	d090      	beq.n	8001f74 <__aeabi_dsub+0x57c>
 8002052:	464a      	mov	r2, r9
 8002054:	075c      	lsls	r4, r3, #29
 8002056:	08d2      	lsrs	r2, r2, #3
 8002058:	4314      	orrs	r4, r2
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	08db      	lsrs	r3, r3, #3
 800205e:	0312      	lsls	r2, r2, #12
 8002060:	4213      	tst	r3, r2
 8002062:	d008      	beq.n	8002076 <__aeabi_dsub+0x67e>
 8002064:	08ce      	lsrs	r6, r1, #3
 8002066:	4216      	tst	r6, r2
 8002068:	d105      	bne.n	8002076 <__aeabi_dsub+0x67e>
 800206a:	08c0      	lsrs	r0, r0, #3
 800206c:	0749      	lsls	r1, r1, #29
 800206e:	4308      	orrs	r0, r1
 8002070:	0004      	movs	r4, r0
 8002072:	465d      	mov	r5, fp
 8002074:	0033      	movs	r3, r6
 8002076:	0f61      	lsrs	r1, r4, #29
 8002078:	00e2      	lsls	r2, r4, #3
 800207a:	0749      	lsls	r1, r1, #29
 800207c:	08d2      	lsrs	r2, r2, #3
 800207e:	430a      	orrs	r2, r1
 8002080:	e678      	b.n	8001d74 <__aeabi_dsub+0x37c>
 8002082:	074b      	lsls	r3, r1, #29
 8002084:	08c2      	lsrs	r2, r0, #3
 8002086:	431a      	orrs	r2, r3
 8002088:	08cb      	lsrs	r3, r1, #3
 800208a:	e632      	b.n	8001cf2 <__aeabi_dsub+0x2fa>
 800208c:	4448      	add	r0, r9
 800208e:	185b      	adds	r3, r3, r1
 8002090:	4548      	cmp	r0, r9
 8002092:	4192      	sbcs	r2, r2
 8002094:	4698      	mov	r8, r3
 8002096:	4252      	negs	r2, r2
 8002098:	4490      	add	r8, r2
 800209a:	4643      	mov	r3, r8
 800209c:	0004      	movs	r4, r0
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	d400      	bmi.n	80020a4 <__aeabi_dsub+0x6ac>
 80020a2:	e61a      	b.n	8001cda <__aeabi_dsub+0x2e2>
 80020a4:	4642      	mov	r2, r8
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <__aeabi_dsub+0x6e8>)
 80020a8:	2601      	movs	r6, #1
 80020aa:	401a      	ands	r2, r3
 80020ac:	4690      	mov	r8, r2
 80020ae:	e614      	b.n	8001cda <__aeabi_dsub+0x2e2>
 80020b0:	4666      	mov	r6, ip
 80020b2:	001f      	movs	r7, r3
 80020b4:	3e20      	subs	r6, #32
 80020b6:	40f7      	lsrs	r7, r6
 80020b8:	2c20      	cmp	r4, #32
 80020ba:	d005      	beq.n	80020c8 <__aeabi_dsub+0x6d0>
 80020bc:	2640      	movs	r6, #64	; 0x40
 80020be:	1b36      	subs	r6, r6, r4
 80020c0:	40b3      	lsls	r3, r6
 80020c2:	464c      	mov	r4, r9
 80020c4:	431c      	orrs	r4, r3
 80020c6:	46a2      	mov	sl, r4
 80020c8:	4654      	mov	r4, sl
 80020ca:	1e63      	subs	r3, r4, #1
 80020cc:	419c      	sbcs	r4, r3
 80020ce:	433c      	orrs	r4, r7
 80020d0:	e5c8      	b.n	8001c64 <__aeabi_dsub+0x26c>
 80020d2:	0011      	movs	r1, r2
 80020d4:	2300      	movs	r3, #0
 80020d6:	2200      	movs	r2, #0
 80020d8:	e532      	b.n	8001b40 <__aeabi_dsub+0x148>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	000007ff 	.word	0x000007ff
 80020e0:	ff7fffff 	.word	0xff7fffff
 80020e4:	000007fe 	.word	0x000007fe
 80020e8:	464a      	mov	r2, r9
 80020ea:	1814      	adds	r4, r2, r0
 80020ec:	4284      	cmp	r4, r0
 80020ee:	4192      	sbcs	r2, r2
 80020f0:	185b      	adds	r3, r3, r1
 80020f2:	4698      	mov	r8, r3
 80020f4:	4252      	negs	r2, r2
 80020f6:	4490      	add	r8, r2
 80020f8:	e5e9      	b.n	8001cce <__aeabi_dsub+0x2d6>
 80020fa:	4642      	mov	r2, r8
 80020fc:	4322      	orrs	r2, r4
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x70a>
 8002100:	e6a6      	b.n	8001e50 <__aeabi_dsub+0x458>
 8002102:	e5ea      	b.n	8001cda <__aeabi_dsub+0x2e2>
 8002104:	074b      	lsls	r3, r1, #29
 8002106:	08c2      	lsrs	r2, r0, #3
 8002108:	431a      	orrs	r2, r3
 800210a:	08cb      	lsrs	r3, r1, #3
 800210c:	e632      	b.n	8001d74 <__aeabi_dsub+0x37c>
 800210e:	2200      	movs	r2, #0
 8002110:	4901      	ldr	r1, [pc, #4]	; (8002118 <__aeabi_dsub+0x720>)
 8002112:	0013      	movs	r3, r2
 8002114:	e514      	b.n	8001b40 <__aeabi_dsub+0x148>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	000007ff 	.word	0x000007ff

0800211c <__aeabi_i2d>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	2800      	cmp	r0, #0
 8002120:	d016      	beq.n	8002150 <__aeabi_i2d+0x34>
 8002122:	17c3      	asrs	r3, r0, #31
 8002124:	18c5      	adds	r5, r0, r3
 8002126:	405d      	eors	r5, r3
 8002128:	0fc4      	lsrs	r4, r0, #31
 800212a:	0028      	movs	r0, r5
 800212c:	f000 f956 	bl	80023dc <__clzsi2>
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <__aeabi_i2d+0x5c>)
 8002132:	1a12      	subs	r2, r2, r0
 8002134:	280a      	cmp	r0, #10
 8002136:	dc16      	bgt.n	8002166 <__aeabi_i2d+0x4a>
 8002138:	0003      	movs	r3, r0
 800213a:	002e      	movs	r6, r5
 800213c:	3315      	adds	r3, #21
 800213e:	409e      	lsls	r6, r3
 8002140:	230b      	movs	r3, #11
 8002142:	1a18      	subs	r0, r3, r0
 8002144:	40c5      	lsrs	r5, r0
 8002146:	0553      	lsls	r3, r2, #21
 8002148:	032d      	lsls	r5, r5, #12
 800214a:	0b2d      	lsrs	r5, r5, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e003      	b.n	8002158 <__aeabi_i2d+0x3c>
 8002150:	2400      	movs	r4, #0
 8002152:	2300      	movs	r3, #0
 8002154:	2500      	movs	r5, #0
 8002156:	2600      	movs	r6, #0
 8002158:	051b      	lsls	r3, r3, #20
 800215a:	432b      	orrs	r3, r5
 800215c:	07e4      	lsls	r4, r4, #31
 800215e:	4323      	orrs	r3, r4
 8002160:	0030      	movs	r0, r6
 8002162:	0019      	movs	r1, r3
 8002164:	bd70      	pop	{r4, r5, r6, pc}
 8002166:	380b      	subs	r0, #11
 8002168:	4085      	lsls	r5, r0
 800216a:	0553      	lsls	r3, r2, #21
 800216c:	032d      	lsls	r5, r5, #12
 800216e:	2600      	movs	r6, #0
 8002170:	0b2d      	lsrs	r5, r5, #12
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	e7f0      	b.n	8002158 <__aeabi_i2d+0x3c>
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	0000041e 	.word	0x0000041e

0800217c <__aeabi_ui2d>:
 800217c:	b510      	push	{r4, lr}
 800217e:	1e04      	subs	r4, r0, #0
 8002180:	d010      	beq.n	80021a4 <__aeabi_ui2d+0x28>
 8002182:	f000 f92b 	bl	80023dc <__clzsi2>
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <__aeabi_ui2d+0x48>)
 8002188:	1a1b      	subs	r3, r3, r0
 800218a:	280a      	cmp	r0, #10
 800218c:	dc11      	bgt.n	80021b2 <__aeabi_ui2d+0x36>
 800218e:	220b      	movs	r2, #11
 8002190:	0021      	movs	r1, r4
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d1      	lsrs	r1, r2
 8002196:	3015      	adds	r0, #21
 8002198:	030a      	lsls	r2, r1, #12
 800219a:	055b      	lsls	r3, r3, #21
 800219c:	4084      	lsls	r4, r0
 800219e:	0b12      	lsrs	r2, r2, #12
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e001      	b.n	80021a8 <__aeabi_ui2d+0x2c>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2200      	movs	r2, #0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	4313      	orrs	r3, r2
 80021ac:	0020      	movs	r0, r4
 80021ae:	0019      	movs	r1, r3
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	0022      	movs	r2, r4
 80021b4:	380b      	subs	r0, #11
 80021b6:	4082      	lsls	r2, r0
 80021b8:	055b      	lsls	r3, r3, #21
 80021ba:	0312      	lsls	r2, r2, #12
 80021bc:	2400      	movs	r4, #0
 80021be:	0b12      	lsrs	r2, r2, #12
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	e7f1      	b.n	80021a8 <__aeabi_ui2d+0x2c>
 80021c4:	0000041e 	.word	0x0000041e

080021c8 <__aeabi_f2d>:
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	0043      	lsls	r3, r0, #1
 80021cc:	0246      	lsls	r6, r0, #9
 80021ce:	0fc4      	lsrs	r4, r0, #31
 80021d0:	20fe      	movs	r0, #254	; 0xfe
 80021d2:	0e1b      	lsrs	r3, r3, #24
 80021d4:	1c59      	adds	r1, r3, #1
 80021d6:	0a75      	lsrs	r5, r6, #9
 80021d8:	4208      	tst	r0, r1
 80021da:	d00c      	beq.n	80021f6 <__aeabi_f2d+0x2e>
 80021dc:	22e0      	movs	r2, #224	; 0xe0
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4694      	mov	ip, r2
 80021e2:	076d      	lsls	r5, r5, #29
 80021e4:	0b36      	lsrs	r6, r6, #12
 80021e6:	4463      	add	r3, ip
 80021e8:	051b      	lsls	r3, r3, #20
 80021ea:	4333      	orrs	r3, r6
 80021ec:	07e4      	lsls	r4, r4, #31
 80021ee:	4323      	orrs	r3, r4
 80021f0:	0028      	movs	r0, r5
 80021f2:	0019      	movs	r1, r3
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d114      	bne.n	8002224 <__aeabi_f2d+0x5c>
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	d01b      	beq.n	8002236 <__aeabi_f2d+0x6e>
 80021fe:	0028      	movs	r0, r5
 8002200:	f000 f8ec 	bl	80023dc <__clzsi2>
 8002204:	280a      	cmp	r0, #10
 8002206:	dc1c      	bgt.n	8002242 <__aeabi_f2d+0x7a>
 8002208:	230b      	movs	r3, #11
 800220a:	002a      	movs	r2, r5
 800220c:	1a1b      	subs	r3, r3, r0
 800220e:	40da      	lsrs	r2, r3
 8002210:	0003      	movs	r3, r0
 8002212:	3315      	adds	r3, #21
 8002214:	409d      	lsls	r5, r3
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <__aeabi_f2d+0x88>)
 8002218:	0312      	lsls	r2, r2, #12
 800221a:	1a1b      	subs	r3, r3, r0
 800221c:	055b      	lsls	r3, r3, #21
 800221e:	0b16      	lsrs	r6, r2, #12
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e7e1      	b.n	80021e8 <__aeabi_f2d+0x20>
 8002224:	2d00      	cmp	r5, #0
 8002226:	d009      	beq.n	800223c <__aeabi_f2d+0x74>
 8002228:	0b32      	lsrs	r2, r6, #12
 800222a:	2680      	movs	r6, #128	; 0x80
 800222c:	0336      	lsls	r6, r6, #12
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <__aeabi_f2d+0x8c>)
 8002230:	076d      	lsls	r5, r5, #29
 8002232:	4316      	orrs	r6, r2
 8002234:	e7d8      	b.n	80021e8 <__aeabi_f2d+0x20>
 8002236:	2300      	movs	r3, #0
 8002238:	2600      	movs	r6, #0
 800223a:	e7d5      	b.n	80021e8 <__aeabi_f2d+0x20>
 800223c:	2600      	movs	r6, #0
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <__aeabi_f2d+0x8c>)
 8002240:	e7d2      	b.n	80021e8 <__aeabi_f2d+0x20>
 8002242:	0003      	movs	r3, r0
 8002244:	002a      	movs	r2, r5
 8002246:	3b0b      	subs	r3, #11
 8002248:	409a      	lsls	r2, r3
 800224a:	2500      	movs	r5, #0
 800224c:	e7e3      	b.n	8002216 <__aeabi_f2d+0x4e>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	00000389 	.word	0x00000389
 8002254:	000007ff 	.word	0x000007ff

08002258 <__aeabi_d2f>:
 8002258:	0002      	movs	r2, r0
 800225a:	004b      	lsls	r3, r1, #1
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	0308      	lsls	r0, r1, #12
 8002260:	0d5b      	lsrs	r3, r3, #21
 8002262:	4e3d      	ldr	r6, [pc, #244]	; (8002358 <__aeabi_d2f+0x100>)
 8002264:	0fcc      	lsrs	r4, r1, #31
 8002266:	0a40      	lsrs	r0, r0, #9
 8002268:	0f51      	lsrs	r1, r2, #29
 800226a:	1c5f      	adds	r7, r3, #1
 800226c:	4308      	orrs	r0, r1
 800226e:	00d5      	lsls	r5, r2, #3
 8002270:	4237      	tst	r7, r6
 8002272:	d00a      	beq.n	800228a <__aeabi_d2f+0x32>
 8002274:	4939      	ldr	r1, [pc, #228]	; (800235c <__aeabi_d2f+0x104>)
 8002276:	185e      	adds	r6, r3, r1
 8002278:	2efe      	cmp	r6, #254	; 0xfe
 800227a:	dd16      	ble.n	80022aa <__aeabi_d2f+0x52>
 800227c:	23ff      	movs	r3, #255	; 0xff
 800227e:	2100      	movs	r1, #0
 8002280:	05db      	lsls	r3, r3, #23
 8002282:	430b      	orrs	r3, r1
 8002284:	07e0      	lsls	r0, r4, #31
 8002286:	4318      	orrs	r0, r3
 8002288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <__aeabi_d2f+0x44>
 800228e:	4328      	orrs	r0, r5
 8002290:	d027      	beq.n	80022e2 <__aeabi_d2f+0x8a>
 8002292:	2105      	movs	r1, #5
 8002294:	0189      	lsls	r1, r1, #6
 8002296:	0a49      	lsrs	r1, r1, #9
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e7f1      	b.n	8002280 <__aeabi_d2f+0x28>
 800229c:	4305      	orrs	r5, r0
 800229e:	d0ed      	beq.n	800227c <__aeabi_d2f+0x24>
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	03c9      	lsls	r1, r1, #15
 80022a4:	23ff      	movs	r3, #255	; 0xff
 80022a6:	4301      	orrs	r1, r0
 80022a8:	e7ea      	b.n	8002280 <__aeabi_d2f+0x28>
 80022aa:	2e00      	cmp	r6, #0
 80022ac:	dd1c      	ble.n	80022e8 <__aeabi_d2f+0x90>
 80022ae:	0192      	lsls	r2, r2, #6
 80022b0:	0011      	movs	r1, r2
 80022b2:	1e4a      	subs	r2, r1, #1
 80022b4:	4191      	sbcs	r1, r2
 80022b6:	00c0      	lsls	r0, r0, #3
 80022b8:	0f6d      	lsrs	r5, r5, #29
 80022ba:	4301      	orrs	r1, r0
 80022bc:	4329      	orrs	r1, r5
 80022be:	074b      	lsls	r3, r1, #29
 80022c0:	d048      	beq.n	8002354 <__aeabi_d2f+0xfc>
 80022c2:	230f      	movs	r3, #15
 80022c4:	400b      	ands	r3, r1
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d000      	beq.n	80022cc <__aeabi_d2f+0x74>
 80022ca:	3104      	adds	r1, #4
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	04db      	lsls	r3, r3, #19
 80022d0:	400b      	ands	r3, r1
 80022d2:	d03f      	beq.n	8002354 <__aeabi_d2f+0xfc>
 80022d4:	1c72      	adds	r2, r6, #1
 80022d6:	2efe      	cmp	r6, #254	; 0xfe
 80022d8:	d0d0      	beq.n	800227c <__aeabi_d2f+0x24>
 80022da:	0189      	lsls	r1, r1, #6
 80022dc:	0a49      	lsrs	r1, r1, #9
 80022de:	b2d3      	uxtb	r3, r2
 80022e0:	e7ce      	b.n	8002280 <__aeabi_d2f+0x28>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	e7cb      	b.n	8002280 <__aeabi_d2f+0x28>
 80022e8:	0032      	movs	r2, r6
 80022ea:	3217      	adds	r2, #23
 80022ec:	db22      	blt.n	8002334 <__aeabi_d2f+0xdc>
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	221e      	movs	r2, #30
 80022f2:	0409      	lsls	r1, r1, #16
 80022f4:	4308      	orrs	r0, r1
 80022f6:	1b92      	subs	r2, r2, r6
 80022f8:	2a1f      	cmp	r2, #31
 80022fa:	dd1d      	ble.n	8002338 <__aeabi_d2f+0xe0>
 80022fc:	2102      	movs	r1, #2
 80022fe:	4249      	negs	r1, r1
 8002300:	1b8e      	subs	r6, r1, r6
 8002302:	0001      	movs	r1, r0
 8002304:	40f1      	lsrs	r1, r6
 8002306:	000e      	movs	r6, r1
 8002308:	2a20      	cmp	r2, #32
 800230a:	d004      	beq.n	8002316 <__aeabi_d2f+0xbe>
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <__aeabi_d2f+0x108>)
 800230e:	4694      	mov	ip, r2
 8002310:	4463      	add	r3, ip
 8002312:	4098      	lsls	r0, r3
 8002314:	4305      	orrs	r5, r0
 8002316:	0029      	movs	r1, r5
 8002318:	1e4d      	subs	r5, r1, #1
 800231a:	41a9      	sbcs	r1, r5
 800231c:	4331      	orrs	r1, r6
 800231e:	2600      	movs	r6, #0
 8002320:	074b      	lsls	r3, r1, #29
 8002322:	d1ce      	bne.n	80022c2 <__aeabi_d2f+0x6a>
 8002324:	2080      	movs	r0, #128	; 0x80
 8002326:	000b      	movs	r3, r1
 8002328:	04c0      	lsls	r0, r0, #19
 800232a:	2201      	movs	r2, #1
 800232c:	4003      	ands	r3, r0
 800232e:	4201      	tst	r1, r0
 8002330:	d1d3      	bne.n	80022da <__aeabi_d2f+0x82>
 8002332:	e7af      	b.n	8002294 <__aeabi_d2f+0x3c>
 8002334:	2300      	movs	r3, #0
 8002336:	e7ac      	b.n	8002292 <__aeabi_d2f+0x3a>
 8002338:	490a      	ldr	r1, [pc, #40]	; (8002364 <__aeabi_d2f+0x10c>)
 800233a:	468c      	mov	ip, r1
 800233c:	0029      	movs	r1, r5
 800233e:	4463      	add	r3, ip
 8002340:	40d1      	lsrs	r1, r2
 8002342:	409d      	lsls	r5, r3
 8002344:	000a      	movs	r2, r1
 8002346:	0029      	movs	r1, r5
 8002348:	4098      	lsls	r0, r3
 800234a:	1e4d      	subs	r5, r1, #1
 800234c:	41a9      	sbcs	r1, r5
 800234e:	4301      	orrs	r1, r0
 8002350:	4311      	orrs	r1, r2
 8002352:	e7e4      	b.n	800231e <__aeabi_d2f+0xc6>
 8002354:	0033      	movs	r3, r6
 8002356:	e79d      	b.n	8002294 <__aeabi_d2f+0x3c>
 8002358:	000007fe 	.word	0x000007fe
 800235c:	fffffc80 	.word	0xfffffc80
 8002360:	fffffca2 	.word	0xfffffca2
 8002364:	fffffc82 	.word	0xfffffc82

08002368 <__aeabi_cfrcmple>:
 8002368:	4684      	mov	ip, r0
 800236a:	1c08      	adds	r0, r1, #0
 800236c:	4661      	mov	r1, ip
 800236e:	e7ff      	b.n	8002370 <__aeabi_cfcmpeq>

08002370 <__aeabi_cfcmpeq>:
 8002370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002372:	f000 f9b7 	bl	80026e4 <__lesf2>
 8002376:	2800      	cmp	r0, #0
 8002378:	d401      	bmi.n	800237e <__aeabi_cfcmpeq+0xe>
 800237a:	2100      	movs	r1, #0
 800237c:	42c8      	cmn	r0, r1
 800237e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002380 <__aeabi_fcmpeq>:
 8002380:	b510      	push	{r4, lr}
 8002382:	f000 f93b 	bl	80025fc <__eqsf2>
 8002386:	4240      	negs	r0, r0
 8002388:	3001      	adds	r0, #1
 800238a:	bd10      	pop	{r4, pc}

0800238c <__aeabi_fcmplt>:
 800238c:	b510      	push	{r4, lr}
 800238e:	f000 f9a9 	bl	80026e4 <__lesf2>
 8002392:	2800      	cmp	r0, #0
 8002394:	db01      	blt.n	800239a <__aeabi_fcmplt+0xe>
 8002396:	2000      	movs	r0, #0
 8002398:	bd10      	pop	{r4, pc}
 800239a:	2001      	movs	r0, #1
 800239c:	bd10      	pop	{r4, pc}
 800239e:	46c0      	nop			; (mov r8, r8)

080023a0 <__aeabi_fcmple>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	f000 f99f 	bl	80026e4 <__lesf2>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	dd01      	ble.n	80023ae <__aeabi_fcmple+0xe>
 80023aa:	2000      	movs	r0, #0
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	2001      	movs	r0, #1
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)

080023b4 <__aeabi_fcmpgt>:
 80023b4:	b510      	push	{r4, lr}
 80023b6:	f000 f949 	bl	800264c <__gesf2>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	dc01      	bgt.n	80023c2 <__aeabi_fcmpgt+0xe>
 80023be:	2000      	movs	r0, #0
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	2001      	movs	r0, #1
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)

080023c8 <__aeabi_fcmpge>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	f000 f93f 	bl	800264c <__gesf2>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	da01      	bge.n	80023d6 <__aeabi_fcmpge+0xe>
 80023d2:	2000      	movs	r0, #0
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	2001      	movs	r0, #1
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	46c0      	nop			; (mov r8, r8)

080023dc <__clzsi2>:
 80023dc:	211c      	movs	r1, #28
 80023de:	2301      	movs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	4298      	cmp	r0, r3
 80023e4:	d301      	bcc.n	80023ea <__clzsi2+0xe>
 80023e6:	0c00      	lsrs	r0, r0, #16
 80023e8:	3910      	subs	r1, #16
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	4298      	cmp	r0, r3
 80023ee:	d301      	bcc.n	80023f4 <__clzsi2+0x18>
 80023f0:	0a00      	lsrs	r0, r0, #8
 80023f2:	3908      	subs	r1, #8
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	4298      	cmp	r0, r3
 80023f8:	d301      	bcc.n	80023fe <__clzsi2+0x22>
 80023fa:	0900      	lsrs	r0, r0, #4
 80023fc:	3904      	subs	r1, #4
 80023fe:	a202      	add	r2, pc, #8	; (adr r2, 8002408 <__clzsi2+0x2c>)
 8002400:	5c10      	ldrb	r0, [r2, r0]
 8002402:	1840      	adds	r0, r0, r1
 8002404:	4770      	bx	lr
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	02020304 	.word	0x02020304
 800240c:	01010101 	.word	0x01010101
	...

08002418 <__clzdi2>:
 8002418:	b510      	push	{r4, lr}
 800241a:	2900      	cmp	r1, #0
 800241c:	d103      	bne.n	8002426 <__clzdi2+0xe>
 800241e:	f7ff ffdd 	bl	80023dc <__clzsi2>
 8002422:	3020      	adds	r0, #32
 8002424:	e002      	b.n	800242c <__clzdi2+0x14>
 8002426:	1c08      	adds	r0, r1, #0
 8002428:	f7ff ffd8 	bl	80023dc <__clzsi2>
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			; (mov r8, r8)

08002430 <__divdi3>:
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	4657      	mov	r7, sl
 8002434:	464e      	mov	r6, r9
 8002436:	4645      	mov	r5, r8
 8002438:	46de      	mov	lr, fp
 800243a:	b5e0      	push	{r5, r6, r7, lr}
 800243c:	000f      	movs	r7, r1
 800243e:	0019      	movs	r1, r3
 8002440:	2300      	movs	r3, #0
 8002442:	0006      	movs	r6, r0
 8002444:	4698      	mov	r8, r3
 8002446:	0010      	movs	r0, r2
 8002448:	b083      	sub	sp, #12
 800244a:	2f00      	cmp	r7, #0
 800244c:	da07      	bge.n	800245e <__divdi3+0x2e>
 800244e:	0033      	movs	r3, r6
 8002450:	003c      	movs	r4, r7
 8002452:	2700      	movs	r7, #0
 8002454:	425e      	negs	r6, r3
 8002456:	41a7      	sbcs	r7, r4
 8002458:	2301      	movs	r3, #1
 800245a:	425b      	negs	r3, r3
 800245c:	4698      	mov	r8, r3
 800245e:	2900      	cmp	r1, #0
 8002460:	da07      	bge.n	8002472 <__divdi3+0x42>
 8002462:	4643      	mov	r3, r8
 8002464:	43db      	mvns	r3, r3
 8002466:	000c      	movs	r4, r1
 8002468:	4698      	mov	r8, r3
 800246a:	0003      	movs	r3, r0
 800246c:	2100      	movs	r1, #0
 800246e:	4258      	negs	r0, r3
 8002470:	41a1      	sbcs	r1, r4
 8002472:	0034      	movs	r4, r6
 8002474:	003d      	movs	r5, r7
 8002476:	4682      	mov	sl, r0
 8002478:	4689      	mov	r9, r1
 800247a:	42b9      	cmp	r1, r7
 800247c:	d86a      	bhi.n	8002554 <__divdi3+0x124>
 800247e:	d067      	beq.n	8002550 <__divdi3+0x120>
 8002480:	4649      	mov	r1, r9
 8002482:	4650      	mov	r0, sl
 8002484:	f7ff ffc8 	bl	8002418 <__clzdi2>
 8002488:	4683      	mov	fp, r0
 800248a:	0039      	movs	r1, r7
 800248c:	0030      	movs	r0, r6
 800248e:	f7ff ffc3 	bl	8002418 <__clzdi2>
 8002492:	465b      	mov	r3, fp
 8002494:	1a1b      	subs	r3, r3, r0
 8002496:	469c      	mov	ip, r3
 8002498:	3b20      	subs	r3, #32
 800249a:	469b      	mov	fp, r3
 800249c:	d46b      	bmi.n	8002576 <__divdi3+0x146>
 800249e:	4658      	mov	r0, fp
 80024a0:	4651      	mov	r1, sl
 80024a2:	4081      	lsls	r1, r0
 80024a4:	4660      	mov	r0, ip
 80024a6:	000b      	movs	r3, r1
 80024a8:	4651      	mov	r1, sl
 80024aa:	4081      	lsls	r1, r0
 80024ac:	000a      	movs	r2, r1
 80024ae:	42bb      	cmp	r3, r7
 80024b0:	d900      	bls.n	80024b4 <__divdi3+0x84>
 80024b2:	e072      	b.n	800259a <__divdi3+0x16a>
 80024b4:	42bb      	cmp	r3, r7
 80024b6:	d100      	bne.n	80024ba <__divdi3+0x8a>
 80024b8:	e079      	b.n	80025ae <__divdi3+0x17e>
 80024ba:	0034      	movs	r4, r6
 80024bc:	003d      	movs	r5, r7
 80024be:	4659      	mov	r1, fp
 80024c0:	1aa4      	subs	r4, r4, r2
 80024c2:	419d      	sbcs	r5, r3
 80024c4:	2900      	cmp	r1, #0
 80024c6:	da00      	bge.n	80024ca <__divdi3+0x9a>
 80024c8:	e074      	b.n	80025b4 <__divdi3+0x184>
 80024ca:	2100      	movs	r1, #0
 80024cc:	2000      	movs	r0, #0
 80024ce:	2601      	movs	r6, #1
 80024d0:	9000      	str	r0, [sp, #0]
 80024d2:	9101      	str	r1, [sp, #4]
 80024d4:	4659      	mov	r1, fp
 80024d6:	408e      	lsls	r6, r1
 80024d8:	9601      	str	r6, [sp, #4]
 80024da:	4661      	mov	r1, ip
 80024dc:	2601      	movs	r6, #1
 80024de:	408e      	lsls	r6, r1
 80024e0:	4661      	mov	r1, ip
 80024e2:	9600      	str	r6, [sp, #0]
 80024e4:	2900      	cmp	r1, #0
 80024e6:	d05f      	beq.n	80025a8 <__divdi3+0x178>
 80024e8:	07d9      	lsls	r1, r3, #31
 80024ea:	0856      	lsrs	r6, r2, #1
 80024ec:	430e      	orrs	r6, r1
 80024ee:	085f      	lsrs	r7, r3, #1
 80024f0:	4661      	mov	r1, ip
 80024f2:	2201      	movs	r2, #1
 80024f4:	2300      	movs	r3, #0
 80024f6:	e00c      	b.n	8002512 <__divdi3+0xe2>
 80024f8:	42af      	cmp	r7, r5
 80024fa:	d101      	bne.n	8002500 <__divdi3+0xd0>
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d80a      	bhi.n	8002516 <__divdi3+0xe6>
 8002500:	1ba4      	subs	r4, r4, r6
 8002502:	41bd      	sbcs	r5, r7
 8002504:	1924      	adds	r4, r4, r4
 8002506:	416d      	adcs	r5, r5
 8002508:	3901      	subs	r1, #1
 800250a:	18a4      	adds	r4, r4, r2
 800250c:	415d      	adcs	r5, r3
 800250e:	2900      	cmp	r1, #0
 8002510:	d006      	beq.n	8002520 <__divdi3+0xf0>
 8002512:	42af      	cmp	r7, r5
 8002514:	d9f0      	bls.n	80024f8 <__divdi3+0xc8>
 8002516:	3901      	subs	r1, #1
 8002518:	1924      	adds	r4, r4, r4
 800251a:	416d      	adcs	r5, r5
 800251c:	2900      	cmp	r1, #0
 800251e:	d1f8      	bne.n	8002512 <__divdi3+0xe2>
 8002520:	9800      	ldr	r0, [sp, #0]
 8002522:	9901      	ldr	r1, [sp, #4]
 8002524:	465b      	mov	r3, fp
 8002526:	1900      	adds	r0, r0, r4
 8002528:	4169      	adcs	r1, r5
 800252a:	2b00      	cmp	r3, #0
 800252c:	db4d      	blt.n	80025ca <__divdi3+0x19a>
 800252e:	002e      	movs	r6, r5
 8002530:	002c      	movs	r4, r5
 8002532:	40de      	lsrs	r6, r3
 8002534:	4663      	mov	r3, ip
 8002536:	40dc      	lsrs	r4, r3
 8002538:	465b      	mov	r3, fp
 800253a:	2b00      	cmp	r3, #0
 800253c:	db55      	blt.n	80025ea <__divdi3+0x1ba>
 800253e:	0034      	movs	r4, r6
 8002540:	409c      	lsls	r4, r3
 8002542:	0023      	movs	r3, r4
 8002544:	4664      	mov	r4, ip
 8002546:	40a6      	lsls	r6, r4
 8002548:	0032      	movs	r2, r6
 800254a:	1a80      	subs	r0, r0, r2
 800254c:	4199      	sbcs	r1, r3
 800254e:	e003      	b.n	8002558 <__divdi3+0x128>
 8002550:	42b0      	cmp	r0, r6
 8002552:	d995      	bls.n	8002480 <__divdi3+0x50>
 8002554:	2000      	movs	r0, #0
 8002556:	2100      	movs	r1, #0
 8002558:	4643      	mov	r3, r8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <__divdi3+0x138>
 800255e:	0003      	movs	r3, r0
 8002560:	000c      	movs	r4, r1
 8002562:	2100      	movs	r1, #0
 8002564:	4258      	negs	r0, r3
 8002566:	41a1      	sbcs	r1, r4
 8002568:	b003      	add	sp, #12
 800256a:	bcf0      	pop	{r4, r5, r6, r7}
 800256c:	46bb      	mov	fp, r7
 800256e:	46b2      	mov	sl, r6
 8002570:	46a9      	mov	r9, r5
 8002572:	46a0      	mov	r8, r4
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002576:	4662      	mov	r2, ip
 8002578:	4648      	mov	r0, r9
 800257a:	2320      	movs	r3, #32
 800257c:	4651      	mov	r1, sl
 800257e:	4090      	lsls	r0, r2
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	40d9      	lsrs	r1, r3
 8002584:	0003      	movs	r3, r0
 8002586:	9100      	str	r1, [sp, #0]
 8002588:	9900      	ldr	r1, [sp, #0]
 800258a:	4660      	mov	r0, ip
 800258c:	430b      	orrs	r3, r1
 800258e:	4651      	mov	r1, sl
 8002590:	4081      	lsls	r1, r0
 8002592:	000a      	movs	r2, r1
 8002594:	42bb      	cmp	r3, r7
 8002596:	d800      	bhi.n	800259a <__divdi3+0x16a>
 8002598:	e78c      	b.n	80024b4 <__divdi3+0x84>
 800259a:	2100      	movs	r1, #0
 800259c:	2000      	movs	r0, #0
 800259e:	9000      	str	r0, [sp, #0]
 80025a0:	9101      	str	r1, [sp, #4]
 80025a2:	4661      	mov	r1, ip
 80025a4:	2900      	cmp	r1, #0
 80025a6:	d19f      	bne.n	80024e8 <__divdi3+0xb8>
 80025a8:	9800      	ldr	r0, [sp, #0]
 80025aa:	9901      	ldr	r1, [sp, #4]
 80025ac:	e7d4      	b.n	8002558 <__divdi3+0x128>
 80025ae:	42b1      	cmp	r1, r6
 80025b0:	d8f3      	bhi.n	800259a <__divdi3+0x16a>
 80025b2:	e782      	b.n	80024ba <__divdi3+0x8a>
 80025b4:	4661      	mov	r1, ip
 80025b6:	2620      	movs	r6, #32
 80025b8:	2701      	movs	r7, #1
 80025ba:	1a76      	subs	r6, r6, r1
 80025bc:	2000      	movs	r0, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	40f7      	lsrs	r7, r6
 80025c2:	9000      	str	r0, [sp, #0]
 80025c4:	9101      	str	r1, [sp, #4]
 80025c6:	9701      	str	r7, [sp, #4]
 80025c8:	e787      	b.n	80024da <__divdi3+0xaa>
 80025ca:	4662      	mov	r2, ip
 80025cc:	2320      	movs	r3, #32
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	002a      	movs	r2, r5
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0026      	movs	r6, r4
 80025d6:	0013      	movs	r3, r2
 80025d8:	4662      	mov	r2, ip
 80025da:	40d6      	lsrs	r6, r2
 80025dc:	002c      	movs	r4, r5
 80025de:	431e      	orrs	r6, r3
 80025e0:	4663      	mov	r3, ip
 80025e2:	40dc      	lsrs	r4, r3
 80025e4:	465b      	mov	r3, fp
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	daa9      	bge.n	800253e <__divdi3+0x10e>
 80025ea:	4662      	mov	r2, ip
 80025ec:	2320      	movs	r3, #32
 80025ee:	0035      	movs	r5, r6
 80025f0:	4094      	lsls	r4, r2
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	40dd      	lsrs	r5, r3
 80025f6:	0023      	movs	r3, r4
 80025f8:	432b      	orrs	r3, r5
 80025fa:	e7a3      	b.n	8002544 <__divdi3+0x114>

080025fc <__eqsf2>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	0042      	lsls	r2, r0, #1
 8002600:	024e      	lsls	r6, r1, #9
 8002602:	004c      	lsls	r4, r1, #1
 8002604:	0245      	lsls	r5, r0, #9
 8002606:	0a6d      	lsrs	r5, r5, #9
 8002608:	0e12      	lsrs	r2, r2, #24
 800260a:	0fc3      	lsrs	r3, r0, #31
 800260c:	0a76      	lsrs	r6, r6, #9
 800260e:	0e24      	lsrs	r4, r4, #24
 8002610:	0fc9      	lsrs	r1, r1, #31
 8002612:	2aff      	cmp	r2, #255	; 0xff
 8002614:	d00f      	beq.n	8002636 <__eqsf2+0x3a>
 8002616:	2cff      	cmp	r4, #255	; 0xff
 8002618:	d011      	beq.n	800263e <__eqsf2+0x42>
 800261a:	2001      	movs	r0, #1
 800261c:	42a2      	cmp	r2, r4
 800261e:	d000      	beq.n	8002622 <__eqsf2+0x26>
 8002620:	bd70      	pop	{r4, r5, r6, pc}
 8002622:	42b5      	cmp	r5, r6
 8002624:	d1fc      	bne.n	8002620 <__eqsf2+0x24>
 8002626:	428b      	cmp	r3, r1
 8002628:	d00d      	beq.n	8002646 <__eqsf2+0x4a>
 800262a:	2a00      	cmp	r2, #0
 800262c:	d1f8      	bne.n	8002620 <__eqsf2+0x24>
 800262e:	0028      	movs	r0, r5
 8002630:	1e45      	subs	r5, r0, #1
 8002632:	41a8      	sbcs	r0, r5
 8002634:	e7f4      	b.n	8002620 <__eqsf2+0x24>
 8002636:	2001      	movs	r0, #1
 8002638:	2d00      	cmp	r5, #0
 800263a:	d1f1      	bne.n	8002620 <__eqsf2+0x24>
 800263c:	e7eb      	b.n	8002616 <__eqsf2+0x1a>
 800263e:	2001      	movs	r0, #1
 8002640:	2e00      	cmp	r6, #0
 8002642:	d1ed      	bne.n	8002620 <__eqsf2+0x24>
 8002644:	e7e9      	b.n	800261a <__eqsf2+0x1e>
 8002646:	2000      	movs	r0, #0
 8002648:	e7ea      	b.n	8002620 <__eqsf2+0x24>
 800264a:	46c0      	nop			; (mov r8, r8)

0800264c <__gesf2>:
 800264c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264e:	0042      	lsls	r2, r0, #1
 8002650:	0246      	lsls	r6, r0, #9
 8002652:	024d      	lsls	r5, r1, #9
 8002654:	004c      	lsls	r4, r1, #1
 8002656:	0fc3      	lsrs	r3, r0, #31
 8002658:	0a76      	lsrs	r6, r6, #9
 800265a:	0e12      	lsrs	r2, r2, #24
 800265c:	0a6d      	lsrs	r5, r5, #9
 800265e:	0e24      	lsrs	r4, r4, #24
 8002660:	0fc8      	lsrs	r0, r1, #31
 8002662:	2aff      	cmp	r2, #255	; 0xff
 8002664:	d01f      	beq.n	80026a6 <__gesf2+0x5a>
 8002666:	2cff      	cmp	r4, #255	; 0xff
 8002668:	d010      	beq.n	800268c <__gesf2+0x40>
 800266a:	2a00      	cmp	r2, #0
 800266c:	d11f      	bne.n	80026ae <__gesf2+0x62>
 800266e:	4271      	negs	r1, r6
 8002670:	4171      	adcs	r1, r6
 8002672:	2c00      	cmp	r4, #0
 8002674:	d101      	bne.n	800267a <__gesf2+0x2e>
 8002676:	2d00      	cmp	r5, #0
 8002678:	d01e      	beq.n	80026b8 <__gesf2+0x6c>
 800267a:	2900      	cmp	r1, #0
 800267c:	d10e      	bne.n	800269c <__gesf2+0x50>
 800267e:	4283      	cmp	r3, r0
 8002680:	d01e      	beq.n	80026c0 <__gesf2+0x74>
 8002682:	2102      	movs	r1, #2
 8002684:	1e58      	subs	r0, r3, #1
 8002686:	4008      	ands	r0, r1
 8002688:	3801      	subs	r0, #1
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	2d00      	cmp	r5, #0
 800268e:	d126      	bne.n	80026de <__gesf2+0x92>
 8002690:	2a00      	cmp	r2, #0
 8002692:	d1f4      	bne.n	800267e <__gesf2+0x32>
 8002694:	4271      	negs	r1, r6
 8002696:	4171      	adcs	r1, r6
 8002698:	2900      	cmp	r1, #0
 800269a:	d0f0      	beq.n	800267e <__gesf2+0x32>
 800269c:	2800      	cmp	r0, #0
 800269e:	d1f4      	bne.n	800268a <__gesf2+0x3e>
 80026a0:	2001      	movs	r0, #1
 80026a2:	4240      	negs	r0, r0
 80026a4:	e7f1      	b.n	800268a <__gesf2+0x3e>
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	d119      	bne.n	80026de <__gesf2+0x92>
 80026aa:	2cff      	cmp	r4, #255	; 0xff
 80026ac:	d0ee      	beq.n	800268c <__gesf2+0x40>
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	d1e5      	bne.n	800267e <__gesf2+0x32>
 80026b2:	2d00      	cmp	r5, #0
 80026b4:	d1e3      	bne.n	800267e <__gesf2+0x32>
 80026b6:	e7e4      	b.n	8002682 <__gesf2+0x36>
 80026b8:	2000      	movs	r0, #0
 80026ba:	2e00      	cmp	r6, #0
 80026bc:	d0e5      	beq.n	800268a <__gesf2+0x3e>
 80026be:	e7e0      	b.n	8002682 <__gesf2+0x36>
 80026c0:	42a2      	cmp	r2, r4
 80026c2:	dc05      	bgt.n	80026d0 <__gesf2+0x84>
 80026c4:	dbea      	blt.n	800269c <__gesf2+0x50>
 80026c6:	42ae      	cmp	r6, r5
 80026c8:	d802      	bhi.n	80026d0 <__gesf2+0x84>
 80026ca:	d3e7      	bcc.n	800269c <__gesf2+0x50>
 80026cc:	2000      	movs	r0, #0
 80026ce:	e7dc      	b.n	800268a <__gesf2+0x3e>
 80026d0:	4241      	negs	r1, r0
 80026d2:	4141      	adcs	r1, r0
 80026d4:	4248      	negs	r0, r1
 80026d6:	2102      	movs	r1, #2
 80026d8:	4008      	ands	r0, r1
 80026da:	3801      	subs	r0, #1
 80026dc:	e7d5      	b.n	800268a <__gesf2+0x3e>
 80026de:	2002      	movs	r0, #2
 80026e0:	4240      	negs	r0, r0
 80026e2:	e7d2      	b.n	800268a <__gesf2+0x3e>

080026e4 <__lesf2>:
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	0042      	lsls	r2, r0, #1
 80026e8:	0246      	lsls	r6, r0, #9
 80026ea:	024d      	lsls	r5, r1, #9
 80026ec:	004c      	lsls	r4, r1, #1
 80026ee:	0fc3      	lsrs	r3, r0, #31
 80026f0:	0a76      	lsrs	r6, r6, #9
 80026f2:	0e12      	lsrs	r2, r2, #24
 80026f4:	0a6d      	lsrs	r5, r5, #9
 80026f6:	0e24      	lsrs	r4, r4, #24
 80026f8:	0fc8      	lsrs	r0, r1, #31
 80026fa:	2aff      	cmp	r2, #255	; 0xff
 80026fc:	d00d      	beq.n	800271a <__lesf2+0x36>
 80026fe:	2cff      	cmp	r4, #255	; 0xff
 8002700:	d00f      	beq.n	8002722 <__lesf2+0x3e>
 8002702:	2a00      	cmp	r2, #0
 8002704:	d123      	bne.n	800274e <__lesf2+0x6a>
 8002706:	4271      	negs	r1, r6
 8002708:	4171      	adcs	r1, r6
 800270a:	2c00      	cmp	r4, #0
 800270c:	d10f      	bne.n	800272e <__lesf2+0x4a>
 800270e:	2d00      	cmp	r5, #0
 8002710:	d10d      	bne.n	800272e <__lesf2+0x4a>
 8002712:	2000      	movs	r0, #0
 8002714:	2e00      	cmp	r6, #0
 8002716:	d014      	beq.n	8002742 <__lesf2+0x5e>
 8002718:	e00d      	b.n	8002736 <__lesf2+0x52>
 800271a:	2e00      	cmp	r6, #0
 800271c:	d110      	bne.n	8002740 <__lesf2+0x5c>
 800271e:	2cff      	cmp	r4, #255	; 0xff
 8002720:	d115      	bne.n	800274e <__lesf2+0x6a>
 8002722:	2d00      	cmp	r5, #0
 8002724:	d10c      	bne.n	8002740 <__lesf2+0x5c>
 8002726:	2a00      	cmp	r2, #0
 8002728:	d103      	bne.n	8002732 <__lesf2+0x4e>
 800272a:	4271      	negs	r1, r6
 800272c:	4171      	adcs	r1, r6
 800272e:	2900      	cmp	r1, #0
 8002730:	d108      	bne.n	8002744 <__lesf2+0x60>
 8002732:	4283      	cmp	r3, r0
 8002734:	d010      	beq.n	8002758 <__lesf2+0x74>
 8002736:	2102      	movs	r1, #2
 8002738:	1e58      	subs	r0, r3, #1
 800273a:	4008      	ands	r0, r1
 800273c:	3801      	subs	r0, #1
 800273e:	e000      	b.n	8002742 <__lesf2+0x5e>
 8002740:	2002      	movs	r0, #2
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002744:	2800      	cmp	r0, #0
 8002746:	d1fc      	bne.n	8002742 <__lesf2+0x5e>
 8002748:	2001      	movs	r0, #1
 800274a:	4240      	negs	r0, r0
 800274c:	e7f9      	b.n	8002742 <__lesf2+0x5e>
 800274e:	2c00      	cmp	r4, #0
 8002750:	d1ef      	bne.n	8002732 <__lesf2+0x4e>
 8002752:	2d00      	cmp	r5, #0
 8002754:	d1ed      	bne.n	8002732 <__lesf2+0x4e>
 8002756:	e7ee      	b.n	8002736 <__lesf2+0x52>
 8002758:	42a2      	cmp	r2, r4
 800275a:	dc05      	bgt.n	8002768 <__lesf2+0x84>
 800275c:	dbf2      	blt.n	8002744 <__lesf2+0x60>
 800275e:	42ae      	cmp	r6, r5
 8002760:	d802      	bhi.n	8002768 <__lesf2+0x84>
 8002762:	d3ef      	bcc.n	8002744 <__lesf2+0x60>
 8002764:	2000      	movs	r0, #0
 8002766:	e7ec      	b.n	8002742 <__lesf2+0x5e>
 8002768:	4241      	negs	r1, r0
 800276a:	4141      	adcs	r1, r0
 800276c:	4248      	negs	r0, r1
 800276e:	2102      	movs	r1, #2
 8002770:	4008      	ands	r0, r1
 8002772:	3801      	subs	r0, #1
 8002774:	e7e5      	b.n	8002742 <__lesf2+0x5e>
 8002776:	46c0      	nop			; (mov r8, r8)

08002778 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_Init+0x3c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Init+0x3c>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0049      	lsls	r1, r1, #1
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002792:	2003      	movs	r0, #3
 8002794:	f000 f810 	bl	80027b8 <HAL_InitTick>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d003      	beq.n	80027a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e001      	b.n	80027a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f008 fd2e 	bl	800b204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	781b      	ldrb	r3, [r3, #0]
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_InitTick+0x88>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02b      	beq.n	8002828 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_InitTick+0x8c>)
 80027d2:	681c      	ldr	r4, [r3, #0]
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_InitTick+0x88>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	0019      	movs	r1, r3
 80027da:	23fa      	movs	r3, #250	; 0xfa
 80027dc:	0098      	lsls	r0, r3, #2
 80027de:	f7fd fc91 	bl	8000104 <__udivsi3>
 80027e2:	0003      	movs	r3, r0
 80027e4:	0019      	movs	r1, r3
 80027e6:	0020      	movs	r0, r4
 80027e8:	f7fd fc8c 	bl	8000104 <__udivsi3>
 80027ec:	0003      	movs	r3, r0
 80027ee:	0018      	movs	r0, r3
 80027f0:	f001 f8c1 	bl	8003976 <HAL_SYSTICK_Config>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d112      	bne.n	800281e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d80a      	bhi.n	8002814 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	2301      	movs	r3, #1
 8002802:	425b      	negs	r3, r3
 8002804:	2200      	movs	r2, #0
 8002806:	0018      	movs	r0, r3
 8002808:	f001 f890 	bl	800392c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_InitTick+0x90>)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e00d      	b.n	8002830 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002814:	230f      	movs	r3, #15
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e008      	b.n	8002830 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800281e:	230f      	movs	r3, #15
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e003      	b.n	8002830 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002828:	230f      	movs	r3, #15
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002830:	230f      	movs	r3, #15
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b005      	add	sp, #20
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000004 	.word	0x20000004
 8002844:	20000008 	.word	0x20000008
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_IncTick+0x1c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	001a      	movs	r2, r3
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x20>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	18d2      	adds	r2, r2, r3
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_IncTick+0x20>)
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000004 	.word	0x20000004
 800286c:	20000028 	.word	0x20000028

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <HAL_GetTick+0x10>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000028 	.word	0x20000028

08002884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff fff0 	bl	8002870 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_Delay+0x44>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	001a      	movs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	f7ff ffe0 	bl	8002870 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d8f7      	bhi.n	80028ac <HAL_Delay+0x28>
  {
  }
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b002      	add	sp, #8
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	40010000 	.word	0x40010000
 80028f4:	fffff9ff 	.word	0xfffff9ff

080028f8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002908:	401a      	ands	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	fe3fffff 	.word	0xfe3fffff

08002920 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	23e0      	movs	r3, #224	; 0xe0
 800292e:	045b      	lsls	r3, r3, #17
 8002930:	4013      	ands	r3, r2
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}

0800293a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	2104      	movs	r1, #4
 800294e:	400a      	ands	r2, r1
 8002950:	2107      	movs	r1, #7
 8002952:	4091      	lsls	r1, r2
 8002954:	000a      	movs	r2, r1
 8002956:	43d2      	mvns	r2, r2
 8002958:	401a      	ands	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2104      	movs	r1, #4
 800295e:	400b      	ands	r3, r1
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4099      	lsls	r1, r3
 8002964:	000b      	movs	r3, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}

08002974 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	23c0      	movs	r3, #192	; 0xc0
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	4013      	ands	r3, r2
 8002986:	d101      	bne.n	800298c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}

08002996 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	211f      	movs	r1, #31
 80029aa:	400a      	ands	r2, r1
 80029ac:	210f      	movs	r1, #15
 80029ae:	4091      	lsls	r1, r2
 80029b0:	000a      	movs	r2, r1
 80029b2:	43d2      	mvns	r2, r2
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	210f      	movs	r1, #15
 80029bc:	4019      	ands	r1, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	201f      	movs	r0, #31
 80029c2:	4003      	ands	r3, r0
 80029c4:	4099      	lsls	r1, r3
 80029c6:	000b      	movs	r3, r1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	035b      	lsls	r3, r3, #13
 80029e8:	0b5b      	lsrs	r3, r3, #13
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	0352      	lsls	r2, r2, #13
 8002a0a:	0b52      	lsrs	r2, r2, #13
 8002a0c:	43d2      	mvns	r2, r2
 8002a0e:	401a      	ands	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	0212      	lsls	r2, r2, #8
 8002a30:	43d2      	mvns	r2, r2
 8002a32:	401a      	ands	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	4904      	ldr	r1, [pc, #16]	; (8002a50 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002a3e:	400b      	ands	r3, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	07ffff00 	.word	0x07ffff00

08002a54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0552      	lsls	r2, r2, #21
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	6fffffe8 	.word	0x6fffffe8

08002a7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	055b      	lsls	r3, r3, #21
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	055b      	lsls	r3, r3, #21
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <LL_ADC_Enable+0x20>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	7fffffe8 	.word	0x7fffffe8

08002ac8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <LL_ADC_Disable+0x20>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2202      	movs	r2, #2
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	7fffffe8 	.word	0x7fffffe8

08002aec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <LL_ADC_IsEnabled+0x18>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <LL_ADC_IsEnabled+0x1a>
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b002      	add	sp, #8
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_IsDisableOngoing+0x18>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_IsDisableOngoing+0x1a>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <LL_ADC_REG_StartConversion+0x20>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2204      	movs	r2, #4
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	7fffffe8 	.word	0x7fffffe8

08002b54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2204      	movs	r2, #4
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d101      	bne.n	8002b6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	231f      	movs	r3, #31
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1b1      	b.n	8002f02 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f008 fb53 	bl	800b254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2254      	movs	r2, #84	; 0x54
 8002bb8:	2100      	movs	r1, #0
 8002bba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff ff5b 	bl	8002a7c <LL_ADC_IsInternalRegulatorEnabled>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff ff40 	bl	8002a54 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd4:	4bcd      	ldr	r3, [pc, #820]	; (8002f0c <HAL_ADC_Init+0x394>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	49cd      	ldr	r1, [pc, #820]	; (8002f10 <HAL_ADC_Init+0x398>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fd fa92 	bl	8000104 <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	3301      	adds	r3, #1
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002be8:	e002      	b.n	8002bf0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f9      	bne.n	8002bea <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff ff3e 	bl	8002a7c <LL_ADC_IsInternalRegulatorEnabled>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d10f      	bne.n	8002c24 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	2210      	movs	r2, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	2201      	movs	r2, #1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c1c:	231f      	movs	r3, #31
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff ff93 	bl	8002b54 <LL_ADC_REG_IsConversionOngoing>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	2210      	movs	r2, #16
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d000      	beq.n	8002c3e <HAL_ADC_Init+0xc6>
 8002c3c:	e154      	b.n	8002ee8 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d000      	beq.n	8002c46 <HAL_ADC_Init+0xce>
 8002c44:	e150      	b.n	8002ee8 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	4ab2      	ldr	r2, [pc, #712]	; (8002f14 <HAL_ADC_Init+0x39c>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2202      	movs	r2, #2
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff ff46 	bl	8002aec <LL_ADC_IsEnabled>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d156      	bne.n	8002d12 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2218      	movs	r2, #24
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0f9b      	lsrs	r3, r3, #30
 8002c82:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223c      	movs	r2, #60	; 0x3c
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d111      	bne.n	8002cbe <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	0f9b      	lsrs	r3, r3, #30
 8002ca0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ca6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002cac:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002cb2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4a94      	ldr	r2, [pc, #592]	; (8002f18 <HAL_ADC_Init+0x3a0>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	061b      	lsls	r3, r3, #24
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d018      	beq.n	8002d12 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d012      	beq.n	8002d12 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d00c      	beq.n	8002d12 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002cf8:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_ADC_Init+0x3a4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a88      	ldr	r2, [pc, #544]	; (8002f20 <HAL_ADC_Init+0x3a8>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	23f0      	movs	r3, #240	; 0xf0
 8002d08:	039b      	lsls	r3, r3, #14
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	4b83      	ldr	r3, [pc, #524]	; (8002f1c <HAL_ADC_Init+0x3a4>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7e1b      	ldrb	r3, [r3, #24]
 8002d16:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7e5b      	ldrb	r3, [r3, #25]
 8002d1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7e9b      	ldrb	r3, [r3, #26]
 8002d24:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d26:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_ADC_Init+0x1be>
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	e000      	b.n	8002d38 <HAL_ADC_Init+0x1c0>
 8002d36:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d38:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d3e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da04      	bge.n	8002d52 <HAL_ADC_Init+0x1da>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	e001      	b.n	8002d56 <HAL_ADC_Init+0x1de>
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002d56:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	5c5b      	ldrb	r3, [r3, r1]
 8002d5e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d60:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d115      	bne.n	8002d9e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7e9b      	ldrb	r3, [r3, #26]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0252      	lsls	r2, r2, #9
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e00b      	b.n	8002d9e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2201      	movs	r2, #1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002daa:	23e0      	movs	r3, #224	; 0xe0
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002db4:	4313      	orrs	r3, r2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_ADC_Init+0x3ac>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4a53      	ldr	r2, [pc, #332]	; (8002f28 <HAL_ADC_Init+0x3b0>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	001a      	movs	r2, r3
 8002df2:	2100      	movs	r1, #0
 8002df4:	f7ff fda1 	bl	800293a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	494a      	ldr	r1, [pc, #296]	; (8002f2c <HAL_ADC_Init+0x3b4>)
 8002e02:	001a      	movs	r2, r3
 8002e04:	f7ff fd99 	bl	800293a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	4249      	negs	r1, r1
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
 8002e22:	e03a      	b.n	8002e9a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	039b      	lsls	r3, r3, #14
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d134      	bne.n	8002e9a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e00c      	b.n	8002e50 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	40da      	lsrs	r2, r3
 8002e40:	0013      	movs	r3, r2
 8002e42:	220f      	movs	r2, #15
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	d006      	beq.n	8002e58 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b07      	cmp	r3, #7
 8002e54:	d9ef      	bls.n	8002e36 <HAL_ADC_Init+0x2be>
 8002e56:	e000      	b.n	8002e5a <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002e58:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d109      	bne.n	8002e74 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	4249      	negs	r1, r1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
 8002e72:	e012      	b.n	8002e9a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	221c      	movs	r2, #28
 8002e84:	4013      	ands	r3, r2
 8002e86:	2210      	movs	r2, #16
 8002e88:	4252      	negs	r2, r2
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <HAL_ADC_Init+0x3b8>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	2201      	movs	r2, #1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ec0:	e01c      	b.n	8002efc <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	2212      	movs	r2, #18
 8002ec8:	4393      	bics	r3, r2
 8002eca:	2210      	movs	r2, #16
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002ede:	231f      	movs	r3, #31
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ee6:	e009      	b.n	8002efc <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	2210      	movs	r2, #16
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ef4:	231f      	movs	r3, #31
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002efc:	231f      	movs	r3, #31
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	781b      	ldrb	r3, [r3, #0]
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b008      	add	sp, #32
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	00030d40 	.word	0x00030d40
 8002f14:	fffffefd 	.word	0xfffffefd
 8002f18:	1ffffc02 	.word	0x1ffffc02
 8002f1c:	40012708 	.word	0x40012708
 8002f20:	ffc3ffff 	.word	0xffc3ffff
 8002f24:	fffe0219 	.word	0xfffe0219
 8002f28:	dffffc02 	.word	0xdffffc02
 8002f2c:	07ffff04 	.word	0x07ffff04
 8002f30:	833fffe7 	.word	0x833fffe7

08002f34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fe07 	bl	8002b54 <LL_ADC_REG_IsConversionOngoing>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d135      	bne.n	8002fb6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2254      	movs	r2, #84	; 0x54
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_Start+0x24>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e035      	b.n	8002fc4 <HAL_ADC_Start+0x90>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2254      	movs	r2, #84	; 0x54
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f60:	250f      	movs	r5, #15
 8002f62:	197c      	adds	r4, r7, r5
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 faaa 	bl	80034c0 <ADC_Enable>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f70:	197b      	adds	r3, r7, r5
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d119      	bne.n	8002fac <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_ADC_Start+0x98>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	0052      	lsls	r2, r2, #1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	221c      	movs	r2, #28
 8002f96:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2254      	movs	r2, #84	; 0x54
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fdc3 	bl	8002b30 <LL_ADC_REG_StartConversion>
 8002faa:	e008      	b.n	8002fbe <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2254      	movs	r2, #84	; 0x54
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]
 8002fb4:	e003      	b.n	8002fbe <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}
 8002fcc:	fffff0fe 	.word	0xfffff0fe

08002fd0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d102      	bne.n	8002fe8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e00f      	b.n	8003008 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d007      	beq.n	8003004 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e072      	b.n	80030ea <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003004:	2304      	movs	r3, #4
 8003006:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003008:	f7ff fc32 	bl	8002870 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003010:	e01f      	b.n	8003052 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	d01c      	beq.n	8003052 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003018:	f7ff fc2a 	bl	8002870 <HAL_GetTick>
 800301c:	0002      	movs	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d302      	bcc.n	800302e <HAL_ADC_PollForConversion+0x5e>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d111      	bne.n	8003052 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	d10b      	bne.n	8003052 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	2204      	movs	r2, #4
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2254      	movs	r2, #84	; 0x54
 800304a:	2100      	movs	r1, #0
 800304c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e04b      	b.n	80030ea <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	d0d9      	beq.n	8003012 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fc7f 	bl	8002974 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d02e      	beq.n	80030d8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7e9b      	ldrb	r3, [r3, #26]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12a      	bne.n	80030d8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2208      	movs	r2, #8
 800308a:	4013      	ands	r3, r2
 800308c:	2b08      	cmp	r3, #8
 800308e:	d123      	bne.n	80030d8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fd5d 	bl	8002b54 <LL_ADC_REG_IsConversionOngoing>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d110      	bne.n	80030c0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	210c      	movs	r1, #12
 80030aa:	438a      	bics	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <HAL_ADC_PollForConversion+0x124>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	2201      	movs	r2, #1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	659a      	str	r2, [r3, #88]	; 0x58
 80030be:	e00b      	b.n	80030d8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	2220      	movs	r2, #32
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2201      	movs	r2, #1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e1b      	ldrb	r3, [r3, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	220c      	movs	r2, #12
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b004      	add	sp, #16
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	fffffefe 	.word	0xfffffefe

080030f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b002      	add	sp, #8
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800311a:	2317      	movs	r3, #23
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2254      	movs	r2, #84	; 0x54
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x24>
 8003130:	2302      	movs	r3, #2
 8003132:	e1c0      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x3a6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2254      	movs	r2, #84	; 0x54
 8003138:	2101      	movs	r1, #1
 800313a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff fd07 	bl	8002b54 <LL_ADC_REG_IsConversionOngoing>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d000      	beq.n	800314c <HAL_ADC_ConfigChannel+0x3c>
 800314a:	e1a3      	b.n	8003494 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d100      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x46>
 8003154:	e143      	b.n	80033de <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	429a      	cmp	r2, r3
 8003160:	d004      	beq.n	800316c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003166:	4ac1      	ldr	r2, [pc, #772]	; (800346c <HAL_ADC_ConfigChannel+0x35c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0019      	movs	r1, r3
 8003176:	0010      	movs	r0, r2
 8003178:	f7ff fc2d 	bl	80029d6 <LL_ADC_REG_SetSequencerChAdd>
 800317c:	e0c9      	b.n	8003312 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	211f      	movs	r1, #31
 8003188:	400b      	ands	r3, r1
 800318a:	210f      	movs	r1, #15
 800318c:	4099      	lsls	r1, r3
 800318e:	000b      	movs	r3, r1
 8003190:	43db      	mvns	r3, r3
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	035b      	lsls	r3, r3, #13
 800319c:	0b5b      	lsrs	r3, r3, #13
 800319e:	d105      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x9c>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	221f      	movs	r2, #31
 80031a8:	4013      	ands	r3, r2
 80031aa:	e098      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	d000      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xa8>
 80031b6:	e091      	b.n	80032dc <HAL_ADC_ConfigChannel+0x1cc>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d000      	beq.n	80031c4 <HAL_ADC_ConfigChannel+0xb4>
 80031c2:	e089      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x1c8>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d000      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0xc0>
 80031ce:	e081      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x1c4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2208      	movs	r2, #8
 80031d6:	4013      	ands	r3, r2
 80031d8:	d000      	beq.n	80031dc <HAL_ADC_ConfigChannel+0xcc>
 80031da:	e079      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x1c0>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2210      	movs	r2, #16
 80031e2:	4013      	ands	r3, r2
 80031e4:	d000      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0xd8>
 80031e6:	e071      	b.n	80032cc <HAL_ADC_ConfigChannel+0x1bc>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2220      	movs	r2, #32
 80031ee:	4013      	ands	r3, r2
 80031f0:	d000      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0xe4>
 80031f2:	e069      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x1b8>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	4013      	ands	r3, r2
 80031fc:	d000      	beq.n	8003200 <HAL_ADC_ConfigChannel+0xf0>
 80031fe:	e061      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x1b4>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	4013      	ands	r3, r2
 8003208:	d000      	beq.n	800320c <HAL_ADC_ConfigChannel+0xfc>
 800320a:	e059      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x1b0>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4013      	ands	r3, r2
 8003216:	d151      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x1ac>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d149      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1a8>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4013      	ands	r3, r2
 800322e:	d141      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x1a4>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4013      	ands	r3, r2
 800323a:	d139      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1a0>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	015b      	lsls	r3, r3, #5
 8003244:	4013      	ands	r3, r2
 8003246:	d131      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x19c>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	019b      	lsls	r3, r3, #6
 8003250:	4013      	ands	r3, r2
 8003252:	d129      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x198>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	01db      	lsls	r3, r3, #7
 800325c:	4013      	ands	r3, r2
 800325e:	d121      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x194>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	4013      	ands	r3, r2
 800326a:	d119      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x190>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	025b      	lsls	r3, r3, #9
 8003274:	4013      	ands	r3, r2
 8003276:	d111      	bne.n	800329c <HAL_ADC_ConfigChannel+0x18c>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	029b      	lsls	r3, r3, #10
 8003280:	4013      	ands	r3, r2
 8003282:	d109      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x188>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	02db      	lsls	r3, r3, #11
 800328c:	4013      	ands	r3, r2
 800328e:	d001      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x184>
 8003290:	2312      	movs	r3, #18
 8003292:	e024      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 8003294:	2300      	movs	r3, #0
 8003296:	e022      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 8003298:	2311      	movs	r3, #17
 800329a:	e020      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 800329c:	2310      	movs	r3, #16
 800329e:	e01e      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032a0:	230f      	movs	r3, #15
 80032a2:	e01c      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032a4:	230e      	movs	r3, #14
 80032a6:	e01a      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032a8:	230d      	movs	r3, #13
 80032aa:	e018      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032ac:	230c      	movs	r3, #12
 80032ae:	e016      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032b0:	230b      	movs	r3, #11
 80032b2:	e014      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032b4:	230a      	movs	r3, #10
 80032b6:	e012      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032b8:	2309      	movs	r3, #9
 80032ba:	e010      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032bc:	2308      	movs	r3, #8
 80032be:	e00e      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032c0:	2307      	movs	r3, #7
 80032c2:	e00c      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032c4:	2306      	movs	r3, #6
 80032c6:	e00a      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e008      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e006      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032d0:	2303      	movs	r3, #3
 80032d2:	e004      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e002      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ce>
 80032dc:	2300      	movs	r3, #0
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	6852      	ldr	r2, [r2, #4]
 80032e2:	201f      	movs	r0, #31
 80032e4:	4002      	ands	r2, r0
 80032e6:	4093      	lsls	r3, r2
 80032e8:	000a      	movs	r2, r1
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d808      	bhi.n	8003312 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	001a      	movs	r2, r3
 800330e:	f7ff fb42 	bl	8002996 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	001a      	movs	r2, r3
 8003320:	f7ff fb7c 	bl	8002a1c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db00      	blt.n	800332e <HAL_ADC_ConfigChannel+0x21e>
 800332c:	e0bc      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff faf5 	bl	8002920 <LL_ADC_GetCommonPathInternalCh>
 8003336:	0003      	movs	r3, r0
 8003338:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_ADC_ConfigChannel+0x364>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d122      	bne.n	800338a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800334c:	d11d      	bne.n	800338a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	0412      	lsls	r2, r2, #16
 8003354:	4313      	orrs	r3, r2
 8003356:	4a46      	ldr	r2, [pc, #280]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 8003358:	0019      	movs	r1, r3
 800335a:	0010      	movs	r0, r2
 800335c:	f7ff facc 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003360:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_ADC_ConfigChannel+0x368>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4945      	ldr	r1, [pc, #276]	; (800347c <HAL_ADC_ConfigChannel+0x36c>)
 8003366:	0018      	movs	r0, r3
 8003368:	f7fc fecc 	bl	8000104 <__udivsi3>
 800336c:	0003      	movs	r3, r0
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	0013      	movs	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	189b      	adds	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800337a:	e002      	b.n	8003382 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003388:	e08e      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <HAL_ADC_ConfigChannel+0x370>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10e      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x2a2>
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	045b      	lsls	r3, r3, #17
 800339a:	4013      	ands	r3, r2
 800339c:	d109      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0452      	lsls	r2, r2, #17
 80033a4:	4313      	orrs	r3, r2
 80033a6:	4a32      	ldr	r2, [pc, #200]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 80033a8:	0019      	movs	r1, r3
 80033aa:	0010      	movs	r0, r2
 80033ac:	f7ff faa4 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 80033b0:	e07a      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a33      	ldr	r2, [pc, #204]	; (8003484 <HAL_ADC_ConfigChannel+0x374>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d000      	beq.n	80033be <HAL_ADC_ConfigChannel+0x2ae>
 80033bc:	e074      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	03db      	lsls	r3, r3, #15
 80033c4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80033c6:	d000      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x2ba>
 80033c8:	e06e      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	03d2      	lsls	r2, r2, #15
 80033d0:	4313      	orrs	r3, r2
 80033d2:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 80033d4:	0019      	movs	r1, r3
 80033d6:	0010      	movs	r0, r2
 80033d8:	f7ff fa8e 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 80033dc:	e064      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d004      	beq.n	80033f4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033ee:	4a1f      	ldr	r2, [pc, #124]	; (800346c <HAL_ADC_ConfigChannel+0x35c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d107      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0019      	movs	r1, r3
 80033fe:	0010      	movs	r0, r2
 8003400:	f7ff fafa 	bl	80029f8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	da4d      	bge.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff fa86 	bl	8002920 <LL_ADC_GetCommonPathInternalCh>
 8003414:	0003      	movs	r3, r0
 8003416:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <HAL_ADC_ConfigChannel+0x364>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_ADC_ConfigChannel+0x378>)
 8003426:	4013      	ands	r3, r2
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f7ff fa63 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 8003432:	e039      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_ADC_ConfigChannel+0x370>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4a12      	ldr	r2, [pc, #72]	; (800348c <HAL_ADC_ConfigChannel+0x37c>)
 8003442:	4013      	ands	r3, r2
 8003444:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 8003446:	0019      	movs	r1, r3
 8003448:	0010      	movs	r0, r2
 800344a:	f7ff fa55 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 800344e:	e02b      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_ADC_ConfigChannel+0x374>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d126      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <HAL_ADC_ConfigChannel+0x380>)
 800345e:	4013      	ands	r3, r2
 8003460:	4a03      	ldr	r2, [pc, #12]	; (8003470 <HAL_ADC_ConfigChannel+0x360>)
 8003462:	0019      	movs	r1, r3
 8003464:	0010      	movs	r0, r2
 8003466:	f7ff fa47 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 800346a:	e01d      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x398>
 800346c:	80000004 	.word	0x80000004
 8003470:	40012708 	.word	0x40012708
 8003474:	b0001000 	.word	0xb0001000
 8003478:	20000008 	.word	0x20000008
 800347c:	00030d40 	.word	0x00030d40
 8003480:	b8004000 	.word	0xb8004000
 8003484:	b4002000 	.word	0xb4002000
 8003488:	ff7fffff 	.word	0xff7fffff
 800348c:	feffffff 	.word	0xfeffffff
 8003490:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	2220      	movs	r2, #32
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034a0:	2317      	movs	r3, #23
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2254      	movs	r2, #84	; 0x54
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80034b0:	2317      	movs	r3, #23
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b006      	add	sp, #24
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)

080034c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff fb0b 	bl	8002aec <LL_ADC_IsEnabled>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d000      	beq.n	80034dc <ADC_Enable+0x1c>
 80034da:	e069      	b.n	80035b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4a36      	ldr	r2, [pc, #216]	; (80035bc <ADC_Enable+0xfc>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	d00d      	beq.n	8003504 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	2210      	movs	r2, #16
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2201      	movs	r2, #1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e056      	b.n	80035b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff facb 	bl	8002aa4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <ADC_Enable+0x100>)
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff fa05 	bl	8002920 <LL_ADC_GetCommonPathInternalCh>
 8003516:	0002      	movs	r2, r0
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	4013      	ands	r3, r2
 800351e:	d00f      	beq.n	8003540 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <ADC_Enable+0x104>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4928      	ldr	r1, [pc, #160]	; (80035c8 <ADC_Enable+0x108>)
 8003526:	0018      	movs	r0, r3
 8003528:	f7fc fdec 	bl	8000104 <__udivsi3>
 800352c:	0003      	movs	r3, r0
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003532:	e002      	b.n	800353a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3b01      	subs	r3, #1
 8003538:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f9      	bne.n	8003534 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7e5b      	ldrb	r3, [r3, #25]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d033      	beq.n	80035b0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003548:	f7ff f992 	bl	8002870 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003550:	e027      	b.n	80035a2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff fac8 	bl	8002aec <LL_ADC_IsEnabled>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d104      	bne.n	800356a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff fa9d 	bl	8002aa4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800356a:	f7ff f981 	bl	8002870 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d914      	bls.n	80035a2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	2b01      	cmp	r3, #1
 8003584:	d00d      	beq.n	80035a2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	2210      	movs	r2, #16
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003596:	2201      	movs	r2, #1
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d1d0      	bne.n	8003552 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	80000017 	.word	0x80000017
 80035c0:	40012708 	.word	0x40012708
 80035c4:	20000008 	.word	0x20000008
 80035c8:	00030d40 	.word	0x00030d40

080035cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff fa98 	bl	8002b0e <LL_ADC_IsDisableOngoing>
 80035de:	0003      	movs	r3, r0
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff fa80 	bl	8002aec <LL_ADC_IsEnabled>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d046      	beq.n	800367e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d143      	bne.n	800367e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2205      	movs	r2, #5
 80035fe:	4013      	ands	r3, r2
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10d      	bne.n	8003620 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff fa5d 	bl	8002ac8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2203      	movs	r2, #3
 8003614:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003616:	f7ff f92b 	bl	8002870 <HAL_GetTick>
 800361a:	0003      	movs	r3, r0
 800361c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800361e:	e028      	b.n	8003672 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	2210      	movs	r2, #16
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2201      	movs	r2, #1
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e021      	b.n	8003680 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800363c:	f7ff f918 	bl	8002870 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d913      	bls.n	8003672 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d00d      	beq.n	8003672 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	2210      	movs	r2, #16
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2201      	movs	r2, #1
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e006      	b.n	8003680 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2201      	movs	r2, #1
 800367a:	4013      	ands	r3, r2
 800367c:	d1de      	bne.n	800363c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}

08003688 <LL_ADC_IsEnabled>:
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <LL_ADC_IsEnabled+0x18>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <LL_ADC_IsEnabled+0x1a>
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}

080036aa <LL_ADC_IsCalibrationOnGoing>:
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0fdb      	lsrs	r3, r3, #31
 80036b8:	07da      	lsls	r2, r3, #31
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	429a      	cmp	r2, r3
 80036c0:	d101      	bne.n	80036c6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2254      	movs	r2, #84	; 0x54
 80036e0:	5c9b      	ldrb	r3, [r3, r2]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADCEx_Calibration_Start+0x1a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e06c      	b.n	80037c4 <HAL_ADCEx_Calibration_Start+0xf4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2254      	movs	r2, #84	; 0x54
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80036f2:	2317      	movs	r3, #23
 80036f4:	18fc      	adds	r4, r7, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ff67 	bl	80035cc <ADC_Disable>
 80036fe:	0003      	movs	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0018      	movs	r0, r3
 8003708:	f7ff ffbe 	bl	8003688 <LL_ADC_IsEnabled>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d14c      	bne.n	80037aa <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_ADCEx_Calibration_Start+0xfc>)
 8003716:	4013      	ands	r3, r2
 8003718:	2202      	movs	r2, #2
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2203      	movs	r2, #3
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2103      	movs	r1, #3
 8003738:	438a      	bics	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0609      	lsls	r1, r1, #24
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800374e:	e014      	b.n	800377a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <HAL_ADCEx_Calibration_Start+0x100>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d90d      	bls.n	800377a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	2212      	movs	r2, #18
 8003764:	4393      	bics	r3, r2
 8003766:	2210      	movs	r2, #16
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2254      	movs	r2, #84	; 0x54
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e024      	b.n	80037c4 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	0018      	movs	r0, r3
 8003780:	f7ff ff93 	bl	80036aa <LL_ADC_IsCalibrationOnGoing>
 8003784:	1e03      	subs	r3, r0, #0
 8003786:	d1e3      	bne.n	8003750 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68d9      	ldr	r1, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	2203      	movs	r2, #3
 800379e:	4393      	bics	r3, r2
 80037a0:	2201      	movs	r2, #1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
 80037a8:	e005      	b.n	80037b6 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	2210      	movs	r2, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2254      	movs	r2, #84	; 0x54
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80037be:	2317      	movs	r3, #23
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	781b      	ldrb	r3, [r3, #0]
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b007      	add	sp, #28
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	fffffefd 	.word	0xfffffefd
 80037d0:	0002f1ff 	.word	0x0002f1ff

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	0002      	movs	r2, r0
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b7f      	cmp	r3, #127	; 0x7f
 80037e6:	d809      	bhi.n	80037fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	001a      	movs	r2, r3
 80037ee:	231f      	movs	r3, #31
 80037f0:	401a      	ands	r2, r3
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_EnableIRQ+0x30>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	4091      	lsls	r1, r2
 80037f8:	000a      	movs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	0002      	movs	r2, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b7f      	cmp	r3, #127	; 0x7f
 800381c:	d828      	bhi.n	8003870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800381e:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <__NVIC_SetPriority+0xd4>)
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b25b      	sxtb	r3, r3
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	33c0      	adds	r3, #192	; 0xc0
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	589b      	ldr	r3, [r3, r2]
 800382e:	1dfa      	adds	r2, r7, #7
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	0011      	movs	r1, r2
 8003834:	2203      	movs	r2, #3
 8003836:	400a      	ands	r2, r1
 8003838:	00d2      	lsls	r2, r2, #3
 800383a:	21ff      	movs	r1, #255	; 0xff
 800383c:	4091      	lsls	r1, r2
 800383e:	000a      	movs	r2, r1
 8003840:	43d2      	mvns	r2, r2
 8003842:	401a      	ands	r2, r3
 8003844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	401a      	ands	r2, r3
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	0018      	movs	r0, r3
 8003854:	2303      	movs	r3, #3
 8003856:	4003      	ands	r3, r0
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800385c:	481f      	ldr	r0, [pc, #124]	; (80038dc <__NVIC_SetPriority+0xd4>)
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b25b      	sxtb	r3, r3
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	430a      	orrs	r2, r1
 8003868:	33c0      	adds	r3, #192	; 0xc0
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800386e:	e031      	b.n	80038d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <__NVIC_SetPriority+0xd8>)
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0019      	movs	r1, r3
 8003878:	230f      	movs	r3, #15
 800387a:	400b      	ands	r3, r1
 800387c:	3b08      	subs	r3, #8
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3306      	adds	r3, #6
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	3304      	adds	r3, #4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	1dfa      	adds	r2, r7, #7
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	0011      	movs	r1, r2
 8003890:	2203      	movs	r2, #3
 8003892:	400a      	ands	r2, r1
 8003894:	00d2      	lsls	r2, r2, #3
 8003896:	21ff      	movs	r1, #255	; 0xff
 8003898:	4091      	lsls	r1, r2
 800389a:	000a      	movs	r2, r1
 800389c:	43d2      	mvns	r2, r2
 800389e:	401a      	ands	r2, r3
 80038a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	22ff      	movs	r2, #255	; 0xff
 80038a8:	401a      	ands	r2, r3
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	0018      	movs	r0, r3
 80038b0:	2303      	movs	r3, #3
 80038b2:	4003      	ands	r3, r0
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <__NVIC_SetPriority+0xd8>)
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	001c      	movs	r4, r3
 80038c0:	230f      	movs	r3, #15
 80038c2:	4023      	ands	r3, r4
 80038c4:	3b08      	subs	r3, #8
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	430a      	orrs	r2, r1
 80038ca:	3306      	adds	r3, #6
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	18c3      	adds	r3, r0, r3
 80038d0:	3304      	adds	r3, #4
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b003      	add	sp, #12
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	045b      	lsls	r3, r3, #17
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d301      	bcc.n	80038fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f8:	2301      	movs	r3, #1
 80038fa:	e010      	b.n	800391e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <SysTick_Config+0x44>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	3a01      	subs	r2, #1
 8003902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003904:	2301      	movs	r3, #1
 8003906:	425b      	negs	r3, r3
 8003908:	2103      	movs	r1, #3
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff ff7c 	bl	8003808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <SysTick_Config+0x44>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <SysTick_Config+0x44>)
 8003918:	2207      	movs	r2, #7
 800391a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	e000e010 	.word	0xe000e010

0800392c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	210f      	movs	r1, #15
 8003938:	187b      	adds	r3, r7, r1
 800393a:	1c02      	adds	r2, r0, #0
 800393c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	187b      	adds	r3, r7, r1
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b25b      	sxtb	r3, r3
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ff5d 	bl	8003808 <__NVIC_SetPriority>
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b004      	add	sp, #16
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	0002      	movs	r2, r0
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	0018      	movs	r0, r3
 800396a:	f7ff ff33 	bl	80037d4 <__NVIC_EnableIRQ>
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff ffaf 	bl	80038e4 <SysTick_Config>
 8003986:	0003      	movs	r3, r0
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399e:	e147      	b.n	8003c30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4091      	lsls	r1, r2
 80039aa:	000a      	movs	r2, r1
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d100      	bne.n	80039b8 <HAL_GPIO_Init+0x28>
 80039b6:	e138      	b.n	8003c2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2203      	movs	r2, #3
 80039be:	4013      	ands	r3, r2
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d005      	beq.n	80039d0 <HAL_GPIO_Init+0x40>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d130      	bne.n	8003a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	409a      	lsls	r2, r3
 80039de:	0013      	movs	r3, r2
 80039e0:	43da      	mvns	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	0013      	movs	r3, r2
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a06:	2201      	movs	r2, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	401a      	ands	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2203      	movs	r2, #3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d017      	beq.n	8003a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	0013      	movs	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2203      	movs	r2, #3
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d123      	bne.n	8003ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	0092      	lsls	r2, r2, #2
 8003a84:	58d3      	ldr	r3, [r2, r3]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	43da      	mvns	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2107      	movs	r1, #7
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	0092      	lsls	r2, r2, #2
 8003abe:	6939      	ldr	r1, [r7, #16]
 8003ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	0013      	movs	r3, r2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	23c0      	movs	r3, #192	; 0xc0
 8003afc:	029b      	lsls	r3, r3, #10
 8003afe:	4013      	ands	r3, r2
 8003b00:	d100      	bne.n	8003b04 <HAL_GPIO_Init+0x174>
 8003b02:	e092      	b.n	8003c2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b04:	4a50      	ldr	r2, [pc, #320]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3318      	adds	r3, #24
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	589b      	ldr	r3, [r3, r2]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4013      	ands	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	0013      	movs	r3, r2
 8003b20:	43da      	mvns	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	23a0      	movs	r3, #160	; 0xa0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x1ca>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a45      	ldr	r2, [pc, #276]	; (8003c4c <HAL_GPIO_Init+0x2bc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x1c6>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <HAL_GPIO_Init+0x2c0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x1c2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a43      	ldr	r2, [pc, #268]	; (8003c54 <HAL_GPIO_Init+0x2c4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x1be>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x1cc>
 8003b4e:	2305      	movs	r3, #5
 8003b50:	e004      	b.n	8003b5c <HAL_GPIO_Init+0x1cc>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_Init+0x1cc>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_GPIO_Init+0x1cc>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	2103      	movs	r1, #3
 8003b60:	400a      	ands	r2, r1
 8003b62:	00d2      	lsls	r2, r2, #3
 8003b64:	4093      	lsls	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b6c:	4936      	ldr	r1, [pc, #216]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3318      	adds	r3, #24
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b7a:	4a33      	ldr	r2, [pc, #204]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	58d3      	ldr	r3, [r2, r3]
 8003b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	43da      	mvns	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	025b      	lsls	r3, r3, #9
 8003b94:	4013      	ands	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ba0:	4929      	ldr	r1, [pc, #164]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003baa:	2384      	movs	r3, #132	; 0x84
 8003bac:	58d3      	ldr	r3, [r2, r3]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	029b      	lsls	r3, r3, #10
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bce:	491e      	ldr	r1, [pc, #120]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003bd0:	2284      	movs	r2, #132	; 0x84
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	035b      	lsls	r3, r3, #13
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	039b      	lsls	r3, r3, #14
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <HAL_GPIO_Init+0x2b8>)
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	40da      	lsrs	r2, r3
 8003c38:	1e13      	subs	r3, r2, #0
 8003c3a:	d000      	beq.n	8003c3e <HAL_GPIO_Init+0x2ae>
 8003c3c:	e6b0      	b.n	80039a0 <HAL_GPIO_Init+0x10>
  }
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b006      	add	sp, #24
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021800 	.word	0x40021800
 8003c4c:	50000400 	.word	0x50000400
 8003c50:	50000800 	.word	0x50000800
 8003c54:	50000c00 	.word	0x50000c00

08003c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	000a      	movs	r2, r1
 8003c62:	1cbb      	adds	r3, r7, #2
 8003c64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	1cba      	adds	r2, r7, #2
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e003      	b.n	8003c84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7c:	230f      	movs	r3, #15
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c84:	230f      	movs	r3, #15
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	0008      	movs	r0, r1
 8003c9c:	0011      	movs	r1, r2
 8003c9e:	1cbb      	adds	r3, r7, #2
 8003ca0:	1c02      	adds	r2, r0, #0
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	1c7b      	adds	r3, r7, #1
 8003ca6:	1c0a      	adds	r2, r1, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003caa:	1c7b      	adds	r3, r7, #1
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb2:	1cbb      	adds	r3, r7, #2
 8003cb4:	881a      	ldrh	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cba:	e003      	b.n	8003cc4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cbc:	1cbb      	adds	r3, r7, #2
 8003cbe:	881a      	ldrh	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	1dba      	adds	r2, r7, #6
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d008      	beq.n	8003cf6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ce6:	1dba      	adds	r2, r7, #6
 8003ce8:	8812      	ldrh	r2, [r2, #0]
 8003cea:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003cec:	1dbb      	adds	r3, r7, #6
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f005 fa7c 	bl	80091ee <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	1dba      	adds	r2, r7, #6
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d008      	beq.n	8003d14 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d04:	1dba      	adds	r2, r7, #6
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d0a:	1dbb      	adds	r3, r7, #6
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f005 fa5e 	bl	80091d0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021800 	.word	0x40021800

08003d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e082      	b.n	8003e38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2241      	movs	r2, #65	; 0x41
 8003d36:	5c9b      	ldrb	r3, [r3, r2]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2240      	movs	r2, #64	; 0x40
 8003d42:	2100      	movs	r1, #0
 8003d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f007 fadf 	bl	800b30c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2241      	movs	r2, #65	; 0x41
 8003d52:	2124      	movs	r1, #36	; 0x24
 8003d54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	438a      	bics	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4934      	ldr	r1, [pc, #208]	; (8003e40 <HAL_I2C_Init+0x120>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4931      	ldr	r1, [pc, #196]	; (8003e44 <HAL_I2C_Init+0x124>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d108      	bne.n	8003d9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	0209      	lsls	r1, r1, #8
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	e007      	b.n	8003dae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2184      	movs	r1, #132	; 0x84
 8003da8:	0209      	lsls	r1, r1, #8
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d104      	bne.n	8003dc0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	491f      	ldr	r1, [pc, #124]	; (8003e48 <HAL_I2C_Init+0x128>)
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	491a      	ldr	r1, [pc, #104]	; (8003e44 <HAL_I2C_Init+0x124>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69d9      	ldr	r1, [r3, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2241      	movs	r2, #65	; 0x41
 8003e24:	2120      	movs	r1, #32
 8003e26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2242      	movs	r2, #66	; 0x42
 8003e32:	2100      	movs	r1, #0
 8003e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	f0ffffff 	.word	0xf0ffffff
 8003e44:	ffff7fff 	.word	0xffff7fff
 8003e48:	02008000 	.word	0x02008000

08003e4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	000c      	movs	r4, r1
 8003e56:	0010      	movs	r0, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	1c22      	adds	r2, r4, #0
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	2308      	movs	r3, #8
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	1c02      	adds	r2, r0, #0
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	1dbb      	adds	r3, r7, #6
 8003e6c:	1c0a      	adds	r2, r1, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2241      	movs	r2, #65	; 0x41
 8003e74:	5c9b      	ldrb	r3, [r3, r2]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d000      	beq.n	8003e7e <HAL_I2C_Mem_Write+0x32>
 8003e7c:	e10c      	b.n	8004098 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_I2C_Mem_Write+0x42>
 8003e84:	232c      	movs	r3, #44	; 0x2c
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0ff      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2240      	movs	r2, #64	; 0x40
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_I2C_Mem_Write+0x5c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e0f8      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	2101      	movs	r1, #1
 8003eae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fe fcde 	bl	8002870 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	0219      	lsls	r1, r3, #8
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2319      	movs	r3, #25
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f000 fb0b 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0e3      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2241      	movs	r2, #65	; 0x41
 8003ed6:	2121      	movs	r1, #33	; 0x21
 8003ed8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2242      	movs	r2, #66	; 0x42
 8003ede:	2140      	movs	r1, #64	; 0x40
 8003ee0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	222c      	movs	r2, #44	; 0x2c
 8003ef2:	18ba      	adds	r2, r7, r2
 8003ef4:	8812      	ldrh	r2, [r2, #0]
 8003ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003efe:	1dbb      	adds	r3, r7, #6
 8003f00:	881c      	ldrh	r4, [r3, #0]
 8003f02:	2308      	movs	r3, #8
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	230a      	movs	r3, #10
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	8819      	ldrh	r1, [r3, #0]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	0023      	movs	r3, r4
 8003f1a:	f000 f9f9 	bl	8004310 <I2C_RequestMemoryWrite>
 8003f1e:	1e03      	subs	r3, r0, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2240      	movs	r2, #64	; 0x40
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0b5      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2bff      	cmp	r3, #255	; 0xff
 8003f36:	d911      	bls.n	8003f5c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	045c      	lsls	r4, r3, #17
 8003f48:	230a      	movs	r3, #10
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	8819      	ldrh	r1, [r3, #0]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	2300      	movs	r3, #0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	0023      	movs	r3, r4
 8003f56:	f000 fbf7 	bl	8004748 <I2C_TransferConfig>
 8003f5a:	e012      	b.n	8003f82 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	049c      	lsls	r4, r3, #18
 8003f70:	230a      	movs	r3, #10
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	8819      	ldrh	r1, [r3, #0]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	0023      	movs	r3, r4
 8003f7e:	f000 fbe3 	bl	8004748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 fae8 	bl	800455e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f8e:	1e03      	subs	r3, r0, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e081      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03a      	beq.n	8004046 <HAL_I2C_Mem_Write+0x1fa>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d136      	bne.n	8004046 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	f000 fa7b 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e053      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2bff      	cmp	r3, #255	; 0xff
 8003ffa:	d911      	bls.n	8004020 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	b2da      	uxtb	r2, r3
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	045c      	lsls	r4, r3, #17
 800400c:	230a      	movs	r3, #10
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	8819      	ldrh	r1, [r3, #0]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	0023      	movs	r3, r4
 800401a:	f000 fb95 	bl	8004748 <I2C_TransferConfig>
 800401e:	e012      	b.n	8004046 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	b2da      	uxtb	r2, r3
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	049c      	lsls	r4, r3, #18
 8004034:	230a      	movs	r3, #10
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	8819      	ldrh	r1, [r3, #0]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	2300      	movs	r3, #0
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	0023      	movs	r3, r4
 8004042:	f000 fb81 	bl	8004748 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d198      	bne.n	8003f82 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 fac0 	bl	80045dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e01a      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2220      	movs	r2, #32
 800406a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	490b      	ldr	r1, [pc, #44]	; (80040a4 <HAL_I2C_Mem_Write+0x258>)
 8004078:	400a      	ands	r2, r1
 800407a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2241      	movs	r2, #65	; 0x41
 8004080:	2120      	movs	r1, #32
 8004082:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2242      	movs	r2, #66	; 0x42
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b007      	add	sp, #28
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	fe00e800 	.word	0xfe00e800

080040a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	000c      	movs	r4, r1
 80040b2:	0010      	movs	r0, r2
 80040b4:	0019      	movs	r1, r3
 80040b6:	230a      	movs	r3, #10
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	1c22      	adds	r2, r4, #0
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	2308      	movs	r3, #8
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	1c02      	adds	r2, r0, #0
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	1dbb      	adds	r3, r7, #6
 80040c8:	1c0a      	adds	r2, r1, #0
 80040ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2241      	movs	r2, #65	; 0x41
 80040d0:	5c9b      	ldrb	r3, [r3, r2]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d000      	beq.n	80040da <HAL_I2C_Mem_Read+0x32>
 80040d8:	e110      	b.n	80042fc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_I2C_Mem_Read+0x42>
 80040e0:	232c      	movs	r3, #44	; 0x2c
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	0092      	lsls	r2, r2, #2
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e103      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_I2C_Mem_Read+0x5c>
 8004100:	2302      	movs	r3, #2
 8004102:	e0fc      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	2101      	movs	r1, #1
 800410a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800410c:	f7fe fbb0 	bl	8002870 <HAL_GetTick>
 8004110:	0003      	movs	r3, r0
 8004112:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	0219      	lsls	r1, r3, #8
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2319      	movs	r3, #25
 8004120:	2201      	movs	r2, #1
 8004122:	f000 f9dd 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004126:	1e03      	subs	r3, r0, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0e7      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2241      	movs	r2, #65	; 0x41
 8004132:	2122      	movs	r1, #34	; 0x22
 8004134:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2242      	movs	r2, #66	; 0x42
 800413a:	2140      	movs	r1, #64	; 0x40
 800413c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	222c      	movs	r2, #44	; 0x2c
 800414e:	18ba      	adds	r2, r7, r2
 8004150:	8812      	ldrh	r2, [r2, #0]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415a:	1dbb      	adds	r3, r7, #6
 800415c:	881c      	ldrh	r4, [r3, #0]
 800415e:	2308      	movs	r3, #8
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	230a      	movs	r3, #10
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	8819      	ldrh	r1, [r3, #0]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	0023      	movs	r3, r4
 8004176:	f000 f92f 	bl	80043d8 <I2C_RequestMemoryRead>
 800417a:	1e03      	subs	r3, r0, #0
 800417c:	d005      	beq.n	800418a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2240      	movs	r2, #64	; 0x40
 8004182:	2100      	movs	r1, #0
 8004184:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e0b9      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2bff      	cmp	r3, #255	; 0xff
 8004192:	d911      	bls.n	80041b8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	045c      	lsls	r4, r3, #17
 80041a4:	230a      	movs	r3, #10
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	8819      	ldrh	r1, [r3, #0]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <HAL_I2C_Mem_Read+0x260>)
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	0023      	movs	r3, r4
 80041b2:	f000 fac9 	bl	8004748 <I2C_TransferConfig>
 80041b6:	e012      	b.n	80041de <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	049c      	lsls	r4, r3, #18
 80041cc:	230a      	movs	r3, #10
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	8819      	ldrh	r1, [r3, #0]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	4b4c      	ldr	r3, [pc, #304]	; (8004308 <HAL_I2C_Mem_Read+0x260>)
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	0023      	movs	r3, r4
 80041da:	f000 fab5 	bl	8004748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	0013      	movs	r3, r2
 80041e8:	2200      	movs	r2, #0
 80041ea:	2104      	movs	r1, #4
 80041ec:	f000 f978 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e082      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d03a      	beq.n	80042aa <HAL_I2C_Mem_Read+0x202>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d136      	bne.n	80042aa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	0013      	movs	r3, r2
 8004246:	2200      	movs	r2, #0
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	f000 f949 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e053      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2bff      	cmp	r3, #255	; 0xff
 800425e:	d911      	bls.n	8004284 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	b2da      	uxtb	r2, r3
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	045c      	lsls	r4, r3, #17
 8004270:	230a      	movs	r3, #10
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	8819      	ldrh	r1, [r3, #0]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	0023      	movs	r3, r4
 800427e:	f000 fa63 	bl	8004748 <I2C_TransferConfig>
 8004282:	e012      	b.n	80042aa <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	b2da      	uxtb	r2, r3
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	049c      	lsls	r4, r3, #18
 8004298:	230a      	movs	r3, #10
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	8819      	ldrh	r1, [r3, #0]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0023      	movs	r3, r4
 80042a6:	f000 fa4f 	bl	8004748 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d194      	bne.n	80041de <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f98e 	bl	80045dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e01a      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	490c      	ldr	r1, [pc, #48]	; (800430c <HAL_I2C_Mem_Read+0x264>)
 80042dc:	400a      	ands	r2, r1
 80042de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2241      	movs	r2, #65	; 0x41
 80042e4:	2120      	movs	r1, #32
 80042e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2242      	movs	r2, #66	; 0x42
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	2100      	movs	r1, #0
 80042f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b007      	add	sp, #28
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	80002400 	.word	0x80002400
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8004310:	b5b0      	push	{r4, r5, r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	000c      	movs	r4, r1
 800431a:	0010      	movs	r0, r2
 800431c:	0019      	movs	r1, r3
 800431e:	250a      	movs	r5, #10
 8004320:	197b      	adds	r3, r7, r5
 8004322:	1c22      	adds	r2, r4, #0
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	2308      	movs	r3, #8
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	1c02      	adds	r2, r0, #0
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	1dbb      	adds	r3, r7, #6
 8004330:	1c0a      	adds	r2, r1, #0
 8004332:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004334:	1dbb      	adds	r3, r7, #6
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	045c      	lsls	r4, r3, #17
 800433e:	197b      	adds	r3, r7, r5
 8004340:	8819      	ldrh	r1, [r3, #0]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <I2C_RequestMemoryWrite+0xc4>)
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	0023      	movs	r3, r4
 800434a:	f000 f9fd 	bl	8004748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	0018      	movs	r0, r3
 8004356:	f000 f902 	bl	800455e <I2C_WaitOnTXISFlagUntilTimeout>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d001      	beq.n	8004362 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e033      	b.n	80043ca <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004362:	1dbb      	adds	r3, r7, #6
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800436a:	2308      	movs	r3, #8
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
 8004378:	e019      	b.n	80043ae <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800437a:	2308      	movs	r3, #8
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	b29b      	uxth	r3, r3
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	6a39      	ldr	r1, [r7, #32]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	0018      	movs	r0, r3
 8004394:	f000 f8e3 	bl	800455e <I2C_WaitOnTXISFlagUntilTimeout>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d001      	beq.n	80043a0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e014      	b.n	80043ca <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a0:	2308      	movs	r3, #8
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a3a      	ldr	r2, [r7, #32]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	0013      	movs	r3, r2
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	f000 f890 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d001      	beq.n	80043c8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bdb0      	pop	{r4, r5, r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	80002000 	.word	0x80002000

080043d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80043d8:	b5b0      	push	{r4, r5, r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	000c      	movs	r4, r1
 80043e2:	0010      	movs	r0, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	250a      	movs	r5, #10
 80043e8:	197b      	adds	r3, r7, r5
 80043ea:	1c22      	adds	r2, r4, #0
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	2308      	movs	r3, #8
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	1c02      	adds	r2, r0, #0
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	1dbb      	adds	r3, r7, #6
 80043f8:	1c0a      	adds	r2, r1, #0
 80043fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043fc:	1dbb      	adds	r3, r7, #6
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	197b      	adds	r3, r7, r5
 8004404:	8819      	ldrh	r1, [r3, #0]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <I2C_RequestMemoryRead+0xc0>)
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	f000 f99b 	bl	8004748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	6a39      	ldr	r1, [r7, #32]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f8a0 	bl	800455e <I2C_WaitOnTXISFlagUntilTimeout>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d001      	beq.n	8004426 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e033      	b.n	800448e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800442e:	2308      	movs	r3, #8
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28
 800443c:	e019      	b.n	8004472 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800443e:	2308      	movs	r3, #8
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	b29b      	uxth	r3, r3
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	6a39      	ldr	r1, [r7, #32]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f881 	bl	800455e <I2C_WaitOnTXISFlagUntilTimeout>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e014      	b.n	800448e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004464:	2308      	movs	r3, #8
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004472:	6a3a      	ldr	r2, [r7, #32]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	0013      	movs	r3, r2
 800447c:	2200      	movs	r2, #0
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	f000 f82e 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004484:	1e03      	subs	r3, r0, #0
 8004486:	d001      	beq.n	800448c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b004      	add	sp, #16
 8004494:	bdb0      	pop	{r4, r5, r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	80002000 	.word	0x80002000

0800449c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2202      	movs	r2, #2
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d103      	bne.n	80044ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2201      	movs	r2, #1
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d007      	beq.n	80044d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2101      	movs	r1, #1
 80044d4:	430a      	orrs	r2, r1
 80044d6:	619a      	str	r2, [r3, #24]
  }
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	1dfb      	adds	r3, r7, #7
 80044ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f0:	e021      	b.n	8004536 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	d01e      	beq.n	8004536 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7fe f9ba 	bl	8002870 <HAL_GetTick>
 80044fc:	0002      	movs	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d113      	bne.n	8004536 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	2220      	movs	r2, #32
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2241      	movs	r2, #65	; 0x41
 800451e:	2120      	movs	r1, #32
 8004520:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2242      	movs	r2, #66	; 0x42
 8004526:	2100      	movs	r1, #0
 8004528:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2240      	movs	r2, #64	; 0x40
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e00f      	b.n	8004556 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	425a      	negs	r2, r3
 8004546:	4153      	adcs	r3, r2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	001a      	movs	r2, r3
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0ce      	beq.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}

0800455e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800456a:	e02b      	b.n	80045c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 f86e 	bl	8004654 <I2C_IsAcknowledgeFailed>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e029      	b.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3301      	adds	r3, #1
 8004584:	d01e      	beq.n	80045c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe f973 	bl	8002870 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	2220      	movs	r2, #32
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2241      	movs	r2, #65	; 0x41
 80045ac:	2120      	movs	r1, #32
 80045ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2242      	movs	r2, #66	; 0x42
 80045b4:	2100      	movs	r1, #0
 80045b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2240      	movs	r2, #64	; 0x40
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d1cc      	bne.n	800456c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e8:	e028      	b.n	800463c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f82f 	bl	8004654 <I2C_IsAcknowledgeFailed>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e026      	b.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fe f937 	bl	8002870 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d113      	bne.n	800463c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	2220      	movs	r2, #32
 800461a:	431a      	orrs	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2241      	movs	r2, #65	; 0x41
 8004624:	2120      	movs	r1, #32
 8004626:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2242      	movs	r2, #66	; 0x42
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2240      	movs	r2, #64	; 0x40
 8004634:	2100      	movs	r1, #0
 8004636:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e007      	b.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2220      	movs	r2, #32
 8004644:	4013      	ands	r3, r2
 8004646:	2b20      	cmp	r3, #32
 8004648:	d1cf      	bne.n	80045ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b004      	add	sp, #16
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2210      	movs	r2, #16
 8004668:	4013      	ands	r3, r2
 800466a:	2b10      	cmp	r3, #16
 800466c:	d164      	bne.n	8004738 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	049b      	lsls	r3, r3, #18
 8004678:	401a      	ands	r2, r3
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	049b      	lsls	r3, r3, #18
 800467e:	429a      	cmp	r2, r3
 8004680:	d02b      	beq.n	80046da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	01c9      	lsls	r1, r1, #7
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004694:	e021      	b.n	80046da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	d01e      	beq.n	80046da <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7fe f8e8 	bl	8002870 <HAL_GetTick>
 80046a0:	0002      	movs	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <I2C_IsAcknowledgeFailed+0x5e>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d113      	bne.n	80046da <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	2220      	movs	r2, #32
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2241      	movs	r2, #65	; 0x41
 80046c2:	2120      	movs	r1, #32
 80046c4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2242      	movs	r2, #66	; 0x42
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2240      	movs	r2, #64	; 0x40
 80046d2:	2100      	movs	r1, #0
 80046d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e02f      	b.n	800473a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2220      	movs	r2, #32
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d1d6      	bne.n	8004696 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2210      	movs	r2, #16
 80046ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7ff fece 	bl	800449c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	490e      	ldr	r1, [pc, #56]	; (8004744 <I2C_IsAcknowledgeFailed+0xf0>)
 800470c:	400a      	ands	r2, r1
 800470e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	2204      	movs	r2, #4
 8004716:	431a      	orrs	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2241      	movs	r2, #65	; 0x41
 8004720:	2120      	movs	r1, #32
 8004722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2242      	movs	r2, #66	; 0x42
 8004728:	2100      	movs	r1, #0
 800472a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2240      	movs	r2, #64	; 0x40
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b004      	add	sp, #16
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	fe00e800 	.word	0xfe00e800

08004748 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	0008      	movs	r0, r1
 8004752:	0011      	movs	r1, r2
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	240a      	movs	r4, #10
 8004758:	193b      	adds	r3, r7, r4
 800475a:	1c02      	adds	r2, r0, #0
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	2009      	movs	r0, #9
 8004760:	183b      	adds	r3, r7, r0
 8004762:	1c0a      	adds	r2, r1, #0
 8004764:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	0d51      	lsrs	r1, r2, #21
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	00d2      	lsls	r2, r2, #3
 8004774:	400a      	ands	r2, r1
 8004776:	490e      	ldr	r1, [pc, #56]	; (80047b0 <I2C_TransferConfig+0x68>)
 8004778:	430a      	orrs	r2, r1
 800477a:	43d2      	mvns	r2, r2
 800477c:	401a      	ands	r2, r3
 800477e:	0011      	movs	r1, r2
 8004780:	193b      	adds	r3, r7, r4
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	059b      	lsls	r3, r3, #22
 8004786:	0d9a      	lsrs	r2, r3, #22
 8004788:	183b      	adds	r3, r7, r0
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	0418      	lsls	r0, r3, #16
 800478e:	23ff      	movs	r3, #255	; 0xff
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	4003      	ands	r3, r0
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	431a      	orrs	r2, r3
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b005      	add	sp, #20
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	03ff63ff 	.word	0x03ff63ff

080047b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2241      	movs	r2, #65	; 0x41
 80047c2:	5c9b      	ldrb	r3, [r3, r2]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d138      	bne.n	800483c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e032      	b.n	800483e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	2101      	movs	r1, #1
 80047de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2241      	movs	r2, #65	; 0x41
 80047e4:	2124      	movs	r1, #36	; 0x24
 80047e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2101      	movs	r1, #1
 80047f4:	438a      	bics	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4911      	ldr	r1, [pc, #68]	; (8004848 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2101      	movs	r1, #1
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2241      	movs	r2, #65	; 0x41
 800482c:	2120      	movs	r1, #32
 800482e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2240      	movs	r2, #64	; 0x40
 8004834:	2100      	movs	r1, #0
 8004836:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	ffffefff 	.word	0xffffefff

0800484c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2241      	movs	r2, #65	; 0x41
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	d139      	bne.n	80048d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2240      	movs	r2, #64	; 0x40
 8004866:	5c9b      	ldrb	r3, [r3, r2]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800486c:	2302      	movs	r3, #2
 800486e:	e033      	b.n	80048d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	2101      	movs	r1, #1
 8004876:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2241      	movs	r2, #65	; 0x41
 800487c:	2124      	movs	r1, #36	; 0x24
 800487e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2101      	movs	r1, #1
 800488c:	438a      	bics	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a11      	ldr	r2, [pc, #68]	; (80048e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2241      	movs	r2, #65	; 0x41
 80048c6:	2120      	movs	r1, #32
 80048c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2240      	movs	r2, #64	; 0x40
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
  }
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b004      	add	sp, #16
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	fffff0ff 	.word	0xfffff0ff

080048e4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	0049      	lsls	r1, r1, #1
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	000a      	movs	r2, r1
 800490a:	1cfb      	adds	r3, r7, #3
 800490c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_PWR_EnterSTOPMode+0x68>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2207      	movs	r2, #7
 800491a:	4393      	bics	r3, r2
 800491c:	001a      	movs	r2, r3
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_PWR_EnterSTOPMode+0x68>)
 8004920:	2101      	movs	r1, #1
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e005      	b.n	8004934 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <HAL_PWR_EnterSTOPMode+0x68>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_PWR_EnterSTOPMode+0x68>)
 800492e:	2107      	movs	r1, #7
 8004930:	438a      	bics	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004934:	4b0d      	ldr	r3, [pc, #52]	; (800496c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_PWR_EnterSTOPMode+0x6c>)
 800493a:	2104      	movs	r1, #4
 800493c:	430a      	orrs	r2, r1
 800493e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004940:	1cfb      	adds	r3, r7, #3
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004948:	bf30      	wfi
 800494a:	e002      	b.n	8004952 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800494c:	bf40      	sev
    __WFE();
 800494e:	bf20      	wfe
    __WFE();
 8004950:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004958:	2104      	movs	r1, #4
 800495a:	438a      	bics	r2, r1
 800495c:	611a      	str	r2, [r3, #16]
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b002      	add	sp, #8
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	40007000 	.word	0x40007000
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800497e:	4013      	ands	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d11f      	bne.n	80049d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	0013      	movs	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	189b      	adds	r3, r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4912      	ldr	r1, [pc, #72]	; (80049ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fb fbae 	bl	8000104 <__udivsi3>
 80049a8:	0003      	movs	r3, r0
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ae:	e008      	b.n	80049c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e001      	b.n	80049c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e009      	b.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	401a      	ands	r2, r3
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d0ed      	beq.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	40007000 	.word	0x40007000
 80049e4:	fffff9ff 	.word	0xfffff9ff
 80049e8:	20000008 	.word	0x20000008
 80049ec:	000f4240 	.word	0x000f4240

080049f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	23e0      	movs	r3, #224	; 0xe0
 80049fa:	01db      	lsls	r3, r3, #7
 80049fc:	4013      	ands	r3, r2
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e304      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	d100      	bne.n	8004a26 <HAL_RCC_OscConfig+0x1e>
 8004a24:	e07c      	b.n	8004b20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4bc3      	ldr	r3, [pc, #780]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2238      	movs	r2, #56	; 0x38
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4bc0      	ldr	r3, [pc, #768]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2203      	movs	r2, #3
 8004a36:	4013      	ands	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d102      	bne.n	8004a46 <HAL_RCC_OscConfig+0x3e>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4bb9      	ldr	r3, [pc, #740]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	4013      	ands	r3, r2
 8004a56:	d062      	beq.n	8004b1e <HAL_RCC_OscConfig+0x116>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d15e      	bne.n	8004b1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e2df      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	025b      	lsls	r3, r3, #9
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x78>
 8004a70:	4bb0      	ldr	r3, [pc, #704]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4baf      	ldr	r3, [pc, #700]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	0249      	lsls	r1, r1, #9
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e020      	b.n	8004ac2 <HAL_RCC_OscConfig+0xba>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	23a0      	movs	r3, #160	; 0xa0
 8004a86:	02db      	lsls	r3, r3, #11
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d10e      	bne.n	8004aaa <HAL_RCC_OscConfig+0xa2>
 8004a8c:	4ba9      	ldr	r3, [pc, #676]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4ba8      	ldr	r3, [pc, #672]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	02c9      	lsls	r1, r1, #11
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	4ba6      	ldr	r3, [pc, #664]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4ba5      	ldr	r3, [pc, #660]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	0249      	lsls	r1, r1, #9
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e00b      	b.n	8004ac2 <HAL_RCC_OscConfig+0xba>
 8004aaa:	4ba2      	ldr	r3, [pc, #648]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4ba1      	ldr	r3, [pc, #644]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ab0:	49a1      	ldr	r1, [pc, #644]	; (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	4b9f      	ldr	r3, [pc, #636]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b9e      	ldr	r3, [pc, #632]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004abc:	499f      	ldr	r1, [pc, #636]	; (8004d3c <HAL_RCC_OscConfig+0x334>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d014      	beq.n	8004af4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd fed1 	bl	8002870 <HAL_GetTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fecc 	bl	8002870 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e29e      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae6:	4b93      	ldr	r3, [pc, #588]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	029b      	lsls	r3, r3, #10
 8004aee:	4013      	ands	r3, r2
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xcc>
 8004af2:	e015      	b.n	8004b20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd febc 	bl	8002870 <HAL_GetTick>
 8004af8:	0003      	movs	r3, r0
 8004afa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afe:	f7fd feb7 	bl	8002870 <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e289      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b10:	4b88      	ldr	r3, [pc, #544]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0xf6>
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2202      	movs	r2, #2
 8004b26:	4013      	ands	r3, r2
 8004b28:	d100      	bne.n	8004b2c <HAL_RCC_OscConfig+0x124>
 8004b2a:	e099      	b.n	8004c60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b2c:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2238      	movs	r2, #56	; 0x38
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b36:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d102      	bne.n	8004b4c <HAL_RCC_OscConfig+0x144>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d002      	beq.n	8004b52 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d135      	bne.n	8004bbe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b52:	4b78      	ldr	r3, [pc, #480]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCC_OscConfig+0x162>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e25c      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6a:	4b72      	ldr	r3, [pc, #456]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4a74      	ldr	r2, [pc, #464]	; (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	0019      	movs	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	021a      	lsls	r2, r3, #8
 8004b7a:	4b6e      	ldr	r3, [pc, #440]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b86:	4b6b      	ldr	r3, [pc, #428]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6e      	ldr	r2, [pc, #440]	; (8004d44 <HAL_RCC_OscConfig+0x33c>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	4b67      	ldr	r3, [pc, #412]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b9a:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	0adb      	lsrs	r3, r3, #11
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	4a68      	ldr	r2, [pc, #416]	; (8004d48 <HAL_RCC_OscConfig+0x340>)
 8004ba6:	40da      	lsrs	r2, r3
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <HAL_RCC_OscConfig+0x344>)
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bac:	4b68      	ldr	r3, [pc, #416]	; (8004d50 <HAL_RCC_OscConfig+0x348>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fd fe01 	bl	80027b8 <HAL_InitTick>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d051      	beq.n	8004c5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e232      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d030      	beq.n	8004c28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a5e      	ldr	r2, [pc, #376]	; (8004d44 <HAL_RCC_OscConfig+0x33c>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	4b57      	ldr	r3, [pc, #348]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004bda:	4b56      	ldr	r3, [pc, #344]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b55      	ldr	r3, [pc, #340]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	0049      	lsls	r1, r1, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fe42 	bl	8002870 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fe3d 	bl	8002870 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e20f      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c04:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c10:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a4a      	ldr	r2, [pc, #296]	; (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	e01b      	b.n	8004c60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c2e:	4949      	ldr	r1, [pc, #292]	; (8004d54 <HAL_RCC_OscConfig+0x34c>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fe1c 	bl	8002870 <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3e:	f7fd fe17 	bl	8002870 <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1e9      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c50:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x236>
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2208      	movs	r2, #8
 8004c66:	4013      	ands	r3, r2
 8004c68:	d047      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c6a:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2238      	movs	r2, #56	; 0x38
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b18      	cmp	r3, #24
 8004c74:	d10a      	bne.n	8004c8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d03c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d138      	bne.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e1cb      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c98:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fde6 	bl	8002870 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fd fde1 	bl	8002870 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e1b3      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d0f1      	beq.n	8004caa <HAL_RCC_OscConfig+0x2a2>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fdcc 	bl	8002870 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd fdc7 	bl	8002870 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e199      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cf0:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d1f1      	bne.n	8004cde <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4013      	ands	r3, r2
 8004d02:	d100      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2fe>
 8004d04:	e0c6      	b.n	8004e94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2238      	movs	r2, #56	; 0x38
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d11e      	bne.n	8004d58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	2202      	movs	r2, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	d100      	bne.n	8004d26 <HAL_RCC_OscConfig+0x31e>
 8004d24:	e0b6      	b.n	8004e94 <HAL_RCC_OscConfig+0x48c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d000      	beq.n	8004d30 <HAL_RCC_OscConfig+0x328>
 8004d2e:	e0b1      	b.n	8004e94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e177      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
 8004d34:	40021000 	.word	0x40021000
 8004d38:	fffeffff 	.word	0xfffeffff
 8004d3c:	fffbffff 	.word	0xfffbffff
 8004d40:	ffff80ff 	.word	0xffff80ff
 8004d44:	ffffc7ff 	.word	0xffffc7ff
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	20000008 	.word	0x20000008
 8004d50:	20000000 	.word	0x20000000
 8004d54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d58:	4bb4      	ldr	r3, [pc, #720]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	055b      	lsls	r3, r3, #21
 8004d60:	4013      	ands	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x360>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x362>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d011      	beq.n	8004d92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	4baf      	ldr	r3, [pc, #700]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d72:	4bae      	ldr	r3, [pc, #696]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004d74:	2180      	movs	r1, #128	; 0x80
 8004d76:	0549      	lsls	r1, r1, #21
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d7c:	4bab      	ldr	r3, [pc, #684]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	055b      	lsls	r3, r3, #21
 8004d84:	4013      	ands	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d92:	4ba7      	ldr	r3, [pc, #668]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9e:	4ba4      	ldr	r3, [pc, #656]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4ba3      	ldr	r3, [pc, #652]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0049      	lsls	r1, r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004dac:	f7fd fd60 	bl	8002870 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd fd5b 	bl	8002870 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e12d      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	4b99      	ldr	r3, [pc, #612]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x3e2>
 8004ddc:	4b93      	ldr	r3, [pc, #588]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004dde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004de0:	4b92      	ldr	r3, [pc, #584]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004de2:	2101      	movs	r1, #1
 8004de4:	430a      	orrs	r2, r1
 8004de6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x41c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x404>
 8004df2:	4b8e      	ldr	r3, [pc, #568]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004df4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004df6:	4b8d      	ldr	r3, [pc, #564]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004df8:	2104      	movs	r1, #4
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dfe:	4b8b      	ldr	r3, [pc, #556]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e02:	4b8a      	ldr	r3, [pc, #552]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e04:	2101      	movs	r1, #1
 8004e06:	430a      	orrs	r2, r1
 8004e08:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x41c>
 8004e0c:	4b87      	ldr	r3, [pc, #540]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e10:	4b86      	ldr	r3, [pc, #536]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e12:	2101      	movs	r1, #1
 8004e14:	438a      	bics	r2, r1
 8004e16:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e18:	4b84      	ldr	r3, [pc, #528]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e1c:	4b83      	ldr	r3, [pc, #524]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e1e:	2104      	movs	r1, #4
 8004e20:	438a      	bics	r2, r1
 8004e22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d014      	beq.n	8004e56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fd20 	bl	8002870 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e34:	e009      	b.n	8004e4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fd fd1b 	bl	8002870 <HAL_GetTick>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	4a7c      	ldr	r2, [pc, #496]	; (8005034 <HAL_RCC_OscConfig+0x62c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0ec      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4a:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x42e>
 8004e54:	e013      	b.n	8004e7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fd fd0b 	bl	8002870 <HAL_GetTick>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e5e:	e009      	b.n	8004e74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd fd06 	bl	8002870 <HAL_GetTick>
 8004e64:	0002      	movs	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	4a72      	ldr	r2, [pc, #456]	; (8005034 <HAL_RCC_OscConfig+0x62c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0d7      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e74:	4b6d      	ldr	r3, [pc, #436]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e7e:	231f      	movs	r3, #31
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b68      	ldr	r3, [pc, #416]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	4b67      	ldr	r3, [pc, #412]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004e8e:	496a      	ldr	r1, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x630>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d100      	bne.n	8004e9e <HAL_RCC_OscConfig+0x496>
 8004e9c:	e0c1      	b.n	8005022 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e9e:	4b63      	ldr	r3, [pc, #396]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2238      	movs	r2, #56	; 0x38
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d100      	bne.n	8004eac <HAL_RCC_OscConfig+0x4a4>
 8004eaa:	e081      	b.n	8004fb0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d156      	bne.n	8004f62 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb4:	4b5d      	ldr	r3, [pc, #372]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4b5c      	ldr	r3, [pc, #368]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004eba:	4960      	ldr	r1, [pc, #384]	; (800503c <HAL_RCC_OscConfig+0x634>)
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fcd6 	bl	8002870 <HAL_GetTick>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fd fcd1 	bl	8002870 <HAL_GetTick>
 8004ece:	0002      	movs	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0a3      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004edc:	4b53      	ldr	r3, [pc, #332]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	049b      	lsls	r3, r3, #18
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee8:	4b50      	ldr	r3, [pc, #320]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a54      	ldr	r2, [pc, #336]	; (8005040 <HAL_RCC_OscConfig+0x638>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f14:	431a      	orrs	r2, r3
 8004f16:	4b45      	ldr	r3, [pc, #276]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1c:	4b43      	ldr	r3, [pc, #268]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	0449      	lsls	r1, r1, #17
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f2a:	4b40      	ldr	r3, [pc, #256]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b3f      	ldr	r3, [pc, #252]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	0549      	lsls	r1, r1, #21
 8004f34:	430a      	orrs	r2, r1
 8004f36:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd fc9a 	bl	8002870 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd fc95 	bl	8002870 <HAL_GetTick>
 8004f46:	0002      	movs	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e067      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f54:	4b35      	ldr	r3, [pc, #212]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	049b      	lsls	r3, r3, #18
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x53a>
 8004f60:	e05f      	b.n	8005022 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f62:	4b32      	ldr	r3, [pc, #200]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b31      	ldr	r3, [pc, #196]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f68:	4934      	ldr	r1, [pc, #208]	; (800503c <HAL_RCC_OscConfig+0x634>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	4b2e      	ldr	r3, [pc, #184]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f74:	2103      	movs	r1, #3
 8004f76:	438a      	bics	r2, r1
 8004f78:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	4b2b      	ldr	r3, [pc, #172]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004f80:	4930      	ldr	r1, [pc, #192]	; (8005044 <HAL_RCC_OscConfig+0x63c>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fd fc73 	bl	8002870 <HAL_GetTick>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fd fc6e 	bl	8002870 <HAL_GetTick>
 8004f94:	0002      	movs	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e040      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa2:	4b22      	ldr	r3, [pc, #136]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	049b      	lsls	r3, r3, #18
 8004faa:	4013      	ands	r3, r2
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x588>
 8004fae:	e038      	b.n	8005022 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e033      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <HAL_RCC_OscConfig+0x624>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d126      	bne.n	800501e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2270      	movs	r2, #112	; 0x70
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d11f      	bne.n	800501e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	23fe      	movs	r3, #254	; 0xfe
 8004fe2:	01db      	lsls	r3, r3, #7
 8004fe4:	401a      	ands	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d116      	bne.n	800501e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	23f8      	movs	r3, #248	; 0xf8
 8004ff4:	039b      	lsls	r3, r3, #14
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d10e      	bne.n	800501e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	23e0      	movs	r3, #224	; 0xe0
 8005004:	051b      	lsls	r3, r3, #20
 8005006:	401a      	ands	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d106      	bne.n	800501e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	0f5b      	lsrs	r3, r3, #29
 8005014:	075a      	lsls	r2, r3, #29
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d001      	beq.n	8005022 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b008      	add	sp, #32
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	40007000 	.word	0x40007000
 8005034:	00001388 	.word	0x00001388
 8005038:	efffffff 	.word	0xefffffff
 800503c:	feffffff 	.word	0xfeffffff
 8005040:	11c1808c 	.word	0x11c1808c
 8005044:	eefeffff 	.word	0xeefeffff

08005048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0e9      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2207      	movs	r2, #7
 8005062:	4013      	ands	r3, r2
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d91e      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b73      	ldr	r3, [pc, #460]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2207      	movs	r2, #7
 8005070:	4393      	bics	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	4b70      	ldr	r3, [pc, #448]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800507c:	f7fd fbf8 	bl	8002870 <HAL_GetTick>
 8005080:	0003      	movs	r3, r0
 8005082:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005084:	e009      	b.n	800509a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005086:	f7fd fbf3 	bl	8002870 <HAL_GetTick>
 800508a:	0002      	movs	r2, r0
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	4a6a      	ldr	r2, [pc, #424]	; (800523c <HAL_RCC_ClockConfig+0x1f4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e0ca      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800509a:	4b67      	ldr	r3, [pc, #412]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2207      	movs	r2, #7
 80050a0:	4013      	ands	r3, r2
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d1ee      	bne.n	8005086 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2202      	movs	r2, #2
 80050ae:	4013      	ands	r3, r2
 80050b0:	d015      	beq.n	80050de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2204      	movs	r2, #4
 80050b8:	4013      	ands	r3, r2
 80050ba:	d006      	beq.n	80050ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050bc:	4b60      	ldr	r3, [pc, #384]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b5f      	ldr	r3, [pc, #380]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80050c2:	21e0      	movs	r1, #224	; 0xe0
 80050c4:	01c9      	lsls	r1, r1, #7
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ca:	4b5d      	ldr	r3, [pc, #372]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	4a5d      	ldr	r2, [pc, #372]	; (8005244 <HAL_RCC_ClockConfig+0x1fc>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	0019      	movs	r1, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b59      	ldr	r3, [pc, #356]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2201      	movs	r2, #1
 80050e4:	4013      	ands	r3, r2
 80050e6:	d057      	beq.n	8005198 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f0:	4b53      	ldr	r3, [pc, #332]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	4013      	ands	r3, r2
 80050fa:	d12b      	bne.n	8005154 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e097      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d107      	bne.n	8005118 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005108:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	049b      	lsls	r3, r3, #18
 8005110:	4013      	ands	r3, r2
 8005112:	d11f      	bne.n	8005154 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e08b      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d107      	bne.n	8005130 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005120:	4b47      	ldr	r3, [pc, #284]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4013      	ands	r3, r2
 800512a:	d113      	bne.n	8005154 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e07f      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d106      	bne.n	8005146 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005138:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 800513a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513c:	2202      	movs	r2, #2
 800513e:	4013      	ands	r3, r2
 8005140:	d108      	bne.n	8005154 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e074      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005146:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	2202      	movs	r2, #2
 800514c:	4013      	ands	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e06d      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005154:	4b3a      	ldr	r3, [pc, #232]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2207      	movs	r2, #7
 800515a:	4393      	bics	r3, r2
 800515c:	0019      	movs	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b37      	ldr	r3, [pc, #220]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005168:	f7fd fb82 	bl	8002870 <HAL_GetTick>
 800516c:	0003      	movs	r3, r0
 800516e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005170:	e009      	b.n	8005186 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005172:	f7fd fb7d 	bl	8002870 <HAL_GetTick>
 8005176:	0002      	movs	r2, r0
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	4a2f      	ldr	r2, [pc, #188]	; (800523c <HAL_RCC_ClockConfig+0x1f4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e054      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	4b2e      	ldr	r3, [pc, #184]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2238      	movs	r2, #56	; 0x38
 800518c:	401a      	ands	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	429a      	cmp	r2, r3
 8005196:	d1ec      	bne.n	8005172 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005198:	4b27      	ldr	r3, [pc, #156]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2207      	movs	r2, #7
 800519e:	4013      	ands	r3, r2
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d21e      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b24      	ldr	r3, [pc, #144]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2207      	movs	r2, #7
 80051ac:	4393      	bics	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	4b21      	ldr	r3, [pc, #132]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fb5a 	bl	8002870 <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051c0:	e009      	b.n	80051d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c2:	f7fd fb55 	bl	8002870 <HAL_GetTick>
 80051c6:	0002      	movs	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_RCC_ClockConfig+0x1f4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e02c      	b.n	8005230 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2207      	movs	r2, #7
 80051dc:	4013      	ands	r3, r2
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2204      	movs	r2, #4
 80051ea:	4013      	ands	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	4a15      	ldr	r2, [pc, #84]	; (8005248 <HAL_RCC_ClockConfig+0x200>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	0019      	movs	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005202:	f000 f829 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005206:	0001      	movs	r1, r0
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <HAL_RCC_ClockConfig+0x1f8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	220f      	movs	r2, #15
 8005210:	401a      	ands	r2, r3
 8005212:	4b0e      	ldr	r3, [pc, #56]	; (800524c <HAL_RCC_ClockConfig+0x204>)
 8005214:	0092      	lsls	r2, r2, #2
 8005216:	58d3      	ldr	r3, [r2, r3]
 8005218:	221f      	movs	r2, #31
 800521a:	4013      	ands	r3, r2
 800521c:	000a      	movs	r2, r1
 800521e:	40da      	lsrs	r2, r3
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_ClockConfig+0x208>)
 8005222:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCC_ClockConfig+0x20c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	0018      	movs	r0, r3
 800522a:	f7fd fac5 	bl	80027b8 <HAL_InitTick>
 800522e:	0003      	movs	r3, r0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b004      	add	sp, #16
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40022000 	.word	0x40022000
 800523c:	00001388 	.word	0x00001388
 8005240:	40021000 	.word	0x40021000
 8005244:	fffff0ff 	.word	0xfffff0ff
 8005248:	ffff8fff 	.word	0xffff8fff
 800524c:	0800bb24 	.word	0x0800bb24
 8005250:	20000008 	.word	0x20000008
 8005254:	20000000 	.word	0x20000000

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800525e:	4b3c      	ldr	r3, [pc, #240]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2238      	movs	r2, #56	; 0x38
 8005264:	4013      	ands	r3, r2
 8005266:	d10f      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005268:	4b39      	ldr	r3, [pc, #228]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	0adb      	lsrs	r3, r3, #11
 800526e:	2207      	movs	r2, #7
 8005270:	4013      	ands	r3, r2
 8005272:	2201      	movs	r2, #1
 8005274:	409a      	lsls	r2, r3
 8005276:	0013      	movs	r3, r2
 8005278:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	4835      	ldr	r0, [pc, #212]	; (8005354 <HAL_RCC_GetSysClockFreq+0xfc>)
 800527e:	f7fa ff41 	bl	8000104 <__udivsi3>
 8005282:	0003      	movs	r3, r0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	e05d      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2238      	movs	r2, #56	; 0x38
 800528e:	4013      	ands	r3, r2
 8005290:	2b08      	cmp	r3, #8
 8005292:	d102      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005294:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_RCC_GetSysClockFreq+0x100>)
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e054      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529a:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2238      	movs	r2, #56	; 0x38
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d138      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80052a6:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2203      	movs	r2, #3
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052b0:	4b27      	ldr	r3, [pc, #156]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	2207      	movs	r2, #7
 80052b8:	4013      	ands	r3, r2
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d10d      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4824      	ldr	r0, [pc, #144]	; (8005358 <HAL_RCC_GetSysClockFreq+0x100>)
 80052c8:	f7fa ff1c 	bl	8000104 <__udivsi3>
 80052cc:	0003      	movs	r3, r0
 80052ce:	0019      	movs	r1, r3
 80052d0:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	227f      	movs	r2, #127	; 0x7f
 80052d8:	4013      	ands	r3, r2
 80052da:	434b      	muls	r3, r1
 80052dc:	617b      	str	r3, [r7, #20]
        break;
 80052de:	e00d      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	481c      	ldr	r0, [pc, #112]	; (8005354 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052e4:	f7fa ff0e 	bl	8000104 <__udivsi3>
 80052e8:	0003      	movs	r3, r0
 80052ea:	0019      	movs	r1, r3
 80052ec:	4b18      	ldr	r3, [pc, #96]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	227f      	movs	r2, #127	; 0x7f
 80052f4:	4013      	ands	r3, r2
 80052f6:	434b      	muls	r3, r1
 80052f8:	617b      	str	r3, [r7, #20]
        break;
 80052fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0f5b      	lsrs	r3, r3, #29
 8005302:	2207      	movs	r2, #7
 8005304:	4013      	ands	r3, r2
 8005306:	3301      	adds	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	6978      	ldr	r0, [r7, #20]
 800530e:	f7fa fef9 	bl	8000104 <__udivsi3>
 8005312:	0003      	movs	r3, r0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	e015      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2238      	movs	r2, #56	; 0x38
 800531e:	4013      	ands	r3, r2
 8005320:	2b20      	cmp	r3, #32
 8005322:	d103      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e00b      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <HAL_RCC_GetSysClockFreq+0xf8>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2238      	movs	r2, #56	; 0x38
 8005332:	4013      	ands	r3, r2
 8005334:	2b18      	cmp	r3, #24
 8005336:	d103      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005338:	23fa      	movs	r3, #250	; 0xfa
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e001      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005344:	693b      	ldr	r3, [r7, #16]
}
 8005346:	0018      	movs	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	b006      	add	sp, #24
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	40021000 	.word	0x40021000
 8005354:	00f42400 	.word	0x00f42400
 8005358:	007a1200 	.word	0x007a1200

0800535c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005360:	4b02      	ldr	r3, [pc, #8]	; (800536c <HAL_RCC_GetHCLKFreq+0x10>)
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000008 	.word	0x20000008

08005370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005374:	f7ff fff2 	bl	800535c <HAL_RCC_GetHCLKFreq>
 8005378:	0004      	movs	r4, r0
 800537a:	f7ff fb39 	bl	80049f0 <LL_RCC_GetAPB1Prescaler>
 800537e:	0003      	movs	r3, r0
 8005380:	0b1a      	lsrs	r2, r3, #12
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005384:	0092      	lsls	r2, r2, #2
 8005386:	58d3      	ldr	r3, [r2, r3]
 8005388:	221f      	movs	r2, #31
 800538a:	4013      	ands	r3, r2
 800538c:	40dc      	lsrs	r4, r3
 800538e:	0023      	movs	r3, r4
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	bdb0      	pop	{r4, r5, r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	0800bb64 	.word	0x0800bb64

0800539c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80053a4:	2313      	movs	r3, #19
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ac:	2312      	movs	r3, #18
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	4013      	ands	r3, r2
 80053be:	d100      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80053c0:	e0a3      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c2:	2011      	movs	r0, #17
 80053c4:	183b      	adds	r3, r7, r0
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ca:	4bc3      	ldr	r3, [pc, #780]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	055b      	lsls	r3, r3, #21
 80053d2:	4013      	ands	r3, r2
 80053d4:	d110      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d6:	4bc0      	ldr	r3, [pc, #768]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053da:	4bbf      	ldr	r3, [pc, #764]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	0549      	lsls	r1, r1, #21
 80053e0:	430a      	orrs	r2, r1
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80053e4:	4bbc      	ldr	r3, [pc, #752]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	055b      	lsls	r3, r3, #21
 80053ec:	4013      	ands	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f2:	183b      	adds	r3, r7, r0
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f8:	4bb8      	ldr	r3, [pc, #736]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4bb7      	ldr	r3, [pc, #732]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	0049      	lsls	r1, r1, #1
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005406:	f7fd fa33 	bl	8002870 <HAL_GetTick>
 800540a:	0003      	movs	r3, r0
 800540c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800540e:	e00b      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005410:	f7fd fa2e 	bl	8002870 <HAL_GetTick>
 8005414:	0002      	movs	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d904      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800541e:	2313      	movs	r3, #19
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2203      	movs	r2, #3
 8005424:	701a      	strb	r2, [r3, #0]
        break;
 8005426:	e005      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005428:	4bac      	ldr	r3, [pc, #688]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4013      	ands	r3, r2
 8005432:	d0ed      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005434:	2313      	movs	r3, #19
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d154      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800543e:	4ba6      	ldr	r3, [pc, #664]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005442:	23c0      	movs	r3, #192	; 0xc0
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4013      	ands	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	429a      	cmp	r2, r3
 8005458:	d014      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800545a:	4b9f      	ldr	r3, [pc, #636]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	4aa0      	ldr	r2, [pc, #640]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005460:	4013      	ands	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005464:	4b9c      	ldr	r3, [pc, #624]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005468:	4b9b      	ldr	r3, [pc, #620]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	0249      	lsls	r1, r1, #9
 800546e:	430a      	orrs	r2, r1
 8005470:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005472:	4b99      	ldr	r3, [pc, #612]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005476:	4b98      	ldr	r3, [pc, #608]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005478:	499a      	ldr	r1, [pc, #616]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800547a:	400a      	ands	r2, r1
 800547c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800547e:	4b96      	ldr	r3, [pc, #600]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2201      	movs	r2, #1
 8005488:	4013      	ands	r3, r2
 800548a:	d016      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fd f9f0 	bl	8002870 <HAL_GetTick>
 8005490:	0003      	movs	r3, r0
 8005492:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005494:	e00c      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fd f9eb 	bl	8002870 <HAL_GetTick>
 800549a:	0002      	movs	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	4a91      	ldr	r2, [pc, #580]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d904      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80054a6:	2313      	movs	r3, #19
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	2203      	movs	r2, #3
 80054ac:	701a      	strb	r2, [r3, #0]
            break;
 80054ae:	e004      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b0:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b4:	2202      	movs	r2, #2
 80054b6:	4013      	ands	r3, r2
 80054b8:	d0ed      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80054ba:	2313      	movs	r3, #19
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c4:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	4a85      	ldr	r2, [pc, #532]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d2:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d4:	430a      	orrs	r2, r1
 80054d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054da:	2312      	movs	r3, #18
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	2213      	movs	r2, #19
 80054e0:	18ba      	adds	r2, r7, r2
 80054e2:	7812      	ldrb	r2, [r2, #0]
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e005      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	2312      	movs	r3, #18
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2213      	movs	r2, #19
 80054ee:	18ba      	adds	r2, r7, r2
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054f4:	2311      	movs	r3, #17
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054fe:	4b76      	ldr	r3, [pc, #472]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005502:	4b75      	ldr	r3, [pc, #468]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005504:	4979      	ldr	r1, [pc, #484]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005506:	400a      	ands	r2, r1
 8005508:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	4013      	ands	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005514:	4b70      	ldr	r3, [pc, #448]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	2203      	movs	r2, #3
 800551a:	4393      	bics	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4b6d      	ldr	r3, [pc, #436]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005524:	430a      	orrs	r2, r1
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2202      	movs	r2, #2
 800552e:	4013      	ands	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005532:	4b69      	ldr	r3, [pc, #420]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	220c      	movs	r2, #12
 8005538:	4393      	bics	r3, r2
 800553a:	0019      	movs	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b65      	ldr	r3, [pc, #404]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005542:	430a      	orrs	r2, r1
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	4013      	ands	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005550:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	4a66      	ldr	r2, [pc, #408]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005556:	4013      	ands	r3, r2
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	4b5e      	ldr	r3, [pc, #376]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005560:	430a      	orrs	r2, r1
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4013      	ands	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005570:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	4a5f      	ldr	r2, [pc, #380]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005580:	430a      	orrs	r2, r1
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4013      	ands	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005590:	4b51      	ldr	r3, [pc, #324]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	4a58      	ldr	r2, [pc, #352]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005596:	4013      	ands	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	4b4e      	ldr	r3, [pc, #312]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a0:	430a      	orrs	r2, r1
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ae:	4b4a      	ldr	r3, [pc, #296]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	4a52      	ldr	r2, [pc, #328]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	4b46      	ldr	r3, [pc, #280]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055be:	430a      	orrs	r2, r1
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	01db      	lsls	r3, r3, #7
 80055ca:	4013      	ands	r3, r2
 80055cc:	d015      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ce:	4b42      	ldr	r3, [pc, #264]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	0899      	lsrs	r1, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055dc:	430a      	orrs	r2, r1
 80055de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	05db      	lsls	r3, r3, #23
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d106      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055ec:	4b3a      	ldr	r3, [pc, #232]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	0249      	lsls	r1, r1, #9
 80055f6:	430a      	orrs	r2, r1
 80055f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	031b      	lsls	r3, r3, #12
 8005602:	4013      	ands	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005606:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	2240      	movs	r2, #64	; 0x40
 800560c:	4393      	bics	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005614:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005616:	430a      	orrs	r2, r1
 8005618:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	039b      	lsls	r3, r3, #14
 8005622:	4013      	ands	r3, r2
 8005624:	d016      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005626:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	4a35      	ldr	r2, [pc, #212]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800562c:	4013      	ands	r3, r2
 800562e:	0019      	movs	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005634:	4b28      	ldr	r3, [pc, #160]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005636:	430a      	orrs	r2, r1
 8005638:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	03db      	lsls	r3, r3, #15
 8005642:	429a      	cmp	r2, r3
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	0449      	lsls	r1, r1, #17
 8005650:	430a      	orrs	r2, r1
 8005652:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	03db      	lsls	r3, r3, #15
 800565c:	4013      	ands	r3, r2
 800565e:	d016      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	4a27      	ldr	r2, [pc, #156]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005666:	4013      	ands	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005670:	430a      	orrs	r2, r1
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	045b      	lsls	r3, r3, #17
 800567c:	429a      	cmp	r2, r3
 800567e:	d106      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005680:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005686:	2180      	movs	r1, #128	; 0x80
 8005688:	0449      	lsls	r1, r1, #17
 800568a:	430a      	orrs	r2, r1
 800568c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	2380      	movs	r3, #128	; 0x80
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	4013      	ands	r3, r2
 8005698:	d016      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056aa:	430a      	orrs	r2, r1
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d106      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0249      	lsls	r1, r1, #9
 80056c4:	430a      	orrs	r2, r1
 80056c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80056c8:	2312      	movs	r3, #18
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	781b      	ldrb	r3, [r3, #0]
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b006      	add	sp, #24
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40007000 	.word	0x40007000
 80056e0:	fffffcff 	.word	0xfffffcff
 80056e4:	fffeffff 	.word	0xfffeffff
 80056e8:	00001388 	.word	0x00001388
 80056ec:	efffffff 	.word	0xefffffff
 80056f0:	fffff3ff 	.word	0xfffff3ff
 80056f4:	fff3ffff 	.word	0xfff3ffff
 80056f8:	ffcfffff 	.word	0xffcfffff
 80056fc:	ffffcfff 	.word	0xffffcfff
 8005700:	ffbfffff 	.word	0xffbfffff
 8005704:	feffffff 	.word	0xfeffffff
 8005708:	ffff3fff 	.word	0xffff3fff

0800570c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005714:	230f      	movs	r3, #15
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d100      	bne.n	8005724 <HAL_RTC_Init+0x18>
 8005722:	e080      	b.n	8005826 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2229      	movs	r2, #41	; 0x29
 8005728:	5c9b      	ldrb	r3, [r3, r2]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2228      	movs	r2, #40	; 0x28
 8005734:	2100      	movs	r1, #0
 8005736:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2288      	movs	r2, #136	; 0x88
 800573c:	0212      	lsls	r2, r2, #8
 800573e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f005 fe44 	bl	800b3d0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2229      	movs	r2, #41	; 0x29
 800574c:	2102      	movs	r1, #2
 800574e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	22ca      	movs	r2, #202	; 0xca
 8005756:	625a      	str	r2, [r3, #36]	; 0x24
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2253      	movs	r2, #83	; 0x53
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005760:	250f      	movs	r5, #15
 8005762:	197c      	adds	r4, r7, r5
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fa71 	bl	8005c4e <RTC_EnterInitMode>
 800576c:	0003      	movs	r3, r0
 800576e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8005770:	0028      	movs	r0, r5
 8005772:	183b      	adds	r3, r7, r0
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d148      	bne.n	800580c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	492b      	ldr	r1, [pc, #172]	; (8005834 <HAL_RTC_Init+0x128>)
 8005786:	400a      	ands	r2, r1
 8005788:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6999      	ldr	r1, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6912      	ldr	r2, [r2, #16]
 80057b0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6919      	ldr	r1, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	041a      	lsls	r2, r3, #16
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80057c6:	0005      	movs	r5, r0
 80057c8:	183c      	adds	r4, r7, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	0018      	movs	r0, r3
 80057ce:	f000 fa81 	bl	8005cd4 <RTC_ExitInitMode>
 80057d2:	0003      	movs	r3, r0
 80057d4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80057d6:	197b      	adds	r3, r7, r5
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	00d2      	lsls	r2, r2, #3
 80057ea:	08d2      	lsrs	r2, r2, #3
 80057ec:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6999      	ldr	r1, [r3, #24]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005814:	230f      	movs	r3, #15
 8005816:	18fb      	adds	r3, r7, r3
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2229      	movs	r2, #41	; 0x29
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005826:	230f      	movs	r3, #15
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	781b      	ldrb	r3, [r3, #0]
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bdb0      	pop	{r4, r5, r7, pc}
 8005834:	fb8fffbf 	.word	0xfb8fffbf

08005838 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2228      	movs	r2, #40	; 0x28
 8005848:	5c9b      	ldrb	r3, [r3, r2]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_RTC_SetTime+0x1a>
 800584e:	2302      	movs	r3, #2
 8005850:	e092      	b.n	8005978 <HAL_RTC_SetTime+0x140>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2228      	movs	r2, #40	; 0x28
 8005856:	2101      	movs	r1, #1
 8005858:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2229      	movs	r2, #41	; 0x29
 800585e:	2102      	movs	r1, #2
 8005860:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ca      	movs	r2, #202	; 0xca
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2253      	movs	r2, #83	; 0x53
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005872:	2513      	movs	r5, #19
 8005874:	197c      	adds	r4, r7, r5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0018      	movs	r0, r3
 800587a:	f000 f9e8 	bl	8005c4e <RTC_EnterInitMode>
 800587e:	0003      	movs	r3, r0
 8005880:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005882:	197b      	adds	r3, r7, r5
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d162      	bne.n	8005950 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d125      	bne.n	80058dc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	4013      	ands	r3, r2
 800589a:	d102      	bne.n	80058a2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 fa58 	bl	8005d5c <RTC_ByteToBcd2>
 80058ac:	0003      	movs	r3, r0
 80058ae:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 fa51 	bl	8005d5c <RTC_ByteToBcd2>
 80058ba:	0003      	movs	r3, r0
 80058bc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058be:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	789b      	ldrb	r3, [r3, #2]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fa49 	bl	8005d5c <RTC_ByteToBcd2>
 80058ca:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058cc:	0022      	movs	r2, r4
 80058ce:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	78db      	ldrb	r3, [r3, #3]
 80058d4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e017      	b.n	800590c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	4013      	ands	r3, r2
 80058e6:	d102      	bne.n	80058ee <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005900:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	78db      	ldrb	r3, [r3, #3]
 8005906:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	491b      	ldr	r1, [pc, #108]	; (8005980 <HAL_RTC_SetTime+0x148>)
 8005914:	400a      	ands	r2, r1
 8005916:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4918      	ldr	r1, [pc, #96]	; (8005984 <HAL_RTC_SetTime+0x14c>)
 8005924:	400a      	ands	r2, r1
 8005926:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6999      	ldr	r1, [r3, #24]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005940:	2313      	movs	r3, #19
 8005942:	18fc      	adds	r4, r7, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 f9c4 	bl	8005cd4 <RTC_ExitInitMode>
 800594c:	0003      	movs	r3, r0
 800594e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005958:	2313      	movs	r3, #19
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2229      	movs	r2, #41	; 0x29
 8005966:	2101      	movs	r1, #1
 8005968:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2228      	movs	r2, #40	; 0x28
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

  return status;
 8005972:	2313      	movs	r3, #19
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b006      	add	sp, #24
 800597e:	bdb0      	pop	{r4, r5, r7, pc}
 8005980:	007f7f7f 	.word	0x007f7f7f
 8005984:	fffbffff 	.word	0xfffbffff

08005988 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	045b      	lsls	r3, r3, #17
 80059a6:	0c5a      	lsrs	r2, r3, #17
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a22      	ldr	r2, [pc, #136]	; (8005a3c <HAL_RTC_GetTime+0xb4>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	223f      	movs	r2, #63	; 0x3f
 80059c0:	4013      	ands	r3, r2
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	227f      	movs	r2, #127	; 0x7f
 80059d0:	4013      	ands	r3, r2
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	227f      	movs	r2, #127	; 0x7f
 80059de:	4013      	ands	r3, r2
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	0d9b      	lsrs	r3, r3, #22
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2201      	movs	r2, #1
 80059ee:	4013      	ands	r3, r2
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11a      	bne.n	8005a32 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 f9d3 	bl	8005dac <RTC_Bcd2ToByte>
 8005a06:	0003      	movs	r3, r0
 8005a08:	001a      	movs	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f9ca 	bl	8005dac <RTC_Bcd2ToByte>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	789b      	ldrb	r3, [r3, #2]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 f9c1 	bl	8005dac <RTC_Bcd2ToByte>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b006      	add	sp, #24
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	007f7f7f 	.word	0x007f7f7f

08005a40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2228      	movs	r2, #40	; 0x28
 8005a50:	5c9b      	ldrb	r3, [r3, r2]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_RTC_SetDate+0x1a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e07e      	b.n	8005b58 <HAL_RTC_SetDate+0x118>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2228      	movs	r2, #40	; 0x28
 8005a5e:	2101      	movs	r1, #1
 8005a60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2229      	movs	r2, #41	; 0x29
 8005a66:	2102      	movs	r1, #2
 8005a68:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10e      	bne.n	8005a8e <HAL_RTC_SetDate+0x4e>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	001a      	movs	r2, r3
 8005a76:	2310      	movs	r3, #16
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d008      	beq.n	8005a8e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2210      	movs	r2, #16
 8005a82:	4393      	bics	r3, r2
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	330a      	adds	r3, #10
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11c      	bne.n	8005ace <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	78db      	ldrb	r3, [r3, #3]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 f95f 	bl	8005d5c <RTC_ByteToBcd2>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 f958 	bl	8005d5c <RTC_ByteToBcd2>
 8005aac:	0003      	movs	r3, r0
 8005aae:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ab0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	789b      	ldrb	r3, [r3, #2]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 f950 	bl	8005d5c <RTC_ByteToBcd2>
 8005abc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005abe:	0022      	movs	r2, r4
 8005ac0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e00e      	b.n	8005aec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	78db      	ldrb	r3, [r3, #3]
 8005ad2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ada:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ae0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	22ca      	movs	r2, #202	; 0xca
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2253      	movs	r2, #83	; 0x53
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005afc:	2513      	movs	r5, #19
 8005afe:	197c      	adds	r4, r7, r5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 f8a3 	bl	8005c4e <RTC_EnterInitMode>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005b0c:	0028      	movs	r0, r5
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10c      	bne.n	8005b30 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4910      	ldr	r1, [pc, #64]	; (8005b60 <HAL_RTC_SetDate+0x120>)
 8005b1e:	400a      	ands	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b22:	183c      	adds	r4, r7, r0
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 f8d4 	bl	8005cd4 <RTC_ExitInitMode>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b38:	2313      	movs	r3, #19
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2229      	movs	r2, #41	; 0x29
 8005b46:	2101      	movs	r1, #1
 8005b48:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2228      	movs	r2, #40	; 0x28
 8005b4e:	2100      	movs	r1, #0
 8005b50:	5499      	strb	r1, [r3, r2]

  return status;
 8005b52:	2313      	movs	r3, #19
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	781b      	ldrb	r3, [r3, #0]
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b006      	add	sp, #24
 8005b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b60:	00ffff3f 	.word	0x00ffff3f

08005b64 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4a21      	ldr	r2, [pc, #132]	; (8005bfc <HAL_RTC_GetDate+0x98>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	221f      	movs	r2, #31
 8005b8e:	4013      	ands	r3, r2
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	223f      	movs	r2, #63	; 0x3f
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	0b5b      	lsrs	r3, r3, #13
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2207      	movs	r2, #7
 8005bac:	4013      	ands	r3, r2
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d11a      	bne.n	8005bf0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 f8f4 	bl	8005dac <RTC_Bcd2ToByte>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	001a      	movs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f000 f8eb 	bl	8005dac <RTC_Bcd2ToByte>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	001a      	movs	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 f8e2 	bl	8005dac <RTC_Bcd2ToByte>
 8005be8:	0003      	movs	r3, r0
 8005bea:	001a      	movs	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b006      	add	sp, #24
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	00ffff3f 	.word	0x00ffff3f

08005c00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	21a0      	movs	r1, #160	; 0xa0
 8005c14:	438a      	bics	r2, r1
 8005c16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c18:	f7fc fe2a 	bl	8002870 <HAL_GetTick>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005c20:	e00a      	b.n	8005c38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c22:	f7fc fe25 	bl	8002870 <HAL_GetTick>
 8005c26:	0002      	movs	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	23fa      	movs	r3, #250	; 0xfa
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d901      	bls.n	8005c38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e006      	b.n	8005c46 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	4013      	ands	r3, r2
 8005c42:	d0ee      	beq.n	8005c22 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	0018      	movs	r0, r3
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b004      	add	sp, #16
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005c56:	230f      	movs	r3, #15
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2240      	movs	r2, #64	; 0x40
 8005c66:	4013      	ands	r3, r2
 8005c68:	d12c      	bne.n	8005cc4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	430a      	orrs	r2, r1
 8005c78:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c7a:	f7fc fdf9 	bl	8002870 <HAL_GetTick>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c82:	e014      	b.n	8005cae <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c84:	f7fc fdf4 	bl	8002870 <HAL_GetTick>
 8005c88:	0002      	movs	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad2      	subs	r2, r2, r3
 8005c8e:	200f      	movs	r0, #15
 8005c90:	183b      	adds	r3, r7, r0
 8005c92:	1839      	adds	r1, r7, r0
 8005c94:	7809      	ldrb	r1, [r1, #0]
 8005c96:	7019      	strb	r1, [r3, #0]
 8005c98:	23fa      	movs	r3, #250	; 0xfa
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d906      	bls.n	8005cae <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005ca0:	183b      	adds	r3, r7, r0
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2229      	movs	r2, #41	; 0x29
 8005caa:	2103      	movs	r1, #3
 8005cac:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2240      	movs	r2, #64	; 0x40
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d104      	bne.n	8005cc4 <RTC_EnterInitMode+0x76>
 8005cba:	230f      	movs	r3, #15
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d1df      	bne.n	8005c84 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005cc4:	230f      	movs	r3, #15
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	781b      	ldrb	r3, [r3, #0]
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b004      	add	sp, #16
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cdc:	240f      	movs	r4, #15
 8005cde:	193b      	adds	r3, r7, r4
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ce4:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005cea:	2180      	movs	r1, #128	; 0x80
 8005cec:	438a      	bics	r2, r1
 8005cee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005cf0:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d10d      	bne.n	8005d16 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7ff ff7f 	bl	8005c00 <HAL_RTC_WaitForSynchro>
 8005d02:	1e03      	subs	r3, r0, #0
 8005d04:	d021      	beq.n	8005d4a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2229      	movs	r2, #41	; 0x29
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005d0e:	193b      	adds	r3, r7, r4
 8005d10:	2203      	movs	r2, #3
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	e019      	b.n	8005d4a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	438a      	bics	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff ff6b 	bl	8005c00 <HAL_RTC_WaitForSynchro>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d007      	beq.n	8005d3e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2229      	movs	r2, #41	; 0x29
 8005d32:	2103      	movs	r1, #3
 8005d34:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005d36:	230f      	movs	r3, #15
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d3e:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <RTC_ExitInitMode+0x84>)
 8005d44:	2120      	movs	r1, #32
 8005d46:	430a      	orrs	r2, r1
 8005d48:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005d4a:	230f      	movs	r3, #15
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	781b      	ldrb	r3, [r3, #0]
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b005      	add	sp, #20
 8005d56:	bd90      	pop	{r4, r7, pc}
 8005d58:	40002800 	.word	0x40002800

08005d5c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	0002      	movs	r2, r0
 8005d64:	1dfb      	adds	r3, r7, #7
 8005d66:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005d6c:	230b      	movs	r3, #11
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	1dfa      	adds	r2, r7, #7
 8005d72:	7812      	ldrb	r2, [r2, #0]
 8005d74:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005d76:	e008      	b.n	8005d8a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005d7e:	220b      	movs	r2, #11
 8005d80:	18bb      	adds	r3, r7, r2
 8005d82:	18ba      	adds	r2, r7, r2
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	3a0a      	subs	r2, #10
 8005d88:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005d8a:	210b      	movs	r1, #11
 8005d8c:	187b      	adds	r3, r7, r1
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	d8f1      	bhi.n	8005d78 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	187b      	adds	r3, r7, r1
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b2db      	uxtb	r3, r3
}
 8005da4:	0018      	movs	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b004      	add	sp, #16
 8005daa:	bd80      	pop	{r7, pc}

08005dac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	0002      	movs	r2, r0
 8005db4:	1dfb      	adds	r3, r7, #7
 8005db6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005db8:	1dfb      	adds	r3, r7, #7
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	001a      	movs	r2, r3
 8005dc2:	0013      	movs	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	189b      	adds	r3, r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	1dfb      	adds	r3, r7, #7
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	210f      	movs	r1, #15
 8005dd6:	400b      	ands	r3, r1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	18d3      	adds	r3, r2, r3
 8005ddc:	b2db      	uxtb	r3, r3
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e04a      	b.n	8005e8e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	223d      	movs	r2, #61	; 0x3d
 8005dfc:	5c9b      	ldrb	r3, [r3, r2]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d107      	bne.n	8005e14 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	223c      	movs	r2, #60	; 0x3c
 8005e08:	2100      	movs	r1, #0
 8005e0a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f005 fb1c 	bl	800b44c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	223d      	movs	r2, #61	; 0x3d
 8005e18:	2102      	movs	r1, #2
 8005e1a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	0019      	movs	r1, r3
 8005e26:	0010      	movs	r0, r2
 8005e28:	f000 fade 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2248      	movs	r2, #72	; 0x48
 8005e30:	2101      	movs	r1, #1
 8005e32:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	223e      	movs	r2, #62	; 0x3e
 8005e38:	2101      	movs	r1, #1
 8005e3a:	5499      	strb	r1, [r3, r2]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	223f      	movs	r2, #63	; 0x3f
 8005e40:	2101      	movs	r1, #1
 8005e42:	5499      	strb	r1, [r3, r2]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2240      	movs	r2, #64	; 0x40
 8005e48:	2101      	movs	r1, #1
 8005e4a:	5499      	strb	r1, [r3, r2]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2241      	movs	r2, #65	; 0x41
 8005e50:	2101      	movs	r1, #1
 8005e52:	5499      	strb	r1, [r3, r2]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2242      	movs	r2, #66	; 0x42
 8005e58:	2101      	movs	r1, #1
 8005e5a:	5499      	strb	r1, [r3, r2]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2243      	movs	r2, #67	; 0x43
 8005e60:	2101      	movs	r1, #1
 8005e62:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2244      	movs	r2, #68	; 0x44
 8005e68:	2101      	movs	r1, #1
 8005e6a:	5499      	strb	r1, [r3, r2]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2245      	movs	r2, #69	; 0x45
 8005e70:	2101      	movs	r1, #1
 8005e72:	5499      	strb	r1, [r3, r2]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2246      	movs	r2, #70	; 0x46
 8005e78:	2101      	movs	r1, #1
 8005e7a:	5499      	strb	r1, [r3, r2]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2247      	movs	r2, #71	; 0x47
 8005e80:	2101      	movs	r1, #1
 8005e82:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	223d      	movs	r2, #61	; 0x3d
 8005e88:	2101      	movs	r1, #1
 8005e8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	0018      	movs	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	223d      	movs	r2, #61	; 0x3d
 8005ea4:	5c9b      	ldrb	r3, [r3, r2]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e042      	b.n	8005f36 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	223d      	movs	r2, #61	; 0x3d
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_TIM_Base_Start_IT+0xa8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	05db      	lsls	r3, r3, #23
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d009      	beq.n	8005ef2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <HAL_TIM_Base_Start_IT+0xac>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <HAL_TIM_Base_Start_IT+0xb0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d116      	bne.n	8005f20 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <HAL_TIM_Base_Start_IT+0xb4>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	d016      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x9a>
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	025b      	lsls	r3, r3, #9
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d011      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2101      	movs	r1, #1
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1e:	e008      	b.n	8005f32 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e000      	b.n	8005f34 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b004      	add	sp, #16
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40000400 	.word	0x40000400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	00010007 	.word	0x00010007

08005f50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	438a      	bics	r2, r1
 8005f66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4a0d      	ldr	r2, [pc, #52]	; (8005fa4 <HAL_TIM_Base_Stop_IT+0x54>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	d10d      	bne.n	8005f90 <HAL_TIM_Base_Stop_IT+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	; (8005fa8 <HAL_TIM_Base_Stop_IT+0x58>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_Base_Stop_IT+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	223d      	movs	r2, #61	; 0x3d
 8005f94:	2101      	movs	r1, #1
 8005f96:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b002      	add	sp, #8
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	00001111 	.word	0x00001111
 8005fa8:	00000444 	.word	0x00000444

08005fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d124      	bne.n	800600c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d11d      	bne.n	800600c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	4252      	negs	r2, r2
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f000 f9e2 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e007      	b.n	8006006 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f000 f9d5 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 f9e1 	bl	80063c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2204      	movs	r2, #4
 8006014:	4013      	ands	r3, r2
 8006016:	2b04      	cmp	r3, #4
 8006018:	d125      	bne.n	8006066 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2204      	movs	r2, #4
 8006022:	4013      	ands	r3, r2
 8006024:	2b04      	cmp	r3, #4
 8006026:	d11e      	bne.n	8006066 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2205      	movs	r2, #5
 800602e:	4252      	negs	r2, r2
 8006030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	23c0      	movs	r3, #192	; 0xc0
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4013      	ands	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 f9b5 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 800604e:	e007      	b.n	8006060 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	0018      	movs	r0, r3
 8006054:	f000 f9a8 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f9b4 	bl	80063c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2208      	movs	r2, #8
 800606e:	4013      	ands	r3, r2
 8006070:	2b08      	cmp	r3, #8
 8006072:	d124      	bne.n	80060be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	2208      	movs	r2, #8
 800607c:	4013      	ands	r3, r2
 800607e:	2b08      	cmp	r3, #8
 8006080:	d11d      	bne.n	80060be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2209      	movs	r2, #9
 8006088:	4252      	negs	r2, r2
 800608a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2204      	movs	r2, #4
 8006090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	2203      	movs	r2, #3
 800609a:	4013      	ands	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 f989 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 80060a6:	e007      	b.n	80060b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	0018      	movs	r0, r3
 80060ac:	f000 f97c 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	0018      	movs	r0, r3
 80060b4:	f000 f988 	bl	80063c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2210      	movs	r2, #16
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d125      	bne.n	8006118 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2210      	movs	r2, #16
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d11e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2211      	movs	r2, #17
 80060e0:	4252      	negs	r2, r2
 80060e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2208      	movs	r2, #8
 80060e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
 80060f0:	23c0      	movs	r3, #192	; 0xc0
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4013      	ands	r3, r2
 80060f6:	d004      	beq.n	8006102 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 f95c 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 8006100:	e007      	b.n	8006112 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	0018      	movs	r0, r3
 8006106:	f000 f94f 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	0018      	movs	r0, r3
 800610e:	f000 f95b 	bl	80063c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2201      	movs	r2, #1
 8006120:	4013      	ands	r3, r2
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10f      	bne.n	8006146 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	4013      	ands	r3, r2
 8006130:	2b01      	cmp	r3, #1
 8006132:	d108      	bne.n	8006146 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2202      	movs	r2, #2
 800613a:	4252      	negs	r2, r2
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0018      	movs	r0, r3
 8006142:	f003 f863 	bl	800920c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2280      	movs	r2, #128	; 0x80
 800614e:	4013      	ands	r3, r2
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d10f      	bne.n	8006174 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2280      	movs	r2, #128	; 0x80
 800615c:	4013      	ands	r3, r2
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d108      	bne.n	8006174 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2281      	movs	r2, #129	; 0x81
 8006168:	4252      	negs	r2, r2
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	0018      	movs	r0, r3
 8006170:	f000 facc 	bl	800670c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	401a      	ands	r2, r3
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	429a      	cmp	r2, r3
 8006186:	d10e      	bne.n	80061a6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	4013      	ands	r3, r2
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d107      	bne.n	80061a6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_TIM_IRQHandler+0x260>)
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 fabb 	bl	800671c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d10f      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2240      	movs	r2, #64	; 0x40
 80061bc:	4013      	ands	r3, r2
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d108      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2241      	movs	r2, #65	; 0x41
 80061c8:	4252      	negs	r2, r2
 80061ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	0018      	movs	r0, r3
 80061d0:	f000 f902 	bl	80063d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2220      	movs	r2, #32
 80061dc:	4013      	ands	r3, r2
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d10f      	bne.n	8006202 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d108      	bne.n	8006202 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2221      	movs	r2, #33	; 0x21
 80061f6:	4252      	negs	r2, r2
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 fa7d 	bl	80066fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	46bd      	mov	sp, r7
 8006206:	b002      	add	sp, #8
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	fffffeff 	.word	0xfffffeff

08006210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	223c      	movs	r2, #60	; 0x3c
 800621e:	5c9b      	ldrb	r3, [r3, r2]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIM_ConfigClockSource+0x18>
 8006224:	2302      	movs	r3, #2
 8006226:	e0b7      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x188>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	223c      	movs	r2, #60	; 0x3c
 800622c:	2101      	movs	r1, #1
 800622e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	223d      	movs	r2, #61	; 0x3d
 8006234:	2102      	movs	r1, #2
 8006236:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a57      	ldr	r2, [pc, #348]	; (80063a0 <HAL_TIM_ConfigClockSource+0x190>)
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a56      	ldr	r2, [pc, #344]	; (80063a4 <HAL_TIM_ConfigClockSource+0x194>)
 800624c:	4013      	ands	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2280      	movs	r2, #128	; 0x80
 800625e:	0192      	lsls	r2, r2, #6
 8006260:	4293      	cmp	r3, r2
 8006262:	d040      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0xd6>
 8006264:	2280      	movs	r2, #128	; 0x80
 8006266:	0192      	lsls	r2, r2, #6
 8006268:	4293      	cmp	r3, r2
 800626a:	d900      	bls.n	800626e <HAL_TIM_ConfigClockSource+0x5e>
 800626c:	e088      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	0152      	lsls	r2, r2, #5
 8006272:	4293      	cmp	r3, r2
 8006274:	d100      	bne.n	8006278 <HAL_TIM_ConfigClockSource+0x68>
 8006276:	e085      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
 8006278:	2280      	movs	r2, #128	; 0x80
 800627a:	0152      	lsls	r2, r2, #5
 800627c:	4293      	cmp	r3, r2
 800627e:	d900      	bls.n	8006282 <HAL_TIM_ConfigClockSource+0x72>
 8006280:	e07e      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 8006282:	2b70      	cmp	r3, #112	; 0x70
 8006284:	d018      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0xa8>
 8006286:	d900      	bls.n	800628a <HAL_TIM_ConfigClockSource+0x7a>
 8006288:	e07a      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 800628a:	2b60      	cmp	r3, #96	; 0x60
 800628c:	d04f      	beq.n	800632e <HAL_TIM_ConfigClockSource+0x11e>
 800628e:	d900      	bls.n	8006292 <HAL_TIM_ConfigClockSource+0x82>
 8006290:	e076      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 8006292:	2b50      	cmp	r3, #80	; 0x50
 8006294:	d03b      	beq.n	800630e <HAL_TIM_ConfigClockSource+0xfe>
 8006296:	d900      	bls.n	800629a <HAL_TIM_ConfigClockSource+0x8a>
 8006298:	e072      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d057      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x13e>
 800629e:	d900      	bls.n	80062a2 <HAL_TIM_ConfigClockSource+0x92>
 80062a0:	e06e      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 80062a2:	2b30      	cmp	r3, #48	; 0x30
 80062a4:	d063      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x15e>
 80062a6:	d86b      	bhi.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d060      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x15e>
 80062ac:	d868      	bhi.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d05d      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x15e>
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	d05b      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062b6:	e063      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6899      	ldr	r1, [r3, #8]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f000 f98a 	bl	80065e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2277      	movs	r2, #119	; 0x77
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]
      break;
 80062e4:	e04f      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6899      	ldr	r1, [r3, #8]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f000 f973 	bl	80065e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2180      	movs	r1, #128	; 0x80
 8006306:	01c9      	lsls	r1, r1, #7
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
      break;
 800630c:	e03b      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6859      	ldr	r1, [r3, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	001a      	movs	r2, r3
 800631c:	f000 f8e4 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2150      	movs	r1, #80	; 0x50
 8006326:	0018      	movs	r0, r3
 8006328:	f000 f93e 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 800632c:	e02b      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	001a      	movs	r2, r3
 800633c:	f000 f902 	bl	8006544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2160      	movs	r1, #96	; 0x60
 8006346:	0018      	movs	r0, r3
 8006348:	f000 f92e 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 800634c:	e01b      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6859      	ldr	r1, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	001a      	movs	r2, r3
 800635c:	f000 f8c4 	bl	80064e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2140      	movs	r1, #64	; 0x40
 8006366:	0018      	movs	r0, r3
 8006368:	f000 f91e 	bl	80065a8 <TIM_ITRx_SetConfig>
      break;
 800636c:	e00b      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	0019      	movs	r1, r3
 8006378:	0010      	movs	r0, r2
 800637a:	f000 f915 	bl	80065a8 <TIM_ITRx_SetConfig>
        break;
 800637e:	e002      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	e000      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006384:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	223d      	movs	r2, #61	; 0x3d
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	223c      	movs	r2, #60	; 0x3c
 8006392:	2100      	movs	r1, #0
 8006394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	ffceff88 	.word	0xffceff88
 80063a4:	ffff00ff 	.word	0xffff00ff

080063a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d0:	46c0      	nop			; (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063e0:	46c0      	nop			; (mov r8, r8)
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b002      	add	sp, #8
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a34      	ldr	r2, [pc, #208]	; (80064cc <TIM_Base_SetConfig+0xe4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d008      	beq.n	8006412 <TIM_Base_SetConfig+0x2a>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	05db      	lsls	r3, r3, #23
 8006406:	429a      	cmp	r2, r3
 8006408:	d003      	beq.n	8006412 <TIM_Base_SetConfig+0x2a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a30      	ldr	r2, [pc, #192]	; (80064d0 <TIM_Base_SetConfig+0xe8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d108      	bne.n	8006424 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2270      	movs	r2, #112	; 0x70
 8006416:	4393      	bics	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a29      	ldr	r2, [pc, #164]	; (80064cc <TIM_Base_SetConfig+0xe4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <TIM_Base_SetConfig+0x76>
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	05db      	lsls	r3, r3, #23
 8006432:	429a      	cmp	r2, r3
 8006434:	d013      	beq.n	800645e <TIM_Base_SetConfig+0x76>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <TIM_Base_SetConfig+0xe8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00f      	beq.n	800645e <TIM_Base_SetConfig+0x76>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <TIM_Base_SetConfig+0xec>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00b      	beq.n	800645e <TIM_Base_SetConfig+0x76>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a23      	ldr	r2, [pc, #140]	; (80064d8 <TIM_Base_SetConfig+0xf0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_Base_SetConfig+0x76>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a22      	ldr	r2, [pc, #136]	; (80064dc <TIM_Base_SetConfig+0xf4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_Base_SetConfig+0x76>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <TIM_Base_SetConfig+0xf8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d108      	bne.n	8006470 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a20      	ldr	r2, [pc, #128]	; (80064e4 <TIM_Base_SetConfig+0xfc>)
 8006462:	4013      	ands	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	4393      	bics	r3, r2
 8006476:	001a      	movs	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <TIM_Base_SetConfig+0xe4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_Base_SetConfig+0xce>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a0d      	ldr	r2, [pc, #52]	; (80064d8 <TIM_Base_SetConfig+0xf0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_Base_SetConfig+0xce>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <TIM_Base_SetConfig+0xf4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_Base_SetConfig+0xce>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <TIM_Base_SetConfig+0xf8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d103      	bne.n	80064be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	615a      	str	r2, [r3, #20]
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b004      	add	sp, #16
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40000400 	.word	0x40000400
 80064d4:	40002000 	.word	0x40002000
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800
 80064e4:	fffffcff 	.word	0xfffffcff

080064e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	2201      	movs	r2, #1
 8006500:	4393      	bics	r3, r2
 8006502:	001a      	movs	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	22f0      	movs	r2, #240	; 0xf0
 8006512:	4393      	bics	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	220a      	movs	r2, #10
 8006524:	4393      	bics	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46bd      	mov	sp, r7
 8006540:	b006      	add	sp, #24
 8006542:	bd80      	pop	{r7, pc}

08006544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	2210      	movs	r2, #16
 8006556:	4393      	bics	r3, r2
 8006558:	001a      	movs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <TIM_TI2_ConfigInputStage+0x60>)
 800656e:	4013      	ands	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	031b      	lsls	r3, r3, #12
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	22a0      	movs	r2, #160	; 0xa0
 8006580:	4393      	bics	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	b006      	add	sp, #24
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	ffff0fff 	.word	0xffff0fff

080065a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a08      	ldr	r2, [pc, #32]	; (80065dc <TIM_ITRx_SetConfig+0x34>)
 80065bc:	4013      	ands	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	2207      	movs	r2, #7
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	609a      	str	r2, [r3, #8]
}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b004      	add	sp, #16
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	ffcfff8f 	.word	0xffcfff8f

080065e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <TIM_ETR_SetConfig+0x3c>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	021a      	lsls	r2, r3, #8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	431a      	orrs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	46bd      	mov	sp, r7
 8006618:	b006      	add	sp, #24
 800661a:	bd80      	pop	{r7, pc}
 800661c:	ffff00ff 	.word	0xffff00ff

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	223c      	movs	r2, #60	; 0x3c
 800662e:	5c9b      	ldrb	r3, [r3, r2]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006634:	2302      	movs	r3, #2
 8006636:	e055      	b.n	80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	223c      	movs	r2, #60	; 0x3c
 800663c:	2101      	movs	r1, #1
 800663e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	223d      	movs	r2, #61	; 0x3d
 8006644:	2102      	movs	r1, #2
 8006646:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a23      	ldr	r2, [pc, #140]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d108      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006666:	4013      	ands	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2270      	movs	r2, #112	; 0x70
 8006678:	4393      	bics	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a16      	ldr	r2, [pc, #88]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00f      	beq.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	05db      	lsls	r3, r3, #23
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d009      	beq.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a12      	ldr	r2, [pc, #72]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a11      	ldr	r2, [pc, #68]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d10c      	bne.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2280      	movs	r2, #128	; 0x80
 80066bc:	4393      	bics	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	223d      	movs	r2, #61	; 0x3d
 80066d6:	2101      	movs	r1, #1
 80066d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	223c      	movs	r2, #60	; 0x3c
 80066de:	2100      	movs	r1, #0
 80066e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b004      	add	sp, #16
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40012c00 	.word	0x40012c00
 80066f0:	ff0fffff 	.word	0xff0fffff
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40014000 	.word	0x40014000

080066fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006714:	46c0      	nop			; (mov r8, r8)
 8006716:	46bd      	mov	sp, r7
 8006718:	b002      	add	sp, #8
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006724:	46c0      	nop			; (mov r8, r8)
 8006726:	46bd      	mov	sp, r7
 8006728:	b002      	add	sp, #8
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e046      	b.n	80067cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2284      	movs	r2, #132	; 0x84
 8006742:	589b      	ldr	r3, [r3, r2]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	2100      	movs	r1, #0
 800674e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	0018      	movs	r0, r3
 8006754:	f004 fef8 	bl	800b548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2284      	movs	r2, #132	; 0x84
 800675c:	2124      	movs	r1, #36	; 0x24
 800675e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2101      	movs	r1, #1
 800676c:	438a      	bics	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0018      	movs	r0, r3
 8006774:	f000 f830 	bl	80067d8 <UART_SetConfig>
 8006778:	0003      	movs	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e024      	b.n	80067cc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 fb01 	bl	8006d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	490d      	ldr	r1, [pc, #52]	; (80067d4 <HAL_UART_Init+0xa8>)
 800679e:	400a      	ands	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	212a      	movs	r1, #42	; 0x2a
 80067ae:	438a      	bics	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2101      	movs	r1, #1
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 fb99 	bl	8006efc <UART_CheckIdleState>
 80067ca:	0003      	movs	r3, r0
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	ffffb7ff 	.word	0xffffb7ff

080067d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d8:	b5b0      	push	{r4, r5, r7, lr}
 80067da:	b090      	sub	sp, #64	; 0x40
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067e0:	231a      	movs	r3, #26
 80067e2:	2220      	movs	r2, #32
 80067e4:	4694      	mov	ip, r2
 80067e6:	44bc      	add	ip, r7
 80067e8:	4463      	add	r3, ip
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4313      	orrs	r3, r2
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4ab9      	ldr	r2, [pc, #740]	; (8006af4 <UART_SetConfig+0x31c>)
 800680e:	4013      	ands	r3, r2
 8006810:	0019      	movs	r1, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	430b      	orrs	r3, r1
 800681a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	4ab5      	ldr	r2, [pc, #724]	; (8006af8 <UART_SetConfig+0x320>)
 8006824:	4013      	ands	r3, r2
 8006826:	0018      	movs	r0, r3
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	68d9      	ldr	r1, [r3, #12]
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	0003      	movs	r3, r0
 8006832:	430b      	orrs	r3, r1
 8006834:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4aae      	ldr	r2, [pc, #696]	; (8006afc <UART_SetConfig+0x324>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800684c:	4313      	orrs	r3, r2
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	4aaa      	ldr	r2, [pc, #680]	; (8006b00 <UART_SetConfig+0x328>)
 8006858:	4013      	ands	r3, r2
 800685a:	0019      	movs	r1, r3
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006862:	430b      	orrs	r3, r1
 8006864:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	220f      	movs	r2, #15
 800686e:	4393      	bics	r3, r2
 8006870:	0018      	movs	r0, r3
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	0003      	movs	r3, r0
 800687c:	430b      	orrs	r3, r1
 800687e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a9f      	ldr	r2, [pc, #636]	; (8006b04 <UART_SetConfig+0x32c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d136      	bne.n	80068f8 <UART_SetConfig+0x120>
 800688a:	4b9f      	ldr	r3, [pc, #636]	; (8006b08 <UART_SetConfig+0x330>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	2203      	movs	r2, #3
 8006890:	4013      	ands	r3, r2
 8006892:	2b03      	cmp	r3, #3
 8006894:	d020      	beq.n	80068d8 <UART_SetConfig+0x100>
 8006896:	d827      	bhi.n	80068e8 <UART_SetConfig+0x110>
 8006898:	2b02      	cmp	r3, #2
 800689a:	d00d      	beq.n	80068b8 <UART_SetConfig+0xe0>
 800689c:	d824      	bhi.n	80068e8 <UART_SetConfig+0x110>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <UART_SetConfig+0xd0>
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d010      	beq.n	80068c8 <UART_SetConfig+0xf0>
 80068a6:	e01f      	b.n	80068e8 <UART_SetConfig+0x110>
 80068a8:	231b      	movs	r3, #27
 80068aa:	2220      	movs	r2, #32
 80068ac:	4694      	mov	ip, r2
 80068ae:	44bc      	add	ip, r7
 80068b0:	4463      	add	r3, ip
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e0c5      	b.n	8006a44 <UART_SetConfig+0x26c>
 80068b8:	231b      	movs	r3, #27
 80068ba:	2220      	movs	r2, #32
 80068bc:	4694      	mov	ip, r2
 80068be:	44bc      	add	ip, r7
 80068c0:	4463      	add	r3, ip
 80068c2:	2202      	movs	r2, #2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e0bd      	b.n	8006a44 <UART_SetConfig+0x26c>
 80068c8:	231b      	movs	r3, #27
 80068ca:	2220      	movs	r2, #32
 80068cc:	4694      	mov	ip, r2
 80068ce:	44bc      	add	ip, r7
 80068d0:	4463      	add	r3, ip
 80068d2:	2204      	movs	r2, #4
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e0b5      	b.n	8006a44 <UART_SetConfig+0x26c>
 80068d8:	231b      	movs	r3, #27
 80068da:	2220      	movs	r2, #32
 80068dc:	4694      	mov	ip, r2
 80068de:	44bc      	add	ip, r7
 80068e0:	4463      	add	r3, ip
 80068e2:	2208      	movs	r2, #8
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e0ad      	b.n	8006a44 <UART_SetConfig+0x26c>
 80068e8:	231b      	movs	r3, #27
 80068ea:	2220      	movs	r2, #32
 80068ec:	4694      	mov	ip, r2
 80068ee:	44bc      	add	ip, r7
 80068f0:	4463      	add	r3, ip
 80068f2:	2210      	movs	r2, #16
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e0a5      	b.n	8006a44 <UART_SetConfig+0x26c>
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a83      	ldr	r2, [pc, #524]	; (8006b0c <UART_SetConfig+0x334>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d136      	bne.n	8006970 <UART_SetConfig+0x198>
 8006902:	4b81      	ldr	r3, [pc, #516]	; (8006b08 <UART_SetConfig+0x330>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	220c      	movs	r2, #12
 8006908:	4013      	ands	r3, r2
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d020      	beq.n	8006950 <UART_SetConfig+0x178>
 800690e:	d827      	bhi.n	8006960 <UART_SetConfig+0x188>
 8006910:	2b08      	cmp	r3, #8
 8006912:	d00d      	beq.n	8006930 <UART_SetConfig+0x158>
 8006914:	d824      	bhi.n	8006960 <UART_SetConfig+0x188>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <UART_SetConfig+0x148>
 800691a:	2b04      	cmp	r3, #4
 800691c:	d010      	beq.n	8006940 <UART_SetConfig+0x168>
 800691e:	e01f      	b.n	8006960 <UART_SetConfig+0x188>
 8006920:	231b      	movs	r3, #27
 8006922:	2220      	movs	r2, #32
 8006924:	4694      	mov	ip, r2
 8006926:	44bc      	add	ip, r7
 8006928:	4463      	add	r3, ip
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e089      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006930:	231b      	movs	r3, #27
 8006932:	2220      	movs	r2, #32
 8006934:	4694      	mov	ip, r2
 8006936:	44bc      	add	ip, r7
 8006938:	4463      	add	r3, ip
 800693a:	2202      	movs	r2, #2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e081      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006940:	231b      	movs	r3, #27
 8006942:	2220      	movs	r2, #32
 8006944:	4694      	mov	ip, r2
 8006946:	44bc      	add	ip, r7
 8006948:	4463      	add	r3, ip
 800694a:	2204      	movs	r2, #4
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e079      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006950:	231b      	movs	r3, #27
 8006952:	2220      	movs	r2, #32
 8006954:	4694      	mov	ip, r2
 8006956:	44bc      	add	ip, r7
 8006958:	4463      	add	r3, ip
 800695a:	2208      	movs	r2, #8
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e071      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006960:	231b      	movs	r3, #27
 8006962:	2220      	movs	r2, #32
 8006964:	4694      	mov	ip, r2
 8006966:	44bc      	add	ip, r7
 8006968:	4463      	add	r3, ip
 800696a:	2210      	movs	r2, #16
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	e069      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a66      	ldr	r2, [pc, #408]	; (8006b10 <UART_SetConfig+0x338>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d107      	bne.n	800698a <UART_SetConfig+0x1b2>
 800697a:	231b      	movs	r3, #27
 800697c:	2220      	movs	r2, #32
 800697e:	4694      	mov	ip, r2
 8006980:	44bc      	add	ip, r7
 8006982:	4463      	add	r3, ip
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e05c      	b.n	8006a44 <UART_SetConfig+0x26c>
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a61      	ldr	r2, [pc, #388]	; (8006b14 <UART_SetConfig+0x33c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d107      	bne.n	80069a4 <UART_SetConfig+0x1cc>
 8006994:	231b      	movs	r3, #27
 8006996:	2220      	movs	r2, #32
 8006998:	4694      	mov	ip, r2
 800699a:	44bc      	add	ip, r7
 800699c:	4463      	add	r3, ip
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	e04f      	b.n	8006a44 <UART_SetConfig+0x26c>
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a54      	ldr	r2, [pc, #336]	; (8006afc <UART_SetConfig+0x324>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d143      	bne.n	8006a36 <UART_SetConfig+0x25e>
 80069ae:	4b56      	ldr	r3, [pc, #344]	; (8006b08 <UART_SetConfig+0x330>)
 80069b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b2:	23c0      	movs	r3, #192	; 0xc0
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	4013      	ands	r3, r2
 80069b8:	22c0      	movs	r2, #192	; 0xc0
 80069ba:	0112      	lsls	r2, r2, #4
 80069bc:	4293      	cmp	r3, r2
 80069be:	d02a      	beq.n	8006a16 <UART_SetConfig+0x23e>
 80069c0:	22c0      	movs	r2, #192	; 0xc0
 80069c2:	0112      	lsls	r2, r2, #4
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d82e      	bhi.n	8006a26 <UART_SetConfig+0x24e>
 80069c8:	2280      	movs	r2, #128	; 0x80
 80069ca:	0112      	lsls	r2, r2, #4
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d012      	beq.n	80069f6 <UART_SetConfig+0x21e>
 80069d0:	2280      	movs	r2, #128	; 0x80
 80069d2:	0112      	lsls	r2, r2, #4
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d826      	bhi.n	8006a26 <UART_SetConfig+0x24e>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <UART_SetConfig+0x20e>
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	00d2      	lsls	r2, r2, #3
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d010      	beq.n	8006a06 <UART_SetConfig+0x22e>
 80069e4:	e01f      	b.n	8006a26 <UART_SetConfig+0x24e>
 80069e6:	231b      	movs	r3, #27
 80069e8:	2220      	movs	r2, #32
 80069ea:	4694      	mov	ip, r2
 80069ec:	44bc      	add	ip, r7
 80069ee:	4463      	add	r3, ip
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	e026      	b.n	8006a44 <UART_SetConfig+0x26c>
 80069f6:	231b      	movs	r3, #27
 80069f8:	2220      	movs	r2, #32
 80069fa:	4694      	mov	ip, r2
 80069fc:	44bc      	add	ip, r7
 80069fe:	4463      	add	r3, ip
 8006a00:	2202      	movs	r2, #2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	e01e      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006a06:	231b      	movs	r3, #27
 8006a08:	2220      	movs	r2, #32
 8006a0a:	4694      	mov	ip, r2
 8006a0c:	44bc      	add	ip, r7
 8006a0e:	4463      	add	r3, ip
 8006a10:	2204      	movs	r2, #4
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e016      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006a16:	231b      	movs	r3, #27
 8006a18:	2220      	movs	r2, #32
 8006a1a:	4694      	mov	ip, r2
 8006a1c:	44bc      	add	ip, r7
 8006a1e:	4463      	add	r3, ip
 8006a20:	2208      	movs	r2, #8
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e00e      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006a26:	231b      	movs	r3, #27
 8006a28:	2220      	movs	r2, #32
 8006a2a:	4694      	mov	ip, r2
 8006a2c:	44bc      	add	ip, r7
 8006a2e:	4463      	add	r3, ip
 8006a30:	2210      	movs	r2, #16
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e006      	b.n	8006a44 <UART_SetConfig+0x26c>
 8006a36:	231b      	movs	r3, #27
 8006a38:	2220      	movs	r2, #32
 8006a3a:	4694      	mov	ip, r2
 8006a3c:	44bc      	add	ip, r7
 8006a3e:	4463      	add	r3, ip
 8006a40:	2210      	movs	r2, #16
 8006a42:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <UART_SetConfig+0x324>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d000      	beq.n	8006a50 <UART_SetConfig+0x278>
 8006a4e:	e0ad      	b.n	8006bac <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a50:	231b      	movs	r3, #27
 8006a52:	2220      	movs	r2, #32
 8006a54:	4694      	mov	ip, r2
 8006a56:	44bc      	add	ip, r7
 8006a58:	4463      	add	r3, ip
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d015      	beq.n	8006a8c <UART_SetConfig+0x2b4>
 8006a60:	dc18      	bgt.n	8006a94 <UART_SetConfig+0x2bc>
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d00d      	beq.n	8006a82 <UART_SetConfig+0x2aa>
 8006a66:	dc15      	bgt.n	8006a94 <UART_SetConfig+0x2bc>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <UART_SetConfig+0x29a>
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d005      	beq.n	8006a7c <UART_SetConfig+0x2a4>
 8006a70:	e010      	b.n	8006a94 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a72:	f7fe fc7d 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8006a76:	0003      	movs	r3, r0
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a7a:	e015      	b.n	8006aa8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a7c:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <UART_SetConfig+0x340>)
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a80:	e012      	b.n	8006aa8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a82:	f7fe fbe9 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006a86:	0003      	movs	r3, r0
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a8a:	e00d      	b.n	8006aa8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8c:	2380      	movs	r3, #128	; 0x80
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a92:	e009      	b.n	8006aa8 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006a98:	231a      	movs	r3, #26
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	4694      	mov	ip, r2
 8006a9e:	44bc      	add	ip, r7
 8006aa0:	4463      	add	r3, ip
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
        break;
 8006aa6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d100      	bne.n	8006ab0 <UART_SetConfig+0x2d8>
 8006aae:	e154      	b.n	8006d5a <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab4:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <UART_SetConfig+0x344>)
 8006ab6:	0052      	lsls	r2, r2, #1
 8006ab8:	5ad3      	ldrh	r3, [r2, r3]
 8006aba:	0019      	movs	r1, r3
 8006abc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006abe:	f7f9 fb21 	bl	8000104 <__udivsi3>
 8006ac2:	0003      	movs	r3, r0
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	0013      	movs	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	189b      	adds	r3, r3, r2
 8006ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d305      	bcc.n	8006ae2 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d91e      	bls.n	8006b20 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006ae2:	231a      	movs	r3, #26
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	4694      	mov	ip, r2
 8006ae8:	44bc      	add	ip, r7
 8006aea:	4463      	add	r3, ip
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e133      	b.n	8006d5a <UART_SetConfig+0x582>
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	cfff69f3 	.word	0xcfff69f3
 8006af8:	ffffcfff 	.word	0xffffcfff
 8006afc:	40008000 	.word	0x40008000
 8006b00:	11fff4ff 	.word	0x11fff4ff
 8006b04:	40013800 	.word	0x40013800
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	40004400 	.word	0x40004400
 8006b10:	40004800 	.word	0x40004800
 8006b14:	40004c00 	.word	0x40004c00
 8006b18:	00f42400 	.word	0x00f42400
 8006b1c:	0800b94c 	.word	0x0800b94c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b2c:	4b97      	ldr	r3, [pc, #604]	; (8006d8c <UART_SetConfig+0x5b4>)
 8006b2e:	0052      	lsls	r2, r2, #1
 8006b30:	5ad3      	ldrh	r3, [r2, r3]
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	69b8      	ldr	r0, [r7, #24]
 8006b3e:	69f9      	ldr	r1, [r7, #28]
 8006b40:	f7f9 fc7a 	bl	8000438 <__aeabi_uldivmod>
 8006b44:	0002      	movs	r2, r0
 8006b46:	000b      	movs	r3, r1
 8006b48:	0e11      	lsrs	r1, r2, #24
 8006b4a:	021d      	lsls	r5, r3, #8
 8006b4c:	430d      	orrs	r5, r1
 8006b4e:	0214      	lsls	r4, r2, #8
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68b8      	ldr	r0, [r7, #8]
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	1900      	adds	r0, r0, r4
 8006b62:	4169      	adcs	r1, r5
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f7f9 fc61 	bl	8000438 <__aeabi_uldivmod>
 8006b76:	0002      	movs	r2, r0
 8006b78:	000b      	movs	r3, r1
 8006b7a:	0013      	movs	r3, r2
 8006b7c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b80:	23c0      	movs	r3, #192	; 0xc0
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d309      	bcc.n	8006b9c <UART_SetConfig+0x3c4>
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	035b      	lsls	r3, r3, #13
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d204      	bcs.n	8006b9c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	e0de      	b.n	8006d5a <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8006b9c:	231a      	movs	r3, #26
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	4694      	mov	ip, r2
 8006ba2:	44bc      	add	ip, r7
 8006ba4:	4463      	add	r3, ip
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	e0d6      	b.n	8006d5a <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d000      	beq.n	8006bba <UART_SetConfig+0x3e2>
 8006bb8:	e074      	b.n	8006ca4 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8006bba:	231b      	movs	r3, #27
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	4694      	mov	ip, r2
 8006bc0:	44bc      	add	ip, r7
 8006bc2:	4463      	add	r3, ip
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d015      	beq.n	8006bf6 <UART_SetConfig+0x41e>
 8006bca:	dc18      	bgt.n	8006bfe <UART_SetConfig+0x426>
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d00d      	beq.n	8006bec <UART_SetConfig+0x414>
 8006bd0:	dc15      	bgt.n	8006bfe <UART_SetConfig+0x426>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <UART_SetConfig+0x404>
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d005      	beq.n	8006be6 <UART_SetConfig+0x40e>
 8006bda:	e010      	b.n	8006bfe <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fe fbc8 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8006be0:	0003      	movs	r3, r0
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be4:	e015      	b.n	8006c12 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be6:	4b6a      	ldr	r3, [pc, #424]	; (8006d90 <UART_SetConfig+0x5b8>)
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bea:	e012      	b.n	8006c12 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bec:	f7fe fb34 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006bf0:	0003      	movs	r3, r0
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bf4:	e00d      	b.n	8006c12 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bfc:	e009      	b.n	8006c12 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006c02:	231a      	movs	r3, #26
 8006c04:	2220      	movs	r2, #32
 8006c06:	4694      	mov	ip, r2
 8006c08:	44bc      	add	ip, r7
 8006c0a:	4463      	add	r3, ip
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
        break;
 8006c10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d100      	bne.n	8006c1a <UART_SetConfig+0x442>
 8006c18:	e09f      	b.n	8006d5a <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1e:	4b5b      	ldr	r3, [pc, #364]	; (8006d8c <UART_SetConfig+0x5b4>)
 8006c20:	0052      	lsls	r2, r2, #1
 8006c22:	5ad3      	ldrh	r3, [r2, r3]
 8006c24:	0019      	movs	r1, r3
 8006c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c28:	f7f9 fa6c 	bl	8000104 <__udivsi3>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	005a      	lsls	r2, r3, #1
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	18d2      	adds	r2, r2, r3
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	0010      	movs	r0, r2
 8006c40:	f7f9 fa60 	bl	8000104 <__udivsi3>
 8006c44:	0003      	movs	r3, r0
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d921      	bls.n	8006c94 <UART_SetConfig+0x4bc>
 8006c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	025b      	lsls	r3, r3, #9
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d21c      	bcs.n	8006c94 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	200e      	movs	r0, #14
 8006c60:	2420      	movs	r4, #32
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	181b      	adds	r3, r3, r0
 8006c66:	210f      	movs	r1, #15
 8006c68:	438a      	bics	r2, r1
 8006c6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2207      	movs	r2, #7
 8006c74:	4013      	ands	r3, r2
 8006c76:	b299      	uxth	r1, r3
 8006c78:	193b      	adds	r3, r7, r4
 8006c7a:	181b      	adds	r3, r3, r0
 8006c7c:	193a      	adds	r2, r7, r4
 8006c7e:	1812      	adds	r2, r2, r0
 8006c80:	8812      	ldrh	r2, [r2, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	193a      	adds	r2, r7, r4
 8006c8c:	1812      	adds	r2, r2, r0
 8006c8e:	8812      	ldrh	r2, [r2, #0]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	e062      	b.n	8006d5a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8006c94:	231a      	movs	r3, #26
 8006c96:	2220      	movs	r2, #32
 8006c98:	4694      	mov	ip, r2
 8006c9a:	44bc      	add	ip, r7
 8006c9c:	4463      	add	r3, ip
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e05a      	b.n	8006d5a <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca4:	231b      	movs	r3, #27
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	4694      	mov	ip, r2
 8006caa:	44bc      	add	ip, r7
 8006cac:	4463      	add	r3, ip
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d015      	beq.n	8006ce0 <UART_SetConfig+0x508>
 8006cb4:	dc18      	bgt.n	8006ce8 <UART_SetConfig+0x510>
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d00d      	beq.n	8006cd6 <UART_SetConfig+0x4fe>
 8006cba:	dc15      	bgt.n	8006ce8 <UART_SetConfig+0x510>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <UART_SetConfig+0x4ee>
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d005      	beq.n	8006cd0 <UART_SetConfig+0x4f8>
 8006cc4:	e010      	b.n	8006ce8 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc6:	f7fe fb53 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cce:	e015      	b.n	8006cfc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd0:	4b2f      	ldr	r3, [pc, #188]	; (8006d90 <UART_SetConfig+0x5b8>)
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cd4:	e012      	b.n	8006cfc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cd6:	f7fe fabf 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006cda:	0003      	movs	r3, r0
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cde:	e00d      	b.n	8006cfc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce6:	e009      	b.n	8006cfc <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006cec:	231a      	movs	r3, #26
 8006cee:	2220      	movs	r2, #32
 8006cf0:	4694      	mov	ip, r2
 8006cf2:	44bc      	add	ip, r7
 8006cf4:	4463      	add	r3, ip
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	701a      	strb	r2, [r3, #0]
        break;
 8006cfa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d02b      	beq.n	8006d5a <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d06:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <UART_SetConfig+0x5b4>)
 8006d08:	0052      	lsls	r2, r2, #1
 8006d0a:	5ad3      	ldrh	r3, [r2, r3]
 8006d0c:	0019      	movs	r1, r3
 8006d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d10:	f7f9 f9f8 	bl	8000104 <__udivsi3>
 8006d14:	0003      	movs	r3, r0
 8006d16:	001a      	movs	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	18d2      	adds	r2, r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	0019      	movs	r1, r3
 8006d26:	0010      	movs	r0, r2
 8006d28:	f7f9 f9ec 	bl	8000104 <__udivsi3>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b0f      	cmp	r3, #15
 8006d36:	d909      	bls.n	8006d4c <UART_SetConfig+0x574>
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	025b      	lsls	r3, r3, #9
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d204      	bcs.n	8006d4c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	e006      	b.n	8006d5a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4c:	231a      	movs	r3, #26
 8006d4e:	2220      	movs	r2, #32
 8006d50:	4694      	mov	ip, r2
 8006d52:	44bc      	add	ip, r7
 8006d54:	4463      	add	r3, ip
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	226a      	movs	r2, #106	; 0x6a
 8006d5e:	2101      	movs	r1, #1
 8006d60:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	2268      	movs	r2, #104	; 0x68
 8006d66:	2101      	movs	r1, #1
 8006d68:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	2200      	movs	r2, #0
 8006d74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d76:	231a      	movs	r3, #26
 8006d78:	2220      	movs	r2, #32
 8006d7a:	4694      	mov	ip, r2
 8006d7c:	44bc      	add	ip, r7
 8006d7e:	4463      	add	r3, ip
 8006d80:	781b      	ldrb	r3, [r3, #0]
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b010      	add	sp, #64	; 0x40
 8006d88:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	0800b94c 	.word	0x0800b94c
 8006d90:	00f42400 	.word	0x00f42400

08006d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	2201      	movs	r2, #1
 8006da2:	4013      	ands	r3, r2
 8006da4:	d00b      	beq.n	8006dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	4a4a      	ldr	r2, [pc, #296]	; (8006ed8 <UART_AdvFeatureConfig+0x144>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	0019      	movs	r1, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d00b      	beq.n	8006de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	4a43      	ldr	r2, [pc, #268]	; (8006edc <UART_AdvFeatureConfig+0x148>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	0019      	movs	r1, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	2204      	movs	r2, #4
 8006de6:	4013      	ands	r3, r2
 8006de8:	d00b      	beq.n	8006e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a3b      	ldr	r2, [pc, #236]	; (8006ee0 <UART_AdvFeatureConfig+0x14c>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	0019      	movs	r1, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	2208      	movs	r2, #8
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4a34      	ldr	r2, [pc, #208]	; (8006ee4 <UART_AdvFeatureConfig+0x150>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	0019      	movs	r1, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	2210      	movs	r2, #16
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d00b      	beq.n	8006e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	4a2c      	ldr	r2, [pc, #176]	; (8006ee8 <UART_AdvFeatureConfig+0x154>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	0019      	movs	r1, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	4a25      	ldr	r2, [pc, #148]	; (8006eec <UART_AdvFeatureConfig+0x158>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	0019      	movs	r1, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	2240      	movs	r2, #64	; 0x40
 8006e6e:	4013      	ands	r3, r2
 8006e70:	d01d      	beq.n	8006eae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4a1d      	ldr	r2, [pc, #116]	; (8006ef0 <UART_AdvFeatureConfig+0x15c>)
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	035b      	lsls	r3, r3, #13
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d10b      	bne.n	8006eae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <UART_AdvFeatureConfig+0x160>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	0019      	movs	r1, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	2280      	movs	r2, #128	; 0x80
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4a0e      	ldr	r2, [pc, #56]	; (8006ef8 <UART_AdvFeatureConfig+0x164>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	0019      	movs	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }
}
 8006ed0:	46c0      	nop			; (mov r8, r8)
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b002      	add	sp, #8
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	fffdffff 	.word	0xfffdffff
 8006edc:	fffeffff 	.word	0xfffeffff
 8006ee0:	fffbffff 	.word	0xfffbffff
 8006ee4:	ffff7fff 	.word	0xffff7fff
 8006ee8:	ffffefff 	.word	0xffffefff
 8006eec:	ffffdfff 	.word	0xffffdfff
 8006ef0:	ffefffff 	.word	0xffefffff
 8006ef4:	ff9fffff 	.word	0xff9fffff
 8006ef8:	fff7ffff 	.word	0xfff7ffff

08006efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	228c      	movs	r2, #140	; 0x8c
 8006f08:	2100      	movs	r1, #0
 8006f0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f0c:	f7fb fcb0 	bl	8002870 <HAL_GetTick>
 8006f10:	0003      	movs	r3, r0
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d10c      	bne.n	8006f3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2280      	movs	r2, #128	; 0x80
 8006f26:	0391      	lsls	r1, r2, #14
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <UART_CheckIdleState+0x90>)
 8006f2c:	9200      	str	r2, [sp, #0]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f000 f82e 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 8006f34:	1e03      	subs	r3, r0, #0
 8006f36:	d001      	beq.n	8006f3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e023      	b.n	8006f84 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2204      	movs	r2, #4
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d10c      	bne.n	8006f64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2280      	movs	r2, #128	; 0x80
 8006f4e:	03d1      	lsls	r1, r2, #15
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <UART_CheckIdleState+0x90>)
 8006f54:	9200      	str	r2, [sp, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f000 f81a 	bl	8006f90 <UART_WaitOnFlagUntilTimeout>
 8006f5c:	1e03      	subs	r3, r0, #0
 8006f5e:	d001      	beq.n	8006f64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e00f      	b.n	8006f84 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2284      	movs	r2, #132	; 0x84
 8006f68:	2120      	movs	r1, #32
 8006f6a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2288      	movs	r2, #136	; 0x88
 8006f70:	2120      	movs	r1, #32
 8006f72:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2280      	movs	r2, #128	; 0x80
 8006f7e:	2100      	movs	r1, #0
 8006f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	0018      	movs	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b004      	add	sp, #16
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	01ffffff 	.word	0x01ffffff

08006f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b094      	sub	sp, #80	; 0x50
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	1dfb      	adds	r3, r7, #7
 8006f9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa0:	e0a7      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	d100      	bne.n	8006faa <UART_WaitOnFlagUntilTimeout+0x1a>
 8006fa8:	e0a3      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006faa:	f7fb fc61 	bl	8002870 <HAL_GetTick>
 8006fae:	0002      	movs	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d13f      	bne.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fca:	2301      	movs	r3, #1
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	f383 8810 	msr	PRIMASK, r3
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	494e      	ldr	r1, [pc, #312]	; (800711c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	f383 8810 	msr	PRIMASK, r3
}
 8006ff0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	f383 8810 	msr	PRIMASK, r3
}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2101      	movs	r1, #1
 8007014:	438a      	bics	r2, r1
 8007016:	609a      	str	r2, [r3, #8]
 8007018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2284      	movs	r2, #132	; 0x84
 8007028:	2120      	movs	r1, #32
 800702a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2288      	movs	r2, #136	; 0x88
 8007030:	2120      	movs	r1, #32
 8007032:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2280      	movs	r2, #128	; 0x80
 8007038:	2100      	movs	r1, #0
 800703a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e069      	b.n	8007114 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2204      	movs	r2, #4
 8007048:	4013      	ands	r3, r2
 800704a:	d052      	beq.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69da      	ldr	r2, [r3, #28]
 8007052:	2380      	movs	r3, #128	; 0x80
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	401a      	ands	r2, r3
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	429a      	cmp	r2, r3
 800705e:	d148      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2280      	movs	r2, #128	; 0x80
 8007066:	0112      	lsls	r2, r2, #4
 8007068:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706a:	f3ef 8310 	mrs	r3, PRIMASK
 800706e:	613b      	str	r3, [r7, #16]
  return(result);
 8007070:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f383 8810 	msr	PRIMASK, r3
}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4924      	ldr	r1, [pc, #144]	; (800711c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800708c:	400a      	ands	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007092:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	f383 8810 	msr	PRIMASK, r3
}
 800709a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709c:	f3ef 8310 	mrs	r3, PRIMASK
 80070a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80070a2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a6:	2301      	movs	r3, #1
 80070a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2101      	movs	r1, #1
 80070be:	438a      	bics	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]
 80070c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2284      	movs	r2, #132	; 0x84
 80070d2:	2120      	movs	r1, #32
 80070d4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2288      	movs	r2, #136	; 0x88
 80070da:	2120      	movs	r1, #32
 80070dc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	228c      	movs	r2, #140	; 0x8c
 80070e2:	2120      	movs	r1, #32
 80070e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2280      	movs	r2, #128	; 0x80
 80070ea:	2100      	movs	r1, #0
 80070ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e010      	b.n	8007114 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	4013      	ands	r3, r2
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	425a      	negs	r2, r3
 8007102:	4153      	adcs	r3, r2
 8007104:	b2db      	uxtb	r3, r3
 8007106:	001a      	movs	r2, r3
 8007108:	1dfb      	adds	r3, r7, #7
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d100      	bne.n	8007112 <UART_WaitOnFlagUntilTimeout+0x182>
 8007110:	e747      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	0018      	movs	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	b014      	add	sp, #80	; 0x50
 800711a:	bd80      	pop	{r7, pc}
 800711c:	fffffe5f 	.word	0xfffffe5f

08007120 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2280      	movs	r2, #128	; 0x80
 800712c:	5c9b      	ldrb	r3, [r3, r2]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_UARTEx_DisableFifoMode+0x16>
 8007132:	2302      	movs	r3, #2
 8007134:	e027      	b.n	8007186 <HAL_UARTEx_DisableFifoMode+0x66>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	2101      	movs	r1, #1
 800713c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2284      	movs	r2, #132	; 0x84
 8007142:	2124      	movs	r1, #36	; 0x24
 8007144:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2101      	movs	r1, #1
 800715a:	438a      	bics	r2, r1
 800715c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007162:	4013      	ands	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2284      	movs	r2, #132	; 0x84
 8007178:	2120      	movs	r1, #32
 800717a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2280      	movs	r2, #128	; 0x80
 8007180:	2100      	movs	r1, #0
 8007182:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	0018      	movs	r0, r3
 8007188:	46bd      	mov	sp, r7
 800718a:	b004      	add	sp, #16
 800718c:	bd80      	pop	{r7, pc}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	dfffffff 	.word	0xdfffffff

08007194 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2280      	movs	r2, #128	; 0x80
 80071a2:	5c9b      	ldrb	r3, [r3, r2]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e02e      	b.n	800720a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	2101      	movs	r1, #1
 80071b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2284      	movs	r2, #132	; 0x84
 80071b8:	2124      	movs	r1, #36	; 0x24
 80071ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2101      	movs	r1, #1
 80071d0:	438a      	bics	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	08d9      	lsrs	r1, r3, #3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	0018      	movs	r0, r3
 80071ec:	f000 f854 	bl	8007298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2284      	movs	r2, #132	; 0x84
 80071fc:	2120      	movs	r1, #32
 80071fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2280      	movs	r2, #128	; 0x80
 8007204:	2100      	movs	r1, #0
 8007206:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	0018      	movs	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	b004      	add	sp, #16
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2280      	movs	r2, #128	; 0x80
 8007222:	5c9b      	ldrb	r3, [r3, r2]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007228:	2302      	movs	r3, #2
 800722a:	e02f      	b.n	800728c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2280      	movs	r2, #128	; 0x80
 8007230:	2101      	movs	r1, #1
 8007232:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2284      	movs	r2, #132	; 0x84
 8007238:	2124      	movs	r1, #36	; 0x24
 800723a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2101      	movs	r1, #1
 8007250:	438a      	bics	r2, r1
 8007252:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	4a0e      	ldr	r2, [pc, #56]	; (8007294 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800725c:	4013      	ands	r3, r2
 800725e:	0019      	movs	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	0018      	movs	r0, r3
 800726e:	f000 f813 	bl	8007298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2284      	movs	r2, #132	; 0x84
 800727e:	2120      	movs	r1, #32
 8007280:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	2100      	movs	r1, #0
 8007288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	0018      	movs	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	b004      	add	sp, #16
 8007292:	bd80      	pop	{r7, pc}
 8007294:	f1ffffff 	.word	0xf1ffffff

08007298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d108      	bne.n	80072ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	226a      	movs	r2, #106	; 0x6a
 80072ac:	2101      	movs	r1, #1
 80072ae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2268      	movs	r2, #104	; 0x68
 80072b4:	2101      	movs	r1, #1
 80072b6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072b8:	e043      	b.n	8007342 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072ba:	260f      	movs	r6, #15
 80072bc:	19bb      	adds	r3, r7, r6
 80072be:	2208      	movs	r2, #8
 80072c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072c2:	200e      	movs	r0, #14
 80072c4:	183b      	adds	r3, r7, r0
 80072c6:	2208      	movs	r2, #8
 80072c8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	0e5b      	lsrs	r3, r3, #25
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	240d      	movs	r4, #13
 80072d6:	193b      	adds	r3, r7, r4
 80072d8:	2107      	movs	r1, #7
 80072da:	400a      	ands	r2, r1
 80072dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	0f5b      	lsrs	r3, r3, #29
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	250c      	movs	r5, #12
 80072ea:	197b      	adds	r3, r7, r5
 80072ec:	2107      	movs	r1, #7
 80072ee:	400a      	ands	r2, r1
 80072f0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072f2:	183b      	adds	r3, r7, r0
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	197a      	adds	r2, r7, r5
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	4914      	ldr	r1, [pc, #80]	; (800734c <UARTEx_SetNbDataToProcess+0xb4>)
 80072fc:	5c8a      	ldrb	r2, [r1, r2]
 80072fe:	435a      	muls	r2, r3
 8007300:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007302:	197b      	adds	r3, r7, r5
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4a12      	ldr	r2, [pc, #72]	; (8007350 <UARTEx_SetNbDataToProcess+0xb8>)
 8007308:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800730a:	0019      	movs	r1, r3
 800730c:	f7f8 ff84 	bl	8000218 <__divsi3>
 8007310:	0003      	movs	r3, r0
 8007312:	b299      	uxth	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	226a      	movs	r2, #106	; 0x6a
 8007318:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800731a:	19bb      	adds	r3, r7, r6
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	193a      	adds	r2, r7, r4
 8007320:	7812      	ldrb	r2, [r2, #0]
 8007322:	490a      	ldr	r1, [pc, #40]	; (800734c <UARTEx_SetNbDataToProcess+0xb4>)
 8007324:	5c8a      	ldrb	r2, [r1, r2]
 8007326:	435a      	muls	r2, r3
 8007328:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800732a:	193b      	adds	r3, r7, r4
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	4a08      	ldr	r2, [pc, #32]	; (8007350 <UARTEx_SetNbDataToProcess+0xb8>)
 8007330:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007332:	0019      	movs	r1, r3
 8007334:	f7f8 ff70 	bl	8000218 <__divsi3>
 8007338:	0003      	movs	r3, r0
 800733a:	b299      	uxth	r1, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2268      	movs	r2, #104	; 0x68
 8007340:	5299      	strh	r1, [r3, r2]
}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	46bd      	mov	sp, r7
 8007346:	b005      	add	sp, #20
 8007348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	0800b964 	.word	0x0800b964
 8007350:	0800b96c 	.word	0x0800b96c

08007354 <LEDmultiplexing>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	0018      	movs	r0, r3
 8007360:	f000 f9ba 	bl	80076d8 <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2265      	movs	r2, #101	; 0x65
 8007368:	5c9a      	ldrb	r2, [r3, r2]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	0011      	movs	r1, r2
 800736e:	0018      	movs	r0, r3
 8007370:	f000 f970 	bl	8007654 <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2265      	movs	r2, #101	; 0x65
 8007378:	5c9b      	ldrb	r3, [r3, r2]
 800737a:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2260      	movs	r2, #96	; 0x60
 8007380:	185b      	adds	r3, r3, r1
 8007382:	189b      	adds	r3, r3, r2
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0011      	movs	r1, r2
 800738a:	0018      	movs	r0, r3
 800738c:	f000 fa10 	bl	80077b0 <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2264      	movs	r2, #100	; 0x64
 8007394:	5c9a      	ldrb	r2, [r3, r2]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2165      	movs	r1, #101	; 0x65
 800739a:	5c5b      	ldrb	r3, [r3, r1]
 800739c:	429a      	cmp	r2, r3
 800739e:	d107      	bne.n	80073b0 <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80073a8:	2200      	movs	r2, #0
 80073aa:	0019      	movs	r1, r3
 80073ac:	f7fc fc71 	bl	8003c92 <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2265      	movs	r2, #101	; 0x65
 80073b4:	5c9b      	ldrb	r3, [r3, r2]
 80073b6:	3301      	adds	r3, #1
 80073b8:	b2d9      	uxtb	r1, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2265      	movs	r2, #101	; 0x65
 80073be:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2265      	movs	r2, #101	; 0x65
 80073c4:	5c9b      	ldrb	r3, [r3, r2]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d903      	bls.n	80073d2 <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2265      	movs	r2, #101	; 0x65
 80073ce:	2100      	movs	r1, #0
 80073d0:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	226c      	movs	r2, #108	; 0x6c
 80073d6:	5a9b      	ldrh	r3, [r3, r2]
 80073d8:	3301      	adds	r3, #1
 80073da:	b299      	uxth	r1, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	226c      	movs	r2, #108	; 0x6c
 80073e0:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	226c      	movs	r2, #108	; 0x6c
 80073e6:	5a9b      	ldrh	r3, [r3, r2]
 80073e8:	2105      	movs	r1, #5
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7f8 ff10 	bl	8000210 <__aeabi_uidivmod>
 80073f0:	000b      	movs	r3, r1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d000      	beq.n	80073fa <LEDmultiplexing+0xa6>
 80073f8:	e0a2      	b.n	8007540 <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2267      	movs	r2, #103	; 0x67
 80073fe:	5c9b      	ldrb	r3, [r3, r2]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d100      	bne.n	8007406 <LEDmultiplexing+0xb2>
 8007404:	e09c      	b.n	8007540 <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2267      	movs	r2, #103	; 0x67
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d13f      	bne.n	8007490 <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8007410:	230f      	movs	r3, #15
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	2203      	movs	r2, #3
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e015      	b.n	8007446 <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 800741a:	240f      	movs	r4, #15
 800741c:	193b      	adds	r3, r7, r4
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	1e5a      	subs	r2, r3, #1
 8007422:	193b      	adds	r3, r7, r4
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	2060      	movs	r0, #96	; 0x60
 800742a:	188a      	adds	r2, r1, r2
 800742c:	1812      	adds	r2, r2, r0
 800742e:	7810      	ldrb	r0, [r2, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	2160      	movs	r1, #96	; 0x60
 8007434:	18d3      	adds	r3, r2, r3
 8007436:	185b      	adds	r3, r3, r1
 8007438:	1c02      	adds	r2, r0, #0
 800743a:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 800743c:	193b      	adds	r3, r7, r4
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	193b      	adds	r3, r7, r4
 8007442:	3a01      	subs	r2, #1
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	230f      	movs	r3, #15
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e4      	bne.n	800741a <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2266      	movs	r2, #102	; 0x66
 8007454:	5c9b      	ldrb	r3, [r3, r2]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d80c      	bhi.n	8007474 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2266      	movs	r2, #102	; 0x66
 800745e:	5c9b      	ldrb	r3, [r3, r2]
 8007460:	0019      	movs	r1, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2268      	movs	r2, #104	; 0x68
 8007466:	185b      	adds	r3, r3, r1
 8007468:	189b      	adds	r3, r3, r2
 800746a:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2260      	movs	r2, #96	; 0x60
 8007470:	5499      	strb	r1, [r3, r2]
 8007472:	e00d      	b.n	8007490 <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2266      	movs	r2, #102	; 0x66
 8007478:	5c9b      	ldrb	r3, [r3, r2]
 800747a:	001a      	movs	r2, r3
 800747c:	2307      	movs	r3, #7
 800747e:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	216e      	movs	r1, #110	; 0x6e
 8007484:	18d3      	adds	r3, r2, r3
 8007486:	185b      	adds	r3, r3, r1
 8007488:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2260      	movs	r2, #96	; 0x60
 800748e:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2267      	movs	r2, #103	; 0x67
 8007494:	5c9b      	ldrb	r3, [r3, r2]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d13d      	bne.n	8007516 <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 800749a:	230e      	movs	r3, #14
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e015      	b.n	80074d0 <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 80074a4:	240e      	movs	r4, #14
 80074a6:	193b      	adds	r3, r7, r4
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	193b      	adds	r3, r7, r4
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	2060      	movs	r0, #96	; 0x60
 80074b4:	188a      	adds	r2, r1, r2
 80074b6:	1812      	adds	r2, r2, r0
 80074b8:	7810      	ldrb	r0, [r2, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	2160      	movs	r1, #96	; 0x60
 80074be:	18d3      	adds	r3, r2, r3
 80074c0:	185b      	adds	r3, r3, r1
 80074c2:	1c02      	adds	r2, r0, #0
 80074c4:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 80074c6:	193b      	adds	r3, r7, r4
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	193b      	adds	r3, r7, r4
 80074cc:	3201      	adds	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	230e      	movs	r3, #14
 80074d2:	18fb      	adds	r3, r7, r3
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d9e4      	bls.n	80074a4 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2266      	movs	r2, #102	; 0x66
 80074de:	5c9b      	ldrb	r3, [r3, r2]
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d80c      	bhi.n	80074fe <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2266      	movs	r2, #102	; 0x66
 80074e8:	5c9b      	ldrb	r3, [r3, r2]
 80074ea:	0019      	movs	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2268      	movs	r2, #104	; 0x68
 80074f0:	185b      	adds	r3, r3, r1
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2263      	movs	r2, #99	; 0x63
 80074fa:	5499      	strb	r1, [r3, r2]
 80074fc:	e00b      	b.n	8007516 <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2266      	movs	r2, #102	; 0x66
 8007502:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 8007504:	3b04      	subs	r3, #4
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	216e      	movs	r1, #110	; 0x6e
 800750a:	18d3      	adds	r3, r2, r3
 800750c:	185b      	adds	r3, r3, r1
 800750e:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2263      	movs	r2, #99	; 0x63
 8007514:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2266      	movs	r2, #102	; 0x66
 800751a:	5c9b      	ldrb	r3, [r3, r2]
 800751c:	3301      	adds	r3, #1
 800751e:	b2d9      	uxtb	r1, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2266      	movs	r2, #102	; 0x66
 8007524:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2266      	movs	r2, #102	; 0x66
 800752a:	5c9b      	ldrb	r3, [r3, r2]
 800752c:	2b07      	cmp	r3, #7
 800752e:	d907      	bls.n	8007540 <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2266      	movs	r2, #102	; 0x66
 8007534:	2100      	movs	r1, #0
 8007536:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2267      	movs	r2, #103	; 0x67
 800753c:	2100      	movs	r1, #0
 800753e:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b005      	add	sp, #20
 8007546:	bd90      	pop	{r4, r7, pc}

08007548 <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	000a      	movs	r2, r1
 8007552:	1cfb      	adds	r3, r7, #3
 8007554:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	1cfa      	adds	r2, r7, #3
 800755a:	2167      	movs	r1, #103	; 0x67
 800755c:	7812      	ldrb	r2, [r2, #0]
 800755e:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2266      	movs	r2, #102	; 0x66
 8007564:	2100      	movs	r1, #0
 8007566:	5499      	strb	r1, [r3, r2]

}
 8007568:	46c0      	nop			; (mov r8, r8)
 800756a:	46bd      	mov	sp, r7
 800756c:	b002      	add	sp, #8
 800756e:	bd80      	pop	{r7, pc}

08007570 <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	000a      	movs	r2, r1
 800757a:	1cfb      	adds	r3, r7, #3
 800757c:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 800757e:	1cfb      	adds	r3, r7, #3
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d108      	bne.n	8007598 <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6858      	ldr	r0, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	2200      	movs	r2, #0
 8007590:	0019      	movs	r1, r3
 8007592:	f7fc fb7e 	bl	8003c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 8007596:	e059      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 8007598:	1cfb      	adds	r3, r7, #3
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d108      	bne.n	80075b2 <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68d8      	ldr	r0, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	891b      	ldrh	r3, [r3, #8]
 80075a8:	2200      	movs	r2, #0
 80075aa:	0019      	movs	r1, r3
 80075ac:	f7fc fb71 	bl	8003c92 <HAL_GPIO_WritePin>
}
 80075b0:	e04c      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 80075b2:	1cfb      	adds	r3, r7, #3
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d108      	bne.n	80075cc <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6958      	ldr	r0, [r3, #20]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8a1b      	ldrh	r3, [r3, #16]
 80075c2:	2200      	movs	r2, #0
 80075c4:	0019      	movs	r1, r3
 80075c6:	f7fc fb64 	bl	8003c92 <HAL_GPIO_WritePin>
}
 80075ca:	e03f      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 80075cc:	1cfb      	adds	r3, r7, #3
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d108      	bne.n	80075e6 <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	69d8      	ldr	r0, [r3, #28]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8b1b      	ldrh	r3, [r3, #24]
 80075dc:	2200      	movs	r2, #0
 80075de:	0019      	movs	r1, r3
 80075e0:	f7fc fb57 	bl	8003c92 <HAL_GPIO_WritePin>
}
 80075e4:	e032      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 80075e6:	1cfb      	adds	r3, r7, #3
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d108      	bne.n	8007600 <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	8c1b      	ldrh	r3, [r3, #32]
 80075f6:	2200      	movs	r2, #0
 80075f8:	0019      	movs	r1, r3
 80075fa:	f7fc fb4a 	bl	8003c92 <HAL_GPIO_WritePin>
}
 80075fe:	e025      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 8007600:	1cfb      	adds	r3, r7, #3
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b06      	cmp	r3, #6
 8007606:	d108      	bne.n	800761a <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007610:	2200      	movs	r2, #0
 8007612:	0019      	movs	r1, r3
 8007614:	f7fc fb3d 	bl	8003c92 <HAL_GPIO_WritePin>
}
 8007618:	e018      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 800761a:	1cfb      	adds	r3, r7, #3
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b07      	cmp	r3, #7
 8007620:	d108      	bne.n	8007634 <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	0019      	movs	r1, r3
 800762e:	f7fc fb30 	bl	8003c92 <HAL_GPIO_WritePin>
}
 8007632:	e00b      	b.n	800764c <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 8007634:	1cfb      	adds	r3, r7, #3
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d107      	bne.n	800764c <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007644:	2200      	movs	r2, #0
 8007646:	0019      	movs	r1, r3
 8007648:	f7fc fb23 	bl	8003c92 <HAL_GPIO_WritePin>
}
 800764c:	46c0      	nop			; (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}

08007654 <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	000a      	movs	r2, r1
 800765e:	1cfb      	adds	r3, r7, #3
 8007660:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 8007662:	1cfb      	adds	r3, r7, #3
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2240      	movs	r2, #64	; 0x40
 8007672:	5a9b      	ldrh	r3, [r3, r2]
 8007674:	2200      	movs	r2, #0
 8007676:	0019      	movs	r1, r3
 8007678:	f7fc fb0b 	bl	8003c92 <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 800767c:	e028      	b.n	80076d0 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 800767e:	1cfb      	adds	r3, r7, #3
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d109      	bne.n	800769a <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2248      	movs	r2, #72	; 0x48
 800768e:	5a9b      	ldrh	r3, [r3, r2]
 8007690:	2200      	movs	r2, #0
 8007692:	0019      	movs	r1, r3
 8007694:	f7fc fafd 	bl	8003c92 <HAL_GPIO_WritePin>
}
 8007698:	e01a      	b.n	80076d0 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 800769a:	1cfb      	adds	r3, r7, #3
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d109      	bne.n	80076b6 <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2250      	movs	r2, #80	; 0x50
 80076aa:	5a9b      	ldrh	r3, [r3, r2]
 80076ac:	2200      	movs	r2, #0
 80076ae:	0019      	movs	r1, r3
 80076b0:	f7fc faef 	bl	8003c92 <HAL_GPIO_WritePin>
}
 80076b4:	e00c      	b.n	80076d0 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 80076b6:	1cfb      	adds	r3, r7, #3
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d108      	bne.n	80076d0 <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2258      	movs	r2, #88	; 0x58
 80076c6:	5a9b      	ldrh	r3, [r3, r2]
 80076c8:	2200      	movs	r2, #0
 80076ca:	0019      	movs	r1, r3
 80076cc:	f7fc fae1 	bl	8003c92 <HAL_GPIO_WritePin>
}
 80076d0:	46c0      	nop			; (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, LED_FIELD_OFF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	5a9b      	ldrh	r3, [r3, r2]
 80076ea:	2201      	movs	r2, #1
 80076ec:	0019      	movs	r1, r3
 80076ee:	f7fc fad0 	bl	8003c92 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, LED_FIELD_OFF);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2248      	movs	r2, #72	; 0x48
 80076fa:	5a9b      	ldrh	r3, [r3, r2]
 80076fc:	2201      	movs	r2, #1
 80076fe:	0019      	movs	r1, r3
 8007700:	f7fc fac7 	bl	8003c92 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, LED_FIELD_OFF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2250      	movs	r2, #80	; 0x50
 800770c:	5a9b      	ldrh	r3, [r3, r2]
 800770e:	2201      	movs	r2, #1
 8007710:	0019      	movs	r1, r3
 8007712:	f7fc fabe 	bl	8003c92 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, LED_FIELD_OFF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2258      	movs	r2, #88	; 0x58
 800771e:	5a9b      	ldrh	r3, [r3, r2]
 8007720:	2201      	movs	r2, #1
 8007722:	0019      	movs	r1, r3
 8007724:	f7fc fab5 	bl	8003c92 <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, LED_SEGMENT_OFF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6858      	ldr	r0, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	2201      	movs	r2, #1
 8007732:	0019      	movs	r1, r3
 8007734:	f7fc faad 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, LED_SEGMENT_OFF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68d8      	ldr	r0, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	891b      	ldrh	r3, [r3, #8]
 8007740:	2201      	movs	r2, #1
 8007742:	0019      	movs	r1, r3
 8007744:	f7fc faa5 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, LED_SEGMENT_OFF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6958      	ldr	r0, [r3, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8a1b      	ldrh	r3, [r3, #16]
 8007750:	2201      	movs	r2, #1
 8007752:	0019      	movs	r1, r3
 8007754:	f7fc fa9d 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, LED_SEGMENT_OFF);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69d8      	ldr	r0, [r3, #28]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8b1b      	ldrh	r3, [r3, #24]
 8007760:	2201      	movs	r2, #1
 8007762:	0019      	movs	r1, r3
 8007764:	f7fc fa95 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, LED_SEGMENT_OFF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8c1b      	ldrh	r3, [r3, #32]
 8007770:	2201      	movs	r2, #1
 8007772:	0019      	movs	r1, r3
 8007774:	f7fc fa8d 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, LED_SEGMENT_OFF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007780:	2201      	movs	r2, #1
 8007782:	0019      	movs	r1, r3
 8007784:	f7fc fa85 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, LED_SEGMENT_OFF);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007790:	2201      	movs	r2, #1
 8007792:	0019      	movs	r1, r3
 8007794:	f7fc fa7d 	bl	8003c92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80077a0:	2201      	movs	r2, #1
 80077a2:	0019      	movs	r1, r3
 80077a4:	f7fc fa75 	bl	8003c92 <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b002      	add	sp, #8
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	000a      	movs	r2, r1
 80077ba:	1cfb      	adds	r3, r7, #3
 80077bc:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 80077be:	1cfb      	adds	r3, r7, #3
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b2f      	cmp	r3, #47	; 0x2f
 80077c4:	d800      	bhi.n	80077c8 <_LEDwriteCharacter+0x18>
 80077c6:	e10f      	b.n	80079e8 <_LEDwriteCharacter+0x238>
 80077c8:	1cfb      	adds	r3, r7, #3
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b39      	cmp	r3, #57	; 0x39
 80077ce:	d900      	bls.n	80077d2 <_LEDwriteCharacter+0x22>
 80077d0:	e10a      	b.n	80079e8 <_LEDwriteCharacter+0x238>
		switch (character) {
 80077d2:	1cfb      	adds	r3, r7, #3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	3b30      	subs	r3, #48	; 0x30
 80077d8:	2b09      	cmp	r3, #9
 80077da:	d900      	bls.n	80077de <_LEDwriteCharacter+0x2e>
 80077dc:	e2e7      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
 80077de:	009a      	lsls	r2, r3, #2
 80077e0:	4bea      	ldr	r3, [pc, #936]	; (8007b8c <_LEDwriteCharacter+0x3dc>)
 80077e2:	18d3      	adds	r3, r2, r3
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2102      	movs	r1, #2
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7ff febf 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2103      	movs	r1, #3
 80077f6:	0018      	movs	r0, r3
 80077f8:	f7ff feba 	bl	8007570 <_LEDsegmentOn>
			break;
 80077fc:	e0f3      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2101      	movs	r1, #1
 8007802:	0018      	movs	r0, r3
 8007804:	f7ff feb4 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2102      	movs	r1, #2
 800780c:	0018      	movs	r0, r3
 800780e:	f7ff feaf 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2107      	movs	r1, #7
 8007816:	0018      	movs	r0, r3
 8007818:	f7ff feaa 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2105      	movs	r1, #5
 8007820:	0018      	movs	r0, r3
 8007822:	f7ff fea5 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2104      	movs	r1, #4
 800782a:	0018      	movs	r0, r3
 800782c:	f7ff fea0 	bl	8007570 <_LEDsegmentOn>
			break;
 8007830:	e0d9      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2101      	movs	r1, #1
 8007836:	0018      	movs	r0, r3
 8007838:	f7ff fe9a 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2102      	movs	r1, #2
 8007840:	0018      	movs	r0, r3
 8007842:	f7ff fe95 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2107      	movs	r1, #7
 800784a:	0018      	movs	r0, r3
 800784c:	f7ff fe90 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2103      	movs	r1, #3
 8007854:	0018      	movs	r0, r3
 8007856:	f7ff fe8b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2104      	movs	r1, #4
 800785e:	0018      	movs	r0, r3
 8007860:	f7ff fe86 	bl	8007570 <_LEDsegmentOn>
			break;
 8007864:	e0bf      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2106      	movs	r1, #6
 800786a:	0018      	movs	r0, r3
 800786c:	f7ff fe80 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2107      	movs	r1, #7
 8007874:	0018      	movs	r0, r3
 8007876:	f7ff fe7b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2102      	movs	r1, #2
 800787e:	0018      	movs	r0, r3
 8007880:	f7ff fe76 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2103      	movs	r1, #3
 8007888:	0018      	movs	r0, r3
 800788a:	f7ff fe71 	bl	8007570 <_LEDsegmentOn>
			break;
 800788e:	e0aa      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2101      	movs	r1, #1
 8007894:	0018      	movs	r0, r3
 8007896:	f7ff fe6b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2106      	movs	r1, #6
 800789e:	0018      	movs	r0, r3
 80078a0:	f7ff fe66 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2107      	movs	r1, #7
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7ff fe61 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2103      	movs	r1, #3
 80078b2:	0018      	movs	r0, r3
 80078b4:	f7ff fe5c 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2104      	movs	r1, #4
 80078bc:	0018      	movs	r0, r3
 80078be:	f7ff fe57 	bl	8007570 <_LEDsegmentOn>
			break;
 80078c2:	e090      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2101      	movs	r1, #1
 80078c8:	0018      	movs	r0, r3
 80078ca:	f7ff fe51 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2103      	movs	r1, #3
 80078d2:	0018      	movs	r0, r3
 80078d4:	f7ff fe4c 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2104      	movs	r1, #4
 80078dc:	0018      	movs	r0, r3
 80078de:	f7ff fe47 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2105      	movs	r1, #5
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7ff fe42 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2106      	movs	r1, #6
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7ff fe3d 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2107      	movs	r1, #7
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7ff fe38 	bl	8007570 <_LEDsegmentOn>
			break;
 8007900:	e071      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2101      	movs	r1, #1
 8007906:	0018      	movs	r0, r3
 8007908:	f7ff fe32 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2102      	movs	r1, #2
 8007910:	0018      	movs	r0, r3
 8007912:	f7ff fe2d 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2103      	movs	r1, #3
 800791a:	0018      	movs	r0, r3
 800791c:	f7ff fe28 	bl	8007570 <_LEDsegmentOn>
			break;
 8007920:	e061      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2101      	movs	r1, #1
 8007926:	0018      	movs	r0, r3
 8007928:	f7ff fe22 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2102      	movs	r1, #2
 8007930:	0018      	movs	r0, r3
 8007932:	f7ff fe1d 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2103      	movs	r1, #3
 800793a:	0018      	movs	r0, r3
 800793c:	f7ff fe18 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2104      	movs	r1, #4
 8007944:	0018      	movs	r0, r3
 8007946:	f7ff fe13 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2105      	movs	r1, #5
 800794e:	0018      	movs	r0, r3
 8007950:	f7ff fe0e 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2106      	movs	r1, #6
 8007958:	0018      	movs	r0, r3
 800795a:	f7ff fe09 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2107      	movs	r1, #7
 8007962:	0018      	movs	r0, r3
 8007964:	f7ff fe04 	bl	8007570 <_LEDsegmentOn>
			break;
 8007968:	e03d      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2101      	movs	r1, #1
 800796e:	0018      	movs	r0, r3
 8007970:	f7ff fdfe 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2102      	movs	r1, #2
 8007978:	0018      	movs	r0, r3
 800797a:	f7ff fdf9 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2103      	movs	r1, #3
 8007982:	0018      	movs	r0, r3
 8007984:	f7ff fdf4 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2104      	movs	r1, #4
 800798c:	0018      	movs	r0, r3
 800798e:	f7ff fdef 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2106      	movs	r1, #6
 8007996:	0018      	movs	r0, r3
 8007998:	f7ff fdea 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2107      	movs	r1, #7
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7ff fde5 	bl	8007570 <_LEDsegmentOn>
			break;
 80079a6:	e01e      	b.n	80079e6 <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2101      	movs	r1, #1
 80079ac:	0018      	movs	r0, r3
 80079ae:	f7ff fddf 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2102      	movs	r1, #2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7ff fdda 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2103      	movs	r1, #3
 80079c0:	0018      	movs	r0, r3
 80079c2:	f7ff fdd5 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2104      	movs	r1, #4
 80079ca:	0018      	movs	r0, r3
 80079cc:	f7ff fdd0 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2105      	movs	r1, #5
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7ff fdcb 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2106      	movs	r1, #6
 80079de:	0018      	movs	r0, r3
 80079e0:	f7ff fdc6 	bl	8007570 <_LEDsegmentOn>
			break;
 80079e4:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 80079e6:	e1e2      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		}
	} else {
		switch (character) {
 80079e8:	1cfb      	adds	r3, r7, #3
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	3b2d      	subs	r3, #45	; 0x2d
 80079ee:	2b47      	cmp	r3, #71	; 0x47
 80079f0:	d900      	bls.n	80079f4 <_LEDwriteCharacter+0x244>
 80079f2:	e1dc      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
 80079f4:	009a      	lsls	r2, r3, #2
 80079f6:	4b66      	ldr	r3, [pc, #408]	; (8007b90 <_LEDwriteCharacter+0x3e0>)
 80079f8:	18d3      	adds	r3, r2, r3
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2101      	movs	r1, #1
 8007a02:	0018      	movs	r0, r3
 8007a04:	f7ff fdb4 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7ff fdaf 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2103      	movs	r1, #3
 8007a16:	0018      	movs	r0, r3
 8007a18:	f7ff fdaa 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2105      	movs	r1, #5
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7ff fda5 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2106      	movs	r1, #6
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7ff fda0 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2107      	movs	r1, #7
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7ff fd9b 	bl	8007570 <_LEDsegmentOn>
			break;
 8007a3a:	e1b8      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2103      	movs	r1, #3
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7ff fd95 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2104      	movs	r1, #4
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f7ff fd90 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2105      	movs	r1, #5
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7ff fd8b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2106      	movs	r1, #6
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7ff fd86 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2107      	movs	r1, #7
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f7ff fd81 	bl	8007570 <_LEDsegmentOn>
			break;
 8007a6e:	e19e      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2101      	movs	r1, #1
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7ff fd7b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2104      	movs	r1, #4
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7ff fd76 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2105      	movs	r1, #5
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff fd71 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2106      	movs	r1, #6
 8007a92:	0018      	movs	r0, r3
 8007a94:	f7ff fd6c 	bl	8007570 <_LEDsegmentOn>
			break;
 8007a98:	e189      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7ff fd66 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2105      	movs	r1, #5
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f7ff fd61 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2107      	movs	r1, #7
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f7ff fd5c 	bl	8007570 <_LEDsegmentOn>
			break;
 8007ab8:	e179      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2101      	movs	r1, #1
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7ff fd56 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7ff fd51 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2103      	movs	r1, #3
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f7ff fd4c 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2104      	movs	r1, #4
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7ff fd47 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2105      	movs	r1, #5
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f7ff fd42 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2106      	movs	r1, #6
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7ff fd3d 	bl	8007570 <_LEDsegmentOn>
			break;
 8007af6:	e15a      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2102      	movs	r1, #2
 8007afc:	0018      	movs	r0, r3
 8007afe:	f7ff fd37 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2103      	movs	r1, #3
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7ff fd32 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2104      	movs	r1, #4
 8007b10:	0018      	movs	r0, r3
 8007b12:	f7ff fd2d 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2105      	movs	r1, #5
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7ff fd28 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2107      	movs	r1, #7
 8007b24:	0018      	movs	r0, r3
 8007b26:	f7ff fd23 	bl	8007570 <_LEDsegmentOn>
			break;
 8007b2a:	e140      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2101      	movs	r1, #1
 8007b30:	0018      	movs	r0, r3
 8007b32:	f7ff fd1d 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2104      	movs	r1, #4
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7ff fd18 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2105      	movs	r1, #5
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7ff fd13 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2106      	movs	r1, #6
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f7ff fd0e 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2107      	movs	r1, #7
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f7ff fd09 	bl	8007570 <_LEDsegmentOn>
			break;
 8007b5e:	e126      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2101      	movs	r1, #1
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7ff fd03 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2105      	movs	r1, #5
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f7ff fcfe 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2106      	movs	r1, #6
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f7ff fcf9 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2107      	movs	r1, #7
 8007b82:	0018      	movs	r0, r3
 8007b84:	f7ff fcf4 	bl	8007570 <_LEDsegmentOn>
			break;
 8007b88:	e111      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	0800b974 	.word	0x0800b974
 8007b90:	0800b99c 	.word	0x0800b99c
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2102      	movs	r1, #2
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f7ff fce9 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2103      	movs	r1, #3
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f7ff fce4 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2105      	movs	r1, #5
 8007bac:	0018      	movs	r0, r3
 8007bae:	f7ff fcdf 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2106      	movs	r1, #6
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f7ff fcda 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2107      	movs	r1, #7
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f7ff fcd5 	bl	8007570 <_LEDsegmentOn>
			break;
 8007bc6:	e0f2      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2103      	movs	r1, #3
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f7ff fccf 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2105      	movs	r1, #5
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f7ff fcca 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2106      	movs	r1, #6
 8007be0:	0018      	movs	r0, r3
 8007be2:	f7ff fcc5 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2107      	movs	r1, #7
 8007bea:	0018      	movs	r0, r3
 8007bec:	f7ff fcc0 	bl	8007570 <_LEDsegmentOn>
			break;
 8007bf0:	e0dd      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7ff fcba 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2103      	movs	r1, #3
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7ff fcb5 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2104      	movs	r1, #4
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f7ff fcb0 	bl	8007570 <_LEDsegmentOn>
			break;
 8007c10:	e0cd      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2104      	movs	r1, #4
 8007c16:	0018      	movs	r0, r3
 8007c18:	f7ff fcaa 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2105      	movs	r1, #5
 8007c20:	0018      	movs	r0, r3
 8007c22:	f7ff fca5 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2106      	movs	r1, #6
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f7ff fca0 	bl	8007570 <_LEDsegmentOn>
			break;
 8007c30:	e0bd      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2101      	movs	r1, #1
 8007c36:	0018      	movs	r0, r3
 8007c38:	f7ff fc9a 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2102      	movs	r1, #2
 8007c40:	0018      	movs	r0, r3
 8007c42:	f7ff fc95 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2103      	movs	r1, #3
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f7ff fc90 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2104      	movs	r1, #4
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7ff fc8b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2105      	movs	r1, #5
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f7ff fc86 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2106      	movs	r1, #6
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f7ff fc81 	bl	8007570 <_LEDsegmentOn>
			break;
 8007c6e:	e09e      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2103      	movs	r1, #3
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7ff fc7b 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2104      	movs	r1, #4
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7ff fc76 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2105      	movs	r1, #5
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f7ff fc71 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2107      	movs	r1, #7
 8007c92:	0018      	movs	r0, r3
 8007c94:	f7ff fc6c 	bl	8007570 <_LEDsegmentOn>
			break;
 8007c98:	e089      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f7ff fc66 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7ff fc61 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2105      	movs	r1, #5
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f7ff fc5c 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2106      	movs	r1, #6
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f7ff fc57 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2107      	movs	r1, #7
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	f7ff fc52 	bl	8007570 <_LEDsegmentOn>
			break;
 8007ccc:	e06f      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2105      	movs	r1, #5
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7ff fc4c 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2107      	movs	r1, #7
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7ff fc47 	bl	8007570 <_LEDsegmentOn>
			break;
 8007ce2:	e064      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f7ff fc41 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2106      	movs	r1, #6
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f7ff fc3c 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2107      	movs	r1, #7
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7ff fc37 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2103      	movs	r1, #3
 8007d06:	0018      	movs	r0, r3
 8007d08:	f7ff fc32 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2104      	movs	r1, #4
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7ff fc2d 	bl	8007570 <_LEDsegmentOn>
			break;
 8007d16:	e04a      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2105      	movs	r1, #5
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f7ff fc27 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2106      	movs	r1, #6
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7ff fc22 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2107      	movs	r1, #7
 8007d30:	0018      	movs	r0, r3
 8007d32:	f7ff fc1d 	bl	8007570 <_LEDsegmentOn>
			break;
 8007d36:	e03a      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7ff fc17 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2103      	movs	r1, #3
 8007d46:	0018      	movs	r0, r3
 8007d48:	f7ff fc12 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2104      	movs	r1, #4
 8007d50:	0018      	movs	r0, r3
 8007d52:	f7ff fc0d 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2105      	movs	r1, #5
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f7ff fc08 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2106      	movs	r1, #6
 8007d64:	0018      	movs	r0, r3
 8007d66:	f7ff fc03 	bl	8007570 <_LEDsegmentOn>
			break;
 8007d6a:	e020      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2107      	movs	r1, #7
 8007d70:	0018      	movs	r0, r3
 8007d72:	f7ff fbfd 	bl	8007570 <_LEDsegmentOn>
			break;
 8007d76:	e01a      	b.n	8007dae <_LEDwriteCharacter+0x5fe>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7ff fbf7 	bl	8007570 <_LEDsegmentOn>
			break;
 8007d82:	e014      	b.n	8007dae <_LEDwriteCharacter+0x5fe>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2101      	movs	r1, #1
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f7ff fbf1 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2102      	movs	r1, #2
 8007d92:	0018      	movs	r0, r3
 8007d94:	f7ff fbec 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2106      	movs	r1, #6
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f7ff fbe7 	bl	8007570 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2107      	movs	r1, #7
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7ff fbe2 	bl	8007570 <_LEDsegmentOn>
			break;
 8007dac:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b002      	add	sp, #8
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	46c0      	nop			; (mov r8, r8)

08007db8 <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	1dbb      	adds	r3, r7, #6
 8007dc6:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1dba      	adds	r2, r7, #6
 8007dd2:	2140      	movs	r1, #64	; 0x40
 8007dd4:	8812      	ldrh	r2, [r2, #0]
 8007dd6:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	2318      	movs	r3, #24
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	2148      	movs	r1, #72	; 0x48
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	18ba      	adds	r2, r7, r2
 8007df6:	2150      	movs	r1, #80	; 0x50
 8007df8:	8812      	ldrh	r2, [r2, #0]
 8007dfa:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e00:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2228      	movs	r2, #40	; 0x28
 8007e06:	18ba      	adds	r2, r7, r2
 8007e08:	2158      	movs	r1, #88	; 0x58
 8007e0a:	8812      	ldrh	r2, [r2, #0]
 8007e0c:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e12:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2230      	movs	r2, #48	; 0x30
 8007e18:	18ba      	adds	r2, r7, r2
 8007e1a:	8812      	ldrh	r2, [r2, #0]
 8007e1c:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e22:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2238      	movs	r2, #56	; 0x38
 8007e28:	18ba      	adds	r2, r7, r2
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e32:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2240      	movs	r2, #64	; 0x40
 8007e38:	18ba      	adds	r2, r7, r2
 8007e3a:	8812      	ldrh	r2, [r2, #0]
 8007e3c:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e42:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2248      	movs	r2, #72	; 0x48
 8007e48:	18ba      	adds	r2, r7, r2
 8007e4a:	8812      	ldrh	r2, [r2, #0]
 8007e4c:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e52:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2250      	movs	r2, #80	; 0x50
 8007e58:	18ba      	adds	r2, r7, r2
 8007e5a:	8812      	ldrh	r2, [r2, #0]
 8007e5c:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2240      	movs	r2, #64	; 0x40
 8007e68:	2118      	movs	r1, #24
 8007e6a:	468c      	mov	ip, r1
 8007e6c:	44bc      	add	ip, r7
 8007e6e:	4462      	add	r2, ip
 8007e70:	8812      	ldrh	r2, [r2, #0]
 8007e72:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e78:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2248      	movs	r2, #72	; 0x48
 8007e7e:	2118      	movs	r1, #24
 8007e80:	468c      	mov	ip, r1
 8007e82:	44bc      	add	ip, r7
 8007e84:	4462      	add	r2, ip
 8007e86:	8812      	ldrh	r2, [r2, #0]
 8007e88:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2250      	movs	r2, #80	; 0x50
 8007e94:	2118      	movs	r1, #24
 8007e96:	468c      	mov	ip, r1
 8007e98:	44bc      	add	ip, r7
 8007e9a:	4462      	add	r2, ip
 8007e9c:	8812      	ldrh	r2, [r2, #0]
 8007e9e:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f000 f82f 	bl	8007f06 <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2265      	movs	r2, #101	; 0x65
 8007eac:	2100      	movs	r1, #0
 8007eae:	5499      	strb	r1, [r3, r2]
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b004      	add	sp, #16
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char* separator){
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8007ec2:	230f      	movs	r3, #15
 8007ec4:	18fb      	adds	r3, r7, r3
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	e012      	b.n	8007ef2 <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 8007ecc:	240f      	movs	r4, #15
 8007ece:	193b      	adds	r3, r7, r4
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	18d2      	adds	r2, r2, r3
 8007ed6:	193b      	adds	r3, r7, r4
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	7810      	ldrb	r0, [r2, #0]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	2168      	movs	r1, #104	; 0x68
 8007ee0:	18d3      	adds	r3, r2, r3
 8007ee2:	185b      	adds	r3, r3, r1
 8007ee4:	1c02      	adds	r2, r0, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8007ee8:	193b      	adds	r3, r7, r4
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	193b      	adds	r3, r7, r4
 8007eee:	3201      	adds	r2, #1
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	230f      	movs	r3, #15
 8007ef4:	18fb      	adds	r3, r7, r3
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d9e7      	bls.n	8007ecc <LEDseparator+0x14>
	}
}
 8007efc:	46c0      	nop			; (mov r8, r8)
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	46bd      	mov	sp, r7
 8007f02:	b005      	add	sp, #20
 8007f04:	bd90      	pop	{r4, r7, pc}

08007f06 <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3360      	adds	r3, #96	; 0x60
 8007f12:	2204      	movs	r2, #4
 8007f14:	2120      	movs	r1, #32
 8007f16:	0018      	movs	r0, r3
 8007f18:	f003 fc4f 	bl	800b7ba <memset>
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2264      	movs	r2, #100	; 0x64
 8007f20:	2104      	movs	r1, #4
 8007f22:	5499      	strb	r1, [r3, r2]
	_LEDallOff(LEDdisplay);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	0018      	movs	r0, r3
 8007f28:	f7ff fbd6 	bl	80076d8 <_LEDallOff>
}
 8007f2c:	46c0      	nop			; (mov r8, r8)
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b002      	add	sp, #8
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	0008      	movs	r0, r1
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	0019      	movs	r1, r3
 8007f42:	230b      	movs	r3, #11
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	1c02      	adds	r2, r0, #0
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	230a      	movs	r3, #10
 8007f4c:	18fb      	adds	r3, r7, r3
 8007f4e:	1c0a      	adds	r2, r1, #0
 8007f50:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8007f52:	2317      	movs	r3, #23
 8007f54:	18fb      	adds	r3, r7, r3
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e02f      	b.n	8007fbc <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 8007f5c:	230a      	movs	r3, #10
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10e      	bne.n	8007f84 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 8007f66:	2117      	movs	r1, #23
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	18d2      	adds	r2, r2, r3
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	7810      	ldrb	r0, [r2, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	2160      	movs	r1, #96	; 0x60
 8007f7a:	18d3      	adds	r3, r2, r3
 8007f7c:	185b      	adds	r3, r3, r1
 8007f7e:	1c02      	adds	r2, r0, #0
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	e015      	b.n	8007fb0 <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 8007f84:	2117      	movs	r1, #23
 8007f86:	187b      	adds	r3, r7, r1
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	18d2      	adds	r2, r2, r3
 8007f8e:	187b      	adds	r3, r7, r1
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	7810      	ldrb	r0, [r2, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	216e      	movs	r1, #110	; 0x6e
 8007f98:	18d3      	adds	r3, r2, r3
 8007f9a:	185b      	adds	r3, r3, r1
 8007f9c:	1c02      	adds	r2, r0, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8007fa0:	230a      	movs	r3, #10
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	0011      	movs	r1, r2
 8007faa:	0018      	movs	r0, r3
 8007fac:	f7ff facc 	bl	8007548 <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8007fb0:	2117      	movs	r1, #23
 8007fb2:	187b      	adds	r3, r7, r1
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	187b      	adds	r3, r7, r1
 8007fb8:	3201      	adds	r2, #1
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	2317      	movs	r3, #23
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d9ca      	bls.n	8007f5c <LEDstr+0x28>
		}

	}
}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	46c0      	nop			; (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b006      	add	sp, #24
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	000a      	movs	r2, r1
 8007fda:	1cfb      	adds	r3, r7, #3
 8007fdc:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	1cfa      	adds	r2, r7, #3
 8007fe2:	2164      	movs	r1, #100	; 0x64
 8007fe4:	7812      	ldrb	r2, [r2, #0]
 8007fe6:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8007fe8:	46c0      	nop			; (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b002      	add	sp, #8
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <adcInit>:
 *
 * @param  adc handler
 *
 * @retval None
 */
void adcInit(ADC_HandleTypeDef *adcHandler){
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(adcHandler);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f7fb fb68 	bl	80036d0 <HAL_ADCEx_Calibration_Start>
}
 8008000:	46c0      	nop			; (mov r8, r8)
 8008002:	46bd      	mov	sp, r7
 8008004:	b002      	add	sp, #8
 8008006:	bd80      	pop	{r7, pc}

08008008 <adcSetChannel>:
 *
 * @param adc channel- e.g. ADC_CHANNEL_0, ADC_CHANNEL_TEMPSENSOR
 *
 * @retval None
 */
void adcSetChannel(ADC_HandleTypeDef *adcHandler, uint32_t channel) {
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef chConf = { 0 };
 8008012:	240c      	movs	r4, #12
 8008014:	193b      	adds	r3, r7, r4
 8008016:	0018      	movs	r0, r3
 8008018:	230c      	movs	r3, #12
 800801a:	001a      	movs	r2, r3
 800801c:	2100      	movs	r1, #0
 800801e:	f003 fbcc 	bl	800b7ba <memset>
	chConf.Channel = channel;
 8008022:	193b      	adds	r3, r7, r4
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	601a      	str	r2, [r3, #0]
	chConf.Rank = ADC_REGULAR_RANK_1;
 8008028:	193b      	adds	r3, r7, r4
 800802a:	2200      	movs	r2, #0
 800802c:	605a      	str	r2, [r3, #4]
	chConf.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800802e:	193b      	adds	r3, r7, r4
 8008030:	2200      	movs	r2, #0
 8008032:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(adcHandler, &chConf) != HAL_OK) {
 8008034:	193a      	adds	r2, r7, r4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	0011      	movs	r1, r2
 800803a:	0018      	movs	r0, r3
 800803c:	f7fb f868 	bl	8003110 <HAL_ADC_ConfigChannel>
 8008040:	1e03      	subs	r3, r0, #0
 8008042:	d001      	beq.n	8008048 <adcSetChannel+0x40>
		Error_Handler();
 8008044:	f001 fefa 	bl	8009e3c <Error_Handler>
	}

}
 8008048:	46c0      	nop			; (mov r8, r8)
 800804a:	46bd      	mov	sp, r7
 800804c:	b007      	add	sp, #28
 800804e:	bd90      	pop	{r4, r7, pc}

08008050 <adcRead>:
 *
 * @param  adc handler
 *
 * @retval raw adc reading
 */
uint32_t adcRead(ADC_HandleTypeDef *adcHandler){
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adcHandler);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	0018      	movs	r0, r3
 800805c:	f7fa ff6a 	bl	8002f34 <HAL_ADC_Start>

	while(HAL_ADC_PollForConversion(adcHandler, 100) != HAL_OK);
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2164      	movs	r1, #100	; 0x64
 8008066:	0018      	movs	r0, r3
 8008068:	f7fa ffb2 	bl	8002fd0 <HAL_ADC_PollForConversion>
 800806c:	1e03      	subs	r3, r0, #0
 800806e:	d1f8      	bne.n	8008062 <adcRead+0x12>
	return HAL_ADC_GetValue(adcHandler);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	0018      	movs	r0, r3
 8008074:	f7fb f840 	bl	80030f8 <HAL_ADC_GetValue>
 8008078:	0003      	movs	r3, r0


}
 800807a:	0018      	movs	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	b002      	add	sp, #8
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <adcTemperature>:
 *
 * @param  adc handler
 *
 * @retval temperature in Celcius degree
 */
uint32_t adcTemperature(uint32_t adcReading, uint32_t reference){
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
	return __HAL_ADC_CALC_TEMPERATURE(reference, adcReading, ADC_RESOLUTION_12B);
 800808e:	4b13      	ldr	r3, [pc, #76]	; (80080dc <adcTemperature+0x58>)
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <adcTemperature+0x5c>)
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d01a      	beq.n	80080d0 <adcTemperature+0x4c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	4353      	muls	r3, r2
 80080a0:	4910      	ldr	r1, [pc, #64]	; (80080e4 <adcTemperature+0x60>)
 80080a2:	0018      	movs	r0, r3
 80080a4:	f7f8 f82e 	bl	8000104 <__udivsi3>
 80080a8:	0003      	movs	r3, r0
 80080aa:	001a      	movs	r2, r3
 80080ac:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <adcTemperature+0x5c>)
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2264      	movs	r2, #100	; 0x64
 80080b4:	4353      	muls	r3, r2
 80080b6:	4a09      	ldr	r2, [pc, #36]	; (80080dc <adcTemperature+0x58>)
 80080b8:	8812      	ldrh	r2, [r2, #0]
 80080ba:	0011      	movs	r1, r2
 80080bc:	4a08      	ldr	r2, [pc, #32]	; (80080e0 <adcTemperature+0x5c>)
 80080be:	8812      	ldrh	r2, [r2, #0]
 80080c0:	1a8a      	subs	r2, r1, r2
 80080c2:	0011      	movs	r1, r2
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7f8 f8a7 	bl	8000218 <__divsi3>
 80080ca:	0003      	movs	r3, r0
 80080cc:	331e      	adds	r3, #30
 80080ce:	e000      	b.n	80080d2 <adcTemperature+0x4e>
 80080d0:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <adcTemperature+0x64>)
}
 80080d2:	0018      	movs	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b002      	add	sp, #8
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	1fff75ca 	.word	0x1fff75ca
 80080e0:	1fff75a8 	.word	0x1fff75a8
 80080e4:	00000bb8 	.word	0x00000bb8
 80080e8:	00007fff 	.word	0x00007fff

080080ec <adcVoltage>:
 *
 * @param  adc handler
 *
 * @retval voltage in mV
 */
uint32_t adcVoltage(uint32_t adcReading){
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
//	return (3300*1000)/4095;
	return __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcReading, ADC_RESOLUTION_12B);
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <adcVoltage+0x24>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	001a      	movs	r2, r3
 80080fa:	4b06      	ldr	r3, [pc, #24]	; (8008114 <adcVoltage+0x28>)
 80080fc:	4353      	muls	r3, r2
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	0018      	movs	r0, r3
 8008102:	f7f7 ffff 	bl	8000104 <__udivsi3>
 8008106:	0003      	movs	r3, r0
}
 8008108:	0018      	movs	r0, r3
 800810a:	46bd      	mov	sp, r7
 800810c:	b002      	add	sp, #8
 800810e:	bd80      	pop	{r7, pc}
 8008110:	1fff75aa 	.word	0x1fff75aa
 8008114:	00000bb8 	.word	0x00000bb8

08008118 <bme280Init>:
//									COMP FUNCTIONS DECLARATIONS
int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T);
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P);
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H);

void bme280Init(bme280TypeDef *bme280, I2C_HandleTypeDef *I2Chandler) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af04      	add	r7, sp, #16
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]

	bme280->I2Chandler = I2Chandler;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	65da      	str	r2, [r3, #92]	; 0x5c

	bme280->i2cTimeout = BME280_I2C_TIMEOUT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2264      	movs	r2, #100	; 0x64
 800812c:	749a      	strb	r2, [r3, #18]

	bme280->ctrlHum = 0x0; //oversampling for humidity disabled
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	745a      	strb	r2, [r3, #17]
	bme280->ctrlMeas = 0x25; //oversampling for temp, pressure; mode
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2225      	movs	r2, #37	; 0x25
 8008138:	741a      	strb	r2, [r3, #16]

	//								READING CALIBRATION DATA

	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			bme280->dig_T, 6, bme280->i2cTimeout) != HAL_OK) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	333c      	adds	r3, #60	; 0x3c
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	7c92      	ldrb	r2, [r2, #18]
	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 8008146:	9202      	str	r2, [sp, #8]
 8008148:	2206      	movs	r2, #6
 800814a:	9201      	str	r2, [sp, #4]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2301      	movs	r3, #1
 8008150:	2288      	movs	r2, #136	; 0x88
 8008152:	21ee      	movs	r1, #238	; 0xee
 8008154:	f7fb ffa8 	bl	80040a8 <HAL_I2C_Mem_Read>

	}
	bme280->dig_T1 = ((uint16_t) bme280->dig_T[0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	223c      	movs	r2, #60	; 0x3c
 800815c:	5c9b      	ldrb	r3, [r3, r2]
 800815e:	b21a      	sxth	r2, r3
			| (uint16_t) bme280->dig_T[1] << 8);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	213d      	movs	r1, #61	; 0x3d
 8008164:	5c5b      	ldrb	r3, [r3, r1]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	b21b      	sxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	b21b      	sxth	r3, r3
 800816e:	b29a      	uxth	r2, r3
	bme280->dig_T1 = ((uint16_t) bme280->dig_T[0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	829a      	strh	r2, [r3, #20]
	bme280->dig_T2 = ((int16_t) bme280->dig_T[2]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	223e      	movs	r2, #62	; 0x3e
 8008178:	5c9b      	ldrb	r3, [r3, r2]
 800817a:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_T[3] << 8);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	213f      	movs	r1, #63	; 0x3f
 8008180:	5c5b      	ldrb	r3, [r3, r1]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	b21b      	sxth	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b21a      	sxth	r2, r3
	bme280->dig_T2 = ((int16_t) bme280->dig_T[2]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	82da      	strh	r2, [r3, #22]
	bme280->dig_T3 = ((int16_t) bme280->dig_T[4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2240      	movs	r2, #64	; 0x40
 8008192:	5c9b      	ldrb	r3, [r3, r2]
 8008194:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_T[4] << 8);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2140      	movs	r1, #64	; 0x40
 800819a:	5c5b      	ldrb	r3, [r3, r1]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	b21b      	sxth	r3, r3
 80081a0:	4313      	orrs	r3, r2
 80081a2:	b21a      	sxth	r2, r3
	bme280->dig_T3 = ((int16_t) bme280->dig_T[4]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	831a      	strh	r2, [r3, #24]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			bme280->dig_P, 18, bme280->i2cTimeout);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3342      	adds	r3, #66	; 0x42
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c92      	ldrb	r2, [r2, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 80081b4:	9202      	str	r2, [sp, #8]
 80081b6:	2212      	movs	r2, #18
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2301      	movs	r3, #1
 80081be:	228e      	movs	r2, #142	; 0x8e
 80081c0:	21ee      	movs	r1, #238	; 0xee
 80081c2:	f7fb ff71 	bl	80040a8 <HAL_I2C_Mem_Read>
	bme280->dig_P1 = ((uint16_t) bme280->dig_P[0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2242      	movs	r2, #66	; 0x42
 80081ca:	5c9b      	ldrb	r3, [r3, r2]
 80081cc:	b21a      	sxth	r2, r3
			| (uint16_t) bme280->dig_P[1] << 8);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2143      	movs	r1, #67	; 0x43
 80081d2:	5c5b      	ldrb	r3, [r3, r1]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	b21b      	sxth	r3, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	b21b      	sxth	r3, r3
 80081dc:	b29a      	uxth	r2, r3
	bme280->dig_P1 = ((uint16_t) bme280->dig_P[0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	835a      	strh	r2, [r3, #26]
	bme280->dig_P2 = ((int16_t) bme280->dig_P[2]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2244      	movs	r2, #68	; 0x44
 80081e6:	5c9b      	ldrb	r3, [r3, r2]
 80081e8:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[3] << 8);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2145      	movs	r1, #69	; 0x45
 80081ee:	5c5b      	ldrb	r3, [r3, r1]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b21b      	sxth	r3, r3
 80081f4:	4313      	orrs	r3, r2
 80081f6:	b21a      	sxth	r2, r3
	bme280->dig_P2 = ((int16_t) bme280->dig_P[2]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	839a      	strh	r2, [r3, #28]
	bme280->dig_P3 = ((int16_t) bme280->dig_P[4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2246      	movs	r2, #70	; 0x46
 8008200:	5c9b      	ldrb	r3, [r3, r2]
 8008202:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[5] << 8);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2147      	movs	r1, #71	; 0x47
 8008208:	5c5b      	ldrb	r3, [r3, r1]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	b21b      	sxth	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b21a      	sxth	r2, r3
	bme280->dig_P3 = ((int16_t) bme280->dig_P[4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	83da      	strh	r2, [r3, #30]
	bme280->dig_P4 = ((int16_t) bme280->dig_P[6]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2248      	movs	r2, #72	; 0x48
 800821a:	5c9b      	ldrb	r3, [r3, r2]
 800821c:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[7] << 8);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2149      	movs	r1, #73	; 0x49
 8008222:	5c5b      	ldrb	r3, [r3, r1]
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	b21b      	sxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b21a      	sxth	r2, r3
	bme280->dig_P4 = ((int16_t) bme280->dig_P[6]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	841a      	strh	r2, [r3, #32]
	bme280->dig_P5 = ((int16_t) bme280->dig_P[8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	224a      	movs	r2, #74	; 0x4a
 8008234:	5c9b      	ldrb	r3, [r3, r2]
 8008236:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[9] << 8);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	214b      	movs	r1, #75	; 0x4b
 800823c:	5c5b      	ldrb	r3, [r3, r1]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	b21b      	sxth	r3, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	b21a      	sxth	r2, r3
	bme280->dig_P5 = ((int16_t) bme280->dig_P[8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280->dig_P6 = ((int16_t) bme280->dig_P[10]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	224c      	movs	r2, #76	; 0x4c
 800824e:	5c9b      	ldrb	r3, [r3, r2]
 8008250:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[11] << 8);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	214d      	movs	r1, #77	; 0x4d
 8008256:	5c5b      	ldrb	r3, [r3, r1]
 8008258:	021b      	lsls	r3, r3, #8
 800825a:	b21b      	sxth	r3, r3
 800825c:	4313      	orrs	r3, r2
 800825e:	b21a      	sxth	r2, r3
	bme280->dig_P6 = ((int16_t) bme280->dig_P[10]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280->dig_P7 = ((int16_t) bme280->dig_P[12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	224e      	movs	r2, #78	; 0x4e
 8008268:	5c9b      	ldrb	r3, [r3, r2]
 800826a:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[13] << 8);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	214f      	movs	r1, #79	; 0x4f
 8008270:	5c5b      	ldrb	r3, [r3, r1]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	b21b      	sxth	r3, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	b21a      	sxth	r2, r3
	bme280->dig_P7 = ((int16_t) bme280->dig_P[12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280->dig_P8 = ((int16_t) bme280->dig_P[14]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2250      	movs	r2, #80	; 0x50
 8008282:	5c9b      	ldrb	r3, [r3, r2]
 8008284:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[15] << 8);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2151      	movs	r1, #81	; 0x51
 800828a:	5c5b      	ldrb	r3, [r3, r1]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	b21b      	sxth	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b21a      	sxth	r2, r3
	bme280->dig_P8 = ((int16_t) bme280->dig_P[14]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280->dig_P9 = ((int16_t) bme280->dig_P[16]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2252      	movs	r2, #82	; 0x52
 800829c:	5c9b      	ldrb	r3, [r3, r2]
 800829e:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_P[17] << 8);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2153      	movs	r1, #83	; 0x53
 80082a4:	5c5b      	ldrb	r3, [r3, r1]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	b21b      	sxth	r3, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	b21a      	sxth	r2, r3
	bme280->dig_P9 = ((int16_t) bme280->dig_P[16]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	855a      	strh	r2, [r3, #42]	; 0x2a

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3354      	adds	r3, #84	; 0x54
			&bme280->dig_H_1, 1, bme280->i2cTimeout);
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	7c92      	ldrb	r2, [r2, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 80082be:	9202      	str	r2, [sp, #8]
 80082c0:	2201      	movs	r2, #1
 80082c2:	9201      	str	r2, [sp, #4]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2301      	movs	r3, #1
 80082c8:	22a1      	movs	r2, #161	; 0xa1
 80082ca:	21ee      	movs	r1, #238	; 0xee
 80082cc:	f7fb feec 	bl	80040a8 <HAL_I2C_Mem_Read>
	bme280->dig_H1 = ((unsigned char) bme280->dig_H_1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2254      	movs	r2, #84	; 0x54
 80082d4:	5c99      	ldrb	r1, [r3, r2]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	222c      	movs	r2, #44	; 0x2c
 80082da:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			bme280->dig_H_2_6, 7, bme280->i2cTimeout);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3355      	adds	r3, #85	; 0x55
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c92      	ldrb	r2, [r2, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 80082e8:	9202      	str	r2, [sp, #8]
 80082ea:	2207      	movs	r2, #7
 80082ec:	9201      	str	r2, [sp, #4]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2301      	movs	r3, #1
 80082f2:	22e1      	movs	r2, #225	; 0xe1
 80082f4:	21ee      	movs	r1, #238	; 0xee
 80082f6:	f7fb fed7 	bl	80040a8 <HAL_I2C_Mem_Read>
	bme280->dig_H2 = ((int16_t) bme280->dig_H_2_6[0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2255      	movs	r2, #85	; 0x55
 80082fe:	5c9b      	ldrb	r3, [r3, r2]
 8008300:	b21a      	sxth	r2, r3
			| (int16_t) bme280->dig_H_2_6[1] << 8);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2156      	movs	r1, #86	; 0x56
 8008306:	5c5b      	ldrb	r3, [r3, r1]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	b21b      	sxth	r3, r3
 800830c:	4313      	orrs	r3, r2
 800830e:	b21a      	sxth	r2, r3
	bme280->dig_H2 = ((int16_t) bme280->dig_H_2_6[0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	85da      	strh	r2, [r3, #46]	; 0x2e
	bme280->dig_H3 = ((unsigned char) bme280->dig_H_2_6[2]);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2257      	movs	r2, #87	; 0x57
 8008318:	5c99      	ldrb	r1, [r3, r2]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2230      	movs	r2, #48	; 0x30
 800831e:	5499      	strb	r1, [r3, r2]

	bme280->dig_H4 = (((int16_t) bme280->dig_H_2_6[3]) << 4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2258      	movs	r2, #88	; 0x58
 8008324:	5c9b      	ldrb	r3, [r3, r2]
 8008326:	011b      	lsls	r3, r3, #4
			| (((int16_t) bme280->dig_H_2_6[4]) & 0x0f));
 8008328:	b21a      	sxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2159      	movs	r1, #89	; 0x59
 800832e:	5c5b      	ldrb	r3, [r3, r1]
 8008330:	b21b      	sxth	r3, r3
 8008332:	210f      	movs	r1, #15
 8008334:	400b      	ands	r3, r1
 8008336:	b21b      	sxth	r3, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	b21a      	sxth	r2, r3
	bme280->dig_H4 = (((int16_t) bme280->dig_H_2_6[3]) << 4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	865a      	strh	r2, [r3, #50]	; 0x32
	bme280->dig_H5 = (((int16_t) bme280->dig_H_2_6[4]) >> 4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2259      	movs	r2, #89	; 0x59
 8008344:	5c9b      	ldrb	r3, [r3, r2]
			| ((int16_t) bme280->dig_H_2_6[5]) << 4);
 8008346:	091b      	lsrs	r3, r3, #4
 8008348:	b2db      	uxtb	r3, r3
 800834a:	b21a      	sxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	215a      	movs	r1, #90	; 0x5a
 8008350:	5c5b      	ldrb	r3, [r3, r1]
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	b21b      	sxth	r3, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	b21a      	sxth	r2, r3
	bme280->dig_H5 = (((int16_t) bme280->dig_H_2_6[4]) >> 4
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	869a      	strh	r2, [r3, #52]	; 0x34
	bme280->dig_H6 = ((unsigned char) bme280->dig_H_2_6[6]);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	225b      	movs	r2, #91	; 0x5b
 8008362:	5c99      	ldrb	r1, [r3, r2]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2236      	movs	r2, #54	; 0x36
 8008368:	5499      	strb	r1, [r3, r2]
}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	46bd      	mov	sp, r7
 800836e:	b002      	add	sp, #8
 8008370:	bd80      	pop	{r7, pc}

08008372 <bme280Read>:

void bme280Read(bme280TypeDef *bme280) {
 8008372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008374:	b08d      	sub	sp, #52	; 0x34
 8008376:	af04      	add	r7, sp, #16
 8008378:	6078      	str	r0, [r7, #4]
	uint8_t temperatureMSB = 0;
 800837a:	2413      	movs	r4, #19
 800837c:	193b      	adds	r3, r7, r4
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureLSB = 0;
 8008382:	2512      	movs	r5, #18
 8008384:	197b      	adds	r3, r7, r5
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureXLSB = 0;
 800838a:	2611      	movs	r6, #17
 800838c:	19bb      	adds	r3, r7, r6
 800838e:	2200      	movs	r2, #0
 8008390:	701a      	strb	r2, [r3, #0]

	uint8_t pressureMSB = 0;
 8008392:	2310      	movs	r3, #16
 8008394:	18fb      	adds	r3, r7, r3
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
	uint8_t pressureLSB = 0;
 800839a:	220f      	movs	r2, #15
 800839c:	18bb      	adds	r3, r7, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
	uint8_t pressureXLSB = 0;
 80083a2:	210e      	movs	r1, #14
 80083a4:	187b      	adds	r3, r7, r1
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]

	uint8_t humidityMSB = 0;
 80083aa:	200d      	movs	r0, #13
 80083ac:	183b      	adds	r3, r7, r0
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]
	uint8_t humidityLSB = 0;
 80083b2:	220c      	movs	r2, #12
 80083b4:	18bb      	adds	r3, r7, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]

	//adc data
	int32_t temperatureADC = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
	int32_t pressureADC = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
	int32_t humidityADC = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3311      	adds	r3, #17
			&bme280->ctrlHum, 1, bme280->i2cTimeout); //write humidity oversampling
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	7c92      	ldrb	r2, [r2, #18]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 80083d2:	9202      	str	r2, [sp, #8]
 80083d4:	2201      	movs	r2, #1
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	2301      	movs	r3, #1
 80083dc:	22f2      	movs	r2, #242	; 0xf2
 80083de:	21ee      	movs	r1, #238	; 0xee
 80083e0:	f7fb fd34 	bl	8003e4c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3310      	adds	r3, #16
			&bme280->ctrlMeas, 1, bme280->i2cTimeout); //write temp and press oversampling; write mode
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c92      	ldrb	r2, [r2, #18]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	2201      	movs	r2, #1
 80083f4:	9201      	str	r2, [sp, #4]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2301      	movs	r3, #1
 80083fa:	22f4      	movs	r2, #244	; 0xf4
 80083fc:	21ee      	movs	r1, #238	; 0xee
 80083fe:	f7fb fd25 	bl	8003e4c <HAL_I2C_Mem_Write>

	HAL_Delay(70); //wait for measurement
 8008402:	2046      	movs	r0, #70	; 0x46
 8008404:	f7fa fa3e 	bl	8002884 <HAL_Delay>

	//HUMIDITY

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_HUM_MSB_REG, 1,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			&humidityMSB, 1, bme280->i2cTimeout);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_HUM_MSB_REG, 1,
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	2301      	movs	r3, #1
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	230d      	movs	r3, #13
 8008418:	18fb      	adds	r3, r7, r3
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	2301      	movs	r3, #1
 800841e:	22fd      	movs	r2, #253	; 0xfd
 8008420:	21ee      	movs	r1, #238	; 0xee
 8008422:	f7fb fe41 	bl	80040a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_HUM_LSB_REG, 1,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			&humidityLSB, 1, bme280->i2cTimeout);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_HUM_LSB_REG, 1,
 800842e:	9302      	str	r3, [sp, #8]
 8008430:	2301      	movs	r3, #1
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	220c      	movs	r2, #12
 8008436:	18bb      	adds	r3, r7, r2
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	2301      	movs	r3, #1
 800843c:	22fe      	movs	r2, #254	; 0xfe
 800843e:	21ee      	movs	r1, #238	; 0xee
 8008440:	f7fb fe32 	bl	80040a8 <HAL_I2C_Mem_Read>

	humidityADC = (((int32_t) humidityMSB << 8) | (int32_t) humidityLSB);
 8008444:	200d      	movs	r0, #13
 8008446:	183b      	adds	r3, r7, r0
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	200c      	movs	r0, #12
 800844e:	183a      	adds	r2, r7, r0
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	0011      	movs	r1, r2
 800845c:	0018      	movs	r0, r3
 800845e:	f000 fa71 	bl	8008944 <_BME280_compensate_H_int32>
 8008462:	0003      	movs	r3, r0
			/ 1024;
 8008464:	0a9a      	lsrs	r2, r3, #10
	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60da      	str	r2, [r3, #12]

	//TEMPERATURE

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_TEMP_MSB_REG, 1, &temperatureMSB,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			1, bme280->i2cTimeout);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_TEMP_MSB_REG, 1, &temperatureMSB,
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	2301      	movs	r3, #1
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	193b      	adds	r3, r7, r4
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	2301      	movs	r3, #1
 800847e:	22fa      	movs	r2, #250	; 0xfa
 8008480:	21ee      	movs	r1, #238	; 0xee
 8008482:	f7fb fe11 	bl	80040a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_TEMP_LSB_REG, 1, &temperatureLSB,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			1, bme280->i2cTimeout);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_TEMP_LSB_REG, 1, &temperatureLSB,
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	2301      	movs	r3, #1
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	197b      	adds	r3, r7, r5
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	2301      	movs	r3, #1
 800849a:	22fb      	movs	r2, #251	; 0xfb
 800849c:	21ee      	movs	r1, #238	; 0xee
 800849e:	f7fb fe03 	bl	80040a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_TEMP_XLSB_REG, 1, &temperatureXLSB,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			1, bme280->i2cTimeout);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_TEMP_XLSB_REG, 1, &temperatureXLSB,
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	2301      	movs	r3, #1
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	19bb      	adds	r3, r7, r6
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2301      	movs	r3, #1
 80084b6:	22fc      	movs	r2, #252	; 0xfc
 80084b8:	21ee      	movs	r1, #238	; 0xee
 80084ba:	f7fb fdf5 	bl	80040a8 <HAL_I2C_Mem_Read>

	temperatureADC =
			((((int32_t) temperatureMSB << 12) | ((int32_t) temperatureLSB << 4)
 80084be:	193b      	adds	r3, r7, r4
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	031a      	lsls	r2, r3, #12
 80084c4:	197b      	adds	r3, r7, r5
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	4313      	orrs	r3, r2
					| ((int32_t) temperatureXLSB >> 4)));
 80084cc:	19ba      	adds	r2, r7, r6
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	0912      	lsrs	r2, r2, #4
 80084d2:	b2d2      	uxtb	r2, r2
	temperatureADC =
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61fb      	str	r3, [r7, #28]

	bme280->temperatureValue = (_BME280_compensate_T_int32(bme280, temperatureADC));
 80084d8:	69fa      	ldr	r2, [r7, #28]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	0011      	movs	r1, r2
 80084de:	0018      	movs	r0, r3
 80084e0:	f000 f84b 	bl	800857a <_BME280_compensate_T_int32>
 80084e4:	0002      	movs	r2, r0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	605a      	str	r2, [r3, #4]

	//PRESSURE

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1, &pressureMSB, 1,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			bme280->i2cTimeout);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1, &pressureMSB, 1,
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	2301      	movs	r3, #1
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	2410      	movs	r4, #16
 80084fa:	193b      	adds	r3, r7, r4
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	2301      	movs	r3, #1
 8008500:	22f7      	movs	r2, #247	; 0xf7
 8008502:	21ee      	movs	r1, #238	; 0xee
 8008504:	f7fb fdd0 	bl	80040a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_LSB_REG, 1, &pressureLSB, 1,
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			bme280->i2cTimeout);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_LSB_REG, 1, &pressureLSB, 1,
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	2301      	movs	r3, #1
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	250f      	movs	r5, #15
 8008518:	197b      	adds	r3, r7, r5
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	2301      	movs	r3, #1
 800851e:	22f8      	movs	r2, #248	; 0xf8
 8008520:	21ee      	movs	r1, #238	; 0xee
 8008522:	f7fb fdc1 	bl	80040a8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_XLSB_REG, 1, &pressureXLSB,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			1, bme280->i2cTimeout);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7c9b      	ldrb	r3, [r3, #18]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_XLSB_REG, 1, &pressureXLSB,
 800852e:	9302      	str	r3, [sp, #8]
 8008530:	2301      	movs	r3, #1
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	260e      	movs	r6, #14
 8008536:	19bb      	adds	r3, r7, r6
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	2301      	movs	r3, #1
 800853c:	22f9      	movs	r2, #249	; 0xf9
 800853e:	21ee      	movs	r1, #238	; 0xee
 8008540:	f7fb fdb2 	bl	80040a8 <HAL_I2C_Mem_Read>

	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 8008544:	193b      	adds	r3, r7, r4
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	031a      	lsls	r2, r3, #12
 800854a:	197b      	adds	r3, r7, r5
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	4313      	orrs	r3, r2
			| ((int32_t) pressureXLSB >> 4)));
 8008552:	19ba      	adds	r2, r7, r6
 8008554:	7812      	ldrb	r2, [r2, #0]
 8008556:	0912      	lsrs	r2, r2, #4
 8008558:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800855a:	4313      	orrs	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]

	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC) / 256;
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	0011      	movs	r1, r2
 8008564:	0018      	movs	r0, r3
 8008566:	f000 f83d 	bl	80085e4 <_BME280_compensate_P_int64>
 800856a:	0003      	movs	r3, r0
 800856c:	0a1a      	lsrs	r2, r3, #8
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	609a      	str	r2, [r3, #8]
}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b009      	add	sp, #36	; 0x24
 8008578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800857a <_BME280_compensate_T_int32>:
//									COMP FUNCTIONS DEFINITIONS

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T) {
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	10da      	asrs	r2, r3, #3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8a9b      	ldrh	r3, [r3, #20]
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	1ad3      	subs	r3, r2, r3
			* ((int32_t) bme280->dig_T2)) >> 11;
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	2116      	movs	r1, #22
 8008594:	5e52      	ldrsh	r2, [r2, r1]
 8008596:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 8008598:	12db      	asrs	r3, r3, #11
 800859a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	111b      	asrs	r3, r3, #4
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	8a92      	ldrh	r2, [r2, #20]
 80085a4:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((int32_t) bme280->dig_T1))) >> 12)
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	1112      	asrs	r2, r2, #4
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	8a89      	ldrh	r1, [r1, #20]
 80085ae:	1a52      	subs	r2, r2, r1
 80085b0:	4353      	muls	r3, r2
 80085b2:	131b      	asrs	r3, r3, #12
			* ((int32_t) bme280->dig_T3)) >> 14;
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	2118      	movs	r1, #24
 80085b8:	5e52      	ldrsh	r2, [r2, r1]
 80085ba:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 80085bc:	139b      	asrs	r3, r3, #14
 80085be:	613b      	str	r3, [r7, #16]
	bme280->t_fine = var1 + var2;
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	18d2      	adds	r2, r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
	T = (bme280->t_fine * 5 + 128) >> 8;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ce:	0013      	movs	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	3380      	adds	r3, #128	; 0x80
 80085d6:	121b      	asrs	r3, r3, #8
 80085d8:	60fb      	str	r3, [r7, #12]
	return T;
 80085da:	68fb      	ldr	r3, [r7, #12]
	bme280->temperatureValue = T;
}
 80085dc:	0018      	movs	r0, r3
 80085de:	46bd      	mov	sp, r7
 80085e0:	b006      	add	sp, #24
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <_BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P) {
 80085e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e6:	b0ad      	sub	sp, #180	; 0xb4
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	2394      	movs	r3, #148	; 0x94
 80085ec:	18fa      	adds	r2, r7, r3
 80085ee:	6010      	str	r0, [r2, #0]
 80085f0:	2290      	movs	r2, #144	; 0x90
 80085f2:	18ba      	adds	r2, r7, r2
 80085f4:	6011      	str	r1, [r2, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t) bme280->t_fine) - 128000;
 80085f6:	18fa      	adds	r2, r7, r3
 80085f8:	6813      	ldr	r3, [r2, #0]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80085fe:	17db      	asrs	r3, r3, #31
 8008600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008602:	4ace      	ldr	r2, [pc, #824]	; (800893c <_BME280_compensate_P_int64+0x358>)
 8008604:	2301      	movs	r3, #1
 8008606:	425b      	negs	r3, r3
 8008608:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800860a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800860c:	1880      	adds	r0, r0, r2
 800860e:	4159      	adcs	r1, r3
 8008610:	0002      	movs	r2, r0
 8008612:	000b      	movs	r3, r1
 8008614:	26a8      	movs	r6, #168	; 0xa8
 8008616:	19b9      	adds	r1, r7, r6
 8008618:	600a      	str	r2, [r1, #0]
 800861a:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) bme280->dig_P6;
 800861c:	19ba      	adds	r2, r7, r6
 800861e:	6853      	ldr	r3, [r2, #4]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	19b9      	adds	r1, r7, r6
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	6849      	ldr	r1, [r1, #4]
 8008628:	f7f7 ff26 	bl	8000478 <__aeabi_lmul>
 800862c:	0002      	movs	r2, r0
 800862e:	000b      	movs	r3, r1
 8008630:	0010      	movs	r0, r2
 8008632:	0019      	movs	r1, r3
 8008634:	2394      	movs	r3, #148	; 0x94
 8008636:	18fa      	adds	r2, r7, r3
 8008638:	6813      	ldr	r3, [r2, #0]
 800863a:	2224      	movs	r2, #36	; 0x24
 800863c:	5e9b      	ldrsh	r3, [r3, r2]
 800863e:	653b      	str	r3, [r7, #80]	; 0x50
 8008640:	17db      	asrs	r3, r3, #31
 8008642:	657b      	str	r3, [r7, #84]	; 0x54
 8008644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008648:	f7f7 ff16 	bl	8000478 <__aeabi_lmul>
 800864c:	0002      	movs	r2, r0
 800864e:	000b      	movs	r3, r1
 8008650:	21a0      	movs	r1, #160	; 0xa0
 8008652:	1878      	adds	r0, r7, r1
 8008654:	6002      	str	r2, [r0, #0]
 8008656:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) bme280->dig_P5) << 17);
 8008658:	2394      	movs	r3, #148	; 0x94
 800865a:	18fa      	adds	r2, r7, r3
 800865c:	6813      	ldr	r3, [r2, #0]
 800865e:	2222      	movs	r2, #34	; 0x22
 8008660:	5e9b      	ldrsh	r3, [r3, r2]
 8008662:	64bb      	str	r3, [r7, #72]	; 0x48
 8008664:	17db      	asrs	r3, r3, #31
 8008666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008668:	19ba      	adds	r2, r7, r6
 800866a:	6853      	ldr	r3, [r2, #4]
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008670:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008672:	f7f7 ff01 	bl	8000478 <__aeabi_lmul>
 8008676:	0002      	movs	r2, r0
 8008678:	000b      	movs	r3, r1
 800867a:	0bd1      	lsrs	r1, r2, #15
 800867c:	045d      	lsls	r5, r3, #17
 800867e:	430d      	orrs	r5, r1
 8008680:	0454      	lsls	r4, r2, #17
 8008682:	21a0      	movs	r1, #160	; 0xa0
 8008684:	187a      	adds	r2, r7, r1
 8008686:	6853      	ldr	r3, [r2, #4]
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	1912      	adds	r2, r2, r4
 800868c:	416b      	adcs	r3, r5
 800868e:	1878      	adds	r0, r7, r1
 8008690:	6002      	str	r2, [r0, #0]
 8008692:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) bme280->dig_P4) << 35);
 8008694:	2594      	movs	r5, #148	; 0x94
 8008696:	197b      	adds	r3, r7, r5
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2220      	movs	r2, #32
 800869c:	5e9b      	ldrsh	r3, [r3, r2]
 800869e:	643b      	str	r3, [r7, #64]	; 0x40
 80086a0:	17db      	asrs	r3, r3, #31
 80086a2:	647b      	str	r3, [r7, #68]	; 0x44
 80086a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086aa:	2300      	movs	r3, #0
 80086ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ae:	000c      	movs	r4, r1
 80086b0:	187b      	adds	r3, r7, r1
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ba:	1812      	adds	r2, r2, r0
 80086bc:	414b      	adcs	r3, r1
 80086be:	1939      	adds	r1, r7, r4
 80086c0:	600a      	str	r2, [r1, #0]
 80086c2:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 80086c4:	0034      	movs	r4, r6
 80086c6:	193b      	adds	r3, r7, r4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	1939      	adds	r1, r7, r4
 80086ce:	6808      	ldr	r0, [r1, #0]
 80086d0:	6849      	ldr	r1, [r1, #4]
 80086d2:	f7f7 fed1 	bl	8000478 <__aeabi_lmul>
 80086d6:	0002      	movs	r2, r0
 80086d8:	000b      	movs	r3, r1
 80086da:	0010      	movs	r0, r2
 80086dc:	0019      	movs	r1, r3
 80086de:	197b      	adds	r3, r7, r5
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	221e      	movs	r2, #30
 80086e4:	5e9b      	ldrsh	r3, [r3, r2]
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30
 80086e8:	17db      	asrs	r3, r3, #31
 80086ea:	637b      	str	r3, [r7, #52]	; 0x34
 80086ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	f7f7 fec2 	bl	8000478 <__aeabi_lmul>
 80086f4:	0002      	movs	r2, r0
 80086f6:	000b      	movs	r3, r1
 80086f8:	0619      	lsls	r1, r3, #24
 80086fa:	468c      	mov	ip, r1
 80086fc:	0a10      	lsrs	r0, r2, #8
 80086fe:	2688      	movs	r6, #136	; 0x88
 8008700:	19b9      	adds	r1, r7, r6
 8008702:	6008      	str	r0, [r1, #0]
 8008704:	19b8      	adds	r0, r7, r6
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	4661      	mov	r1, ip
 800870a:	4308      	orrs	r0, r1
 800870c:	19b9      	adds	r1, r7, r6
 800870e:	6008      	str	r0, [r1, #0]
 8008710:	121b      	asrs	r3, r3, #8
 8008712:	228c      	movs	r2, #140	; 0x8c
 8008714:	18ba      	adds	r2, r7, r2
 8008716:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) bme280->dig_P2) << 12);
 8008718:	197b      	adds	r3, r7, r5
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	221c      	movs	r2, #28
 800871e:	5e9b      	ldrsh	r3, [r3, r2]
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
 8008722:	17db      	asrs	r3, r3, #31
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008726:	193b      	adds	r3, r7, r4
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800872e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008730:	f7f7 fea2 	bl	8000478 <__aeabi_lmul>
 8008734:	0002      	movs	r2, r0
 8008736:	000b      	movs	r3, r1
 8008738:	0d11      	lsrs	r1, r2, #20
 800873a:	468c      	mov	ip, r1
 800873c:	0318      	lsls	r0, r3, #12
 800873e:	2184      	movs	r1, #132	; 0x84
 8008740:	1879      	adds	r1, r7, r1
 8008742:	6008      	str	r0, [r1, #0]
 8008744:	2084      	movs	r0, #132	; 0x84
 8008746:	1839      	adds	r1, r7, r0
 8008748:	6808      	ldr	r0, [r1, #0]
 800874a:	4661      	mov	r1, ip
 800874c:	4308      	orrs	r0, r1
 800874e:	2184      	movs	r1, #132	; 0x84
 8008750:	1879      	adds	r1, r7, r1
 8008752:	6008      	str	r0, [r1, #0]
 8008754:	0313      	lsls	r3, r2, #12
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	187a      	adds	r2, r7, r1
 800875a:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 800875c:	19bb      	adds	r3, r7, r6
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	1879      	adds	r1, r7, r1
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	6849      	ldr	r1, [r1, #4]
 8008768:	1812      	adds	r2, r2, r0
 800876a:	414b      	adcs	r3, r1
 800876c:	1939      	adds	r1, r7, r4
 800876e:	600a      	str	r2, [r1, #0]
 8008770:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) bme280->dig_P1) >> 33;
 8008772:	193b      	adds	r3, r7, r4
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	6859      	ldr	r1, [r3, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	2380      	movs	r3, #128	; 0x80
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	1880      	adds	r0, r0, r2
 8008780:	4159      	adcs	r1, r3
 8008782:	197b      	adds	r3, r7, r5
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	8b5b      	ldrh	r3, [r3, #26]
 8008788:	623b      	str	r3, [r7, #32]
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
 800878e:	6a3a      	ldr	r2, [r7, #32]
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	f7f7 fe71 	bl	8000478 <__aeabi_lmul>
 8008796:	0002      	movs	r2, r0
 8008798:	000b      	movs	r3, r1
 800879a:	1059      	asrs	r1, r3, #1
 800879c:	1938      	adds	r0, r7, r4
 800879e:	6001      	str	r1, [r0, #0]
 80087a0:	17db      	asrs	r3, r3, #31
 80087a2:	21ac      	movs	r1, #172	; 0xac
 80087a4:	187a      	adds	r2, r7, r1
 80087a6:	6013      	str	r3, [r2, #0]
	if (var1 == 0) {
 80087a8:	193b      	adds	r3, r7, r4
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	187b      	adds	r3, r7, r1
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	431a      	orrs	r2, r3
 80087b2:	d101      	bne.n	80087b8 <_BME280_compensate_P_int64+0x1d4>
		return 0; // avoid exception caused by division by zero
 80087b4:	2300      	movs	r3, #0
 80087b6:	e0bc      	b.n	8008932 <_BME280_compensate_P_int64+0x34e>
	}
	p = 1048576 - adc_P;
 80087b8:	2390      	movs	r3, #144	; 0x90
 80087ba:	18fb      	adds	r3, r7, r3
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	2380      	movs	r3, #128	; 0x80
 80087c0:	035b      	lsls	r3, r3, #13
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	2498      	movs	r4, #152	; 0x98
 80087c6:	193a      	adds	r2, r7, r4
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	17db      	asrs	r3, r3, #31
 80087cc:	259c      	movs	r5, #156	; 0x9c
 80087ce:	197a      	adds	r2, r7, r5
 80087d0:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 80087d2:	193b      	adds	r3, r7, r4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	105b      	asrs	r3, r3, #1
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	193b      	adds	r3, r7, r4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	07db      	lsls	r3, r3, #31
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	20a0      	movs	r0, #160	; 0xa0
 80087e4:	183a      	adds	r2, r7, r0
 80087e6:	6853      	ldr	r3, [r2, #4]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	69b8      	ldr	r0, [r7, #24]
 80087ec:	69f9      	ldr	r1, [r7, #28]
 80087ee:	1a80      	subs	r0, r0, r2
 80087f0:	4199      	sbcs	r1, r3
 80087f2:	4a53      	ldr	r2, [pc, #332]	; (8008940 <_BME280_compensate_P_int64+0x35c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	f7f7 fe3f 	bl	8000478 <__aeabi_lmul>
 80087fa:	0002      	movs	r2, r0
 80087fc:	000b      	movs	r3, r1
 80087fe:	0010      	movs	r0, r2
 8008800:	0019      	movs	r1, r3
 8008802:	23a8      	movs	r3, #168	; 0xa8
 8008804:	18fa      	adds	r2, r7, r3
 8008806:	6853      	ldr	r3, [r2, #4]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	f7f7 fdf1 	bl	80003f0 <__aeabi_ldivmod>
 800880e:	0002      	movs	r2, r0
 8008810:	000b      	movs	r3, r1
 8008812:	1939      	adds	r1, r7, r4
 8008814:	600a      	str	r2, [r1, #0]
 8008816:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) bme280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8008818:	2694      	movs	r6, #148	; 0x94
 800881a:	19ba      	adds	r2, r7, r6
 800881c:	6813      	ldr	r3, [r2, #0]
 800881e:	222a      	movs	r2, #42	; 0x2a
 8008820:	5e9b      	ldrsh	r3, [r3, r2]
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	17db      	asrs	r3, r3, #31
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	197a      	adds	r2, r7, r5
 800882a:	6813      	ldr	r3, [r2, #0]
 800882c:	04da      	lsls	r2, r3, #19
 800882e:	1939      	adds	r1, r7, r4
 8008830:	680b      	ldr	r3, [r1, #0]
 8008832:	0b5b      	lsrs	r3, r3, #13
 8008834:	67bb      	str	r3, [r7, #120]	; 0x78
 8008836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008838:	4313      	orrs	r3, r2
 800883a:	67bb      	str	r3, [r7, #120]	; 0x78
 800883c:	197a      	adds	r2, r7, r5
 800883e:	6813      	ldr	r3, [r2, #0]
 8008840:	135b      	asrs	r3, r3, #13
 8008842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008844:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008848:	6938      	ldr	r0, [r7, #16]
 800884a:	6979      	ldr	r1, [r7, #20]
 800884c:	f7f7 fe14 	bl	8000478 <__aeabi_lmul>
 8008850:	0002      	movs	r2, r0
 8008852:	000b      	movs	r3, r1
 8008854:	0010      	movs	r0, r2
 8008856:	0019      	movs	r1, r3
 8008858:	197a      	adds	r2, r7, r5
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	04da      	lsls	r2, r3, #19
 800885e:	193b      	adds	r3, r7, r4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	0b5b      	lsrs	r3, r3, #13
 8008864:	673b      	str	r3, [r7, #112]	; 0x70
 8008866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008868:	4313      	orrs	r3, r2
 800886a:	673b      	str	r3, [r7, #112]	; 0x70
 800886c:	197a      	adds	r2, r7, r5
 800886e:	6813      	ldr	r3, [r2, #0]
 8008870:	135b      	asrs	r3, r3, #13
 8008872:	677b      	str	r3, [r7, #116]	; 0x74
 8008874:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008878:	f7f7 fdfe 	bl	8000478 <__aeabi_lmul>
 800887c:	0002      	movs	r2, r0
 800887e:	000b      	movs	r3, r1
 8008880:	01d9      	lsls	r1, r3, #7
 8008882:	0e50      	lsrs	r0, r2, #25
 8008884:	4301      	orrs	r1, r0
 8008886:	25a8      	movs	r5, #168	; 0xa8
 8008888:	1978      	adds	r0, r7, r5
 800888a:	6001      	str	r1, [r0, #0]
 800888c:	165b      	asrs	r3, r3, #25
 800888e:	22ac      	movs	r2, #172	; 0xac
 8008890:	18ba      	adds	r2, r7, r2
 8008892:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) bme280->dig_P8) * p) >> 19;
 8008894:	19ba      	adds	r2, r7, r6
 8008896:	6813      	ldr	r3, [r2, #0]
 8008898:	2228      	movs	r2, #40	; 0x28
 800889a:	5e9b      	ldrsh	r3, [r3, r2]
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	17db      	asrs	r3, r3, #31
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	193a      	adds	r2, r7, r4
 80088a4:	6853      	ldr	r3, [r2, #4]
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	68b8      	ldr	r0, [r7, #8]
 80088aa:	68f9      	ldr	r1, [r7, #12]
 80088ac:	f7f7 fde4 	bl	8000478 <__aeabi_lmul>
 80088b0:	0002      	movs	r2, r0
 80088b2:	000b      	movs	r3, r1
 80088b4:	0359      	lsls	r1, r3, #13
 80088b6:	0cd0      	lsrs	r0, r2, #19
 80088b8:	4301      	orrs	r1, r0
 80088ba:	20a0      	movs	r0, #160	; 0xa0
 80088bc:	1838      	adds	r0, r7, r0
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	14db      	asrs	r3, r3, #19
 80088c2:	22a4      	movs	r2, #164	; 0xa4
 80088c4:	18ba      	adds	r2, r7, r2
 80088c6:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t) bme280->dig_P7) << 4);
 80088c8:	193a      	adds	r2, r7, r4
 80088ca:	6810      	ldr	r0, [r2, #0]
 80088cc:	6851      	ldr	r1, [r2, #4]
 80088ce:	197a      	adds	r2, r7, r5
 80088d0:	6853      	ldr	r3, [r2, #4]
 80088d2:	6812      	ldr	r2, [r2, #0]
 80088d4:	1880      	adds	r0, r0, r2
 80088d6:	4159      	adcs	r1, r3
 80088d8:	23a0      	movs	r3, #160	; 0xa0
 80088da:	18fb      	adds	r3, r7, r3
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	1812      	adds	r2, r2, r0
 80088e2:	414b      	adcs	r3, r1
 80088e4:	0619      	lsls	r1, r3, #24
 80088e6:	0a10      	lsrs	r0, r2, #8
 80088e8:	66b8      	str	r0, [r7, #104]	; 0x68
 80088ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80088ec:	4308      	orrs	r0, r1
 80088ee:	66b8      	str	r0, [r7, #104]	; 0x68
 80088f0:	121b      	asrs	r3, r3, #8
 80088f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088f4:	19bb      	adds	r3, r7, r6
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2226      	movs	r2, #38	; 0x26
 80088fa:	5e9b      	ldrsh	r3, [r3, r2]
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	17db      	asrs	r3, r3, #31
 8008900:	607b      	str	r3, [r7, #4]
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	000b      	movs	r3, r1
 8008908:	0f1b      	lsrs	r3, r3, #28
 800890a:	0010      	movs	r0, r2
 800890c:	0100      	lsls	r0, r0, #4
 800890e:	6678      	str	r0, [r7, #100]	; 0x64
 8008910:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008912:	4318      	orrs	r0, r3
 8008914:	6678      	str	r0, [r7, #100]	; 0x64
 8008916:	000b      	movs	r3, r1
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	663b      	str	r3, [r7, #96]	; 0x60
 800891c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800891e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008920:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008922:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008924:	1812      	adds	r2, r2, r0
 8008926:	414b      	adcs	r3, r1
 8008928:	1939      	adds	r1, r7, r4
 800892a:	600a      	str	r2, [r1, #0]
 800892c:	604b      	str	r3, [r1, #4]
	return (uint32_t) p;
 800892e:	193b      	adds	r3, r7, r4
 8008930:	681b      	ldr	r3, [r3, #0]
	bme280->pressureValue = (uint32_t) p;
}
 8008932:	0018      	movs	r0, r3
 8008934:	46bd      	mov	sp, r7
 8008936:	b02d      	add	sp, #180	; 0xb4
 8008938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	fffe0c00 	.word	0xfffe0c00
 8008940:	00000c35 	.word	0x00000c35

08008944 <_BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;
	v_x1_u32r = (bme280->t_fine - ((int32_t) 76800));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	4a2d      	ldr	r2, [pc, #180]	; (8008a08 <_BME280_compensate_H_int32+0xc4>)
 8008954:	4694      	mov	ip, r2
 8008956:	4463      	add	r3, ip
 8008958:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	039a      	lsls	r2, r3, #14
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2132      	movs	r1, #50	; 0x32
 8008962:	5e5b      	ldrsh	r3, [r3, r1]
 8008964:	051b      	lsls	r3, r3, #20
 8008966:	1ad2      	subs	r2, r2, r3
			- (((int32_t) bme280->dig_H5) * v_x1_u32r)) + ((int32_t) 16384))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2134      	movs	r1, #52	; 0x34
 800896c:	5e5b      	ldrsh	r3, [r3, r1]
 800896e:	0019      	movs	r1, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	434b      	muls	r3, r1
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2280      	movs	r2, #128	; 0x80
 8008978:	01d2      	lsls	r2, r2, #7
 800897a:	4694      	mov	ip, r2
 800897c:	4463      	add	r3, ip
			>> 15)
 800897e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * ((int32_t) bme280->dig_H6)) >> 10)
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	2136      	movs	r1, #54	; 0x36
 8008984:	5c52      	ldrb	r2, [r2, r1]
 8008986:	0011      	movs	r1, r2
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	434a      	muls	r2, r1
 800898c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	2030      	movs	r0, #48	; 0x30
 8008992:	5c09      	ldrb	r1, [r1, r0]
 8008994:	0008      	movs	r0, r1
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	4341      	muls	r1, r0
 800899a:	12c9      	asrs	r1, r1, #11
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 800899c:	2080      	movs	r0, #128	; 0x80
 800899e:	0200      	lsls	r0, r0, #8
 80089a0:	4684      	mov	ip, r0
 80089a2:	4461      	add	r1, ip
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 80089a4:	434a      	muls	r2, r1
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 80089a6:	1292      	asrs	r2, r2, #10
 80089a8:	2180      	movs	r1, #128	; 0x80
 80089aa:	0389      	lsls	r1, r1, #14
 80089ac:	468c      	mov	ip, r1
 80089ae:	4462      	add	r2, ip
					* ((int32_t) bme280->dig_H2) + 8192) >> 14));
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	202e      	movs	r0, #46	; 0x2e
 80089b4:	5e09      	ldrsh	r1, [r1, r0]
 80089b6:	434a      	muls	r2, r1
 80089b8:	2180      	movs	r1, #128	; 0x80
 80089ba:	0189      	lsls	r1, r1, #6
 80089bc:	468c      	mov	ip, r1
 80089be:	4462      	add	r2, ip
 80089c0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 80089c2:	4353      	muls	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	13db      	asrs	r3, r3, #15
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	13d2      	asrs	r2, r2, #15
 80089ce:	4353      	muls	r3, r2
 80089d0:	11db      	asrs	r3, r3, #7
					* ((int32_t) bme280->dig_H1)) >> 4));
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	212c      	movs	r1, #44	; 0x2c
 80089d6:	5c52      	ldrb	r2, [r2, r1]
 80089d8:	4353      	muls	r3, r2
 80089da:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	da00      	bge.n	80089ea <_BME280_compensate_H_int32+0xa6>
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	22c8      	movs	r2, #200	; 0xc8
 80089f0:	0552      	lsls	r2, r2, #21
 80089f2:	4293      	cmp	r3, r2
 80089f4:	dd01      	ble.n	80089fa <_BME280_compensate_H_int32+0xb6>
 80089f6:	23c8      	movs	r3, #200	; 0xc8
 80089f8:	055b      	lsls	r3, r3, #21
 80089fa:	60fb      	str	r3, [r7, #12]
	return (uint32_t) (v_x1_u32r >> 12);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	131b      	asrs	r3, r3, #12
	bme280->humidityValue = (uint32_t) (v_x1_u32r >> 12);
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b004      	add	sp, #16
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	fffed400 	.word	0xfffed400

08008a0c <interfaceWrite>:
 *      Author: bartosz
 */

#include "interface.h"

void interfaceWrite(void) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af02      	add	r7, sp, #8

	//								WRITE DATA TO CLOCK
	twoIntsToArray(buffer, sizeof(buffer), chronograph.actual.hour,
 8008a12:	4bba      	ldr	r3, [pc, #744]	; (8008cfc <interfaceWrite+0x2f0>)
 8008a14:	78db      	ldrb	r3, [r3, #3]
 8008a16:	b25b      	sxtb	r3, r3
 8008a18:	001a      	movs	r2, r3
			chronograph.actual.minute);
 8008a1a:	4bb8      	ldr	r3, [pc, #736]	; (8008cfc <interfaceWrite+0x2f0>)
 8008a1c:	791b      	ldrb	r3, [r3, #4]
 8008a1e:	b25b      	sxtb	r3, r3
	twoIntsToArray(buffer, sizeof(buffer), chronograph.actual.hour,
 8008a20:	48b7      	ldr	r0, [pc, #732]	; (8008d00 <interfaceWrite+0x2f4>)
 8008a22:	2105      	movs	r1, #5
 8008a24:	f000 f98e 	bl	8008d44 <twoIntsToArray>
	if (rtcBlink(&chronograph)) {
 8008a28:	4bb4      	ldr	r3, [pc, #720]	; (8008cfc <interfaceWrite+0x2f0>)
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f002 fbbe 	bl	800b1ac <rtcBlink>
 8008a30:	1e03      	subs	r3, r0, #0
 8008a32:	d00a      	beq.n	8008a4a <interfaceWrite+0x3e>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON, NOT_EDITABLE);
 8008a34:	4bb2      	ldr	r3, [pc, #712]	; (8008d00 <interfaceWrite+0x2f4>)
 8008a36:	48b3      	ldr	r0, [pc, #716]	; (8008d04 <interfaceWrite+0x2f8>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	9200      	str	r2, [sp, #0]
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	f001 fa28 	bl	8009e98 <menuItemChangeValue>
 8008a48:	e009      	b.n	8008a5e <interfaceWrite+0x52>
	} else {
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_DISABLED,
 8008a4a:	4bad      	ldr	r3, [pc, #692]	; (8008d00 <interfaceWrite+0x2f4>)
 8008a4c:	48ad      	ldr	r0, [pc, #692]	; (8008d04 <interfaceWrite+0x2f8>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	9201      	str	r2, [sp, #4]
 8008a52:	2204      	movs	r2, #4
 8008a54:	9200      	str	r2, [sp, #0]
 8008a56:	2200      	movs	r2, #0
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f001 fa1d 	bl	8009e98 <menuItemChangeValue>
				NOT_EDITABLE);
	}

	oneIntToArray(buffer, sizeof(buffer), 2, chronograph.actual.second);
 8008a5e:	4ba7      	ldr	r3, [pc, #668]	; (8008cfc <interfaceWrite+0x2f0>)
 8008a60:	795b      	ldrb	r3, [r3, #5]
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	48a6      	ldr	r0, [pc, #664]	; (8008d00 <interfaceWrite+0x2f4>)
 8008a66:	2202      	movs	r2, #2
 8008a68:	2105      	movs	r1, #5
 8008a6a:	f000 f9bd 	bl	8008de8 <oneIntToArray>
	if (rtcBlink(&chronograph)) {
 8008a6e:	4ba3      	ldr	r3, [pc, #652]	; (8008cfc <interfaceWrite+0x2f0>)
 8008a70:	0018      	movs	r0, r3
 8008a72:	f002 fb9b 	bl	800b1ac <rtcBlink>
 8008a76:	1e03      	subs	r3, r0, #0
 8008a78:	d00a      	beq.n	8008a90 <interfaceWrite+0x84>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON,
 8008a7a:	4ba1      	ldr	r3, [pc, #644]	; (8008d00 <interfaceWrite+0x2f4>)
 8008a7c:	48a1      	ldr	r0, [pc, #644]	; (8008d04 <interfaceWrite+0x2f8>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	9201      	str	r2, [sp, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	2201      	movs	r2, #1
 8008a88:	2101      	movs	r1, #1
 8008a8a:	f001 fa05 	bl	8009e98 <menuItemChangeValue>
 8008a8e:	e009      	b.n	8008aa4 <interfaceWrite+0x98>
				NOT_EDITABLE);
	} else {
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_DISABLED,
 8008a90:	4b9b      	ldr	r3, [pc, #620]	; (8008d00 <interfaceWrite+0x2f4>)
 8008a92:	489c      	ldr	r0, [pc, #624]	; (8008d04 <interfaceWrite+0x2f8>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	9201      	str	r2, [sp, #4]
 8008a98:	2204      	movs	r2, #4
 8008a9a:	9200      	str	r2, [sp, #0]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	f001 f9fa 	bl	8009e98 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	//								WRITE DATA TO CALENDAR
	twoIntsToArray(buffer, sizeof(buffer), chronograph.actual.day,
 8008aa4:	4b95      	ldr	r3, [pc, #596]	; (8008cfc <interfaceWrite+0x2f0>)
 8008aa6:	789b      	ldrb	r3, [r3, #2]
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	001a      	movs	r2, r3
			chronograph.actual.month);
 8008aac:	4b93      	ldr	r3, [pc, #588]	; (8008cfc <interfaceWrite+0x2f0>)
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	b25b      	sxtb	r3, r3
	twoIntsToArray(buffer, sizeof(buffer), chronograph.actual.day,
 8008ab2:	4893      	ldr	r0, [pc, #588]	; (8008d00 <interfaceWrite+0x2f4>)
 8008ab4:	2105      	movs	r1, #5
 8008ab6:	f000 f945 	bl	8008d44 <twoIntsToArray>
	menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT, NOT_EDITABLE);
 8008aba:	4b91      	ldr	r3, [pc, #580]	; (8008d00 <interfaceWrite+0x2f4>)
 8008abc:	4891      	ldr	r0, [pc, #580]	; (8008d04 <interfaceWrite+0x2f8>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	9201      	str	r2, [sp, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	9200      	str	r2, [sp, #0]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	2100      	movs	r1, #0
 8008aca:	f001 f9e5 	bl	8009e98 <menuItemChangeValue>

	//								WRITE DATA TO SETTINGS_CLOCK
	oneIntToArray(buffer, sizeof(buffer), 0, chronograph.actual.hour);
 8008ace:	4b8b      	ldr	r3, [pc, #556]	; (8008cfc <interfaceWrite+0x2f0>)
 8008ad0:	78db      	ldrb	r3, [r3, #3]
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	488a      	ldr	r0, [pc, #552]	; (8008d00 <interfaceWrite+0x2f4>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2105      	movs	r1, #5
 8008ada:	f000 f985 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, buffer, INTER_COLON,
 8008ade:	4b88      	ldr	r3, [pc, #544]	; (8008d00 <interfaceWrite+0x2f4>)
 8008ae0:	4888      	ldr	r0, [pc, #544]	; (8008d04 <interfaceWrite+0x2f8>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	9201      	str	r2, [sp, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	9200      	str	r2, [sp, #0]
 8008aea:	2202      	movs	r2, #2
 8008aec:	2100      	movs	r1, #0
 8008aee:	f001 f9d3 	bl	8009e98 <menuItemChangeValue>
			EDITABLE);

	oneIntToArray(buffer, sizeof(buffer), 2, chronograph.actual.minute);
 8008af2:	4b82      	ldr	r3, [pc, #520]	; (8008cfc <interfaceWrite+0x2f0>)
 8008af4:	791b      	ldrb	r3, [r3, #4]
 8008af6:	b25b      	sxtb	r3, r3
 8008af8:	4881      	ldr	r0, [pc, #516]	; (8008d00 <interfaceWrite+0x2f4>)
 8008afa:	2202      	movs	r2, #2
 8008afc:	2105      	movs	r1, #5
 8008afe:	f000 f973 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, buffer, INTER_COLON,
 8008b02:	4b7f      	ldr	r3, [pc, #508]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b04:	487f      	ldr	r0, [pc, #508]	; (8008d04 <interfaceWrite+0x2f8>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	9201      	str	r2, [sp, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	9200      	str	r2, [sp, #0]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	2101      	movs	r1, #1
 8008b12:	f001 f9c1 	bl	8009e98 <menuItemChangeValue>
	EDITABLE);

	oneIntToArray(buffer, sizeof(buffer), 2, chronograph.actual.second);
 8008b16:	4b79      	ldr	r3, [pc, #484]	; (8008cfc <interfaceWrite+0x2f0>)
 8008b18:	795b      	ldrb	r3, [r3, #5]
 8008b1a:	b25b      	sxtb	r3, r3
 8008b1c:	4878      	ldr	r0, [pc, #480]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b1e:	2202      	movs	r2, #2
 8008b20:	2105      	movs	r1, #5
 8008b22:	f000 f961 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, buffer, INTER_COLON,
 8008b26:	4b76      	ldr	r3, [pc, #472]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b28:	4876      	ldr	r0, [pc, #472]	; (8008d04 <interfaceWrite+0x2f8>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	9201      	str	r2, [sp, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	9200      	str	r2, [sp, #0]
 8008b32:	2202      	movs	r2, #2
 8008b34:	2102      	movs	r1, #2
 8008b36:	f001 f9af 	bl	8009e98 <menuItemChangeValue>
	EDITABLE);

	//								WRITE DATA TO SETTINGS_CALENDAR
	oneIntToArray(buffer, sizeof(buffer), 0, chronograph.actual.day);
 8008b3a:	4b70      	ldr	r3, [pc, #448]	; (8008cfc <interfaceWrite+0x2f0>)
 8008b3c:	789b      	ldrb	r3, [r3, #2]
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	486f      	ldr	r0, [pc, #444]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	2105      	movs	r1, #5
 8008b46:	f000 f94f 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, buffer, INTER_DOT,
 8008b4a:	4b6d      	ldr	r3, [pc, #436]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b4c:	486d      	ldr	r0, [pc, #436]	; (8008d04 <interfaceWrite+0x2f8>)
 8008b4e:	2201      	movs	r2, #1
 8008b50:	9201      	str	r2, [sp, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	9200      	str	r2, [sp, #0]
 8008b56:	2202      	movs	r2, #2
 8008b58:	2103      	movs	r1, #3
 8008b5a:	f001 f99d 	bl	8009e98 <menuItemChangeValue>
			EDITABLE);

	oneIntToArray(buffer, sizeof(buffer), 2, chronograph.actual.month);
 8008b5e:	4b67      	ldr	r3, [pc, #412]	; (8008cfc <interfaceWrite+0x2f0>)
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	b25b      	sxtb	r3, r3
 8008b64:	4866      	ldr	r0, [pc, #408]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b66:	2202      	movs	r2, #2
 8008b68:	2105      	movs	r1, #5
 8008b6a:	f000 f93d 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, buffer, INTER_DOT,
 8008b6e:	4b64      	ldr	r3, [pc, #400]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b70:	4864      	ldr	r0, [pc, #400]	; (8008d04 <interfaceWrite+0x2f8>)
 8008b72:	2201      	movs	r2, #1
 8008b74:	9201      	str	r2, [sp, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	9200      	str	r2, [sp, #0]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	2104      	movs	r1, #4
 8008b7e:	f001 f98b 	bl	8009e98 <menuItemChangeValue>
	EDITABLE);

	oneIntToArray(buffer, sizeof(buffer), 0, chronograph.actual.year);
 8008b82:	4b5e      	ldr	r3, [pc, #376]	; (8008cfc <interfaceWrite+0x2f0>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	b25b      	sxtb	r3, r3
 8008b88:	485d      	ldr	r0, [pc, #372]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2105      	movs	r1, #5
 8008b8e:	f000 f92b 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, buffer,
 8008b92:	4b5b      	ldr	r3, [pc, #364]	; (8008d00 <interfaceWrite+0x2f4>)
 8008b94:	485b      	ldr	r0, [pc, #364]	; (8008d04 <interfaceWrite+0x2f8>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	9201      	str	r2, [sp, #4]
 8008b9a:	2204      	movs	r2, #4
 8008b9c:	9200      	str	r2, [sp, #0]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	2105      	movs	r1, #5
 8008ba2:	f001 f979 	bl	8009e98 <menuItemChangeValue>
	INTER_DISABLED, EDITABLE);

	//								WRITE CHRONO TIME
	twoIntsToArray(buffer, sizeof(buffer), chronograph.chrono.minute,
 8008ba6:	4b55      	ldr	r3, [pc, #340]	; (8008cfc <interfaceWrite+0x2f0>)
 8008ba8:	7f1b      	ldrb	r3, [r3, #28]
 8008baa:	b25b      	sxtb	r3, r3
 8008bac:	001a      	movs	r2, r3
			chronograph.chrono.second);
 8008bae:	4b53      	ldr	r3, [pc, #332]	; (8008cfc <interfaceWrite+0x2f0>)
 8008bb0:	7f5b      	ldrb	r3, [r3, #29]
 8008bb2:	b25b      	sxtb	r3, r3
	twoIntsToArray(buffer, sizeof(buffer), chronograph.chrono.minute,
 8008bb4:	4852      	ldr	r0, [pc, #328]	; (8008d00 <interfaceWrite+0x2f4>)
 8008bb6:	2105      	movs	r1, #5
 8008bb8:	f000 f8c4 	bl	8008d44 <twoIntsToArray>
	menuItemChangeValue(&menu, CHRONO, CHRONO_LEVEL, buffer, INTER_COLON,
 8008bbc:	4b50      	ldr	r3, [pc, #320]	; (8008d00 <interfaceWrite+0x2f4>)
 8008bbe:	4851      	ldr	r0, [pc, #324]	; (8008d04 <interfaceWrite+0x2f8>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	9201      	str	r2, [sp, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	9200      	str	r2, [sp, #0]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2101      	movs	r1, #1
 8008bcc:	f001 f964 	bl	8009e98 <menuItemChangeValue>
			NOT_EDITABLE);

	oneIntToArray(buffer, sizeof(buffer), 0, chronograph.chrono.hour);
 8008bd0:	4b4a      	ldr	r3, [pc, #296]	; (8008cfc <interfaceWrite+0x2f0>)
 8008bd2:	7edb      	ldrb	r3, [r3, #27]
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	484a      	ldr	r0, [pc, #296]	; (8008d00 <interfaceWrite+0x2f4>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2105      	movs	r1, #5
 8008bdc:	f000 f904 	bl	8008de8 <oneIntToArray>
	buffer[3] = 'h';
 8008be0:	4b47      	ldr	r3, [pc, #284]	; (8008d00 <interfaceWrite+0x2f4>)
 8008be2:	2268      	movs	r2, #104	; 0x68
 8008be4:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, CHRONO_HOURS, CHRONO_HOURS_LEVEL, buffer,
 8008be6:	4b46      	ldr	r3, [pc, #280]	; (8008d00 <interfaceWrite+0x2f4>)
 8008be8:	4846      	ldr	r0, [pc, #280]	; (8008d04 <interfaceWrite+0x2f8>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	9200      	str	r2, [sp, #0]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	2103      	movs	r1, #3
 8008bf6:	f001 f94f 	bl	8009e98 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	oneIntToArray(buffer, sizeof(buffer), 2, chronograph.chrono.hundredth);
 8008bfa:	4b40      	ldr	r3, [pc, #256]	; (8008cfc <interfaceWrite+0x2f0>)
 8008bfc:	7f9b      	ldrb	r3, [r3, #30]
 8008bfe:	b25b      	sxtb	r3, r3
 8008c00:	483f      	ldr	r0, [pc, #252]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c02:	2202      	movs	r2, #2
 8008c04:	2105      	movs	r1, #5
 8008c06:	f000 f8ef 	bl	8008de8 <oneIntToArray>
	menuItemChangeValue(&menu, CHRONO_HUNDREDTHS, CHRONO_HUNDREDTHS_LEVEL,
 8008c0a:	4b3d      	ldr	r3, [pc, #244]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c0c:	483d      	ldr	r0, [pc, #244]	; (8008d04 <interfaceWrite+0x2f8>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	9201      	str	r2, [sp, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	9200      	str	r2, [sp, #0]
 8008c16:	2201      	movs	r2, #1
 8008c18:	2102      	movs	r1, #2
 8008c1a:	f001 f93d 	bl	8009e98 <menuItemChangeValue>
//	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE, SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
//			INTER_DISABLED, EDITABLE);

//								WRITE BME280 DATA
	//temperature
	oneIntToArray(buffer, sizeof(buffer), 0, (bme280.temperatureValue / 100)+temperatureCorrection);
 8008c1e:	4b3a      	ldr	r3, [pc, #232]	; (8008d08 <interfaceWrite+0x2fc>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2164      	movs	r1, #100	; 0x64
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7f7 faf7 	bl	8000218 <__divsi3>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	001a      	movs	r2, r3
 8008c2e:	4b37      	ldr	r3, [pc, #220]	; (8008d0c <interfaceWrite+0x300>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	18d3      	adds	r3, r2, r3
 8008c34:	4832      	ldr	r0, [pc, #200]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	2105      	movs	r1, #5
 8008c3a:	f000 f8d5 	bl	8008de8 <oneIntToArray>
	if (((bme280.temperatureValue /100) +temperatureCorrection) > -10)
 8008c3e:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <interfaceWrite+0x2fc>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2164      	movs	r1, #100	; 0x64
 8008c44:	0018      	movs	r0, r3
 8008c46:	f7f7 fae7 	bl	8000218 <__divsi3>
 8008c4a:	0003      	movs	r3, r0
 8008c4c:	001a      	movs	r2, r3
 8008c4e:	4b2f      	ldr	r3, [pc, #188]	; (8008d0c <interfaceWrite+0x300>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	18d3      	adds	r3, r2, r3
 8008c54:	3309      	adds	r3, #9
 8008c56:	db02      	blt.n	8008c5e <interfaceWrite+0x252>
		buffer[2] = '^';
 8008c58:	4b29      	ldr	r3, [pc, #164]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c5a:	225e      	movs	r2, #94	; 0x5e
 8008c5c:	709a      	strb	r2, [r3, #2]
	buffer[3] = 'C';
 8008c5e:	4b28      	ldr	r3, [pc, #160]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c60:	2243      	movs	r2, #67	; 0x43
 8008c62:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, TEMPERATURE, TEMPERATURE_LEVEL, buffer,
 8008c64:	4b26      	ldr	r3, [pc, #152]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c66:	4827      	ldr	r0, [pc, #156]	; (8008d04 <interfaceWrite+0x2f8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	9201      	str	r2, [sp, #4]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	9200      	str	r2, [sp, #0]
 8008c70:	2200      	movs	r2, #0
 8008c72:	2102      	movs	r1, #2
 8008c74:	f001 f910 	bl	8009e98 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//temperature Correction
	oneIntToArray(buffer, sizeof(buffer), 0, temperatureCorrection);
 8008c78:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <interfaceWrite+0x300>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4820      	ldr	r0, [pc, #128]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2105      	movs	r1, #5
 8008c82:	f000 f8b1 	bl	8008de8 <oneIntToArray>
	buffer[3] = '^';
 8008c86:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c88:	225e      	movs	r2, #94	; 0x5e
 8008c8a:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE, SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
 8008c8c:	4b1c      	ldr	r3, [pc, #112]	; (8008d00 <interfaceWrite+0x2f4>)
 8008c8e:	481d      	ldr	r0, [pc, #116]	; (8008d04 <interfaceWrite+0x2f8>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	9201      	str	r2, [sp, #4]
 8008c94:	2204      	movs	r2, #4
 8008c96:	9200      	str	r2, [sp, #0]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	2106      	movs	r1, #6
 8008c9c:	f001 f8fc 	bl	8009e98 <menuItemChangeValue>
			INTER_DISABLED, EDITABLE);

	//pressure
	oneIntToArray(buffer, sizeof(buffer), 0, bme280.pressureValue / 100);
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <interfaceWrite+0x2fc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	2164      	movs	r1, #100	; 0x64
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f7f7 fa2c 	bl	8000104 <__udivsi3>
 8008cac:	0003      	movs	r3, r0
 8008cae:	4814      	ldr	r0, [pc, #80]	; (8008d00 <interfaceWrite+0x2f4>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2105      	movs	r1, #5
 8008cb4:	f000 f898 	bl	8008de8 <oneIntToArray>
		menuItemChangeValue(&menu, BAROMETER, BAROMETER_LEVEL, buffer,
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <interfaceWrite+0x2f4>)
 8008cba:	4812      	ldr	r0, [pc, #72]	; (8008d04 <interfaceWrite+0x2f8>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	9201      	str	r2, [sp, #4]
 8008cc0:	2204      	movs	r2, #4
 8008cc2:	9200      	str	r2, [sp, #0]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2103      	movs	r1, #3
 8008cc8:	f001 f8e6 	bl	8009e98 <menuItemChangeValue>
		INTER_DISABLED, NOT_EDITABLE);

		//humidity
		oneIntToArray(buffer, sizeof(buffer), 0, bme280.humidityValue);
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <interfaceWrite+0x2fc>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	480b      	ldr	r0, [pc, #44]	; (8008d00 <interfaceWrite+0x2f4>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2105      	movs	r1, #5
 8008cd6:	f000 f887 	bl	8008de8 <oneIntToArray>
		buffer[3] = 'H';
 8008cda:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <interfaceWrite+0x2f4>)
 8008cdc:	2248      	movs	r2, #72	; 0x48
 8008cde:	70da      	strb	r2, [r3, #3]
		menuItemChangeValue(&menu, HIGROMETER, HIGROMETER_LEVEL, buffer, INTER_DISABLED, NOT_EDITABLE);
 8008ce0:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <interfaceWrite+0x2f4>)
 8008ce2:	4808      	ldr	r0, [pc, #32]	; (8008d04 <interfaceWrite+0x2f8>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	9201      	str	r2, [sp, #4]
 8008ce8:	2204      	movs	r2, #4
 8008cea:	9200      	str	r2, [sp, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	2104      	movs	r1, #4
 8008cf0:	f001 f8d2 	bl	8009e98 <menuItemChangeValue>


}
 8008cf4:	46c0      	nop			; (mov r8, r8)
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	200001fc 	.word	0x200001fc
 8008d00:	20000034 	.word	0x20000034
 8008d04:	20000058 	.word	0x20000058
 8008d08:	20000348 	.word	0x20000348
 8008d0c:	2000003c 	.word	0x2000003c

08008d10 <interfaceShowActual>:

void interfaceShowActual(void) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
	LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 8008d14:	4a08      	ldr	r2, [pc, #32]	; (8008d38 <interfaceShowActual+0x28>)
 8008d16:	4809      	ldr	r0, [pc, #36]	; (8008d3c <interfaceShowActual+0x2c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f7ff f90a 	bl	8007f34 <LEDstr>
	LEDdot(&display, menu.current.value2);
 8008d20:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <interfaceShowActual+0x30>)
 8008d22:	23a7      	movs	r3, #167	; 0xa7
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	5cd2      	ldrb	r2, [r2, r3]
 8008d28:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <interfaceShowActual+0x2c>)
 8008d2a:	0011      	movs	r1, r2
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7ff f94f 	bl	8007fd0 <LEDdot>
}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200001a2 	.word	0x200001a2
 8008d3c:	20000224 	.word	0x20000224
 8008d40:	20000058 	.word	0x20000058

08008d44 <twoIntsToArray>:

void twoIntsToArray(char *destination, uint8_t size, int32_t int1, int32_t int2) {
 8008d44:	b5b0      	push	{r4, r5, r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	607a      	str	r2, [r7, #4]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	200b      	movs	r0, #11
 8008d52:	183b      	adds	r3, r7, r0
 8008d54:	1c0a      	adds	r2, r1, #0
 8008d56:	701a      	strb	r2, [r3, #0]
	memset(destination, 0, size);
 8008d58:	183b      	adds	r3, r7, r0
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2100      	movs	r1, #0
 8008d60:	0018      	movs	r0, r3
 8008d62:	f002 fd2a 	bl	800b7ba <memset>

	char halfBuffer1[2];
	char halfBuffer2[2];

	itoa(int1, halfBuffer1, 10);
 8008d66:	2414      	movs	r4, #20
 8008d68:	1939      	adds	r1, r7, r4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f002 fd16 	bl	800b7a0 <itoa>
	itoa(int2, halfBuffer2, 10);
 8008d74:	2510      	movs	r5, #16
 8008d76:	1979      	adds	r1, r7, r5
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	220a      	movs	r2, #10
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f002 fd0f 	bl	800b7a0 <itoa>

	destination[0] = halfBuffer1[0];
 8008d82:	0021      	movs	r1, r4
 8008d84:	187b      	adds	r3, r7, r1
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	701a      	strb	r2, [r3, #0]
	destination[1] = halfBuffer1[1];
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	187a      	adds	r2, r7, r1
 8008d92:	7852      	ldrb	r2, [r2, #1]
 8008d94:	701a      	strb	r2, [r3, #0]
	destination[2] = halfBuffer2[0];
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3302      	adds	r3, #2
 8008d9a:	197a      	adds	r2, r7, r5
 8008d9c:	7812      	ldrb	r2, [r2, #0]
 8008d9e:	701a      	strb	r2, [r3, #0]
	destination[3] = halfBuffer2[1];
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3303      	adds	r3, #3
 8008da4:	197a      	adds	r2, r7, r5
 8008da6:	7852      	ldrb	r2, [r2, #1]
 8008da8:	701a      	strb	r2, [r3, #0]

	if (destination[1] == 0) {
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3301      	adds	r3, #1
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d107      	bne.n	8008dc4 <twoIntsToArray+0x80>
		destination[1] = destination[0];
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	701a      	strb	r2, [r3, #0]
		destination[0] = '0';
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2230      	movs	r2, #48	; 0x30
 8008dc2:	701a      	strb	r2, [r3, #0]
	}
	if (destination[3] == 0) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3303      	adds	r3, #3
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d108      	bne.n	8008de0 <twoIntsToArray+0x9c>
		destination[3] = destination[2];
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3303      	adds	r3, #3
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	7892      	ldrb	r2, [r2, #2]
 8008dd6:	701a      	strb	r2, [r3, #0]
		destination[2] = '0';
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3302      	adds	r3, #2
 8008ddc:	2230      	movs	r2, #48	; 0x30
 8008dde:	701a      	strb	r2, [r3, #0]
	}
}
 8008de0:	46c0      	nop			; (mov r8, r8)
 8008de2:	46bd      	mov	sp, r7
 8008de4:	b006      	add	sp, #24
 8008de6:	bdb0      	pop	{r4, r5, r7, pc}

08008de8 <oneIntToArray>:

void oneIntToArray(char *destination, uint8_t size, uint8_t offset,
		int32_t integer) {
 8008de8:	b5b0      	push	{r4, r5, r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	0008      	movs	r0, r1
 8008df2:	0011      	movs	r1, r2
 8008df4:	607b      	str	r3, [r7, #4]
 8008df6:	250b      	movs	r5, #11
 8008df8:	197b      	adds	r3, r7, r5
 8008dfa:	1c02      	adds	r2, r0, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	240a      	movs	r4, #10
 8008e00:	193b      	adds	r3, r7, r4
 8008e02:	1c0a      	adds	r2, r1, #0
 8008e04:	701a      	strb	r2, [r3, #0]
	memset(destination, 0, size);
 8008e06:	197b      	adds	r3, r7, r5
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f002 fcd3 	bl	800b7ba <memset>
	itoa(integer, &destination[offset], 10);
 8008e14:	193b      	adds	r3, r7, r4
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	18d1      	adds	r1, r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	220a      	movs	r2, #10
 8008e20:	0018      	movs	r0, r3
 8008e22:	f002 fcbd 	bl	800b7a0 <itoa>

	if (destination[offset + 1] == 0) {
 8008e26:	0020      	movs	r0, r4
 8008e28:	193b      	adds	r3, r7, r4
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	18d3      	adds	r3, r2, r3
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d110      	bne.n	8008e5a <oneIntToArray+0x72>
		destination[offset + 1] = destination[offset];
 8008e38:	183b      	adds	r3, r7, r0
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	18d2      	adds	r2, r2, r3
 8008e40:	183b      	adds	r3, r7, r0
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	18cb      	adds	r3, r1, r3
 8008e4a:	7812      	ldrb	r2, [r2, #0]
 8008e4c:	701a      	strb	r2, [r3, #0]
		destination[offset] = '0';
 8008e4e:	183b      	adds	r3, r7, r0
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	18d3      	adds	r3, r2, r3
 8008e56:	2230      	movs	r2, #48	; 0x30
 8008e58:	701a      	strb	r2, [r3, #0]
	}
}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b004      	add	sp, #16
 8008e60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e64 <encoderAction>:
 *      Author: bartosz
 */

#include "interrupts.h"

void encoderAction(uint8_t direction) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	0002      	movs	r2, r0
 8008e6c:	1dfb      	adds	r3, r7, #7
 8008e6e:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 8008e70:	1dfb      	adds	r3, r7, #7
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d15c      	bne.n	8008f32 <encoderAction+0xce>

		if (menu.current.entry == CHRONO_START
 8008e78:	4aa8      	ldr	r2, [pc, #672]	; (800911c <encoderAction+0x2b8>)
 8008e7a:	23a8      	movs	r3, #168	; 0xa8
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	5cd3      	ldrb	r3, [r2, r3]
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d123      	bne.n	8008ecc <encoderAction+0x68>
				&& menu.current.level == CHRONO_START_LEVEL) {
 8008e84:	4aa5      	ldr	r2, [pc, #660]	; (800911c <encoderAction+0x2b8>)
 8008e86:	2352      	movs	r3, #82	; 0x52
 8008e88:	33ff      	adds	r3, #255	; 0xff
 8008e8a:	5cd3      	ldrb	r3, [r2, r3]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d11d      	bne.n	8008ecc <encoderAction+0x68>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8008e90:	4ba3      	ldr	r3, [pc, #652]	; (8009120 <encoderAction+0x2bc>)
 8008e92:	2224      	movs	r2, #36	; 0x24
 8008e94:	5c9b      	ldrb	r3, [r3, r2]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <encoderAction+0x40>
				rtcStartChrono(&chronograph);
 8008e9a:	4ba1      	ldr	r3, [pc, #644]	; (8009120 <encoderAction+0x2bc>)
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f001 ff1b 	bl	800acd8 <rtcStartChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8008ea2:	e045      	b.n	8008f30 <encoderAction+0xcc>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_RUNNING) {
 8008ea4:	4b9e      	ldr	r3, [pc, #632]	; (8009120 <encoderAction+0x2bc>)
 8008ea6:	2224      	movs	r2, #36	; 0x24
 8008ea8:	5c9b      	ldrb	r3, [r3, r2]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d104      	bne.n	8008eb8 <encoderAction+0x54>
				rtcStopChrono(&chronograph);
 8008eae:	4b9c      	ldr	r3, [pc, #624]	; (8009120 <encoderAction+0x2bc>)
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f001 ff65 	bl	800ad80 <rtcStopChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8008eb6:	e03b      	b.n	8008f30 <encoderAction+0xcc>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_STOP) {
 8008eb8:	4b99      	ldr	r3, [pc, #612]	; (8009120 <encoderAction+0x2bc>)
 8008eba:	2224      	movs	r2, #36	; 0x24
 8008ebc:	5c9b      	ldrb	r3, [r3, r2]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d136      	bne.n	8008f30 <encoderAction+0xcc>
				rtcResumeChrono(&chronograph);
 8008ec2:	4b97      	ldr	r3, [pc, #604]	; (8009120 <encoderAction+0x2bc>)
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f002 f80d 	bl	800aee4 <rtcResumeChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8008eca:	e031      	b.n	8008f30 <encoderAction+0xcc>
			}

		} else if (menu.current.entry == CHRONO_RESET
 8008ecc:	4a93      	ldr	r2, [pc, #588]	; (800911c <encoderAction+0x2b8>)
 8008ece:	23a8      	movs	r3, #168	; 0xa8
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	5cd3      	ldrb	r3, [r2, r3]
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d10a      	bne.n	8008eee <encoderAction+0x8a>
				&& menu.current.level == CHRONO_RESET_LEVEL) {
 8008ed8:	4a90      	ldr	r2, [pc, #576]	; (800911c <encoderAction+0x2b8>)
 8008eda:	2352      	movs	r3, #82	; 0x52
 8008edc:	33ff      	adds	r3, #255	; 0xff
 8008ede:	5cd3      	ldrb	r3, [r2, r3]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d104      	bne.n	8008eee <encoderAction+0x8a>
			rtcResetChrono(&chronograph);
 8008ee4:	4b8e      	ldr	r3, [pc, #568]	; (8009120 <encoderAction+0x2bc>)
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f002 f808 	bl	800aefc <rtcResetChrono>
 8008eec:	e021      	b.n	8008f32 <encoderAction+0xce>
		} else {

			if (menuSwitch(&menu, MENU_ENTER)) {
 8008eee:	4b8b      	ldr	r3, [pc, #556]	; (800911c <encoderAction+0x2b8>)
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f001 f916 	bl	800a124 <menuSwitch>
 8008ef8:	1e03      	subs	r3, r0, #0
 8008efa:	d00f      	beq.n	8008f1c <encoderAction+0xb8>
				LEDstr(&display, 0, menu.current.value,
 8008efc:	4a89      	ldr	r2, [pc, #548]	; (8009124 <encoderAction+0x2c0>)
 8008efe:	488a      	ldr	r0, [pc, #552]	; (8009128 <encoderAction+0x2c4>)
 8008f00:	2301      	movs	r3, #1
 8008f02:	2100      	movs	r1, #0
 8008f04:	f7ff f816 	bl	8007f34 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 8008f08:	4a84      	ldr	r2, [pc, #528]	; (800911c <encoderAction+0x2b8>)
 8008f0a:	23a7      	movs	r3, #167	; 0xa7
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	5cd2      	ldrb	r2, [r2, r3]
 8008f10:	4b85      	ldr	r3, [pc, #532]	; (8009128 <encoderAction+0x2c4>)
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7ff f85b 	bl	8007fd0 <LEDdot>
 8008f1a:	e00a      	b.n	8008f32 <encoderAction+0xce>
			} else { //if theres no child under item
				if (menu.current.value3) { //check thats editable
 8008f1c:	4a7f      	ldr	r2, [pc, #508]	; (800911c <encoderAction+0x2b8>)
 8008f1e:	2350      	movs	r3, #80	; 0x50
 8008f20:	33ff      	adds	r3, #255	; 0xff
 8008f22:	5cd3      	ldrb	r3, [r2, r3]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <encoderAction+0xce>
					flags[FLAG_LOCKED] = 1;
 8008f28:	4b80      	ldr	r3, [pc, #512]	; (800912c <encoderAction+0x2c8>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e000      	b.n	8008f32 <encoderAction+0xce>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 8008f30:	46c0      	nop			; (mov r8, r8)
			}
		}

	}

	if (direction == ENCODER_ACTION_EXIT) {
 8008f32:	1dfb      	adds	r3, r7, #7
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d11d      	bne.n	8008f76 <encoderAction+0x112>

		if (!flags[FLAG_LOCKED]) {
 8008f3a:	4b7c      	ldr	r3, [pc, #496]	; (800912c <encoderAction+0x2c8>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d116      	bne.n	8008f70 <encoderAction+0x10c>
			if (menuSwitch(&menu, MENU_EXIT)) {
 8008f42:	4b76      	ldr	r3, [pc, #472]	; (800911c <encoderAction+0x2b8>)
 8008f44:	2101      	movs	r1, #1
 8008f46:	0018      	movs	r0, r3
 8008f48:	f001 f8ec 	bl	800a124 <menuSwitch>
 8008f4c:	1e03      	subs	r3, r0, #0
 8008f4e:	d012      	beq.n	8008f76 <encoderAction+0x112>
				LEDstr(&display, 0, menu.current.value,
 8008f50:	4a74      	ldr	r2, [pc, #464]	; (8009124 <encoderAction+0x2c0>)
 8008f52:	4875      	ldr	r0, [pc, #468]	; (8009128 <encoderAction+0x2c4>)
 8008f54:	2302      	movs	r3, #2
 8008f56:	2100      	movs	r1, #0
 8008f58:	f7fe ffec 	bl	8007f34 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8008f5c:	4a6f      	ldr	r2, [pc, #444]	; (800911c <encoderAction+0x2b8>)
 8008f5e:	23a7      	movs	r3, #167	; 0xa7
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	5cd2      	ldrb	r2, [r2, r3]
 8008f64:	4b70      	ldr	r3, [pc, #448]	; (8009128 <encoderAction+0x2c4>)
 8008f66:	0011      	movs	r1, r2
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7ff f831 	bl	8007fd0 <LEDdot>
 8008f6e:	e002      	b.n	8008f76 <encoderAction+0x112>
			}
		} else {
			flags[FLAG_LOCKED] = 0;
 8008f70:	4b6e      	ldr	r3, [pc, #440]	; (800912c <encoderAction+0x2c8>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
		}

	}

	if (direction == ENCODER_ACTION_LEFT) {
 8008f76:	1dfb      	adds	r3, r7, #7
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d15f      	bne.n	800903e <encoderAction+0x1da>

		if (!flags[FLAG_LOCKED]) {
 8008f7e:	4b6b      	ldr	r3, [pc, #428]	; (800912c <encoderAction+0x2c8>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d116      	bne.n	8008fb4 <encoderAction+0x150>
			if (menuSwitch(&menu, MENU_UP)) {
 8008f86:	4b65      	ldr	r3, [pc, #404]	; (800911c <encoderAction+0x2b8>)
 8008f88:	2102      	movs	r1, #2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f001 f8ca 	bl	800a124 <menuSwitch>
 8008f90:	1e03      	subs	r3, r0, #0
 8008f92:	d057      	beq.n	8009044 <encoderAction+0x1e0>
				LEDstr(&display, 0, menu.current.value,
 8008f94:	4a63      	ldr	r2, [pc, #396]	; (8009124 <encoderAction+0x2c0>)
 8008f96:	4864      	ldr	r0, [pc, #400]	; (8009128 <encoderAction+0x2c4>)
 8008f98:	2302      	movs	r3, #2
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	f7fe ffca 	bl	8007f34 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 8008fa0:	4a5e      	ldr	r2, [pc, #376]	; (800911c <encoderAction+0x2b8>)
 8008fa2:	23a7      	movs	r3, #167	; 0xa7
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	5cd2      	ldrb	r2, [r2, r3]
 8008fa8:	4b5f      	ldr	r3, [pc, #380]	; (8009128 <encoderAction+0x2c4>)
 8008faa:	0011      	movs	r1, r2
 8008fac:	0018      	movs	r0, r3
 8008fae:	f7ff f80f 	bl	8007fd0 <LEDdot>
 8008fb2:	e047      	b.n	8009044 <encoderAction+0x1e0>
			}
		} else {

			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 8008fb4:	4a59      	ldr	r2, [pc, #356]	; (800911c <encoderAction+0x2b8>)
 8008fb6:	2352      	movs	r3, #82	; 0x52
 8008fb8:	33ff      	adds	r3, #255	; 0xff
 8008fba:	5cd3      	ldrb	r3, [r2, r3]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d13e      	bne.n	800903e <encoderAction+0x1da>

				switch (menu.current.entry) {
 8008fc0:	4a56      	ldr	r2, [pc, #344]	; (800911c <encoderAction+0x2b8>)
 8008fc2:	23a8      	movs	r3, #168	; 0xa8
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	5cd3      	ldrb	r3, [r2, r3]
 8008fc8:	2b06      	cmp	r3, #6
 8008fca:	d83b      	bhi.n	8009044 <encoderAction+0x1e0>
 8008fcc:	009a      	lsls	r2, r3, #2
 8008fce:	4b58      	ldr	r3, [pc, #352]	; (8009130 <encoderAction+0x2cc>)
 8008fd0:	18d3      	adds	r3, r2, r3
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	469f      	mov	pc, r3
				case SETTINGS_CLOCK_HOUR:
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 8008fd6:	4b52      	ldr	r3, [pc, #328]	; (8009120 <encoderAction+0x2bc>)
 8008fd8:	2201      	movs	r2, #1
 8008fda:	2100      	movs	r1, #0
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f001 ffb1 	bl	800af44 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8008fe2:	e02f      	b.n	8009044 <encoderAction+0x1e0>
				case SETTINGS_CLOCK_MINUTE:
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 8008fe4:	4b4e      	ldr	r3, [pc, #312]	; (8009120 <encoderAction+0x2bc>)
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	2101      	movs	r1, #1
 8008fea:	0018      	movs	r0, r3
 8008fec:	f001 ffaa 	bl	800af44 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8008ff0:	e028      	b.n	8009044 <encoderAction+0x1e0>
				case SETTINGS_CLOCK_SECONDS:
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 8008ff2:	4b4b      	ldr	r3, [pc, #300]	; (8009120 <encoderAction+0x2bc>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f001 ffa3 	bl	800af44 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8008ffe:	e021      	b.n	8009044 <encoderAction+0x1e0>
				case SETTINGS_CALENDAR_DAY:
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 8009000:	4b47      	ldr	r3, [pc, #284]	; (8009120 <encoderAction+0x2bc>)
 8009002:	2201      	movs	r2, #1
 8009004:	2103      	movs	r1, #3
 8009006:	0018      	movs	r0, r3
 8009008:	f001 ff9c 	bl	800af44 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800900c:	e01a      	b.n	8009044 <encoderAction+0x1e0>
				case SETTINGS_CALENDAR_MONTH:
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 800900e:	4b44      	ldr	r3, [pc, #272]	; (8009120 <encoderAction+0x2bc>)
 8009010:	2201      	movs	r2, #1
 8009012:	2104      	movs	r1, #4
 8009014:	0018      	movs	r0, r3
 8009016:	f001 ff95 	bl	800af44 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800901a:	e013      	b.n	8009044 <encoderAction+0x1e0>
				case SETTINGS_CALENDAR_YEAR:
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 800901c:	4b40      	ldr	r3, [pc, #256]	; (8009120 <encoderAction+0x2bc>)
 800901e:	2201      	movs	r2, #1
 8009020:	2105      	movs	r1, #5
 8009022:	0018      	movs	r0, r3
 8009024:	f001 ff8e 	bl	800af44 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 8009028:	e00c      	b.n	8009044 <encoderAction+0x1e0>
				case SETTINGS_CORRECTION_VALUE:
					if (temperatureCorrection > TEMPERATURE_CORRECTION_MIN)
 800902a:	4b42      	ldr	r3, [pc, #264]	; (8009134 <encoderAction+0x2d0>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3327      	adds	r3, #39	; 0x27
 8009030:	db07      	blt.n	8009042 <encoderAction+0x1de>
						temperatureCorrection--;
 8009032:	4b40      	ldr	r3, [pc, #256]	; (8009134 <encoderAction+0x2d0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	1e5a      	subs	r2, r3, #1
 8009038:	4b3e      	ldr	r3, [pc, #248]	; (8009134 <encoderAction+0x2d0>)
 800903a:	601a      	str	r2, [r3, #0]
					break;
 800903c:	e001      	b.n	8009042 <encoderAction+0x1de>
				}

			}
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	e000      	b.n	8009044 <encoderAction+0x1e0>
					break;
 8009042:	46c0      	nop			; (mov r8, r8)

		}

	}
	if (direction == ENCODER_ACTION_RIGHT) {
 8009044:	1dfb      	adds	r3, r7, #7
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d15f      	bne.n	800910c <encoderAction+0x2a8>

		if (!flags[FLAG_LOCKED]) {
 800904c:	4b37      	ldr	r3, [pc, #220]	; (800912c <encoderAction+0x2c8>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d116      	bne.n	8009082 <encoderAction+0x21e>
			if (menuSwitch(&menu, MENU_DOWN)) {
 8009054:	4b31      	ldr	r3, [pc, #196]	; (800911c <encoderAction+0x2b8>)
 8009056:	2103      	movs	r1, #3
 8009058:	0018      	movs	r0, r3
 800905a:	f001 f863 	bl	800a124 <menuSwitch>
 800905e:	1e03      	subs	r3, r0, #0
 8009060:	d057      	beq.n	8009112 <encoderAction+0x2ae>
				LEDstr(&display, 0, menu.current.value,
 8009062:	4a30      	ldr	r2, [pc, #192]	; (8009124 <encoderAction+0x2c0>)
 8009064:	4830      	ldr	r0, [pc, #192]	; (8009128 <encoderAction+0x2c4>)
 8009066:	2301      	movs	r3, #1
 8009068:	2100      	movs	r1, #0
 800906a:	f7fe ff63 	bl	8007f34 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 800906e:	4a2b      	ldr	r2, [pc, #172]	; (800911c <encoderAction+0x2b8>)
 8009070:	23a7      	movs	r3, #167	; 0xa7
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	5cd2      	ldrb	r2, [r2, r3]
 8009076:	4b2c      	ldr	r3, [pc, #176]	; (8009128 <encoderAction+0x2c4>)
 8009078:	0011      	movs	r1, r2
 800907a:	0018      	movs	r0, r3
 800907c:	f7fe ffa8 	bl	8007fd0 <LEDdot>
			}

		}

	}
}
 8009080:	e047      	b.n	8009112 <encoderAction+0x2ae>
			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 8009082:	4a26      	ldr	r2, [pc, #152]	; (800911c <encoderAction+0x2b8>)
 8009084:	2352      	movs	r3, #82	; 0x52
 8009086:	33ff      	adds	r3, #255	; 0xff
 8009088:	5cd3      	ldrb	r3, [r2, r3]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d13e      	bne.n	800910c <encoderAction+0x2a8>
				switch (menu.current.entry) {
 800908e:	4a23      	ldr	r2, [pc, #140]	; (800911c <encoderAction+0x2b8>)
 8009090:	23a8      	movs	r3, #168	; 0xa8
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	5cd3      	ldrb	r3, [r2, r3]
 8009096:	2b06      	cmp	r3, #6
 8009098:	d83b      	bhi.n	8009112 <encoderAction+0x2ae>
 800909a:	009a      	lsls	r2, r3, #2
 800909c:	4b26      	ldr	r3, [pc, #152]	; (8009138 <encoderAction+0x2d4>)
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	469f      	mov	pc, r3
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <encoderAction+0x2bc>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	0018      	movs	r0, r3
 80090ac:	f001 ff4a 	bl	800af44 <rtcChangeValue>
					break;
 80090b0:	e02f      	b.n	8009112 <encoderAction+0x2ae>
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 80090b2:	4b1b      	ldr	r3, [pc, #108]	; (8009120 <encoderAction+0x2bc>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	2101      	movs	r1, #1
 80090b8:	0018      	movs	r0, r3
 80090ba:	f001 ff43 	bl	800af44 <rtcChangeValue>
					break;
 80090be:	e028      	b.n	8009112 <encoderAction+0x2ae>
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <encoderAction+0x2bc>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	2102      	movs	r1, #2
 80090c6:	0018      	movs	r0, r3
 80090c8:	f001 ff3c 	bl	800af44 <rtcChangeValue>
					break;
 80090cc:	e021      	b.n	8009112 <encoderAction+0x2ae>
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 80090ce:	4b14      	ldr	r3, [pc, #80]	; (8009120 <encoderAction+0x2bc>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	2103      	movs	r1, #3
 80090d4:	0018      	movs	r0, r3
 80090d6:	f001 ff35 	bl	800af44 <rtcChangeValue>
					break;
 80090da:	e01a      	b.n	8009112 <encoderAction+0x2ae>
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 80090dc:	4b10      	ldr	r3, [pc, #64]	; (8009120 <encoderAction+0x2bc>)
 80090de:	2200      	movs	r2, #0
 80090e0:	2104      	movs	r1, #4
 80090e2:	0018      	movs	r0, r3
 80090e4:	f001 ff2e 	bl	800af44 <rtcChangeValue>
					break;
 80090e8:	e013      	b.n	8009112 <encoderAction+0x2ae>
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <encoderAction+0x2bc>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	2105      	movs	r1, #5
 80090f0:	0018      	movs	r0, r3
 80090f2:	f001 ff27 	bl	800af44 <rtcChangeValue>
					break;
 80090f6:	e00c      	b.n	8009112 <encoderAction+0x2ae>
					if (temperatureCorrection < TEMPERATURE_CORRECTION_MAX)
 80090f8:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <encoderAction+0x2d0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b1d      	cmp	r3, #29
 80090fe:	dc07      	bgt.n	8009110 <encoderAction+0x2ac>
						temperatureCorrection++;
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <encoderAction+0x2d0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <encoderAction+0x2d0>)
 8009108:	601a      	str	r2, [r3, #0]
					break;
 800910a:	e001      	b.n	8009110 <encoderAction+0x2ac>
			}
 800910c:	46c0      	nop			; (mov r8, r8)
 800910e:	e000      	b.n	8009112 <encoderAction+0x2ae>
					break;
 8009110:	46c0      	nop			; (mov r8, r8)
}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	46bd      	mov	sp, r7
 8009116:	b002      	add	sp, #8
 8009118:	bd80      	pop	{r7, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	20000058 	.word	0x20000058
 8009120:	200001fc 	.word	0x200001fc
 8009124:	200001a2 	.word	0x200001a2
 8009128:	20000224 	.word	0x20000224
 800912c:	20000054 	.word	0x20000054
 8009130:	0800babc 	.word	0x0800babc
 8009134:	2000003c 	.word	0x2000003c
 8009138:	0800bad8 	.word	0x0800bad8

0800913c <GPIO_EXTI_Rising_FallingCallback>:

void GPIO_EXTI_Rising_FallingCallback(uint16_t GPIO_Pin) {
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	0002      	movs	r2, r0
 8009144:	1dbb      	adds	r3, r7, #6
 8009146:	801a      	strh	r2, [r3, #0]

	TIM2->CNT = 0; // reset timer if interrupt occurs
 8009148:	2380      	movs	r3, #128	; 0x80
 800914a:	05db      	lsls	r3, r3, #23
 800914c:	2200      	movs	r2, #0
 800914e:	625a      	str	r2, [r3, #36]	; 0x24

	if (GPIO_Pin == ENC1_Pin) {
 8009150:	1dbb      	adds	r3, r7, #6
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d111      	bne.n	800917c <GPIO_EXTI_Rising_FallingCallback+0x40>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8009158:	4b1c      	ldr	r3, [pc, #112]	; (80091cc <GPIO_EXTI_Rising_FallingCallback+0x90>)
 800915a:	2140      	movs	r1, #64	; 0x40
 800915c:	0018      	movs	r0, r3
 800915e:	f7fa fd7b 	bl	8003c58 <HAL_GPIO_ReadPin>
 8009162:	0003      	movs	r3, r0
 8009164:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8009166:	4b19      	ldr	r3, [pc, #100]	; (80091cc <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8009168:	2180      	movs	r1, #128	; 0x80
 800916a:	0018      	movs	r0, r3
 800916c:	f7fa fd74 	bl	8003c58 <HAL_GPIO_ReadPin>
 8009170:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8009172:	429c      	cmp	r4, r3
 8009174:	d002      	beq.n	800917c <GPIO_EXTI_Rising_FallingCallback+0x40>
			encoderAction(ENCODER_ACTION_LEFT);
 8009176:	2000      	movs	r0, #0
 8009178:	f7ff fe74 	bl	8008e64 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 800917c:	1dbb      	adds	r3, r7, #6
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	2b80      	cmp	r3, #128	; 0x80
 8009182:	d111      	bne.n	80091a8 <GPIO_EXTI_Rising_FallingCallback+0x6c>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 8009184:	4b11      	ldr	r3, [pc, #68]	; (80091cc <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8009186:	2140      	movs	r1, #64	; 0x40
 8009188:	0018      	movs	r0, r3
 800918a:	f7fa fd65 	bl	8003c58 <HAL_GPIO_ReadPin>
 800918e:	0003      	movs	r3, r0
 8009190:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 8009192:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <GPIO_EXTI_Rising_FallingCallback+0x90>)
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	0018      	movs	r0, r3
 8009198:	f7fa fd5e 	bl	8003c58 <HAL_GPIO_ReadPin>
 800919c:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800919e:	429c      	cmp	r4, r3
 80091a0:	d002      	beq.n	80091a8 <GPIO_EXTI_Rising_FallingCallback+0x6c>
			encoderAction(ENCODER_ACTION_RIGHT);
 80091a2:	2001      	movs	r0, #1
 80091a4:	f7ff fe5e 	bl	8008e64 <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 80091a8:	1dbb      	adds	r3, r7, #6
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d102      	bne.n	80091b6 <GPIO_EXTI_Rising_FallingCallback+0x7a>
		encoderAction(ENCODER_ACTION_ENTER);
 80091b0:	2002      	movs	r0, #2
 80091b2:	f7ff fe57 	bl	8008e64 <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 80091b6:	1dbb      	adds	r3, r7, #6
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	2b10      	cmp	r3, #16
 80091bc:	d102      	bne.n	80091c4 <GPIO_EXTI_Rising_FallingCallback+0x88>
		encoderAction(ENCODER_ACTION_EXIT);
 80091be:	2003      	movs	r0, #3
 80091c0:	f7ff fe50 	bl	8008e64 <encoderAction>
	}

	if (GPIO_Pin == MODE_Pin) {

	}
}
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b003      	add	sp, #12
 80091ca:	bd90      	pop	{r4, r7, pc}
 80091cc:	50000400 	.word	0x50000400

080091d0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	0002      	movs	r2, r0
 80091d8:	1dbb      	adds	r3, r7, #6
 80091da:	801a      	strh	r2, [r3, #0]
	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 80091dc:	1dbb      	adds	r3, r7, #6
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	0018      	movs	r0, r3
 80091e2:	f7ff ffab 	bl	800913c <GPIO_EXTI_Rising_FallingCallback>
}
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	46bd      	mov	sp, r7
 80091ea:	b002      	add	sp, #8
 80091ec:	bd80      	pop	{r7, pc}

080091ee <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	0002      	movs	r2, r0
 80091f6:	1dbb      	adds	r3, r7, #6
 80091f8:	801a      	strh	r2, [r3, #0]

	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 80091fa:	1dbb      	adds	r3, r7, #6
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	0018      	movs	r0, r3
 8009200:	f7ff ff9c 	bl	800913c <GPIO_EXTI_Rising_FallingCallback>

}
 8009204:	46c0      	nop			; (mov r8, r8)
 8009206:	46bd      	mov	sp, r7
 8009208:	b002      	add	sp, #8
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d103      	bne.n	8009226 <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 800921e:	4b1f      	ldr	r3, [pc, #124]	; (800929c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8009220:	0018      	movs	r0, r3
 8009222:	f7fe f897 	bl	8007354 <LEDmultiplexing>
	}
	if (htim->Instance == TIM2) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	2380      	movs	r3, #128	; 0x80
 800922c:	05db      	lsls	r3, r3, #23
 800922e:	429a      	cmp	r2, r3
 8009230:	d102      	bne.n	8009238 <HAL_TIM_PeriodElapsedCallback+0x2c>
		flags[FLAG_SLEEP] = 1;
 8009232:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8009234:	2201      	movs	r2, #1
 8009236:	705a      	strb	r2, [r3, #1]
	}
	if (htim->Instance == TIM3) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a19      	ldr	r2, [pc, #100]	; (80092a4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d126      	bne.n	8009290 <HAL_TIM_PeriodElapsedCallback+0x84>
		//								READ REF VOLTAGE
		adcSetChannel(&hadc1, ADC_CHANNEL_VREFINT);
 8009242:	4a19      	ldr	r2, [pc, #100]	; (80092a8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8009244:	4b19      	ldr	r3, [pc, #100]	; (80092ac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8009246:	0011      	movs	r1, r2
 8009248:	0018      	movs	r0, r3
 800924a:	f7fe fedd 	bl	8008008 <adcSetChannel>
		uint32_t voltageRef = adcVoltage(adcRead(&hadc1));
 800924e:	4b17      	ldr	r3, [pc, #92]	; (80092ac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8009250:	0018      	movs	r0, r3
 8009252:	f7fe fefd 	bl	8008050 <adcRead>
 8009256:	0003      	movs	r3, r0
 8009258:	0018      	movs	r0, r3
 800925a:	f7fe ff47 	bl	80080ec <adcVoltage>
 800925e:	0003      	movs	r3, r0
 8009260:	60fb      	str	r3, [r7, #12]

		adcSetChannel(&hadc1, ADC_CHANNEL_TEMPSENSOR);
 8009262:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8009264:	4b11      	ldr	r3, [pc, #68]	; (80092ac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8009266:	0011      	movs	r1, r2
 8009268:	0018      	movs	r0, r3
 800926a:	f7fe fecd 	bl	8008008 <adcSetChannel>
		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8009270:	0018      	movs	r0, r3
 8009272:	f7fe feed 	bl	8008050 <adcRead>
 8009276:	0002      	movs	r2, r0
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	0019      	movs	r1, r3
 800927c:	0010      	movs	r0, r2
 800927e:	f7fe ff01 	bl	8008084 <adcTemperature>
 8009282:	0002      	movs	r2, r0
				+ temperatureCorrection;
 8009284:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	18d3      	adds	r3, r2, r3
 800928a:	001a      	movs	r2, r3
		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800928e:	601a      	str	r2, [r3, #0]
	}
}
 8009290:	46c0      	nop			; (mov r8, r8)
 8009292:	46bd      	mov	sp, r7
 8009294:	b004      	add	sp, #16
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40012c00 	.word	0x40012c00
 800929c:	20000224 	.word	0x20000224
 80092a0:	20000054 	.word	0x20000054
 80092a4:	40000400 	.word	0x40000400
 80092a8:	b4002000 	.word	0xb4002000
 80092ac:	200002e4 	.word	0x200002e4
 80092b0:	b0001000 	.word	0xb0001000
 80092b4:	2000003c 	.word	0x2000003c
 80092b8:	2000002c 	.word	0x2000002c

080092bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b096      	sub	sp, #88	; 0x58
 80092c0:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80092c2:	f7f9 fa59 	bl	8002778 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80092c6:	f000 fa2b 	bl	8009720 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80092ca:	f000 fcf5 	bl	8009cb8 <MX_GPIO_Init>
	MX_TIM1_Init();
 80092ce:	f000 fb9b 	bl	8009a08 <MX_TIM1_Init>
	MX_TIM2_Init();
 80092d2:	f000 fbf5 	bl	8009ac0 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80092d6:	f000 fca1 	bl	8009c1c <MX_USART2_UART_Init>
	MX_RTC_Init();
 80092da:	f000 fb29 	bl	8009930 <MX_RTC_Init>
	MX_ADC1_Init();
 80092de:	f000 fa75 	bl	80097cc <MX_ADC1_Init>
	MX_TIM3_Init();
 80092e2:	f000 fc43 	bl	8009b6c <MX_TIM3_Init>
	MX_I2C1_Init();
 80092e6:	f000 fae3 	bl	80098b0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80092ea:	4bf8      	ldr	r3, [pc, #992]	; (80096cc <main+0x410>)
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7fc fdd3 	bl	8005e98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80092f2:	4bf7      	ldr	r3, [pc, #988]	; (80096d0 <main+0x414>)
 80092f4:	0018      	movs	r0, r3
 80092f6:	f7fc fdcf 	bl	8005e98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80092fa:	4bf6      	ldr	r3, [pc, #984]	; (80096d4 <main+0x418>)
 80092fc:	0018      	movs	r0, r3
 80092fe:	f7fc fdcb 	bl	8005e98 <HAL_TIM_Base_Start_IT>

	adcInit(&hadc1);
 8009302:	4bf5      	ldr	r3, [pc, #980]	; (80096d8 <main+0x41c>)
 8009304:	0018      	movs	r0, r3
 8009306:	f7fe fe73 	bl	8007ff0 <adcInit>
	temperatureCorrection = -9;
 800930a:	4bf4      	ldr	r3, [pc, #976]	; (80096dc <main+0x420>)
 800930c:	2209      	movs	r2, #9
 800930e:	4252      	negs	r2, r2
 8009310:	601a      	str	r2, [r3, #0]


//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 8009312:	4af3      	ldr	r2, [pc, #972]	; (80096e0 <main+0x424>)
 8009314:	23a0      	movs	r3, #160	; 0xa0
 8009316:	05d9      	lsls	r1, r3, #23
 8009318:	48f2      	ldr	r0, [pc, #968]	; (80096e4 <main+0x428>)
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	9314      	str	r3, [sp, #80]	; 0x50
 8009320:	23a0      	movs	r3, #160	; 0xa0
 8009322:	05db      	lsls	r3, r3, #23
 8009324:	9313      	str	r3, [sp, #76]	; 0x4c
 8009326:	2380      	movs	r3, #128	; 0x80
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	9312      	str	r3, [sp, #72]	; 0x48
 800932c:	23a0      	movs	r3, #160	; 0xa0
 800932e:	05db      	lsls	r3, r3, #23
 8009330:	9311      	str	r3, [sp, #68]	; 0x44
 8009332:	2301      	movs	r3, #1
 8009334:	9310      	str	r3, [sp, #64]	; 0x40
 8009336:	4bea      	ldr	r3, [pc, #936]	; (80096e0 <main+0x424>)
 8009338:	930f      	str	r3, [sp, #60]	; 0x3c
 800933a:	2340      	movs	r3, #64	; 0x40
 800933c:	930e      	str	r3, [sp, #56]	; 0x38
 800933e:	4bea      	ldr	r3, [pc, #936]	; (80096e8 <main+0x42c>)
 8009340:	930d      	str	r3, [sp, #52]	; 0x34
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	930c      	str	r3, [sp, #48]	; 0x30
 8009348:	23a0      	movs	r3, #160	; 0xa0
 800934a:	05db      	lsls	r3, r3, #23
 800934c:	930b      	str	r3, [sp, #44]	; 0x2c
 800934e:	2380      	movs	r3, #128	; 0x80
 8009350:	015b      	lsls	r3, r3, #5
 8009352:	930a      	str	r3, [sp, #40]	; 0x28
 8009354:	23a0      	movs	r3, #160	; 0xa0
 8009356:	05db      	lsls	r3, r3, #23
 8009358:	9309      	str	r3, [sp, #36]	; 0x24
 800935a:	2380      	movs	r3, #128	; 0x80
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	9308      	str	r3, [sp, #32]
 8009360:	23a0      	movs	r3, #160	; 0xa0
 8009362:	05db      	lsls	r3, r3, #23
 8009364:	9307      	str	r3, [sp, #28]
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	9306      	str	r3, [sp, #24]
 800936a:	23a0      	movs	r3, #160	; 0xa0
 800936c:	05db      	lsls	r3, r3, #23
 800936e:	9305      	str	r3, [sp, #20]
 8009370:	2380      	movs	r3, #128	; 0x80
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	23a0      	movs	r3, #160	; 0xa0
 8009378:	05db      	lsls	r3, r3, #23
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	2304      	movs	r3, #4
 800937e:	9302      	str	r3, [sp, #8]
 8009380:	4bd7      	ldr	r3, [pc, #860]	; (80096e0 <main+0x424>)
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	2302      	movs	r3, #2
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	0013      	movs	r3, r2
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	f7fe fd14 	bl	8007db8 <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "    ");
 8009390:	4ad6      	ldr	r2, [pc, #856]	; (80096ec <main+0x430>)
 8009392:	4bd4      	ldr	r3, [pc, #848]	; (80096e4 <main+0x428>)
 8009394:	0011      	movs	r1, r2
 8009396:	0018      	movs	r0, r3
 8009398:	f7fe fd8e 	bl	8007eb8 <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 800939c:	48d4      	ldr	r0, [pc, #848]	; (80096f0 <main+0x434>)
 800939e:	2301      	movs	r3, #1
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	23ff      	movs	r3, #255	; 0xff
 80093a8:	2200      	movs	r2, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	f000 fe44 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, CHRONO_HUNDREDTHS,
 80093b0:	48cf      	ldr	r0, [pc, #828]	; (80096f0 <main+0x434>)
 80093b2:	2305      	movs	r3, #5
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	2302      	movs	r3, #2
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	23ff      	movs	r3, #255	; 0xff
 80093bc:	2200      	movs	r2, #0
 80093be:	2101      	movs	r1, #1
 80093c0:	f000 fe3a 	bl	800a038 <menuItemInit>
	CHRONO_RESET);
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 80093c4:	48ca      	ldr	r0, [pc, #808]	; (80096f0 <main+0x434>)
 80093c6:	23ff      	movs	r3, #255	; 0xff
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	23ff      	movs	r3, #255	; 0xff
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	23ff      	movs	r3, #255	; 0xff
 80093d0:	2200      	movs	r2, #0
 80093d2:	2103      	movs	r1, #3
 80093d4:	f000 fe30 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 80093d8:	48c5      	ldr	r0, [pc, #788]	; (80096f0 <main+0x434>)
 80093da:	23ff      	movs	r3, #255	; 0xff
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	23ff      	movs	r3, #255	; 0xff
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	23ff      	movs	r3, #255	; 0xff
 80093e4:	2200      	movs	r2, #0
 80093e6:	2104      	movs	r1, #4
 80093e8:	f000 fe26 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 80093ec:	48c0      	ldr	r0, [pc, #768]	; (80096f0 <main+0x434>)
 80093ee:	23ff      	movs	r3, #255	; 0xff
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	23ff      	movs	r3, #255	; 0xff
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	23ff      	movs	r3, #255	; 0xff
 80093f8:	2200      	movs	r2, #0
 80093fa:	2102      	movs	r1, #2
 80093fc:	f000 fe1c 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 8009400:	48bb      	ldr	r0, [pc, #748]	; (80096f0 <main+0x434>)
 8009402:	23ff      	movs	r3, #255	; 0xff
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	23ff      	movs	r3, #255	; 0xff
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	23ff      	movs	r3, #255	; 0xff
 800940c:	2200      	movs	r2, #0
 800940e:	2105      	movs	r1, #5
 8009410:	f000 fe12 	bl	800a038 <menuItemInit>
//	menuItemInit(&menu, AZIMUTH, 0, MENU_NONE, MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, SETTINGS_CLOCK,
 8009414:	48b6      	ldr	r0, [pc, #728]	; (80096f0 <main+0x434>)
 8009416:	2309      	movs	r3, #9
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	2306      	movs	r3, #6
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	23ff      	movs	r3, #255	; 0xff
 8009420:	2200      	movs	r2, #0
 8009422:	2106      	movs	r1, #6
 8009424:	f000 fe08 	bl	800a038 <menuItemInit>
	SETTINGS_REFERENCE);

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 8009428:	48b1      	ldr	r0, [pc, #708]	; (80096f0 <main+0x434>)
 800942a:	23ff      	movs	r3, #255	; 0xff
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	23ff      	movs	r3, #255	; 0xff
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2300      	movs	r3, #0
 8009434:	2201      	movs	r2, #1
 8009436:	2100      	movs	r1, #0
 8009438:	f000 fdfe 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 800943c:	48ac      	ldr	r0, [pc, #688]	; (80096f0 <main+0x434>)
 800943e:	23ff      	movs	r3, #255	; 0xff
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	23ff      	movs	r3, #255	; 0xff
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	2300      	movs	r3, #0
 8009448:	2201      	movs	r2, #1
 800944a:	2101      	movs	r1, #1
 800944c:	f000 fdf4 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 8009450:	48a7      	ldr	r0, [pc, #668]	; (80096f0 <main+0x434>)
 8009452:	23ff      	movs	r3, #255	; 0xff
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	23ff      	movs	r3, #255	; 0xff
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	2301      	movs	r3, #1
 800945c:	2201      	movs	r2, #1
 800945e:	2103      	movs	r1, #3
 8009460:	f000 fdea 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, CHRONO_HUNDREDTHS, 1, CHRONO, MENU_NONE, MENU_NONE);
 8009464:	48a2      	ldr	r0, [pc, #648]	; (80096f0 <main+0x434>)
 8009466:	23ff      	movs	r3, #255	; 0xff
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	23ff      	movs	r3, #255	; 0xff
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2301      	movs	r3, #1
 8009470:	2201      	movs	r2, #1
 8009472:	2102      	movs	r1, #2
 8009474:	f000 fde0 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, CHRONO_START, 1, CHRONO, MENU_NONE, MENU_NONE);
 8009478:	489d      	ldr	r0, [pc, #628]	; (80096f0 <main+0x434>)
 800947a:	23ff      	movs	r3, #255	; 0xff
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	23ff      	movs	r3, #255	; 0xff
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	2301      	movs	r3, #1
 8009484:	2201      	movs	r2, #1
 8009486:	2104      	movs	r1, #4
 8009488:	f000 fdd6 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 800948c:	4898      	ldr	r0, [pc, #608]	; (80096f0 <main+0x434>)
 800948e:	23ff      	movs	r3, #255	; 0xff
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	23ff      	movs	r3, #255	; 0xff
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	2301      	movs	r3, #1
 8009498:	2201      	movs	r2, #1
 800949a:	2105      	movs	r1, #5
 800949c:	f000 fdcc 	bl	800a038 <menuItemInit>
	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, SETTINGS_CLOCK_HOUR,
 80094a0:	4893      	ldr	r0, [pc, #588]	; (80096f0 <main+0x434>)
 80094a2:	2302      	movs	r3, #2
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	2300      	movs	r3, #0
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	2306      	movs	r3, #6
 80094ac:	2201      	movs	r2, #1
 80094ae:	2106      	movs	r1, #6
 80094b0:	f000 fdc2 	bl	800a038 <menuItemInit>
	SETTINGS_CLOCK_SECONDS);
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS,
 80094b4:	488e      	ldr	r0, [pc, #568]	; (80096f0 <main+0x434>)
 80094b6:	2305      	movs	r3, #5
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	2303      	movs	r3, #3
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	2306      	movs	r3, #6
 80094c0:	2201      	movs	r2, #1
 80094c2:	2107      	movs	r1, #7
 80094c4:	f000 fdb8 	bl	800a038 <menuItemInit>
	SETTINGS_CALENDAR_DAY,
	SETTINGS_CALENDAR_YEAR);
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS,
 80094c8:	4889      	ldr	r0, [pc, #548]	; (80096f0 <main+0x434>)
 80094ca:	2307      	movs	r3, #7
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	2307      	movs	r3, #7
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	2306      	movs	r3, #6
 80094d4:	2201      	movs	r2, #1
 80094d6:	2109      	movs	r1, #9
 80094d8:	f000 fdae 	bl	800a038 <menuItemInit>
	SETTINGS_REFERENCE_VALUE,
	SETTINGS_REFERENCE_VALUE);
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS,
 80094dc:	4884      	ldr	r0, [pc, #528]	; (80096f0 <main+0x434>)
 80094de:	2306      	movs	r3, #6
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	2306      	movs	r3, #6
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	2306      	movs	r3, #6
 80094e8:	2201      	movs	r2, #1
 80094ea:	2108      	movs	r1, #8
 80094ec:	f000 fda4 	bl	800a038 <menuItemInit>
	SETTINGS_CORRECTION_VALUE,
	SETTINGS_CORRECTION_VALUE);

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOUR, 2, SETTINGS_CLOCK, MENU_NONE,
 80094f0:	487f      	ldr	r0, [pc, #508]	; (80096f0 <main+0x434>)
 80094f2:	23ff      	movs	r3, #255	; 0xff
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	23ff      	movs	r3, #255	; 0xff
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	2306      	movs	r3, #6
 80094fc:	2202      	movs	r2, #2
 80094fe:	2100      	movs	r1, #0
 8009500:	f000 fd9a 	bl	800a038 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_MINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 8009504:	487a      	ldr	r0, [pc, #488]	; (80096f0 <main+0x434>)
 8009506:	23ff      	movs	r3, #255	; 0xff
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	23ff      	movs	r3, #255	; 0xff
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	2306      	movs	r3, #6
 8009510:	2202      	movs	r2, #2
 8009512:	2101      	movs	r1, #1
 8009514:	f000 fd90 	bl	800a038 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK,
 8009518:	4875      	ldr	r0, [pc, #468]	; (80096f0 <main+0x434>)
 800951a:	23ff      	movs	r3, #255	; 0xff
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	23ff      	movs	r3, #255	; 0xff
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	2306      	movs	r3, #6
 8009524:	2202      	movs	r2, #2
 8009526:	2102      	movs	r1, #2
 8009528:	f000 fd86 	bl	800a038 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAY, 2, SETTINGS_CALENDAR,
 800952c:	4870      	ldr	r0, [pc, #448]	; (80096f0 <main+0x434>)
 800952e:	23ff      	movs	r3, #255	; 0xff
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	23ff      	movs	r3, #255	; 0xff
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	2307      	movs	r3, #7
 8009538:	2202      	movs	r2, #2
 800953a:	2103      	movs	r1, #3
 800953c:	f000 fd7c 	bl	800a038 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_MONTH, 2, SETTINGS_CALENDAR,
 8009540:	486b      	ldr	r0, [pc, #428]	; (80096f0 <main+0x434>)
 8009542:	23ff      	movs	r3, #255	; 0xff
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	23ff      	movs	r3, #255	; 0xff
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	2307      	movs	r3, #7
 800954c:	2202      	movs	r2, #2
 800954e:	2104      	movs	r1, #4
 8009550:	f000 fd72 	bl	800a038 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR,
 8009554:	4866      	ldr	r0, [pc, #408]	; (80096f0 <main+0x434>)
 8009556:	23ff      	movs	r3, #255	; 0xff
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	23ff      	movs	r3, #255	; 0xff
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	2307      	movs	r3, #7
 8009560:	2202      	movs	r2, #2
 8009562:	2105      	movs	r1, #5
 8009564:	f000 fd68 	bl	800a038 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CORRECTION_VALUE, 2, SETTINGS_CORRECTION,
 8009568:	4861      	ldr	r0, [pc, #388]	; (80096f0 <main+0x434>)
 800956a:	23ff      	movs	r3, #255	; 0xff
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	23ff      	movs	r3, #255	; 0xff
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	2308      	movs	r3, #8
 8009574:	2202      	movs	r2, #2
 8009576:	2106      	movs	r1, #6
 8009578:	f000 fd5e 	bl	800a038 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_REFERENCE_VALUE, 2, SETTINGS_REFERENCE,
 800957c:	485c      	ldr	r0, [pc, #368]	; (80096f0 <main+0x434>)
 800957e:	23ff      	movs	r3, #255	; 0xff
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	23ff      	movs	r3, #255	; 0xff
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2309      	movs	r3, #9
 8009588:	2202      	movs	r2, #2
 800958a:	2107      	movs	r1, #7
 800958c:	f000 fd54 	bl	800a038 <menuItemInit>
//	NOT_EDITABLE);
//	menuItemChangeValue(&menu, TEMPERATURE, 0, "20 ^", INTER_DISABLED,
//	NOT_EDITABLE);
//	menuItemChangeValue(&menu, ALTITUDE, 0, " 102", INTER_DISABLED,
//	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", INTER_DISABLED,
 8009590:	4b58      	ldr	r3, [pc, #352]	; (80096f4 <main+0x438>)
 8009592:	4857      	ldr	r0, [pc, #348]	; (80096f0 <main+0x434>)
 8009594:	2200      	movs	r2, #0
 8009596:	9201      	str	r2, [sp, #4]
 8009598:	2204      	movs	r2, #4
 800959a:	9200      	str	r2, [sp, #0]
 800959c:	2200      	movs	r2, #0
 800959e:	2106      	movs	r1, #6
 80095a0:	f000 fc7a 	bl	8009e98 <menuItemChangeValue>
	NOT_EDITABLE);

	//level 1

	menuItemChangeValue(&menu, CHRONO_START, 1, "St  ", INTER_DISABLED,
 80095a4:	4b54      	ldr	r3, [pc, #336]	; (80096f8 <main+0x43c>)
 80095a6:	4852      	ldr	r0, [pc, #328]	; (80096f0 <main+0x434>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	9201      	str	r2, [sp, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	9200      	str	r2, [sp, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	2104      	movs	r1, #4
 80095b4:	f000 fc70 	bl	8009e98 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", INTER_COLON,
 80095b8:	4b50      	ldr	r3, [pc, #320]	; (80096fc <main+0x440>)
 80095ba:	484d      	ldr	r0, [pc, #308]	; (80096f0 <main+0x434>)
 80095bc:	2200      	movs	r2, #0
 80095be:	9201      	str	r2, [sp, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	9200      	str	r2, [sp, #0]
 80095c4:	2201      	movs	r2, #1
 80095c6:	2105      	movs	r1, #5
 80095c8:	f000 fc66 	bl	8009e98 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", INTER_DISABLED,
 80095cc:	4b4c      	ldr	r3, [pc, #304]	; (8009700 <main+0x444>)
 80095ce:	4848      	ldr	r0, [pc, #288]	; (80096f0 <main+0x434>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	9201      	str	r2, [sp, #4]
 80095d4:	2204      	movs	r2, #4
 80095d6:	9200      	str	r2, [sp, #0]
 80095d8:	2201      	movs	r2, #1
 80095da:	2106      	movs	r1, #6
 80095dc:	f000 fc5c 	bl	8009e98 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", INTER_DISABLED,
 80095e0:	4b48      	ldr	r3, [pc, #288]	; (8009704 <main+0x448>)
 80095e2:	4843      	ldr	r0, [pc, #268]	; (80096f0 <main+0x434>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	9201      	str	r2, [sp, #4]
 80095e8:	2204      	movs	r2, #4
 80095ea:	9200      	str	r2, [sp, #0]
 80095ec:	2201      	movs	r2, #1
 80095ee:	2107      	movs	r1, #7
 80095f0:	f000 fc52 	bl	8009e98 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ",
 80095f4:	4b44      	ldr	r3, [pc, #272]	; (8009708 <main+0x44c>)
 80095f6:	483e      	ldr	r0, [pc, #248]	; (80096f0 <main+0x434>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	9201      	str	r2, [sp, #4]
 80095fc:	2204      	movs	r2, #4
 80095fe:	9200      	str	r2, [sp, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	2108      	movs	r1, #8
 8009604:	f000 fc48 	bl	8009e98 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ",
 8009608:	4b40      	ldr	r3, [pc, #256]	; (800970c <main+0x450>)
 800960a:	4839      	ldr	r0, [pc, #228]	; (80096f0 <main+0x434>)
 800960c:	2200      	movs	r2, #0
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	2204      	movs	r2, #4
 8009612:	9200      	str	r2, [sp, #0]
 8009614:	2201      	movs	r2, #1
 8009616:	2109      	movs	r1, #9
 8009618:	f000 fc3e 	bl	8009e98 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	menuResetCurrent(&menu);
 800961c:	4b34      	ldr	r3, [pc, #208]	; (80096f0 <main+0x434>)
 800961e:	0018      	movs	r0, r3
 8009620:	f000 fc11 	bl	8009e46 <menuResetCurrent>

	bme280Init(&bme280, &hi2c1);
 8009624:	4a3a      	ldr	r2, [pc, #232]	; (8009710 <main+0x454>)
 8009626:	4b3b      	ldr	r3, [pc, #236]	; (8009714 <main+0x458>)
 8009628:	0011      	movs	r1, r2
 800962a:	0018      	movs	r0, r3
 800962c:	f7fe fd74 	bl	8008118 <bme280Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//read RTC time
		rtcGetTime(&chronograph);
 8009630:	4b39      	ldr	r3, [pc, #228]	; (8009718 <main+0x45c>)
 8009632:	0018      	movs	r0, r3
 8009634:	f001 f8c8 	bl	800a7c8 <rtcGetTime>

		//read sensor
		bme280Read(&bme280);
 8009638:	4b36      	ldr	r3, [pc, #216]	; (8009714 <main+0x458>)
 800963a:	0018      	movs	r0, r3
 800963c:	f7fe fe99 	bl	8008372 <bme280Read>

		//write actual values to menu matrix
		interfaceWrite();
 8009640:	f7ff f9e4 	bl	8008a0c <interfaceWrite>

		//display current item
		if (display.transitionStatus == LED_TRANSITION_DISABLED) {
 8009644:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <main+0x428>)
 8009646:	2267      	movs	r2, #103	; 0x67
 8009648:	5c9b      	ldrb	r3, [r3, r2]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <main+0x396>
			interfaceShowActual();
 800964e:	f7ff fb5f 	bl	8008d10 <interfaceShowActual>
		}

		//												LOW POWER SECTION
		if (flags[FLAG_SLEEP]
 8009652:	4b32      	ldr	r3, [pc, #200]	; (800971c <main+0x460>)
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0ea      	beq.n	8009630 <main+0x374>
				&& HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) {
 800965a:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <main+0x424>)
 800965c:	2108      	movs	r1, #8
 800965e:	0018      	movs	r0, r3
 8009660:	f7fa fafa 	bl	8003c58 <HAL_GPIO_ReadPin>
 8009664:	0003      	movs	r3, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	d1e2      	bne.n	8009630 <main+0x374>
			HAL_TIM_Base_Stop_IT(&htim1);
 800966a:	4b18      	ldr	r3, [pc, #96]	; (80096cc <main+0x410>)
 800966c:	0018      	movs	r0, r3
 800966e:	f7fc fc6f 	bl	8005f50 <HAL_TIM_Base_Stop_IT>
			LEDclear(&display);
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <main+0x428>)
 8009674:	0018      	movs	r0, r3
 8009676:	f7fe fc46 	bl	8007f06 <LEDclear>
			flags[FLAG_SLEEP] = 0;
 800967a:	4b28      	ldr	r3, [pc, #160]	; (800971c <main+0x460>)
 800967c:	2200      	movs	r2, #0
 800967e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 0);
 8009680:	23a0      	movs	r3, #160	; 0xa0
 8009682:	05db      	lsls	r3, r3, #23
 8009684:	2200      	movs	r2, #0
 8009686:	2102      	movs	r1, #2
 8009688:	0018      	movs	r0, r3
 800968a:	f7fa fb02 	bl	8003c92 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800968e:	200a      	movs	r0, #10
 8009690:	f7f9 f8f8 	bl	8002884 <HAL_Delay>

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,
 8009694:	2380      	movs	r3, #128	; 0x80
 8009696:	01db      	lsls	r3, r3, #7
 8009698:	2101      	movs	r1, #1
 800969a:	0018      	movs	r0, r3
 800969c:	f7fb f930 	bl	8004900 <HAL_PWR_EnterSTOPMode>
			PWR_STOPENTRY_WFI);

			//											AFTER WAKE UP
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 80096a0:	23a0      	movs	r3, #160	; 0xa0
 80096a2:	05db      	lsls	r3, r3, #23
 80096a4:	2201      	movs	r2, #1
 80096a6:	2102      	movs	r1, #2
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7fa faf2 	bl	8003c92 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80096ae:	200a      	movs	r0, #10
 80096b0:	f7f9 f8e8 	bl	8002884 <HAL_Delay>
			menuResetCurrent(&menu);
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <main+0x434>)
 80096b6:	0018      	movs	r0, r3
 80096b8:	f000 fbc5 	bl	8009e46 <menuResetCurrent>
			flags[FLAG_LOCKED] = 0;
 80096bc:	4b17      	ldr	r3, [pc, #92]	; (800971c <main+0x460>)
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 80096c2:	4b02      	ldr	r3, [pc, #8]	; (80096cc <main+0x410>)
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7fc fbe7 	bl	8005e98 <HAL_TIM_Base_Start_IT>
		rtcGetTime(&chronograph);
 80096ca:	e7b1      	b.n	8009630 <main+0x374>
 80096cc:	200003d4 	.word	0x200003d4
 80096d0:	20000420 	.word	0x20000420
 80096d4:	20000298 	.word	0x20000298
 80096d8:	200002e4 	.word	0x200002e4
 80096dc:	2000003c 	.word	0x2000003c
 80096e0:	50000400 	.word	0x50000400
 80096e4:	20000224 	.word	0x20000224
 80096e8:	50000800 	.word	0x50000800
 80096ec:	0800b850 	.word	0x0800b850
 80096f0:	20000058 	.word	0x20000058
 80096f4:	0800b858 	.word	0x0800b858
 80096f8:	0800b85c 	.word	0x0800b85c
 80096fc:	0800b864 	.word	0x0800b864
 8009700:	0800b86c 	.word	0x0800b86c
 8009704:	0800b874 	.word	0x0800b874
 8009708:	0800b87c 	.word	0x0800b87c
 800970c:	0800b884 	.word	0x0800b884
 8009710:	200001b0 	.word	0x200001b0
 8009714:	20000348 	.word	0x20000348
 8009718:	200001fc 	.word	0x200001fc
 800971c:	20000054 	.word	0x20000054

08009720 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b093      	sub	sp, #76	; 0x4c
 8009724:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8009726:	2410      	movs	r4, #16
 8009728:	193b      	adds	r3, r7, r4
 800972a:	0018      	movs	r0, r3
 800972c:	2338      	movs	r3, #56	; 0x38
 800972e:	001a      	movs	r2, r3
 8009730:	2100      	movs	r1, #0
 8009732:	f002 f842 	bl	800b7ba <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8009736:	003b      	movs	r3, r7
 8009738:	0018      	movs	r0, r3
 800973a:	2310      	movs	r3, #16
 800973c:	001a      	movs	r2, r3
 800973e:	2100      	movs	r1, #0
 8009740:	f002 f83b 	bl	800b7ba <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	0018      	movs	r0, r3
 800974a:	f7fb f911 	bl	8004970 <HAL_PWREx_ControlVoltageScaling>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800974e:	f7fb f8c9 	bl	80048e4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009752:	4b1d      	ldr	r3, [pc, #116]	; (80097c8 <SystemClock_Config+0xa8>)
 8009754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009756:	4b1c      	ldr	r3, [pc, #112]	; (80097c8 <SystemClock_Config+0xa8>)
 8009758:	2118      	movs	r1, #24
 800975a:	438a      	bics	r2, r1
 800975c:	65da      	str	r2, [r3, #92]	; 0x5c

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800975e:	193b      	adds	r3, r7, r4
 8009760:	2206      	movs	r2, #6
 8009762:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009764:	193b      	adds	r3, r7, r4
 8009766:	2201      	movs	r2, #1
 8009768:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800976a:	193b      	adds	r3, r7, r4
 800976c:	2280      	movs	r2, #128	; 0x80
 800976e:	0052      	lsls	r2, r2, #1
 8009770:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8009772:	193b      	adds	r3, r7, r4
 8009774:	2200      	movs	r2, #0
 8009776:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009778:	193b      	adds	r3, r7, r4
 800977a:	2240      	movs	r2, #64	; 0x40
 800977c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800977e:	193b      	adds	r3, r7, r4
 8009780:	2200      	movs	r2, #0
 8009782:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8009784:	193b      	adds	r3, r7, r4
 8009786:	0018      	movs	r0, r3
 8009788:	f7fb f93e 	bl	8004a08 <HAL_RCC_OscConfig>
 800978c:	1e03      	subs	r3, r0, #0
 800978e:	d001      	beq.n	8009794 <SystemClock_Config+0x74>
		Error_Handler();
 8009790:	f000 fb54 	bl	8009e3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8009794:	003b      	movs	r3, r7
 8009796:	2207      	movs	r2, #7
 8009798:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800979a:	003b      	movs	r3, r7
 800979c:	2200      	movs	r2, #0
 800979e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097a0:	003b      	movs	r3, r7
 80097a2:	2200      	movs	r2, #0
 80097a4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80097a6:	003b      	movs	r3, r7
 80097a8:	2200      	movs	r2, #0
 80097aa:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80097ac:	003b      	movs	r3, r7
 80097ae:	2100      	movs	r1, #0
 80097b0:	0018      	movs	r0, r3
 80097b2:	f7fb fc49 	bl	8005048 <HAL_RCC_ClockConfig>
 80097b6:	1e03      	subs	r3, r0, #0
 80097b8:	d001      	beq.n	80097be <SystemClock_Config+0x9e>
		Error_Handler();
 80097ba:	f000 fb3f 	bl	8009e3c <Error_Handler>
	}
}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b013      	add	sp, #76	; 0x4c
 80097c4:	bd90      	pop	{r4, r7, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	40021000 	.word	0x40021000

080097cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	0018      	movs	r0, r3
 80097d6:	230c      	movs	r3, #12
 80097d8:	001a      	movs	r2, r3
 80097da:	2100      	movs	r1, #0
 80097dc:	f001 ffed 	bl	800b7ba <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80097e0:	4b30      	ldr	r3, [pc, #192]	; (80098a4 <MX_ADC1_Init+0xd8>)
 80097e2:	4a31      	ldr	r2, [pc, #196]	; (80098a8 <MX_ADC1_Init+0xdc>)
 80097e4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80097e6:	4b2f      	ldr	r3, [pc, #188]	; (80098a4 <MX_ADC1_Init+0xd8>)
 80097e8:	2280      	movs	r2, #128	; 0x80
 80097ea:	05d2      	lsls	r2, r2, #23
 80097ec:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80097ee:	4b2d      	ldr	r3, [pc, #180]	; (80098a4 <MX_ADC1_Init+0xd8>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80097f4:	4b2b      	ldr	r3, [pc, #172]	; (80098a4 <MX_ADC1_Init+0xd8>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80097fa:	4b2a      	ldr	r3, [pc, #168]	; (80098a4 <MX_ADC1_Init+0xd8>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009800:	4b28      	ldr	r3, [pc, #160]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009802:	2204      	movs	r2, #4
 8009804:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009808:	2200      	movs	r2, #0
 800980a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800980c:	4b25      	ldr	r3, [pc, #148]	; (80098a4 <MX_ADC1_Init+0xd8>)
 800980e:	2200      	movs	r2, #0
 8009810:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8009812:	4b24      	ldr	r3, [pc, #144]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009814:	2200      	movs	r2, #0
 8009816:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8009818:	4b22      	ldr	r3, [pc, #136]	; (80098a4 <MX_ADC1_Init+0xd8>)
 800981a:	2201      	movs	r2, #1
 800981c:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800981e:	4b21      	ldr	r3, [pc, #132]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009820:	2200      	movs	r2, #0
 8009822:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009824:	4b1f      	ldr	r3, [pc, #124]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009826:	2200      	movs	r2, #0
 8009828:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800982a:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <MX_ADC1_Init+0xd8>)
 800982c:	222c      	movs	r2, #44	; 0x2c
 800982e:	2100      	movs	r1, #0
 8009830:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	0152      	lsls	r2, r2, #5
 8009838:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800983a:	4b1a      	ldr	r3, [pc, #104]	; (80098a4 <MX_ADC1_Init+0xd8>)
 800983c:	2206      	movs	r2, #6
 800983e:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8009840:	4b18      	ldr	r3, [pc, #96]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009842:	2206      	movs	r2, #6
 8009844:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = ENABLE;
 8009846:	4b17      	ldr	r3, [pc, #92]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009848:	223c      	movs	r2, #60	; 0x3c
 800984a:	2101      	movs	r1, #1
 800984c:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800984e:	4b15      	ldr	r3, [pc, #84]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009850:	220c      	movs	r2, #12
 8009852:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8009854:	4b13      	ldr	r3, [pc, #76]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009856:	2280      	movs	r2, #128	; 0x80
 8009858:	645a      	str	r2, [r3, #68]	; 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800985a:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <MX_ADC1_Init+0xd8>)
 800985c:	2200      	movs	r2, #0
 800985e:	649a      	str	r2, [r3, #72]	; 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009860:	4b10      	ldr	r3, [pc, #64]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009862:	2200      	movs	r2, #0
 8009864:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <MX_ADC1_Init+0xd8>)
 8009868:	0018      	movs	r0, r3
 800986a:	f7f9 f985 	bl	8002b78 <HAL_ADC_Init>
 800986e:	1e03      	subs	r3, r0, #0
 8009870:	d001      	beq.n	8009876 <MX_ADC1_Init+0xaa>
		Error_Handler();
 8009872:	f000 fae3 	bl	8009e3c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009876:	1d3b      	adds	r3, r7, #4
 8009878:	4a0c      	ldr	r2, [pc, #48]	; (80098ac <MX_ADC1_Init+0xe0>)
 800987a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	2200      	movs	r2, #0
 8009880:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8009882:	1d3b      	adds	r3, r7, #4
 8009884:	2200      	movs	r2, #0
 8009886:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8009888:	1d3a      	adds	r2, r7, #4
 800988a:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <MX_ADC1_Init+0xd8>)
 800988c:	0011      	movs	r1, r2
 800988e:	0018      	movs	r0, r3
 8009890:	f7f9 fc3e 	bl	8003110 <HAL_ADC_ConfigChannel>
 8009894:	1e03      	subs	r3, r0, #0
 8009896:	d001      	beq.n	800989c <MX_ADC1_Init+0xd0>
		Error_Handler();
 8009898:	f000 fad0 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800989c:	46c0      	nop			; (mov r8, r8)
 800989e:	46bd      	mov	sp, r7
 80098a0:	b004      	add	sp, #16
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	200002e4 	.word	0x200002e4
 80098a8:	40012400 	.word	0x40012400
 80098ac:	b0001000 	.word	0xb0001000

080098b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80098b4:	4b1b      	ldr	r3, [pc, #108]	; (8009924 <MX_I2C1_Init+0x74>)
 80098b6:	4a1c      	ldr	r2, [pc, #112]	; (8009928 <MX_I2C1_Init+0x78>)
 80098b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 80098ba:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <MX_I2C1_Init+0x74>)
 80098bc:	4a1b      	ldr	r2, [pc, #108]	; (800992c <MX_I2C1_Init+0x7c>)
 80098be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80098c0:	4b18      	ldr	r3, [pc, #96]	; (8009924 <MX_I2C1_Init+0x74>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80098c6:	4b17      	ldr	r3, [pc, #92]	; (8009924 <MX_I2C1_Init+0x74>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80098cc:	4b15      	ldr	r3, [pc, #84]	; (8009924 <MX_I2C1_Init+0x74>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80098d2:	4b14      	ldr	r3, [pc, #80]	; (8009924 <MX_I2C1_Init+0x74>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <MX_I2C1_Init+0x74>)
 80098da:	2200      	movs	r2, #0
 80098dc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <MX_I2C1_Init+0x74>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80098e4:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <MX_I2C1_Init+0x74>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80098ea:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <MX_I2C1_Init+0x74>)
 80098ec:	0018      	movs	r0, r3
 80098ee:	f7fa fa17 	bl	8003d20 <HAL_I2C_Init>
 80098f2:	1e03      	subs	r3, r0, #0
 80098f4:	d001      	beq.n	80098fa <MX_I2C1_Init+0x4a>
		Error_Handler();
 80098f6:	f000 faa1 	bl	8009e3c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80098fa:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <MX_I2C1_Init+0x74>)
 80098fc:	2100      	movs	r1, #0
 80098fe:	0018      	movs	r0, r3
 8009900:	f7fa ff58 	bl	80047b4 <HAL_I2CEx_ConfigAnalogFilter>
 8009904:	1e03      	subs	r3, r0, #0
 8009906:	d001      	beq.n	800990c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8009908:	f000 fa98 	bl	8009e3c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800990c:	4b05      	ldr	r3, [pc, #20]	; (8009924 <MX_I2C1_Init+0x74>)
 800990e:	2100      	movs	r1, #0
 8009910:	0018      	movs	r0, r3
 8009912:	f7fa ff9b 	bl	800484c <HAL_I2CEx_ConfigDigitalFilter>
 8009916:	1e03      	subs	r3, r0, #0
 8009918:	d001      	beq.n	800991e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800991a:	f000 fa8f 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	200001b0 	.word	0x200001b0
 8009928:	40005400 	.word	0x40005400
 800992c:	00303d5b 	.word	0x00303d5b

08009930 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8009936:	1d3b      	adds	r3, r7, #4
 8009938:	0018      	movs	r0, r3
 800993a:	2314      	movs	r3, #20
 800993c:	001a      	movs	r2, r3
 800993e:	2100      	movs	r1, #0
 8009940:	f001 ff3b 	bl	800b7ba <memset>
	RTC_DateTypeDef sDate = { 0 };
 8009944:	003b      	movs	r3, r7
 8009946:	2200      	movs	r2, #0
 8009948:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800994a:	4b2d      	ldr	r3, [pc, #180]	; (8009a00 <MX_RTC_Init+0xd0>)
 800994c:	4a2d      	ldr	r2, [pc, #180]	; (8009a04 <MX_RTC_Init+0xd4>)
 800994e:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009950:	4b2b      	ldr	r3, [pc, #172]	; (8009a00 <MX_RTC_Init+0xd0>)
 8009952:	2200      	movs	r2, #0
 8009954:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <MX_RTC_Init+0xd0>)
 8009958:	227f      	movs	r2, #127	; 0x7f
 800995a:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 800995c:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <MX_RTC_Init+0xd0>)
 800995e:	22ff      	movs	r2, #255	; 0xff
 8009960:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009962:	4b27      	ldr	r3, [pc, #156]	; (8009a00 <MX_RTC_Init+0xd0>)
 8009964:	2200      	movs	r2, #0
 8009966:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009968:	4b25      	ldr	r3, [pc, #148]	; (8009a00 <MX_RTC_Init+0xd0>)
 800996a:	2200      	movs	r2, #0
 800996c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800996e:	4b24      	ldr	r3, [pc, #144]	; (8009a00 <MX_RTC_Init+0xd0>)
 8009970:	2200      	movs	r2, #0
 8009972:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009974:	4b22      	ldr	r3, [pc, #136]	; (8009a00 <MX_RTC_Init+0xd0>)
 8009976:	2280      	movs	r2, #128	; 0x80
 8009978:	05d2      	lsls	r2, r2, #23
 800997a:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800997c:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <MX_RTC_Init+0xd0>)
 800997e:	2200      	movs	r2, #0
 8009980:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8009982:	4b1f      	ldr	r3, [pc, #124]	; (8009a00 <MX_RTC_Init+0xd0>)
 8009984:	0018      	movs	r0, r3
 8009986:	f7fb fec1 	bl	800570c <HAL_RTC_Init>
 800998a:	1e03      	subs	r3, r0, #0
 800998c:	d001      	beq.n	8009992 <MX_RTC_Init+0x62>
		Error_Handler();
 800998e:	f000 fa55 	bl	8009e3c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 21;
 8009992:	1d3b      	adds	r3, r7, #4
 8009994:	2215      	movs	r2, #21
 8009996:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 40;
 8009998:	1d3b      	adds	r3, r7, #4
 800999a:	2228      	movs	r2, #40	; 0x28
 800999c:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 800999e:	1d3b      	adds	r3, r7, #4
 80099a0:	2200      	movs	r2, #0
 80099a2:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0;
 80099a4:	1d3b      	adds	r3, r7, #4
 80099a6:	2200      	movs	r2, #0
 80099a8:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80099aa:	1d3b      	adds	r3, r7, #4
 80099ac:	2200      	movs	r2, #0
 80099ae:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80099b0:	1d3b      	adds	r3, r7, #4
 80099b2:	2200      	movs	r2, #0
 80099b4:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80099b6:	1d39      	adds	r1, r7, #4
 80099b8:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <MX_RTC_Init+0xd0>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	0018      	movs	r0, r3
 80099be:	f7fb ff3b 	bl	8005838 <HAL_RTC_SetTime>
 80099c2:	1e03      	subs	r3, r0, #0
 80099c4:	d001      	beq.n	80099ca <MX_RTC_Init+0x9a>
		Error_Handler();
 80099c6:	f000 fa39 	bl	8009e3c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80099ca:	003b      	movs	r3, r7
 80099cc:	2201      	movs	r2, #1
 80099ce:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_APRIL;
 80099d0:	003b      	movs	r3, r7
 80099d2:	2204      	movs	r2, #4
 80099d4:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 80099d6:	003b      	movs	r3, r7
 80099d8:	2214      	movs	r2, #20
 80099da:	709a      	strb	r2, [r3, #2]
	sDate.Year = 20;
 80099dc:	003b      	movs	r3, r7
 80099de:	2214      	movs	r2, #20
 80099e0:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80099e2:	0039      	movs	r1, r7
 80099e4:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <MX_RTC_Init+0xd0>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	0018      	movs	r0, r3
 80099ea:	f7fc f829 	bl	8005a40 <HAL_RTC_SetDate>
 80099ee:	1e03      	subs	r3, r0, #0
 80099f0:	d001      	beq.n	80099f6 <MX_RTC_Init+0xc6>
		Error_Handler();
 80099f2:	f000 fa23 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	46bd      	mov	sp, r7
 80099fa:	b006      	add	sp, #24
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	46c0      	nop			; (mov r8, r8)
 8009a00:	200003a8 	.word	0x200003a8
 8009a04:	40002800 	.word	0x40002800

08009a08 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8009a0e:	2310      	movs	r3, #16
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	0018      	movs	r0, r3
 8009a14:	2310      	movs	r3, #16
 8009a16:	001a      	movs	r2, r3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	f001 fece 	bl	800b7ba <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8009a1e:	1d3b      	adds	r3, r7, #4
 8009a20:	0018      	movs	r0, r3
 8009a22:	230c      	movs	r3, #12
 8009a24:	001a      	movs	r2, r3
 8009a26:	2100      	movs	r1, #0
 8009a28:	f001 fec7 	bl	800b7ba <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8009a2c:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a2e:	4a22      	ldr	r2, [pc, #136]	; (8009ab8 <MX_TIM1_Init+0xb0>)
 8009a30:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 29;
 8009a32:	4b20      	ldr	r3, [pc, #128]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a34:	221d      	movs	r2, #29
 8009a36:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a38:	4b1e      	ldr	r3, [pc, #120]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1999;
 8009a3e:	4b1d      	ldr	r3, [pc, #116]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a40:	4a1e      	ldr	r2, [pc, #120]	; (8009abc <MX_TIM1_Init+0xb4>)
 8009a42:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a44:	4b1b      	ldr	r3, [pc, #108]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8009a4a:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a50:	4b18      	ldr	r3, [pc, #96]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8009a56:	4b17      	ldr	r3, [pc, #92]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a58:	0018      	movs	r0, r3
 8009a5a:	f7fc f9c4 	bl	8005de6 <HAL_TIM_Base_Init>
 8009a5e:	1e03      	subs	r3, r0, #0
 8009a60:	d001      	beq.n	8009a66 <MX_TIM1_Init+0x5e>
		Error_Handler();
 8009a62:	f000 f9eb 	bl	8009e3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a66:	2110      	movs	r1, #16
 8009a68:	187b      	adds	r3, r7, r1
 8009a6a:	2280      	movs	r2, #128	; 0x80
 8009a6c:	0152      	lsls	r2, r2, #5
 8009a6e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8009a70:	187a      	adds	r2, r7, r1
 8009a72:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a74:	0011      	movs	r1, r2
 8009a76:	0018      	movs	r0, r3
 8009a78:	f7fc fbca 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8009a7c:	1e03      	subs	r3, r0, #0
 8009a7e:	d001      	beq.n	8009a84 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8009a80:	f000 f9dc 	bl	8009e3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a84:	1d3b      	adds	r3, r7, #4
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009a8a:	1d3b      	adds	r3, r7, #4
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a90:	1d3b      	adds	r3, r7, #4
 8009a92:	2200      	movs	r2, #0
 8009a94:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8009a96:	1d3a      	adds	r2, r7, #4
 8009a98:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <MX_TIM1_Init+0xac>)
 8009a9a:	0011      	movs	r1, r2
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f7fc fdbf 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8009aa2:	1e03      	subs	r3, r0, #0
 8009aa4:	d001      	beq.n	8009aaa <MX_TIM1_Init+0xa2>
			!= HAL_OK) {
		Error_Handler();
 8009aa6:	f000 f9c9 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	46bd      	mov	sp, r7
 8009aae:	b008      	add	sp, #32
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	46c0      	nop			; (mov r8, r8)
 8009ab4:	200003d4 	.word	0x200003d4
 8009ab8:	40012c00 	.word	0x40012c00
 8009abc:	000007cf 	.word	0x000007cf

08009ac0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8009ac6:	2310      	movs	r3, #16
 8009ac8:	18fb      	adds	r3, r7, r3
 8009aca:	0018      	movs	r0, r3
 8009acc:	2310      	movs	r3, #16
 8009ace:	001a      	movs	r2, r3
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	f001 fe72 	bl	800b7ba <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8009ad6:	1d3b      	adds	r3, r7, #4
 8009ad8:	0018      	movs	r0, r3
 8009ada:	230c      	movs	r3, #12
 8009adc:	001a      	movs	r2, r3
 8009ade:	2100      	movs	r1, #0
 8009ae0:	f001 fe6b 	bl	800b7ba <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8009ae4:	4b1e      	ldr	r3, [pc, #120]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009ae6:	2280      	movs	r2, #128	; 0x80
 8009ae8:	05d2      	lsls	r2, r2, #23
 8009aea:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8879;
 8009aec:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009aee:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <MX_TIM2_Init+0xa4>)
 8009af0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009af2:	4b1b      	ldr	r3, [pc, #108]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8999;
 8009af8:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009afa:	4a1b      	ldr	r2, [pc, #108]	; (8009b68 <MX_TIM2_Init+0xa8>)
 8009afc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009afe:	4b18      	ldr	r3, [pc, #96]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b04:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8009b0a:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7fc f96a 	bl	8005de6 <HAL_TIM_Base_Init>
 8009b12:	1e03      	subs	r3, r0, #0
 8009b14:	d001      	beq.n	8009b1a <MX_TIM2_Init+0x5a>
		Error_Handler();
 8009b16:	f000 f991 	bl	8009e3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b1a:	2110      	movs	r1, #16
 8009b1c:	187b      	adds	r3, r7, r1
 8009b1e:	2280      	movs	r2, #128	; 0x80
 8009b20:	0152      	lsls	r2, r2, #5
 8009b22:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8009b24:	187a      	adds	r2, r7, r1
 8009b26:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009b28:	0011      	movs	r1, r2
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	f7fc fb70 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8009b30:	1e03      	subs	r3, r0, #0
 8009b32:	d001      	beq.n	8009b38 <MX_TIM2_Init+0x78>
		Error_Handler();
 8009b34:	f000 f982 	bl	8009e3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b38:	1d3b      	adds	r3, r7, #4
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b3e:	1d3b      	adds	r3, r7, #4
 8009b40:	2200      	movs	r2, #0
 8009b42:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8009b44:	1d3a      	adds	r2, r7, #4
 8009b46:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <MX_TIM2_Init+0xa0>)
 8009b48:	0011      	movs	r1, r2
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f7fc fd68 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8009b50:	1e03      	subs	r3, r0, #0
 8009b52:	d001      	beq.n	8009b58 <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8009b54:	f000 f972 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8009b58:	46c0      	nop			; (mov r8, r8)
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b008      	add	sp, #32
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000420 	.word	0x20000420
 8009b64:	000022af 	.word	0x000022af
 8009b68:	00002327 	.word	0x00002327

08009b6c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8009b72:	2310      	movs	r3, #16
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	0018      	movs	r0, r3
 8009b78:	2310      	movs	r3, #16
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	f001 fe1c 	bl	800b7ba <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8009b82:	1d3b      	adds	r3, r7, #4
 8009b84:	0018      	movs	r0, r3
 8009b86:	230c      	movs	r3, #12
 8009b88:	001a      	movs	r2, r3
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	f001 fe15 	bl	800b7ba <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8009b90:	4b1e      	ldr	r3, [pc, #120]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009b92:	4a1f      	ldr	r2, [pc, #124]	; (8009c10 <MX_TIM3_Init+0xa4>)
 8009b94:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 999;
 8009b96:	4b1d      	ldr	r3, [pc, #116]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009b98:	4a1e      	ldr	r2, [pc, #120]	; (8009c14 <MX_TIM3_Init+0xa8>)
 8009b9a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 8999;
 8009ba2:	4b1a      	ldr	r3, [pc, #104]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009ba4:	4a1c      	ldr	r2, [pc, #112]	; (8009c18 <MX_TIM3_Init+0xac>)
 8009ba6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ba8:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bae:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f7fc f915 	bl	8005de6 <HAL_TIM_Base_Init>
 8009bbc:	1e03      	subs	r3, r0, #0
 8009bbe:	d001      	beq.n	8009bc4 <MX_TIM3_Init+0x58>
		Error_Handler();
 8009bc0:	f000 f93c 	bl	8009e3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bc4:	2110      	movs	r1, #16
 8009bc6:	187b      	adds	r3, r7, r1
 8009bc8:	2280      	movs	r2, #128	; 0x80
 8009bca:	0152      	lsls	r2, r2, #5
 8009bcc:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8009bce:	187a      	adds	r2, r7, r1
 8009bd0:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009bd2:	0011      	movs	r1, r2
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f7fc fb1b 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8009bda:	1e03      	subs	r3, r0, #0
 8009bdc:	d001      	beq.n	8009be2 <MX_TIM3_Init+0x76>
		Error_Handler();
 8009bde:	f000 f92d 	bl	8009e3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009be2:	1d3b      	adds	r3, r7, #4
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009be8:	1d3b      	adds	r3, r7, #4
 8009bea:	2200      	movs	r2, #0
 8009bec:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8009bee:	1d3a      	adds	r2, r7, #4
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <MX_TIM3_Init+0xa0>)
 8009bf2:	0011      	movs	r1, r2
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	f7fc fd13 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8009bfa:	1e03      	subs	r3, r0, #0
 8009bfc:	d001      	beq.n	8009c02 <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8009bfe:	f000 f91d 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b008      	add	sp, #32
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	20000298 	.word	0x20000298
 8009c10:	40000400 	.word	0x40000400
 8009c14:	000003e7 	.word	0x000003e7
 8009c18:	00002327 	.word	0x00002327

08009c1c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8009c20:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c22:	4a24      	ldr	r2, [pc, #144]	; (8009cb4 <MX_USART2_UART_Init+0x98>)
 8009c24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8009c26:	4b22      	ldr	r3, [pc, #136]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c28:	2296      	movs	r2, #150	; 0x96
 8009c2a:	0192      	lsls	r2, r2, #6
 8009c2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8009c34:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8009c3a:	4b1d      	ldr	r3, [pc, #116]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8009c40:	4b1b      	ldr	r3, [pc, #108]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c42:	220c      	movs	r2, #12
 8009c44:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c46:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c4c:	4b18      	ldr	r3, [pc, #96]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009c52:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009c5e:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8009c64:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c66:	0018      	movs	r0, r3
 8009c68:	f7fc fd60 	bl	800672c <HAL_UART_Init>
 8009c6c:	1e03      	subs	r3, r0, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8009c70:	f000 f8e4 	bl	8009e3c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c76:	2100      	movs	r1, #0
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f7fd fa8b 	bl	8007194 <HAL_UARTEx_SetTxFifoThreshold>
 8009c7e:	1e03      	subs	r3, r0, #0
 8009c80:	d001      	beq.n	8009c86 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8009c82:	f000 f8db 	bl	8009e3c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8009c86:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c88:	2100      	movs	r1, #0
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	f7fd fac2 	bl	8007214 <HAL_UARTEx_SetRxFifoThreshold>
 8009c90:	1e03      	subs	r3, r0, #0
 8009c92:	d001      	beq.n	8009c98 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8009c94:	f000 f8d2 	bl	8009e3c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <MX_USART2_UART_Init+0x94>)
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f7fd fa40 	bl	8007120 <HAL_UARTEx_DisableFifoMode>
 8009ca0:	1e03      	subs	r3, r0, #0
 8009ca2:	d001      	beq.n	8009ca8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8009ca4:	f000 f8ca 	bl	8009e3c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8009ca8:	46c0      	nop			; (mov r8, r8)
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	2000046c 	.word	0x2000046c
 8009cb4:	40004400 	.word	0x40004400

08009cb8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b089      	sub	sp, #36	; 0x24
 8009cbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8009cbe:	240c      	movs	r4, #12
 8009cc0:	193b      	adds	r3, r7, r4
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	2314      	movs	r3, #20
 8009cc6:	001a      	movs	r2, r3
 8009cc8:	2100      	movs	r1, #0
 8009cca:	f001 fd76 	bl	800b7ba <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009cce:	4b56      	ldr	r3, [pc, #344]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cd2:	4b55      	ldr	r3, [pc, #340]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009cd4:	2102      	movs	r1, #2
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8009cda:	4b53      	ldr	r3, [pc, #332]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cde:	2202      	movs	r2, #2
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009ce6:	4b50      	ldr	r3, [pc, #320]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cea:	4b4f      	ldr	r3, [pc, #316]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009cec:	2104      	movs	r1, #4
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8009cf2:	4b4d      	ldr	r3, [pc, #308]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	2204      	movs	r2, #4
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	607b      	str	r3, [r7, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009cfe:	4b4a      	ldr	r3, [pc, #296]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d02:	4b49      	ldr	r3, [pc, #292]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009d04:	2101      	movs	r1, #1
 8009d06:	430a      	orrs	r2, r1
 8009d08:	635a      	str	r2, [r3, #52]	; 0x34
 8009d0a:	4b47      	ldr	r3, [pc, #284]	; (8009e28 <MX_GPIO_Init+0x170>)
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0e:	2201      	movs	r2, #1
 8009d10:	4013      	ands	r3, r2
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ENCODER_ACTIVE_Pin | LED1_Pin | LED2_Pin,
 8009d16:	23a0      	movs	r3, #160	; 0xa0
 8009d18:	05db      	lsls	r3, r3, #23
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2132      	movs	r1, #50	; 0x32
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f7f9 ffb7 	bl	8003c92 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8009d24:	4941      	ldr	r1, [pc, #260]	; (8009e2c <MX_GPIO_Init+0x174>)
 8009d26:	23a0      	movs	r3, #160	; 0xa0
 8009d28:	05db      	lsls	r3, r3, #23
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f7f9 ffb0 	bl	8003c92 <HAL_GPIO_WritePin>
			DISP_0_Pin | DISP_A_Pin | DISP_B_Pin | DISP_3_Pin | DISP_D_Pin
					| DISP_DP_Pin | DISP_C_Pin | DISP_G_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DISP_F_Pin | DISP_1_Pin | DISP_2_Pin,
 8009d32:	4b3f      	ldr	r3, [pc, #252]	; (8009e30 <MX_GPIO_Init+0x178>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	2107      	movs	r1, #7
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f7f9 ffaa 	bl	8003c92 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_E_GPIO_Port, DISP_E_Pin, GPIO_PIN_SET);
 8009d3e:	4b3d      	ldr	r3, [pc, #244]	; (8009e34 <MX_GPIO_Init+0x17c>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	2140      	movs	r1, #64	; 0x40
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7f9 ffa4 	bl	8003c92 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ENCODER_ACTIVE_Pin LED1_Pin LED2_Pin DISP_0_Pin
	 DISP_A_Pin DISP_B_Pin DISP_3_Pin DISP_D_Pin
	 DISP_DP_Pin DISP_C_Pin DISP_G_Pin */
	GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin | LED1_Pin | LED2_Pin | DISP_0_Pin
 8009d4a:	193b      	adds	r3, r7, r4
 8009d4c:	4a3a      	ldr	r2, [pc, #232]	; (8009e38 <MX_GPIO_Init+0x180>)
 8009d4e:	601a      	str	r2, [r3, #0]
			| DISP_A_Pin | DISP_B_Pin | DISP_3_Pin | DISP_D_Pin | DISP_DP_Pin
			| DISP_C_Pin | DISP_G_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d50:	193b      	adds	r3, r7, r4
 8009d52:	2201      	movs	r2, #1
 8009d54:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d56:	193b      	adds	r3, r7, r4
 8009d58:	2200      	movs	r2, #0
 8009d5a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d5c:	193b      	adds	r3, r7, r4
 8009d5e:	2200      	movs	r2, #0
 8009d60:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d62:	193a      	adds	r2, r7, r4
 8009d64:	23a0      	movs	r3, #160	; 0xa0
 8009d66:	05db      	lsls	r3, r3, #23
 8009d68:	0011      	movs	r1, r2
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f7f9 fe10 	bl	8003990 <HAL_GPIO_Init>

	/*Configure GPIO pins : DISP_F_Pin DISP_1_Pin DISP_2_Pin */
	GPIO_InitStruct.Pin = DISP_F_Pin | DISP_1_Pin | DISP_2_Pin;
 8009d70:	193b      	adds	r3, r7, r4
 8009d72:	2207      	movs	r2, #7
 8009d74:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d76:	193b      	adds	r3, r7, r4
 8009d78:	2201      	movs	r2, #1
 8009d7a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d7c:	193b      	adds	r3, r7, r4
 8009d7e:	2200      	movs	r2, #0
 8009d80:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d82:	193b      	adds	r3, r7, r4
 8009d84:	2200      	movs	r2, #0
 8009d86:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d88:	193b      	adds	r3, r7, r4
 8009d8a:	4a29      	ldr	r2, [pc, #164]	; (8009e30 <MX_GPIO_Init+0x178>)
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	0010      	movs	r0, r2
 8009d90:	f7f9 fdfe 	bl	8003990 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_E_Pin */
	GPIO_InitStruct.Pin = DISP_E_Pin;
 8009d94:	193b      	adds	r3, r7, r4
 8009d96:	2240      	movs	r2, #64	; 0x40
 8009d98:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d9a:	193b      	adds	r3, r7, r4
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da0:	193b      	adds	r3, r7, r4
 8009da2:	2200      	movs	r2, #0
 8009da4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009da6:	193b      	adds	r3, r7, r4
 8009da8:	2200      	movs	r2, #0
 8009daa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_E_GPIO_Port, &GPIO_InitStruct);
 8009dac:	193b      	adds	r3, r7, r4
 8009dae:	4a21      	ldr	r2, [pc, #132]	; (8009e34 <MX_GPIO_Init+0x17c>)
 8009db0:	0019      	movs	r1, r3
 8009db2:	0010      	movs	r0, r2
 8009db4:	f7f9 fdec 	bl	8003990 <HAL_GPIO_Init>

	/*Configure GPIO pins : MODE_Pin BUTTON2_Pin BUTTON1_Pin */
	GPIO_InitStruct.Pin = MODE_Pin | BUTTON2_Pin | BUTTON1_Pin;
 8009db8:	0021      	movs	r1, r4
 8009dba:	187b      	adds	r3, r7, r1
 8009dbc:	2238      	movs	r2, #56	; 0x38
 8009dbe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	2284      	movs	r2, #132	; 0x84
 8009dc4:	0392      	lsls	r2, r2, #14
 8009dc6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009dc8:	187b      	adds	r3, r7, r1
 8009dca:	2201      	movs	r2, #1
 8009dcc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dce:	000c      	movs	r4, r1
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	4a17      	ldr	r2, [pc, #92]	; (8009e30 <MX_GPIO_Init+0x178>)
 8009dd4:	0019      	movs	r1, r3
 8009dd6:	0010      	movs	r0, r2
 8009dd8:	f7f9 fdda 	bl	8003990 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENC1_Pin ENC2_Pin */
	GPIO_InitStruct.Pin = ENC1_Pin | ENC2_Pin;
 8009ddc:	0021      	movs	r1, r4
 8009dde:	187b      	adds	r3, r7, r1
 8009de0:	22c0      	movs	r2, #192	; 0xc0
 8009de2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009de4:	187b      	adds	r3, r7, r1
 8009de6:	22c4      	movs	r2, #196	; 0xc4
 8009de8:	0392      	lsls	r2, r2, #14
 8009dea:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dec:	187b      	adds	r3, r7, r1
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009df2:	187b      	adds	r3, r7, r1
 8009df4:	4a0e      	ldr	r2, [pc, #56]	; (8009e30 <MX_GPIO_Init+0x178>)
 8009df6:	0019      	movs	r1, r3
 8009df8:	0010      	movs	r0, r2
 8009dfa:	f7f9 fdc9 	bl	8003990 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2100      	movs	r1, #0
 8009e02:	2006      	movs	r0, #6
 8009e04:	f7f9 fd92 	bl	800392c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8009e08:	2006      	movs	r0, #6
 8009e0a:	f7f9 fda4 	bl	8003956 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2100      	movs	r1, #0
 8009e12:	2007      	movs	r0, #7
 8009e14:	f7f9 fd8a 	bl	800392c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009e18:	2007      	movs	r0, #7
 8009e1a:	f7f9 fd9c 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8009e1e:	46c0      	nop			; (mov r8, r8)
 8009e20:	46bd      	mov	sp, r7
 8009e22:	b009      	add	sp, #36	; 0x24
 8009e24:	bd90      	pop	{r4, r7, pc}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	40021000 	.word	0x40021000
 8009e2c:	00009fc0 	.word	0x00009fc0
 8009e30:	50000400 	.word	0x50000400
 8009e34:	50000800 	.word	0x50000800
 8009e38:	00009ff2 	.word	0x00009ff2

08009e3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009e40:	b672      	cpsid	i
}
 8009e42:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009e44:	e7fe      	b.n	8009e44 <Error_Handler+0x8>

08009e46 <menuResetCurrent>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuResetCurrent(MenuTypeDef *menu) {
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	23a5      	movs	r3, #165	; 0xa5
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	18d3      	adds	r3, r2, r3
 8009e58:	220b      	movs	r2, #11
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f001 fca4 	bl	800b7a8 <memcpy>
	menu->current.childFirst = menu->items[0][0].childFirst;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7a59      	ldrb	r1, [r3, #9]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	2354      	movs	r3, #84	; 0x54
 8009e68:	33ff      	adds	r3, #255	; 0xff
 8009e6a:	54d1      	strb	r1, [r2, r3]
	menu->current.childLast = menu->items[0][0].childLast;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7a99      	ldrb	r1, [r3, #10]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	23aa      	movs	r3, #170	; 0xaa
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	54d1      	strb	r1, [r2, r3]
	menu->current.entry = menu->items[0][0].entry;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7999      	ldrb	r1, [r3, #6]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	23a8      	movs	r3, #168	; 0xa8
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	54d1      	strb	r1, [r2, r3]
	menu->current.level = menu->items[0][0].level;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	79d9      	ldrb	r1, [r3, #7]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	2352      	movs	r3, #82	; 0x52
 8009e8c:	33ff      	adds	r3, #255	; 0xff
 8009e8e:	54d1      	strb	r1, [r2, r3]
//	menu->current.parent = menu->items[0][0].parent;
//	menu->current.value = menu->items[0][0].value;
//	menu->current.value2 = menu->items[0][0].value2;
//	menu->current.value3 = menu->items[0][0].value3;

}
 8009e90:	46c0      	nop			; (mov r8, r8)
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b002      	add	sp, #8
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2, uint8_t value3) {
 8009e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	0008      	movs	r0, r1
 8009ea2:	0011      	movs	r1, r2
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	230b      	movs	r3, #11
 8009ea8:	18fb      	adds	r3, r7, r3
 8009eaa:	1c02      	adds	r2, r0, #0
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	230a      	movs	r3, #10
 8009eb0:	18fb      	adds	r3, r7, r3
 8009eb2:	1c0a      	adds	r2, r1, #0
 8009eb4:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 8009eb6:	2317      	movs	r3, #23
 8009eb8:	18fb      	adds	r3, r7, r3
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	e01f      	b.n	8009f00 <menuItemChangeValue+0x68>

		menu->items[entry][level].value[i] = value[i];
 8009ec0:	2617      	movs	r6, #23
 8009ec2:	19bb      	adds	r3, r7, r6
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	18d3      	adds	r3, r2, r3
 8009eca:	220b      	movs	r2, #11
 8009ecc:	18ba      	adds	r2, r7, r2
 8009ece:	7811      	ldrb	r1, [r2, #0]
 8009ed0:	220a      	movs	r2, #10
 8009ed2:	18ba      	adds	r2, r7, r2
 8009ed4:	7812      	ldrb	r2, [r2, #0]
 8009ed6:	19b8      	adds	r0, r7, r6
 8009ed8:	7800      	ldrb	r0, [r0, #0]
 8009eda:	781d      	ldrb	r5, [r3, #0]
 8009edc:	68fc      	ldr	r4, [r7, #12]
 8009ede:	0013      	movs	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	189b      	adds	r3, r3, r2
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	189b      	adds	r3, r3, r2
 8009ee8:	000a      	movs	r2, r1
 8009eea:	0152      	lsls	r2, r2, #5
 8009eec:	1852      	adds	r2, r2, r1
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	18e3      	adds	r3, r4, r3
 8009ef2:	1c2a      	adds	r2, r5, #0
 8009ef4:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 8009ef6:	19bb      	adds	r3, r7, r6
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	19bb      	adds	r3, r7, r6
 8009efc:	3201      	adds	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	2317      	movs	r3, #23
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d9da      	bls.n	8009ec0 <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 8009f0a:	240b      	movs	r4, #11
 8009f0c:	193b      	adds	r3, r7, r4
 8009f0e:	7819      	ldrb	r1, [r3, #0]
 8009f10:	250a      	movs	r5, #10
 8009f12:	197b      	adds	r3, r7, r5
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	0013      	movs	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	189b      	adds	r3, r3, r2
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	189b      	adds	r3, r3, r2
 8009f22:	000a      	movs	r2, r1
 8009f24:	0152      	lsls	r2, r2, #5
 8009f26:	1852      	adds	r2, r2, r1
 8009f28:	189b      	adds	r3, r3, r2
 8009f2a:	18c3      	adds	r3, r0, r3
 8009f2c:	1d1a      	adds	r2, r3, #4
 8009f2e:	2328      	movs	r3, #40	; 0x28
 8009f30:	2108      	movs	r1, #8
 8009f32:	468c      	mov	ip, r1
 8009f34:	44bc      	add	ip, r7
 8009f36:	4463      	add	r3, ip
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].value3 = value3;
 8009f3c:	193b      	adds	r3, r7, r4
 8009f3e:	7819      	ldrb	r1, [r3, #0]
 8009f40:	197b      	adds	r3, r7, r5
 8009f42:	781a      	ldrb	r2, [r3, #0]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	0013      	movs	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	189b      	adds	r3, r3, r2
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	189b      	adds	r3, r3, r2
 8009f50:	000a      	movs	r2, r1
 8009f52:	0152      	lsls	r2, r2, #5
 8009f54:	1852      	adds	r2, r2, r1
 8009f56:	189b      	adds	r3, r3, r2
 8009f58:	18c3      	adds	r3, r0, r3
 8009f5a:	3305      	adds	r3, #5
 8009f5c:	222c      	movs	r2, #44	; 0x2c
 8009f5e:	2108      	movs	r1, #8
 8009f60:	468c      	mov	ip, r1
 8009f62:	44bc      	add	ip, r7
 8009f64:	4462      	add	r2, ip
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	701a      	strb	r2, [r3, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	23a8      	movs	r3, #168	; 0xa8
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	5cd3      	ldrb	r3, [r2, r3]
 8009f72:	193a      	adds	r2, r7, r4
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d15a      	bne.n	800a030 <menuItemChangeValue+0x198>
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	2352      	movs	r3, #82	; 0x52
 8009f7e:	33ff      	adds	r3, #255	; 0xff
 8009f80:	5cd3      	ldrb	r3, [r2, r3]
 8009f82:	197a      	adds	r2, r7, r5
 8009f84:	7812      	ldrb	r2, [r2, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d152      	bne.n	800a030 <menuItemChangeValue+0x198>
		memcpy(menu->current.value,
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	334b      	adds	r3, #75	; 0x4b
 8009f8e:	33ff      	adds	r3, #255	; 0xff
 8009f90:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	23a8      	movs	r3, #168	; 0xa8
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	5cd3      	ldrb	r3, [r2, r3]
 8009f9a:	0019      	movs	r1, r3
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	2352      	movs	r3, #82	; 0x52
 8009fa0:	33ff      	adds	r3, #255	; 0xff
 8009fa2:	5cd3      	ldrb	r3, [r2, r3]
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	0013      	movs	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	189b      	adds	r3, r3, r2
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	189b      	adds	r3, r3, r2
 8009fb0:	000a      	movs	r2, r1
 8009fb2:	0152      	lsls	r2, r2, #5
 8009fb4:	1852      	adds	r2, r2, r1
 8009fb6:	189b      	adds	r3, r3, r2
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 8009fbc:	2204      	movs	r2, #4
 8009fbe:	0019      	movs	r1, r3
 8009fc0:	f001 fbf2 	bl	800b7a8 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	23a8      	movs	r3, #168	; 0xa8
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	5cd3      	ldrb	r3, [r2, r3]
 8009fcc:	0018      	movs	r0, r3
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	2352      	movs	r3, #82	; 0x52
 8009fd2:	33ff      	adds	r3, #255	; 0xff
 8009fd4:	5cd3      	ldrb	r3, [r2, r3]
 8009fd6:	001a      	movs	r2, r3
 8009fd8:	68f9      	ldr	r1, [r7, #12]
 8009fda:	0013      	movs	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	189b      	adds	r3, r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	0002      	movs	r2, r0
 8009fe6:	0152      	lsls	r2, r2, #5
 8009fe8:	1812      	adds	r2, r2, r0
 8009fea:	189b      	adds	r3, r3, r2
 8009fec:	18cb      	adds	r3, r1, r3
 8009fee:	3304      	adds	r3, #4
 8009ff0:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	23a7      	movs	r3, #167	; 0xa7
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	23a8      	movs	r3, #168	; 0xa8
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	5cd3      	ldrb	r3, [r2, r3]
 800a002:	0018      	movs	r0, r3
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	2352      	movs	r3, #82	; 0x52
 800a008:	33ff      	adds	r3, #255	; 0xff
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
 800a00c:	001a      	movs	r2, r3
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	0013      	movs	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	189b      	adds	r3, r3, r2
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	189b      	adds	r3, r3, r2
 800a01a:	0002      	movs	r2, r0
 800a01c:	0152      	lsls	r2, r2, #5
 800a01e:	1812      	adds	r2, r2, r0
 800a020:	189b      	adds	r3, r3, r2
 800a022:	18cb      	adds	r3, r1, r3
 800a024:	3305      	adds	r3, #5
 800a026:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	2350      	movs	r3, #80	; 0x50
 800a02c:	33ff      	adds	r3, #255	; 0xff
 800a02e:	54d1      	strb	r1, [r2, r3]
	}

}
 800a030:	46c0      	nop			; (mov r8, r8)
 800a032:	46bd      	mov	sp, r7
 800a034:	b007      	add	sp, #28
 800a036:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a038 <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	000c      	movs	r4, r1
 800a042:	0010      	movs	r0, r2
 800a044:	0019      	movs	r1, r3
 800a046:	1cfb      	adds	r3, r7, #3
 800a048:	1c22      	adds	r2, r4, #0
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	1cbb      	adds	r3, r7, #2
 800a04e:	1c02      	adds	r2, r0, #0
 800a050:	701a      	strb	r2, [r3, #0]
 800a052:	1c7b      	adds	r3, r7, #1
 800a054:	1c0a      	adds	r2, r1, #0
 800a056:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 800a058:	1cfb      	adds	r3, r7, #3
 800a05a:	7819      	ldrb	r1, [r3, #0]
 800a05c:	1cbb      	adds	r3, r7, #2
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	0013      	movs	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	189b      	adds	r3, r3, r2
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	189b      	adds	r3, r3, r2
 800a06c:	000a      	movs	r2, r1
 800a06e:	0152      	lsls	r2, r2, #5
 800a070:	1852      	adds	r2, r2, r1
 800a072:	189b      	adds	r3, r3, r2
 800a074:	18c3      	adds	r3, r0, r3
 800a076:	3306      	adds	r3, #6
 800a078:	1cfa      	adds	r2, r7, #3
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 800a07e:	1cfb      	adds	r3, r7, #3
 800a080:	7819      	ldrb	r1, [r3, #0]
 800a082:	1cbb      	adds	r3, r7, #2
 800a084:	781a      	ldrb	r2, [r3, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	0013      	movs	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	189b      	adds	r3, r3, r2
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	189b      	adds	r3, r3, r2
 800a092:	000a      	movs	r2, r1
 800a094:	0152      	lsls	r2, r2, #5
 800a096:	1852      	adds	r2, r2, r1
 800a098:	189b      	adds	r3, r3, r2
 800a09a:	18c3      	adds	r3, r0, r3
 800a09c:	3307      	adds	r3, #7
 800a09e:	1cba      	adds	r2, r7, #2
 800a0a0:	7812      	ldrb	r2, [r2, #0]
 800a0a2:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 800a0a4:	1cfb      	adds	r3, r7, #3
 800a0a6:	7819      	ldrb	r1, [r3, #0]
 800a0a8:	1cbb      	adds	r3, r7, #2
 800a0aa:	781a      	ldrb	r2, [r3, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	0013      	movs	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	189b      	adds	r3, r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	189b      	adds	r3, r3, r2
 800a0b8:	000a      	movs	r2, r1
 800a0ba:	0152      	lsls	r2, r2, #5
 800a0bc:	1852      	adds	r2, r2, r1
 800a0be:	189b      	adds	r3, r3, r2
 800a0c0:	18c3      	adds	r3, r0, r3
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	1c7a      	adds	r2, r7, #1
 800a0c6:	7812      	ldrb	r2, [r2, #0]
 800a0c8:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 800a0ca:	1cfb      	adds	r3, r7, #3
 800a0cc:	7819      	ldrb	r1, [r3, #0]
 800a0ce:	1cbb      	adds	r3, r7, #2
 800a0d0:	781a      	ldrb	r2, [r3, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	0013      	movs	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	189b      	adds	r3, r3, r2
 800a0de:	000a      	movs	r2, r1
 800a0e0:	0152      	lsls	r2, r2, #5
 800a0e2:	1852      	adds	r2, r2, r1
 800a0e4:	189b      	adds	r3, r3, r2
 800a0e6:	18c3      	adds	r3, r0, r3
 800a0e8:	3309      	adds	r3, #9
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	2318      	movs	r3, #24
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 800a0f4:	1cfb      	adds	r3, r7, #3
 800a0f6:	7819      	ldrb	r1, [r3, #0]
 800a0f8:	1cbb      	adds	r3, r7, #2
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	0013      	movs	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	189b      	adds	r3, r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	189b      	adds	r3, r3, r2
 800a108:	000a      	movs	r2, r1
 800a10a:	0152      	lsls	r2, r2, #5
 800a10c:	1852      	adds	r2, r2, r1
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	18c3      	adds	r3, r0, r3
 800a112:	330a      	adds	r3, #10
 800a114:	221c      	movs	r2, #28
 800a116:	18ba      	adds	r2, r7, r2
 800a118:	7812      	ldrb	r2, [r2, #0]
 800a11a:	701a      	strb	r2, [r3, #0]

}
 800a11c:	46c0      	nop			; (mov r8, r8)
 800a11e:	46bd      	mov	sp, r7
 800a120:	b003      	add	sp, #12
 800a122:	bd90      	pop	{r4, r7, pc}

0800a124 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	000a      	movs	r2, r1
 800a12e:	1cfb      	adds	r3, r7, #3
 800a130:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 800a132:	1cfb      	adds	r3, r7, #3
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b02      	cmp	r3, #2
 800a138:	d000      	beq.n	800a13c <menuSwitch+0x18>
 800a13a:	e0e2      	b.n	800a302 <menuSwitch+0x1de>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	2352      	movs	r3, #82	; 0x52
 800a140:	33ff      	adds	r3, #255	; 0xff
 800a142:	5cd3      	ldrb	r3, [r2, r3]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d105      	bne.n	800a154 <menuSwitch+0x30>
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	23a8      	movs	r3, #168	; 0xa8
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	5cd3      	ldrb	r3, [r2, r3]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d124      	bne.n	800a19e <menuSwitch+0x7a>
				|| (menu->current.level != 0
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	2352      	movs	r3, #82	; 0x52
 800a158:	33ff      	adds	r3, #255	; 0xff
 800a15a:	5cd3      	ldrb	r3, [r2, r3]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d100      	bne.n	800a162 <menuSwitch+0x3e>
 800a160:	e0cd      	b.n	800a2fe <menuSwitch+0x1da>
						&& menu->current.entry
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	23a8      	movs	r3, #168	; 0xa8
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	5cd1      	ldrb	r1, [r2, r3]
								> menu->items[menu->current.parent][menu->current.level
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	23a9      	movs	r3, #169	; 0xa9
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	5cd3      	ldrb	r3, [r2, r3]
 800a172:	001c      	movs	r4, r3
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	2352      	movs	r3, #82	; 0x52
 800a178:	33ff      	adds	r3, #255	; 0xff
 800a17a:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childFirst)) {
 800a17c:	1e5a      	subs	r2, r3, #1
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	0013      	movs	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	189b      	adds	r3, r3, r2
 800a186:	005b      	lsls	r3, r3, #1
 800a188:	189b      	adds	r3, r3, r2
 800a18a:	0022      	movs	r2, r4
 800a18c:	0152      	lsls	r2, r2, #5
 800a18e:	1912      	adds	r2, r2, r4
 800a190:	189b      	adds	r3, r3, r2
 800a192:	18c3      	adds	r3, r0, r3
 800a194:	3309      	adds	r3, #9
 800a196:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800a198:	4299      	cmp	r1, r3
 800a19a:	d800      	bhi.n	800a19e <menuSwitch+0x7a>
 800a19c:	e0af      	b.n	800a2fe <menuSwitch+0x1da>

			menu->current.entry--;
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	23a8      	movs	r3, #168	; 0xa8
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	5cd3      	ldrb	r3, [r2, r3]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	b2d9      	uxtb	r1, r3
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	23a8      	movs	r3, #168	; 0xa8
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	54d1      	strb	r1, [r2, r3]
			memcpy(menu->current.value,
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	334b      	adds	r3, #75	; 0x4b
 800a1b6:	33ff      	adds	r3, #255	; 0xff
 800a1b8:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	23a8      	movs	r3, #168	; 0xa8
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	5cd3      	ldrb	r3, [r2, r3]
 800a1c2:	0019      	movs	r1, r3
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	2352      	movs	r3, #82	; 0x52
 800a1c8:	33ff      	adds	r3, #255	; 0xff
 800a1ca:	5cd3      	ldrb	r3, [r2, r3]
 800a1cc:	001a      	movs	r2, r3
 800a1ce:	0013      	movs	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	189b      	adds	r3, r3, r2
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	189b      	adds	r3, r3, r2
 800a1d8:	000a      	movs	r2, r1
 800a1da:	0152      	lsls	r2, r2, #5
 800a1dc:	1852      	adds	r2, r2, r1
 800a1de:	189b      	adds	r3, r3, r2
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	0019      	movs	r1, r3
 800a1e8:	f001 fade 	bl	800b7a8 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	23a8      	movs	r3, #168	; 0xa8
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	5cd3      	ldrb	r3, [r2, r3]
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	2352      	movs	r3, #82	; 0x52
 800a1fa:	33ff      	adds	r3, #255	; 0xff
 800a1fc:	5cd3      	ldrb	r3, [r2, r3]
 800a1fe:	001a      	movs	r2, r3
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	0013      	movs	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	189b      	adds	r3, r3, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	189b      	adds	r3, r3, r2
 800a20c:	0002      	movs	r2, r0
 800a20e:	0152      	lsls	r2, r2, #5
 800a210:	1812      	adds	r2, r2, r0
 800a212:	189b      	adds	r3, r3, r2
 800a214:	18cb      	adds	r3, r1, r3
 800a216:	3304      	adds	r3, #4
 800a218:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	23a7      	movs	r3, #167	; 0xa7
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	23a8      	movs	r3, #168	; 0xa8
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	5cd3      	ldrb	r3, [r2, r3]
 800a22a:	0018      	movs	r0, r3
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	2352      	movs	r3, #82	; 0x52
 800a230:	33ff      	adds	r3, #255	; 0xff
 800a232:	5cd3      	ldrb	r3, [r2, r3]
 800a234:	001a      	movs	r2, r3
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	0013      	movs	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	189b      	adds	r3, r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	189b      	adds	r3, r3, r2
 800a242:	0002      	movs	r2, r0
 800a244:	0152      	lsls	r2, r2, #5
 800a246:	1812      	adds	r2, r2, r0
 800a248:	189b      	adds	r3, r3, r2
 800a24a:	18cb      	adds	r3, r1, r3
 800a24c:	3305      	adds	r3, #5
 800a24e:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	2350      	movs	r3, #80	; 0x50
 800a254:	33ff      	adds	r3, #255	; 0xff
 800a256:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	23a8      	movs	r3, #168	; 0xa8
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	5cd3      	ldrb	r3, [r2, r3]
 800a260:	0018      	movs	r0, r3
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	2352      	movs	r3, #82	; 0x52
 800a266:	33ff      	adds	r3, #255	; 0xff
 800a268:	5cd3      	ldrb	r3, [r2, r3]
 800a26a:	001a      	movs	r2, r3
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	0013      	movs	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	189b      	adds	r3, r3, r2
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	189b      	adds	r3, r3, r2
 800a278:	0002      	movs	r2, r0
 800a27a:	0152      	lsls	r2, r2, #5
 800a27c:	1812      	adds	r2, r2, r0
 800a27e:	189b      	adds	r3, r3, r2
 800a280:	18cb      	adds	r3, r1, r3
 800a282:	3308      	adds	r3, #8
 800a284:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	23a9      	movs	r3, #169	; 0xa9
 800a28a:	005b      	lsls	r3, r3, #1
 800a28c:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	23a8      	movs	r3, #168	; 0xa8
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	5cd3      	ldrb	r3, [r2, r3]
 800a296:	0018      	movs	r0, r3
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	2352      	movs	r3, #82	; 0x52
 800a29c:	33ff      	adds	r3, #255	; 0xff
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	001a      	movs	r2, r3
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	0013      	movs	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	189b      	adds	r3, r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	189b      	adds	r3, r3, r2
 800a2ae:	0002      	movs	r2, r0
 800a2b0:	0152      	lsls	r2, r2, #5
 800a2b2:	1812      	adds	r2, r2, r0
 800a2b4:	189b      	adds	r3, r3, r2
 800a2b6:	18cb      	adds	r3, r1, r3
 800a2b8:	3309      	adds	r3, #9
 800a2ba:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	2354      	movs	r3, #84	; 0x54
 800a2c0:	33ff      	adds	r3, #255	; 0xff
 800a2c2:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	23a8      	movs	r3, #168	; 0xa8
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	5cd3      	ldrb	r3, [r2, r3]
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	2352      	movs	r3, #82	; 0x52
 800a2d2:	33ff      	adds	r3, #255	; 0xff
 800a2d4:	5cd3      	ldrb	r3, [r2, r3]
 800a2d6:	001a      	movs	r2, r3
 800a2d8:	6879      	ldr	r1, [r7, #4]
 800a2da:	0013      	movs	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	189b      	adds	r3, r3, r2
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	189b      	adds	r3, r3, r2
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	0152      	lsls	r2, r2, #5
 800a2e8:	1812      	adds	r2, r2, r0
 800a2ea:	189b      	adds	r3, r3, r2
 800a2ec:	18cb      	adds	r3, r1, r3
 800a2ee:	330a      	adds	r3, #10
 800a2f0:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	23aa      	movs	r3, #170	; 0xaa
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e25f      	b.n	800a7be <menuSwitch+0x69a>
		} else {
			return MENU_ERROR;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e25d      	b.n	800a7be <menuSwitch+0x69a>
		}

	} else if (direction == MENU_DOWN) {
 800a302:	1cfb      	adds	r3, r7, #3
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b03      	cmp	r3, #3
 800a308:	d000      	beq.n	800a30c <menuSwitch+0x1e8>
 800a30a:	e0e2      	b.n	800a4d2 <menuSwitch+0x3ae>

		if ((menu->current.level == 0
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	2352      	movs	r3, #82	; 0x52
 800a310:	33ff      	adds	r3, #255	; 0xff
 800a312:	5cd3      	ldrb	r3, [r2, r3]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d105      	bne.n	800a324 <menuSwitch+0x200>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	23a8      	movs	r3, #168	; 0xa8
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	5cd3      	ldrb	r3, [r2, r3]
 800a320:	2b05      	cmp	r3, #5
 800a322:	d924      	bls.n	800a36e <menuSwitch+0x24a>
				|| (menu->current.level != 0
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	2352      	movs	r3, #82	; 0x52
 800a328:	33ff      	adds	r3, #255	; 0xff
 800a32a:	5cd3      	ldrb	r3, [r2, r3]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d100      	bne.n	800a332 <menuSwitch+0x20e>
 800a330:	e0cd      	b.n	800a4ce <menuSwitch+0x3aa>
						&& menu->current.entry
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	23a8      	movs	r3, #168	; 0xa8
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	5cd1      	ldrb	r1, [r2, r3]
								< menu->items[menu->current.parent][menu->current.level
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	23a9      	movs	r3, #169	; 0xa9
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	5cd3      	ldrb	r3, [r2, r3]
 800a342:	001c      	movs	r4, r3
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	2352      	movs	r3, #82	; 0x52
 800a348:	33ff      	adds	r3, #255	; 0xff
 800a34a:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childLast)) {
 800a34c:	1e5a      	subs	r2, r3, #1
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	0013      	movs	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	189b      	adds	r3, r3, r2
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	189b      	adds	r3, r3, r2
 800a35a:	0022      	movs	r2, r4
 800a35c:	0152      	lsls	r2, r2, #5
 800a35e:	1912      	adds	r2, r2, r4
 800a360:	189b      	adds	r3, r3, r2
 800a362:	18c3      	adds	r3, r0, r3
 800a364:	330a      	adds	r3, #10
 800a366:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800a368:	4299      	cmp	r1, r3
 800a36a:	d300      	bcc.n	800a36e <menuSwitch+0x24a>
 800a36c:	e0af      	b.n	800a4ce <menuSwitch+0x3aa>

			menu->current.entry++;
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	23a8      	movs	r3, #168	; 0xa8
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	5cd3      	ldrb	r3, [r2, r3]
 800a376:	3301      	adds	r3, #1
 800a378:	b2d9      	uxtb	r1, r3
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	23a8      	movs	r3, #168	; 0xa8
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	54d1      	strb	r1, [r2, r3]

			memcpy(menu->current.value,
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	334b      	adds	r3, #75	; 0x4b
 800a386:	33ff      	adds	r3, #255	; 0xff
 800a388:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	23a8      	movs	r3, #168	; 0xa8
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	5cd3      	ldrb	r3, [r2, r3]
 800a392:	0019      	movs	r1, r3
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	2352      	movs	r3, #82	; 0x52
 800a398:	33ff      	adds	r3, #255	; 0xff
 800a39a:	5cd3      	ldrb	r3, [r2, r3]
 800a39c:	001a      	movs	r2, r3
 800a39e:	0013      	movs	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	189b      	adds	r3, r3, r2
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	189b      	adds	r3, r3, r2
 800a3a8:	000a      	movs	r2, r1
 800a3aa:	0152      	lsls	r2, r2, #5
 800a3ac:	1852      	adds	r2, r2, r1
 800a3ae:	189b      	adds	r3, r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	f001 f9f6 	bl	800b7a8 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	23a8      	movs	r3, #168	; 0xa8
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	5cd3      	ldrb	r3, [r2, r3]
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	2352      	movs	r3, #82	; 0x52
 800a3ca:	33ff      	adds	r3, #255	; 0xff
 800a3cc:	5cd3      	ldrb	r3, [r2, r3]
 800a3ce:	001a      	movs	r2, r3
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	0013      	movs	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	189b      	adds	r3, r3, r2
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	189b      	adds	r3, r3, r2
 800a3dc:	0002      	movs	r2, r0
 800a3de:	0152      	lsls	r2, r2, #5
 800a3e0:	1812      	adds	r2, r2, r0
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	18cb      	adds	r3, r1, r3
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	23a7      	movs	r3, #167	; 0xa7
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	23a8      	movs	r3, #168	; 0xa8
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	5cd3      	ldrb	r3, [r2, r3]
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	2352      	movs	r3, #82	; 0x52
 800a400:	33ff      	adds	r3, #255	; 0xff
 800a402:	5cd3      	ldrb	r3, [r2, r3]
 800a404:	001a      	movs	r2, r3
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	0013      	movs	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	189b      	adds	r3, r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	189b      	adds	r3, r3, r2
 800a412:	0002      	movs	r2, r0
 800a414:	0152      	lsls	r2, r2, #5
 800a416:	1812      	adds	r2, r2, r0
 800a418:	189b      	adds	r3, r3, r2
 800a41a:	18cb      	adds	r3, r1, r3
 800a41c:	3305      	adds	r3, #5
 800a41e:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	2350      	movs	r3, #80	; 0x50
 800a424:	33ff      	adds	r3, #255	; 0xff
 800a426:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	23a8      	movs	r3, #168	; 0xa8
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	5cd3      	ldrb	r3, [r2, r3]
 800a430:	0018      	movs	r0, r3
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	2352      	movs	r3, #82	; 0x52
 800a436:	33ff      	adds	r3, #255	; 0xff
 800a438:	5cd3      	ldrb	r3, [r2, r3]
 800a43a:	001a      	movs	r2, r3
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	0013      	movs	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	189b      	adds	r3, r3, r2
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	189b      	adds	r3, r3, r2
 800a448:	0002      	movs	r2, r0
 800a44a:	0152      	lsls	r2, r2, #5
 800a44c:	1812      	adds	r2, r2, r0
 800a44e:	189b      	adds	r3, r3, r2
 800a450:	18cb      	adds	r3, r1, r3
 800a452:	3308      	adds	r3, #8
 800a454:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	23a9      	movs	r3, #169	; 0xa9
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	23a8      	movs	r3, #168	; 0xa8
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	5cd3      	ldrb	r3, [r2, r3]
 800a466:	0018      	movs	r0, r3
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	2352      	movs	r3, #82	; 0x52
 800a46c:	33ff      	adds	r3, #255	; 0xff
 800a46e:	5cd3      	ldrb	r3, [r2, r3]
 800a470:	001a      	movs	r2, r3
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	0013      	movs	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	189b      	adds	r3, r3, r2
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	189b      	adds	r3, r3, r2
 800a47e:	0002      	movs	r2, r0
 800a480:	0152      	lsls	r2, r2, #5
 800a482:	1812      	adds	r2, r2, r0
 800a484:	189b      	adds	r3, r3, r2
 800a486:	18cb      	adds	r3, r1, r3
 800a488:	3309      	adds	r3, #9
 800a48a:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	2354      	movs	r3, #84	; 0x54
 800a490:	33ff      	adds	r3, #255	; 0xff
 800a492:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	23a8      	movs	r3, #168	; 0xa8
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	5cd3      	ldrb	r3, [r2, r3]
 800a49c:	0018      	movs	r0, r3
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	2352      	movs	r3, #82	; 0x52
 800a4a2:	33ff      	adds	r3, #255	; 0xff
 800a4a4:	5cd3      	ldrb	r3, [r2, r3]
 800a4a6:	001a      	movs	r2, r3
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	0013      	movs	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	189b      	adds	r3, r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	189b      	adds	r3, r3, r2
 800a4b4:	0002      	movs	r2, r0
 800a4b6:	0152      	lsls	r2, r2, #5
 800a4b8:	1812      	adds	r2, r2, r0
 800a4ba:	189b      	adds	r3, r3, r2
 800a4bc:	18cb      	adds	r3, r1, r3
 800a4be:	330a      	adds	r3, #10
 800a4c0:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	23aa      	movs	r3, #170	; 0xaa
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e177      	b.n	800a7be <menuSwitch+0x69a>

		} else {
			return MENU_ERROR;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e175      	b.n	800a7be <menuSwitch+0x69a>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 800a4d2:	1cfb      	adds	r3, r7, #3
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d000      	beq.n	800a4dc <menuSwitch+0x3b8>
 800a4da:	e0ab      	b.n	800a634 <menuSwitch+0x510>
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	2354      	movs	r3, #84	; 0x54
 800a4e0:	33ff      	adds	r3, #255	; 0xff
 800a4e2:	5cd3      	ldrb	r3, [r2, r3]
 800a4e4:	2bff      	cmp	r3, #255	; 0xff
 800a4e6:	d100      	bne.n	800a4ea <menuSwitch+0x3c6>
 800a4e8:	e0a4      	b.n	800a634 <menuSwitch+0x510>

		menu->current.parent = menu->current.entry;
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	23a8      	movs	r3, #168	; 0xa8
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	5cd1      	ldrb	r1, [r2, r3]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	23a9      	movs	r3, #169	; 0xa9
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	54d1      	strb	r1, [r2, r3]
		menu->current.entry = menu->current.childFirst;
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	2354      	movs	r3, #84	; 0x54
 800a4fe:	33ff      	adds	r3, #255	; 0xff
 800a500:	5cd1      	ldrb	r1, [r2, r3]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	23a8      	movs	r3, #168	; 0xa8
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	54d1      	strb	r1, [r2, r3]
		menu->current.level++;
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	2352      	movs	r3, #82	; 0x52
 800a50e:	33ff      	adds	r3, #255	; 0xff
 800a510:	5cd3      	ldrb	r3, [r2, r3]
 800a512:	3301      	adds	r3, #1
 800a514:	b2d9      	uxtb	r1, r3
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	2352      	movs	r3, #82	; 0x52
 800a51a:	33ff      	adds	r3, #255	; 0xff
 800a51c:	54d1      	strb	r1, [r2, r3]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	23a8      	movs	r3, #168	; 0xa8
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	5cd3      	ldrb	r3, [r2, r3]
 800a526:	0018      	movs	r0, r3
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	2352      	movs	r3, #82	; 0x52
 800a52c:	33ff      	adds	r3, #255	; 0xff
 800a52e:	5cd3      	ldrb	r3, [r2, r3]
 800a530:	001a      	movs	r2, r3
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	0013      	movs	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	189b      	adds	r3, r3, r2
 800a53a:	005b      	lsls	r3, r3, #1
 800a53c:	189b      	adds	r3, r3, r2
 800a53e:	0002      	movs	r2, r0
 800a540:	0152      	lsls	r2, r2, #5
 800a542:	1812      	adds	r2, r2, r0
 800a544:	189b      	adds	r3, r3, r2
 800a546:	18cb      	adds	r3, r1, r3
 800a548:	3309      	adds	r3, #9
 800a54a:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	2354      	movs	r3, #84	; 0x54
 800a550:	33ff      	adds	r3, #255	; 0xff
 800a552:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	23a8      	movs	r3, #168	; 0xa8
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	5cd3      	ldrb	r3, [r2, r3]
 800a55c:	0018      	movs	r0, r3
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	2352      	movs	r3, #82	; 0x52
 800a562:	33ff      	adds	r3, #255	; 0xff
 800a564:	5cd3      	ldrb	r3, [r2, r3]
 800a566:	001a      	movs	r2, r3
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	0013      	movs	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	189b      	adds	r3, r3, r2
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	189b      	adds	r3, r3, r2
 800a574:	0002      	movs	r2, r0
 800a576:	0152      	lsls	r2, r2, #5
 800a578:	1812      	adds	r2, r2, r0
 800a57a:	189b      	adds	r3, r3, r2
 800a57c:	18cb      	adds	r3, r1, r3
 800a57e:	330a      	adds	r3, #10
 800a580:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	23aa      	movs	r3, #170	; 0xaa
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	54d1      	strb	r1, [r2, r3]
		memcpy(menu->current.value,
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	334b      	adds	r3, #75	; 0x4b
 800a58e:	33ff      	adds	r3, #255	; 0xff
 800a590:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	23a8      	movs	r3, #168	; 0xa8
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	5cd3      	ldrb	r3, [r2, r3]
 800a59a:	0019      	movs	r1, r3
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	2352      	movs	r3, #82	; 0x52
 800a5a0:	33ff      	adds	r3, #255	; 0xff
 800a5a2:	5cd3      	ldrb	r3, [r2, r3]
 800a5a4:	001a      	movs	r2, r3
 800a5a6:	0013      	movs	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	189b      	adds	r3, r3, r2
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	189b      	adds	r3, r3, r2
 800a5b0:	000a      	movs	r2, r1
 800a5b2:	0152      	lsls	r2, r2, #5
 800a5b4:	1852      	adds	r2, r2, r1
 800a5b6:	189b      	adds	r3, r3, r2
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800a5bc:	2204      	movs	r2, #4
 800a5be:	0019      	movs	r1, r3
 800a5c0:	f001 f8f2 	bl	800b7a8 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	23a8      	movs	r3, #168	; 0xa8
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	5cd3      	ldrb	r3, [r2, r3]
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	2352      	movs	r3, #82	; 0x52
 800a5d2:	33ff      	adds	r3, #255	; 0xff
 800a5d4:	5cd3      	ldrb	r3, [r2, r3]
 800a5d6:	001a      	movs	r2, r3
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	0013      	movs	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	189b      	adds	r3, r3, r2
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	189b      	adds	r3, r3, r2
 800a5e4:	0002      	movs	r2, r0
 800a5e6:	0152      	lsls	r2, r2, #5
 800a5e8:	1812      	adds	r2, r2, r0
 800a5ea:	189b      	adds	r3, r3, r2
 800a5ec:	18cb      	adds	r3, r1, r3
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	23a7      	movs	r3, #167	; 0xa7
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	23a8      	movs	r3, #168	; 0xa8
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	5cd3      	ldrb	r3, [r2, r3]
 800a602:	0018      	movs	r0, r3
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	2352      	movs	r3, #82	; 0x52
 800a608:	33ff      	adds	r3, #255	; 0xff
 800a60a:	5cd3      	ldrb	r3, [r2, r3]
 800a60c:	001a      	movs	r2, r3
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	0013      	movs	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	189b      	adds	r3, r3, r2
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	189b      	adds	r3, r3, r2
 800a61a:	0002      	movs	r2, r0
 800a61c:	0152      	lsls	r2, r2, #5
 800a61e:	1812      	adds	r2, r2, r0
 800a620:	189b      	adds	r3, r3, r2
 800a622:	18cb      	adds	r3, r1, r3
 800a624:	3305      	adds	r3, #5
 800a626:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	2350      	movs	r3, #80	; 0x50
 800a62c:	33ff      	adds	r3, #255	; 0xff
 800a62e:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800a630:	2301      	movs	r3, #1
 800a632:	e0c4      	b.n	800a7be <menuSwitch+0x69a>

	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 800a634:	1cfb      	adds	r3, r7, #3
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d000      	beq.n	800a63e <menuSwitch+0x51a>
 800a63c:	e0be      	b.n	800a7bc <menuSwitch+0x698>
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	23a9      	movs	r3, #169	; 0xa9
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	5cd3      	ldrb	r3, [r2, r3]
 800a646:	2bff      	cmp	r3, #255	; 0xff
 800a648:	d100      	bne.n	800a64c <menuSwitch+0x528>
 800a64a:	e0b7      	b.n	800a7bc <menuSwitch+0x698>

		menu->current.entry = menu->current.parent;
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	23a9      	movs	r3, #169	; 0xa9
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	5cd1      	ldrb	r1, [r2, r3]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	23a8      	movs	r3, #168	; 0xa8
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	54d1      	strb	r1, [r2, r3]
		menu->current.level--;
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	2352      	movs	r3, #82	; 0x52
 800a660:	33ff      	adds	r3, #255	; 0xff
 800a662:	5cd3      	ldrb	r3, [r2, r3]
 800a664:	3b01      	subs	r3, #1
 800a666:	b2d9      	uxtb	r1, r3
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	2352      	movs	r3, #82	; 0x52
 800a66c:	33ff      	adds	r3, #255	; 0xff
 800a66e:	54d1      	strb	r1, [r2, r3]
		menu->current.parent = menu->items[menu->current.parent][menu->current.level].parent;
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	23a9      	movs	r3, #169	; 0xa9
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	5cd3      	ldrb	r3, [r2, r3]
 800a678:	0018      	movs	r0, r3
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	2352      	movs	r3, #82	; 0x52
 800a67e:	33ff      	adds	r3, #255	; 0xff
 800a680:	5cd3      	ldrb	r3, [r2, r3]
 800a682:	001a      	movs	r2, r3
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	0013      	movs	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	189b      	adds	r3, r3, r2
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	0002      	movs	r2, r0
 800a692:	0152      	lsls	r2, r2, #5
 800a694:	1812      	adds	r2, r2, r0
 800a696:	189b      	adds	r3, r3, r2
 800a698:	18cb      	adds	r3, r1, r3
 800a69a:	3308      	adds	r3, #8
 800a69c:	7819      	ldrb	r1, [r3, #0]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	23a9      	movs	r3, #169	; 0xa9
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	54d1      	strb	r1, [r2, r3]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	23a8      	movs	r3, #168	; 0xa8
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	5cd3      	ldrb	r3, [r2, r3]
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	2352      	movs	r3, #82	; 0x52
 800a6b4:	33ff      	adds	r3, #255	; 0xff
 800a6b6:	5cd3      	ldrb	r3, [r2, r3]
 800a6b8:	001a      	movs	r2, r3
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	0013      	movs	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	189b      	adds	r3, r3, r2
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	189b      	adds	r3, r3, r2
 800a6c6:	0002      	movs	r2, r0
 800a6c8:	0152      	lsls	r2, r2, #5
 800a6ca:	1812      	adds	r2, r2, r0
 800a6cc:	189b      	adds	r3, r3, r2
 800a6ce:	18cb      	adds	r3, r1, r3
 800a6d0:	3309      	adds	r3, #9
 800a6d2:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	2354      	movs	r3, #84	; 0x54
 800a6d8:	33ff      	adds	r3, #255	; 0xff
 800a6da:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	23a8      	movs	r3, #168	; 0xa8
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	5cd3      	ldrb	r3, [r2, r3]
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	2352      	movs	r3, #82	; 0x52
 800a6ea:	33ff      	adds	r3, #255	; 0xff
 800a6ec:	5cd3      	ldrb	r3, [r2, r3]
 800a6ee:	001a      	movs	r2, r3
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	0013      	movs	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	189b      	adds	r3, r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	189b      	adds	r3, r3, r2
 800a6fc:	0002      	movs	r2, r0
 800a6fe:	0152      	lsls	r2, r2, #5
 800a700:	1812      	adds	r2, r2, r0
 800a702:	189b      	adds	r3, r3, r2
 800a704:	18cb      	adds	r3, r1, r3
 800a706:	330a      	adds	r3, #10
 800a708:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	23aa      	movs	r3, #170	; 0xaa
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	54d1      	strb	r1, [r2, r3]

		memcpy(menu->current.value,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	334b      	adds	r3, #75	; 0x4b
 800a716:	33ff      	adds	r3, #255	; 0xff
 800a718:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	23a8      	movs	r3, #168	; 0xa8
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	5cd3      	ldrb	r3, [r2, r3]
 800a722:	0019      	movs	r1, r3
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	2352      	movs	r3, #82	; 0x52
 800a728:	33ff      	adds	r3, #255	; 0xff
 800a72a:	5cd3      	ldrb	r3, [r2, r3]
 800a72c:	001a      	movs	r2, r3
 800a72e:	0013      	movs	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	189b      	adds	r3, r3, r2
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	189b      	adds	r3, r3, r2
 800a738:	000a      	movs	r2, r1
 800a73a:	0152      	lsls	r2, r2, #5
 800a73c:	1852      	adds	r2, r2, r1
 800a73e:	189b      	adds	r3, r3, r2
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800a744:	2204      	movs	r2, #4
 800a746:	0019      	movs	r1, r3
 800a748:	f001 f82e 	bl	800b7a8 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	23a8      	movs	r3, #168	; 0xa8
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	5cd3      	ldrb	r3, [r2, r3]
 800a754:	0018      	movs	r0, r3
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	2352      	movs	r3, #82	; 0x52
 800a75a:	33ff      	adds	r3, #255	; 0xff
 800a75c:	5cd3      	ldrb	r3, [r2, r3]
 800a75e:	001a      	movs	r2, r3
 800a760:	6879      	ldr	r1, [r7, #4]
 800a762:	0013      	movs	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	189b      	adds	r3, r3, r2
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	189b      	adds	r3, r3, r2
 800a76c:	0002      	movs	r2, r0
 800a76e:	0152      	lsls	r2, r2, #5
 800a770:	1812      	adds	r2, r2, r0
 800a772:	189b      	adds	r3, r3, r2
 800a774:	18cb      	adds	r3, r1, r3
 800a776:	3304      	adds	r3, #4
 800a778:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	23a7      	movs	r3, #167	; 0xa7
 800a77e:	005b      	lsls	r3, r3, #1
 800a780:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
									menu->items[menu->current.entry][menu->current.level].value3;
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	23a8      	movs	r3, #168	; 0xa8
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	5cd3      	ldrb	r3, [r2, r3]
 800a78a:	0018      	movs	r0, r3
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	2352      	movs	r3, #82	; 0x52
 800a790:	33ff      	adds	r3, #255	; 0xff
 800a792:	5cd3      	ldrb	r3, [r2, r3]
 800a794:	001a      	movs	r2, r3
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	0013      	movs	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	189b      	adds	r3, r3, r2
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	189b      	adds	r3, r3, r2
 800a7a2:	0002      	movs	r2, r0
 800a7a4:	0152      	lsls	r2, r2, #5
 800a7a6:	1812      	adds	r2, r2, r0
 800a7a8:	189b      	adds	r3, r3, r2
 800a7aa:	18cb      	adds	r3, r1, r3
 800a7ac:	3305      	adds	r3, #5
 800a7ae:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	2350      	movs	r3, #80	; 0x50
 800a7b4:	33ff      	adds	r3, #255	; 0xff
 800a7b6:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e000      	b.n	800a7be <menuSwitch+0x69a>
	} else {
		return MENU_ERROR;
 800a7bc:	2300      	movs	r3, #0
	}
}
 800a7be:	0018      	movs	r0, r3
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	b003      	add	sp, #12
 800a7c4:	bd90      	pop	{r4, r7, pc}
	...

0800a7c8 <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800a7c8:	b5b0      	push	{r4, r5, r7, lr}
 800a7ca:	b090      	sub	sp, #64	; 0x40
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800a7d0:	49ee      	ldr	r1, [pc, #952]	; (800ab8c <rtcGetTime+0x3c4>)
 800a7d2:	4bef      	ldr	r3, [pc, #956]	; (800ab90 <rtcGetTime+0x3c8>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	f7fb f8d6 	bl	8005988 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800a7dc:	49ed      	ldr	r1, [pc, #948]	; (800ab94 <rtcGetTime+0x3cc>)
 800a7de:	4bec      	ldr	r3, [pc, #944]	; (800ab90 <rtcGetTime+0x3c8>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f7fb f9be 	bl	8005b64 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800a7e8:	4be8      	ldr	r3, [pc, #928]	; (800ab8c <rtcGetTime+0x3c4>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b25a      	sxtb	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 800a7f2:	4be6      	ldr	r3, [pc, #920]	; (800ab8c <rtcGetTime+0x3c4>)
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	b25a      	sxtb	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800a7fc:	4be3      	ldr	r3, [pc, #908]	; (800ab8c <rtcGetTime+0x3c4>)
 800a7fe:	789b      	ldrb	r3, [r3, #2]
 800a800:	b25a      	sxtb	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800a806:	4be1      	ldr	r3, [pc, #900]	; (800ab8c <rtcGetTime+0x3c4>)
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	0013      	movs	r3, r2
 800a80c:	065b      	lsls	r3, r3, #25
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	189b      	adds	r3, r3, r2
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4adf      	ldr	r2, [pc, #892]	; (800ab98 <rtcGetTime+0x3d0>)
 800a81c:	4694      	mov	ip, r2
 800a81e:	4463      	add	r3, ip
 800a820:	21ff      	movs	r1, #255	; 0xff
 800a822:	0018      	movs	r0, r3
 800a824:	f7f5 fc6e 	bl	8000104 <__udivsi3>
 800a828:	0003      	movs	r3, r0
 800a82a:	b25a      	sxtb	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800a830:	4bd8      	ldr	r3, [pc, #864]	; (800ab94 <rtcGetTime+0x3cc>)
 800a832:	789b      	ldrb	r3, [r3, #2]
 800a834:	b25a      	sxtb	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800a83a:	4bd6      	ldr	r3, [pc, #856]	; (800ab94 <rtcGetTime+0x3cc>)
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	b25a      	sxtb	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800a844:	4bd3      	ldr	r3, [pc, #844]	; (800ab94 <rtcGetTime+0x3cc>)
 800a846:	78db      	ldrb	r3, [r3, #3]
 800a848:	b25a      	sxtb	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	b25b      	sxtb	r3, r3
 800a854:	3309      	adds	r3, #9
 800a856:	210c      	movs	r1, #12
 800a858:	0018      	movs	r0, r3
 800a85a:	f7f5 fcdd 	bl	8000218 <__divsi3>
 800a85e:	0003      	movs	r3, r0
 800a860:	0018      	movs	r0, r3
 800a862:	f7f6 fcdd 	bl	8001220 <__aeabi_i2f>
 800a866:	1c03      	adds	r3, r0, #0
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	001c      	movs	r4, r3
 800a872:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a874:	f7f5 fe28 	bl	80004c8 <__aeabi_f2uiz>
 800a878:	0003      	movs	r3, r0
 800a87a:	18e3      	adds	r3, r4, r3
 800a87c:	4ac7      	ldr	r2, [pc, #796]	; (800ab9c <rtcGetTime+0x3d4>)
 800a87e:	4694      	mov	ip, r2
 800a880:	4463      	add	r3, ip
 800a882:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	b25b      	sxtb	r3, r3
 800a88a:	001a      	movs	r2, r3
 800a88c:	0013      	movs	r3, r2
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	1a9b      	subs	r3, r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	1a9b      	subs	r3, r3, r2
 800a896:	009a      	lsls	r2, r3, #2
 800a898:	189b      	adds	r3, r3, r2
 800a89a:	2109      	movs	r1, #9
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7f5 fcbb 	bl	8000218 <__divsi3>
 800a8a2:	0003      	movs	r3, r0
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f7f6 fcbb 	bl	8001220 <__aeabi_i2f>
 800a8aa:	1c03      	adds	r3, r0, #0
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 800a8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b0:	0013      	movs	r3, r2
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	089b      	lsrs	r3, r3, #2
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	f7f6 fcf7 	bl	80012ac <__aeabi_ui2f>
 800a8be:	1c03      	adds	r3, r0, #0
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	22fa      	movs	r2, #250	; 0xfa
 800a8ca:	00d2      	lsls	r2, r2, #3
 800a8cc:	189a      	adds	r2, r3, r2
 800a8ce:	0013      	movs	r3, r2
 800a8d0:	005b      	lsls	r3, r3, #1
 800a8d2:	189b      	adds	r3, r3, r2
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	1a9b      	subs	r3, r3, r2
 800a8d8:	011b      	lsls	r3, r3, #4
 800a8da:	1a9b      	subs	r3, r3, r2
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f7f7 fc1d 	bl	800211c <__aeabi_i2d>
 800a8e2:	2280      	movs	r2, #128	; 0x80
 800a8e4:	0612      	lsls	r2, r2, #24
 800a8e6:	4bae      	ldr	r3, [pc, #696]	; (800aba0 <rtcGetTime+0x3d8>)
 800a8e8:	f7f6 fd1c 	bl	8001324 <__aeabi_dadd>
 800a8ec:	0002      	movs	r2, r0
 800a8ee:	000b      	movs	r3, r1
 800a8f0:	0014      	movs	r4, r2
 800a8f2:	001d      	movs	r5, r3
 800a8f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a8f6:	f7f5 fde7 	bl	80004c8 <__aeabi_f2uiz>
 800a8fa:	0003      	movs	r3, r0
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	f7f7 fc3d 	bl	800217c <__aeabi_ui2d>
 800a902:	0002      	movs	r2, r0
 800a904:	000b      	movs	r3, r1
 800a906:	0020      	movs	r0, r4
 800a908:	0029      	movs	r1, r5
 800a90a:	f7f6 fd0b 	bl	8001324 <__aeabi_dadd>
 800a90e:	0002      	movs	r2, r0
 800a910:	000b      	movs	r3, r1
 800a912:	0014      	movs	r4, r2
 800a914:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800a916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a918:	f7f5 fdd6 	bl	80004c8 <__aeabi_f2uiz>
 800a91c:	0003      	movs	r3, r0
 800a91e:	0018      	movs	r0, r3
 800a920:	f7f7 fc2c 	bl	800217c <__aeabi_ui2d>
 800a924:	0002      	movs	r2, r0
 800a926:	000b      	movs	r3, r1
 800a928:	0020      	movs	r0, r4
 800a92a:	0029      	movs	r1, r5
 800a92c:	f7f7 f864 	bl	80019f8 <__aeabi_dsub>
 800a930:	0002      	movs	r2, r0
 800a932:	000b      	movs	r3, r1
 800a934:	0014      	movs	r4, r2
 800a936:	001d      	movs	r5, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	789b      	ldrb	r3, [r3, #2]
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	0018      	movs	r0, r3
 800a940:	f7f7 fbec 	bl	800211c <__aeabi_i2d>
 800a944:	0002      	movs	r2, r0
 800a946:	000b      	movs	r3, r1
 800a948:	0020      	movs	r0, r4
 800a94a:	0029      	movs	r1, r5
 800a94c:	f7f6 fcea 	bl	8001324 <__aeabi_dadd>
 800a950:	0002      	movs	r2, r0
 800a952:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800a954:	0010      	movs	r0, r2
 800a956:	0019      	movs	r1, r3
 800a958:	f7f7 fc7e 	bl	8002258 <__aeabi_d2f>
 800a95c:	1c03      	adds	r3, r0, #0
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	3353      	adds	r3, #83	; 0x53
 800a964:	2164      	movs	r1, #100	; 0x64
 800a966:	0018      	movs	r0, r3
 800a968:	f7f5 fbcc 	bl	8000104 <__udivsi3>
 800a96c:	0003      	movs	r3, r0
 800a96e:	0018      	movs	r0, r3
 800a970:	f7f6 fc9c 	bl	80012ac <__aeabi_ui2f>
 800a974:	1c03      	adds	r3, r0, #0
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 800a978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97a:	f7f5 fda5 	bl	80004c8 <__aeabi_f2uiz>
 800a97e:	0003      	movs	r3, r0
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	0013      	movs	r3, r2
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	189b      	adds	r3, r3, r2
 800a98c:	089b      	lsrs	r3, r3, #2
 800a98e:	0018      	movs	r0, r3
 800a990:	f7f6 fc8c 	bl	80012ac <__aeabi_ui2f>
 800a994:	1c03      	adds	r3, r0, #0
 800a996:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800a998:	6a38      	ldr	r0, [r7, #32]
 800a99a:	f7f5 fd95 	bl	80004c8 <__aeabi_f2uiz>
 800a99e:	0003      	movs	r3, r0
 800a9a0:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 800a9a2:	4980      	ldr	r1, [pc, #512]	; (800aba4 <rtcGetTime+0x3dc>)
 800a9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a6:	f7f5 fe91 	bl	80006cc <__aeabi_fadd>
 800a9aa:	1c03      	adds	r3, r0, #0
 800a9ac:	1c1c      	adds	r4, r3, #0
 800a9ae:	69f8      	ldr	r0, [r7, #28]
 800a9b0:	f7f6 fc7c 	bl	80012ac <__aeabi_ui2f>
 800a9b4:	1c03      	adds	r3, r0, #0
 800a9b6:	1c19      	adds	r1, r3, #0
 800a9b8:	1c20      	adds	r0, r4, #0
 800a9ba:	f7f6 fa49 	bl	8000e50 <__aeabi_fsub>
 800a9be:	1c03      	adds	r3, r0, #0
 800a9c0:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 800a9c2:	4b79      	ldr	r3, [pc, #484]	; (800aba8 <rtcGetTime+0x3e0>)
 800a9c4:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800a9c6:	6979      	ldr	r1, [r7, #20]
 800a9c8:	69b8      	ldr	r0, [r7, #24]
 800a9ca:	f7f6 f81b 	bl	8000a04 <__aeabi_fdiv>
 800a9ce:	1c03      	adds	r3, r0, #0
 800a9d0:	1c18      	adds	r0, r3, #0
 800a9d2:	f7f7 fbf9 	bl	80021c8 <__aeabi_f2d>
 800a9d6:	4a75      	ldr	r2, [pc, #468]	; (800abac <rtcGetTime+0x3e4>)
 800a9d8:	4b75      	ldr	r3, [pc, #468]	; (800abb0 <rtcGetTime+0x3e8>)
 800a9da:	f7f7 f80d 	bl	80019f8 <__aeabi_dsub>
 800a9de:	0002      	movs	r2, r0
 800a9e0:	000b      	movs	r3, r1
 800a9e2:	0010      	movs	r0, r2
 800a9e4:	0019      	movs	r1, r3
 800a9e6:	f7f7 fc37 	bl	8002258 <__aeabi_d2f>
 800a9ea:	1c03      	adds	r3, r0, #0
 800a9ec:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800a9ee:	6938      	ldr	r0, [r7, #16]
 800a9f0:	f7f5 fd6a 	bl	80004c8 <__aeabi_f2uiz>
 800a9f4:	0003      	movs	r3, r0
 800a9f6:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7f6 fc57 	bl	80012ac <__aeabi_ui2f>
 800a9fe:	1c03      	adds	r3, r0, #0
 800aa00:	1c19      	adds	r1, r3, #0
 800aa02:	6938      	ldr	r0, [r7, #16]
 800aa04:	f7f6 fa24 	bl	8000e50 <__aeabi_fsub>
 800aa08:	1c03      	adds	r3, r0, #0
 800aa0a:	496a      	ldr	r1, [pc, #424]	; (800abb4 <rtcGetTime+0x3ec>)
 800aa0c:	1c18      	adds	r0, r3, #0
 800aa0e:	f7f6 f905 	bl	8000c1c <__aeabi_fmul>
 800aa12:	1c03      	adds	r3, r0, #0
 800aa14:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800aa16:	68b8      	ldr	r0, [r7, #8]
 800aa18:	f7f5 fd56 	bl	80004c8 <__aeabi_f2uiz>
 800aa1c:	0002      	movs	r2, r0
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2224      	movs	r2, #36	; 0x24
 800aa26:	5c9b      	ldrb	r3, [r3, r2]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d114      	bne.n	800aa56 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2224      	movs	r2, #36	; 0x24
 800aa5a:	5c9b      	ldrb	r3, [r3, r2]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d000      	beq.n	800aa62 <rtcGetTime+0x29a>
 800aa60:	e0f8      	b.n	800ac54 <rtcGetTime+0x48c>

#if RTC_FREEZED_DECIMALS
		chrono->chrono.hundredth = 0;
#else
		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	799b      	ldrb	r3, [r3, #6]
 800aa66:	b25b      	sxtb	r3, r3
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	7c9b      	ldrb	r3, [r3, #18]
 800aa6e:	b25b      	sxtb	r3, r3
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	b25a      	sxtb	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	779a      	strb	r2, [r3, #30]
#endif

		chrono->chrono.second = chrono->actual.second
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	795b      	ldrb	r3, [r3, #5]
 800aa80:	b25b      	sxtb	r3, r3
 800aa82:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7c5b      	ldrb	r3, [r3, #17]
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	b25b      	sxtb	r3, r3
 800aa9c:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	7c1b      	ldrb	r3, [r3, #16]
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	78db      	ldrb	r3, [r3, #3]
 800aab4:	b25b      	sxtb	r3, r3
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7bdb      	ldrb	r3, [r3, #15]
 800aabc:	b25b      	sxtb	r3, r3
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	b25a      	sxtb	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	789b      	ldrb	r3, [r3, #2]
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	7b9b      	ldrb	r3, [r3, #14]
 800aad6:	b25b      	sxtb	r3, r3
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	b25a      	sxtb	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	b25b      	sxtb	r3, r3
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7b5b      	ldrb	r3, [r3, #13]
 800aaf0:	b25b      	sxtb	r3, r3
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	b25a      	sxtb	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	7f9b      	ldrb	r3, [r3, #30]
 800ab02:	b25b      	sxtb	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da11      	bge.n	800ab2c <rtcGetTime+0x364>
			chrono->chrono.second--;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7f5b      	ldrb	r3, [r3, #29]
 800ab0c:	b25b      	sxtb	r3, r3
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	3b01      	subs	r3, #1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	b25a      	sxtb	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7f9b      	ldrb	r3, [r3, #30]
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	3364      	adds	r3, #100	; 0x64
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	b25a      	sxtb	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7f5b      	ldrb	r3, [r3, #29]
 800ab30:	b25b      	sxtb	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da11      	bge.n	800ab5a <rtcGetTime+0x392>
			chrono->chrono.minute--;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	7f1b      	ldrb	r3, [r3, #28]
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	b25a      	sxtb	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7f5b      	ldrb	r3, [r3, #29]
 800ab4c:	b25b      	sxtb	r3, r3
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	333c      	adds	r3, #60	; 0x3c
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	b25a      	sxtb	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	7f1b      	ldrb	r3, [r3, #28]
 800ab5e:	b25b      	sxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	da29      	bge.n	800abb8 <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7edb      	ldrb	r3, [r3, #27]
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	b25a      	sxtb	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7f1b      	ldrb	r3, [r3, #28]
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	333c      	adds	r3, #60	; 0x3c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	b25a      	sxtb	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	771a      	strb	r2, [r3, #28]
 800ab88:	e016      	b.n	800abb8 <rtcGetTime+0x3f0>
 800ab8a:	46c0      	nop			; (mov r8, r8)
 800ab8c:	20000040 	.word	0x20000040
 800ab90:	200003a8 	.word	0x200003a8
 800ab94:	20000030 	.word	0x20000030
 800ab98:	0000639c 	.word	0x0000639c
 800ab9c:	00001a3c 	.word	0x00001a3c
 800aba0:	413a62ff 	.word	0x413a62ff
 800aba4:	42180000 	.word	0x42180000
 800aba8:	41ec3ea6 	.word	0x41ec3ea6
 800abac:	67381d7e 	.word	0x67381d7e
 800abb0:	3fd36944 	.word	0x3fd36944
 800abb4:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7edb      	ldrb	r3, [r3, #27]
 800abbc:	b25b      	sxtb	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	da11      	bge.n	800abe6 <rtcGetTime+0x41e>
			chrono->chrono.day--;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	7e9b      	ldrb	r3, [r3, #26]
 800abc6:	b25b      	sxtb	r3, r3
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	3b01      	subs	r3, #1
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	b25a      	sxtb	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	7edb      	ldrb	r3, [r3, #27]
 800abd8:	b25b      	sxtb	r3, r3
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	3318      	adds	r3, #24
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	b25a      	sxtb	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7e9b      	ldrb	r3, [r3, #26]
 800abea:	b25b      	sxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	da11      	bge.n	800ac14 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7e5b      	ldrb	r3, [r3, #25]
 800abf4:	b25b      	sxtb	r3, r3
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	b25a      	sxtb	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	7e9b      	ldrb	r3, [r3, #26]
 800ac06:	b25b      	sxtb	r3, r3
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	331e      	adds	r3, #30
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	b25a      	sxtb	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	7e5b      	ldrb	r3, [r3, #25]
 800ac18:	b25b      	sxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	da11      	bge.n	800ac42 <rtcGetTime+0x47a>
			chrono->chrono.year--;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	7e1b      	ldrb	r3, [r3, #24]
 800ac22:	b25b      	sxtb	r3, r3
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	3b01      	subs	r3, #1
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	b25a      	sxtb	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7e5b      	ldrb	r3, [r3, #25]
 800ac34:	b25b      	sxtb	r3, r3
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	330c      	adds	r3, #12
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	b25a      	sxtb	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	765a      	strb	r2, [r3, #25]
		}

		//max chrono count
		if (chrono->chrono.hour >= 5) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7edb      	ldrb	r3, [r3, #27]
 800ac46:	b25b      	sxtb	r3, r3
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	dd03      	ble.n	800ac54 <rtcGetTime+0x48c>
			chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2224      	movs	r2, #36	; 0x24
 800ac50:	2102      	movs	r1, #2
 800ac52:	5499      	strb	r1, [r3, r2]
		}
	}

}
 800ac54:	46c0      	nop			; (mov r8, r8)
 800ac56:	46bd      	mov	sp, r7
 800ac58:	b010      	add	sp, #64	; 0x40
 800ac5a:	bdb0      	pop	{r4, r5, r7, pc}

0800ac5c <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	78db      	ldrb	r3, [r3, #3]
 800ac68:	b25b      	sxtb	r3, r3
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	4b17      	ldr	r3, [pc, #92]	; (800accc <rtcSetTime+0x70>)
 800ac6e:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	791b      	ldrb	r3, [r3, #4]
 800ac74:	b25b      	sxtb	r3, r3
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	4b14      	ldr	r3, [pc, #80]	; (800accc <rtcSetTime+0x70>)
 800ac7a:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	795b      	ldrb	r3, [r3, #5]
 800ac80:	b25b      	sxtb	r3, r3
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <rtcSetTime+0x70>)
 800ac86:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	789b      	ldrb	r3, [r3, #2]
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <rtcSetTime+0x74>)
 800ac92:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <rtcSetTime+0x74>)
 800ac9e:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b25b      	sxtb	r3, r3
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <rtcSetTime+0x74>)
 800acaa:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800acac:	4907      	ldr	r1, [pc, #28]	; (800accc <rtcSetTime+0x70>)
 800acae:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <rtcSetTime+0x78>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	0018      	movs	r0, r3
 800acb4:	f7fa fdc0 	bl	8005838 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800acb8:	4905      	ldr	r1, [pc, #20]	; (800acd0 <rtcSetTime+0x74>)
 800acba:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <rtcSetTime+0x78>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	0018      	movs	r0, r3
 800acc0:	f7fa febe 	bl	8005a40 <HAL_RTC_SetDate>

}
 800acc4:	46c0      	nop			; (mov r8, r8)
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000040 	.word	0x20000040
 800acd0:	20000030 	.word	0x20000030
 800acd4:	200003a8 	.word	0x200003a8

0800acd8 <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800ace0:	4923      	ldr	r1, [pc, #140]	; (800ad70 <rtcStartChrono+0x98>)
 800ace2:	4b24      	ldr	r3, [pc, #144]	; (800ad74 <rtcStartChrono+0x9c>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	0018      	movs	r0, r3
 800ace8:	f7fa fe4e 	bl	8005988 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800acec:	4922      	ldr	r1, [pc, #136]	; (800ad78 <rtcStartChrono+0xa0>)
 800acee:	4b21      	ldr	r3, [pc, #132]	; (800ad74 <rtcStartChrono+0x9c>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	0018      	movs	r0, r3
 800acf4:	f7fa ff36 	bl	8005b64 <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800acf8:	4b1d      	ldr	r3, [pc, #116]	; (800ad70 <rtcStartChrono+0x98>)
 800acfa:	789b      	ldrb	r3, [r3, #2]
 800acfc:	b25a      	sxtb	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 800ad02:	4b1b      	ldr	r3, [pc, #108]	; (800ad70 <rtcStartChrono+0x98>)
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	b25a      	sxtb	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800ad0c:	4b18      	ldr	r3, [pc, #96]	; (800ad70 <rtcStartChrono+0x98>)
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	0013      	movs	r3, r2
 800ad12:	065b      	lsls	r3, r3, #25
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	1a9b      	subs	r3, r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4a16      	ldr	r2, [pc, #88]	; (800ad7c <rtcStartChrono+0xa4>)
 800ad22:	4694      	mov	ip, r2
 800ad24:	4463      	add	r3, ip
 800ad26:	21ff      	movs	r1, #255	; 0xff
 800ad28:	0018      	movs	r0, r3
 800ad2a:	f7f5 f9eb 	bl	8000104 <__udivsi3>
 800ad2e:	0003      	movs	r3, r0
 800ad30:	b25a      	sxtb	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 800ad36:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <rtcStartChrono+0x98>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	b25a      	sxtb	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 800ad40:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <rtcStartChrono+0xa0>)
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	b25a      	sxtb	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 800ad4a:	4b0b      	ldr	r3, [pc, #44]	; (800ad78 <rtcStartChrono+0xa0>)
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	b25a      	sxtb	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 800ad54:	4b08      	ldr	r3, [pc, #32]	; (800ad78 <rtcStartChrono+0xa0>)
 800ad56:	78db      	ldrb	r3, [r3, #3]
 800ad58:	b25a      	sxtb	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2224      	movs	r2, #36	; 0x24
 800ad62:	2101      	movs	r1, #1
 800ad64:	5499      	strb	r1, [r3, r2]
}
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b002      	add	sp, #8
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	20000040 	.word	0x20000040
 800ad74:	200003a8 	.word	0x200003a8
 800ad78:	20000030 	.word	0x20000030
 800ad7c:	0000639c 	.word	0x0000639c

0800ad80 <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800ad88:	4952      	ldr	r1, [pc, #328]	; (800aed4 <rtcStopChrono+0x154>)
 800ad8a:	4b53      	ldr	r3, [pc, #332]	; (800aed8 <rtcStopChrono+0x158>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	0018      	movs	r0, r3
 800ad90:	f7fa fdfa 	bl	8005988 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800ad94:	4951      	ldr	r1, [pc, #324]	; (800aedc <rtcStopChrono+0x15c>)
 800ad96:	4b50      	ldr	r3, [pc, #320]	; (800aed8 <rtcStopChrono+0x158>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	f7fa fee2 	bl	8005b64 <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 800ada0:	4b4c      	ldr	r3, [pc, #304]	; (800aed4 <rtcStopChrono+0x154>)
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	b25a      	sxtb	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800adaa:	4b4a      	ldr	r3, [pc, #296]	; (800aed4 <rtcStopChrono+0x154>)
 800adac:	789b      	ldrb	r3, [r3, #2]
 800adae:	b25a      	sxtb	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800adb4:	4b47      	ldr	r3, [pc, #284]	; (800aed4 <rtcStopChrono+0x154>)
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	0013      	movs	r3, r2
 800adba:	065b      	lsls	r3, r3, #25
 800adbc:	1a9b      	subs	r3, r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	189b      	adds	r3, r3, r2
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	1a9b      	subs	r3, r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4a45      	ldr	r2, [pc, #276]	; (800aee0 <rtcStopChrono+0x160>)
 800adca:	4694      	mov	ip, r2
 800adcc:	4463      	add	r3, ip
 800adce:	21ff      	movs	r1, #255	; 0xff
 800add0:	0018      	movs	r0, r3
 800add2:	f7f5 f997 	bl	8000104 <__udivsi3>
 800add6:	0003      	movs	r3, r0
 800add8:	b25a      	sxtb	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 800adde:	4b3d      	ldr	r3, [pc, #244]	; (800aed4 <rtcStopChrono+0x154>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	b25a      	sxtb	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800ade8:	4b3c      	ldr	r3, [pc, #240]	; (800aedc <rtcStopChrono+0x15c>)
 800adea:	789b      	ldrb	r3, [r3, #2]
 800adec:	b25a      	sxtb	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800adf2:	4b3a      	ldr	r3, [pc, #232]	; (800aedc <rtcStopChrono+0x15c>)
 800adf4:	785b      	ldrb	r3, [r3, #1]
 800adf6:	b25a      	sxtb	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800adfc:	4b37      	ldr	r3, [pc, #220]	; (800aedc <rtcStopChrono+0x15c>)
 800adfe:	78db      	ldrb	r3, [r3, #3]
 800ae00:	b25a      	sxtb	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	799b      	ldrb	r3, [r3, #6]
 800ae0a:	b25b      	sxtb	r3, r3
 800ae0c:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	7c9b      	ldrb	r3, [r3, #18]
 800ae12:	b25b      	sxtb	r3, r3
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	795b      	ldrb	r3, [r3, #5]
 800ae24:	b25b      	sxtb	r3, r3
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7c5b      	ldrb	r3, [r3, #17]
 800ae2c:	b25b      	sxtb	r3, r3
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	b25a      	sxtb	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	791b      	ldrb	r3, [r3, #4]
 800ae3e:	b25b      	sxtb	r3, r3
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7c1b      	ldrb	r3, [r3, #16]
 800ae46:	b25b      	sxtb	r3, r3
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	b25a      	sxtb	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	78db      	ldrb	r3, [r3, #3]
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	7bdb      	ldrb	r3, [r3, #15]
 800ae60:	b25b      	sxtb	r3, r3
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	b25a      	sxtb	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	789b      	ldrb	r3, [r3, #2]
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7b9b      	ldrb	r3, [r3, #14]
 800ae7a:	b25b      	sxtb	r3, r3
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	b25a      	sxtb	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	785b      	ldrb	r3, [r3, #1]
 800ae8c:	b25b      	sxtb	r3, r3
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7b5b      	ldrb	r3, [r3, #13]
 800ae94:	b25b      	sxtb	r3, r3
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	b25a      	sxtb	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7b1b      	ldrb	r3, [r3, #12]
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	b25a      	sxtb	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	0018      	movs	r0, r3
 800aec0:	f7ff fc82 	bl	800a7c8 <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2224      	movs	r2, #36	; 0x24
 800aec8:	2102      	movs	r1, #2
 800aeca:	5499      	strb	r1, [r3, r2]


}
 800aecc:	46c0      	nop			; (mov r8, r8)
 800aece:	46bd      	mov	sp, r7
 800aed0:	b002      	add	sp, #8
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20000040 	.word	0x20000040
 800aed8:	200003a8 	.word	0x200003a8
 800aedc:	20000030 	.word	0x20000030
 800aee0:	0000639c 	.word	0x0000639c

0800aee4 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2224      	movs	r2, #36	; 0x24
 800aef0:	2101      	movs	r1, #1
 800aef2:	5499      	strb	r1, [r3, r2]
}
 800aef4:	46c0      	nop			; (mov r8, r8)
 800aef6:	46bd      	mov	sp, r7
 800aef8:	b002      	add	sp, #8
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2224      	movs	r2, #36	; 0x24
 800af38:	2100      	movs	r1, #0
 800af3a:	5499      	strb	r1, [r3, r2]

}
 800af3c:	46c0      	nop			; (mov r8, r8)
 800af3e:	46bd      	mov	sp, r7
 800af40:	b002      	add	sp, #8
 800af42:	bd80      	pop	{r7, pc}

0800af44 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	0008      	movs	r0, r1
 800af4e:	0011      	movs	r1, r2
 800af50:	1cfb      	adds	r3, r7, #3
 800af52:	1c02      	adds	r2, r0, #0
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	1cbb      	adds	r3, r7, #2
 800af58:	1c0a      	adds	r2, r1, #0
 800af5a:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 800af5c:	1cbb      	adds	r3, r7, #2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d000      	beq.n	800af66 <rtcChangeValue+0x22>
 800af64:	e08a      	b.n	800b07c <rtcChangeValue+0x138>
		switch (element) {
 800af66:	1cfb      	adds	r3, r7, #3
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	d900      	bls.n	800af70 <rtcChangeValue+0x2c>
 800af6e:	e080      	b.n	800b072 <rtcChangeValue+0x12e>
 800af70:	009a      	lsls	r2, r3, #2
 800af72:	4b8c      	ldr	r3, [pc, #560]	; (800b1a4 <rtcChangeValue+0x260>)
 800af74:	18d3      	adds	r3, r2, r3
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	78db      	ldrb	r3, [r3, #3]
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	dd09      	ble.n	800af98 <rtcChangeValue+0x54>
				chrono->actual.hour--;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	78db      	ldrb	r3, [r3, #3]
 800af88:	b25b      	sxtb	r3, r3
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	3b01      	subs	r3, #1
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	b25a      	sxtb	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800af96:	e063      	b.n	800b060 <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	78db      	ldrb	r3, [r3, #3]
 800af9c:	b25b      	sxtb	r3, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d15e      	bne.n	800b060 <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2217      	movs	r2, #23
 800afa6:	70da      	strb	r2, [r3, #3]
			break;
 800afa8:	e05a      	b.n	800b060 <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	791b      	ldrb	r3, [r3, #4]
 800afae:	b25b      	sxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dd09      	ble.n	800afc8 <rtcChangeValue+0x84>
				chrono->actual.minute--;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	791b      	ldrb	r3, [r3, #4]
 800afb8:	b25b      	sxtb	r3, r3
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	3b01      	subs	r3, #1
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	b25a      	sxtb	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800afc6:	e04d      	b.n	800b064 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	791b      	ldrb	r3, [r3, #4]
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d148      	bne.n	800b064 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	223b      	movs	r2, #59	; 0x3b
 800afd6:	711a      	strb	r2, [r3, #4]
			break;
 800afd8:	e044      	b.n	800b064 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	715a      	strb	r2, [r3, #5]
			break;
 800afe0:	e047      	b.n	800b072 <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	789b      	ldrb	r3, [r3, #2]
 800afe6:	b25b      	sxtb	r3, r3
 800afe8:	2b01      	cmp	r3, #1
 800afea:	dd09      	ble.n	800b000 <rtcChangeValue+0xbc>
				chrono->actual.day--;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	789b      	ldrb	r3, [r3, #2]
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	3b01      	subs	r3, #1
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	b25a      	sxtb	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 800affe:	e033      	b.n	800b068 <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	789b      	ldrb	r3, [r3, #2]
 800b004:	b25b      	sxtb	r3, r3
 800b006:	2b01      	cmp	r3, #1
 800b008:	d12e      	bne.n	800b068 <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	221f      	movs	r2, #31
 800b00e:	709a      	strb	r2, [r3, #2]
			break;
 800b010:	e02a      	b.n	800b068 <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	b25b      	sxtb	r3, r3
 800b018:	2b01      	cmp	r3, #1
 800b01a:	dd09      	ble.n	800b030 <rtcChangeValue+0xec>
				chrono->actual.month--;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	785b      	ldrb	r3, [r3, #1]
 800b020:	b25b      	sxtb	r3, r3
 800b022:	b2db      	uxtb	r3, r3
 800b024:	3b01      	subs	r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	b25a      	sxtb	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 800b02e:	e01d      	b.n	800b06c <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	785b      	ldrb	r3, [r3, #1]
 800b034:	b25b      	sxtb	r3, r3
 800b036:	2b01      	cmp	r3, #1
 800b038:	d118      	bne.n	800b06c <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	220c      	movs	r2, #12
 800b03e:	705a      	strb	r2, [r3, #1]
			break;
 800b040:	e014      	b.n	800b06c <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	b25b      	sxtb	r3, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dd11      	ble.n	800b070 <rtcChangeValue+0x12c>
				chrono->actual.year--;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	b25b      	sxtb	r3, r3
 800b052:	b2db      	uxtb	r3, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	b2db      	uxtb	r3, r3
 800b058:	b25a      	sxtb	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	701a      	strb	r2, [r3, #0]
			break;
 800b05e:	e007      	b.n	800b070 <rtcChangeValue+0x12c>
			break;
 800b060:	46c0      	nop			; (mov r8, r8)
 800b062:	e006      	b.n	800b072 <rtcChangeValue+0x12e>
			break;
 800b064:	46c0      	nop			; (mov r8, r8)
 800b066:	e004      	b.n	800b072 <rtcChangeValue+0x12e>
			break;
 800b068:	46c0      	nop			; (mov r8, r8)
 800b06a:	e002      	b.n	800b072 <rtcChangeValue+0x12e>
			break;
 800b06c:	46c0      	nop			; (mov r8, r8)
 800b06e:	e000      	b.n	800b072 <rtcChangeValue+0x12e>
			break;
 800b070:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	0018      	movs	r0, r3
 800b076:	f7ff fdf1 	bl	800ac5c <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 800b07a:	e08e      	b.n	800b19a <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 800b07c:	1cbb      	adds	r3, r7, #2
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d000      	beq.n	800b086 <rtcChangeValue+0x142>
 800b084:	e089      	b.n	800b19a <rtcChangeValue+0x256>
		switch (element) {
 800b086:	1cfb      	adds	r3, r7, #3
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d900      	bls.n	800b090 <rtcChangeValue+0x14c>
 800b08e:	e080      	b.n	800b192 <rtcChangeValue+0x24e>
 800b090:	009a      	lsls	r2, r3, #2
 800b092:	4b45      	ldr	r3, [pc, #276]	; (800b1a8 <rtcChangeValue+0x264>)
 800b094:	18d3      	adds	r3, r2, r3
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	78db      	ldrb	r3, [r3, #3]
 800b09e:	b25b      	sxtb	r3, r3
 800b0a0:	2b16      	cmp	r3, #22
 800b0a2:	dc09      	bgt.n	800b0b8 <rtcChangeValue+0x174>
				chrono->actual.hour++;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	78db      	ldrb	r3, [r3, #3]
 800b0a8:	b25b      	sxtb	r3, r3
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	b25a      	sxtb	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	70da      	strb	r2, [r3, #3]
			break;
 800b0b6:	e063      	b.n	800b180 <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	78db      	ldrb	r3, [r3, #3]
 800b0bc:	b25b      	sxtb	r3, r3
 800b0be:	2b16      	cmp	r3, #22
 800b0c0:	dd5e      	ble.n	800b180 <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	70da      	strb	r2, [r3, #3]
			break;
 800b0c8:	e05a      	b.n	800b180 <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	2b3a      	cmp	r3, #58	; 0x3a
 800b0d2:	dc09      	bgt.n	800b0e8 <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	791b      	ldrb	r3, [r3, #4]
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	3301      	adds	r3, #1
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	b25a      	sxtb	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	711a      	strb	r2, [r3, #4]
			break;
 800b0e6:	e04d      	b.n	800b184 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	791b      	ldrb	r3, [r3, #4]
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	2b3a      	cmp	r3, #58	; 0x3a
 800b0f0:	dd48      	ble.n	800b184 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	711a      	strb	r2, [r3, #4]
			break;
 800b0f8:	e044      	b.n	800b184 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	715a      	strb	r2, [r3, #5]
			break;
 800b100:	e047      	b.n	800b192 <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	789b      	ldrb	r3, [r3, #2]
 800b106:	b25b      	sxtb	r3, r3
 800b108:	2b1e      	cmp	r3, #30
 800b10a:	dc09      	bgt.n	800b120 <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	789b      	ldrb	r3, [r3, #2]
 800b110:	b25b      	sxtb	r3, r3
 800b112:	b2db      	uxtb	r3, r3
 800b114:	3301      	adds	r3, #1
 800b116:	b2db      	uxtb	r3, r3
 800b118:	b25a      	sxtb	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	709a      	strb	r2, [r3, #2]
			break;
 800b11e:	e033      	b.n	800b188 <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	789b      	ldrb	r3, [r3, #2]
 800b124:	b25b      	sxtb	r3, r3
 800b126:	2b1f      	cmp	r3, #31
 800b128:	d12e      	bne.n	800b188 <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	709a      	strb	r2, [r3, #2]
			break;
 800b130:	e02a      	b.n	800b188 <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	785b      	ldrb	r3, [r3, #1]
 800b136:	b25b      	sxtb	r3, r3
 800b138:	2b0b      	cmp	r3, #11
 800b13a:	dc09      	bgt.n	800b150 <rtcChangeValue+0x20c>
				chrono->actual.month++;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	785b      	ldrb	r3, [r3, #1]
 800b140:	b25b      	sxtb	r3, r3
 800b142:	b2db      	uxtb	r3, r3
 800b144:	3301      	adds	r3, #1
 800b146:	b2db      	uxtb	r3, r3
 800b148:	b25a      	sxtb	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	705a      	strb	r2, [r3, #1]
			break;
 800b14e:	e01d      	b.n	800b18c <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	785b      	ldrb	r3, [r3, #1]
 800b154:	b25b      	sxtb	r3, r3
 800b156:	2b0c      	cmp	r3, #12
 800b158:	d118      	bne.n	800b18c <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	705a      	strb	r2, [r3, #1]
			break;
 800b160:	e014      	b.n	800b18c <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b25b      	sxtb	r3, r3
 800b168:	2b62      	cmp	r3, #98	; 0x62
 800b16a:	dc11      	bgt.n	800b190 <rtcChangeValue+0x24c>
				chrono->actual.year++;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b25b      	sxtb	r3, r3
 800b172:	b2db      	uxtb	r3, r3
 800b174:	3301      	adds	r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	b25a      	sxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	701a      	strb	r2, [r3, #0]
			break;
 800b17e:	e007      	b.n	800b190 <rtcChangeValue+0x24c>
			break;
 800b180:	46c0      	nop			; (mov r8, r8)
 800b182:	e006      	b.n	800b192 <rtcChangeValue+0x24e>
			break;
 800b184:	46c0      	nop			; (mov r8, r8)
 800b186:	e004      	b.n	800b192 <rtcChangeValue+0x24e>
			break;
 800b188:	46c0      	nop			; (mov r8, r8)
 800b18a:	e002      	b.n	800b192 <rtcChangeValue+0x24e>
			break;
 800b18c:	46c0      	nop			; (mov r8, r8)
 800b18e:	e000      	b.n	800b192 <rtcChangeValue+0x24e>
			break;
 800b190:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	0018      	movs	r0, r3
 800b196:	f7ff fd61 	bl	800ac5c <rtcSetTime>
}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	46bd      	mov	sp, r7
 800b19e:	b002      	add	sp, #8
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	46c0      	nop			; (mov r8, r8)
 800b1a4:	0800baf4 	.word	0x0800baf4
 800b1a8:	0800bb0c 	.word	0x0800bb0c

0800b1ac <rtcBlink>:
 *
 * @param  RTC item handler
 *
 * @retval Even- 1, Odd- 0
 */
uint8_t rtcBlink(RTCChronoTypeDef *chrono) {
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800b1b4:	4910      	ldr	r1, [pc, #64]	; (800b1f8 <rtcBlink+0x4c>)
 800b1b6:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <rtcBlink+0x50>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	f7fa fbe4 	bl	8005988 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800b1c0:	490f      	ldr	r1, [pc, #60]	; (800b200 <rtcBlink+0x54>)
 800b1c2:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <rtcBlink+0x50>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f7fa fccc 	bl	8005b64 <HAL_RTC_GetDate>

	chrono->actual.second = Time.Seconds;
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <rtcBlink+0x4c>)
 800b1ce:	789b      	ldrb	r3, [r3, #2]
 800b1d0:	b25a      	sxtb	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	715a      	strb	r2, [r3, #5]

	if (chrono->actual.second % 2) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	795b      	ldrb	r3, [r3, #5]
 800b1da:	b25b      	sxtb	r3, r3
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <rtcBlink+0x40>
		return 1;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <rtcBlink+0x42>
	} else {
		return 0;
 800b1ec:	2300      	movs	r3, #0
	}
}
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	b002      	add	sp, #8
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	20000040 	.word	0x20000040
 800b1fc:	200003a8 	.word	0x200003a8
 800b200:	20000030 	.word	0x20000030

0800b204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b20a:	4b11      	ldr	r3, [pc, #68]	; (800b250 <HAL_MspInit+0x4c>)
 800b20c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b20e:	4b10      	ldr	r3, [pc, #64]	; (800b250 <HAL_MspInit+0x4c>)
 800b210:	2101      	movs	r1, #1
 800b212:	430a      	orrs	r2, r1
 800b214:	641a      	str	r2, [r3, #64]	; 0x40
 800b216:	4b0e      	ldr	r3, [pc, #56]	; (800b250 <HAL_MspInit+0x4c>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	2201      	movs	r2, #1
 800b21c:	4013      	ands	r3, r2
 800b21e:	607b      	str	r3, [r7, #4]
 800b220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b222:	4b0b      	ldr	r3, [pc, #44]	; (800b250 <HAL_MspInit+0x4c>)
 800b224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b226:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <HAL_MspInit+0x4c>)
 800b228:	2180      	movs	r1, #128	; 0x80
 800b22a:	0549      	lsls	r1, r1, #21
 800b22c:	430a      	orrs	r2, r1
 800b22e:	63da      	str	r2, [r3, #60]	; 0x3c
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <HAL_MspInit+0x4c>)
 800b232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b234:	2380      	movs	r3, #128	; 0x80
 800b236:	055b      	lsls	r3, r3, #21
 800b238:	4013      	ands	r3, r2
 800b23a:	603b      	str	r3, [r7, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800b23e:	2380      	movs	r3, #128	; 0x80
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	0018      	movs	r0, r3
 800b244:	f7f7 fb42 	bl	80028cc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b248:	46c0      	nop			; (mov r8, r8)
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b002      	add	sp, #8
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	40021000 	.word	0x40021000

0800b254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b254:	b590      	push	{r4, r7, lr}
 800b256:	b097      	sub	sp, #92	; 0x5c
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b25c:	2344      	movs	r3, #68	; 0x44
 800b25e:	18fb      	adds	r3, r7, r3
 800b260:	0018      	movs	r0, r3
 800b262:	2314      	movs	r3, #20
 800b264:	001a      	movs	r2, r3
 800b266:	2100      	movs	r1, #0
 800b268:	f000 faa7 	bl	800b7ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b26c:	2410      	movs	r4, #16
 800b26e:	193b      	adds	r3, r7, r4
 800b270:	0018      	movs	r0, r3
 800b272:	2334      	movs	r3, #52	; 0x34
 800b274:	001a      	movs	r2, r3
 800b276:	2100      	movs	r1, #0
 800b278:	f000 fa9f 	bl	800b7ba <memset>
  if(hadc->Instance==ADC1)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a20      	ldr	r2, [pc, #128]	; (800b304 <HAL_ADC_MspInit+0xb0>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d139      	bne.n	800b2fa <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b286:	193b      	adds	r3, r7, r4
 800b288:	2280      	movs	r2, #128	; 0x80
 800b28a:	01d2      	lsls	r2, r2, #7
 800b28c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800b28e:	193b      	adds	r3, r7, r4
 800b290:	2200      	movs	r2, #0
 800b292:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b294:	193b      	adds	r3, r7, r4
 800b296:	0018      	movs	r0, r3
 800b298:	f7fa f880 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 800b29c:	1e03      	subs	r3, r0, #0
 800b29e:	d001      	beq.n	800b2a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800b2a0:	f7fe fdcc 	bl	8009e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800b2a4:	4b18      	ldr	r3, [pc, #96]	; (800b308 <HAL_ADC_MspInit+0xb4>)
 800b2a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2a8:	4b17      	ldr	r3, [pc, #92]	; (800b308 <HAL_ADC_MspInit+0xb4>)
 800b2aa:	2180      	movs	r1, #128	; 0x80
 800b2ac:	0349      	lsls	r1, r1, #13
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	641a      	str	r2, [r3, #64]	; 0x40
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <HAL_ADC_MspInit+0xb4>)
 800b2b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2b6:	2380      	movs	r3, #128	; 0x80
 800b2b8:	035b      	lsls	r3, r3, #13
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2c0:	4b11      	ldr	r3, [pc, #68]	; (800b308 <HAL_ADC_MspInit+0xb4>)
 800b2c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2c4:	4b10      	ldr	r3, [pc, #64]	; (800b308 <HAL_ADC_MspInit+0xb4>)
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	635a      	str	r2, [r3, #52]	; 0x34
 800b2cc:	4b0e      	ldr	r3, [pc, #56]	; (800b308 <HAL_ADC_MspInit+0xb4>)
 800b2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	60bb      	str	r3, [r7, #8]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_Pin;
 800b2d8:	2144      	movs	r1, #68	; 0x44
 800b2da:	187b      	adds	r3, r7, r1
 800b2dc:	2201      	movs	r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b2e0:	187b      	adds	r3, r7, r1
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e6:	187b      	adds	r3, r7, r1
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 800b2ec:	187a      	adds	r2, r7, r1
 800b2ee:	23a0      	movs	r3, #160	; 0xa0
 800b2f0:	05db      	lsls	r3, r3, #23
 800b2f2:	0011      	movs	r1, r2
 800b2f4:	0018      	movs	r0, r3
 800b2f6:	f7f8 fb4b 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	b017      	add	sp, #92	; 0x5c
 800b300:	bd90      	pop	{r4, r7, pc}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	40012400 	.word	0x40012400
 800b308:	40021000 	.word	0x40021000

0800b30c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b097      	sub	sp, #92	; 0x5c
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b314:	2344      	movs	r3, #68	; 0x44
 800b316:	18fb      	adds	r3, r7, r3
 800b318:	0018      	movs	r0, r3
 800b31a:	2314      	movs	r3, #20
 800b31c:	001a      	movs	r2, r3
 800b31e:	2100      	movs	r1, #0
 800b320:	f000 fa4b 	bl	800b7ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b324:	2410      	movs	r4, #16
 800b326:	193b      	adds	r3, r7, r4
 800b328:	0018      	movs	r0, r3
 800b32a:	2334      	movs	r3, #52	; 0x34
 800b32c:	001a      	movs	r2, r3
 800b32e:	2100      	movs	r1, #0
 800b330:	f000 fa43 	bl	800b7ba <memset>
  if(hi2c->Instance==I2C1)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a22      	ldr	r2, [pc, #136]	; (800b3c4 <HAL_I2C_MspInit+0xb8>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d13e      	bne.n	800b3bc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800b33e:	193b      	adds	r3, r7, r4
 800b340:	2220      	movs	r2, #32
 800b342:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b344:	193b      	adds	r3, r7, r4
 800b346:	2200      	movs	r2, #0
 800b348:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b34a:	193b      	adds	r3, r7, r4
 800b34c:	0018      	movs	r0, r3
 800b34e:	f7fa f825 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 800b352:	1e03      	subs	r3, r0, #0
 800b354:	d001      	beq.n	800b35a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800b356:	f7fe fd71 	bl	8009e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b35a:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <HAL_I2C_MspInit+0xbc>)
 800b35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35e:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <HAL_I2C_MspInit+0xbc>)
 800b360:	2102      	movs	r1, #2
 800b362:	430a      	orrs	r2, r1
 800b364:	635a      	str	r2, [r3, #52]	; 0x34
 800b366:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <HAL_I2C_MspInit+0xbc>)
 800b368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36a:	2202      	movs	r2, #2
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800b372:	2144      	movs	r1, #68	; 0x44
 800b374:	187b      	adds	r3, r7, r1
 800b376:	22c0      	movs	r2, #192	; 0xc0
 800b378:	0092      	lsls	r2, r2, #2
 800b37a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b37c:	187b      	adds	r3, r7, r1
 800b37e:	2212      	movs	r2, #18
 800b380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b382:	187b      	adds	r3, r7, r1
 800b384:	2200      	movs	r2, #0
 800b386:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b388:	187b      	adds	r3, r7, r1
 800b38a:	2200      	movs	r2, #0
 800b38c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800b38e:	187b      	adds	r3, r7, r1
 800b390:	2206      	movs	r2, #6
 800b392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b394:	187b      	adds	r3, r7, r1
 800b396:	4a0d      	ldr	r2, [pc, #52]	; (800b3cc <HAL_I2C_MspInit+0xc0>)
 800b398:	0019      	movs	r1, r3
 800b39a:	0010      	movs	r0, r2
 800b39c:	f7f8 faf8 	bl	8003990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b3a0:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <HAL_I2C_MspInit+0xbc>)
 800b3a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3a4:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <HAL_I2C_MspInit+0xbc>)
 800b3a6:	2180      	movs	r1, #128	; 0x80
 800b3a8:	0389      	lsls	r1, r1, #14
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	63da      	str	r2, [r3, #60]	; 0x3c
 800b3ae:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <HAL_I2C_MspInit+0xbc>)
 800b3b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3b2:	2380      	movs	r3, #128	; 0x80
 800b3b4:	039b      	lsls	r3, r3, #14
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	60bb      	str	r3, [r7, #8]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b3bc:	46c0      	nop			; (mov r8, r8)
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	b017      	add	sp, #92	; 0x5c
 800b3c2:	bd90      	pop	{r4, r7, pc}
 800b3c4:	40005400 	.word	0x40005400
 800b3c8:	40021000 	.word	0x40021000
 800b3cc:	50000400 	.word	0x50000400

0800b3d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b091      	sub	sp, #68	; 0x44
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3d8:	240c      	movs	r4, #12
 800b3da:	193b      	adds	r3, r7, r4
 800b3dc:	0018      	movs	r0, r3
 800b3de:	2334      	movs	r3, #52	; 0x34
 800b3e0:	001a      	movs	r2, r3
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f000 f9e9 	bl	800b7ba <memset>
  if(hrtc->Instance==RTC)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a15      	ldr	r2, [pc, #84]	; (800b444 <HAL_RTC_MspInit+0x74>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d124      	bne.n	800b43c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3f2:	193b      	adds	r3, r7, r4
 800b3f4:	2280      	movs	r2, #128	; 0x80
 800b3f6:	0292      	lsls	r2, r2, #10
 800b3f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b3fa:	193b      	adds	r3, r7, r4
 800b3fc:	2280      	movs	r2, #128	; 0x80
 800b3fe:	0052      	lsls	r2, r2, #1
 800b400:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b402:	193b      	adds	r3, r7, r4
 800b404:	0018      	movs	r0, r3
 800b406:	f7f9 ffc9 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 800b40a:	1e03      	subs	r3, r0, #0
 800b40c:	d001      	beq.n	800b412 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800b40e:	f7fe fd15 	bl	8009e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b412:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <HAL_RTC_MspInit+0x78>)
 800b414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <HAL_RTC_MspInit+0x78>)
 800b418:	2180      	movs	r1, #128	; 0x80
 800b41a:	0209      	lsls	r1, r1, #8
 800b41c:	430a      	orrs	r2, r1
 800b41e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <HAL_RTC_MspInit+0x78>)
 800b422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b424:	4b08      	ldr	r3, [pc, #32]	; (800b448 <HAL_RTC_MspInit+0x78>)
 800b426:	2180      	movs	r1, #128	; 0x80
 800b428:	00c9      	lsls	r1, r1, #3
 800b42a:	430a      	orrs	r2, r1
 800b42c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b42e:	4b06      	ldr	r3, [pc, #24]	; (800b448 <HAL_RTC_MspInit+0x78>)
 800b430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b432:	2380      	movs	r3, #128	; 0x80
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	4013      	ands	r3, r2
 800b438:	60bb      	str	r3, [r7, #8]
 800b43a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b43c:	46c0      	nop			; (mov r8, r8)
 800b43e:	46bd      	mov	sp, r7
 800b440:	b011      	add	sp, #68	; 0x44
 800b442:	bd90      	pop	{r4, r7, pc}
 800b444:	40002800 	.word	0x40002800
 800b448:	40021000 	.word	0x40021000

0800b44c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b093      	sub	sp, #76	; 0x4c
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b454:	2414      	movs	r4, #20
 800b456:	193b      	adds	r3, r7, r4
 800b458:	0018      	movs	r0, r3
 800b45a:	2334      	movs	r3, #52	; 0x34
 800b45c:	001a      	movs	r2, r3
 800b45e:	2100      	movs	r1, #0
 800b460:	f000 f9ab 	bl	800b7ba <memset>
  if(htim_base->Instance==TIM1)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a34      	ldr	r2, [pc, #208]	; (800b53c <HAL_TIM_Base_MspInit+0xf0>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d12d      	bne.n	800b4ca <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800b46e:	193b      	adds	r3, r7, r4
 800b470:	2280      	movs	r2, #128	; 0x80
 800b472:	0392      	lsls	r2, r2, #14
 800b474:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800b476:	193b      	adds	r3, r7, r4
 800b478:	2200      	movs	r2, #0
 800b47a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b47c:	193b      	adds	r3, r7, r4
 800b47e:	0018      	movs	r0, r3
 800b480:	f7f9 ff8c 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 800b484:	1e03      	subs	r3, r0, #0
 800b486:	d001      	beq.n	800b48c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800b488:	f7fe fcd8 	bl	8009e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b48c:	4b2c      	ldr	r3, [pc, #176]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b48e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b490:	4b2b      	ldr	r3, [pc, #172]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	0109      	lsls	r1, r1, #4
 800b496:	430a      	orrs	r2, r1
 800b498:	641a      	str	r2, [r3, #64]	; 0x40
 800b49a:	4b29      	ldr	r3, [pc, #164]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b49c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b49e:	2380      	movs	r3, #128	; 0x80
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	613b      	str	r3, [r7, #16]
 800b4a6:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	200d      	movs	r0, #13
 800b4ae:	f7f8 fa3d 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800b4b2:	200d      	movs	r0, #13
 800b4b4:	f7f8 fa4f 	bl	8003956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	200e      	movs	r0, #14
 800b4be:	f7f8 fa35 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800b4c2:	200e      	movs	r0, #14
 800b4c4:	f7f8 fa47 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800b4c8:	e033      	b.n	800b532 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	2380      	movs	r3, #128	; 0x80
 800b4d0:	05db      	lsls	r3, r3, #23
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d114      	bne.n	800b500 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b4d6:	4b1a      	ldr	r3, [pc, #104]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b4d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4da:	4b19      	ldr	r3, [pc, #100]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b4dc:	2101      	movs	r1, #1
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	63da      	str	r2, [r3, #60]	; 0x3c
 800b4e2:	4b17      	ldr	r3, [pc, #92]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	200f      	movs	r0, #15
 800b4f4:	f7f8 fa1a 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b4f8:	200f      	movs	r0, #15
 800b4fa:	f7f8 fa2c 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 800b4fe:	e018      	b.n	800b532 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a0f      	ldr	r2, [pc, #60]	; (800b544 <HAL_TIM_Base_MspInit+0xf8>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d113      	bne.n	800b532 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b50a:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b50c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b510:	2102      	movs	r1, #2
 800b512:	430a      	orrs	r2, r1
 800b514:	63da      	str	r2, [r3, #60]	; 0x3c
 800b516:	4b0a      	ldr	r3, [pc, #40]	; (800b540 <HAL_TIM_Base_MspInit+0xf4>)
 800b518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51a:	2202      	movs	r2, #2
 800b51c:	4013      	ands	r3, r2
 800b51e:	60bb      	str	r3, [r7, #8]
 800b520:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b522:	2200      	movs	r2, #0
 800b524:	2100      	movs	r1, #0
 800b526:	2010      	movs	r0, #16
 800b528:	f7f8 fa00 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b52c:	2010      	movs	r0, #16
 800b52e:	f7f8 fa12 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	46bd      	mov	sp, r7
 800b536:	b013      	add	sp, #76	; 0x4c
 800b538:	bd90      	pop	{r4, r7, pc}
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	40012c00 	.word	0x40012c00
 800b540:	40021000 	.word	0x40021000
 800b544:	40000400 	.word	0x40000400

0800b548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b097      	sub	sp, #92	; 0x5c
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b550:	2344      	movs	r3, #68	; 0x44
 800b552:	18fb      	adds	r3, r7, r3
 800b554:	0018      	movs	r0, r3
 800b556:	2314      	movs	r3, #20
 800b558:	001a      	movs	r2, r3
 800b55a:	2100      	movs	r1, #0
 800b55c:	f000 f92d 	bl	800b7ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b560:	2410      	movs	r4, #16
 800b562:	193b      	adds	r3, r7, r4
 800b564:	0018      	movs	r0, r3
 800b566:	2334      	movs	r3, #52	; 0x34
 800b568:	001a      	movs	r2, r3
 800b56a:	2100      	movs	r1, #0
 800b56c:	f000 f925 	bl	800b7ba <memset>
  if(huart->Instance==USART2)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a22      	ldr	r2, [pc, #136]	; (800b600 <HAL_UART_MspInit+0xb8>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d13e      	bne.n	800b5f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800b57a:	193b      	adds	r3, r7, r4
 800b57c:	2202      	movs	r2, #2
 800b57e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b580:	193b      	adds	r3, r7, r4
 800b582:	2200      	movs	r2, #0
 800b584:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b586:	193b      	adds	r3, r7, r4
 800b588:	0018      	movs	r0, r3
 800b58a:	f7f9 ff07 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 800b58e:	1e03      	subs	r3, r0, #0
 800b590:	d001      	beq.n	800b596 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b592:	f7fe fc53 	bl	8009e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b596:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <HAL_UART_MspInit+0xbc>)
 800b598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b59a:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <HAL_UART_MspInit+0xbc>)
 800b59c:	2180      	movs	r1, #128	; 0x80
 800b59e:	0289      	lsls	r1, r1, #10
 800b5a0:	430a      	orrs	r2, r1
 800b5a2:	63da      	str	r2, [r3, #60]	; 0x3c
 800b5a4:	4b17      	ldr	r3, [pc, #92]	; (800b604 <HAL_UART_MspInit+0xbc>)
 800b5a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5a8:	2380      	movs	r3, #128	; 0x80
 800b5aa:	029b      	lsls	r3, r3, #10
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5b2:	4b14      	ldr	r3, [pc, #80]	; (800b604 <HAL_UART_MspInit+0xbc>)
 800b5b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5b6:	4b13      	ldr	r3, [pc, #76]	; (800b604 <HAL_UART_MspInit+0xbc>)
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	635a      	str	r2, [r3, #52]	; 0x34
 800b5be:	4b11      	ldr	r3, [pc, #68]	; (800b604 <HAL_UART_MspInit+0xbc>)
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	60bb      	str	r3, [r7, #8]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b5ca:	2144      	movs	r1, #68	; 0x44
 800b5cc:	187b      	adds	r3, r7, r1
 800b5ce:	220c      	movs	r2, #12
 800b5d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5d2:	187b      	adds	r3, r7, r1
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d8:	187b      	adds	r3, r7, r1
 800b5da:	2200      	movs	r2, #0
 800b5dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5de:	187b      	adds	r3, r7, r1
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800b5e4:	187b      	adds	r3, r7, r1
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ea:	187a      	adds	r2, r7, r1
 800b5ec:	23a0      	movs	r3, #160	; 0xa0
 800b5ee:	05db      	lsls	r3, r3, #23
 800b5f0:	0011      	movs	r1, r2
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	f7f8 f9cc 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b5f8:	46c0      	nop			; (mov r8, r8)
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	b017      	add	sp, #92	; 0x5c
 800b5fe:	bd90      	pop	{r4, r7, pc}
 800b600:	40004400 	.word	0x40004400
 800b604:	40021000 	.word	0x40021000

0800b608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b60c:	e7fe      	b.n	800b60c <NMI_Handler+0x4>

0800b60e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b612:	e7fe      	b.n	800b612 <HardFault_Handler+0x4>

0800b614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800b618:	46c0      	nop			; (mov r8, r8)
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b62c:	f7f7 f90e 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b630:	46c0      	nop			; (mov r8, r8)
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 800b63a:	2008      	movs	r0, #8
 800b63c:	f7f8 fb46 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800b640:	46c0      	nop			; (mov r8, r8)
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b64a:	2010      	movs	r0, #16
 800b64c:	f7f8 fb3e 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b650:	2020      	movs	r0, #32
 800b652:	f7f8 fb3b 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 800b656:	2040      	movs	r0, #64	; 0x40
 800b658:	f7f8 fb38 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 800b65c:	2080      	movs	r0, #128	; 0x80
 800b65e:	f7f8 fb35 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800b662:	46c0      	nop			; (mov r8, r8)
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b66c:	4b03      	ldr	r3, [pc, #12]	; (800b67c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800b66e:	0018      	movs	r0, r3
 800b670:	f7fa fc9c 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800b674:	46c0      	nop			; (mov r8, r8)
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	46c0      	nop			; (mov r8, r8)
 800b67c:	200003d4 	.word	0x200003d4

0800b680 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b684:	4b03      	ldr	r3, [pc, #12]	; (800b694 <TIM1_CC_IRQHandler+0x14>)
 800b686:	0018      	movs	r0, r3
 800b688:	f7fa fc90 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800b68c:	46c0      	nop			; (mov r8, r8)
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	46c0      	nop			; (mov r8, r8)
 800b694:	200003d4 	.word	0x200003d4

0800b698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b69c:	4b03      	ldr	r3, [pc, #12]	; (800b6ac <TIM2_IRQHandler+0x14>)
 800b69e:	0018      	movs	r0, r3
 800b6a0:	f7fa fc84 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b6a4:	46c0      	nop			; (mov r8, r8)
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	46c0      	nop			; (mov r8, r8)
 800b6ac:	20000420 	.word	0x20000420

0800b6b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b6b4:	4b03      	ldr	r3, [pc, #12]	; (800b6c4 <TIM3_IRQHandler+0x14>)
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	f7fa fc78 	bl	8005fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b6bc:	46c0      	nop			; (mov r8, r8)
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	20000298 	.word	0x20000298

0800b6c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b6cc:	46c0      	nop			; (mov r8, r8)
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b6d4:	480d      	ldr	r0, [pc, #52]	; (800b70c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b6d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b6d8:	f7ff fff6 	bl	800b6c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b6dc:	480c      	ldr	r0, [pc, #48]	; (800b710 <LoopForever+0x6>)
  ldr r1, =_edata
 800b6de:	490d      	ldr	r1, [pc, #52]	; (800b714 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b6e0:	4a0d      	ldr	r2, [pc, #52]	; (800b718 <LoopForever+0xe>)
  movs r3, #0
 800b6e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b6e4:	e002      	b.n	800b6ec <LoopCopyDataInit>

0800b6e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b6e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b6e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b6ea:	3304      	adds	r3, #4

0800b6ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b6ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b6ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b6f0:	d3f9      	bcc.n	800b6e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b6f2:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <LoopForever+0x12>)
  ldr r4, =_ebss
 800b6f4:	4c0a      	ldr	r4, [pc, #40]	; (800b720 <LoopForever+0x16>)
  movs r3, #0
 800b6f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b6f8:	e001      	b.n	800b6fe <LoopFillZerobss>

0800b6fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b6fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b6fc:	3204      	adds	r2, #4

0800b6fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b6fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b700:	d3fb      	bcc.n	800b6fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b702:	f000 f811 	bl	800b728 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800b706:	f7fd fdd9 	bl	80092bc <main>

0800b70a <LoopForever>:

LoopForever:
  b LoopForever
 800b70a:	e7fe      	b.n	800b70a <LoopForever>
  ldr   r0, =_estack
 800b70c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800b710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800b718:	0800bbbc 	.word	0x0800bbbc
  ldr r2, =_sbss
 800b71c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800b720:	200004fc 	.word	0x200004fc

0800b724 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b724:	e7fe      	b.n	800b724 <ADC1_COMP_IRQHandler>
	...

0800b728 <__libc_init_array>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	2600      	movs	r6, #0
 800b72c:	4d0c      	ldr	r5, [pc, #48]	; (800b760 <__libc_init_array+0x38>)
 800b72e:	4c0d      	ldr	r4, [pc, #52]	; (800b764 <__libc_init_array+0x3c>)
 800b730:	1b64      	subs	r4, r4, r5
 800b732:	10a4      	asrs	r4, r4, #2
 800b734:	42a6      	cmp	r6, r4
 800b736:	d109      	bne.n	800b74c <__libc_init_array+0x24>
 800b738:	2600      	movs	r6, #0
 800b73a:	f000 f87d 	bl	800b838 <_init>
 800b73e:	4d0a      	ldr	r5, [pc, #40]	; (800b768 <__libc_init_array+0x40>)
 800b740:	4c0a      	ldr	r4, [pc, #40]	; (800b76c <__libc_init_array+0x44>)
 800b742:	1b64      	subs	r4, r4, r5
 800b744:	10a4      	asrs	r4, r4, #2
 800b746:	42a6      	cmp	r6, r4
 800b748:	d105      	bne.n	800b756 <__libc_init_array+0x2e>
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	00b3      	lsls	r3, r6, #2
 800b74e:	58eb      	ldr	r3, [r5, r3]
 800b750:	4798      	blx	r3
 800b752:	3601      	adds	r6, #1
 800b754:	e7ee      	b.n	800b734 <__libc_init_array+0xc>
 800b756:	00b3      	lsls	r3, r6, #2
 800b758:	58eb      	ldr	r3, [r5, r3]
 800b75a:	4798      	blx	r3
 800b75c:	3601      	adds	r6, #1
 800b75e:	e7f2      	b.n	800b746 <__libc_init_array+0x1e>
 800b760:	0800bbb4 	.word	0x0800bbb4
 800b764:	0800bbb4 	.word	0x0800bbb4
 800b768:	0800bbb4 	.word	0x0800bbb4
 800b76c:	0800bbb8 	.word	0x0800bbb8

0800b770 <__itoa>:
 800b770:	1e93      	subs	r3, r2, #2
 800b772:	b510      	push	{r4, lr}
 800b774:	000c      	movs	r4, r1
 800b776:	2b22      	cmp	r3, #34	; 0x22
 800b778:	d904      	bls.n	800b784 <__itoa+0x14>
 800b77a:	2300      	movs	r3, #0
 800b77c:	001c      	movs	r4, r3
 800b77e:	700b      	strb	r3, [r1, #0]
 800b780:	0020      	movs	r0, r4
 800b782:	bd10      	pop	{r4, pc}
 800b784:	2a0a      	cmp	r2, #10
 800b786:	d109      	bne.n	800b79c <__itoa+0x2c>
 800b788:	2800      	cmp	r0, #0
 800b78a:	da07      	bge.n	800b79c <__itoa+0x2c>
 800b78c:	232d      	movs	r3, #45	; 0x2d
 800b78e:	700b      	strb	r3, [r1, #0]
 800b790:	2101      	movs	r1, #1
 800b792:	4240      	negs	r0, r0
 800b794:	1861      	adds	r1, r4, r1
 800b796:	f000 f819 	bl	800b7cc <__utoa>
 800b79a:	e7f1      	b.n	800b780 <__itoa+0x10>
 800b79c:	2100      	movs	r1, #0
 800b79e:	e7f9      	b.n	800b794 <__itoa+0x24>

0800b7a0 <itoa>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	f7ff ffe5 	bl	800b770 <__itoa>
 800b7a6:	bd10      	pop	{r4, pc}

0800b7a8 <memcpy>:
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	b510      	push	{r4, lr}
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d100      	bne.n	800b7b2 <memcpy+0xa>
 800b7b0:	bd10      	pop	{r4, pc}
 800b7b2:	5ccc      	ldrb	r4, [r1, r3]
 800b7b4:	54c4      	strb	r4, [r0, r3]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	e7f8      	b.n	800b7ac <memcpy+0x4>

0800b7ba <memset>:
 800b7ba:	0003      	movs	r3, r0
 800b7bc:	1882      	adds	r2, r0, r2
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d100      	bne.n	800b7c4 <memset+0xa>
 800b7c2:	4770      	bx	lr
 800b7c4:	7019      	strb	r1, [r3, #0]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	e7f9      	b.n	800b7be <memset+0x4>
	...

0800b7cc <__utoa>:
 800b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ce:	0016      	movs	r6, r2
 800b7d0:	b08d      	sub	sp, #52	; 0x34
 800b7d2:	0007      	movs	r7, r0
 800b7d4:	000c      	movs	r4, r1
 800b7d6:	2225      	movs	r2, #37	; 0x25
 800b7d8:	4916      	ldr	r1, [pc, #88]	; (800b834 <__utoa+0x68>)
 800b7da:	a802      	add	r0, sp, #8
 800b7dc:	f7ff ffe4 	bl	800b7a8 <memcpy>
 800b7e0:	1eb3      	subs	r3, r6, #2
 800b7e2:	2500      	movs	r5, #0
 800b7e4:	2b22      	cmp	r3, #34	; 0x22
 800b7e6:	d820      	bhi.n	800b82a <__utoa+0x5e>
 800b7e8:	1e63      	subs	r3, r4, #1
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	ab02      	add	r3, sp, #8
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	0038      	movs	r0, r7
 800b7f2:	0031      	movs	r1, r6
 800b7f4:	f7f4 fd0c 	bl	8000210 <__aeabi_uidivmod>
 800b7f8:	000b      	movs	r3, r1
 800b7fa:	9a01      	ldr	r2, [sp, #4]
 800b7fc:	0029      	movs	r1, r5
 800b7fe:	5cd3      	ldrb	r3, [r2, r3]
 800b800:	9a00      	ldr	r2, [sp, #0]
 800b802:	3501      	adds	r5, #1
 800b804:	5553      	strb	r3, [r2, r5]
 800b806:	003b      	movs	r3, r7
 800b808:	0007      	movs	r7, r0
 800b80a:	429e      	cmp	r6, r3
 800b80c:	d9f0      	bls.n	800b7f0 <__utoa+0x24>
 800b80e:	2300      	movs	r3, #0
 800b810:	0022      	movs	r2, r4
 800b812:	5563      	strb	r3, [r4, r5]
 800b814:	000b      	movs	r3, r1
 800b816:	1ac8      	subs	r0, r1, r3
 800b818:	4283      	cmp	r3, r0
 800b81a:	dd08      	ble.n	800b82e <__utoa+0x62>
 800b81c:	7810      	ldrb	r0, [r2, #0]
 800b81e:	5ce5      	ldrb	r5, [r4, r3]
 800b820:	7015      	strb	r5, [r2, #0]
 800b822:	54e0      	strb	r0, [r4, r3]
 800b824:	3201      	adds	r2, #1
 800b826:	3b01      	subs	r3, #1
 800b828:	e7f5      	b.n	800b816 <__utoa+0x4a>
 800b82a:	7025      	strb	r5, [r4, #0]
 800b82c:	002c      	movs	r4, r5
 800b82e:	0020      	movs	r0, r4
 800b830:	b00d      	add	sp, #52	; 0x34
 800b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b834:	0800bb84 	.word	0x0800bb84

0800b838 <_init>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	46c0      	nop			; (mov r8, r8)
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr

0800b844 <_fini>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	46c0      	nop			; (mov r8, r8)
 800b848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84a:	bc08      	pop	{r3}
 800b84c:	469e      	mov	lr, r3
 800b84e:	4770      	bx	lr
