
watchSeven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8c8  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800f988  0800f988  0001f988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd8c  0800fd8c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd8c  0800fd8c  0001fd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd94  0800fd94  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd94  0800fd94  0001fd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd98  0800fd98  0001fd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800fd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000544  20000100  0800fe9c  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800fe9c  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a524  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c18  00000000  00000000  0004a64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0004f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001818  00000000  00000000  00050c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f92e  00000000  00000000  00052480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022717  00000000  00000000  00071dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba7d6  00000000  00000000  000944c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ec9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  0014ecf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f95c 	.word	0x0800f95c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	0800f95c 	.word	0x0800f95c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fecd 	bl	80021b8 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fe17 	bl	800205c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 febf 	bl	80021b8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 feb5 	bl	80021b8 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fe39 	bl	80020d4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fe2f 	bl	80020d4 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_ldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d115      	bne.n	80004b4 <__aeabi_ldivmod+0x30>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d113      	bne.n	80004b4 <__aeabi_ldivmod+0x30>
 800048c:	2900      	cmp	r1, #0
 800048e:	db06      	blt.n	800049e <__aeabi_ldivmod+0x1a>
 8000490:	dc01      	bgt.n	8000496 <__aeabi_ldivmod+0x12>
 8000492:	2800      	cmp	r0, #0
 8000494:	d006      	beq.n	80004a4 <__aeabi_ldivmod+0x20>
 8000496:	2000      	movs	r0, #0
 8000498:	43c0      	mvns	r0, r0
 800049a:	0841      	lsrs	r1, r0, #1
 800049c:	e002      	b.n	80004a4 <__aeabi_ldivmod+0x20>
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	0609      	lsls	r1, r1, #24
 80004a2:	2000      	movs	r0, #0
 80004a4:	b407      	push	{r0, r1, r2}
 80004a6:	4802      	ldr	r0, [pc, #8]	; (80004b0 <__aeabi_ldivmod+0x2c>)
 80004a8:	a101      	add	r1, pc, #4	; (adr r1, 80004b0 <__aeabi_ldivmod+0x2c>)
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	9002      	str	r0, [sp, #8]
 80004ae:	bd03      	pop	{r0, r1, pc}
 80004b0:	ffffff55 	.word	0xffffff55
 80004b4:	b403      	push	{r0, r1}
 80004b6:	4668      	mov	r0, sp
 80004b8:	b501      	push	{r0, lr}
 80004ba:	9802      	ldr	r0, [sp, #8]
 80004bc:	f000 f932 	bl	8000724 <__gnu_ldivmod_helper>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	469e      	mov	lr, r3
 80004c4:	b002      	add	sp, #8
 80004c6:	bc0c      	pop	{r2, r3}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_uldivmod>:
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d111      	bne.n	80004f4 <__aeabi_uldivmod+0x28>
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d10f      	bne.n	80004f4 <__aeabi_uldivmod+0x28>
 80004d4:	2900      	cmp	r1, #0
 80004d6:	d100      	bne.n	80004da <__aeabi_uldivmod+0xe>
 80004d8:	2800      	cmp	r0, #0
 80004da:	d002      	beq.n	80004e2 <__aeabi_uldivmod+0x16>
 80004dc:	2100      	movs	r1, #0
 80004de:	43c9      	mvns	r1, r1
 80004e0:	1c08      	adds	r0, r1, #0
 80004e2:	b407      	push	{r0, r1, r2}
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <__aeabi_uldivmod+0x24>)
 80004e6:	a102      	add	r1, pc, #8	; (adr r1, 80004f0 <__aeabi_uldivmod+0x24>)
 80004e8:	1840      	adds	r0, r0, r1
 80004ea:	9002      	str	r0, [sp, #8]
 80004ec:	bd03      	pop	{r0, r1, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	ffffff15 	.word	0xffffff15
 80004f4:	b403      	push	{r0, r1}
 80004f6:	4668      	mov	r0, sp
 80004f8:	b501      	push	{r0, lr}
 80004fa:	9802      	ldr	r0, [sp, #8]
 80004fc:	f000 f846 	bl	800058c <__udivmoddi4>
 8000500:	9b01      	ldr	r3, [sp, #4]
 8000502:	469e      	mov	lr, r3
 8000504:	b002      	add	sp, #8
 8000506:	bc0c      	pop	{r2, r3}
 8000508:	4770      	bx	lr
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_lmul>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	000f      	movs	r7, r1
 8000514:	0001      	movs	r1, r0
 8000516:	002e      	movs	r6, r5
 8000518:	46c6      	mov	lr, r8
 800051a:	4684      	mov	ip, r0
 800051c:	0400      	lsls	r0, r0, #16
 800051e:	0c14      	lsrs	r4, r2, #16
 8000520:	0c00      	lsrs	r0, r0, #16
 8000522:	0c09      	lsrs	r1, r1, #16
 8000524:	4346      	muls	r6, r0
 8000526:	434d      	muls	r5, r1
 8000528:	4360      	muls	r0, r4
 800052a:	4361      	muls	r1, r4
 800052c:	1940      	adds	r0, r0, r5
 800052e:	0c34      	lsrs	r4, r6, #16
 8000530:	1824      	adds	r4, r4, r0
 8000532:	b500      	push	{lr}
 8000534:	42a5      	cmp	r5, r4
 8000536:	d903      	bls.n	8000540 <__aeabi_lmul+0x34>
 8000538:	2080      	movs	r0, #128	; 0x80
 800053a:	0240      	lsls	r0, r0, #9
 800053c:	4680      	mov	r8, r0
 800053e:	4441      	add	r1, r8
 8000540:	0c25      	lsrs	r5, r4, #16
 8000542:	186d      	adds	r5, r5, r1
 8000544:	4661      	mov	r1, ip
 8000546:	4359      	muls	r1, r3
 8000548:	437a      	muls	r2, r7
 800054a:	0430      	lsls	r0, r6, #16
 800054c:	1949      	adds	r1, r1, r5
 800054e:	0424      	lsls	r4, r4, #16
 8000550:	0c00      	lsrs	r0, r0, #16
 8000552:	1820      	adds	r0, r4, r0
 8000554:	1889      	adds	r1, r1, r2
 8000556:	bc80      	pop	{r7}
 8000558:	46b8      	mov	r8, r7
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f002 fe40 	bl	80031e8 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 fe81 	bl	8001274 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	; 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fcb3 	bl	8000ee4 <__aeabi_fsub>
 800057e:	f000 fe79 	bl	8001274 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4657      	mov	r7, sl
 8000590:	464e      	mov	r6, r9
 8000592:	4645      	mov	r5, r8
 8000594:	46de      	mov	lr, fp
 8000596:	b5e0      	push	{r5, r6, r7, lr}
 8000598:	0004      	movs	r4, r0
 800059a:	000d      	movs	r5, r1
 800059c:	4692      	mov	sl, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	b083      	sub	sp, #12
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d830      	bhi.n	8000608 <__udivmoddi4+0x7c>
 80005a6:	d02d      	beq.n	8000604 <__udivmoddi4+0x78>
 80005a8:	4649      	mov	r1, r9
 80005aa:	4650      	mov	r0, sl
 80005ac:	f002 fe44 	bl	8003238 <__clzdi2>
 80005b0:	0029      	movs	r1, r5
 80005b2:	0006      	movs	r6, r0
 80005b4:	0020      	movs	r0, r4
 80005b6:	f002 fe3f 	bl	8003238 <__clzdi2>
 80005ba:	1a33      	subs	r3, r6, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	3b20      	subs	r3, #32
 80005c0:	469b      	mov	fp, r3
 80005c2:	d433      	bmi.n	800062c <__udivmoddi4+0xa0>
 80005c4:	465a      	mov	r2, fp
 80005c6:	4653      	mov	r3, sl
 80005c8:	4093      	lsls	r3, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	001f      	movs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d83a      	bhi.n	800064e <__udivmoddi4+0xc2>
 80005d8:	42af      	cmp	r7, r5
 80005da:	d100      	bne.n	80005de <__udivmoddi4+0x52>
 80005dc:	e078      	b.n	80006d0 <__udivmoddi4+0x144>
 80005de:	465b      	mov	r3, fp
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5e>
 80005e8:	e075      	b.n	80006d6 <__udivmoddi4+0x14a>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	465a      	mov	r2, fp
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4642      	mov	r2, r8
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e028      	b.n	8000656 <__udivmoddi4+0xca>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9cf      	bls.n	80005a8 <__udivmoddi4+0x1c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8e>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b003      	add	sp, #12
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
 8000622:	46bb      	mov	fp, r7
 8000624:	46b2      	mov	sl, r6
 8000626:	46a9      	mov	r9, r5
 8000628:	46a0      	mov	r8, r4
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	4652      	mov	r2, sl
 8000634:	40da      	lsrs	r2, r3
 8000636:	4641      	mov	r1, r8
 8000638:	0013      	movs	r3, r2
 800063a:	464a      	mov	r2, r9
 800063c:	408a      	lsls	r2, r1
 800063e:	0017      	movs	r7, r2
 8000640:	4642      	mov	r2, r8
 8000642:	431f      	orrs	r7, r3
 8000644:	4653      	mov	r3, sl
 8000646:	4093      	lsls	r3, r2
 8000648:	001e      	movs	r6, r3
 800064a:	42af      	cmp	r7, r5
 800064c:	d9c4      	bls.n	80005d8 <__udivmoddi4+0x4c>
 800064e:	2200      	movs	r2, #0
 8000650:	2300      	movs	r3, #0
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	4643      	mov	r3, r8
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0d9      	beq.n	8000610 <__udivmoddi4+0x84>
 800065c:	07fb      	lsls	r3, r7, #31
 800065e:	0872      	lsrs	r2, r6, #1
 8000660:	431a      	orrs	r2, r3
 8000662:	4646      	mov	r6, r8
 8000664:	087b      	lsrs	r3, r7, #1
 8000666:	e00e      	b.n	8000686 <__udivmoddi4+0xfa>
 8000668:	42ab      	cmp	r3, r5
 800066a:	d101      	bne.n	8000670 <__udivmoddi4+0xe4>
 800066c:	42a2      	cmp	r2, r4
 800066e:	d80c      	bhi.n	800068a <__udivmoddi4+0xfe>
 8000670:	1aa4      	subs	r4, r4, r2
 8000672:	419d      	sbcs	r5, r3
 8000674:	2001      	movs	r0, #1
 8000676:	1924      	adds	r4, r4, r4
 8000678:	416d      	adcs	r5, r5
 800067a:	2100      	movs	r1, #0
 800067c:	3e01      	subs	r6, #1
 800067e:	1824      	adds	r4, r4, r0
 8000680:	414d      	adcs	r5, r1
 8000682:	2e00      	cmp	r6, #0
 8000684:	d006      	beq.n	8000694 <__udivmoddi4+0x108>
 8000686:	42ab      	cmp	r3, r5
 8000688:	d9ee      	bls.n	8000668 <__udivmoddi4+0xdc>
 800068a:	3e01      	subs	r6, #1
 800068c:	1924      	adds	r4, r4, r4
 800068e:	416d      	adcs	r5, r5
 8000690:	2e00      	cmp	r6, #0
 8000692:	d1f8      	bne.n	8000686 <__udivmoddi4+0xfa>
 8000694:	9800      	ldr	r0, [sp, #0]
 8000696:	9901      	ldr	r1, [sp, #4]
 8000698:	465b      	mov	r3, fp
 800069a:	1900      	adds	r0, r0, r4
 800069c:	4169      	adcs	r1, r5
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db24      	blt.n	80006ec <__udivmoddi4+0x160>
 80006a2:	002b      	movs	r3, r5
 80006a4:	465a      	mov	r2, fp
 80006a6:	4644      	mov	r4, r8
 80006a8:	40d3      	lsrs	r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	40e2      	lsrs	r2, r4
 80006ae:	001c      	movs	r4, r3
 80006b0:	465b      	mov	r3, fp
 80006b2:	0015      	movs	r5, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db2a      	blt.n	800070e <__udivmoddi4+0x182>
 80006b8:	0026      	movs	r6, r4
 80006ba:	409e      	lsls	r6, r3
 80006bc:	0033      	movs	r3, r6
 80006be:	0026      	movs	r6, r4
 80006c0:	4647      	mov	r7, r8
 80006c2:	40be      	lsls	r6, r7
 80006c4:	0032      	movs	r2, r6
 80006c6:	1a80      	subs	r0, r0, r2
 80006c8:	4199      	sbcs	r1, r3
 80006ca:	9000      	str	r0, [sp, #0]
 80006cc:	9101      	str	r1, [sp, #4]
 80006ce:	e79f      	b.n	8000610 <__udivmoddi4+0x84>
 80006d0:	42a3      	cmp	r3, r4
 80006d2:	d8bc      	bhi.n	800064e <__udivmoddi4+0xc2>
 80006d4:	e783      	b.n	80005de <__udivmoddi4+0x52>
 80006d6:	4642      	mov	r2, r8
 80006d8:	2320      	movs	r3, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	9100      	str	r1, [sp, #0]
 80006e2:	9201      	str	r2, [sp, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	e786      	b.n	80005fa <__udivmoddi4+0x6e>
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	002a      	movs	r2, r5
 80006f4:	4646      	mov	r6, r8
 80006f6:	409a      	lsls	r2, r3
 80006f8:	0023      	movs	r3, r4
 80006fa:	40f3      	lsrs	r3, r6
 80006fc:	4644      	mov	r4, r8
 80006fe:	4313      	orrs	r3, r2
 8000700:	002a      	movs	r2, r5
 8000702:	40e2      	lsrs	r2, r4
 8000704:	001c      	movs	r4, r3
 8000706:	465b      	mov	r3, fp
 8000708:	0015      	movs	r5, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	dad4      	bge.n	80006b8 <__udivmoddi4+0x12c>
 800070e:	4642      	mov	r2, r8
 8000710:	002f      	movs	r7, r5
 8000712:	2320      	movs	r3, #32
 8000714:	0026      	movs	r6, r4
 8000716:	4097      	lsls	r7, r2
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	40de      	lsrs	r6, r3
 800071c:	003b      	movs	r3, r7
 800071e:	4333      	orrs	r3, r6
 8000720:	e7cd      	b.n	80006be <__udivmoddi4+0x132>
 8000722:	46c0      	nop			; (mov r8, r8)

08000724 <__gnu_ldivmod_helper>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	46ce      	mov	lr, r9
 8000728:	4647      	mov	r7, r8
 800072a:	b580      	push	{r7, lr}
 800072c:	4691      	mov	r9, r2
 800072e:	4698      	mov	r8, r3
 8000730:	0004      	movs	r4, r0
 8000732:	000d      	movs	r5, r1
 8000734:	f002 fd8c 	bl	8003250 <__divdi3>
 8000738:	0007      	movs	r7, r0
 800073a:	000e      	movs	r6, r1
 800073c:	0002      	movs	r2, r0
 800073e:	000b      	movs	r3, r1
 8000740:	4648      	mov	r0, r9
 8000742:	4641      	mov	r1, r8
 8000744:	f7ff fee2 	bl	800050c <__aeabi_lmul>
 8000748:	1a24      	subs	r4, r4, r0
 800074a:	418d      	sbcs	r5, r1
 800074c:	9b08      	ldr	r3, [sp, #32]
 800074e:	0038      	movs	r0, r7
 8000750:	0031      	movs	r1, r6
 8000752:	601c      	str	r4, [r3, #0]
 8000754:	605d      	str	r5, [r3, #4]
 8000756:	bcc0      	pop	{r6, r7}
 8000758:	46b9      	mov	r9, r7
 800075a:	46b0      	mov	r8, r6
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)

08000760 <__aeabi_fadd>:
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	4646      	mov	r6, r8
 8000764:	46d6      	mov	lr, sl
 8000766:	464f      	mov	r7, r9
 8000768:	024d      	lsls	r5, r1, #9
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	b5c0      	push	{r6, r7, lr}
 800076e:	0a52      	lsrs	r2, r2, #9
 8000770:	0a6e      	lsrs	r6, r5, #9
 8000772:	0047      	lsls	r7, r0, #1
 8000774:	46b0      	mov	r8, r6
 8000776:	0e3f      	lsrs	r7, r7, #24
 8000778:	004e      	lsls	r6, r1, #1
 800077a:	0fc4      	lsrs	r4, r0, #31
 800077c:	00d0      	lsls	r0, r2, #3
 800077e:	4694      	mov	ip, r2
 8000780:	003b      	movs	r3, r7
 8000782:	4682      	mov	sl, r0
 8000784:	0e36      	lsrs	r6, r6, #24
 8000786:	0fc9      	lsrs	r1, r1, #31
 8000788:	09ad      	lsrs	r5, r5, #6
 800078a:	428c      	cmp	r4, r1
 800078c:	d06d      	beq.n	800086a <__aeabi_fadd+0x10a>
 800078e:	1bb8      	subs	r0, r7, r6
 8000790:	4681      	mov	r9, r0
 8000792:	2800      	cmp	r0, #0
 8000794:	dd4d      	ble.n	8000832 <__aeabi_fadd+0xd2>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x3c>
 800079a:	e088      	b.n	80008ae <__aeabi_fadd+0x14e>
 800079c:	2fff      	cmp	r7, #255	; 0xff
 800079e:	d05a      	beq.n	8000856 <__aeabi_fadd+0xf6>
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	04db      	lsls	r3, r3, #19
 80007a4:	431d      	orrs	r5, r3
 80007a6:	464b      	mov	r3, r9
 80007a8:	2201      	movs	r2, #1
 80007aa:	2b1b      	cmp	r3, #27
 80007ac:	dc0a      	bgt.n	80007c4 <__aeabi_fadd+0x64>
 80007ae:	002b      	movs	r3, r5
 80007b0:	464a      	mov	r2, r9
 80007b2:	4649      	mov	r1, r9
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	2220      	movs	r2, #32
 80007b8:	1a52      	subs	r2, r2, r1
 80007ba:	4095      	lsls	r5, r2
 80007bc:	002a      	movs	r2, r5
 80007be:	1e55      	subs	r5, r2, #1
 80007c0:	41aa      	sbcs	r2, r5
 80007c2:	431a      	orrs	r2, r3
 80007c4:	4653      	mov	r3, sl
 80007c6:	1a9a      	subs	r2, r3, r2
 80007c8:	0153      	lsls	r3, r2, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fadd+0x6e>
 80007cc:	e0b9      	b.n	8000942 <__aeabi_fadd+0x1e2>
 80007ce:	0192      	lsls	r2, r2, #6
 80007d0:	0996      	lsrs	r6, r2, #6
 80007d2:	0030      	movs	r0, r6
 80007d4:	f002 fd12 	bl	80031fc <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4086      	lsls	r6, r0
 80007dc:	4287      	cmp	r7, r0
 80007de:	dd00      	ble.n	80007e2 <__aeabi_fadd+0x82>
 80007e0:	e0d4      	b.n	800098c <__aeabi_fadd+0x22c>
 80007e2:	0033      	movs	r3, r6
 80007e4:	1bc7      	subs	r7, r0, r7
 80007e6:	2020      	movs	r0, #32
 80007e8:	3701      	adds	r7, #1
 80007ea:	40fb      	lsrs	r3, r7
 80007ec:	1bc7      	subs	r7, r0, r7
 80007ee:	40be      	lsls	r6, r7
 80007f0:	0032      	movs	r2, r6
 80007f2:	1e56      	subs	r6, r2, #1
 80007f4:	41b2      	sbcs	r2, r6
 80007f6:	2700      	movs	r7, #0
 80007f8:	431a      	orrs	r2, r3
 80007fa:	0753      	lsls	r3, r2, #29
 80007fc:	d004      	beq.n	8000808 <__aeabi_fadd+0xa8>
 80007fe:	230f      	movs	r3, #15
 8000800:	4013      	ands	r3, r2
 8000802:	2b04      	cmp	r3, #4
 8000804:	d000      	beq.n	8000808 <__aeabi_fadd+0xa8>
 8000806:	3204      	adds	r2, #4
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d400      	bmi.n	800080e <__aeabi_fadd+0xae>
 800080c:	e09c      	b.n	8000948 <__aeabi_fadd+0x1e8>
 800080e:	1c7b      	adds	r3, r7, #1
 8000810:	2ffe      	cmp	r7, #254	; 0xfe
 8000812:	d100      	bne.n	8000816 <__aeabi_fadd+0xb6>
 8000814:	e09a      	b.n	800094c <__aeabi_fadd+0x1ec>
 8000816:	0192      	lsls	r2, r2, #6
 8000818:	0a52      	lsrs	r2, r2, #9
 800081a:	4694      	mov	ip, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	05d8      	lsls	r0, r3, #23
 8000820:	4663      	mov	r3, ip
 8000822:	07e4      	lsls	r4, r4, #31
 8000824:	4318      	orrs	r0, r3
 8000826:	4320      	orrs	r0, r4
 8000828:	bce0      	pop	{r5, r6, r7}
 800082a:	46ba      	mov	sl, r7
 800082c:	46b1      	mov	r9, r6
 800082e:	46a8      	mov	r8, r5
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	2800      	cmp	r0, #0
 8000834:	d049      	beq.n	80008ca <__aeabi_fadd+0x16a>
 8000836:	1bf3      	subs	r3, r6, r7
 8000838:	2f00      	cmp	r7, #0
 800083a:	d000      	beq.n	800083e <__aeabi_fadd+0xde>
 800083c:	e0b6      	b.n	80009ac <__aeabi_fadd+0x24c>
 800083e:	4652      	mov	r2, sl
 8000840:	2a00      	cmp	r2, #0
 8000842:	d060      	beq.n	8000906 <__aeabi_fadd+0x1a6>
 8000844:	3b01      	subs	r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0xec>
 800084a:	e0fc      	b.n	8000a46 <__aeabi_fadd+0x2e6>
 800084c:	2eff      	cmp	r6, #255	; 0xff
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0xf2>
 8000850:	e0b4      	b.n	80009bc <__aeabi_fadd+0x25c>
 8000852:	000c      	movs	r4, r1
 8000854:	4642      	mov	r2, r8
 8000856:	2a00      	cmp	r2, #0
 8000858:	d078      	beq.n	800094c <__aeabi_fadd+0x1ec>
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	03c0      	lsls	r0, r0, #15
 800085e:	4310      	orrs	r0, r2
 8000860:	0242      	lsls	r2, r0, #9
 8000862:	0a53      	lsrs	r3, r2, #9
 8000864:	469c      	mov	ip, r3
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	e7d9      	b.n	800081e <__aeabi_fadd+0xbe>
 800086a:	1bb9      	subs	r1, r7, r6
 800086c:	2900      	cmp	r1, #0
 800086e:	dd71      	ble.n	8000954 <__aeabi_fadd+0x1f4>
 8000870:	2e00      	cmp	r6, #0
 8000872:	d03f      	beq.n	80008f4 <__aeabi_fadd+0x194>
 8000874:	2fff      	cmp	r7, #255	; 0xff
 8000876:	d0ee      	beq.n	8000856 <__aeabi_fadd+0xf6>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	04db      	lsls	r3, r3, #19
 800087c:	431d      	orrs	r5, r3
 800087e:	2201      	movs	r2, #1
 8000880:	291b      	cmp	r1, #27
 8000882:	dc07      	bgt.n	8000894 <__aeabi_fadd+0x134>
 8000884:	002a      	movs	r2, r5
 8000886:	2320      	movs	r3, #32
 8000888:	40ca      	lsrs	r2, r1
 800088a:	1a59      	subs	r1, r3, r1
 800088c:	408d      	lsls	r5, r1
 800088e:	1e6b      	subs	r3, r5, #1
 8000890:	419d      	sbcs	r5, r3
 8000892:	432a      	orrs	r2, r5
 8000894:	4452      	add	r2, sl
 8000896:	0153      	lsls	r3, r2, #5
 8000898:	d553      	bpl.n	8000942 <__aeabi_fadd+0x1e2>
 800089a:	3701      	adds	r7, #1
 800089c:	2fff      	cmp	r7, #255	; 0xff
 800089e:	d055      	beq.n	800094c <__aeabi_fadd+0x1ec>
 80008a0:	2301      	movs	r3, #1
 80008a2:	497b      	ldr	r1, [pc, #492]	; (8000a90 <__aeabi_fadd+0x330>)
 80008a4:	4013      	ands	r3, r2
 80008a6:	0852      	lsrs	r2, r2, #1
 80008a8:	400a      	ands	r2, r1
 80008aa:	431a      	orrs	r2, r3
 80008ac:	e7a5      	b.n	80007fa <__aeabi_fadd+0x9a>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d02c      	beq.n	800090c <__aeabi_fadd+0x1ac>
 80008b2:	2301      	movs	r3, #1
 80008b4:	425b      	negs	r3, r3
 80008b6:	469c      	mov	ip, r3
 80008b8:	44e1      	add	r9, ip
 80008ba:	464b      	mov	r3, r9
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x162>
 80008c0:	e0ad      	b.n	8000a1e <__aeabi_fadd+0x2be>
 80008c2:	2fff      	cmp	r7, #255	; 0xff
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fadd+0x168>
 80008c6:	e76e      	b.n	80007a6 <__aeabi_fadd+0x46>
 80008c8:	e7c5      	b.n	8000856 <__aeabi_fadd+0xf6>
 80008ca:	20fe      	movs	r0, #254	; 0xfe
 80008cc:	1c7e      	adds	r6, r7, #1
 80008ce:	4230      	tst	r0, r6
 80008d0:	d160      	bne.n	8000994 <__aeabi_fadd+0x234>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fadd+0x178>
 80008d6:	e093      	b.n	8000a00 <__aeabi_fadd+0x2a0>
 80008d8:	4652      	mov	r2, sl
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x180>
 80008de:	e0b6      	b.n	8000a4e <__aeabi_fadd+0x2ee>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d09c      	beq.n	800081e <__aeabi_fadd+0xbe>
 80008e4:	1b52      	subs	r2, r2, r5
 80008e6:	0150      	lsls	r0, r2, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fadd+0x18c>
 80008ea:	e0c3      	b.n	8000a74 <__aeabi_fadd+0x314>
 80008ec:	4653      	mov	r3, sl
 80008ee:	000c      	movs	r4, r1
 80008f0:	1aea      	subs	r2, r5, r3
 80008f2:	e782      	b.n	80007fa <__aeabi_fadd+0x9a>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d009      	beq.n	800090c <__aeabi_fadd+0x1ac>
 80008f8:	3901      	subs	r1, #1
 80008fa:	2900      	cmp	r1, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x1a0>
 80008fe:	e08b      	b.n	8000a18 <__aeabi_fadd+0x2b8>
 8000900:	2fff      	cmp	r7, #255	; 0xff
 8000902:	d1bc      	bne.n	800087e <__aeabi_fadd+0x11e>
 8000904:	e7a7      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000906:	000c      	movs	r4, r1
 8000908:	4642      	mov	r2, r8
 800090a:	0037      	movs	r7, r6
 800090c:	2fff      	cmp	r7, #255	; 0xff
 800090e:	d0a2      	beq.n	8000856 <__aeabi_fadd+0xf6>
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	0a53      	lsrs	r3, r2, #9
 8000914:	469c      	mov	ip, r3
 8000916:	b2fb      	uxtb	r3, r7
 8000918:	e781      	b.n	800081e <__aeabi_fadd+0xbe>
 800091a:	21fe      	movs	r1, #254	; 0xfe
 800091c:	3701      	adds	r7, #1
 800091e:	4239      	tst	r1, r7
 8000920:	d165      	bne.n	80009ee <__aeabi_fadd+0x28e>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d17e      	bne.n	8000a24 <__aeabi_fadd+0x2c4>
 8000926:	2800      	cmp	r0, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x1cc>
 800092a:	e0aa      	b.n	8000a82 <__aeabi_fadd+0x322>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x1d2>
 8000930:	e775      	b.n	800081e <__aeabi_fadd+0xbe>
 8000932:	002a      	movs	r2, r5
 8000934:	4452      	add	r2, sl
 8000936:	2700      	movs	r7, #0
 8000938:	0153      	lsls	r3, r2, #5
 800093a:	d502      	bpl.n	8000942 <__aeabi_fadd+0x1e2>
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <__aeabi_fadd+0x334>)
 800093e:	3701      	adds	r7, #1
 8000940:	401a      	ands	r2, r3
 8000942:	0753      	lsls	r3, r2, #29
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x1e8>
 8000946:	e75a      	b.n	80007fe <__aeabi_fadd+0x9e>
 8000948:	08d2      	lsrs	r2, r2, #3
 800094a:	e7df      	b.n	800090c <__aeabi_fadd+0x1ac>
 800094c:	2200      	movs	r2, #0
 800094e:	23ff      	movs	r3, #255	; 0xff
 8000950:	4694      	mov	ip, r2
 8000952:	e764      	b.n	800081e <__aeabi_fadd+0xbe>
 8000954:	2900      	cmp	r1, #0
 8000956:	d0e0      	beq.n	800091a <__aeabi_fadd+0x1ba>
 8000958:	1bf3      	subs	r3, r6, r7
 800095a:	2f00      	cmp	r7, #0
 800095c:	d03e      	beq.n	80009dc <__aeabi_fadd+0x27c>
 800095e:	2eff      	cmp	r6, #255	; 0xff
 8000960:	d100      	bne.n	8000964 <__aeabi_fadd+0x204>
 8000962:	e777      	b.n	8000854 <__aeabi_fadd+0xf4>
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	0001      	movs	r1, r0
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4311      	orrs	r1, r2
 800096c:	468a      	mov	sl, r1
 800096e:	2201      	movs	r2, #1
 8000970:	2b1b      	cmp	r3, #27
 8000972:	dc08      	bgt.n	8000986 <__aeabi_fadd+0x226>
 8000974:	4652      	mov	r2, sl
 8000976:	2120      	movs	r1, #32
 8000978:	4650      	mov	r0, sl
 800097a:	40da      	lsrs	r2, r3
 800097c:	1acb      	subs	r3, r1, r3
 800097e:	4098      	lsls	r0, r3
 8000980:	1e43      	subs	r3, r0, #1
 8000982:	4198      	sbcs	r0, r3
 8000984:	4302      	orrs	r2, r0
 8000986:	0037      	movs	r7, r6
 8000988:	1952      	adds	r2, r2, r5
 800098a:	e784      	b.n	8000896 <__aeabi_fadd+0x136>
 800098c:	4a41      	ldr	r2, [pc, #260]	; (8000a94 <__aeabi_fadd+0x334>)
 800098e:	1a3f      	subs	r7, r7, r0
 8000990:	4032      	ands	r2, r6
 8000992:	e732      	b.n	80007fa <__aeabi_fadd+0x9a>
 8000994:	4653      	mov	r3, sl
 8000996:	1b5e      	subs	r6, r3, r5
 8000998:	0173      	lsls	r3, r6, #5
 800099a:	d42d      	bmi.n	80009f8 <__aeabi_fadd+0x298>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d000      	beq.n	80009a2 <__aeabi_fadd+0x242>
 80009a0:	e717      	b.n	80007d2 <__aeabi_fadd+0x72>
 80009a2:	2200      	movs	r2, #0
 80009a4:	2400      	movs	r4, #0
 80009a6:	2300      	movs	r3, #0
 80009a8:	4694      	mov	ip, r2
 80009aa:	e738      	b.n	800081e <__aeabi_fadd+0xbe>
 80009ac:	2eff      	cmp	r6, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fadd+0x252>
 80009b0:	e74f      	b.n	8000852 <__aeabi_fadd+0xf2>
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	4650      	mov	r0, sl
 80009b6:	04d2      	lsls	r2, r2, #19
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4682      	mov	sl, r0
 80009bc:	2201      	movs	r2, #1
 80009be:	2b1b      	cmp	r3, #27
 80009c0:	dc08      	bgt.n	80009d4 <__aeabi_fadd+0x274>
 80009c2:	4652      	mov	r2, sl
 80009c4:	2420      	movs	r4, #32
 80009c6:	4650      	mov	r0, sl
 80009c8:	40da      	lsrs	r2, r3
 80009ca:	1ae3      	subs	r3, r4, r3
 80009cc:	4098      	lsls	r0, r3
 80009ce:	1e43      	subs	r3, r0, #1
 80009d0:	4198      	sbcs	r0, r3
 80009d2:	4302      	orrs	r2, r0
 80009d4:	000c      	movs	r4, r1
 80009d6:	0037      	movs	r7, r6
 80009d8:	1aaa      	subs	r2, r5, r2
 80009da:	e6f5      	b.n	80007c8 <__aeabi_fadd+0x68>
 80009dc:	2800      	cmp	r0, #0
 80009de:	d093      	beq.n	8000908 <__aeabi_fadd+0x1a8>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d04f      	beq.n	8000a86 <__aeabi_fadd+0x326>
 80009e6:	2eff      	cmp	r6, #255	; 0xff
 80009e8:	d1c1      	bne.n	800096e <__aeabi_fadd+0x20e>
 80009ea:	4642      	mov	r2, r8
 80009ec:	e733      	b.n	8000856 <__aeabi_fadd+0xf6>
 80009ee:	2fff      	cmp	r7, #255	; 0xff
 80009f0:	d0ac      	beq.n	800094c <__aeabi_fadd+0x1ec>
 80009f2:	4455      	add	r5, sl
 80009f4:	086a      	lsrs	r2, r5, #1
 80009f6:	e7a4      	b.n	8000942 <__aeabi_fadd+0x1e2>
 80009f8:	4653      	mov	r3, sl
 80009fa:	000c      	movs	r4, r1
 80009fc:	1aee      	subs	r6, r5, r3
 80009fe:	e6e8      	b.n	80007d2 <__aeabi_fadd+0x72>
 8000a00:	4653      	mov	r3, sl
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d128      	bne.n	8000a58 <__aeabi_fadd+0x2f8>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fadd+0x2ac>
 8000a0a:	e722      	b.n	8000852 <__aeabi_fadd+0xf2>
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	03db      	lsls	r3, r3, #15
 8000a10:	469c      	mov	ip, r3
 8000a12:	2400      	movs	r4, #0
 8000a14:	23ff      	movs	r3, #255	; 0xff
 8000a16:	e702      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a18:	002a      	movs	r2, r5
 8000a1a:	4452      	add	r2, sl
 8000a1c:	e73b      	b.n	8000896 <__aeabi_fadd+0x136>
 8000a1e:	4653      	mov	r3, sl
 8000a20:	1b5a      	subs	r2, r3, r5
 8000a22:	e6d1      	b.n	80007c8 <__aeabi_fadd+0x68>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fadd+0x2ca>
 8000a28:	e714      	b.n	8000854 <__aeabi_fadd+0xf4>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fadd+0x2d0>
 8000a2e:	e712      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	03db      	lsls	r3, r3, #15
 8000a34:	421a      	tst	r2, r3
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fadd+0x2da>
 8000a38:	e70d      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	4219      	tst	r1, r3
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fadd+0x2e2>
 8000a40:	e709      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a42:	4642      	mov	r2, r8
 8000a44:	e707      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a46:	000c      	movs	r4, r1
 8000a48:	0037      	movs	r7, r6
 8000a4a:	1aaa      	subs	r2, r5, r2
 8000a4c:	e6bc      	b.n	80007c8 <__aeabi_fadd+0x68>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d013      	beq.n	8000a7a <__aeabi_fadd+0x31a>
 8000a52:	000c      	movs	r4, r1
 8000a54:	46c4      	mov	ip, r8
 8000a56:	e6e2      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fadd+0x2fe>
 8000a5c:	e6fb      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	421a      	tst	r2, r3
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x308>
 8000a66:	e6f6      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	4218      	tst	r0, r3
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_fadd+0x310>
 8000a6e:	e6f2      	b.n	8000856 <__aeabi_fadd+0xf6>
 8000a70:	000c      	movs	r4, r1
 8000a72:	e6ef      	b.n	8000854 <__aeabi_fadd+0xf4>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fadd+0x31a>
 8000a78:	e763      	b.n	8000942 <__aeabi_fadd+0x1e2>
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	4694      	mov	ip, r2
 8000a80:	e6cd      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a82:	46c4      	mov	ip, r8
 8000a84:	e6cb      	b.n	800081e <__aeabi_fadd+0xbe>
 8000a86:	002a      	movs	r2, r5
 8000a88:	0037      	movs	r7, r6
 8000a8a:	4452      	add	r2, sl
 8000a8c:	e703      	b.n	8000896 <__aeabi_fadd+0x136>
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	7dffffff 	.word	0x7dffffff
 8000a94:	fbffffff 	.word	0xfbffffff

08000a98 <__aeabi_fdiv>:
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	464f      	mov	r7, r9
 8000a9c:	4646      	mov	r6, r8
 8000a9e:	46d6      	mov	lr, sl
 8000aa0:	0245      	lsls	r5, r0, #9
 8000aa2:	b5c0      	push	{r6, r7, lr}
 8000aa4:	0047      	lsls	r7, r0, #1
 8000aa6:	1c0c      	adds	r4, r1, #0
 8000aa8:	0a6d      	lsrs	r5, r5, #9
 8000aaa:	0e3f      	lsrs	r7, r7, #24
 8000aac:	0fc6      	lsrs	r6, r0, #31
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d066      	beq.n	8000b80 <__aeabi_fdiv+0xe8>
 8000ab2:	2fff      	cmp	r7, #255	; 0xff
 8000ab4:	d06c      	beq.n	8000b90 <__aeabi_fdiv+0xf8>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	00ea      	lsls	r2, r5, #3
 8000aba:	2580      	movs	r5, #128	; 0x80
 8000abc:	4699      	mov	r9, r3
 8000abe:	469a      	mov	sl, r3
 8000ac0:	04ed      	lsls	r5, r5, #19
 8000ac2:	4315      	orrs	r5, r2
 8000ac4:	3f7f      	subs	r7, #127	; 0x7f
 8000ac6:	0260      	lsls	r0, r4, #9
 8000ac8:	0061      	lsls	r1, r4, #1
 8000aca:	0a43      	lsrs	r3, r0, #9
 8000acc:	4698      	mov	r8, r3
 8000ace:	0e09      	lsrs	r1, r1, #24
 8000ad0:	0fe4      	lsrs	r4, r4, #31
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d048      	beq.n	8000b68 <__aeabi_fdiv+0xd0>
 8000ad6:	29ff      	cmp	r1, #255	; 0xff
 8000ad8:	d010      	beq.n	8000afc <__aeabi_fdiv+0x64>
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	00d8      	lsls	r0, r3, #3
 8000ade:	04d2      	lsls	r2, r2, #19
 8000ae0:	4302      	orrs	r2, r0
 8000ae2:	4690      	mov	r8, r2
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	397f      	subs	r1, #127	; 0x7f
 8000ae8:	464a      	mov	r2, r9
 8000aea:	0033      	movs	r3, r6
 8000aec:	1a7f      	subs	r7, r7, r1
 8000aee:	4302      	orrs	r2, r0
 8000af0:	496c      	ldr	r1, [pc, #432]	; (8000ca4 <__aeabi_fdiv+0x20c>)
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	588a      	ldr	r2, [r1, r2]
 8000af6:	4063      	eors	r3, r4
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4697      	mov	pc, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d16d      	bne.n	8000bdc <__aeabi_fdiv+0x144>
 8000b00:	2002      	movs	r0, #2
 8000b02:	3fff      	subs	r7, #255	; 0xff
 8000b04:	e033      	b.n	8000b6e <__aeabi_fdiv+0xd6>
 8000b06:	2300      	movs	r3, #0
 8000b08:	4698      	mov	r8, r3
 8000b0a:	0026      	movs	r6, r4
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	4682      	mov	sl, r0
 8000b10:	4653      	mov	r3, sl
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fdiv+0x80>
 8000b16:	e07f      	b.n	8000c18 <__aeabi_fdiv+0x180>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fdiv+0x86>
 8000b1c:	e094      	b.n	8000c48 <__aeabi_fdiv+0x1b0>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d017      	beq.n	8000b52 <__aeabi_fdiv+0xba>
 8000b22:	0038      	movs	r0, r7
 8000b24:	307f      	adds	r0, #127	; 0x7f
 8000b26:	2800      	cmp	r0, #0
 8000b28:	dd5f      	ble.n	8000bea <__aeabi_fdiv+0x152>
 8000b2a:	076b      	lsls	r3, r5, #29
 8000b2c:	d004      	beq.n	8000b38 <__aeabi_fdiv+0xa0>
 8000b2e:	230f      	movs	r3, #15
 8000b30:	402b      	ands	r3, r5
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d000      	beq.n	8000b38 <__aeabi_fdiv+0xa0>
 8000b36:	3504      	adds	r5, #4
 8000b38:	012b      	lsls	r3, r5, #4
 8000b3a:	d503      	bpl.n	8000b44 <__aeabi_fdiv+0xac>
 8000b3c:	0038      	movs	r0, r7
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ca8 <__aeabi_fdiv+0x210>)
 8000b40:	3080      	adds	r0, #128	; 0x80
 8000b42:	401d      	ands	r5, r3
 8000b44:	28fe      	cmp	r0, #254	; 0xfe
 8000b46:	dc67      	bgt.n	8000c18 <__aeabi_fdiv+0x180>
 8000b48:	01ad      	lsls	r5, r5, #6
 8000b4a:	0a6d      	lsrs	r5, r5, #9
 8000b4c:	b2c0      	uxtb	r0, r0
 8000b4e:	e002      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000b50:	001e      	movs	r6, r3
 8000b52:	2000      	movs	r0, #0
 8000b54:	2500      	movs	r5, #0
 8000b56:	05c0      	lsls	r0, r0, #23
 8000b58:	4328      	orrs	r0, r5
 8000b5a:	07f6      	lsls	r6, r6, #31
 8000b5c:	4330      	orrs	r0, r6
 8000b5e:	bce0      	pop	{r5, r6, r7}
 8000b60:	46ba      	mov	sl, r7
 8000b62:	46b1      	mov	r9, r6
 8000b64:	46a8      	mov	r8, r5
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d12b      	bne.n	8000bc4 <__aeabi_fdiv+0x12c>
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	464a      	mov	r2, r9
 8000b70:	0033      	movs	r3, r6
 8000b72:	494e      	ldr	r1, [pc, #312]	; (8000cac <__aeabi_fdiv+0x214>)
 8000b74:	4302      	orrs	r2, r0
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	588a      	ldr	r2, [r1, r2]
 8000b7a:	4063      	eors	r3, r4
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4697      	mov	pc, r2
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d113      	bne.n	8000bac <__aeabi_fdiv+0x114>
 8000b84:	2304      	movs	r3, #4
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e79a      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_fdiv+0x108>
 8000b94:	2308      	movs	r3, #8
 8000b96:	4699      	mov	r9, r3
 8000b98:	3b06      	subs	r3, #6
 8000b9a:	27ff      	movs	r7, #255	; 0xff
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	e792      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	3b09      	subs	r3, #9
 8000ba6:	27ff      	movs	r7, #255	; 0xff
 8000ba8:	469a      	mov	sl, r3
 8000baa:	e78c      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000bac:	0028      	movs	r0, r5
 8000bae:	f002 fb25 	bl	80031fc <__clzsi2>
 8000bb2:	2776      	movs	r7, #118	; 0x76
 8000bb4:	1f43      	subs	r3, r0, #5
 8000bb6:	409d      	lsls	r5, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	427f      	negs	r7, r7
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	1a3f      	subs	r7, r7, r0
 8000bc2:	e780      	b.n	8000ac6 <__aeabi_fdiv+0x2e>
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f002 fb19 	bl	80031fc <__clzsi2>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	1f43      	subs	r3, r0, #5
 8000bce:	2176      	movs	r1, #118	; 0x76
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	4249      	negs	r1, r1
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	4690      	mov	r8, r2
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e785      	b.n	8000ae8 <__aeabi_fdiv+0x50>
 8000bdc:	21ff      	movs	r1, #255	; 0xff
 8000bde:	2003      	movs	r0, #3
 8000be0:	e782      	b.n	8000ae8 <__aeabi_fdiv+0x50>
 8000be2:	001e      	movs	r6, r3
 8000be4:	20ff      	movs	r0, #255	; 0xff
 8000be6:	2500      	movs	r5, #0
 8000be8:	e7b5      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000bea:	2301      	movs	r3, #1
 8000bec:	1a1b      	subs	r3, r3, r0
 8000bee:	2b1b      	cmp	r3, #27
 8000bf0:	dcaf      	bgt.n	8000b52 <__aeabi_fdiv+0xba>
 8000bf2:	379e      	adds	r7, #158	; 0x9e
 8000bf4:	0029      	movs	r1, r5
 8000bf6:	40bd      	lsls	r5, r7
 8000bf8:	40d9      	lsrs	r1, r3
 8000bfa:	1e6a      	subs	r2, r5, #1
 8000bfc:	4195      	sbcs	r5, r2
 8000bfe:	430d      	orrs	r5, r1
 8000c00:	076b      	lsls	r3, r5, #29
 8000c02:	d004      	beq.n	8000c0e <__aeabi_fdiv+0x176>
 8000c04:	230f      	movs	r3, #15
 8000c06:	402b      	ands	r3, r5
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fdiv+0x176>
 8000c0c:	3504      	adds	r5, #4
 8000c0e:	016b      	lsls	r3, r5, #5
 8000c10:	d544      	bpl.n	8000c9c <__aeabi_fdiv+0x204>
 8000c12:	2001      	movs	r0, #1
 8000c14:	2500      	movs	r5, #0
 8000c16:	e79e      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c18:	20ff      	movs	r0, #255	; 0xff
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	e79b      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c1e:	2580      	movs	r5, #128	; 0x80
 8000c20:	2600      	movs	r6, #0
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	03ed      	lsls	r5, r5, #15
 8000c26:	e796      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	2080      	movs	r0, #128	; 0x80
 8000c2e:	03c0      	lsls	r0, r0, #15
 8000c30:	4205      	tst	r5, r0
 8000c32:	d009      	beq.n	8000c48 <__aeabi_fdiv+0x1b0>
 8000c34:	4643      	mov	r3, r8
 8000c36:	4203      	tst	r3, r0
 8000c38:	d106      	bne.n	8000c48 <__aeabi_fdiv+0x1b0>
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	4305      	orrs	r5, r0
 8000c3e:	026d      	lsls	r5, r5, #9
 8000c40:	0026      	movs	r6, r4
 8000c42:	20ff      	movs	r0, #255	; 0xff
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	e786      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c48:	2080      	movs	r0, #128	; 0x80
 8000c4a:	03c0      	lsls	r0, r0, #15
 8000c4c:	4305      	orrs	r5, r0
 8000c4e:	026d      	lsls	r5, r5, #9
 8000c50:	20ff      	movs	r0, #255	; 0xff
 8000c52:	0a6d      	lsrs	r5, r5, #9
 8000c54:	e77f      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000c56:	4641      	mov	r1, r8
 8000c58:	016a      	lsls	r2, r5, #5
 8000c5a:	0148      	lsls	r0, r1, #5
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	d219      	bcs.n	8000c94 <__aeabi_fdiv+0x1fc>
 8000c60:	211b      	movs	r1, #27
 8000c62:	2500      	movs	r5, #0
 8000c64:	3f01      	subs	r7, #1
 8000c66:	2601      	movs	r6, #1
 8000c68:	0014      	movs	r4, r2
 8000c6a:	006d      	lsls	r5, r5, #1
 8000c6c:	0052      	lsls	r2, r2, #1
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	db01      	blt.n	8000c76 <__aeabi_fdiv+0x1de>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	d801      	bhi.n	8000c7a <__aeabi_fdiv+0x1e2>
 8000c76:	1a12      	subs	r2, r2, r0
 8000c78:	4335      	orrs	r5, r6
 8000c7a:	3901      	subs	r1, #1
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d1f3      	bne.n	8000c68 <__aeabi_fdiv+0x1d0>
 8000c80:	1e50      	subs	r0, r2, #1
 8000c82:	4182      	sbcs	r2, r0
 8000c84:	0038      	movs	r0, r7
 8000c86:	307f      	adds	r0, #127	; 0x7f
 8000c88:	001e      	movs	r6, r3
 8000c8a:	4315      	orrs	r5, r2
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	dd00      	ble.n	8000c92 <__aeabi_fdiv+0x1fa>
 8000c90:	e74b      	b.n	8000b2a <__aeabi_fdiv+0x92>
 8000c92:	e7aa      	b.n	8000bea <__aeabi_fdiv+0x152>
 8000c94:	211a      	movs	r1, #26
 8000c96:	2501      	movs	r5, #1
 8000c98:	1a12      	subs	r2, r2, r0
 8000c9a:	e7e4      	b.n	8000c66 <__aeabi_fdiv+0x1ce>
 8000c9c:	01ad      	lsls	r5, r5, #6
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	0a6d      	lsrs	r5, r5, #9
 8000ca2:	e758      	b.n	8000b56 <__aeabi_fdiv+0xbe>
 8000ca4:	0800f9d8 	.word	0x0800f9d8
 8000ca8:	f7ffffff 	.word	0xf7ffffff
 8000cac:	0800fa18 	.word	0x0800fa18

08000cb0 <__aeabi_fmul>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	4657      	mov	r7, sl
 8000cb4:	464e      	mov	r6, r9
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	46de      	mov	lr, fp
 8000cba:	0244      	lsls	r4, r0, #9
 8000cbc:	b5e0      	push	{r5, r6, r7, lr}
 8000cbe:	0045      	lsls	r5, r0, #1
 8000cc0:	1c0f      	adds	r7, r1, #0
 8000cc2:	0a64      	lsrs	r4, r4, #9
 8000cc4:	0e2d      	lsrs	r5, r5, #24
 8000cc6:	0fc6      	lsrs	r6, r0, #31
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d047      	beq.n	8000d5c <__aeabi_fmul+0xac>
 8000ccc:	2dff      	cmp	r5, #255	; 0xff
 8000cce:	d04d      	beq.n	8000d6c <__aeabi_fmul+0xbc>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	469b      	mov	fp, r3
 8000cd8:	00e4      	lsls	r4, r4, #3
 8000cda:	04c0      	lsls	r0, r0, #19
 8000cdc:	4304      	orrs	r4, r0
 8000cde:	3d7f      	subs	r5, #127	; 0x7f
 8000ce0:	0278      	lsls	r0, r7, #9
 8000ce2:	0a43      	lsrs	r3, r0, #9
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	007a      	lsls	r2, r7, #1
 8000ce8:	0ffb      	lsrs	r3, r7, #31
 8000cea:	4698      	mov	r8, r3
 8000cec:	0e12      	lsrs	r2, r2, #24
 8000cee:	464b      	mov	r3, r9
 8000cf0:	d044      	beq.n	8000d7c <__aeabi_fmul+0xcc>
 8000cf2:	2aff      	cmp	r2, #255	; 0xff
 8000cf4:	d011      	beq.n	8000d1a <__aeabi_fmul+0x6a>
 8000cf6:	00d8      	lsls	r0, r3, #3
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	4303      	orrs	r3, r0
 8000cfe:	4699      	mov	r9, r3
 8000d00:	2000      	movs	r0, #0
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	18ad      	adds	r5, r5, r2
 8000d06:	4647      	mov	r7, r8
 8000d08:	4653      	mov	r3, sl
 8000d0a:	4077      	eors	r7, r6
 8000d0c:	1c69      	adds	r1, r5, #1
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d83f      	bhi.n	8000d92 <__aeabi_fmul+0xe2>
 8000d12:	4a72      	ldr	r2, [pc, #456]	; (8000edc <__aeabi_fmul+0x22c>)
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	58d3      	ldr	r3, [r2, r3]
 8000d18:	469f      	mov	pc, r3
 8000d1a:	35ff      	adds	r5, #255	; 0xff
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_fmul+0x72>
 8000d20:	e079      	b.n	8000e16 <__aeabi_fmul+0x166>
 8000d22:	4652      	mov	r2, sl
 8000d24:	2302      	movs	r3, #2
 8000d26:	431a      	orrs	r2, r3
 8000d28:	4692      	mov	sl, r2
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	e7eb      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000d2e:	4647      	mov	r7, r8
 8000d30:	464c      	mov	r4, r9
 8000d32:	4683      	mov	fp, r0
 8000d34:	465b      	mov	r3, fp
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d028      	beq.n	8000d8c <__aeabi_fmul+0xdc>
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fmul+0x90>
 8000d3e:	e0c6      	b.n	8000ece <__aeabi_fmul+0x21e>
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d14f      	bne.n	8000de4 <__aeabi_fmul+0x134>
 8000d44:	2000      	movs	r0, #0
 8000d46:	2400      	movs	r4, #0
 8000d48:	05c0      	lsls	r0, r0, #23
 8000d4a:	07ff      	lsls	r7, r7, #31
 8000d4c:	4320      	orrs	r0, r4
 8000d4e:	4338      	orrs	r0, r7
 8000d50:	bcf0      	pop	{r4, r5, r6, r7}
 8000d52:	46bb      	mov	fp, r7
 8000d54:	46b2      	mov	sl, r6
 8000d56:	46a9      	mov	r9, r5
 8000d58:	46a0      	mov	r8, r4
 8000d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d5c:	2c00      	cmp	r4, #0
 8000d5e:	d171      	bne.n	8000e44 <__aeabi_fmul+0x194>
 8000d60:	2304      	movs	r3, #4
 8000d62:	469a      	mov	sl, r3
 8000d64:	3b03      	subs	r3, #3
 8000d66:	2500      	movs	r5, #0
 8000d68:	469b      	mov	fp, r3
 8000d6a:	e7b9      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d163      	bne.n	8000e38 <__aeabi_fmul+0x188>
 8000d70:	2308      	movs	r3, #8
 8000d72:	469a      	mov	sl, r3
 8000d74:	3b06      	subs	r3, #6
 8000d76:	25ff      	movs	r5, #255	; 0xff
 8000d78:	469b      	mov	fp, r3
 8000d7a:	e7b1      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d150      	bne.n	8000e22 <__aeabi_fmul+0x172>
 8000d80:	4652      	mov	r2, sl
 8000d82:	3301      	adds	r3, #1
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4692      	mov	sl, r2
 8000d88:	2001      	movs	r0, #1
 8000d8a:	e7bc      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000d8c:	20ff      	movs	r0, #255	; 0xff
 8000d8e:	2400      	movs	r4, #0
 8000d90:	e7da      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000d92:	4648      	mov	r0, r9
 8000d94:	0c26      	lsrs	r6, r4, #16
 8000d96:	0424      	lsls	r4, r4, #16
 8000d98:	0c22      	lsrs	r2, r4, #16
 8000d9a:	0404      	lsls	r4, r0, #16
 8000d9c:	0c24      	lsrs	r4, r4, #16
 8000d9e:	464b      	mov	r3, r9
 8000da0:	0020      	movs	r0, r4
 8000da2:	0c1b      	lsrs	r3, r3, #16
 8000da4:	4350      	muls	r0, r2
 8000da6:	4374      	muls	r4, r6
 8000da8:	435a      	muls	r2, r3
 8000daa:	435e      	muls	r6, r3
 8000dac:	1912      	adds	r2, r2, r4
 8000dae:	0c03      	lsrs	r3, r0, #16
 8000db0:	189b      	adds	r3, r3, r2
 8000db2:	429c      	cmp	r4, r3
 8000db4:	d903      	bls.n	8000dbe <__aeabi_fmul+0x10e>
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	0252      	lsls	r2, r2, #9
 8000dba:	4694      	mov	ip, r2
 8000dbc:	4466      	add	r6, ip
 8000dbe:	0400      	lsls	r0, r0, #16
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	0c00      	lsrs	r0, r0, #16
 8000dc4:	1812      	adds	r2, r2, r0
 8000dc6:	0194      	lsls	r4, r2, #6
 8000dc8:	1e60      	subs	r0, r4, #1
 8000dca:	4184      	sbcs	r4, r0
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	0e92      	lsrs	r2, r2, #26
 8000dd0:	199b      	adds	r3, r3, r6
 8000dd2:	4314      	orrs	r4, r2
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	d572      	bpl.n	8000ec2 <__aeabi_fmul+0x212>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	0863      	lsrs	r3, r4, #1
 8000de0:	4004      	ands	r4, r0
 8000de2:	431c      	orrs	r4, r3
 8000de4:	0008      	movs	r0, r1
 8000de6:	307f      	adds	r0, #127	; 0x7f
 8000de8:	2800      	cmp	r0, #0
 8000dea:	dd3c      	ble.n	8000e66 <__aeabi_fmul+0x1b6>
 8000dec:	0763      	lsls	r3, r4, #29
 8000dee:	d004      	beq.n	8000dfa <__aeabi_fmul+0x14a>
 8000df0:	230f      	movs	r3, #15
 8000df2:	4023      	ands	r3, r4
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fmul+0x14a>
 8000df8:	3404      	adds	r4, #4
 8000dfa:	0123      	lsls	r3, r4, #4
 8000dfc:	d503      	bpl.n	8000e06 <__aeabi_fmul+0x156>
 8000dfe:	3180      	adds	r1, #128	; 0x80
 8000e00:	0008      	movs	r0, r1
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <__aeabi_fmul+0x230>)
 8000e04:	401c      	ands	r4, r3
 8000e06:	28fe      	cmp	r0, #254	; 0xfe
 8000e08:	dcc0      	bgt.n	8000d8c <__aeabi_fmul+0xdc>
 8000e0a:	01a4      	lsls	r4, r4, #6
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	b2c0      	uxtb	r0, r0
 8000e10:	e79a      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000e12:	0037      	movs	r7, r6
 8000e14:	e78e      	b.n	8000d34 <__aeabi_fmul+0x84>
 8000e16:	4652      	mov	r2, sl
 8000e18:	2303      	movs	r3, #3
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	4692      	mov	sl, r2
 8000e1e:	2003      	movs	r0, #3
 8000e20:	e771      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000e22:	4648      	mov	r0, r9
 8000e24:	f002 f9ea 	bl	80031fc <__clzsi2>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	1f43      	subs	r3, r0, #5
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	1a2d      	subs	r5, r5, r0
 8000e30:	4691      	mov	r9, r2
 8000e32:	2000      	movs	r0, #0
 8000e34:	3d76      	subs	r5, #118	; 0x76
 8000e36:	e766      	b.n	8000d06 <__aeabi_fmul+0x56>
 8000e38:	230c      	movs	r3, #12
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	3b09      	subs	r3, #9
 8000e3e:	25ff      	movs	r5, #255	; 0xff
 8000e40:	469b      	mov	fp, r3
 8000e42:	e74d      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000e44:	0020      	movs	r0, r4
 8000e46:	f002 f9d9 	bl	80031fc <__clzsi2>
 8000e4a:	2576      	movs	r5, #118	; 0x76
 8000e4c:	1f43      	subs	r3, r0, #5
 8000e4e:	409c      	lsls	r4, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	426d      	negs	r5, r5
 8000e54:	469a      	mov	sl, r3
 8000e56:	469b      	mov	fp, r3
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	e741      	b.n	8000ce0 <__aeabi_fmul+0x30>
 8000e5c:	2480      	movs	r4, #128	; 0x80
 8000e5e:	2700      	movs	r7, #0
 8000e60:	20ff      	movs	r0, #255	; 0xff
 8000e62:	03e4      	lsls	r4, r4, #15
 8000e64:	e770      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000e66:	2301      	movs	r3, #1
 8000e68:	1a1b      	subs	r3, r3, r0
 8000e6a:	2b1b      	cmp	r3, #27
 8000e6c:	dd00      	ble.n	8000e70 <__aeabi_fmul+0x1c0>
 8000e6e:	e769      	b.n	8000d44 <__aeabi_fmul+0x94>
 8000e70:	319e      	adds	r1, #158	; 0x9e
 8000e72:	0020      	movs	r0, r4
 8000e74:	408c      	lsls	r4, r1
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	1e63      	subs	r3, r4, #1
 8000e7a:	419c      	sbcs	r4, r3
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	0763      	lsls	r3, r4, #29
 8000e80:	d004      	beq.n	8000e8c <__aeabi_fmul+0x1dc>
 8000e82:	230f      	movs	r3, #15
 8000e84:	4023      	ands	r3, r4
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fmul+0x1dc>
 8000e8a:	3404      	adds	r4, #4
 8000e8c:	0163      	lsls	r3, r4, #5
 8000e8e:	d51a      	bpl.n	8000ec6 <__aeabi_fmul+0x216>
 8000e90:	2001      	movs	r0, #1
 8000e92:	2400      	movs	r4, #0
 8000e94:	e758      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000e96:	2080      	movs	r0, #128	; 0x80
 8000e98:	03c0      	lsls	r0, r0, #15
 8000e9a:	4204      	tst	r4, r0
 8000e9c:	d009      	beq.n	8000eb2 <__aeabi_fmul+0x202>
 8000e9e:	464b      	mov	r3, r9
 8000ea0:	4203      	tst	r3, r0
 8000ea2:	d106      	bne.n	8000eb2 <__aeabi_fmul+0x202>
 8000ea4:	464c      	mov	r4, r9
 8000ea6:	4304      	orrs	r4, r0
 8000ea8:	0264      	lsls	r4, r4, #9
 8000eaa:	4647      	mov	r7, r8
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	0a64      	lsrs	r4, r4, #9
 8000eb0:	e74a      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000eb2:	2080      	movs	r0, #128	; 0x80
 8000eb4:	03c0      	lsls	r0, r0, #15
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	0264      	lsls	r4, r4, #9
 8000eba:	0037      	movs	r7, r6
 8000ebc:	20ff      	movs	r0, #255	; 0xff
 8000ebe:	0a64      	lsrs	r4, r4, #9
 8000ec0:	e742      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000ec2:	0029      	movs	r1, r5
 8000ec4:	e78e      	b.n	8000de4 <__aeabi_fmul+0x134>
 8000ec6:	01a4      	lsls	r4, r4, #6
 8000ec8:	2000      	movs	r0, #0
 8000eca:	0a64      	lsrs	r4, r4, #9
 8000ecc:	e73c      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000ece:	2080      	movs	r0, #128	; 0x80
 8000ed0:	03c0      	lsls	r0, r0, #15
 8000ed2:	4304      	orrs	r4, r0
 8000ed4:	0264      	lsls	r4, r4, #9
 8000ed6:	20ff      	movs	r0, #255	; 0xff
 8000ed8:	0a64      	lsrs	r4, r4, #9
 8000eda:	e735      	b.n	8000d48 <__aeabi_fmul+0x98>
 8000edc:	0800fa58 	.word	0x0800fa58
 8000ee0:	f7ffffff 	.word	0xf7ffffff

08000ee4 <__aeabi_fsub>:
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	4646      	mov	r6, r8
 8000ee8:	46d6      	mov	lr, sl
 8000eea:	464f      	mov	r7, r9
 8000eec:	0243      	lsls	r3, r0, #9
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	00da      	lsls	r2, r3, #3
 8000ef2:	4694      	mov	ip, r2
 8000ef4:	024a      	lsls	r2, r1, #9
 8000ef6:	b5c0      	push	{r6, r7, lr}
 8000ef8:	0044      	lsls	r4, r0, #1
 8000efa:	0a56      	lsrs	r6, r2, #9
 8000efc:	1c05      	adds	r5, r0, #0
 8000efe:	46b0      	mov	r8, r6
 8000f00:	0e24      	lsrs	r4, r4, #24
 8000f02:	004e      	lsls	r6, r1, #1
 8000f04:	0992      	lsrs	r2, r2, #6
 8000f06:	001f      	movs	r7, r3
 8000f08:	0020      	movs	r0, r4
 8000f0a:	4692      	mov	sl, r2
 8000f0c:	0fed      	lsrs	r5, r5, #31
 8000f0e:	0e36      	lsrs	r6, r6, #24
 8000f10:	0fc9      	lsrs	r1, r1, #31
 8000f12:	2eff      	cmp	r6, #255	; 0xff
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x34>
 8000f16:	e07f      	b.n	8001018 <__aeabi_fsub+0x134>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4051      	eors	r1, r2
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d051      	beq.n	8000fc4 <__aeabi_fsub+0xe0>
 8000f20:	1ba2      	subs	r2, r4, r6
 8000f22:	4691      	mov	r9, r2
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0x46>
 8000f28:	e07e      	b.n	8001028 <__aeabi_fsub+0x144>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x4c>
 8000f2e:	e099      	b.n	8001064 <__aeabi_fsub+0x180>
 8000f30:	2cff      	cmp	r4, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x52>
 8000f34:	e08c      	b.n	8001050 <__aeabi_fsub+0x16c>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4652      	mov	r2, sl
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4692      	mov	sl, r2
 8000f40:	464a      	mov	r2, r9
 8000f42:	2301      	movs	r3, #1
 8000f44:	2a1b      	cmp	r2, #27
 8000f46:	dc08      	bgt.n	8000f5a <__aeabi_fsub+0x76>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	40d3      	lsrs	r3, r2
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4652      	mov	r2, sl
 8000f52:	408a      	lsls	r2, r1
 8000f54:	1e51      	subs	r1, r2, #1
 8000f56:	418a      	sbcs	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	015a      	lsls	r2, r3, #5
 8000f60:	d400      	bmi.n	8000f64 <__aeabi_fsub+0x80>
 8000f62:	e0f3      	b.n	800114c <__aeabi_fsub+0x268>
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	099e      	lsrs	r6, r3, #6
 8000f68:	0030      	movs	r0, r6
 8000f6a:	f002 f947 	bl	80031fc <__clzsi2>
 8000f6e:	3805      	subs	r0, #5
 8000f70:	4086      	lsls	r6, r0
 8000f72:	4284      	cmp	r4, r0
 8000f74:	dd00      	ble.n	8000f78 <__aeabi_fsub+0x94>
 8000f76:	e0f7      	b.n	8001168 <__aeabi_fsub+0x284>
 8000f78:	0032      	movs	r2, r6
 8000f7a:	1b04      	subs	r4, r0, r4
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	3401      	adds	r4, #1
 8000f80:	40e2      	lsrs	r2, r4
 8000f82:	1b04      	subs	r4, r0, r4
 8000f84:	40a6      	lsls	r6, r4
 8000f86:	0033      	movs	r3, r6
 8000f88:	1e5e      	subs	r6, r3, #1
 8000f8a:	41b3      	sbcs	r3, r6
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	075a      	lsls	r2, r3, #29
 8000f92:	d004      	beq.n	8000f9e <__aeabi_fsub+0xba>
 8000f94:	220f      	movs	r2, #15
 8000f96:	401a      	ands	r2, r3
 8000f98:	2a04      	cmp	r2, #4
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fsub+0xba>
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	015a      	lsls	r2, r3, #5
 8000fa0:	d400      	bmi.n	8000fa4 <__aeabi_fsub+0xc0>
 8000fa2:	e0d6      	b.n	8001152 <__aeabi_fsub+0x26e>
 8000fa4:	1c62      	adds	r2, r4, #1
 8000fa6:	2cfe      	cmp	r4, #254	; 0xfe
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0xc8>
 8000faa:	e0da      	b.n	8001162 <__aeabi_fsub+0x27e>
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	0a5f      	lsrs	r7, r3, #9
 8000fb0:	b2d0      	uxtb	r0, r2
 8000fb2:	05c0      	lsls	r0, r0, #23
 8000fb4:	4338      	orrs	r0, r7
 8000fb6:	07ed      	lsls	r5, r5, #31
 8000fb8:	4328      	orrs	r0, r5
 8000fba:	bce0      	pop	{r5, r6, r7}
 8000fbc:	46ba      	mov	sl, r7
 8000fbe:	46b1      	mov	r9, r6
 8000fc0:	46a8      	mov	r8, r5
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc4:	1ba2      	subs	r2, r4, r6
 8000fc6:	4691      	mov	r9, r2
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	dd63      	ble.n	8001094 <__aeabi_fsub+0x1b0>
 8000fcc:	2e00      	cmp	r6, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0xee>
 8000fd0:	e099      	b.n	8001106 <__aeabi_fsub+0x222>
 8000fd2:	2cff      	cmp	r4, #255	; 0xff
 8000fd4:	d03c      	beq.n	8001050 <__aeabi_fsub+0x16c>
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	4652      	mov	r2, sl
 8000fda:	04db      	lsls	r3, r3, #19
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4692      	mov	sl, r2
 8000fe0:	464a      	mov	r2, r9
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2a1b      	cmp	r2, #27
 8000fe6:	dc08      	bgt.n	8000ffa <__aeabi_fsub+0x116>
 8000fe8:	4653      	mov	r3, sl
 8000fea:	2120      	movs	r1, #32
 8000fec:	40d3      	lsrs	r3, r2
 8000fee:	1a89      	subs	r1, r1, r2
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	408a      	lsls	r2, r1
 8000ff4:	1e51      	subs	r1, r2, #1
 8000ff6:	418a      	sbcs	r2, r1
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	015a      	lsls	r2, r3, #5
 8000ffe:	d400      	bmi.n	8001002 <__aeabi_fsub+0x11e>
 8001000:	e0a4      	b.n	800114c <__aeabi_fsub+0x268>
 8001002:	3401      	adds	r4, #1
 8001004:	2cff      	cmp	r4, #255	; 0xff
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x126>
 8001008:	e0ab      	b.n	8001162 <__aeabi_fsub+0x27e>
 800100a:	2201      	movs	r2, #1
 800100c:	4997      	ldr	r1, [pc, #604]	; (800126c <__aeabi_fsub+0x388>)
 800100e:	401a      	ands	r2, r3
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	400b      	ands	r3, r1
 8001014:	4313      	orrs	r3, r2
 8001016:	e7bb      	b.n	8000f90 <__aeabi_fsub+0xac>
 8001018:	2a00      	cmp	r2, #0
 800101a:	d032      	beq.n	8001082 <__aeabi_fsub+0x19e>
 800101c:	428d      	cmp	r5, r1
 800101e:	d035      	beq.n	800108c <__aeabi_fsub+0x1a8>
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	4252      	negs	r2, r2
 8001024:	4691      	mov	r9, r2
 8001026:	44a1      	add	r9, r4
 8001028:	464a      	mov	r2, r9
 800102a:	2a00      	cmp	r2, #0
 800102c:	d051      	beq.n	80010d2 <__aeabi_fsub+0x1ee>
 800102e:	1b30      	subs	r0, r6, r4
 8001030:	2c00      	cmp	r4, #0
 8001032:	d000      	beq.n	8001036 <__aeabi_fsub+0x152>
 8001034:	e09c      	b.n	8001170 <__aeabi_fsub+0x28c>
 8001036:	4663      	mov	r3, ip
 8001038:	2b00      	cmp	r3, #0
 800103a:	d100      	bne.n	800103e <__aeabi_fsub+0x15a>
 800103c:	e0df      	b.n	80011fe <__aeabi_fsub+0x31a>
 800103e:	3801      	subs	r0, #1
 8001040:	2800      	cmp	r0, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x162>
 8001044:	e0f7      	b.n	8001236 <__aeabi_fsub+0x352>
 8001046:	2eff      	cmp	r6, #255	; 0xff
 8001048:	d000      	beq.n	800104c <__aeabi_fsub+0x168>
 800104a:	e099      	b.n	8001180 <__aeabi_fsub+0x29c>
 800104c:	000d      	movs	r5, r1
 800104e:	4643      	mov	r3, r8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x172>
 8001054:	e085      	b.n	8001162 <__aeabi_fsub+0x27e>
 8001056:	2780      	movs	r7, #128	; 0x80
 8001058:	03ff      	lsls	r7, r7, #15
 800105a:	431f      	orrs	r7, r3
 800105c:	027f      	lsls	r7, r7, #9
 800105e:	20ff      	movs	r0, #255	; 0xff
 8001060:	0a7f      	lsrs	r7, r7, #9
 8001062:	e7a6      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001064:	4652      	mov	r2, sl
 8001066:	2a00      	cmp	r2, #0
 8001068:	d074      	beq.n	8001154 <__aeabi_fsub+0x270>
 800106a:	2201      	movs	r2, #1
 800106c:	4252      	negs	r2, r2
 800106e:	4690      	mov	r8, r2
 8001070:	44c1      	add	r9, r8
 8001072:	464a      	mov	r2, r9
 8001074:	2a00      	cmp	r2, #0
 8001076:	d100      	bne.n	800107a <__aeabi_fsub+0x196>
 8001078:	e0c8      	b.n	800120c <__aeabi_fsub+0x328>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x19c>
 800107e:	e75f      	b.n	8000f40 <__aeabi_fsub+0x5c>
 8001080:	e7e6      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001082:	2201      	movs	r2, #1
 8001084:	4051      	eors	r1, r2
 8001086:	42a9      	cmp	r1, r5
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x1a8>
 800108a:	e749      	b.n	8000f20 <__aeabi_fsub+0x3c>
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	4252      	negs	r2, r2
 8001090:	4691      	mov	r9, r2
 8001092:	44a1      	add	r9, r4
 8001094:	464a      	mov	r2, r9
 8001096:	2a00      	cmp	r2, #0
 8001098:	d043      	beq.n	8001122 <__aeabi_fsub+0x23e>
 800109a:	1b31      	subs	r1, r6, r4
 800109c:	2c00      	cmp	r4, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x1be>
 80010a0:	e08c      	b.n	80011bc <__aeabi_fsub+0x2d8>
 80010a2:	2eff      	cmp	r6, #255	; 0xff
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x1c4>
 80010a6:	e092      	b.n	80011ce <__aeabi_fsub+0x2ea>
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	4662      	mov	r2, ip
 80010ac:	04db      	lsls	r3, r3, #19
 80010ae:	431a      	orrs	r2, r3
 80010b0:	4694      	mov	ip, r2
 80010b2:	2301      	movs	r3, #1
 80010b4:	291b      	cmp	r1, #27
 80010b6:	dc09      	bgt.n	80010cc <__aeabi_fsub+0x1e8>
 80010b8:	2020      	movs	r0, #32
 80010ba:	4663      	mov	r3, ip
 80010bc:	4662      	mov	r2, ip
 80010be:	40cb      	lsrs	r3, r1
 80010c0:	1a41      	subs	r1, r0, r1
 80010c2:	408a      	lsls	r2, r1
 80010c4:	0011      	movs	r1, r2
 80010c6:	1e48      	subs	r0, r1, #1
 80010c8:	4181      	sbcs	r1, r0
 80010ca:	430b      	orrs	r3, r1
 80010cc:	0034      	movs	r4, r6
 80010ce:	4453      	add	r3, sl
 80010d0:	e794      	b.n	8000ffc <__aeabi_fsub+0x118>
 80010d2:	22fe      	movs	r2, #254	; 0xfe
 80010d4:	1c66      	adds	r6, r4, #1
 80010d6:	4232      	tst	r2, r6
 80010d8:	d164      	bne.n	80011a4 <__aeabi_fsub+0x2c0>
 80010da:	2c00      	cmp	r4, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_fsub+0x1fc>
 80010de:	e082      	b.n	80011e6 <__aeabi_fsub+0x302>
 80010e0:	4663      	mov	r3, ip
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x204>
 80010e6:	e0ab      	b.n	8001240 <__aeabi_fsub+0x35c>
 80010e8:	4653      	mov	r3, sl
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x20c>
 80010ee:	e760      	b.n	8000fb2 <__aeabi_fsub+0xce>
 80010f0:	4663      	mov	r3, ip
 80010f2:	4652      	mov	r2, sl
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	015a      	lsls	r2, r3, #5
 80010f8:	d400      	bmi.n	80010fc <__aeabi_fsub+0x218>
 80010fa:	e0aa      	b.n	8001252 <__aeabi_fsub+0x36e>
 80010fc:	4663      	mov	r3, ip
 80010fe:	4652      	mov	r2, sl
 8001100:	000d      	movs	r5, r1
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	e744      	b.n	8000f90 <__aeabi_fsub+0xac>
 8001106:	4652      	mov	r2, sl
 8001108:	2a00      	cmp	r2, #0
 800110a:	d023      	beq.n	8001154 <__aeabi_fsub+0x270>
 800110c:	2201      	movs	r2, #1
 800110e:	4252      	negs	r2, r2
 8001110:	4690      	mov	r8, r2
 8001112:	44c1      	add	r9, r8
 8001114:	464a      	mov	r2, r9
 8001116:	2a00      	cmp	r2, #0
 8001118:	d075      	beq.n	8001206 <__aeabi_fsub+0x322>
 800111a:	2cff      	cmp	r4, #255	; 0xff
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x23c>
 800111e:	e75f      	b.n	8000fe0 <__aeabi_fsub+0xfc>
 8001120:	e796      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001122:	26fe      	movs	r6, #254	; 0xfe
 8001124:	3401      	adds	r4, #1
 8001126:	4226      	tst	r6, r4
 8001128:	d153      	bne.n	80011d2 <__aeabi_fsub+0x2ee>
 800112a:	2800      	cmp	r0, #0
 800112c:	d172      	bne.n	8001214 <__aeabi_fsub+0x330>
 800112e:	4663      	mov	r3, ip
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_fsub+0x252>
 8001134:	e093      	b.n	800125e <__aeabi_fsub+0x37a>
 8001136:	4653      	mov	r3, sl
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x25a>
 800113c:	e739      	b.n	8000fb2 <__aeabi_fsub+0xce>
 800113e:	4463      	add	r3, ip
 8001140:	2400      	movs	r4, #0
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	d502      	bpl.n	800114c <__aeabi_fsub+0x268>
 8001146:	4a4a      	ldr	r2, [pc, #296]	; (8001270 <__aeabi_fsub+0x38c>)
 8001148:	3401      	adds	r4, #1
 800114a:	4013      	ands	r3, r2
 800114c:	075a      	lsls	r2, r3, #29
 800114e:	d000      	beq.n	8001152 <__aeabi_fsub+0x26e>
 8001150:	e720      	b.n	8000f94 <__aeabi_fsub+0xb0>
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	2cff      	cmp	r4, #255	; 0xff
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x276>
 8001158:	e77a      	b.n	8001050 <__aeabi_fsub+0x16c>
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	0a5f      	lsrs	r7, r3, #9
 800115e:	b2e0      	uxtb	r0, r4
 8001160:	e727      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001162:	20ff      	movs	r0, #255	; 0xff
 8001164:	2700      	movs	r7, #0
 8001166:	e724      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <__aeabi_fsub+0x38c>)
 800116a:	1a24      	subs	r4, r4, r0
 800116c:	4033      	ands	r3, r6
 800116e:	e70f      	b.n	8000f90 <__aeabi_fsub+0xac>
 8001170:	2eff      	cmp	r6, #255	; 0xff
 8001172:	d100      	bne.n	8001176 <__aeabi_fsub+0x292>
 8001174:	e76a      	b.n	800104c <__aeabi_fsub+0x168>
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	4662      	mov	r2, ip
 800117a:	04db      	lsls	r3, r3, #19
 800117c:	431a      	orrs	r2, r3
 800117e:	4694      	mov	ip, r2
 8001180:	2301      	movs	r3, #1
 8001182:	281b      	cmp	r0, #27
 8001184:	dc09      	bgt.n	800119a <__aeabi_fsub+0x2b6>
 8001186:	2420      	movs	r4, #32
 8001188:	4663      	mov	r3, ip
 800118a:	4662      	mov	r2, ip
 800118c:	40c3      	lsrs	r3, r0
 800118e:	1a20      	subs	r0, r4, r0
 8001190:	4082      	lsls	r2, r0
 8001192:	0010      	movs	r0, r2
 8001194:	1e44      	subs	r4, r0, #1
 8001196:	41a0      	sbcs	r0, r4
 8001198:	4303      	orrs	r3, r0
 800119a:	4652      	mov	r2, sl
 800119c:	000d      	movs	r5, r1
 800119e:	0034      	movs	r4, r6
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	e6dc      	b.n	8000f5e <__aeabi_fsub+0x7a>
 80011a4:	4663      	mov	r3, ip
 80011a6:	4652      	mov	r2, sl
 80011a8:	1a9e      	subs	r6, r3, r2
 80011aa:	0173      	lsls	r3, r6, #5
 80011ac:	d417      	bmi.n	80011de <__aeabi_fsub+0x2fa>
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d000      	beq.n	80011b4 <__aeabi_fsub+0x2d0>
 80011b2:	e6d9      	b.n	8000f68 <__aeabi_fsub+0x84>
 80011b4:	2500      	movs	r5, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	2700      	movs	r7, #0
 80011ba:	e6fa      	b.n	8000fb2 <__aeabi_fsub+0xce>
 80011bc:	4663      	mov	r3, ip
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d044      	beq.n	800124c <__aeabi_fsub+0x368>
 80011c2:	3901      	subs	r1, #1
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d04c      	beq.n	8001262 <__aeabi_fsub+0x37e>
 80011c8:	2eff      	cmp	r6, #255	; 0xff
 80011ca:	d000      	beq.n	80011ce <__aeabi_fsub+0x2ea>
 80011cc:	e771      	b.n	80010b2 <__aeabi_fsub+0x1ce>
 80011ce:	4643      	mov	r3, r8
 80011d0:	e73e      	b.n	8001050 <__aeabi_fsub+0x16c>
 80011d2:	2cff      	cmp	r4, #255	; 0xff
 80011d4:	d0c5      	beq.n	8001162 <__aeabi_fsub+0x27e>
 80011d6:	4652      	mov	r2, sl
 80011d8:	4462      	add	r2, ip
 80011da:	0853      	lsrs	r3, r2, #1
 80011dc:	e7b6      	b.n	800114c <__aeabi_fsub+0x268>
 80011de:	4663      	mov	r3, ip
 80011e0:	000d      	movs	r5, r1
 80011e2:	1ad6      	subs	r6, r2, r3
 80011e4:	e6c0      	b.n	8000f68 <__aeabi_fsub+0x84>
 80011e6:	4662      	mov	r2, ip
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d116      	bne.n	800121a <__aeabi_fsub+0x336>
 80011ec:	4653      	mov	r3, sl
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d000      	beq.n	80011f4 <__aeabi_fsub+0x310>
 80011f2:	e72b      	b.n	800104c <__aeabi_fsub+0x168>
 80011f4:	2780      	movs	r7, #128	; 0x80
 80011f6:	2500      	movs	r5, #0
 80011f8:	20ff      	movs	r0, #255	; 0xff
 80011fa:	03ff      	lsls	r7, r7, #15
 80011fc:	e6d9      	b.n	8000fb2 <__aeabi_fsub+0xce>
 80011fe:	000d      	movs	r5, r1
 8001200:	4643      	mov	r3, r8
 8001202:	0034      	movs	r4, r6
 8001204:	e7a6      	b.n	8001154 <__aeabi_fsub+0x270>
 8001206:	4653      	mov	r3, sl
 8001208:	4463      	add	r3, ip
 800120a:	e6f7      	b.n	8000ffc <__aeabi_fsub+0x118>
 800120c:	4663      	mov	r3, ip
 800120e:	4652      	mov	r2, sl
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	e6a4      	b.n	8000f5e <__aeabi_fsub+0x7a>
 8001214:	4662      	mov	r2, ip
 8001216:	2a00      	cmp	r2, #0
 8001218:	d0d9      	beq.n	80011ce <__aeabi_fsub+0x2ea>
 800121a:	4652      	mov	r2, sl
 800121c:	2a00      	cmp	r2, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x33e>
 8001220:	e716      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	03d2      	lsls	r2, r2, #15
 8001226:	4213      	tst	r3, r2
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x348>
 800122a:	e711      	b.n	8001050 <__aeabi_fsub+0x16c>
 800122c:	4640      	mov	r0, r8
 800122e:	4210      	tst	r0, r2
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0x350>
 8001232:	e70d      	b.n	8001050 <__aeabi_fsub+0x16c>
 8001234:	e70a      	b.n	800104c <__aeabi_fsub+0x168>
 8001236:	4652      	mov	r2, sl
 8001238:	000d      	movs	r5, r1
 800123a:	0034      	movs	r4, r6
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	e68e      	b.n	8000f5e <__aeabi_fsub+0x7a>
 8001240:	4653      	mov	r3, sl
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <__aeabi_fsub+0x374>
 8001246:	000d      	movs	r5, r1
 8001248:	4647      	mov	r7, r8
 800124a:	e6b2      	b.n	8000fb2 <__aeabi_fsub+0xce>
 800124c:	4643      	mov	r3, r8
 800124e:	0034      	movs	r4, r6
 8001250:	e780      	b.n	8001154 <__aeabi_fsub+0x270>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x374>
 8001256:	e779      	b.n	800114c <__aeabi_fsub+0x268>
 8001258:	2500      	movs	r5, #0
 800125a:	2700      	movs	r7, #0
 800125c:	e6a9      	b.n	8000fb2 <__aeabi_fsub+0xce>
 800125e:	4647      	mov	r7, r8
 8001260:	e6a7      	b.n	8000fb2 <__aeabi_fsub+0xce>
 8001262:	4653      	mov	r3, sl
 8001264:	0034      	movs	r4, r6
 8001266:	4463      	add	r3, ip
 8001268:	e6c8      	b.n	8000ffc <__aeabi_fsub+0x118>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	7dffffff 	.word	0x7dffffff
 8001270:	fbffffff 	.word	0xfbffffff

08001274 <__aeabi_f2iz>:
 8001274:	0241      	lsls	r1, r0, #9
 8001276:	0042      	lsls	r2, r0, #1
 8001278:	0fc3      	lsrs	r3, r0, #31
 800127a:	0a49      	lsrs	r1, r1, #9
 800127c:	2000      	movs	r0, #0
 800127e:	0e12      	lsrs	r2, r2, #24
 8001280:	2a7e      	cmp	r2, #126	; 0x7e
 8001282:	d903      	bls.n	800128c <__aeabi_f2iz+0x18>
 8001284:	2a9d      	cmp	r2, #157	; 0x9d
 8001286:	d902      	bls.n	800128e <__aeabi_f2iz+0x1a>
 8001288:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <__aeabi_f2iz+0x3c>)
 800128a:	1898      	adds	r0, r3, r2
 800128c:	4770      	bx	lr
 800128e:	2080      	movs	r0, #128	; 0x80
 8001290:	0400      	lsls	r0, r0, #16
 8001292:	4301      	orrs	r1, r0
 8001294:	2a95      	cmp	r2, #149	; 0x95
 8001296:	dc07      	bgt.n	80012a8 <__aeabi_f2iz+0x34>
 8001298:	2096      	movs	r0, #150	; 0x96
 800129a:	1a82      	subs	r2, r0, r2
 800129c:	40d1      	lsrs	r1, r2
 800129e:	4248      	negs	r0, r1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f3      	bne.n	800128c <__aeabi_f2iz+0x18>
 80012a4:	0008      	movs	r0, r1
 80012a6:	e7f1      	b.n	800128c <__aeabi_f2iz+0x18>
 80012a8:	3a96      	subs	r2, #150	; 0x96
 80012aa:	4091      	lsls	r1, r2
 80012ac:	e7f7      	b.n	800129e <__aeabi_f2iz+0x2a>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	7fffffff 	.word	0x7fffffff

080012b4 <__aeabi_i2f>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d013      	beq.n	80012e2 <__aeabi_i2f+0x2e>
 80012ba:	17c3      	asrs	r3, r0, #31
 80012bc:	18c5      	adds	r5, r0, r3
 80012be:	405d      	eors	r5, r3
 80012c0:	0fc4      	lsrs	r4, r0, #31
 80012c2:	0028      	movs	r0, r5
 80012c4:	f001 ff9a 	bl	80031fc <__clzsi2>
 80012c8:	239e      	movs	r3, #158	; 0x9e
 80012ca:	0001      	movs	r1, r0
 80012cc:	1a1b      	subs	r3, r3, r0
 80012ce:	2b96      	cmp	r3, #150	; 0x96
 80012d0:	dc0f      	bgt.n	80012f2 <__aeabi_i2f+0x3e>
 80012d2:	2808      	cmp	r0, #8
 80012d4:	dd01      	ble.n	80012da <__aeabi_i2f+0x26>
 80012d6:	3908      	subs	r1, #8
 80012d8:	408d      	lsls	r5, r1
 80012da:	026d      	lsls	r5, r5, #9
 80012dc:	0a6d      	lsrs	r5, r5, #9
 80012de:	b2d8      	uxtb	r0, r3
 80012e0:	e002      	b.n	80012e8 <__aeabi_i2f+0x34>
 80012e2:	2400      	movs	r4, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	2500      	movs	r5, #0
 80012e8:	05c0      	lsls	r0, r0, #23
 80012ea:	4328      	orrs	r0, r5
 80012ec:	07e4      	lsls	r4, r4, #31
 80012ee:	4320      	orrs	r0, r4
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
 80012f2:	2b99      	cmp	r3, #153	; 0x99
 80012f4:	dd0b      	ble.n	800130e <__aeabi_i2f+0x5a>
 80012f6:	2205      	movs	r2, #5
 80012f8:	002e      	movs	r6, r5
 80012fa:	1a12      	subs	r2, r2, r0
 80012fc:	40d6      	lsrs	r6, r2
 80012fe:	0002      	movs	r2, r0
 8001300:	321b      	adds	r2, #27
 8001302:	4095      	lsls	r5, r2
 8001304:	0028      	movs	r0, r5
 8001306:	1e45      	subs	r5, r0, #1
 8001308:	41a8      	sbcs	r0, r5
 800130a:	0035      	movs	r5, r6
 800130c:	4305      	orrs	r5, r0
 800130e:	2905      	cmp	r1, #5
 8001310:	dd01      	ble.n	8001316 <__aeabi_i2f+0x62>
 8001312:	1f4a      	subs	r2, r1, #5
 8001314:	4095      	lsls	r5, r2
 8001316:	002a      	movs	r2, r5
 8001318:	4e08      	ldr	r6, [pc, #32]	; (800133c <__aeabi_i2f+0x88>)
 800131a:	4032      	ands	r2, r6
 800131c:	0768      	lsls	r0, r5, #29
 800131e:	d009      	beq.n	8001334 <__aeabi_i2f+0x80>
 8001320:	200f      	movs	r0, #15
 8001322:	4028      	ands	r0, r5
 8001324:	2804      	cmp	r0, #4
 8001326:	d005      	beq.n	8001334 <__aeabi_i2f+0x80>
 8001328:	3204      	adds	r2, #4
 800132a:	0150      	lsls	r0, r2, #5
 800132c:	d502      	bpl.n	8001334 <__aeabi_i2f+0x80>
 800132e:	239f      	movs	r3, #159	; 0x9f
 8001330:	4032      	ands	r2, r6
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	0192      	lsls	r2, r2, #6
 8001336:	0a55      	lsrs	r5, r2, #9
 8001338:	b2d8      	uxtb	r0, r3
 800133a:	e7d5      	b.n	80012e8 <__aeabi_i2f+0x34>
 800133c:	fbffffff 	.word	0xfbffffff

08001340 <__aeabi_ui2f>:
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	1e05      	subs	r5, r0, #0
 8001344:	d00e      	beq.n	8001364 <__aeabi_ui2f+0x24>
 8001346:	f001 ff59 	bl	80031fc <__clzsi2>
 800134a:	239e      	movs	r3, #158	; 0x9e
 800134c:	0004      	movs	r4, r0
 800134e:	1a1b      	subs	r3, r3, r0
 8001350:	2b96      	cmp	r3, #150	; 0x96
 8001352:	dc0c      	bgt.n	800136e <__aeabi_ui2f+0x2e>
 8001354:	2808      	cmp	r0, #8
 8001356:	dd01      	ble.n	800135c <__aeabi_ui2f+0x1c>
 8001358:	3c08      	subs	r4, #8
 800135a:	40a5      	lsls	r5, r4
 800135c:	026d      	lsls	r5, r5, #9
 800135e:	0a6d      	lsrs	r5, r5, #9
 8001360:	b2d8      	uxtb	r0, r3
 8001362:	e001      	b.n	8001368 <__aeabi_ui2f+0x28>
 8001364:	2000      	movs	r0, #0
 8001366:	2500      	movs	r5, #0
 8001368:	05c0      	lsls	r0, r0, #23
 800136a:	4328      	orrs	r0, r5
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	2b99      	cmp	r3, #153	; 0x99
 8001370:	dd09      	ble.n	8001386 <__aeabi_ui2f+0x46>
 8001372:	0002      	movs	r2, r0
 8001374:	0029      	movs	r1, r5
 8001376:	321b      	adds	r2, #27
 8001378:	4091      	lsls	r1, r2
 800137a:	1e4a      	subs	r2, r1, #1
 800137c:	4191      	sbcs	r1, r2
 800137e:	2205      	movs	r2, #5
 8001380:	1a12      	subs	r2, r2, r0
 8001382:	40d5      	lsrs	r5, r2
 8001384:	430d      	orrs	r5, r1
 8001386:	2c05      	cmp	r4, #5
 8001388:	dd01      	ble.n	800138e <__aeabi_ui2f+0x4e>
 800138a:	1f62      	subs	r2, r4, #5
 800138c:	4095      	lsls	r5, r2
 800138e:	0029      	movs	r1, r5
 8001390:	4e08      	ldr	r6, [pc, #32]	; (80013b4 <__aeabi_ui2f+0x74>)
 8001392:	4031      	ands	r1, r6
 8001394:	076a      	lsls	r2, r5, #29
 8001396:	d009      	beq.n	80013ac <__aeabi_ui2f+0x6c>
 8001398:	200f      	movs	r0, #15
 800139a:	4028      	ands	r0, r5
 800139c:	2804      	cmp	r0, #4
 800139e:	d005      	beq.n	80013ac <__aeabi_ui2f+0x6c>
 80013a0:	3104      	adds	r1, #4
 80013a2:	014a      	lsls	r2, r1, #5
 80013a4:	d502      	bpl.n	80013ac <__aeabi_ui2f+0x6c>
 80013a6:	239f      	movs	r3, #159	; 0x9f
 80013a8:	4031      	ands	r1, r6
 80013aa:	1b1b      	subs	r3, r3, r4
 80013ac:	0189      	lsls	r1, r1, #6
 80013ae:	0a4d      	lsrs	r5, r1, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e7d9      	b.n	8001368 <__aeabi_ui2f+0x28>
 80013b4:	fbffffff 	.word	0xfbffffff

080013b8 <__aeabi_dadd>:
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	464f      	mov	r7, r9
 80013bc:	46d6      	mov	lr, sl
 80013be:	4646      	mov	r6, r8
 80013c0:	000d      	movs	r5, r1
 80013c2:	0001      	movs	r1, r0
 80013c4:	0018      	movs	r0, r3
 80013c6:	b5c0      	push	{r6, r7, lr}
 80013c8:	0017      	movs	r7, r2
 80013ca:	032b      	lsls	r3, r5, #12
 80013cc:	0a5a      	lsrs	r2, r3, #9
 80013ce:	0f4b      	lsrs	r3, r1, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	00ca      	lsls	r2, r1, #3
 80013d4:	4691      	mov	r9, r2
 80013d6:	0302      	lsls	r2, r0, #12
 80013d8:	006e      	lsls	r6, r5, #1
 80013da:	0041      	lsls	r1, r0, #1
 80013dc:	0a52      	lsrs	r2, r2, #9
 80013de:	0fec      	lsrs	r4, r5, #31
 80013e0:	0f7d      	lsrs	r5, r7, #29
 80013e2:	4315      	orrs	r5, r2
 80013e4:	0d76      	lsrs	r6, r6, #21
 80013e6:	0d49      	lsrs	r1, r1, #21
 80013e8:	0fc0      	lsrs	r0, r0, #31
 80013ea:	4682      	mov	sl, r0
 80013ec:	46ac      	mov	ip, r5
 80013ee:	00ff      	lsls	r7, r7, #3
 80013f0:	1a72      	subs	r2, r6, r1
 80013f2:	4284      	cmp	r4, r0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dadd+0x40>
 80013f6:	e098      	b.n	800152a <__aeabi_dadd+0x172>
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	dc00      	bgt.n	80013fe <__aeabi_dadd+0x46>
 80013fc:	e081      	b.n	8001502 <__aeabi_dadd+0x14a>
 80013fe:	2900      	cmp	r1, #0
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x4c>
 8001402:	e0b6      	b.n	8001572 <__aeabi_dadd+0x1ba>
 8001404:	49c9      	ldr	r1, [pc, #804]	; (800172c <__aeabi_dadd+0x374>)
 8001406:	428e      	cmp	r6, r1
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x54>
 800140a:	e172      	b.n	80016f2 <__aeabi_dadd+0x33a>
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0028      	movs	r0, r5
 8001410:	0409      	lsls	r1, r1, #16
 8001412:	4308      	orrs	r0, r1
 8001414:	4684      	mov	ip, r0
 8001416:	2a38      	cmp	r2, #56	; 0x38
 8001418:	dd00      	ble.n	800141c <__aeabi_dadd+0x64>
 800141a:	e15e      	b.n	80016da <__aeabi_dadd+0x322>
 800141c:	2a1f      	cmp	r2, #31
 800141e:	dd00      	ble.n	8001422 <__aeabi_dadd+0x6a>
 8001420:	e1ee      	b.n	8001800 <__aeabi_dadd+0x448>
 8001422:	2020      	movs	r0, #32
 8001424:	0039      	movs	r1, r7
 8001426:	4665      	mov	r5, ip
 8001428:	1a80      	subs	r0, r0, r2
 800142a:	4087      	lsls	r7, r0
 800142c:	40d1      	lsrs	r1, r2
 800142e:	4085      	lsls	r5, r0
 8001430:	430d      	orrs	r5, r1
 8001432:	0039      	movs	r1, r7
 8001434:	1e4f      	subs	r7, r1, #1
 8001436:	41b9      	sbcs	r1, r7
 8001438:	4667      	mov	r7, ip
 800143a:	40d7      	lsrs	r7, r2
 800143c:	4329      	orrs	r1, r5
 800143e:	1bdb      	subs	r3, r3, r7
 8001440:	464a      	mov	r2, r9
 8001442:	1a55      	subs	r5, r2, r1
 8001444:	45a9      	cmp	r9, r5
 8001446:	4189      	sbcs	r1, r1
 8001448:	4249      	negs	r1, r1
 800144a:	1a5b      	subs	r3, r3, r1
 800144c:	4698      	mov	r8, r3
 800144e:	4643      	mov	r3, r8
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x9e>
 8001454:	e0cc      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001456:	4643      	mov	r3, r8
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	0a5b      	lsrs	r3, r3, #9
 800145c:	4698      	mov	r8, r3
 800145e:	4643      	mov	r3, r8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0xae>
 8001464:	e12c      	b.n	80016c0 <__aeabi_dadd+0x308>
 8001466:	4640      	mov	r0, r8
 8001468:	f001 fec8 	bl	80031fc <__clzsi2>
 800146c:	0001      	movs	r1, r0
 800146e:	3908      	subs	r1, #8
 8001470:	2220      	movs	r2, #32
 8001472:	0028      	movs	r0, r5
 8001474:	4643      	mov	r3, r8
 8001476:	1a52      	subs	r2, r2, r1
 8001478:	408b      	lsls	r3, r1
 800147a:	40d0      	lsrs	r0, r2
 800147c:	408d      	lsls	r5, r1
 800147e:	4303      	orrs	r3, r0
 8001480:	428e      	cmp	r6, r1
 8001482:	dd00      	ble.n	8001486 <__aeabi_dadd+0xce>
 8001484:	e117      	b.n	80016b6 <__aeabi_dadd+0x2fe>
 8001486:	1b8e      	subs	r6, r1, r6
 8001488:	1c72      	adds	r2, r6, #1
 800148a:	2a1f      	cmp	r2, #31
 800148c:	dd00      	ble.n	8001490 <__aeabi_dadd+0xd8>
 800148e:	e1a7      	b.n	80017e0 <__aeabi_dadd+0x428>
 8001490:	2120      	movs	r1, #32
 8001492:	0018      	movs	r0, r3
 8001494:	002e      	movs	r6, r5
 8001496:	1a89      	subs	r1, r1, r2
 8001498:	408d      	lsls	r5, r1
 800149a:	4088      	lsls	r0, r1
 800149c:	40d6      	lsrs	r6, r2
 800149e:	40d3      	lsrs	r3, r2
 80014a0:	1e69      	subs	r1, r5, #1
 80014a2:	418d      	sbcs	r5, r1
 80014a4:	4330      	orrs	r0, r6
 80014a6:	4698      	mov	r8, r3
 80014a8:	2600      	movs	r6, #0
 80014aa:	4305      	orrs	r5, r0
 80014ac:	076b      	lsls	r3, r5, #29
 80014ae:	d009      	beq.n	80014c4 <__aeabi_dadd+0x10c>
 80014b0:	230f      	movs	r3, #15
 80014b2:	402b      	ands	r3, r5
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d005      	beq.n	80014c4 <__aeabi_dadd+0x10c>
 80014b8:	1d2b      	adds	r3, r5, #4
 80014ba:	42ab      	cmp	r3, r5
 80014bc:	41ad      	sbcs	r5, r5
 80014be:	426d      	negs	r5, r5
 80014c0:	44a8      	add	r8, r5
 80014c2:	001d      	movs	r5, r3
 80014c4:	4643      	mov	r3, r8
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	d400      	bmi.n	80014cc <__aeabi_dadd+0x114>
 80014ca:	e094      	b.n	80015f6 <__aeabi_dadd+0x23e>
 80014cc:	4b97      	ldr	r3, [pc, #604]	; (800172c <__aeabi_dadd+0x374>)
 80014ce:	1c72      	adds	r2, r6, #1
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x11e>
 80014d4:	e09d      	b.n	8001612 <__aeabi_dadd+0x25a>
 80014d6:	4641      	mov	r1, r8
 80014d8:	4b95      	ldr	r3, [pc, #596]	; (8001730 <__aeabi_dadd+0x378>)
 80014da:	08ed      	lsrs	r5, r5, #3
 80014dc:	4019      	ands	r1, r3
 80014de:	000b      	movs	r3, r1
 80014e0:	0552      	lsls	r2, r2, #21
 80014e2:	0749      	lsls	r1, r1, #29
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4329      	orrs	r1, r5
 80014e8:	0b1b      	lsrs	r3, r3, #12
 80014ea:	0d52      	lsrs	r2, r2, #21
 80014ec:	0512      	lsls	r2, r2, #20
 80014ee:	4313      	orrs	r3, r2
 80014f0:	07e4      	lsls	r4, r4, #31
 80014f2:	4323      	orrs	r3, r4
 80014f4:	0008      	movs	r0, r1
 80014f6:	0019      	movs	r1, r3
 80014f8:	bce0      	pop	{r5, r6, r7}
 80014fa:	46ba      	mov	sl, r7
 80014fc:	46b1      	mov	r9, r6
 80014fe:	46a8      	mov	r8, r5
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	2a00      	cmp	r2, #0
 8001504:	d043      	beq.n	800158e <__aeabi_dadd+0x1d6>
 8001506:	1b8a      	subs	r2, r1, r6
 8001508:	2e00      	cmp	r6, #0
 800150a:	d000      	beq.n	800150e <__aeabi_dadd+0x156>
 800150c:	e12a      	b.n	8001764 <__aeabi_dadd+0x3ac>
 800150e:	464c      	mov	r4, r9
 8001510:	431c      	orrs	r4, r3
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x15e>
 8001514:	e1d1      	b.n	80018ba <__aeabi_dadd+0x502>
 8001516:	1e54      	subs	r4, r2, #1
 8001518:	2a01      	cmp	r2, #1
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x166>
 800151c:	e21f      	b.n	800195e <__aeabi_dadd+0x5a6>
 800151e:	4d83      	ldr	r5, [pc, #524]	; (800172c <__aeabi_dadd+0x374>)
 8001520:	42aa      	cmp	r2, r5
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x16e>
 8001524:	e272      	b.n	8001a0c <__aeabi_dadd+0x654>
 8001526:	0022      	movs	r2, r4
 8001528:	e123      	b.n	8001772 <__aeabi_dadd+0x3ba>
 800152a:	2a00      	cmp	r2, #0
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x178>
 800152e:	e098      	b.n	8001662 <__aeabi_dadd+0x2aa>
 8001530:	2900      	cmp	r1, #0
 8001532:	d042      	beq.n	80015ba <__aeabi_dadd+0x202>
 8001534:	497d      	ldr	r1, [pc, #500]	; (800172c <__aeabi_dadd+0x374>)
 8001536:	428e      	cmp	r6, r1
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x184>
 800153a:	e0da      	b.n	80016f2 <__aeabi_dadd+0x33a>
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0028      	movs	r0, r5
 8001540:	0409      	lsls	r1, r1, #16
 8001542:	4308      	orrs	r0, r1
 8001544:	4684      	mov	ip, r0
 8001546:	2a38      	cmp	r2, #56	; 0x38
 8001548:	dd00      	ble.n	800154c <__aeabi_dadd+0x194>
 800154a:	e129      	b.n	80017a0 <__aeabi_dadd+0x3e8>
 800154c:	2a1f      	cmp	r2, #31
 800154e:	dc00      	bgt.n	8001552 <__aeabi_dadd+0x19a>
 8001550:	e187      	b.n	8001862 <__aeabi_dadd+0x4aa>
 8001552:	0011      	movs	r1, r2
 8001554:	4665      	mov	r5, ip
 8001556:	3920      	subs	r1, #32
 8001558:	40cd      	lsrs	r5, r1
 800155a:	2a20      	cmp	r2, #32
 800155c:	d004      	beq.n	8001568 <__aeabi_dadd+0x1b0>
 800155e:	2040      	movs	r0, #64	; 0x40
 8001560:	4661      	mov	r1, ip
 8001562:	1a82      	subs	r2, r0, r2
 8001564:	4091      	lsls	r1, r2
 8001566:	430f      	orrs	r7, r1
 8001568:	0039      	movs	r1, r7
 800156a:	1e4f      	subs	r7, r1, #1
 800156c:	41b9      	sbcs	r1, r7
 800156e:	430d      	orrs	r5, r1
 8001570:	e11b      	b.n	80017aa <__aeabi_dadd+0x3f2>
 8001572:	0029      	movs	r1, r5
 8001574:	4339      	orrs	r1, r7
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x1c2>
 8001578:	e0b5      	b.n	80016e6 <__aeabi_dadd+0x32e>
 800157a:	1e51      	subs	r1, r2, #1
 800157c:	2a01      	cmp	r2, #1
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x1ca>
 8001580:	e1ab      	b.n	80018da <__aeabi_dadd+0x522>
 8001582:	486a      	ldr	r0, [pc, #424]	; (800172c <__aeabi_dadd+0x374>)
 8001584:	4282      	cmp	r2, r0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x1d2>
 8001588:	e1b2      	b.n	80018f0 <__aeabi_dadd+0x538>
 800158a:	000a      	movs	r2, r1
 800158c:	e743      	b.n	8001416 <__aeabi_dadd+0x5e>
 800158e:	4969      	ldr	r1, [pc, #420]	; (8001734 <__aeabi_dadd+0x37c>)
 8001590:	1c75      	adds	r5, r6, #1
 8001592:	420d      	tst	r5, r1
 8001594:	d000      	beq.n	8001598 <__aeabi_dadd+0x1e0>
 8001596:	e0cf      	b.n	8001738 <__aeabi_dadd+0x380>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x1e6>
 800159c:	e193      	b.n	80018c6 <__aeabi_dadd+0x50e>
 800159e:	4649      	mov	r1, r9
 80015a0:	4319      	orrs	r1, r3
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x1ee>
 80015a4:	e1d1      	b.n	800194a <__aeabi_dadd+0x592>
 80015a6:	4661      	mov	r1, ip
 80015a8:	4339      	orrs	r1, r7
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x1f6>
 80015ac:	e1e3      	b.n	8001976 <__aeabi_dadd+0x5be>
 80015ae:	4649      	mov	r1, r9
 80015b0:	0758      	lsls	r0, r3, #29
 80015b2:	08c9      	lsrs	r1, r1, #3
 80015b4:	4301      	orrs	r1, r0
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	e026      	b.n	8001608 <__aeabi_dadd+0x250>
 80015ba:	0029      	movs	r1, r5
 80015bc:	4339      	orrs	r1, r7
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x20a>
 80015c0:	e091      	b.n	80016e6 <__aeabi_dadd+0x32e>
 80015c2:	1e51      	subs	r1, r2, #1
 80015c4:	2a01      	cmp	r2, #1
 80015c6:	d005      	beq.n	80015d4 <__aeabi_dadd+0x21c>
 80015c8:	4858      	ldr	r0, [pc, #352]	; (800172c <__aeabi_dadd+0x374>)
 80015ca:	4282      	cmp	r2, r0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dadd+0x218>
 80015ce:	e18f      	b.n	80018f0 <__aeabi_dadd+0x538>
 80015d0:	000a      	movs	r2, r1
 80015d2:	e7b8      	b.n	8001546 <__aeabi_dadd+0x18e>
 80015d4:	003d      	movs	r5, r7
 80015d6:	444d      	add	r5, r9
 80015d8:	454d      	cmp	r5, r9
 80015da:	4189      	sbcs	r1, r1
 80015dc:	4463      	add	r3, ip
 80015de:	4698      	mov	r8, r3
 80015e0:	4249      	negs	r1, r1
 80015e2:	4488      	add	r8, r1
 80015e4:	4643      	mov	r3, r8
 80015e6:	2602      	movs	r6, #2
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	d500      	bpl.n	80015ee <__aeabi_dadd+0x236>
 80015ec:	e0eb      	b.n	80017c6 <__aeabi_dadd+0x40e>
 80015ee:	3e01      	subs	r6, #1
 80015f0:	076b      	lsls	r3, r5, #29
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x23e>
 80015f4:	e75c      	b.n	80014b0 <__aeabi_dadd+0xf8>
 80015f6:	4643      	mov	r3, r8
 80015f8:	08e9      	lsrs	r1, r5, #3
 80015fa:	075a      	lsls	r2, r3, #29
 80015fc:	4311      	orrs	r1, r2
 80015fe:	0032      	movs	r2, r6
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	484a      	ldr	r0, [pc, #296]	; (800172c <__aeabi_dadd+0x374>)
 8001604:	4282      	cmp	r2, r0
 8001606:	d021      	beq.n	800164c <__aeabi_dadd+0x294>
 8001608:	031b      	lsls	r3, r3, #12
 800160a:	0552      	lsls	r2, r2, #21
 800160c:	0b1b      	lsrs	r3, r3, #12
 800160e:	0d52      	lsrs	r2, r2, #21
 8001610:	e76c      	b.n	80014ec <__aeabi_dadd+0x134>
 8001612:	2300      	movs	r3, #0
 8001614:	2100      	movs	r1, #0
 8001616:	e769      	b.n	80014ec <__aeabi_dadd+0x134>
 8001618:	002a      	movs	r2, r5
 800161a:	433a      	orrs	r2, r7
 800161c:	d069      	beq.n	80016f2 <__aeabi_dadd+0x33a>
 800161e:	464a      	mov	r2, r9
 8001620:	0758      	lsls	r0, r3, #29
 8001622:	08d1      	lsrs	r1, r2, #3
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	031b      	lsls	r3, r3, #12
 800162a:	4308      	orrs	r0, r1
 800162c:	421a      	tst	r2, r3
 800162e:	d007      	beq.n	8001640 <__aeabi_dadd+0x288>
 8001630:	0029      	movs	r1, r5
 8001632:	08ed      	lsrs	r5, r5, #3
 8001634:	421d      	tst	r5, r3
 8001636:	d103      	bne.n	8001640 <__aeabi_dadd+0x288>
 8001638:	002a      	movs	r2, r5
 800163a:	08ff      	lsrs	r7, r7, #3
 800163c:	0748      	lsls	r0, r1, #29
 800163e:	4338      	orrs	r0, r7
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00c1      	lsls	r1, r0, #3
 8001644:	075b      	lsls	r3, r3, #29
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	4319      	orrs	r1, r3
 800164a:	0013      	movs	r3, r2
 800164c:	000a      	movs	r2, r1
 800164e:	431a      	orrs	r2, r3
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x29c>
 8001652:	e213      	b.n	8001a7c <__aeabi_dadd+0x6c4>
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	0312      	lsls	r2, r2, #12
 8001658:	4313      	orrs	r3, r2
 800165a:	031b      	lsls	r3, r3, #12
 800165c:	4a33      	ldr	r2, [pc, #204]	; (800172c <__aeabi_dadd+0x374>)
 800165e:	0b1b      	lsrs	r3, r3, #12
 8001660:	e744      	b.n	80014ec <__aeabi_dadd+0x134>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d04b      	beq.n	80016fe <__aeabi_dadd+0x346>
 8001666:	1b8a      	subs	r2, r1, r6
 8001668:	2e00      	cmp	r6, #0
 800166a:	d100      	bne.n	800166e <__aeabi_dadd+0x2b6>
 800166c:	e0e7      	b.n	800183e <__aeabi_dadd+0x486>
 800166e:	482f      	ldr	r0, [pc, #188]	; (800172c <__aeabi_dadd+0x374>)
 8001670:	4281      	cmp	r1, r0
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x2be>
 8001674:	e195      	b.n	80019a2 <__aeabi_dadd+0x5ea>
 8001676:	2080      	movs	r0, #128	; 0x80
 8001678:	0400      	lsls	r0, r0, #16
 800167a:	4303      	orrs	r3, r0
 800167c:	2a38      	cmp	r2, #56	; 0x38
 800167e:	dd00      	ble.n	8001682 <__aeabi_dadd+0x2ca>
 8001680:	e143      	b.n	800190a <__aeabi_dadd+0x552>
 8001682:	2a1f      	cmp	r2, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0x2d0>
 8001686:	e1db      	b.n	8001a40 <__aeabi_dadd+0x688>
 8001688:	2020      	movs	r0, #32
 800168a:	001d      	movs	r5, r3
 800168c:	464e      	mov	r6, r9
 800168e:	1a80      	subs	r0, r0, r2
 8001690:	4085      	lsls	r5, r0
 8001692:	40d6      	lsrs	r6, r2
 8001694:	4335      	orrs	r5, r6
 8001696:	464e      	mov	r6, r9
 8001698:	4086      	lsls	r6, r0
 800169a:	0030      	movs	r0, r6
 800169c:	40d3      	lsrs	r3, r2
 800169e:	1e46      	subs	r6, r0, #1
 80016a0:	41b0      	sbcs	r0, r6
 80016a2:	449c      	add	ip, r3
 80016a4:	4305      	orrs	r5, r0
 80016a6:	19ed      	adds	r5, r5, r7
 80016a8:	42bd      	cmp	r5, r7
 80016aa:	419b      	sbcs	r3, r3
 80016ac:	425b      	negs	r3, r3
 80016ae:	4463      	add	r3, ip
 80016b0:	4698      	mov	r8, r3
 80016b2:	000e      	movs	r6, r1
 80016b4:	e07f      	b.n	80017b6 <__aeabi_dadd+0x3fe>
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <__aeabi_dadd+0x378>)
 80016b8:	1a76      	subs	r6, r6, r1
 80016ba:	4013      	ands	r3, r2
 80016bc:	4698      	mov	r8, r3
 80016be:	e6f5      	b.n	80014ac <__aeabi_dadd+0xf4>
 80016c0:	0028      	movs	r0, r5
 80016c2:	f001 fd9b 	bl	80031fc <__clzsi2>
 80016c6:	0001      	movs	r1, r0
 80016c8:	3118      	adds	r1, #24
 80016ca:	291f      	cmp	r1, #31
 80016cc:	dc00      	bgt.n	80016d0 <__aeabi_dadd+0x318>
 80016ce:	e6cf      	b.n	8001470 <__aeabi_dadd+0xb8>
 80016d0:	002b      	movs	r3, r5
 80016d2:	3808      	subs	r0, #8
 80016d4:	4083      	lsls	r3, r0
 80016d6:	2500      	movs	r5, #0
 80016d8:	e6d2      	b.n	8001480 <__aeabi_dadd+0xc8>
 80016da:	4662      	mov	r2, ip
 80016dc:	433a      	orrs	r2, r7
 80016de:	0011      	movs	r1, r2
 80016e0:	1e4f      	subs	r7, r1, #1
 80016e2:	41b9      	sbcs	r1, r7
 80016e4:	e6ac      	b.n	8001440 <__aeabi_dadd+0x88>
 80016e6:	4649      	mov	r1, r9
 80016e8:	0758      	lsls	r0, r3, #29
 80016ea:	08c9      	lsrs	r1, r1, #3
 80016ec:	4301      	orrs	r1, r0
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	e787      	b.n	8001602 <__aeabi_dadd+0x24a>
 80016f2:	4649      	mov	r1, r9
 80016f4:	075a      	lsls	r2, r3, #29
 80016f6:	08c9      	lsrs	r1, r1, #3
 80016f8:	4311      	orrs	r1, r2
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	e7a6      	b.n	800164c <__aeabi_dadd+0x294>
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <__aeabi_dadd+0x37c>)
 8001700:	1c70      	adds	r0, r6, #1
 8001702:	4208      	tst	r0, r1
 8001704:	d000      	beq.n	8001708 <__aeabi_dadd+0x350>
 8001706:	e0bb      	b.n	8001880 <__aeabi_dadd+0x4c8>
 8001708:	2e00      	cmp	r6, #0
 800170a:	d000      	beq.n	800170e <__aeabi_dadd+0x356>
 800170c:	e114      	b.n	8001938 <__aeabi_dadd+0x580>
 800170e:	4649      	mov	r1, r9
 8001710:	4319      	orrs	r1, r3
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x35e>
 8001714:	e175      	b.n	8001a02 <__aeabi_dadd+0x64a>
 8001716:	0029      	movs	r1, r5
 8001718:	4339      	orrs	r1, r7
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x366>
 800171c:	e17e      	b.n	8001a1c <__aeabi_dadd+0x664>
 800171e:	4649      	mov	r1, r9
 8001720:	0758      	lsls	r0, r3, #29
 8001722:	08c9      	lsrs	r1, r1, #3
 8001724:	4301      	orrs	r1, r0
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	e76e      	b.n	8001608 <__aeabi_dadd+0x250>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff
 8001730:	ff7fffff 	.word	0xff7fffff
 8001734:	000007fe 	.word	0x000007fe
 8001738:	4649      	mov	r1, r9
 800173a:	1bcd      	subs	r5, r1, r7
 800173c:	4661      	mov	r1, ip
 800173e:	1a58      	subs	r0, r3, r1
 8001740:	45a9      	cmp	r9, r5
 8001742:	4189      	sbcs	r1, r1
 8001744:	4249      	negs	r1, r1
 8001746:	4688      	mov	r8, r1
 8001748:	0001      	movs	r1, r0
 800174a:	4640      	mov	r0, r8
 800174c:	1a09      	subs	r1, r1, r0
 800174e:	4688      	mov	r8, r1
 8001750:	0209      	lsls	r1, r1, #8
 8001752:	d500      	bpl.n	8001756 <__aeabi_dadd+0x39e>
 8001754:	e0a6      	b.n	80018a4 <__aeabi_dadd+0x4ec>
 8001756:	4641      	mov	r1, r8
 8001758:	4329      	orrs	r1, r5
 800175a:	d000      	beq.n	800175e <__aeabi_dadd+0x3a6>
 800175c:	e67f      	b.n	800145e <__aeabi_dadd+0xa6>
 800175e:	2300      	movs	r3, #0
 8001760:	2400      	movs	r4, #0
 8001762:	e751      	b.n	8001608 <__aeabi_dadd+0x250>
 8001764:	4cc7      	ldr	r4, [pc, #796]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001766:	42a1      	cmp	r1, r4
 8001768:	d100      	bne.n	800176c <__aeabi_dadd+0x3b4>
 800176a:	e0c7      	b.n	80018fc <__aeabi_dadd+0x544>
 800176c:	2480      	movs	r4, #128	; 0x80
 800176e:	0424      	lsls	r4, r4, #16
 8001770:	4323      	orrs	r3, r4
 8001772:	2a38      	cmp	r2, #56	; 0x38
 8001774:	dc54      	bgt.n	8001820 <__aeabi_dadd+0x468>
 8001776:	2a1f      	cmp	r2, #31
 8001778:	dd00      	ble.n	800177c <__aeabi_dadd+0x3c4>
 800177a:	e0cc      	b.n	8001916 <__aeabi_dadd+0x55e>
 800177c:	2420      	movs	r4, #32
 800177e:	4648      	mov	r0, r9
 8001780:	1aa4      	subs	r4, r4, r2
 8001782:	001d      	movs	r5, r3
 8001784:	464e      	mov	r6, r9
 8001786:	40a0      	lsls	r0, r4
 8001788:	40d6      	lsrs	r6, r2
 800178a:	40a5      	lsls	r5, r4
 800178c:	0004      	movs	r4, r0
 800178e:	40d3      	lsrs	r3, r2
 8001790:	4662      	mov	r2, ip
 8001792:	4335      	orrs	r5, r6
 8001794:	1e66      	subs	r6, r4, #1
 8001796:	41b4      	sbcs	r4, r6
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	469c      	mov	ip, r3
 800179c:	4325      	orrs	r5, r4
 800179e:	e044      	b.n	800182a <__aeabi_dadd+0x472>
 80017a0:	4662      	mov	r2, ip
 80017a2:	433a      	orrs	r2, r7
 80017a4:	0015      	movs	r5, r2
 80017a6:	1e6f      	subs	r7, r5, #1
 80017a8:	41bd      	sbcs	r5, r7
 80017aa:	444d      	add	r5, r9
 80017ac:	454d      	cmp	r5, r9
 80017ae:	4189      	sbcs	r1, r1
 80017b0:	4249      	negs	r1, r1
 80017b2:	4688      	mov	r8, r1
 80017b4:	4498      	add	r8, r3
 80017b6:	4643      	mov	r3, r8
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	d400      	bmi.n	80017be <__aeabi_dadd+0x406>
 80017bc:	e718      	b.n	80015f0 <__aeabi_dadd+0x238>
 80017be:	4bb1      	ldr	r3, [pc, #708]	; (8001a84 <__aeabi_dadd+0x6cc>)
 80017c0:	3601      	adds	r6, #1
 80017c2:	429e      	cmp	r6, r3
 80017c4:	d049      	beq.n	800185a <__aeabi_dadd+0x4a2>
 80017c6:	4642      	mov	r2, r8
 80017c8:	4baf      	ldr	r3, [pc, #700]	; (8001a88 <__aeabi_dadd+0x6d0>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	401a      	ands	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	086a      	lsrs	r2, r5, #1
 80017d2:	400d      	ands	r5, r1
 80017d4:	4315      	orrs	r5, r2
 80017d6:	07d9      	lsls	r1, r3, #31
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	4698      	mov	r8, r3
 80017dc:	430d      	orrs	r5, r1
 80017de:	e665      	b.n	80014ac <__aeabi_dadd+0xf4>
 80017e0:	0018      	movs	r0, r3
 80017e2:	3e1f      	subs	r6, #31
 80017e4:	40f0      	lsrs	r0, r6
 80017e6:	2a20      	cmp	r2, #32
 80017e8:	d003      	beq.n	80017f2 <__aeabi_dadd+0x43a>
 80017ea:	2140      	movs	r1, #64	; 0x40
 80017ec:	1a8a      	subs	r2, r1, r2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	431d      	orrs	r5, r3
 80017f2:	1e69      	subs	r1, r5, #1
 80017f4:	418d      	sbcs	r5, r1
 80017f6:	2300      	movs	r3, #0
 80017f8:	2600      	movs	r6, #0
 80017fa:	4698      	mov	r8, r3
 80017fc:	4305      	orrs	r5, r0
 80017fe:	e6f7      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001800:	0011      	movs	r1, r2
 8001802:	4665      	mov	r5, ip
 8001804:	3920      	subs	r1, #32
 8001806:	40cd      	lsrs	r5, r1
 8001808:	2a20      	cmp	r2, #32
 800180a:	d004      	beq.n	8001816 <__aeabi_dadd+0x45e>
 800180c:	2040      	movs	r0, #64	; 0x40
 800180e:	4661      	mov	r1, ip
 8001810:	1a82      	subs	r2, r0, r2
 8001812:	4091      	lsls	r1, r2
 8001814:	430f      	orrs	r7, r1
 8001816:	0039      	movs	r1, r7
 8001818:	1e4f      	subs	r7, r1, #1
 800181a:	41b9      	sbcs	r1, r7
 800181c:	4329      	orrs	r1, r5
 800181e:	e60f      	b.n	8001440 <__aeabi_dadd+0x88>
 8001820:	464a      	mov	r2, r9
 8001822:	4313      	orrs	r3, r2
 8001824:	001d      	movs	r5, r3
 8001826:	1e6b      	subs	r3, r5, #1
 8001828:	419d      	sbcs	r5, r3
 800182a:	1b7d      	subs	r5, r7, r5
 800182c:	42af      	cmp	r7, r5
 800182e:	419b      	sbcs	r3, r3
 8001830:	4662      	mov	r2, ip
 8001832:	425b      	negs	r3, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4698      	mov	r8, r3
 8001838:	4654      	mov	r4, sl
 800183a:	000e      	movs	r6, r1
 800183c:	e607      	b.n	800144e <__aeabi_dadd+0x96>
 800183e:	4648      	mov	r0, r9
 8001840:	4318      	orrs	r0, r3
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x48e>
 8001844:	e0b3      	b.n	80019ae <__aeabi_dadd+0x5f6>
 8001846:	1e50      	subs	r0, r2, #1
 8001848:	2a01      	cmp	r2, #1
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x496>
 800184c:	e10d      	b.n	8001a6a <__aeabi_dadd+0x6b2>
 800184e:	4d8d      	ldr	r5, [pc, #564]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001850:	42aa      	cmp	r2, r5
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x49e>
 8001854:	e0a5      	b.n	80019a2 <__aeabi_dadd+0x5ea>
 8001856:	0002      	movs	r2, r0
 8001858:	e710      	b.n	800167c <__aeabi_dadd+0x2c4>
 800185a:	0032      	movs	r2, r6
 800185c:	2300      	movs	r3, #0
 800185e:	2100      	movs	r1, #0
 8001860:	e644      	b.n	80014ec <__aeabi_dadd+0x134>
 8001862:	2120      	movs	r1, #32
 8001864:	0038      	movs	r0, r7
 8001866:	1a89      	subs	r1, r1, r2
 8001868:	4665      	mov	r5, ip
 800186a:	408f      	lsls	r7, r1
 800186c:	408d      	lsls	r5, r1
 800186e:	40d0      	lsrs	r0, r2
 8001870:	1e79      	subs	r1, r7, #1
 8001872:	418f      	sbcs	r7, r1
 8001874:	4305      	orrs	r5, r0
 8001876:	433d      	orrs	r5, r7
 8001878:	4667      	mov	r7, ip
 800187a:	40d7      	lsrs	r7, r2
 800187c:	19db      	adds	r3, r3, r7
 800187e:	e794      	b.n	80017aa <__aeabi_dadd+0x3f2>
 8001880:	4a80      	ldr	r2, [pc, #512]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001882:	4290      	cmp	r0, r2
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x4d0>
 8001886:	e0ec      	b.n	8001a62 <__aeabi_dadd+0x6aa>
 8001888:	0039      	movs	r1, r7
 800188a:	4449      	add	r1, r9
 800188c:	4549      	cmp	r1, r9
 800188e:	4192      	sbcs	r2, r2
 8001890:	4463      	add	r3, ip
 8001892:	4252      	negs	r2, r2
 8001894:	189b      	adds	r3, r3, r2
 8001896:	07dd      	lsls	r5, r3, #31
 8001898:	0849      	lsrs	r1, r1, #1
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	4698      	mov	r8, r3
 800189e:	0006      	movs	r6, r0
 80018a0:	430d      	orrs	r5, r1
 80018a2:	e6a5      	b.n	80015f0 <__aeabi_dadd+0x238>
 80018a4:	464a      	mov	r2, r9
 80018a6:	1abd      	subs	r5, r7, r2
 80018a8:	42af      	cmp	r7, r5
 80018aa:	4189      	sbcs	r1, r1
 80018ac:	4662      	mov	r2, ip
 80018ae:	4249      	negs	r1, r1
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	4698      	mov	r8, r3
 80018b6:	4654      	mov	r4, sl
 80018b8:	e5d1      	b.n	800145e <__aeabi_dadd+0xa6>
 80018ba:	076c      	lsls	r4, r5, #29
 80018bc:	08f9      	lsrs	r1, r7, #3
 80018be:	4321      	orrs	r1, r4
 80018c0:	08eb      	lsrs	r3, r5, #3
 80018c2:	0004      	movs	r4, r0
 80018c4:	e69d      	b.n	8001602 <__aeabi_dadd+0x24a>
 80018c6:	464a      	mov	r2, r9
 80018c8:	431a      	orrs	r2, r3
 80018ca:	d175      	bne.n	80019b8 <__aeabi_dadd+0x600>
 80018cc:	4661      	mov	r1, ip
 80018ce:	4339      	orrs	r1, r7
 80018d0:	d114      	bne.n	80018fc <__aeabi_dadd+0x544>
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	2400      	movs	r4, #0
 80018d6:	031b      	lsls	r3, r3, #12
 80018d8:	e6bc      	b.n	8001654 <__aeabi_dadd+0x29c>
 80018da:	464a      	mov	r2, r9
 80018dc:	1bd5      	subs	r5, r2, r7
 80018de:	45a9      	cmp	r9, r5
 80018e0:	4189      	sbcs	r1, r1
 80018e2:	4662      	mov	r2, ip
 80018e4:	4249      	negs	r1, r1
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	1a5b      	subs	r3, r3, r1
 80018ea:	4698      	mov	r8, r3
 80018ec:	2601      	movs	r6, #1
 80018ee:	e5ae      	b.n	800144e <__aeabi_dadd+0x96>
 80018f0:	464a      	mov	r2, r9
 80018f2:	08d1      	lsrs	r1, r2, #3
 80018f4:	075a      	lsls	r2, r3, #29
 80018f6:	4311      	orrs	r1, r2
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	e6a7      	b.n	800164c <__aeabi_dadd+0x294>
 80018fc:	4663      	mov	r3, ip
 80018fe:	08f9      	lsrs	r1, r7, #3
 8001900:	075a      	lsls	r2, r3, #29
 8001902:	4654      	mov	r4, sl
 8001904:	4311      	orrs	r1, r2
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	e6a0      	b.n	800164c <__aeabi_dadd+0x294>
 800190a:	464a      	mov	r2, r9
 800190c:	4313      	orrs	r3, r2
 800190e:	001d      	movs	r5, r3
 8001910:	1e6b      	subs	r3, r5, #1
 8001912:	419d      	sbcs	r5, r3
 8001914:	e6c7      	b.n	80016a6 <__aeabi_dadd+0x2ee>
 8001916:	0014      	movs	r4, r2
 8001918:	001e      	movs	r6, r3
 800191a:	3c20      	subs	r4, #32
 800191c:	40e6      	lsrs	r6, r4
 800191e:	2a20      	cmp	r2, #32
 8001920:	d005      	beq.n	800192e <__aeabi_dadd+0x576>
 8001922:	2440      	movs	r4, #64	; 0x40
 8001924:	1aa2      	subs	r2, r4, r2
 8001926:	4093      	lsls	r3, r2
 8001928:	464a      	mov	r2, r9
 800192a:	431a      	orrs	r2, r3
 800192c:	4691      	mov	r9, r2
 800192e:	464d      	mov	r5, r9
 8001930:	1e6b      	subs	r3, r5, #1
 8001932:	419d      	sbcs	r5, r3
 8001934:	4335      	orrs	r5, r6
 8001936:	e778      	b.n	800182a <__aeabi_dadd+0x472>
 8001938:	464a      	mov	r2, r9
 800193a:	431a      	orrs	r2, r3
 800193c:	d000      	beq.n	8001940 <__aeabi_dadd+0x588>
 800193e:	e66b      	b.n	8001618 <__aeabi_dadd+0x260>
 8001940:	076b      	lsls	r3, r5, #29
 8001942:	08f9      	lsrs	r1, r7, #3
 8001944:	4319      	orrs	r1, r3
 8001946:	08eb      	lsrs	r3, r5, #3
 8001948:	e680      	b.n	800164c <__aeabi_dadd+0x294>
 800194a:	4661      	mov	r1, ip
 800194c:	4339      	orrs	r1, r7
 800194e:	d054      	beq.n	80019fa <__aeabi_dadd+0x642>
 8001950:	4663      	mov	r3, ip
 8001952:	08f9      	lsrs	r1, r7, #3
 8001954:	075c      	lsls	r4, r3, #29
 8001956:	4321      	orrs	r1, r4
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	0004      	movs	r4, r0
 800195c:	e654      	b.n	8001608 <__aeabi_dadd+0x250>
 800195e:	464a      	mov	r2, r9
 8001960:	1abd      	subs	r5, r7, r2
 8001962:	42af      	cmp	r7, r5
 8001964:	4189      	sbcs	r1, r1
 8001966:	4662      	mov	r2, ip
 8001968:	4249      	negs	r1, r1
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	4698      	mov	r8, r3
 8001970:	0004      	movs	r4, r0
 8001972:	2601      	movs	r6, #1
 8001974:	e56b      	b.n	800144e <__aeabi_dadd+0x96>
 8001976:	464a      	mov	r2, r9
 8001978:	1bd5      	subs	r5, r2, r7
 800197a:	45a9      	cmp	r9, r5
 800197c:	4189      	sbcs	r1, r1
 800197e:	4662      	mov	r2, ip
 8001980:	4249      	negs	r1, r1
 8001982:	1a9a      	subs	r2, r3, r2
 8001984:	1a52      	subs	r2, r2, r1
 8001986:	4690      	mov	r8, r2
 8001988:	0212      	lsls	r2, r2, #8
 800198a:	d532      	bpl.n	80019f2 <__aeabi_dadd+0x63a>
 800198c:	464a      	mov	r2, r9
 800198e:	1abd      	subs	r5, r7, r2
 8001990:	42af      	cmp	r7, r5
 8001992:	4189      	sbcs	r1, r1
 8001994:	4662      	mov	r2, ip
 8001996:	4249      	negs	r1, r1
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	1a5b      	subs	r3, r3, r1
 800199c:	4698      	mov	r8, r3
 800199e:	0004      	movs	r4, r0
 80019a0:	e584      	b.n	80014ac <__aeabi_dadd+0xf4>
 80019a2:	4663      	mov	r3, ip
 80019a4:	08f9      	lsrs	r1, r7, #3
 80019a6:	075a      	lsls	r2, r3, #29
 80019a8:	4311      	orrs	r1, r2
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	e64e      	b.n	800164c <__aeabi_dadd+0x294>
 80019ae:	08f9      	lsrs	r1, r7, #3
 80019b0:	0768      	lsls	r0, r5, #29
 80019b2:	4301      	orrs	r1, r0
 80019b4:	08eb      	lsrs	r3, r5, #3
 80019b6:	e624      	b.n	8001602 <__aeabi_dadd+0x24a>
 80019b8:	4662      	mov	r2, ip
 80019ba:	433a      	orrs	r2, r7
 80019bc:	d100      	bne.n	80019c0 <__aeabi_dadd+0x608>
 80019be:	e698      	b.n	80016f2 <__aeabi_dadd+0x33a>
 80019c0:	464a      	mov	r2, r9
 80019c2:	08d1      	lsrs	r1, r2, #3
 80019c4:	075a      	lsls	r2, r3, #29
 80019c6:	4311      	orrs	r1, r2
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	421a      	tst	r2, r3
 80019d0:	d008      	beq.n	80019e4 <__aeabi_dadd+0x62c>
 80019d2:	4660      	mov	r0, ip
 80019d4:	08c5      	lsrs	r5, r0, #3
 80019d6:	421d      	tst	r5, r3
 80019d8:	d104      	bne.n	80019e4 <__aeabi_dadd+0x62c>
 80019da:	4654      	mov	r4, sl
 80019dc:	002a      	movs	r2, r5
 80019de:	08f9      	lsrs	r1, r7, #3
 80019e0:	0743      	lsls	r3, r0, #29
 80019e2:	4319      	orrs	r1, r3
 80019e4:	0f4b      	lsrs	r3, r1, #29
 80019e6:	00c9      	lsls	r1, r1, #3
 80019e8:	075b      	lsls	r3, r3, #29
 80019ea:	08c9      	lsrs	r1, r1, #3
 80019ec:	4319      	orrs	r1, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	e62c      	b.n	800164c <__aeabi_dadd+0x294>
 80019f2:	4641      	mov	r1, r8
 80019f4:	4329      	orrs	r1, r5
 80019f6:	d000      	beq.n	80019fa <__aeabi_dadd+0x642>
 80019f8:	e5fa      	b.n	80015f0 <__aeabi_dadd+0x238>
 80019fa:	2300      	movs	r3, #0
 80019fc:	000a      	movs	r2, r1
 80019fe:	2400      	movs	r4, #0
 8001a00:	e602      	b.n	8001608 <__aeabi_dadd+0x250>
 8001a02:	076b      	lsls	r3, r5, #29
 8001a04:	08f9      	lsrs	r1, r7, #3
 8001a06:	4319      	orrs	r1, r3
 8001a08:	08eb      	lsrs	r3, r5, #3
 8001a0a:	e5fd      	b.n	8001608 <__aeabi_dadd+0x250>
 8001a0c:	4663      	mov	r3, ip
 8001a0e:	08f9      	lsrs	r1, r7, #3
 8001a10:	075b      	lsls	r3, r3, #29
 8001a12:	4319      	orrs	r1, r3
 8001a14:	4663      	mov	r3, ip
 8001a16:	0004      	movs	r4, r0
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	e617      	b.n	800164c <__aeabi_dadd+0x294>
 8001a1c:	003d      	movs	r5, r7
 8001a1e:	444d      	add	r5, r9
 8001a20:	4463      	add	r3, ip
 8001a22:	454d      	cmp	r5, r9
 8001a24:	4189      	sbcs	r1, r1
 8001a26:	4698      	mov	r8, r3
 8001a28:	4249      	negs	r1, r1
 8001a2a:	4488      	add	r8, r1
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	d400      	bmi.n	8001a34 <__aeabi_dadd+0x67c>
 8001a32:	e5dd      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001a34:	4642      	mov	r2, r8
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <__aeabi_dadd+0x6d0>)
 8001a38:	2601      	movs	r6, #1
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	e5d7      	b.n	80015f0 <__aeabi_dadd+0x238>
 8001a40:	0010      	movs	r0, r2
 8001a42:	001e      	movs	r6, r3
 8001a44:	3820      	subs	r0, #32
 8001a46:	40c6      	lsrs	r6, r0
 8001a48:	2a20      	cmp	r2, #32
 8001a4a:	d005      	beq.n	8001a58 <__aeabi_dadd+0x6a0>
 8001a4c:	2040      	movs	r0, #64	; 0x40
 8001a4e:	1a82      	subs	r2, r0, r2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	464a      	mov	r2, r9
 8001a54:	431a      	orrs	r2, r3
 8001a56:	4691      	mov	r9, r2
 8001a58:	464d      	mov	r5, r9
 8001a5a:	1e6b      	subs	r3, r5, #1
 8001a5c:	419d      	sbcs	r5, r3
 8001a5e:	4335      	orrs	r5, r6
 8001a60:	e621      	b.n	80016a6 <__aeabi_dadd+0x2ee>
 8001a62:	0002      	movs	r2, r0
 8001a64:	2300      	movs	r3, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	e540      	b.n	80014ec <__aeabi_dadd+0x134>
 8001a6a:	464a      	mov	r2, r9
 8001a6c:	19d5      	adds	r5, r2, r7
 8001a6e:	42bd      	cmp	r5, r7
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4463      	add	r3, ip
 8001a74:	4698      	mov	r8, r3
 8001a76:	4249      	negs	r1, r1
 8001a78:	4488      	add	r8, r1
 8001a7a:	e5b3      	b.n	80015e4 <__aeabi_dadd+0x22c>
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4a01      	ldr	r2, [pc, #4]	; (8001a84 <__aeabi_dadd+0x6cc>)
 8001a80:	000b      	movs	r3, r1
 8001a82:	e533      	b.n	80014ec <__aeabi_dadd+0x134>
 8001a84:	000007ff 	.word	0x000007ff
 8001a88:	ff7fffff 	.word	0xff7fffff

08001a8c <__aeabi_ddiv>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	b5e0      	push	{r5, r6, r7, lr}
 8001a98:	4681      	mov	r9, r0
 8001a9a:	0005      	movs	r5, r0
 8001a9c:	030c      	lsls	r4, r1, #12
 8001a9e:	0048      	lsls	r0, r1, #1
 8001aa0:	4692      	mov	sl, r2
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	0b24      	lsrs	r4, r4, #12
 8001aa8:	0d40      	lsrs	r0, r0, #21
 8001aaa:	0fce      	lsrs	r6, r1, #31
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d059      	beq.n	8001b64 <__aeabi_ddiv+0xd8>
 8001ab0:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001ab2:	4298      	cmp	r0, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x2c>
 8001ab6:	e098      	b.n	8001bea <__aeabi_ddiv+0x15e>
 8001ab8:	0f6b      	lsrs	r3, r5, #29
 8001aba:	00e4      	lsls	r4, r4, #3
 8001abc:	431c      	orrs	r4, r3
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	041b      	lsls	r3, r3, #16
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <__aeabi_ddiv+0x248>)
 8001ac8:	00ed      	lsls	r5, r5, #3
 8001aca:	469b      	mov	fp, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	4483      	add	fp, r0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	033c      	lsls	r4, r7, #12
 8001ad6:	007b      	lsls	r3, r7, #1
 8001ad8:	4650      	mov	r0, sl
 8001ada:	0b24      	lsrs	r4, r4, #12
 8001adc:	0d5b      	lsrs	r3, r3, #21
 8001ade:	0fff      	lsrs	r7, r7, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d067      	beq.n	8001bb4 <__aeabi_ddiv+0x128>
 8001ae4:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d018      	beq.n	8001b1c <__aeabi_ddiv+0x90>
 8001aea:	497a      	ldr	r1, [pc, #488]	; (8001cd4 <__aeabi_ddiv+0x248>)
 8001aec:	0f42      	lsrs	r2, r0, #29
 8001aee:	468c      	mov	ip, r1
 8001af0:	00e4      	lsls	r4, r4, #3
 8001af2:	4659      	mov	r1, fp
 8001af4:	4314      	orrs	r4, r2
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4463      	add	r3, ip
 8001afa:	0412      	lsls	r2, r2, #16
 8001afc:	1acb      	subs	r3, r1, r3
 8001afe:	4314      	orrs	r4, r2
 8001b00:	469b      	mov	fp, r3
 8001b02:	00c2      	lsls	r2, r0, #3
 8001b04:	2000      	movs	r0, #0
 8001b06:	0033      	movs	r3, r6
 8001b08:	407b      	eors	r3, r7
 8001b0a:	469a      	mov	sl, r3
 8001b0c:	464b      	mov	r3, r9
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	d900      	bls.n	8001b14 <__aeabi_ddiv+0x88>
 8001b12:	e0ef      	b.n	8001cf4 <__aeabi_ddiv+0x268>
 8001b14:	4970      	ldr	r1, [pc, #448]	; (8001cd8 <__aeabi_ddiv+0x24c>)
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	58cb      	ldr	r3, [r1, r3]
 8001b1a:	469f      	mov	pc, r3
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <__aeabi_ddiv+0x250>)
 8001b1e:	4652      	mov	r2, sl
 8001b20:	469c      	mov	ip, r3
 8001b22:	4322      	orrs	r2, r4
 8001b24:	44e3      	add	fp, ip
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d000      	beq.n	8001b2c <__aeabi_ddiv+0xa0>
 8001b2a:	e095      	b.n	8001c58 <__aeabi_ddiv+0x1cc>
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4319      	orrs	r1, r3
 8001b32:	4689      	mov	r9, r1
 8001b34:	2400      	movs	r4, #0
 8001b36:	2002      	movs	r0, #2
 8001b38:	e7e5      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	2500      	movs	r5, #0
 8001b40:	4652      	mov	r2, sl
 8001b42:	051b      	lsls	r3, r3, #20
 8001b44:	4323      	orrs	r3, r4
 8001b46:	07d2      	lsls	r2, r2, #31
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	0028      	movs	r0, r5
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	b005      	add	sp, #20
 8001b50:	bcf0      	pop	{r4, r5, r6, r7}
 8001b52:	46bb      	mov	fp, r7
 8001b54:	46b2      	mov	sl, r6
 8001b56:	46a9      	mov	r9, r5
 8001b58:	46a0      	mov	r8, r4
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	2500      	movs	r5, #0
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001b62:	e7ed      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001b64:	464b      	mov	r3, r9
 8001b66:	4323      	orrs	r3, r4
 8001b68:	4698      	mov	r8, r3
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_ddiv+0xe2>
 8001b6c:	e089      	b.n	8001c82 <__aeabi_ddiv+0x1f6>
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0xe8>
 8001b72:	e1e0      	b.n	8001f36 <__aeabi_ddiv+0x4aa>
 8001b74:	0020      	movs	r0, r4
 8001b76:	f001 fb41 	bl	80031fc <__clzsi2>
 8001b7a:	0001      	movs	r1, r0
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	390b      	subs	r1, #11
 8001b80:	231d      	movs	r3, #29
 8001b82:	1a5b      	subs	r3, r3, r1
 8001b84:	4649      	mov	r1, r9
 8001b86:	0010      	movs	r0, r2
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	3808      	subs	r0, #8
 8001b8c:	4084      	lsls	r4, r0
 8001b8e:	000b      	movs	r3, r1
 8001b90:	464d      	mov	r5, r9
 8001b92:	4323      	orrs	r3, r4
 8001b94:	4698      	mov	r8, r3
 8001b96:	4085      	lsls	r5, r0
 8001b98:	4851      	ldr	r0, [pc, #324]	; (8001ce0 <__aeabi_ddiv+0x254>)
 8001b9a:	033c      	lsls	r4, r7, #12
 8001b9c:	1a83      	subs	r3, r0, r2
 8001b9e:	469b      	mov	fp, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	007b      	lsls	r3, r7, #1
 8001ba8:	4650      	mov	r0, sl
 8001baa:	0b24      	lsrs	r4, r4, #12
 8001bac:	0d5b      	lsrs	r3, r3, #21
 8001bae:	0fff      	lsrs	r7, r7, #31
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d197      	bne.n	8001ae4 <__aeabi_ddiv+0x58>
 8001bb4:	4652      	mov	r2, sl
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	d055      	beq.n	8001c66 <__aeabi_ddiv+0x1da>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0x134>
 8001bbe:	e1ca      	b.n	8001f56 <__aeabi_ddiv+0x4ca>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	f001 fb1b 	bl	80031fc <__clzsi2>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	3a0b      	subs	r2, #11
 8001bca:	231d      	movs	r3, #29
 8001bcc:	0001      	movs	r1, r0
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	4652      	mov	r2, sl
 8001bd2:	3908      	subs	r1, #8
 8001bd4:	40da      	lsrs	r2, r3
 8001bd6:	408c      	lsls	r4, r1
 8001bd8:	4314      	orrs	r4, r2
 8001bda:	4652      	mov	r2, sl
 8001bdc:	408a      	lsls	r2, r1
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <__aeabi_ddiv+0x258>)
 8001be0:	4458      	add	r0, fp
 8001be2:	469b      	mov	fp, r3
 8001be4:	4483      	add	fp, r0
 8001be6:	2000      	movs	r0, #0
 8001be8:	e78d      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001bea:	464b      	mov	r3, r9
 8001bec:	4323      	orrs	r3, r4
 8001bee:	4698      	mov	r8, r3
 8001bf0:	d140      	bne.n	8001c74 <__aeabi_ddiv+0x1e8>
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	3b06      	subs	r3, #6
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	4683      	mov	fp, r0
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	e769      	b.n	8001ad4 <__aeabi_ddiv+0x48>
 8001c00:	46b2      	mov	sl, r6
 8001c02:	9b00      	ldr	r3, [sp, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d0a9      	beq.n	8001b5c <__aeabi_ddiv+0xd0>
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_ddiv+0x182>
 8001c0c:	e211      	b.n	8002032 <__aeabi_ddiv+0x5a6>
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d093      	beq.n	8001b3a <__aeabi_ddiv+0xae>
 8001c12:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <__aeabi_ddiv+0x25c>)
 8001c14:	445a      	add	r2, fp
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	dc00      	bgt.n	8001c1c <__aeabi_ddiv+0x190>
 8001c1a:	e13c      	b.n	8001e96 <__aeabi_ddiv+0x40a>
 8001c1c:	076b      	lsls	r3, r5, #29
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x196>
 8001c20:	e1a7      	b.n	8001f72 <__aeabi_ddiv+0x4e6>
 8001c22:	08ed      	lsrs	r5, r5, #3
 8001c24:	4643      	mov	r3, r8
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	d506      	bpl.n	8001c38 <__aeabi_ddiv+0x1ac>
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <__aeabi_ddiv+0x260>)
 8001c2e:	401a      	ands	r2, r3
 8001c30:	4690      	mov	r8, r2
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	445a      	add	r2, fp
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <__aeabi_ddiv+0x264>)
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dc8e      	bgt.n	8001b5c <__aeabi_ddiv+0xd0>
 8001c3e:	4643      	mov	r3, r8
 8001c40:	0552      	lsls	r2, r2, #21
 8001c42:	0758      	lsls	r0, r3, #29
 8001c44:	025c      	lsls	r4, r3, #9
 8001c46:	4305      	orrs	r5, r0
 8001c48:	0b24      	lsrs	r4, r4, #12
 8001c4a:	0d53      	lsrs	r3, r2, #21
 8001c4c:	e778      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001c4e:	46ba      	mov	sl, r7
 8001c50:	46a0      	mov	r8, r4
 8001c52:	0015      	movs	r5, r2
 8001c54:	9000      	str	r0, [sp, #0]
 8001c56:	e7d4      	b.n	8001c02 <__aeabi_ddiv+0x176>
 8001c58:	464a      	mov	r2, r9
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4691      	mov	r9, r2
 8001c60:	2003      	movs	r0, #3
 8001c62:	4652      	mov	r2, sl
 8001c64:	e74f      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001c66:	4649      	mov	r1, r9
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4319      	orrs	r1, r3
 8001c6c:	4689      	mov	r9, r1
 8001c6e:	2400      	movs	r4, #0
 8001c70:	2001      	movs	r0, #1
 8001c72:	e748      	b.n	8001b06 <__aeabi_ddiv+0x7a>
 8001c74:	230c      	movs	r3, #12
 8001c76:	4699      	mov	r9, r3
 8001c78:	3b09      	subs	r3, #9
 8001c7a:	46a0      	mov	r8, r4
 8001c7c:	4683      	mov	fp, r0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	e728      	b.n	8001ad4 <__aeabi_ddiv+0x48>
 8001c82:	2304      	movs	r3, #4
 8001c84:	4699      	mov	r9, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	469b      	mov	fp, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	e720      	b.n	8001ad4 <__aeabi_ddiv+0x48>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2480      	movs	r4, #128	; 0x80
 8001c96:	469a      	mov	sl, r3
 8001c98:	2500      	movs	r5, #0
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	e74f      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	031b      	lsls	r3, r3, #12
 8001ca6:	4219      	tst	r1, r3
 8001ca8:	d008      	beq.n	8001cbc <__aeabi_ddiv+0x230>
 8001caa:	421c      	tst	r4, r3
 8001cac:	d106      	bne.n	8001cbc <__aeabi_ddiv+0x230>
 8001cae:	431c      	orrs	r4, r3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	46ba      	mov	sl, r7
 8001cb4:	0015      	movs	r5, r2
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001cb8:	0b24      	lsrs	r4, r4, #12
 8001cba:	e741      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001cbc:	2480      	movs	r4, #128	; 0x80
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	0324      	lsls	r4, r4, #12
 8001cc2:	431c      	orrs	r4, r3
 8001cc4:	0324      	lsls	r4, r4, #12
 8001cc6:	46b2      	mov	sl, r6
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <__aeabi_ddiv+0x244>)
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	e738      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	000007ff 	.word	0x000007ff
 8001cd4:	fffffc01 	.word	0xfffffc01
 8001cd8:	0800fa98 	.word	0x0800fa98
 8001cdc:	fffff801 	.word	0xfffff801
 8001ce0:	fffffc0d 	.word	0xfffffc0d
 8001ce4:	000003f3 	.word	0x000003f3
 8001ce8:	000003ff 	.word	0x000003ff
 8001cec:	feffffff 	.word	0xfeffffff
 8001cf0:	000007fe 	.word	0x000007fe
 8001cf4:	4544      	cmp	r4, r8
 8001cf6:	d200      	bcs.n	8001cfa <__aeabi_ddiv+0x26e>
 8001cf8:	e116      	b.n	8001f28 <__aeabi_ddiv+0x49c>
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_ddiv+0x272>
 8001cfc:	e111      	b.n	8001f22 <__aeabi_ddiv+0x496>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	425b      	negs	r3, r3
 8001d02:	469c      	mov	ip, r3
 8001d04:	002e      	movs	r6, r5
 8001d06:	4640      	mov	r0, r8
 8001d08:	2500      	movs	r5, #0
 8001d0a:	44e3      	add	fp, ip
 8001d0c:	0223      	lsls	r3, r4, #8
 8001d0e:	0e14      	lsrs	r4, r2, #24
 8001d10:	431c      	orrs	r4, r3
 8001d12:	0c1b      	lsrs	r3, r3, #16
 8001d14:	4699      	mov	r9, r3
 8001d16:	0423      	lsls	r3, r4, #16
 8001d18:	0c1f      	lsrs	r7, r3, #16
 8001d1a:	0212      	lsls	r2, r2, #8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	9200      	str	r2, [sp, #0]
 8001d20:	9701      	str	r7, [sp, #4]
 8001d22:	f7fe fa81 	bl	8000228 <__aeabi_uidivmod>
 8001d26:	0002      	movs	r2, r0
 8001d28:	437a      	muls	r2, r7
 8001d2a:	040b      	lsls	r3, r1, #16
 8001d2c:	0c31      	lsrs	r1, r6, #16
 8001d2e:	4680      	mov	r8, r0
 8001d30:	4319      	orrs	r1, r3
 8001d32:	428a      	cmp	r2, r1
 8001d34:	d90b      	bls.n	8001d4e <__aeabi_ddiv+0x2c2>
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	1909      	adds	r1, r1, r4
 8001d3e:	44e0      	add	r8, ip
 8001d40:	428c      	cmp	r4, r1
 8001d42:	d804      	bhi.n	8001d4e <__aeabi_ddiv+0x2c2>
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d902      	bls.n	8001d4e <__aeabi_ddiv+0x2c2>
 8001d48:	1e83      	subs	r3, r0, #2
 8001d4a:	4698      	mov	r8, r3
 8001d4c:	1909      	adds	r1, r1, r4
 8001d4e:	1a88      	subs	r0, r1, r2
 8001d50:	4649      	mov	r1, r9
 8001d52:	f7fe fa69 	bl	8000228 <__aeabi_uidivmod>
 8001d56:	0409      	lsls	r1, r1, #16
 8001d58:	468c      	mov	ip, r1
 8001d5a:	0431      	lsls	r1, r6, #16
 8001d5c:	4666      	mov	r6, ip
 8001d5e:	9a01      	ldr	r2, [sp, #4]
 8001d60:	0c09      	lsrs	r1, r1, #16
 8001d62:	4342      	muls	r2, r0
 8001d64:	0003      	movs	r3, r0
 8001d66:	4331      	orrs	r1, r6
 8001d68:	428a      	cmp	r2, r1
 8001d6a:	d904      	bls.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001d6c:	1909      	adds	r1, r1, r4
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	428c      	cmp	r4, r1
 8001d72:	d800      	bhi.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001d74:	e111      	b.n	8001f9a <__aeabi_ddiv+0x50e>
 8001d76:	1a89      	subs	r1, r1, r2
 8001d78:	4642      	mov	r2, r8
 8001d7a:	9e00      	ldr	r6, [sp, #0]
 8001d7c:	0412      	lsls	r2, r2, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	0c33      	lsrs	r3, r6, #16
 8001d82:	001f      	movs	r7, r3
 8001d84:	0c10      	lsrs	r0, r2, #16
 8001d86:	4690      	mov	r8, r2
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	0413      	lsls	r3, r2, #16
 8001d8c:	0432      	lsls	r2, r6, #16
 8001d8e:	0c16      	lsrs	r6, r2, #16
 8001d90:	0032      	movs	r2, r6
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	435a      	muls	r2, r3
 8001d96:	9603      	str	r6, [sp, #12]
 8001d98:	437b      	muls	r3, r7
 8001d9a:	4346      	muls	r6, r0
 8001d9c:	4378      	muls	r0, r7
 8001d9e:	0c17      	lsrs	r7, r2, #16
 8001da0:	46bc      	mov	ip, r7
 8001da2:	199b      	adds	r3, r3, r6
 8001da4:	4463      	add	r3, ip
 8001da6:	429e      	cmp	r6, r3
 8001da8:	d903      	bls.n	8001db2 <__aeabi_ddiv+0x326>
 8001daa:	2680      	movs	r6, #128	; 0x80
 8001dac:	0276      	lsls	r6, r6, #9
 8001dae:	46b4      	mov	ip, r6
 8001db0:	4460      	add	r0, ip
 8001db2:	0c1e      	lsrs	r6, r3, #16
 8001db4:	1830      	adds	r0, r6, r0
 8001db6:	0416      	lsls	r6, r2, #16
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	0c36      	lsrs	r6, r6, #16
 8001dbc:	199e      	adds	r6, r3, r6
 8001dbe:	4281      	cmp	r1, r0
 8001dc0:	d200      	bcs.n	8001dc4 <__aeabi_ddiv+0x338>
 8001dc2:	e09c      	b.n	8001efe <__aeabi_ddiv+0x472>
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001dc6:	e097      	b.n	8001ef8 <__aeabi_ddiv+0x46c>
 8001dc8:	1bae      	subs	r6, r5, r6
 8001dca:	1a09      	subs	r1, r1, r0
 8001dcc:	42b5      	cmp	r5, r6
 8001dce:	4180      	sbcs	r0, r0
 8001dd0:	4240      	negs	r0, r0
 8001dd2:	1a08      	subs	r0, r1, r0
 8001dd4:	4284      	cmp	r4, r0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_ddiv+0x34e>
 8001dd8:	e111      	b.n	8001ffe <__aeabi_ddiv+0x572>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	f7fe fa24 	bl	8000228 <__aeabi_uidivmod>
 8001de0:	9a01      	ldr	r2, [sp, #4]
 8001de2:	040b      	lsls	r3, r1, #16
 8001de4:	4342      	muls	r2, r0
 8001de6:	0c31      	lsrs	r1, r6, #16
 8001de8:	0005      	movs	r5, r0
 8001dea:	4319      	orrs	r1, r3
 8001dec:	428a      	cmp	r2, r1
 8001dee:	d907      	bls.n	8001e00 <__aeabi_ddiv+0x374>
 8001df0:	1909      	adds	r1, r1, r4
 8001df2:	3d01      	subs	r5, #1
 8001df4:	428c      	cmp	r4, r1
 8001df6:	d803      	bhi.n	8001e00 <__aeabi_ddiv+0x374>
 8001df8:	428a      	cmp	r2, r1
 8001dfa:	d901      	bls.n	8001e00 <__aeabi_ddiv+0x374>
 8001dfc:	1e85      	subs	r5, r0, #2
 8001dfe:	1909      	adds	r1, r1, r4
 8001e00:	1a88      	subs	r0, r1, r2
 8001e02:	4649      	mov	r1, r9
 8001e04:	f7fe fa10 	bl	8000228 <__aeabi_uidivmod>
 8001e08:	0409      	lsls	r1, r1, #16
 8001e0a:	468c      	mov	ip, r1
 8001e0c:	0431      	lsls	r1, r6, #16
 8001e0e:	4666      	mov	r6, ip
 8001e10:	9a01      	ldr	r2, [sp, #4]
 8001e12:	0c09      	lsrs	r1, r1, #16
 8001e14:	4342      	muls	r2, r0
 8001e16:	0003      	movs	r3, r0
 8001e18:	4331      	orrs	r1, r6
 8001e1a:	428a      	cmp	r2, r1
 8001e1c:	d907      	bls.n	8001e2e <__aeabi_ddiv+0x3a2>
 8001e1e:	1909      	adds	r1, r1, r4
 8001e20:	3b01      	subs	r3, #1
 8001e22:	428c      	cmp	r4, r1
 8001e24:	d803      	bhi.n	8001e2e <__aeabi_ddiv+0x3a2>
 8001e26:	428a      	cmp	r2, r1
 8001e28:	d901      	bls.n	8001e2e <__aeabi_ddiv+0x3a2>
 8001e2a:	1e83      	subs	r3, r0, #2
 8001e2c:	1909      	adds	r1, r1, r4
 8001e2e:	9e03      	ldr	r6, [sp, #12]
 8001e30:	1a89      	subs	r1, r1, r2
 8001e32:	0032      	movs	r2, r6
 8001e34:	042d      	lsls	r5, r5, #16
 8001e36:	431d      	orrs	r5, r3
 8001e38:	9f02      	ldr	r7, [sp, #8]
 8001e3a:	042b      	lsls	r3, r5, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	435a      	muls	r2, r3
 8001e40:	437b      	muls	r3, r7
 8001e42:	469c      	mov	ip, r3
 8001e44:	0c28      	lsrs	r0, r5, #16
 8001e46:	4346      	muls	r6, r0
 8001e48:	0c13      	lsrs	r3, r2, #16
 8001e4a:	44b4      	add	ip, r6
 8001e4c:	4463      	add	r3, ip
 8001e4e:	4378      	muls	r0, r7
 8001e50:	429e      	cmp	r6, r3
 8001e52:	d903      	bls.n	8001e5c <__aeabi_ddiv+0x3d0>
 8001e54:	2680      	movs	r6, #128	; 0x80
 8001e56:	0276      	lsls	r6, r6, #9
 8001e58:	46b4      	mov	ip, r6
 8001e5a:	4460      	add	r0, ip
 8001e5c:	0c1e      	lsrs	r6, r3, #16
 8001e5e:	0412      	lsls	r2, r2, #16
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	0c12      	lsrs	r2, r2, #16
 8001e64:	1830      	adds	r0, r6, r0
 8001e66:	189b      	adds	r3, r3, r2
 8001e68:	4281      	cmp	r1, r0
 8001e6a:	d306      	bcc.n	8001e7a <__aeabi_ddiv+0x3ee>
 8001e6c:	d002      	beq.n	8001e74 <__aeabi_ddiv+0x3e8>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	431d      	orrs	r5, r3
 8001e72:	e6ce      	b.n	8001c12 <__aeabi_ddiv+0x186>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_ddiv+0x3ee>
 8001e78:	e6cb      	b.n	8001c12 <__aeabi_ddiv+0x186>
 8001e7a:	1861      	adds	r1, r4, r1
 8001e7c:	1e6e      	subs	r6, r5, #1
 8001e7e:	42a1      	cmp	r1, r4
 8001e80:	d200      	bcs.n	8001e84 <__aeabi_ddiv+0x3f8>
 8001e82:	e0a4      	b.n	8001fce <__aeabi_ddiv+0x542>
 8001e84:	4281      	cmp	r1, r0
 8001e86:	d200      	bcs.n	8001e8a <__aeabi_ddiv+0x3fe>
 8001e88:	e0c9      	b.n	800201e <__aeabi_ddiv+0x592>
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x402>
 8001e8c:	e0d9      	b.n	8002042 <__aeabi_ddiv+0x5b6>
 8001e8e:	0035      	movs	r5, r6
 8001e90:	e7ed      	b.n	8001e6e <__aeabi_ddiv+0x3e2>
 8001e92:	2501      	movs	r5, #1
 8001e94:	426d      	negs	r5, r5
 8001e96:	2101      	movs	r1, #1
 8001e98:	1a89      	subs	r1, r1, r2
 8001e9a:	2938      	cmp	r1, #56	; 0x38
 8001e9c:	dd00      	ble.n	8001ea0 <__aeabi_ddiv+0x414>
 8001e9e:	e64c      	b.n	8001b3a <__aeabi_ddiv+0xae>
 8001ea0:	291f      	cmp	r1, #31
 8001ea2:	dc00      	bgt.n	8001ea6 <__aeabi_ddiv+0x41a>
 8001ea4:	e07f      	b.n	8001fa6 <__aeabi_ddiv+0x51a>
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	1a9a      	subs	r2, r3, r2
 8001eac:	4643      	mov	r3, r8
 8001eae:	40d3      	lsrs	r3, r2
 8001eb0:	2920      	cmp	r1, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x432>
 8001eb4:	4644      	mov	r4, r8
 8001eb6:	4a65      	ldr	r2, [pc, #404]	; (800204c <__aeabi_ddiv+0x5c0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4094      	lsls	r4, r2
 8001ebc:	4325      	orrs	r5, r4
 8001ebe:	1e6a      	subs	r2, r5, #1
 8001ec0:	4195      	sbcs	r5, r2
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	432b      	orrs	r3, r5
 8001ec6:	0015      	movs	r5, r2
 8001ec8:	2400      	movs	r4, #0
 8001eca:	401d      	ands	r5, r3
 8001ecc:	421a      	tst	r2, r3
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_ddiv+0x446>
 8001ed0:	e0a1      	b.n	8002016 <__aeabi_ddiv+0x58a>
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	2400      	movs	r4, #0
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	2a04      	cmp	r2, #4
 8001eda:	d100      	bne.n	8001ede <__aeabi_ddiv+0x452>
 8001edc:	e098      	b.n	8002010 <__aeabi_ddiv+0x584>
 8001ede:	1d1a      	adds	r2, r3, #4
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	419b      	sbcs	r3, r3
 8001ee4:	425b      	negs	r3, r3
 8001ee6:	18e4      	adds	r4, r4, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	0222      	lsls	r2, r4, #8
 8001eec:	d400      	bmi.n	8001ef0 <__aeabi_ddiv+0x464>
 8001eee:	e08f      	b.n	8002010 <__aeabi_ddiv+0x584>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	e623      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8001ef8:	42b5      	cmp	r5, r6
 8001efa:	d300      	bcc.n	8001efe <__aeabi_ddiv+0x472>
 8001efc:	e764      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001efe:	4643      	mov	r3, r8
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	9b00      	ldr	r3, [sp, #0]
 8001f04:	469c      	mov	ip, r3
 8001f06:	4465      	add	r5, ip
 8001f08:	001f      	movs	r7, r3
 8001f0a:	429d      	cmp	r5, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	425b      	negs	r3, r3
 8001f10:	191b      	adds	r3, r3, r4
 8001f12:	18c9      	adds	r1, r1, r3
 8001f14:	428c      	cmp	r4, r1
 8001f16:	d23a      	bcs.n	8001f8e <__aeabi_ddiv+0x502>
 8001f18:	4288      	cmp	r0, r1
 8001f1a:	d863      	bhi.n	8001fe4 <__aeabi_ddiv+0x558>
 8001f1c:	d060      	beq.n	8001fe0 <__aeabi_ddiv+0x554>
 8001f1e:	4690      	mov	r8, r2
 8001f20:	e752      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001f22:	42aa      	cmp	r2, r5
 8001f24:	d900      	bls.n	8001f28 <__aeabi_ddiv+0x49c>
 8001f26:	e6ea      	b.n	8001cfe <__aeabi_ddiv+0x272>
 8001f28:	4643      	mov	r3, r8
 8001f2a:	07de      	lsls	r6, r3, #31
 8001f2c:	0858      	lsrs	r0, r3, #1
 8001f2e:	086b      	lsrs	r3, r5, #1
 8001f30:	431e      	orrs	r6, r3
 8001f32:	07ed      	lsls	r5, r5, #31
 8001f34:	e6ea      	b.n	8001d0c <__aeabi_ddiv+0x280>
 8001f36:	4648      	mov	r0, r9
 8001f38:	f001 f960 	bl	80031fc <__clzsi2>
 8001f3c:	0001      	movs	r1, r0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	3115      	adds	r1, #21
 8001f42:	3220      	adds	r2, #32
 8001f44:	291c      	cmp	r1, #28
 8001f46:	dc00      	bgt.n	8001f4a <__aeabi_ddiv+0x4be>
 8001f48:	e61a      	b.n	8001b80 <__aeabi_ddiv+0xf4>
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	3808      	subs	r0, #8
 8001f4e:	4083      	lsls	r3, r0
 8001f50:	2500      	movs	r5, #0
 8001f52:	4698      	mov	r8, r3
 8001f54:	e620      	b.n	8001b98 <__aeabi_ddiv+0x10c>
 8001f56:	f001 f951 	bl	80031fc <__clzsi2>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	3215      	adds	r2, #21
 8001f60:	3020      	adds	r0, #32
 8001f62:	2a1c      	cmp	r2, #28
 8001f64:	dc00      	bgt.n	8001f68 <__aeabi_ddiv+0x4dc>
 8001f66:	e630      	b.n	8001bca <__aeabi_ddiv+0x13e>
 8001f68:	4654      	mov	r4, sl
 8001f6a:	3b08      	subs	r3, #8
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	409c      	lsls	r4, r3
 8001f70:	e635      	b.n	8001bde <__aeabi_ddiv+0x152>
 8001f72:	230f      	movs	r3, #15
 8001f74:	402b      	ands	r3, r5
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x4f0>
 8001f7a:	e652      	b.n	8001c22 <__aeabi_ddiv+0x196>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	425b      	negs	r3, r3
 8001f80:	42ab      	cmp	r3, r5
 8001f82:	419b      	sbcs	r3, r3
 8001f84:	3504      	adds	r5, #4
 8001f86:	425b      	negs	r3, r3
 8001f88:	08ed      	lsrs	r5, r5, #3
 8001f8a:	4498      	add	r8, r3
 8001f8c:	e64a      	b.n	8001c24 <__aeabi_ddiv+0x198>
 8001f8e:	428c      	cmp	r4, r1
 8001f90:	d1c5      	bne.n	8001f1e <__aeabi_ddiv+0x492>
 8001f92:	42af      	cmp	r7, r5
 8001f94:	d9c0      	bls.n	8001f18 <__aeabi_ddiv+0x48c>
 8001f96:	4690      	mov	r8, r2
 8001f98:	e716      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001f9a:	428a      	cmp	r2, r1
 8001f9c:	d800      	bhi.n	8001fa0 <__aeabi_ddiv+0x514>
 8001f9e:	e6ea      	b.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001fa0:	1e83      	subs	r3, r0, #2
 8001fa2:	1909      	adds	r1, r1, r4
 8001fa4:	e6e7      	b.n	8001d76 <__aeabi_ddiv+0x2ea>
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <__aeabi_ddiv+0x5c4>)
 8001fa8:	0028      	movs	r0, r5
 8001faa:	445a      	add	r2, fp
 8001fac:	4643      	mov	r3, r8
 8001fae:	4095      	lsls	r5, r2
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	40c8      	lsrs	r0, r1
 8001fb4:	1e6a      	subs	r2, r5, #1
 8001fb6:	4195      	sbcs	r5, r2
 8001fb8:	4644      	mov	r4, r8
 8001fba:	4303      	orrs	r3, r0
 8001fbc:	432b      	orrs	r3, r5
 8001fbe:	40cc      	lsrs	r4, r1
 8001fc0:	075a      	lsls	r2, r3, #29
 8001fc2:	d092      	beq.n	8001eea <__aeabi_ddiv+0x45e>
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	2a04      	cmp	r2, #4
 8001fca:	d188      	bne.n	8001ede <__aeabi_ddiv+0x452>
 8001fcc:	e78d      	b.n	8001eea <__aeabi_ddiv+0x45e>
 8001fce:	0035      	movs	r5, r6
 8001fd0:	4281      	cmp	r1, r0
 8001fd2:	d000      	beq.n	8001fd6 <__aeabi_ddiv+0x54a>
 8001fd4:	e74b      	b.n	8001e6e <__aeabi_ddiv+0x3e2>
 8001fd6:	9a00      	ldr	r2, [sp, #0]
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d000      	beq.n	8001fde <__aeabi_ddiv+0x552>
 8001fdc:	e747      	b.n	8001e6e <__aeabi_ddiv+0x3e2>
 8001fde:	e618      	b.n	8001c12 <__aeabi_ddiv+0x186>
 8001fe0:	42ae      	cmp	r6, r5
 8001fe2:	d99c      	bls.n	8001f1e <__aeabi_ddiv+0x492>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	425b      	negs	r3, r3
 8001fe8:	469c      	mov	ip, r3
 8001fea:	9b00      	ldr	r3, [sp, #0]
 8001fec:	44e0      	add	r8, ip
 8001fee:	469c      	mov	ip, r3
 8001ff0:	4465      	add	r5, ip
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	191b      	adds	r3, r3, r4
 8001ffa:	18c9      	adds	r1, r1, r3
 8001ffc:	e6e4      	b.n	8001dc8 <__aeabi_ddiv+0x33c>
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <__aeabi_ddiv+0x5c8>)
 8002000:	445a      	add	r2, fp
 8002002:	2a00      	cmp	r2, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_ddiv+0x57c>
 8002006:	e744      	b.n	8001e92 <__aeabi_ddiv+0x406>
 8002008:	2301      	movs	r3, #1
 800200a:	2500      	movs	r5, #0
 800200c:	4498      	add	r8, r3
 800200e:	e609      	b.n	8001c24 <__aeabi_ddiv+0x198>
 8002010:	0765      	lsls	r5, r4, #29
 8002012:	0264      	lsls	r4, r4, #9
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	431d      	orrs	r5, r3
 800201a:	2300      	movs	r3, #0
 800201c:	e590      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 800201e:	9e00      	ldr	r6, [sp, #0]
 8002020:	3d02      	subs	r5, #2
 8002022:	0072      	lsls	r2, r6, #1
 8002024:	42b2      	cmp	r2, r6
 8002026:	41bf      	sbcs	r7, r7
 8002028:	427f      	negs	r7, r7
 800202a:	193c      	adds	r4, r7, r4
 800202c:	1909      	adds	r1, r1, r4
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	e7ce      	b.n	8001fd0 <__aeabi_ddiv+0x544>
 8002032:	2480      	movs	r4, #128	; 0x80
 8002034:	4643      	mov	r3, r8
 8002036:	0324      	lsls	r4, r4, #12
 8002038:	431c      	orrs	r4, r3
 800203a:	0324      	lsls	r4, r4, #12
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <__aeabi_ddiv+0x5cc>)
 800203e:	0b24      	lsrs	r4, r4, #12
 8002040:	e57e      	b.n	8001b40 <__aeabi_ddiv+0xb4>
 8002042:	9a00      	ldr	r2, [sp, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d3ea      	bcc.n	800201e <__aeabi_ddiv+0x592>
 8002048:	0035      	movs	r5, r6
 800204a:	e7c4      	b.n	8001fd6 <__aeabi_ddiv+0x54a>
 800204c:	0000043e 	.word	0x0000043e
 8002050:	0000041e 	.word	0x0000041e
 8002054:	000003ff 	.word	0x000003ff
 8002058:	000007ff 	.word	0x000007ff

0800205c <__eqdf2>:
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	464f      	mov	r7, r9
 8002060:	4646      	mov	r6, r8
 8002062:	46d6      	mov	lr, sl
 8002064:	4694      	mov	ip, r2
 8002066:	4691      	mov	r9, r2
 8002068:	031a      	lsls	r2, r3, #12
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	4d18      	ldr	r5, [pc, #96]	; (80020d0 <__eqdf2+0x74>)
 800206e:	b5c0      	push	{r6, r7, lr}
 8002070:	004c      	lsls	r4, r1, #1
 8002072:	030f      	lsls	r7, r1, #12
 8002074:	4692      	mov	sl, r2
 8002076:	005a      	lsls	r2, r3, #1
 8002078:	0006      	movs	r6, r0
 800207a:	4680      	mov	r8, r0
 800207c:	0b3f      	lsrs	r7, r7, #12
 800207e:	2001      	movs	r0, #1
 8002080:	0d64      	lsrs	r4, r4, #21
 8002082:	0fc9      	lsrs	r1, r1, #31
 8002084:	0d52      	lsrs	r2, r2, #21
 8002086:	0fdb      	lsrs	r3, r3, #31
 8002088:	42ac      	cmp	r4, r5
 800208a:	d00a      	beq.n	80020a2 <__eqdf2+0x46>
 800208c:	42aa      	cmp	r2, r5
 800208e:	d003      	beq.n	8002098 <__eqdf2+0x3c>
 8002090:	4294      	cmp	r4, r2
 8002092:	d101      	bne.n	8002098 <__eqdf2+0x3c>
 8002094:	4557      	cmp	r7, sl
 8002096:	d00d      	beq.n	80020b4 <__eqdf2+0x58>
 8002098:	bce0      	pop	{r5, r6, r7}
 800209a:	46ba      	mov	sl, r7
 800209c:	46b1      	mov	r9, r6
 800209e:	46a8      	mov	r8, r5
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a2:	003d      	movs	r5, r7
 80020a4:	4335      	orrs	r5, r6
 80020a6:	d1f7      	bne.n	8002098 <__eqdf2+0x3c>
 80020a8:	42a2      	cmp	r2, r4
 80020aa:	d1f5      	bne.n	8002098 <__eqdf2+0x3c>
 80020ac:	4652      	mov	r2, sl
 80020ae:	4665      	mov	r5, ip
 80020b0:	432a      	orrs	r2, r5
 80020b2:	d1f1      	bne.n	8002098 <__eqdf2+0x3c>
 80020b4:	2001      	movs	r0, #1
 80020b6:	45c8      	cmp	r8, r9
 80020b8:	d1ee      	bne.n	8002098 <__eqdf2+0x3c>
 80020ba:	4299      	cmp	r1, r3
 80020bc:	d006      	beq.n	80020cc <__eqdf2+0x70>
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d1ea      	bne.n	8002098 <__eqdf2+0x3c>
 80020c2:	433e      	orrs	r6, r7
 80020c4:	0030      	movs	r0, r6
 80020c6:	1e46      	subs	r6, r0, #1
 80020c8:	41b0      	sbcs	r0, r6
 80020ca:	e7e5      	b.n	8002098 <__eqdf2+0x3c>
 80020cc:	2000      	movs	r0, #0
 80020ce:	e7e3      	b.n	8002098 <__eqdf2+0x3c>
 80020d0:	000007ff 	.word	0x000007ff

080020d4 <__gedf2>:
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	464e      	mov	r6, r9
 80020d8:	4645      	mov	r5, r8
 80020da:	4657      	mov	r7, sl
 80020dc:	46de      	mov	lr, fp
 80020de:	0004      	movs	r4, r0
 80020e0:	0018      	movs	r0, r3
 80020e2:	b5e0      	push	{r5, r6, r7, lr}
 80020e4:	0016      	movs	r6, r2
 80020e6:	031b      	lsls	r3, r3, #12
 80020e8:	0b1b      	lsrs	r3, r3, #12
 80020ea:	4d32      	ldr	r5, [pc, #200]	; (80021b4 <__gedf2+0xe0>)
 80020ec:	030f      	lsls	r7, r1, #12
 80020ee:	004a      	lsls	r2, r1, #1
 80020f0:	4699      	mov	r9, r3
 80020f2:	0043      	lsls	r3, r0, #1
 80020f4:	46a4      	mov	ip, r4
 80020f6:	46b0      	mov	r8, r6
 80020f8:	0b3f      	lsrs	r7, r7, #12
 80020fa:	0d52      	lsrs	r2, r2, #21
 80020fc:	0fc9      	lsrs	r1, r1, #31
 80020fe:	0d5b      	lsrs	r3, r3, #21
 8002100:	0fc0      	lsrs	r0, r0, #31
 8002102:	42aa      	cmp	r2, r5
 8002104:	d029      	beq.n	800215a <__gedf2+0x86>
 8002106:	42ab      	cmp	r3, r5
 8002108:	d018      	beq.n	800213c <__gedf2+0x68>
 800210a:	2a00      	cmp	r2, #0
 800210c:	d12a      	bne.n	8002164 <__gedf2+0x90>
 800210e:	433c      	orrs	r4, r7
 8002110:	46a3      	mov	fp, r4
 8002112:	4265      	negs	r5, r4
 8002114:	4165      	adcs	r5, r4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <__gedf2+0x4c>
 800211a:	464c      	mov	r4, r9
 800211c:	4326      	orrs	r6, r4
 800211e:	d027      	beq.n	8002170 <__gedf2+0x9c>
 8002120:	2d00      	cmp	r5, #0
 8002122:	d115      	bne.n	8002150 <__gedf2+0x7c>
 8002124:	4281      	cmp	r1, r0
 8002126:	d028      	beq.n	800217a <__gedf2+0xa6>
 8002128:	2002      	movs	r0, #2
 800212a:	3901      	subs	r1, #1
 800212c:	4008      	ands	r0, r1
 800212e:	3801      	subs	r0, #1
 8002130:	bcf0      	pop	{r4, r5, r6, r7}
 8002132:	46bb      	mov	fp, r7
 8002134:	46b2      	mov	sl, r6
 8002136:	46a9      	mov	r9, r5
 8002138:	46a0      	mov	r8, r4
 800213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213c:	464d      	mov	r5, r9
 800213e:	432e      	orrs	r6, r5
 8002140:	d12f      	bne.n	80021a2 <__gedf2+0xce>
 8002142:	2a00      	cmp	r2, #0
 8002144:	d1ee      	bne.n	8002124 <__gedf2+0x50>
 8002146:	433c      	orrs	r4, r7
 8002148:	4265      	negs	r5, r4
 800214a:	4165      	adcs	r5, r4
 800214c:	2d00      	cmp	r5, #0
 800214e:	d0e9      	beq.n	8002124 <__gedf2+0x50>
 8002150:	2800      	cmp	r0, #0
 8002152:	d1ed      	bne.n	8002130 <__gedf2+0x5c>
 8002154:	2001      	movs	r0, #1
 8002156:	4240      	negs	r0, r0
 8002158:	e7ea      	b.n	8002130 <__gedf2+0x5c>
 800215a:	003d      	movs	r5, r7
 800215c:	4325      	orrs	r5, r4
 800215e:	d120      	bne.n	80021a2 <__gedf2+0xce>
 8002160:	4293      	cmp	r3, r2
 8002162:	d0eb      	beq.n	800213c <__gedf2+0x68>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1dd      	bne.n	8002124 <__gedf2+0x50>
 8002168:	464c      	mov	r4, r9
 800216a:	4326      	orrs	r6, r4
 800216c:	d1da      	bne.n	8002124 <__gedf2+0x50>
 800216e:	e7db      	b.n	8002128 <__gedf2+0x54>
 8002170:	465b      	mov	r3, fp
 8002172:	2000      	movs	r0, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0db      	beq.n	8002130 <__gedf2+0x5c>
 8002178:	e7d6      	b.n	8002128 <__gedf2+0x54>
 800217a:	429a      	cmp	r2, r3
 800217c:	dc0a      	bgt.n	8002194 <__gedf2+0xc0>
 800217e:	dbe7      	blt.n	8002150 <__gedf2+0x7c>
 8002180:	454f      	cmp	r7, r9
 8002182:	d8d1      	bhi.n	8002128 <__gedf2+0x54>
 8002184:	d010      	beq.n	80021a8 <__gedf2+0xd4>
 8002186:	2000      	movs	r0, #0
 8002188:	454f      	cmp	r7, r9
 800218a:	d2d1      	bcs.n	8002130 <__gedf2+0x5c>
 800218c:	2900      	cmp	r1, #0
 800218e:	d0e1      	beq.n	8002154 <__gedf2+0x80>
 8002190:	0008      	movs	r0, r1
 8002192:	e7cd      	b.n	8002130 <__gedf2+0x5c>
 8002194:	4243      	negs	r3, r0
 8002196:	4158      	adcs	r0, r3
 8002198:	2302      	movs	r3, #2
 800219a:	4240      	negs	r0, r0
 800219c:	4018      	ands	r0, r3
 800219e:	3801      	subs	r0, #1
 80021a0:	e7c6      	b.n	8002130 <__gedf2+0x5c>
 80021a2:	2002      	movs	r0, #2
 80021a4:	4240      	negs	r0, r0
 80021a6:	e7c3      	b.n	8002130 <__gedf2+0x5c>
 80021a8:	45c4      	cmp	ip, r8
 80021aa:	d8bd      	bhi.n	8002128 <__gedf2+0x54>
 80021ac:	2000      	movs	r0, #0
 80021ae:	45c4      	cmp	ip, r8
 80021b0:	d2be      	bcs.n	8002130 <__gedf2+0x5c>
 80021b2:	e7eb      	b.n	800218c <__gedf2+0xb8>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__ledf2>:
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	464e      	mov	r6, r9
 80021bc:	4645      	mov	r5, r8
 80021be:	4657      	mov	r7, sl
 80021c0:	46de      	mov	lr, fp
 80021c2:	0004      	movs	r4, r0
 80021c4:	0018      	movs	r0, r3
 80021c6:	b5e0      	push	{r5, r6, r7, lr}
 80021c8:	0016      	movs	r6, r2
 80021ca:	031b      	lsls	r3, r3, #12
 80021cc:	0b1b      	lsrs	r3, r3, #12
 80021ce:	4d31      	ldr	r5, [pc, #196]	; (8002294 <__ledf2+0xdc>)
 80021d0:	030f      	lsls	r7, r1, #12
 80021d2:	004a      	lsls	r2, r1, #1
 80021d4:	4699      	mov	r9, r3
 80021d6:	0043      	lsls	r3, r0, #1
 80021d8:	46a4      	mov	ip, r4
 80021da:	46b0      	mov	r8, r6
 80021dc:	0b3f      	lsrs	r7, r7, #12
 80021de:	0d52      	lsrs	r2, r2, #21
 80021e0:	0fc9      	lsrs	r1, r1, #31
 80021e2:	0d5b      	lsrs	r3, r3, #21
 80021e4:	0fc0      	lsrs	r0, r0, #31
 80021e6:	42aa      	cmp	r2, r5
 80021e8:	d011      	beq.n	800220e <__ledf2+0x56>
 80021ea:	42ab      	cmp	r3, r5
 80021ec:	d014      	beq.n	8002218 <__ledf2+0x60>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d12f      	bne.n	8002252 <__ledf2+0x9a>
 80021f2:	433c      	orrs	r4, r7
 80021f4:	46a3      	mov	fp, r4
 80021f6:	4265      	negs	r5, r4
 80021f8:	4165      	adcs	r5, r4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <__ledf2+0x70>
 80021fe:	464c      	mov	r4, r9
 8002200:	4326      	orrs	r6, r4
 8002202:	d111      	bne.n	8002228 <__ledf2+0x70>
 8002204:	465b      	mov	r3, fp
 8002206:	2000      	movs	r0, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <__ledf2+0x84>
 800220c:	e010      	b.n	8002230 <__ledf2+0x78>
 800220e:	003d      	movs	r5, r7
 8002210:	4325      	orrs	r5, r4
 8002212:	d112      	bne.n	800223a <__ledf2+0x82>
 8002214:	4293      	cmp	r3, r2
 8002216:	d11c      	bne.n	8002252 <__ledf2+0x9a>
 8002218:	464d      	mov	r5, r9
 800221a:	432e      	orrs	r6, r5
 800221c:	d10d      	bne.n	800223a <__ledf2+0x82>
 800221e:	2a00      	cmp	r2, #0
 8002220:	d104      	bne.n	800222c <__ledf2+0x74>
 8002222:	433c      	orrs	r4, r7
 8002224:	4265      	negs	r5, r4
 8002226:	4165      	adcs	r5, r4
 8002228:	2d00      	cmp	r5, #0
 800222a:	d10d      	bne.n	8002248 <__ledf2+0x90>
 800222c:	4281      	cmp	r1, r0
 800222e:	d016      	beq.n	800225e <__ledf2+0xa6>
 8002230:	2002      	movs	r0, #2
 8002232:	3901      	subs	r1, #1
 8002234:	4008      	ands	r0, r1
 8002236:	3801      	subs	r0, #1
 8002238:	e000      	b.n	800223c <__ledf2+0x84>
 800223a:	2002      	movs	r0, #2
 800223c:	bcf0      	pop	{r4, r5, r6, r7}
 800223e:	46bb      	mov	fp, r7
 8002240:	46b2      	mov	sl, r6
 8002242:	46a9      	mov	r9, r5
 8002244:	46a0      	mov	r8, r4
 8002246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002248:	2800      	cmp	r0, #0
 800224a:	d1f7      	bne.n	800223c <__ledf2+0x84>
 800224c:	2001      	movs	r0, #1
 800224e:	4240      	negs	r0, r0
 8002250:	e7f4      	b.n	800223c <__ledf2+0x84>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ea      	bne.n	800222c <__ledf2+0x74>
 8002256:	464c      	mov	r4, r9
 8002258:	4326      	orrs	r6, r4
 800225a:	d1e7      	bne.n	800222c <__ledf2+0x74>
 800225c:	e7e8      	b.n	8002230 <__ledf2+0x78>
 800225e:	429a      	cmp	r2, r3
 8002260:	dd06      	ble.n	8002270 <__ledf2+0xb8>
 8002262:	4243      	negs	r3, r0
 8002264:	4158      	adcs	r0, r3
 8002266:	2302      	movs	r3, #2
 8002268:	4240      	negs	r0, r0
 800226a:	4018      	ands	r0, r3
 800226c:	3801      	subs	r0, #1
 800226e:	e7e5      	b.n	800223c <__ledf2+0x84>
 8002270:	429a      	cmp	r2, r3
 8002272:	dbe9      	blt.n	8002248 <__ledf2+0x90>
 8002274:	454f      	cmp	r7, r9
 8002276:	d8db      	bhi.n	8002230 <__ledf2+0x78>
 8002278:	d006      	beq.n	8002288 <__ledf2+0xd0>
 800227a:	2000      	movs	r0, #0
 800227c:	454f      	cmp	r7, r9
 800227e:	d2dd      	bcs.n	800223c <__ledf2+0x84>
 8002280:	2900      	cmp	r1, #0
 8002282:	d0e3      	beq.n	800224c <__ledf2+0x94>
 8002284:	0008      	movs	r0, r1
 8002286:	e7d9      	b.n	800223c <__ledf2+0x84>
 8002288:	45c4      	cmp	ip, r8
 800228a:	d8d1      	bhi.n	8002230 <__ledf2+0x78>
 800228c:	2000      	movs	r0, #0
 800228e:	45c4      	cmp	ip, r8
 8002290:	d2d4      	bcs.n	800223c <__ledf2+0x84>
 8002292:	e7f5      	b.n	8002280 <__ledf2+0xc8>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dmul>:
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	4657      	mov	r7, sl
 800229c:	464e      	mov	r6, r9
 800229e:	4645      	mov	r5, r8
 80022a0:	46de      	mov	lr, fp
 80022a2:	b5e0      	push	{r5, r6, r7, lr}
 80022a4:	4698      	mov	r8, r3
 80022a6:	030c      	lsls	r4, r1, #12
 80022a8:	004b      	lsls	r3, r1, #1
 80022aa:	0006      	movs	r6, r0
 80022ac:	4692      	mov	sl, r2
 80022ae:	b087      	sub	sp, #28
 80022b0:	0b24      	lsrs	r4, r4, #12
 80022b2:	0d5b      	lsrs	r3, r3, #21
 80022b4:	0fcf      	lsrs	r7, r1, #31
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06c      	beq.n	8002394 <__aeabi_dmul+0xfc>
 80022ba:	4add      	ldr	r2, [pc, #884]	; (8002630 <__aeabi_dmul+0x398>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0x2a>
 80022c0:	e086      	b.n	80023d0 <__aeabi_dmul+0x138>
 80022c2:	0f42      	lsrs	r2, r0, #29
 80022c4:	00e4      	lsls	r4, r4, #3
 80022c6:	4314      	orrs	r4, r2
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	0412      	lsls	r2, r2, #16
 80022cc:	4314      	orrs	r4, r2
 80022ce:	4ad9      	ldr	r2, [pc, #868]	; (8002634 <__aeabi_dmul+0x39c>)
 80022d0:	00c5      	lsls	r5, r0, #3
 80022d2:	4694      	mov	ip, r2
 80022d4:	4463      	add	r3, ip
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	4699      	mov	r9, r3
 80022dc:	469b      	mov	fp, r3
 80022de:	4643      	mov	r3, r8
 80022e0:	4642      	mov	r2, r8
 80022e2:	031e      	lsls	r6, r3, #12
 80022e4:	0fd2      	lsrs	r2, r2, #31
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4650      	mov	r0, sl
 80022ea:	4690      	mov	r8, r2
 80022ec:	0b36      	lsrs	r6, r6, #12
 80022ee:	0d5b      	lsrs	r3, r3, #21
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dmul+0x5c>
 80022f2:	e078      	b.n	80023e6 <__aeabi_dmul+0x14e>
 80022f4:	4ace      	ldr	r2, [pc, #824]	; (8002630 <__aeabi_dmul+0x398>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01d      	beq.n	8002336 <__aeabi_dmul+0x9e>
 80022fa:	49ce      	ldr	r1, [pc, #824]	; (8002634 <__aeabi_dmul+0x39c>)
 80022fc:	0f42      	lsrs	r2, r0, #29
 80022fe:	468c      	mov	ip, r1
 8002300:	9900      	ldr	r1, [sp, #0]
 8002302:	4463      	add	r3, ip
 8002304:	00f6      	lsls	r6, r6, #3
 8002306:	468c      	mov	ip, r1
 8002308:	4316      	orrs	r6, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	449c      	add	ip, r3
 800230e:	0412      	lsls	r2, r2, #16
 8002310:	4663      	mov	r3, ip
 8002312:	4316      	orrs	r6, r2
 8002314:	00c2      	lsls	r2, r0, #3
 8002316:	2000      	movs	r0, #0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	9900      	ldr	r1, [sp, #0]
 800231c:	4643      	mov	r3, r8
 800231e:	3101      	adds	r1, #1
 8002320:	468c      	mov	ip, r1
 8002322:	4649      	mov	r1, r9
 8002324:	407b      	eors	r3, r7
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	290f      	cmp	r1, #15
 800232a:	d900      	bls.n	800232e <__aeabi_dmul+0x96>
 800232c:	e07e      	b.n	800242c <__aeabi_dmul+0x194>
 800232e:	4bc2      	ldr	r3, [pc, #776]	; (8002638 <__aeabi_dmul+0x3a0>)
 8002330:	0089      	lsls	r1, r1, #2
 8002332:	5859      	ldr	r1, [r3, r1]
 8002334:	468f      	mov	pc, r1
 8002336:	4652      	mov	r2, sl
 8002338:	9b00      	ldr	r3, [sp, #0]
 800233a:	4332      	orrs	r2, r6
 800233c:	d000      	beq.n	8002340 <__aeabi_dmul+0xa8>
 800233e:	e156      	b.n	80025ee <__aeabi_dmul+0x356>
 8002340:	49bb      	ldr	r1, [pc, #748]	; (8002630 <__aeabi_dmul+0x398>)
 8002342:	2600      	movs	r6, #0
 8002344:	468c      	mov	ip, r1
 8002346:	4463      	add	r3, ip
 8002348:	4649      	mov	r1, r9
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2302      	movs	r3, #2
 800234e:	4319      	orrs	r1, r3
 8002350:	4689      	mov	r9, r1
 8002352:	2002      	movs	r0, #2
 8002354:	e7e1      	b.n	800231a <__aeabi_dmul+0x82>
 8002356:	4643      	mov	r3, r8
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	0034      	movs	r4, r6
 800235c:	0015      	movs	r5, r2
 800235e:	4683      	mov	fp, r0
 8002360:	465b      	mov	r3, fp
 8002362:	2b02      	cmp	r3, #2
 8002364:	d05e      	beq.n	8002424 <__aeabi_dmul+0x18c>
 8002366:	2b03      	cmp	r3, #3
 8002368:	d100      	bne.n	800236c <__aeabi_dmul+0xd4>
 800236a:	e1f3      	b.n	8002754 <__aeabi_dmul+0x4bc>
 800236c:	2b01      	cmp	r3, #1
 800236e:	d000      	beq.n	8002372 <__aeabi_dmul+0xda>
 8002370:	e118      	b.n	80025a4 <__aeabi_dmul+0x30c>
 8002372:	2200      	movs	r2, #0
 8002374:	2400      	movs	r4, #0
 8002376:	2500      	movs	r5, #0
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	0512      	lsls	r2, r2, #20
 800237c:	4322      	orrs	r2, r4
 800237e:	07db      	lsls	r3, r3, #31
 8002380:	431a      	orrs	r2, r3
 8002382:	0028      	movs	r0, r5
 8002384:	0011      	movs	r1, r2
 8002386:	b007      	add	sp, #28
 8002388:	bcf0      	pop	{r4, r5, r6, r7}
 800238a:	46bb      	mov	fp, r7
 800238c:	46b2      	mov	sl, r6
 800238e:	46a9      	mov	r9, r5
 8002390:	46a0      	mov	r8, r4
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002394:	0025      	movs	r5, r4
 8002396:	4305      	orrs	r5, r0
 8002398:	d100      	bne.n	800239c <__aeabi_dmul+0x104>
 800239a:	e141      	b.n	8002620 <__aeabi_dmul+0x388>
 800239c:	2c00      	cmp	r4, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dmul+0x10a>
 80023a0:	e1ad      	b.n	80026fe <__aeabi_dmul+0x466>
 80023a2:	0020      	movs	r0, r4
 80023a4:	f000 ff2a 	bl	80031fc <__clzsi2>
 80023a8:	0001      	movs	r1, r0
 80023aa:	0002      	movs	r2, r0
 80023ac:	390b      	subs	r1, #11
 80023ae:	231d      	movs	r3, #29
 80023b0:	0010      	movs	r0, r2
 80023b2:	1a5b      	subs	r3, r3, r1
 80023b4:	0031      	movs	r1, r6
 80023b6:	0035      	movs	r5, r6
 80023b8:	3808      	subs	r0, #8
 80023ba:	4084      	lsls	r4, r0
 80023bc:	40d9      	lsrs	r1, r3
 80023be:	4085      	lsls	r5, r0
 80023c0:	430c      	orrs	r4, r1
 80023c2:	489e      	ldr	r0, [pc, #632]	; (800263c <__aeabi_dmul+0x3a4>)
 80023c4:	1a83      	subs	r3, r0, r2
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	4699      	mov	r9, r3
 80023cc:	469b      	mov	fp, r3
 80023ce:	e786      	b.n	80022de <__aeabi_dmul+0x46>
 80023d0:	0005      	movs	r5, r0
 80023d2:	4325      	orrs	r5, r4
 80023d4:	d000      	beq.n	80023d8 <__aeabi_dmul+0x140>
 80023d6:	e11c      	b.n	8002612 <__aeabi_dmul+0x37a>
 80023d8:	2208      	movs	r2, #8
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2302      	movs	r3, #2
 80023de:	2400      	movs	r4, #0
 80023e0:	4691      	mov	r9, r2
 80023e2:	469b      	mov	fp, r3
 80023e4:	e77b      	b.n	80022de <__aeabi_dmul+0x46>
 80023e6:	4652      	mov	r2, sl
 80023e8:	4332      	orrs	r2, r6
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x156>
 80023ec:	e10a      	b.n	8002604 <__aeabi_dmul+0x36c>
 80023ee:	2e00      	cmp	r6, #0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dmul+0x15c>
 80023f2:	e176      	b.n	80026e2 <__aeabi_dmul+0x44a>
 80023f4:	0030      	movs	r0, r6
 80023f6:	f000 ff01 	bl	80031fc <__clzsi2>
 80023fa:	0002      	movs	r2, r0
 80023fc:	3a0b      	subs	r2, #11
 80023fe:	231d      	movs	r3, #29
 8002400:	0001      	movs	r1, r0
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	4652      	mov	r2, sl
 8002406:	3908      	subs	r1, #8
 8002408:	40da      	lsrs	r2, r3
 800240a:	408e      	lsls	r6, r1
 800240c:	4316      	orrs	r6, r2
 800240e:	4652      	mov	r2, sl
 8002410:	408a      	lsls	r2, r1
 8002412:	9b00      	ldr	r3, [sp, #0]
 8002414:	4989      	ldr	r1, [pc, #548]	; (800263c <__aeabi_dmul+0x3a4>)
 8002416:	1a18      	subs	r0, r3, r0
 8002418:	0003      	movs	r3, r0
 800241a:	468c      	mov	ip, r1
 800241c:	4463      	add	r3, ip
 800241e:	2000      	movs	r0, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	e77a      	b.n	800231a <__aeabi_dmul+0x82>
 8002424:	2400      	movs	r4, #0
 8002426:	2500      	movs	r5, #0
 8002428:	4a81      	ldr	r2, [pc, #516]	; (8002630 <__aeabi_dmul+0x398>)
 800242a:	e7a5      	b.n	8002378 <__aeabi_dmul+0xe0>
 800242c:	0c2f      	lsrs	r7, r5, #16
 800242e:	042d      	lsls	r5, r5, #16
 8002430:	0c2d      	lsrs	r5, r5, #16
 8002432:	002b      	movs	r3, r5
 8002434:	0c11      	lsrs	r1, r2, #16
 8002436:	0412      	lsls	r2, r2, #16
 8002438:	0c12      	lsrs	r2, r2, #16
 800243a:	4353      	muls	r3, r2
 800243c:	4698      	mov	r8, r3
 800243e:	0013      	movs	r3, r2
 8002440:	0028      	movs	r0, r5
 8002442:	437b      	muls	r3, r7
 8002444:	4699      	mov	r9, r3
 8002446:	4348      	muls	r0, r1
 8002448:	4448      	add	r0, r9
 800244a:	4683      	mov	fp, r0
 800244c:	4640      	mov	r0, r8
 800244e:	000b      	movs	r3, r1
 8002450:	0c00      	lsrs	r0, r0, #16
 8002452:	4682      	mov	sl, r0
 8002454:	4658      	mov	r0, fp
 8002456:	437b      	muls	r3, r7
 8002458:	4450      	add	r0, sl
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	4581      	cmp	r9, r0
 800245e:	d906      	bls.n	800246e <__aeabi_dmul+0x1d6>
 8002460:	469a      	mov	sl, r3
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	025b      	lsls	r3, r3, #9
 8002466:	4699      	mov	r9, r3
 8002468:	44ca      	add	sl, r9
 800246a:	4653      	mov	r3, sl
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	0c03      	lsrs	r3, r0, #16
 8002470:	469b      	mov	fp, r3
 8002472:	4643      	mov	r3, r8
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	0400      	lsls	r0, r0, #16
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	4698      	mov	r8, r3
 800247c:	0003      	movs	r3, r0
 800247e:	4443      	add	r3, r8
 8002480:	9304      	str	r3, [sp, #16]
 8002482:	0c33      	lsrs	r3, r6, #16
 8002484:	4699      	mov	r9, r3
 8002486:	002b      	movs	r3, r5
 8002488:	0436      	lsls	r6, r6, #16
 800248a:	0c36      	lsrs	r6, r6, #16
 800248c:	4373      	muls	r3, r6
 800248e:	4698      	mov	r8, r3
 8002490:	0033      	movs	r3, r6
 8002492:	437b      	muls	r3, r7
 8002494:	469a      	mov	sl, r3
 8002496:	464b      	mov	r3, r9
 8002498:	435d      	muls	r5, r3
 800249a:	435f      	muls	r7, r3
 800249c:	4643      	mov	r3, r8
 800249e:	4455      	add	r5, sl
 80024a0:	0c18      	lsrs	r0, r3, #16
 80024a2:	1940      	adds	r0, r0, r5
 80024a4:	4582      	cmp	sl, r0
 80024a6:	d903      	bls.n	80024b0 <__aeabi_dmul+0x218>
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	469a      	mov	sl, r3
 80024ae:	4457      	add	r7, sl
 80024b0:	0c05      	lsrs	r5, r0, #16
 80024b2:	19eb      	adds	r3, r5, r7
 80024b4:	9305      	str	r3, [sp, #20]
 80024b6:	4643      	mov	r3, r8
 80024b8:	041d      	lsls	r5, r3, #16
 80024ba:	0c2d      	lsrs	r5, r5, #16
 80024bc:	0400      	lsls	r0, r0, #16
 80024be:	1940      	adds	r0, r0, r5
 80024c0:	0c25      	lsrs	r5, r4, #16
 80024c2:	0424      	lsls	r4, r4, #16
 80024c4:	0c24      	lsrs	r4, r4, #16
 80024c6:	0027      	movs	r7, r4
 80024c8:	4357      	muls	r7, r2
 80024ca:	436a      	muls	r2, r5
 80024cc:	4690      	mov	r8, r2
 80024ce:	002a      	movs	r2, r5
 80024d0:	0c3b      	lsrs	r3, r7, #16
 80024d2:	469a      	mov	sl, r3
 80024d4:	434a      	muls	r2, r1
 80024d6:	4361      	muls	r1, r4
 80024d8:	4441      	add	r1, r8
 80024da:	4451      	add	r1, sl
 80024dc:	4483      	add	fp, r0
 80024de:	4588      	cmp	r8, r1
 80024e0:	d903      	bls.n	80024ea <__aeabi_dmul+0x252>
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	4698      	mov	r8, r3
 80024e8:	4442      	add	r2, r8
 80024ea:	043f      	lsls	r7, r7, #16
 80024ec:	0c0b      	lsrs	r3, r1, #16
 80024ee:	0c3f      	lsrs	r7, r7, #16
 80024f0:	0409      	lsls	r1, r1, #16
 80024f2:	19c9      	adds	r1, r1, r7
 80024f4:	0027      	movs	r7, r4
 80024f6:	4698      	mov	r8, r3
 80024f8:	464b      	mov	r3, r9
 80024fa:	4377      	muls	r7, r6
 80024fc:	435c      	muls	r4, r3
 80024fe:	436e      	muls	r6, r5
 8002500:	435d      	muls	r5, r3
 8002502:	0c3b      	lsrs	r3, r7, #16
 8002504:	4699      	mov	r9, r3
 8002506:	19a4      	adds	r4, r4, r6
 8002508:	444c      	add	r4, r9
 800250a:	4442      	add	r2, r8
 800250c:	9503      	str	r5, [sp, #12]
 800250e:	42a6      	cmp	r6, r4
 8002510:	d904      	bls.n	800251c <__aeabi_dmul+0x284>
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	4698      	mov	r8, r3
 8002518:	4445      	add	r5, r8
 800251a:	9503      	str	r5, [sp, #12]
 800251c:	9b02      	ldr	r3, [sp, #8]
 800251e:	043f      	lsls	r7, r7, #16
 8002520:	445b      	add	r3, fp
 8002522:	001e      	movs	r6, r3
 8002524:	4283      	cmp	r3, r0
 8002526:	4180      	sbcs	r0, r0
 8002528:	0423      	lsls	r3, r4, #16
 800252a:	4698      	mov	r8, r3
 800252c:	9b05      	ldr	r3, [sp, #20]
 800252e:	0c3f      	lsrs	r7, r7, #16
 8002530:	4447      	add	r7, r8
 8002532:	4698      	mov	r8, r3
 8002534:	1876      	adds	r6, r6, r1
 8002536:	428e      	cmp	r6, r1
 8002538:	4189      	sbcs	r1, r1
 800253a:	4447      	add	r7, r8
 800253c:	4240      	negs	r0, r0
 800253e:	183d      	adds	r5, r7, r0
 8002540:	46a8      	mov	r8, r5
 8002542:	4693      	mov	fp, r2
 8002544:	4249      	negs	r1, r1
 8002546:	468a      	mov	sl, r1
 8002548:	44c3      	add	fp, r8
 800254a:	429f      	cmp	r7, r3
 800254c:	41bf      	sbcs	r7, r7
 800254e:	4580      	cmp	r8, r0
 8002550:	4180      	sbcs	r0, r0
 8002552:	9b03      	ldr	r3, [sp, #12]
 8002554:	44da      	add	sl, fp
 8002556:	4698      	mov	r8, r3
 8002558:	4653      	mov	r3, sl
 800255a:	4240      	negs	r0, r0
 800255c:	427f      	negs	r7, r7
 800255e:	4307      	orrs	r7, r0
 8002560:	0c24      	lsrs	r4, r4, #16
 8002562:	4593      	cmp	fp, r2
 8002564:	4192      	sbcs	r2, r2
 8002566:	458a      	cmp	sl, r1
 8002568:	4189      	sbcs	r1, r1
 800256a:	193f      	adds	r7, r7, r4
 800256c:	0ddc      	lsrs	r4, r3, #23
 800256e:	9b04      	ldr	r3, [sp, #16]
 8002570:	0275      	lsls	r5, r6, #9
 8002572:	431d      	orrs	r5, r3
 8002574:	1e68      	subs	r0, r5, #1
 8002576:	4185      	sbcs	r5, r0
 8002578:	4653      	mov	r3, sl
 800257a:	4252      	negs	r2, r2
 800257c:	4249      	negs	r1, r1
 800257e:	430a      	orrs	r2, r1
 8002580:	18bf      	adds	r7, r7, r2
 8002582:	4447      	add	r7, r8
 8002584:	0df6      	lsrs	r6, r6, #23
 8002586:	027f      	lsls	r7, r7, #9
 8002588:	4335      	orrs	r5, r6
 800258a:	025a      	lsls	r2, r3, #9
 800258c:	433c      	orrs	r4, r7
 800258e:	4315      	orrs	r5, r2
 8002590:	01fb      	lsls	r3, r7, #7
 8002592:	d400      	bmi.n	8002596 <__aeabi_dmul+0x2fe>
 8002594:	e0c1      	b.n	800271a <__aeabi_dmul+0x482>
 8002596:	2101      	movs	r1, #1
 8002598:	086a      	lsrs	r2, r5, #1
 800259a:	400d      	ands	r5, r1
 800259c:	4315      	orrs	r5, r2
 800259e:	07e2      	lsls	r2, r4, #31
 80025a0:	4315      	orrs	r5, r2
 80025a2:	0864      	lsrs	r4, r4, #1
 80025a4:	4926      	ldr	r1, [pc, #152]	; (8002640 <__aeabi_dmul+0x3a8>)
 80025a6:	4461      	add	r1, ip
 80025a8:	2900      	cmp	r1, #0
 80025aa:	dd56      	ble.n	800265a <__aeabi_dmul+0x3c2>
 80025ac:	076b      	lsls	r3, r5, #29
 80025ae:	d009      	beq.n	80025c4 <__aeabi_dmul+0x32c>
 80025b0:	220f      	movs	r2, #15
 80025b2:	402a      	ands	r2, r5
 80025b4:	2a04      	cmp	r2, #4
 80025b6:	d005      	beq.n	80025c4 <__aeabi_dmul+0x32c>
 80025b8:	1d2a      	adds	r2, r5, #4
 80025ba:	42aa      	cmp	r2, r5
 80025bc:	41ad      	sbcs	r5, r5
 80025be:	426d      	negs	r5, r5
 80025c0:	1964      	adds	r4, r4, r5
 80025c2:	0015      	movs	r5, r2
 80025c4:	01e3      	lsls	r3, r4, #7
 80025c6:	d504      	bpl.n	80025d2 <__aeabi_dmul+0x33a>
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <__aeabi_dmul+0x3ac>)
 80025cc:	00c9      	lsls	r1, r1, #3
 80025ce:	4014      	ands	r4, r2
 80025d0:	4461      	add	r1, ip
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <__aeabi_dmul+0x3b0>)
 80025d4:	4291      	cmp	r1, r2
 80025d6:	dd00      	ble.n	80025da <__aeabi_dmul+0x342>
 80025d8:	e724      	b.n	8002424 <__aeabi_dmul+0x18c>
 80025da:	0762      	lsls	r2, r4, #29
 80025dc:	08ed      	lsrs	r5, r5, #3
 80025de:	0264      	lsls	r4, r4, #9
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	4315      	orrs	r5, r2
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d4a      	lsrs	r2, r1, #21
 80025e8:	e6c6      	b.n	8002378 <__aeabi_dmul+0xe0>
 80025ea:	9701      	str	r7, [sp, #4]
 80025ec:	e6b8      	b.n	8002360 <__aeabi_dmul+0xc8>
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <__aeabi_dmul+0x398>)
 80025f0:	2003      	movs	r0, #3
 80025f2:	4694      	mov	ip, r2
 80025f4:	4463      	add	r3, ip
 80025f6:	464a      	mov	r2, r9
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2303      	movs	r3, #3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	4691      	mov	r9, r2
 8002600:	4652      	mov	r2, sl
 8002602:	e68a      	b.n	800231a <__aeabi_dmul+0x82>
 8002604:	4649      	mov	r1, r9
 8002606:	2301      	movs	r3, #1
 8002608:	4319      	orrs	r1, r3
 800260a:	4689      	mov	r9, r1
 800260c:	2600      	movs	r6, #0
 800260e:	2001      	movs	r0, #1
 8002610:	e683      	b.n	800231a <__aeabi_dmul+0x82>
 8002612:	220c      	movs	r2, #12
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2303      	movs	r3, #3
 8002618:	0005      	movs	r5, r0
 800261a:	4691      	mov	r9, r2
 800261c:	469b      	mov	fp, r3
 800261e:	e65e      	b.n	80022de <__aeabi_dmul+0x46>
 8002620:	2304      	movs	r3, #4
 8002622:	4699      	mov	r9, r3
 8002624:	2300      	movs	r3, #0
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	2400      	movs	r4, #0
 800262c:	469b      	mov	fp, r3
 800262e:	e656      	b.n	80022de <__aeabi_dmul+0x46>
 8002630:	000007ff 	.word	0x000007ff
 8002634:	fffffc01 	.word	0xfffffc01
 8002638:	0800fad8 	.word	0x0800fad8
 800263c:	fffffc0d 	.word	0xfffffc0d
 8002640:	000003ff 	.word	0x000003ff
 8002644:	feffffff 	.word	0xfeffffff
 8002648:	000007fe 	.word	0x000007fe
 800264c:	2300      	movs	r3, #0
 800264e:	2480      	movs	r4, #128	; 0x80
 8002650:	2500      	movs	r5, #0
 8002652:	4a44      	ldr	r2, [pc, #272]	; (8002764 <__aeabi_dmul+0x4cc>)
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	0324      	lsls	r4, r4, #12
 8002658:	e68e      	b.n	8002378 <__aeabi_dmul+0xe0>
 800265a:	2001      	movs	r0, #1
 800265c:	1a40      	subs	r0, r0, r1
 800265e:	2838      	cmp	r0, #56	; 0x38
 8002660:	dd00      	ble.n	8002664 <__aeabi_dmul+0x3cc>
 8002662:	e686      	b.n	8002372 <__aeabi_dmul+0xda>
 8002664:	281f      	cmp	r0, #31
 8002666:	dd5b      	ble.n	8002720 <__aeabi_dmul+0x488>
 8002668:	221f      	movs	r2, #31
 800266a:	0023      	movs	r3, r4
 800266c:	4252      	negs	r2, r2
 800266e:	1a51      	subs	r1, r2, r1
 8002670:	40cb      	lsrs	r3, r1
 8002672:	0019      	movs	r1, r3
 8002674:	2820      	cmp	r0, #32
 8002676:	d003      	beq.n	8002680 <__aeabi_dmul+0x3e8>
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <__aeabi_dmul+0x4d0>)
 800267a:	4462      	add	r2, ip
 800267c:	4094      	lsls	r4, r2
 800267e:	4325      	orrs	r5, r4
 8002680:	1e6a      	subs	r2, r5, #1
 8002682:	4195      	sbcs	r5, r2
 8002684:	002a      	movs	r2, r5
 8002686:	430a      	orrs	r2, r1
 8002688:	2107      	movs	r1, #7
 800268a:	000d      	movs	r5, r1
 800268c:	2400      	movs	r4, #0
 800268e:	4015      	ands	r5, r2
 8002690:	4211      	tst	r1, r2
 8002692:	d05b      	beq.n	800274c <__aeabi_dmul+0x4b4>
 8002694:	210f      	movs	r1, #15
 8002696:	2400      	movs	r4, #0
 8002698:	4011      	ands	r1, r2
 800269a:	2904      	cmp	r1, #4
 800269c:	d053      	beq.n	8002746 <__aeabi_dmul+0x4ae>
 800269e:	1d11      	adds	r1, r2, #4
 80026a0:	4291      	cmp	r1, r2
 80026a2:	4192      	sbcs	r2, r2
 80026a4:	4252      	negs	r2, r2
 80026a6:	18a4      	adds	r4, r4, r2
 80026a8:	000a      	movs	r2, r1
 80026aa:	0223      	lsls	r3, r4, #8
 80026ac:	d54b      	bpl.n	8002746 <__aeabi_dmul+0x4ae>
 80026ae:	2201      	movs	r2, #1
 80026b0:	2400      	movs	r4, #0
 80026b2:	2500      	movs	r5, #0
 80026b4:	e660      	b.n	8002378 <__aeabi_dmul+0xe0>
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	031b      	lsls	r3, r3, #12
 80026ba:	421c      	tst	r4, r3
 80026bc:	d009      	beq.n	80026d2 <__aeabi_dmul+0x43a>
 80026be:	421e      	tst	r6, r3
 80026c0:	d107      	bne.n	80026d2 <__aeabi_dmul+0x43a>
 80026c2:	4333      	orrs	r3, r6
 80026c4:	031c      	lsls	r4, r3, #12
 80026c6:	4643      	mov	r3, r8
 80026c8:	0015      	movs	r5, r2
 80026ca:	0b24      	lsrs	r4, r4, #12
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <__aeabi_dmul+0x4cc>)
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	e652      	b.n	8002378 <__aeabi_dmul+0xe0>
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0312      	lsls	r2, r2, #12
 80026d6:	4314      	orrs	r4, r2
 80026d8:	0324      	lsls	r4, r4, #12
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <__aeabi_dmul+0x4cc>)
 80026dc:	0b24      	lsrs	r4, r4, #12
 80026de:	9701      	str	r7, [sp, #4]
 80026e0:	e64a      	b.n	8002378 <__aeabi_dmul+0xe0>
 80026e2:	f000 fd8b 	bl	80031fc <__clzsi2>
 80026e6:	0003      	movs	r3, r0
 80026e8:	001a      	movs	r2, r3
 80026ea:	3215      	adds	r2, #21
 80026ec:	3020      	adds	r0, #32
 80026ee:	2a1c      	cmp	r2, #28
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x45c>
 80026f2:	e684      	b.n	80023fe <__aeabi_dmul+0x166>
 80026f4:	4656      	mov	r6, sl
 80026f6:	3b08      	subs	r3, #8
 80026f8:	2200      	movs	r2, #0
 80026fa:	409e      	lsls	r6, r3
 80026fc:	e689      	b.n	8002412 <__aeabi_dmul+0x17a>
 80026fe:	f000 fd7d 	bl	80031fc <__clzsi2>
 8002702:	0001      	movs	r1, r0
 8002704:	0002      	movs	r2, r0
 8002706:	3115      	adds	r1, #21
 8002708:	3220      	adds	r2, #32
 800270a:	291c      	cmp	r1, #28
 800270c:	dc00      	bgt.n	8002710 <__aeabi_dmul+0x478>
 800270e:	e64e      	b.n	80023ae <__aeabi_dmul+0x116>
 8002710:	0034      	movs	r4, r6
 8002712:	3808      	subs	r0, #8
 8002714:	2500      	movs	r5, #0
 8002716:	4084      	lsls	r4, r0
 8002718:	e653      	b.n	80023c2 <__aeabi_dmul+0x12a>
 800271a:	9b00      	ldr	r3, [sp, #0]
 800271c:	469c      	mov	ip, r3
 800271e:	e741      	b.n	80025a4 <__aeabi_dmul+0x30c>
 8002720:	4912      	ldr	r1, [pc, #72]	; (800276c <__aeabi_dmul+0x4d4>)
 8002722:	0022      	movs	r2, r4
 8002724:	4461      	add	r1, ip
 8002726:	002e      	movs	r6, r5
 8002728:	408d      	lsls	r5, r1
 800272a:	408a      	lsls	r2, r1
 800272c:	40c6      	lsrs	r6, r0
 800272e:	1e69      	subs	r1, r5, #1
 8002730:	418d      	sbcs	r5, r1
 8002732:	4332      	orrs	r2, r6
 8002734:	432a      	orrs	r2, r5
 8002736:	40c4      	lsrs	r4, r0
 8002738:	0753      	lsls	r3, r2, #29
 800273a:	d0b6      	beq.n	80026aa <__aeabi_dmul+0x412>
 800273c:	210f      	movs	r1, #15
 800273e:	4011      	ands	r1, r2
 8002740:	2904      	cmp	r1, #4
 8002742:	d1ac      	bne.n	800269e <__aeabi_dmul+0x406>
 8002744:	e7b1      	b.n	80026aa <__aeabi_dmul+0x412>
 8002746:	0765      	lsls	r5, r4, #29
 8002748:	0264      	lsls	r4, r4, #9
 800274a:	0b24      	lsrs	r4, r4, #12
 800274c:	08d2      	lsrs	r2, r2, #3
 800274e:	4315      	orrs	r5, r2
 8002750:	2200      	movs	r2, #0
 8002752:	e611      	b.n	8002378 <__aeabi_dmul+0xe0>
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0312      	lsls	r2, r2, #12
 8002758:	4314      	orrs	r4, r2
 800275a:	0324      	lsls	r4, r4, #12
 800275c:	4a01      	ldr	r2, [pc, #4]	; (8002764 <__aeabi_dmul+0x4cc>)
 800275e:	0b24      	lsrs	r4, r4, #12
 8002760:	e60a      	b.n	8002378 <__aeabi_dmul+0xe0>
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	000007ff 	.word	0x000007ff
 8002768:	0000043e 	.word	0x0000043e
 800276c:	0000041e 	.word	0x0000041e

08002770 <__aeabi_dsub>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	4657      	mov	r7, sl
 8002774:	464e      	mov	r6, r9
 8002776:	4645      	mov	r5, r8
 8002778:	46de      	mov	lr, fp
 800277a:	0004      	movs	r4, r0
 800277c:	b5e0      	push	{r5, r6, r7, lr}
 800277e:	001f      	movs	r7, r3
 8002780:	0010      	movs	r0, r2
 8002782:	030b      	lsls	r3, r1, #12
 8002784:	0f62      	lsrs	r2, r4, #29
 8002786:	004e      	lsls	r6, r1, #1
 8002788:	0fcd      	lsrs	r5, r1, #31
 800278a:	0a5b      	lsrs	r3, r3, #9
 800278c:	0339      	lsls	r1, r7, #12
 800278e:	4313      	orrs	r3, r2
 8002790:	0a49      	lsrs	r1, r1, #9
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	0f44      	lsrs	r4, r0, #29
 8002796:	4321      	orrs	r1, r4
 8002798:	4cc2      	ldr	r4, [pc, #776]	; (8002aa4 <__aeabi_dsub+0x334>)
 800279a:	4691      	mov	r9, r2
 800279c:	4692      	mov	sl, r2
 800279e:	00c0      	lsls	r0, r0, #3
 80027a0:	007a      	lsls	r2, r7, #1
 80027a2:	4680      	mov	r8, r0
 80027a4:	0d76      	lsrs	r6, r6, #21
 80027a6:	0d52      	lsrs	r2, r2, #21
 80027a8:	0fff      	lsrs	r7, r7, #31
 80027aa:	42a2      	cmp	r2, r4
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x40>
 80027ae:	e0b4      	b.n	800291a <__aeabi_dsub+0x1aa>
 80027b0:	2401      	movs	r4, #1
 80027b2:	4067      	eors	r7, r4
 80027b4:	46bb      	mov	fp, r7
 80027b6:	42bd      	cmp	r5, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dsub+0x4c>
 80027ba:	e088      	b.n	80028ce <__aeabi_dsub+0x15e>
 80027bc:	1ab4      	subs	r4, r6, r2
 80027be:	46a4      	mov	ip, r4
 80027c0:	2c00      	cmp	r4, #0
 80027c2:	dc00      	bgt.n	80027c6 <__aeabi_dsub+0x56>
 80027c4:	e0b2      	b.n	800292c <__aeabi_dsub+0x1bc>
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x5c>
 80027ca:	e0c5      	b.n	8002958 <__aeabi_dsub+0x1e8>
 80027cc:	4ab5      	ldr	r2, [pc, #724]	; (8002aa4 <__aeabi_dsub+0x334>)
 80027ce:	4296      	cmp	r6, r2
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x64>
 80027d2:	e28b      	b.n	8002cec <__aeabi_dsub+0x57c>
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0412      	lsls	r2, r2, #16
 80027d8:	4311      	orrs	r1, r2
 80027da:	4662      	mov	r2, ip
 80027dc:	2a38      	cmp	r2, #56	; 0x38
 80027de:	dd00      	ble.n	80027e2 <__aeabi_dsub+0x72>
 80027e0:	e1a1      	b.n	8002b26 <__aeabi_dsub+0x3b6>
 80027e2:	2a1f      	cmp	r2, #31
 80027e4:	dd00      	ble.n	80027e8 <__aeabi_dsub+0x78>
 80027e6:	e216      	b.n	8002c16 <__aeabi_dsub+0x4a6>
 80027e8:	2720      	movs	r7, #32
 80027ea:	000c      	movs	r4, r1
 80027ec:	1abf      	subs	r7, r7, r2
 80027ee:	40bc      	lsls	r4, r7
 80027f0:	0002      	movs	r2, r0
 80027f2:	46a0      	mov	r8, r4
 80027f4:	4664      	mov	r4, ip
 80027f6:	40b8      	lsls	r0, r7
 80027f8:	40e2      	lsrs	r2, r4
 80027fa:	4644      	mov	r4, r8
 80027fc:	4314      	orrs	r4, r2
 80027fe:	0002      	movs	r2, r0
 8002800:	1e50      	subs	r0, r2, #1
 8002802:	4182      	sbcs	r2, r0
 8002804:	4660      	mov	r0, ip
 8002806:	40c1      	lsrs	r1, r0
 8002808:	4322      	orrs	r2, r4
 800280a:	1a5b      	subs	r3, r3, r1
 800280c:	4649      	mov	r1, r9
 800280e:	1a8c      	subs	r4, r1, r2
 8002810:	45a1      	cmp	r9, r4
 8002812:	4192      	sbcs	r2, r2
 8002814:	4252      	negs	r2, r2
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	4698      	mov	r8, r3
 800281a:	4643      	mov	r3, r8
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	d400      	bmi.n	8002822 <__aeabi_dsub+0xb2>
 8002820:	e117      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002822:	4643      	mov	r3, r8
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	0a5b      	lsrs	r3, r3, #9
 8002828:	4698      	mov	r8, r3
 800282a:	4643      	mov	r3, r8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d100      	bne.n	8002832 <__aeabi_dsub+0xc2>
 8002830:	e16c      	b.n	8002b0c <__aeabi_dsub+0x39c>
 8002832:	4640      	mov	r0, r8
 8002834:	f000 fce2 	bl	80031fc <__clzsi2>
 8002838:	0002      	movs	r2, r0
 800283a:	3a08      	subs	r2, #8
 800283c:	2120      	movs	r1, #32
 800283e:	0020      	movs	r0, r4
 8002840:	4643      	mov	r3, r8
 8002842:	1a89      	subs	r1, r1, r2
 8002844:	4093      	lsls	r3, r2
 8002846:	40c8      	lsrs	r0, r1
 8002848:	4094      	lsls	r4, r2
 800284a:	4303      	orrs	r3, r0
 800284c:	4296      	cmp	r6, r2
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0xe2>
 8002850:	e157      	b.n	8002b02 <__aeabi_dsub+0x392>
 8002852:	1b96      	subs	r6, r2, r6
 8002854:	1c71      	adds	r1, r6, #1
 8002856:	291f      	cmp	r1, #31
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0xec>
 800285a:	e1cb      	b.n	8002bf4 <__aeabi_dsub+0x484>
 800285c:	2220      	movs	r2, #32
 800285e:	0018      	movs	r0, r3
 8002860:	0026      	movs	r6, r4
 8002862:	1a52      	subs	r2, r2, r1
 8002864:	4094      	lsls	r4, r2
 8002866:	4090      	lsls	r0, r2
 8002868:	40ce      	lsrs	r6, r1
 800286a:	40cb      	lsrs	r3, r1
 800286c:	1e62      	subs	r2, r4, #1
 800286e:	4194      	sbcs	r4, r2
 8002870:	4330      	orrs	r0, r6
 8002872:	4698      	mov	r8, r3
 8002874:	2600      	movs	r6, #0
 8002876:	4304      	orrs	r4, r0
 8002878:	0763      	lsls	r3, r4, #29
 800287a:	d009      	beq.n	8002890 <__aeabi_dsub+0x120>
 800287c:	230f      	movs	r3, #15
 800287e:	4023      	ands	r3, r4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d005      	beq.n	8002890 <__aeabi_dsub+0x120>
 8002884:	1d23      	adds	r3, r4, #4
 8002886:	42a3      	cmp	r3, r4
 8002888:	41a4      	sbcs	r4, r4
 800288a:	4264      	negs	r4, r4
 800288c:	44a0      	add	r8, r4
 800288e:	001c      	movs	r4, r3
 8002890:	4643      	mov	r3, r8
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	d400      	bmi.n	8002898 <__aeabi_dsub+0x128>
 8002896:	e0df      	b.n	8002a58 <__aeabi_dsub+0x2e8>
 8002898:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <__aeabi_dsub+0x334>)
 800289a:	3601      	adds	r6, #1
 800289c:	429e      	cmp	r6, r3
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x132>
 80028a0:	e0fb      	b.n	8002a9a <__aeabi_dsub+0x32a>
 80028a2:	4642      	mov	r2, r8
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <__aeabi_dsub+0x338>)
 80028a6:	08e4      	lsrs	r4, r4, #3
 80028a8:	401a      	ands	r2, r3
 80028aa:	0013      	movs	r3, r2
 80028ac:	0571      	lsls	r1, r6, #21
 80028ae:	0752      	lsls	r2, r2, #29
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	4322      	orrs	r2, r4
 80028b4:	0b1b      	lsrs	r3, r3, #12
 80028b6:	0d49      	lsrs	r1, r1, #21
 80028b8:	0509      	lsls	r1, r1, #20
 80028ba:	07ed      	lsls	r5, r5, #31
 80028bc:	4319      	orrs	r1, r3
 80028be:	4329      	orrs	r1, r5
 80028c0:	0010      	movs	r0, r2
 80028c2:	bcf0      	pop	{r4, r5, r6, r7}
 80028c4:	46bb      	mov	fp, r7
 80028c6:	46b2      	mov	sl, r6
 80028c8:	46a9      	mov	r9, r5
 80028ca:	46a0      	mov	r8, r4
 80028cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ce:	1ab4      	subs	r4, r6, r2
 80028d0:	46a4      	mov	ip, r4
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	dd58      	ble.n	8002988 <__aeabi_dsub+0x218>
 80028d6:	2a00      	cmp	r2, #0
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x16c>
 80028da:	e09e      	b.n	8002a1a <__aeabi_dsub+0x2aa>
 80028dc:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <__aeabi_dsub+0x334>)
 80028de:	4296      	cmp	r6, r2
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x174>
 80028e2:	e13b      	b.n	8002b5c <__aeabi_dsub+0x3ec>
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0412      	lsls	r2, r2, #16
 80028e8:	4311      	orrs	r1, r2
 80028ea:	4662      	mov	r2, ip
 80028ec:	2a38      	cmp	r2, #56	; 0x38
 80028ee:	dd00      	ble.n	80028f2 <__aeabi_dsub+0x182>
 80028f0:	e0c1      	b.n	8002a76 <__aeabi_dsub+0x306>
 80028f2:	2a1f      	cmp	r2, #31
 80028f4:	dc00      	bgt.n	80028f8 <__aeabi_dsub+0x188>
 80028f6:	e1bb      	b.n	8002c70 <__aeabi_dsub+0x500>
 80028f8:	000c      	movs	r4, r1
 80028fa:	3a20      	subs	r2, #32
 80028fc:	40d4      	lsrs	r4, r2
 80028fe:	0022      	movs	r2, r4
 8002900:	4664      	mov	r4, ip
 8002902:	2c20      	cmp	r4, #32
 8002904:	d004      	beq.n	8002910 <__aeabi_dsub+0x1a0>
 8002906:	2740      	movs	r7, #64	; 0x40
 8002908:	1b3f      	subs	r7, r7, r4
 800290a:	40b9      	lsls	r1, r7
 800290c:	4308      	orrs	r0, r1
 800290e:	4680      	mov	r8, r0
 8002910:	4644      	mov	r4, r8
 8002912:	1e61      	subs	r1, r4, #1
 8002914:	418c      	sbcs	r4, r1
 8002916:	4314      	orrs	r4, r2
 8002918:	e0b1      	b.n	8002a7e <__aeabi_dsub+0x30e>
 800291a:	000c      	movs	r4, r1
 800291c:	4304      	orrs	r4, r0
 800291e:	d02a      	beq.n	8002976 <__aeabi_dsub+0x206>
 8002920:	46bb      	mov	fp, r7
 8002922:	42bd      	cmp	r5, r7
 8002924:	d02d      	beq.n	8002982 <__aeabi_dsub+0x212>
 8002926:	4c61      	ldr	r4, [pc, #388]	; (8002aac <__aeabi_dsub+0x33c>)
 8002928:	46a4      	mov	ip, r4
 800292a:	44b4      	add	ip, r6
 800292c:	4664      	mov	r4, ip
 800292e:	2c00      	cmp	r4, #0
 8002930:	d05c      	beq.n	80029ec <__aeabi_dsub+0x27c>
 8002932:	1b94      	subs	r4, r2, r6
 8002934:	46a4      	mov	ip, r4
 8002936:	2e00      	cmp	r6, #0
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x1cc>
 800293a:	e115      	b.n	8002b68 <__aeabi_dsub+0x3f8>
 800293c:	464d      	mov	r5, r9
 800293e:	431d      	orrs	r5, r3
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x1d4>
 8002942:	e1c3      	b.n	8002ccc <__aeabi_dsub+0x55c>
 8002944:	1e65      	subs	r5, r4, #1
 8002946:	2c01      	cmp	r4, #1
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x1dc>
 800294a:	e20c      	b.n	8002d66 <__aeabi_dsub+0x5f6>
 800294c:	4e55      	ldr	r6, [pc, #340]	; (8002aa4 <__aeabi_dsub+0x334>)
 800294e:	42b4      	cmp	r4, r6
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x1e4>
 8002952:	e1f8      	b.n	8002d46 <__aeabi_dsub+0x5d6>
 8002954:	46ac      	mov	ip, r5
 8002956:	e10e      	b.n	8002b76 <__aeabi_dsub+0x406>
 8002958:	000a      	movs	r2, r1
 800295a:	4302      	orrs	r2, r0
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x1f0>
 800295e:	e136      	b.n	8002bce <__aeabi_dsub+0x45e>
 8002960:	0022      	movs	r2, r4
 8002962:	3a01      	subs	r2, #1
 8002964:	2c01      	cmp	r4, #1
 8002966:	d100      	bne.n	800296a <__aeabi_dsub+0x1fa>
 8002968:	e1c6      	b.n	8002cf8 <__aeabi_dsub+0x588>
 800296a:	4c4e      	ldr	r4, [pc, #312]	; (8002aa4 <__aeabi_dsub+0x334>)
 800296c:	45a4      	cmp	ip, r4
 800296e:	d100      	bne.n	8002972 <__aeabi_dsub+0x202>
 8002970:	e0f4      	b.n	8002b5c <__aeabi_dsub+0x3ec>
 8002972:	4694      	mov	ip, r2
 8002974:	e731      	b.n	80027da <__aeabi_dsub+0x6a>
 8002976:	2401      	movs	r4, #1
 8002978:	4067      	eors	r7, r4
 800297a:	46bb      	mov	fp, r7
 800297c:	42bd      	cmp	r5, r7
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x212>
 8002980:	e71c      	b.n	80027bc <__aeabi_dsub+0x4c>
 8002982:	4c4a      	ldr	r4, [pc, #296]	; (8002aac <__aeabi_dsub+0x33c>)
 8002984:	46a4      	mov	ip, r4
 8002986:	44b4      	add	ip, r6
 8002988:	4664      	mov	r4, ip
 800298a:	2c00      	cmp	r4, #0
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x220>
 800298e:	e0cf      	b.n	8002b30 <__aeabi_dsub+0x3c0>
 8002990:	1b94      	subs	r4, r2, r6
 8002992:	46a4      	mov	ip, r4
 8002994:	2e00      	cmp	r6, #0
 8002996:	d100      	bne.n	800299a <__aeabi_dsub+0x22a>
 8002998:	e15c      	b.n	8002c54 <__aeabi_dsub+0x4e4>
 800299a:	4e42      	ldr	r6, [pc, #264]	; (8002aa4 <__aeabi_dsub+0x334>)
 800299c:	42b2      	cmp	r2, r6
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x232>
 80029a0:	e1ec      	b.n	8002d7c <__aeabi_dsub+0x60c>
 80029a2:	2680      	movs	r6, #128	; 0x80
 80029a4:	0436      	lsls	r6, r6, #16
 80029a6:	4333      	orrs	r3, r6
 80029a8:	4664      	mov	r4, ip
 80029aa:	2c38      	cmp	r4, #56	; 0x38
 80029ac:	dd00      	ble.n	80029b0 <__aeabi_dsub+0x240>
 80029ae:	e1b3      	b.n	8002d18 <__aeabi_dsub+0x5a8>
 80029b0:	2c1f      	cmp	r4, #31
 80029b2:	dd00      	ble.n	80029b6 <__aeabi_dsub+0x246>
 80029b4:	e238      	b.n	8002e28 <__aeabi_dsub+0x6b8>
 80029b6:	2620      	movs	r6, #32
 80029b8:	1b36      	subs	r6, r6, r4
 80029ba:	001c      	movs	r4, r3
 80029bc:	40b4      	lsls	r4, r6
 80029be:	464f      	mov	r7, r9
 80029c0:	46a0      	mov	r8, r4
 80029c2:	4664      	mov	r4, ip
 80029c4:	40e7      	lsrs	r7, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	433c      	orrs	r4, r7
 80029ca:	464f      	mov	r7, r9
 80029cc:	40b7      	lsls	r7, r6
 80029ce:	003e      	movs	r6, r7
 80029d0:	1e77      	subs	r7, r6, #1
 80029d2:	41be      	sbcs	r6, r7
 80029d4:	4334      	orrs	r4, r6
 80029d6:	4666      	mov	r6, ip
 80029d8:	40f3      	lsrs	r3, r6
 80029da:	18c9      	adds	r1, r1, r3
 80029dc:	1824      	adds	r4, r4, r0
 80029de:	4284      	cmp	r4, r0
 80029e0:	419b      	sbcs	r3, r3
 80029e2:	425b      	negs	r3, r3
 80029e4:	4698      	mov	r8, r3
 80029e6:	0016      	movs	r6, r2
 80029e8:	4488      	add	r8, r1
 80029ea:	e04e      	b.n	8002a8a <__aeabi_dsub+0x31a>
 80029ec:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <__aeabi_dsub+0x340>)
 80029ee:	1c74      	adds	r4, r6, #1
 80029f0:	4214      	tst	r4, r2
 80029f2:	d000      	beq.n	80029f6 <__aeabi_dsub+0x286>
 80029f4:	e0d6      	b.n	8002ba4 <__aeabi_dsub+0x434>
 80029f6:	464a      	mov	r2, r9
 80029f8:	431a      	orrs	r2, r3
 80029fa:	2e00      	cmp	r6, #0
 80029fc:	d000      	beq.n	8002a00 <__aeabi_dsub+0x290>
 80029fe:	e15b      	b.n	8002cb8 <__aeabi_dsub+0x548>
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dsub+0x296>
 8002a04:	e1a5      	b.n	8002d52 <__aeabi_dsub+0x5e2>
 8002a06:	000a      	movs	r2, r1
 8002a08:	4302      	orrs	r2, r0
 8002a0a:	d000      	beq.n	8002a0e <__aeabi_dsub+0x29e>
 8002a0c:	e1bb      	b.n	8002d86 <__aeabi_dsub+0x616>
 8002a0e:	464a      	mov	r2, r9
 8002a10:	0759      	lsls	r1, r3, #29
 8002a12:	08d2      	lsrs	r2, r2, #3
 8002a14:	430a      	orrs	r2, r1
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	e027      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	d100      	bne.n	8002a22 <__aeabi_dsub+0x2b2>
 8002a20:	e174      	b.n	8002d0c <__aeabi_dsub+0x59c>
 8002a22:	0022      	movs	r2, r4
 8002a24:	3a01      	subs	r2, #1
 8002a26:	2c01      	cmp	r4, #1
 8002a28:	d005      	beq.n	8002a36 <__aeabi_dsub+0x2c6>
 8002a2a:	4c1e      	ldr	r4, [pc, #120]	; (8002aa4 <__aeabi_dsub+0x334>)
 8002a2c:	45a4      	cmp	ip, r4
 8002a2e:	d100      	bne.n	8002a32 <__aeabi_dsub+0x2c2>
 8002a30:	e094      	b.n	8002b5c <__aeabi_dsub+0x3ec>
 8002a32:	4694      	mov	ip, r2
 8002a34:	e759      	b.n	80028ea <__aeabi_dsub+0x17a>
 8002a36:	4448      	add	r0, r9
 8002a38:	4548      	cmp	r0, r9
 8002a3a:	4192      	sbcs	r2, r2
 8002a3c:	185b      	adds	r3, r3, r1
 8002a3e:	4698      	mov	r8, r3
 8002a40:	0004      	movs	r4, r0
 8002a42:	4252      	negs	r2, r2
 8002a44:	4490      	add	r8, r2
 8002a46:	4643      	mov	r3, r8
 8002a48:	2602      	movs	r6, #2
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	d500      	bpl.n	8002a50 <__aeabi_dsub+0x2e0>
 8002a4e:	e0c4      	b.n	8002bda <__aeabi_dsub+0x46a>
 8002a50:	3e01      	subs	r6, #1
 8002a52:	0763      	lsls	r3, r4, #29
 8002a54:	d000      	beq.n	8002a58 <__aeabi_dsub+0x2e8>
 8002a56:	e711      	b.n	800287c <__aeabi_dsub+0x10c>
 8002a58:	4643      	mov	r3, r8
 8002a5a:	46b4      	mov	ip, r6
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	08e2      	lsrs	r2, r4, #3
 8002a60:	430a      	orrs	r2, r1
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	490f      	ldr	r1, [pc, #60]	; (8002aa4 <__aeabi_dsub+0x334>)
 8002a66:	458c      	cmp	ip, r1
 8002a68:	d040      	beq.n	8002aec <__aeabi_dsub+0x37c>
 8002a6a:	4661      	mov	r1, ip
 8002a6c:	031b      	lsls	r3, r3, #12
 8002a6e:	0549      	lsls	r1, r1, #21
 8002a70:	0b1b      	lsrs	r3, r3, #12
 8002a72:	0d49      	lsrs	r1, r1, #21
 8002a74:	e720      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002a76:	4301      	orrs	r1, r0
 8002a78:	000c      	movs	r4, r1
 8002a7a:	1e61      	subs	r1, r4, #1
 8002a7c:	418c      	sbcs	r4, r1
 8002a7e:	444c      	add	r4, r9
 8002a80:	454c      	cmp	r4, r9
 8002a82:	4192      	sbcs	r2, r2
 8002a84:	4252      	negs	r2, r2
 8002a86:	4690      	mov	r8, r2
 8002a88:	4498      	add	r8, r3
 8002a8a:	4643      	mov	r3, r8
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	d5e0      	bpl.n	8002a52 <__aeabi_dsub+0x2e2>
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <__aeabi_dsub+0x334>)
 8002a92:	3601      	adds	r6, #1
 8002a94:	429e      	cmp	r6, r3
 8002a96:	d000      	beq.n	8002a9a <__aeabi_dsub+0x32a>
 8002a98:	e09f      	b.n	8002bda <__aeabi_dsub+0x46a>
 8002a9a:	0031      	movs	r1, r6
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	e70a      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	000007ff 	.word	0x000007ff
 8002aa8:	ff7fffff 	.word	0xff7fffff
 8002aac:	fffff801 	.word	0xfffff801
 8002ab0:	000007fe 	.word	0x000007fe
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x34a>
 8002ab8:	e160      	b.n	8002d7c <__aeabi_dsub+0x60c>
 8002aba:	000a      	movs	r2, r1
 8002abc:	4302      	orrs	r2, r0
 8002abe:	d04d      	beq.n	8002b5c <__aeabi_dsub+0x3ec>
 8002ac0:	464a      	mov	r2, r9
 8002ac2:	075c      	lsls	r4, r3, #29
 8002ac4:	08d2      	lsrs	r2, r2, #3
 8002ac6:	4322      	orrs	r2, r4
 8002ac8:	2480      	movs	r4, #128	; 0x80
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	0324      	lsls	r4, r4, #12
 8002ace:	4223      	tst	r3, r4
 8002ad0:	d007      	beq.n	8002ae2 <__aeabi_dsub+0x372>
 8002ad2:	08ce      	lsrs	r6, r1, #3
 8002ad4:	4226      	tst	r6, r4
 8002ad6:	d104      	bne.n	8002ae2 <__aeabi_dsub+0x372>
 8002ad8:	465d      	mov	r5, fp
 8002ada:	0033      	movs	r3, r6
 8002adc:	08c2      	lsrs	r2, r0, #3
 8002ade:	0749      	lsls	r1, r1, #29
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	0f51      	lsrs	r1, r2, #29
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	08d2      	lsrs	r2, r2, #3
 8002ae8:	0749      	lsls	r1, r1, #29
 8002aea:	430a      	orrs	r2, r1
 8002aec:	0011      	movs	r1, r2
 8002aee:	4319      	orrs	r1, r3
 8002af0:	d100      	bne.n	8002af4 <__aeabi_dsub+0x384>
 8002af2:	e1c8      	b.n	8002e86 <__aeabi_dsub+0x716>
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0309      	lsls	r1, r1, #12
 8002af8:	430b      	orrs	r3, r1
 8002afa:	031b      	lsls	r3, r3, #12
 8002afc:	49d5      	ldr	r1, [pc, #852]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002afe:	0b1b      	lsrs	r3, r3, #12
 8002b00:	e6da      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002b02:	49d5      	ldr	r1, [pc, #852]	; (8002e58 <__aeabi_dsub+0x6e8>)
 8002b04:	1ab6      	subs	r6, r6, r2
 8002b06:	400b      	ands	r3, r1
 8002b08:	4698      	mov	r8, r3
 8002b0a:	e6b5      	b.n	8002878 <__aeabi_dsub+0x108>
 8002b0c:	0020      	movs	r0, r4
 8002b0e:	f000 fb75 	bl	80031fc <__clzsi2>
 8002b12:	0002      	movs	r2, r0
 8002b14:	3218      	adds	r2, #24
 8002b16:	2a1f      	cmp	r2, #31
 8002b18:	dc00      	bgt.n	8002b1c <__aeabi_dsub+0x3ac>
 8002b1a:	e68f      	b.n	800283c <__aeabi_dsub+0xcc>
 8002b1c:	0023      	movs	r3, r4
 8002b1e:	3808      	subs	r0, #8
 8002b20:	4083      	lsls	r3, r0
 8002b22:	2400      	movs	r4, #0
 8002b24:	e692      	b.n	800284c <__aeabi_dsub+0xdc>
 8002b26:	4308      	orrs	r0, r1
 8002b28:	0002      	movs	r2, r0
 8002b2a:	1e50      	subs	r0, r2, #1
 8002b2c:	4182      	sbcs	r2, r0
 8002b2e:	e66d      	b.n	800280c <__aeabi_dsub+0x9c>
 8002b30:	4cca      	ldr	r4, [pc, #808]	; (8002e5c <__aeabi_dsub+0x6ec>)
 8002b32:	1c72      	adds	r2, r6, #1
 8002b34:	4222      	tst	r2, r4
 8002b36:	d000      	beq.n	8002b3a <__aeabi_dsub+0x3ca>
 8002b38:	e0ad      	b.n	8002c96 <__aeabi_dsub+0x526>
 8002b3a:	464a      	mov	r2, r9
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	2e00      	cmp	r6, #0
 8002b40:	d1b8      	bne.n	8002ab4 <__aeabi_dsub+0x344>
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	d100      	bne.n	8002b48 <__aeabi_dsub+0x3d8>
 8002b46:	e158      	b.n	8002dfa <__aeabi_dsub+0x68a>
 8002b48:	000a      	movs	r2, r1
 8002b4a:	4302      	orrs	r2, r0
 8002b4c:	d000      	beq.n	8002b50 <__aeabi_dsub+0x3e0>
 8002b4e:	e159      	b.n	8002e04 <__aeabi_dsub+0x694>
 8002b50:	464a      	mov	r2, r9
 8002b52:	0759      	lsls	r1, r3, #29
 8002b54:	08d2      	lsrs	r2, r2, #3
 8002b56:	430a      	orrs	r2, r1
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	e786      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002b5c:	464a      	mov	r2, r9
 8002b5e:	0759      	lsls	r1, r3, #29
 8002b60:	08d2      	lsrs	r2, r2, #3
 8002b62:	430a      	orrs	r2, r1
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	e7c1      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002b68:	4dba      	ldr	r5, [pc, #744]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002b6a:	42aa      	cmp	r2, r5
 8002b6c:	d100      	bne.n	8002b70 <__aeabi_dsub+0x400>
 8002b6e:	e11e      	b.n	8002dae <__aeabi_dsub+0x63e>
 8002b70:	2580      	movs	r5, #128	; 0x80
 8002b72:	042d      	lsls	r5, r5, #16
 8002b74:	432b      	orrs	r3, r5
 8002b76:	4664      	mov	r4, ip
 8002b78:	2c38      	cmp	r4, #56	; 0x38
 8002b7a:	dc5d      	bgt.n	8002c38 <__aeabi_dsub+0x4c8>
 8002b7c:	2c1f      	cmp	r4, #31
 8002b7e:	dd00      	ble.n	8002b82 <__aeabi_dsub+0x412>
 8002b80:	e0d0      	b.n	8002d24 <__aeabi_dsub+0x5b4>
 8002b82:	2520      	movs	r5, #32
 8002b84:	4667      	mov	r7, ip
 8002b86:	1b2d      	subs	r5, r5, r4
 8002b88:	464e      	mov	r6, r9
 8002b8a:	001c      	movs	r4, r3
 8002b8c:	40fe      	lsrs	r6, r7
 8002b8e:	40ac      	lsls	r4, r5
 8002b90:	4334      	orrs	r4, r6
 8002b92:	464e      	mov	r6, r9
 8002b94:	40ae      	lsls	r6, r5
 8002b96:	0035      	movs	r5, r6
 8002b98:	40fb      	lsrs	r3, r7
 8002b9a:	1e6e      	subs	r6, r5, #1
 8002b9c:	41b5      	sbcs	r5, r6
 8002b9e:	1ac9      	subs	r1, r1, r3
 8002ba0:	432c      	orrs	r4, r5
 8002ba2:	e04e      	b.n	8002c42 <__aeabi_dsub+0x4d2>
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	1a14      	subs	r4, r2, r0
 8002ba8:	45a1      	cmp	r9, r4
 8002baa:	4192      	sbcs	r2, r2
 8002bac:	4252      	negs	r2, r2
 8002bae:	4690      	mov	r8, r2
 8002bb0:	1a5f      	subs	r7, r3, r1
 8002bb2:	003a      	movs	r2, r7
 8002bb4:	4647      	mov	r7, r8
 8002bb6:	1bd2      	subs	r2, r2, r7
 8002bb8:	4690      	mov	r8, r2
 8002bba:	0212      	lsls	r2, r2, #8
 8002bbc:	d500      	bpl.n	8002bc0 <__aeabi_dsub+0x450>
 8002bbe:	e08b      	b.n	8002cd8 <__aeabi_dsub+0x568>
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	4322      	orrs	r2, r4
 8002bc4:	d000      	beq.n	8002bc8 <__aeabi_dsub+0x458>
 8002bc6:	e630      	b.n	800282a <__aeabi_dsub+0xba>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2500      	movs	r5, #0
 8002bcc:	e74d      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002bce:	464a      	mov	r2, r9
 8002bd0:	0759      	lsls	r1, r3, #29
 8002bd2:	08d2      	lsrs	r2, r2, #3
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	e744      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002bda:	4642      	mov	r2, r8
 8002bdc:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <__aeabi_dsub+0x6e8>)
 8002bde:	0861      	lsrs	r1, r4, #1
 8002be0:	401a      	ands	r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	2201      	movs	r2, #1
 8002be6:	4014      	ands	r4, r2
 8002be8:	430c      	orrs	r4, r1
 8002bea:	07da      	lsls	r2, r3, #31
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	4698      	mov	r8, r3
 8002bf0:	4314      	orrs	r4, r2
 8002bf2:	e641      	b.n	8002878 <__aeabi_dsub+0x108>
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	3e1f      	subs	r6, #31
 8002bf8:	40f2      	lsrs	r2, r6
 8002bfa:	0016      	movs	r6, r2
 8002bfc:	2920      	cmp	r1, #32
 8002bfe:	d003      	beq.n	8002c08 <__aeabi_dsub+0x498>
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	1a51      	subs	r1, r2, r1
 8002c04:	408b      	lsls	r3, r1
 8002c06:	431c      	orrs	r4, r3
 8002c08:	1e62      	subs	r2, r4, #1
 8002c0a:	4194      	sbcs	r4, r2
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	4334      	orrs	r4, r6
 8002c10:	4698      	mov	r8, r3
 8002c12:	2600      	movs	r6, #0
 8002c14:	e71d      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002c16:	000c      	movs	r4, r1
 8002c18:	3a20      	subs	r2, #32
 8002c1a:	40d4      	lsrs	r4, r2
 8002c1c:	0022      	movs	r2, r4
 8002c1e:	4664      	mov	r4, ip
 8002c20:	2c20      	cmp	r4, #32
 8002c22:	d004      	beq.n	8002c2e <__aeabi_dsub+0x4be>
 8002c24:	2740      	movs	r7, #64	; 0x40
 8002c26:	1b3f      	subs	r7, r7, r4
 8002c28:	40b9      	lsls	r1, r7
 8002c2a:	4308      	orrs	r0, r1
 8002c2c:	4680      	mov	r8, r0
 8002c2e:	4644      	mov	r4, r8
 8002c30:	1e61      	subs	r1, r4, #1
 8002c32:	418c      	sbcs	r4, r1
 8002c34:	4322      	orrs	r2, r4
 8002c36:	e5e9      	b.n	800280c <__aeabi_dsub+0x9c>
 8002c38:	464c      	mov	r4, r9
 8002c3a:	4323      	orrs	r3, r4
 8002c3c:	001c      	movs	r4, r3
 8002c3e:	1e63      	subs	r3, r4, #1
 8002c40:	419c      	sbcs	r4, r3
 8002c42:	1b04      	subs	r4, r0, r4
 8002c44:	42a0      	cmp	r0, r4
 8002c46:	419b      	sbcs	r3, r3
 8002c48:	425b      	negs	r3, r3
 8002c4a:	1acb      	subs	r3, r1, r3
 8002c4c:	4698      	mov	r8, r3
 8002c4e:	465d      	mov	r5, fp
 8002c50:	0016      	movs	r6, r2
 8002c52:	e5e2      	b.n	800281a <__aeabi_dsub+0xaa>
 8002c54:	464e      	mov	r6, r9
 8002c56:	431e      	orrs	r6, r3
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x4ec>
 8002c5a:	e0ae      	b.n	8002dba <__aeabi_dsub+0x64a>
 8002c5c:	1e66      	subs	r6, r4, #1
 8002c5e:	2c01      	cmp	r4, #1
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x4f4>
 8002c62:	e0fd      	b.n	8002e60 <__aeabi_dsub+0x6f0>
 8002c64:	4f7b      	ldr	r7, [pc, #492]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002c66:	42bc      	cmp	r4, r7
 8002c68:	d100      	bne.n	8002c6c <__aeabi_dsub+0x4fc>
 8002c6a:	e107      	b.n	8002e7c <__aeabi_dsub+0x70c>
 8002c6c:	46b4      	mov	ip, r6
 8002c6e:	e69b      	b.n	80029a8 <__aeabi_dsub+0x238>
 8002c70:	4664      	mov	r4, ip
 8002c72:	2220      	movs	r2, #32
 8002c74:	1b12      	subs	r2, r2, r4
 8002c76:	000c      	movs	r4, r1
 8002c78:	4094      	lsls	r4, r2
 8002c7a:	0007      	movs	r7, r0
 8002c7c:	4090      	lsls	r0, r2
 8002c7e:	46a0      	mov	r8, r4
 8002c80:	4664      	mov	r4, ip
 8002c82:	1e42      	subs	r2, r0, #1
 8002c84:	4190      	sbcs	r0, r2
 8002c86:	4662      	mov	r2, ip
 8002c88:	40e7      	lsrs	r7, r4
 8002c8a:	4644      	mov	r4, r8
 8002c8c:	40d1      	lsrs	r1, r2
 8002c8e:	433c      	orrs	r4, r7
 8002c90:	4304      	orrs	r4, r0
 8002c92:	185b      	adds	r3, r3, r1
 8002c94:	e6f3      	b.n	8002a7e <__aeabi_dsub+0x30e>
 8002c96:	4c6f      	ldr	r4, [pc, #444]	; (8002e54 <__aeabi_dsub+0x6e4>)
 8002c98:	42a2      	cmp	r2, r4
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x52e>
 8002c9c:	e0d5      	b.n	8002e4a <__aeabi_dsub+0x6da>
 8002c9e:	4448      	add	r0, r9
 8002ca0:	185b      	adds	r3, r3, r1
 8002ca2:	4548      	cmp	r0, r9
 8002ca4:	4189      	sbcs	r1, r1
 8002ca6:	4249      	negs	r1, r1
 8002ca8:	185b      	adds	r3, r3, r1
 8002caa:	07dc      	lsls	r4, r3, #31
 8002cac:	0840      	lsrs	r0, r0, #1
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	0016      	movs	r6, r2
 8002cb4:	4304      	orrs	r4, r0
 8002cb6:	e6cc      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d000      	beq.n	8002cbe <__aeabi_dsub+0x54e>
 8002cbc:	e082      	b.n	8002dc4 <__aeabi_dsub+0x654>
 8002cbe:	000a      	movs	r2, r1
 8002cc0:	4302      	orrs	r2, r0
 8002cc2:	d140      	bne.n	8002d46 <__aeabi_dsub+0x5d6>
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	e713      	b.n	8002af4 <__aeabi_dsub+0x384>
 8002ccc:	074b      	lsls	r3, r1, #29
 8002cce:	08c2      	lsrs	r2, r0, #3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	08cb      	lsrs	r3, r1, #3
 8002cd6:	e6c5      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002cd8:	464a      	mov	r2, r9
 8002cda:	1a84      	subs	r4, r0, r2
 8002cdc:	42a0      	cmp	r0, r4
 8002cde:	4192      	sbcs	r2, r2
 8002ce0:	1acb      	subs	r3, r1, r3
 8002ce2:	4252      	negs	r2, r2
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	4698      	mov	r8, r3
 8002ce8:	465d      	mov	r5, fp
 8002cea:	e59e      	b.n	800282a <__aeabi_dsub+0xba>
 8002cec:	464a      	mov	r2, r9
 8002cee:	0759      	lsls	r1, r3, #29
 8002cf0:	08d2      	lsrs	r2, r2, #3
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	e6f9      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002cf8:	464a      	mov	r2, r9
 8002cfa:	1a14      	subs	r4, r2, r0
 8002cfc:	45a1      	cmp	r9, r4
 8002cfe:	4192      	sbcs	r2, r2
 8002d00:	1a5b      	subs	r3, r3, r1
 8002d02:	4252      	negs	r2, r2
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	4698      	mov	r8, r3
 8002d08:	2601      	movs	r6, #1
 8002d0a:	e586      	b.n	800281a <__aeabi_dsub+0xaa>
 8002d0c:	464a      	mov	r2, r9
 8002d0e:	0759      	lsls	r1, r3, #29
 8002d10:	08d2      	lsrs	r2, r2, #3
 8002d12:	430a      	orrs	r2, r1
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	e6a5      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002d18:	464c      	mov	r4, r9
 8002d1a:	4323      	orrs	r3, r4
 8002d1c:	001c      	movs	r4, r3
 8002d1e:	1e63      	subs	r3, r4, #1
 8002d20:	419c      	sbcs	r4, r3
 8002d22:	e65b      	b.n	80029dc <__aeabi_dsub+0x26c>
 8002d24:	4665      	mov	r5, ip
 8002d26:	001e      	movs	r6, r3
 8002d28:	3d20      	subs	r5, #32
 8002d2a:	40ee      	lsrs	r6, r5
 8002d2c:	2c20      	cmp	r4, #32
 8002d2e:	d005      	beq.n	8002d3c <__aeabi_dsub+0x5cc>
 8002d30:	2540      	movs	r5, #64	; 0x40
 8002d32:	1b2d      	subs	r5, r5, r4
 8002d34:	40ab      	lsls	r3, r5
 8002d36:	464c      	mov	r4, r9
 8002d38:	431c      	orrs	r4, r3
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	4654      	mov	r4, sl
 8002d3e:	1e63      	subs	r3, r4, #1
 8002d40:	419c      	sbcs	r4, r3
 8002d42:	4334      	orrs	r4, r6
 8002d44:	e77d      	b.n	8002c42 <__aeabi_dsub+0x4d2>
 8002d46:	074b      	lsls	r3, r1, #29
 8002d48:	08c2      	lsrs	r2, r0, #3
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	08cb      	lsrs	r3, r1, #3
 8002d50:	e6cc      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002d52:	000a      	movs	r2, r1
 8002d54:	4302      	orrs	r2, r0
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x5ea>
 8002d58:	e736      	b.n	8002bc8 <__aeabi_dsub+0x458>
 8002d5a:	074b      	lsls	r3, r1, #29
 8002d5c:	08c2      	lsrs	r2, r0, #3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	465d      	mov	r5, fp
 8002d62:	08cb      	lsrs	r3, r1, #3
 8002d64:	e681      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002d66:	464a      	mov	r2, r9
 8002d68:	1a84      	subs	r4, r0, r2
 8002d6a:	42a0      	cmp	r0, r4
 8002d6c:	4192      	sbcs	r2, r2
 8002d6e:	1acb      	subs	r3, r1, r3
 8002d70:	4252      	negs	r2, r2
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	4698      	mov	r8, r3
 8002d76:	465d      	mov	r5, fp
 8002d78:	2601      	movs	r6, #1
 8002d7a:	e54e      	b.n	800281a <__aeabi_dsub+0xaa>
 8002d7c:	074b      	lsls	r3, r1, #29
 8002d7e:	08c2      	lsrs	r2, r0, #3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	08cb      	lsrs	r3, r1, #3
 8002d84:	e6b2      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002d86:	464a      	mov	r2, r9
 8002d88:	1a14      	subs	r4, r2, r0
 8002d8a:	45a1      	cmp	r9, r4
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	1a5f      	subs	r7, r3, r1
 8002d90:	4252      	negs	r2, r2
 8002d92:	1aba      	subs	r2, r7, r2
 8002d94:	4690      	mov	r8, r2
 8002d96:	0212      	lsls	r2, r2, #8
 8002d98:	d56b      	bpl.n	8002e72 <__aeabi_dsub+0x702>
 8002d9a:	464a      	mov	r2, r9
 8002d9c:	1a84      	subs	r4, r0, r2
 8002d9e:	42a0      	cmp	r0, r4
 8002da0:	4192      	sbcs	r2, r2
 8002da2:	1acb      	subs	r3, r1, r3
 8002da4:	4252      	negs	r2, r2
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	4698      	mov	r8, r3
 8002daa:	465d      	mov	r5, fp
 8002dac:	e564      	b.n	8002878 <__aeabi_dsub+0x108>
 8002dae:	074b      	lsls	r3, r1, #29
 8002db0:	08c2      	lsrs	r2, r0, #3
 8002db2:	431a      	orrs	r2, r3
 8002db4:	465d      	mov	r5, fp
 8002db6:	08cb      	lsrs	r3, r1, #3
 8002db8:	e698      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002dba:	074b      	lsls	r3, r1, #29
 8002dbc:	08c2      	lsrs	r2, r0, #3
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	08cb      	lsrs	r3, r1, #3
 8002dc2:	e64f      	b.n	8002a64 <__aeabi_dsub+0x2f4>
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	4302      	orrs	r2, r0
 8002dc8:	d090      	beq.n	8002cec <__aeabi_dsub+0x57c>
 8002dca:	464a      	mov	r2, r9
 8002dcc:	075c      	lsls	r4, r3, #29
 8002dce:	08d2      	lsrs	r2, r2, #3
 8002dd0:	4314      	orrs	r4, r2
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	0312      	lsls	r2, r2, #12
 8002dd8:	4213      	tst	r3, r2
 8002dda:	d008      	beq.n	8002dee <__aeabi_dsub+0x67e>
 8002ddc:	08ce      	lsrs	r6, r1, #3
 8002dde:	4216      	tst	r6, r2
 8002de0:	d105      	bne.n	8002dee <__aeabi_dsub+0x67e>
 8002de2:	08c0      	lsrs	r0, r0, #3
 8002de4:	0749      	lsls	r1, r1, #29
 8002de6:	4308      	orrs	r0, r1
 8002de8:	0004      	movs	r4, r0
 8002dea:	465d      	mov	r5, fp
 8002dec:	0033      	movs	r3, r6
 8002dee:	0f61      	lsrs	r1, r4, #29
 8002df0:	00e2      	lsls	r2, r4, #3
 8002df2:	0749      	lsls	r1, r1, #29
 8002df4:	08d2      	lsrs	r2, r2, #3
 8002df6:	430a      	orrs	r2, r1
 8002df8:	e678      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002dfa:	074b      	lsls	r3, r1, #29
 8002dfc:	08c2      	lsrs	r2, r0, #3
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	08cb      	lsrs	r3, r1, #3
 8002e02:	e632      	b.n	8002a6a <__aeabi_dsub+0x2fa>
 8002e04:	4448      	add	r0, r9
 8002e06:	185b      	adds	r3, r3, r1
 8002e08:	4548      	cmp	r0, r9
 8002e0a:	4192      	sbcs	r2, r2
 8002e0c:	4698      	mov	r8, r3
 8002e0e:	4252      	negs	r2, r2
 8002e10:	4490      	add	r8, r2
 8002e12:	4643      	mov	r3, r8
 8002e14:	0004      	movs	r4, r0
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	d400      	bmi.n	8002e1c <__aeabi_dsub+0x6ac>
 8002e1a:	e61a      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <__aeabi_dsub+0x6e8>)
 8002e20:	2601      	movs	r6, #1
 8002e22:	401a      	ands	r2, r3
 8002e24:	4690      	mov	r8, r2
 8002e26:	e614      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002e28:	4666      	mov	r6, ip
 8002e2a:	001f      	movs	r7, r3
 8002e2c:	3e20      	subs	r6, #32
 8002e2e:	40f7      	lsrs	r7, r6
 8002e30:	2c20      	cmp	r4, #32
 8002e32:	d005      	beq.n	8002e40 <__aeabi_dsub+0x6d0>
 8002e34:	2640      	movs	r6, #64	; 0x40
 8002e36:	1b36      	subs	r6, r6, r4
 8002e38:	40b3      	lsls	r3, r6
 8002e3a:	464c      	mov	r4, r9
 8002e3c:	431c      	orrs	r4, r3
 8002e3e:	46a2      	mov	sl, r4
 8002e40:	4654      	mov	r4, sl
 8002e42:	1e63      	subs	r3, r4, #1
 8002e44:	419c      	sbcs	r4, r3
 8002e46:	433c      	orrs	r4, r7
 8002e48:	e5c8      	b.n	80029dc <__aeabi_dsub+0x26c>
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	e532      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	000007ff 	.word	0x000007ff
 8002e58:	ff7fffff 	.word	0xff7fffff
 8002e5c:	000007fe 	.word	0x000007fe
 8002e60:	464a      	mov	r2, r9
 8002e62:	1814      	adds	r4, r2, r0
 8002e64:	4284      	cmp	r4, r0
 8002e66:	4192      	sbcs	r2, r2
 8002e68:	185b      	adds	r3, r3, r1
 8002e6a:	4698      	mov	r8, r3
 8002e6c:	4252      	negs	r2, r2
 8002e6e:	4490      	add	r8, r2
 8002e70:	e5e9      	b.n	8002a46 <__aeabi_dsub+0x2d6>
 8002e72:	4642      	mov	r2, r8
 8002e74:	4322      	orrs	r2, r4
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x70a>
 8002e78:	e6a6      	b.n	8002bc8 <__aeabi_dsub+0x458>
 8002e7a:	e5ea      	b.n	8002a52 <__aeabi_dsub+0x2e2>
 8002e7c:	074b      	lsls	r3, r1, #29
 8002e7e:	08c2      	lsrs	r2, r0, #3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	08cb      	lsrs	r3, r1, #3
 8002e84:	e632      	b.n	8002aec <__aeabi_dsub+0x37c>
 8002e86:	2200      	movs	r2, #0
 8002e88:	4901      	ldr	r1, [pc, #4]	; (8002e90 <__aeabi_dsub+0x720>)
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	e514      	b.n	80028b8 <__aeabi_dsub+0x148>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	000007ff 	.word	0x000007ff

08002e94 <__aeabi_dcmpun>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	0005      	movs	r5, r0
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <__aeabi_dcmpun+0x38>)
 8002e9a:	030c      	lsls	r4, r1, #12
 8002e9c:	0016      	movs	r6, r2
 8002e9e:	0049      	lsls	r1, r1, #1
 8002ea0:	031a      	lsls	r2, r3, #12
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	0b24      	lsrs	r4, r4, #12
 8002ea6:	0d49      	lsrs	r1, r1, #21
 8002ea8:	0b12      	lsrs	r2, r2, #12
 8002eaa:	0d5b      	lsrs	r3, r3, #21
 8002eac:	4281      	cmp	r1, r0
 8002eae:	d008      	beq.n	8002ec2 <__aeabi_dcmpun+0x2e>
 8002eb0:	4906      	ldr	r1, [pc, #24]	; (8002ecc <__aeabi_dcmpun+0x38>)
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d103      	bne.n	8002ec0 <__aeabi_dcmpun+0x2c>
 8002eb8:	4332      	orrs	r2, r6
 8002eba:	0010      	movs	r0, r2
 8002ebc:	1e42      	subs	r2, r0, #1
 8002ebe:	4190      	sbcs	r0, r2
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	432c      	orrs	r4, r5
 8002ec6:	d1fb      	bne.n	8002ec0 <__aeabi_dcmpun+0x2c>
 8002ec8:	e7f2      	b.n	8002eb0 <__aeabi_dcmpun+0x1c>
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	000007ff 	.word	0x000007ff

08002ed0 <__aeabi_d2iz>:
 8002ed0:	000a      	movs	r2, r1
 8002ed2:	b530      	push	{r4, r5, lr}
 8002ed4:	4c13      	ldr	r4, [pc, #76]	; (8002f24 <__aeabi_d2iz+0x54>)
 8002ed6:	0053      	lsls	r3, r2, #1
 8002ed8:	0309      	lsls	r1, r1, #12
 8002eda:	0005      	movs	r5, r0
 8002edc:	0b09      	lsrs	r1, r1, #12
 8002ede:	2000      	movs	r0, #0
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	0fd2      	lsrs	r2, r2, #31
 8002ee4:	42a3      	cmp	r3, r4
 8002ee6:	dd04      	ble.n	8002ef2 <__aeabi_d2iz+0x22>
 8002ee8:	480f      	ldr	r0, [pc, #60]	; (8002f28 <__aeabi_d2iz+0x58>)
 8002eea:	4283      	cmp	r3, r0
 8002eec:	dd02      	ble.n	8002ef4 <__aeabi_d2iz+0x24>
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <__aeabi_d2iz+0x5c>)
 8002ef0:	18d0      	adds	r0, r2, r3
 8002ef2:	bd30      	pop	{r4, r5, pc}
 8002ef4:	2080      	movs	r0, #128	; 0x80
 8002ef6:	0340      	lsls	r0, r0, #13
 8002ef8:	4301      	orrs	r1, r0
 8002efa:	480d      	ldr	r0, [pc, #52]	; (8002f30 <__aeabi_d2iz+0x60>)
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	281f      	cmp	r0, #31
 8002f00:	dd08      	ble.n	8002f14 <__aeabi_d2iz+0x44>
 8002f02:	480c      	ldr	r0, [pc, #48]	; (8002f34 <__aeabi_d2iz+0x64>)
 8002f04:	1ac3      	subs	r3, r0, r3
 8002f06:	40d9      	lsrs	r1, r3
 8002f08:	000b      	movs	r3, r1
 8002f0a:	4258      	negs	r0, r3
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <__aeabi_d2iz+0x22>
 8002f10:	0018      	movs	r0, r3
 8002f12:	e7ee      	b.n	8002ef2 <__aeabi_d2iz+0x22>
 8002f14:	4c08      	ldr	r4, [pc, #32]	; (8002f38 <__aeabi_d2iz+0x68>)
 8002f16:	40c5      	lsrs	r5, r0
 8002f18:	46a4      	mov	ip, r4
 8002f1a:	4463      	add	r3, ip
 8002f1c:	4099      	lsls	r1, r3
 8002f1e:	000b      	movs	r3, r1
 8002f20:	432b      	orrs	r3, r5
 8002f22:	e7f2      	b.n	8002f0a <__aeabi_d2iz+0x3a>
 8002f24:	000003fe 	.word	0x000003fe
 8002f28:	0000041d 	.word	0x0000041d
 8002f2c:	7fffffff 	.word	0x7fffffff
 8002f30:	00000433 	.word	0x00000433
 8002f34:	00000413 	.word	0x00000413
 8002f38:	fffffbed 	.word	0xfffffbed

08002f3c <__aeabi_i2d>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d016      	beq.n	8002f70 <__aeabi_i2d+0x34>
 8002f42:	17c3      	asrs	r3, r0, #31
 8002f44:	18c5      	adds	r5, r0, r3
 8002f46:	405d      	eors	r5, r3
 8002f48:	0fc4      	lsrs	r4, r0, #31
 8002f4a:	0028      	movs	r0, r5
 8002f4c:	f000 f956 	bl	80031fc <__clzsi2>
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <__aeabi_i2d+0x5c>)
 8002f52:	1a12      	subs	r2, r2, r0
 8002f54:	280a      	cmp	r0, #10
 8002f56:	dc16      	bgt.n	8002f86 <__aeabi_i2d+0x4a>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	002e      	movs	r6, r5
 8002f5c:	3315      	adds	r3, #21
 8002f5e:	409e      	lsls	r6, r3
 8002f60:	230b      	movs	r3, #11
 8002f62:	1a18      	subs	r0, r3, r0
 8002f64:	40c5      	lsrs	r5, r0
 8002f66:	0553      	lsls	r3, r2, #21
 8002f68:	032d      	lsls	r5, r5, #12
 8002f6a:	0b2d      	lsrs	r5, r5, #12
 8002f6c:	0d5b      	lsrs	r3, r3, #21
 8002f6e:	e003      	b.n	8002f78 <__aeabi_i2d+0x3c>
 8002f70:	2400      	movs	r4, #0
 8002f72:	2300      	movs	r3, #0
 8002f74:	2500      	movs	r5, #0
 8002f76:	2600      	movs	r6, #0
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	432b      	orrs	r3, r5
 8002f7c:	07e4      	lsls	r4, r4, #31
 8002f7e:	4323      	orrs	r3, r4
 8002f80:	0030      	movs	r0, r6
 8002f82:	0019      	movs	r1, r3
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	380b      	subs	r0, #11
 8002f88:	4085      	lsls	r5, r0
 8002f8a:	0553      	lsls	r3, r2, #21
 8002f8c:	032d      	lsls	r5, r5, #12
 8002f8e:	2600      	movs	r6, #0
 8002f90:	0b2d      	lsrs	r5, r5, #12
 8002f92:	0d5b      	lsrs	r3, r3, #21
 8002f94:	e7f0      	b.n	8002f78 <__aeabi_i2d+0x3c>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	0000041e 	.word	0x0000041e

08002f9c <__aeabi_ui2d>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	1e04      	subs	r4, r0, #0
 8002fa0:	d010      	beq.n	8002fc4 <__aeabi_ui2d+0x28>
 8002fa2:	f000 f92b 	bl	80031fc <__clzsi2>
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <__aeabi_ui2d+0x48>)
 8002fa8:	1a1b      	subs	r3, r3, r0
 8002faa:	280a      	cmp	r0, #10
 8002fac:	dc11      	bgt.n	8002fd2 <__aeabi_ui2d+0x36>
 8002fae:	220b      	movs	r2, #11
 8002fb0:	0021      	movs	r1, r4
 8002fb2:	1a12      	subs	r2, r2, r0
 8002fb4:	40d1      	lsrs	r1, r2
 8002fb6:	3015      	adds	r0, #21
 8002fb8:	030a      	lsls	r2, r1, #12
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	4084      	lsls	r4, r0
 8002fbe:	0b12      	lsrs	r2, r2, #12
 8002fc0:	0d5b      	lsrs	r3, r3, #21
 8002fc2:	e001      	b.n	8002fc8 <__aeabi_ui2d+0x2c>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	0020      	movs	r0, r4
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	0022      	movs	r2, r4
 8002fd4:	380b      	subs	r0, #11
 8002fd6:	4082      	lsls	r2, r0
 8002fd8:	055b      	lsls	r3, r3, #21
 8002fda:	0312      	lsls	r2, r2, #12
 8002fdc:	2400      	movs	r4, #0
 8002fde:	0b12      	lsrs	r2, r2, #12
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	e7f1      	b.n	8002fc8 <__aeabi_ui2d+0x2c>
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_f2d>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	0043      	lsls	r3, r0, #1
 8002fec:	0246      	lsls	r6, r0, #9
 8002fee:	0fc4      	lsrs	r4, r0, #31
 8002ff0:	20fe      	movs	r0, #254	; 0xfe
 8002ff2:	0e1b      	lsrs	r3, r3, #24
 8002ff4:	1c59      	adds	r1, r3, #1
 8002ff6:	0a75      	lsrs	r5, r6, #9
 8002ff8:	4208      	tst	r0, r1
 8002ffa:	d00c      	beq.n	8003016 <__aeabi_f2d+0x2e>
 8002ffc:	22e0      	movs	r2, #224	; 0xe0
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4694      	mov	ip, r2
 8003002:	076d      	lsls	r5, r5, #29
 8003004:	0b36      	lsrs	r6, r6, #12
 8003006:	4463      	add	r3, ip
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	4333      	orrs	r3, r6
 800300c:	07e4      	lsls	r4, r4, #31
 800300e:	4323      	orrs	r3, r4
 8003010:	0028      	movs	r0, r5
 8003012:	0019      	movs	r1, r3
 8003014:	bd70      	pop	{r4, r5, r6, pc}
 8003016:	2b00      	cmp	r3, #0
 8003018:	d114      	bne.n	8003044 <__aeabi_f2d+0x5c>
 800301a:	2d00      	cmp	r5, #0
 800301c:	d01b      	beq.n	8003056 <__aeabi_f2d+0x6e>
 800301e:	0028      	movs	r0, r5
 8003020:	f000 f8ec 	bl	80031fc <__clzsi2>
 8003024:	280a      	cmp	r0, #10
 8003026:	dc1c      	bgt.n	8003062 <__aeabi_f2d+0x7a>
 8003028:	230b      	movs	r3, #11
 800302a:	002a      	movs	r2, r5
 800302c:	1a1b      	subs	r3, r3, r0
 800302e:	40da      	lsrs	r2, r3
 8003030:	0003      	movs	r3, r0
 8003032:	3315      	adds	r3, #21
 8003034:	409d      	lsls	r5, r3
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <__aeabi_f2d+0x88>)
 8003038:	0312      	lsls	r2, r2, #12
 800303a:	1a1b      	subs	r3, r3, r0
 800303c:	055b      	lsls	r3, r3, #21
 800303e:	0b16      	lsrs	r6, r2, #12
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	e7e1      	b.n	8003008 <__aeabi_f2d+0x20>
 8003044:	2d00      	cmp	r5, #0
 8003046:	d009      	beq.n	800305c <__aeabi_f2d+0x74>
 8003048:	0b32      	lsrs	r2, r6, #12
 800304a:	2680      	movs	r6, #128	; 0x80
 800304c:	0336      	lsls	r6, r6, #12
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <__aeabi_f2d+0x8c>)
 8003050:	076d      	lsls	r5, r5, #29
 8003052:	4316      	orrs	r6, r2
 8003054:	e7d8      	b.n	8003008 <__aeabi_f2d+0x20>
 8003056:	2300      	movs	r3, #0
 8003058:	2600      	movs	r6, #0
 800305a:	e7d5      	b.n	8003008 <__aeabi_f2d+0x20>
 800305c:	2600      	movs	r6, #0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <__aeabi_f2d+0x8c>)
 8003060:	e7d2      	b.n	8003008 <__aeabi_f2d+0x20>
 8003062:	0003      	movs	r3, r0
 8003064:	002a      	movs	r2, r5
 8003066:	3b0b      	subs	r3, #11
 8003068:	409a      	lsls	r2, r3
 800306a:	2500      	movs	r5, #0
 800306c:	e7e3      	b.n	8003036 <__aeabi_f2d+0x4e>
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	00000389 	.word	0x00000389
 8003074:	000007ff 	.word	0x000007ff

08003078 <__aeabi_d2f>:
 8003078:	0002      	movs	r2, r0
 800307a:	004b      	lsls	r3, r1, #1
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	0308      	lsls	r0, r1, #12
 8003080:	0d5b      	lsrs	r3, r3, #21
 8003082:	4e3d      	ldr	r6, [pc, #244]	; (8003178 <__aeabi_d2f+0x100>)
 8003084:	0fcc      	lsrs	r4, r1, #31
 8003086:	0a40      	lsrs	r0, r0, #9
 8003088:	0f51      	lsrs	r1, r2, #29
 800308a:	1c5f      	adds	r7, r3, #1
 800308c:	4308      	orrs	r0, r1
 800308e:	00d5      	lsls	r5, r2, #3
 8003090:	4237      	tst	r7, r6
 8003092:	d00a      	beq.n	80030aa <__aeabi_d2f+0x32>
 8003094:	4939      	ldr	r1, [pc, #228]	; (800317c <__aeabi_d2f+0x104>)
 8003096:	185e      	adds	r6, r3, r1
 8003098:	2efe      	cmp	r6, #254	; 0xfe
 800309a:	dd16      	ble.n	80030ca <__aeabi_d2f+0x52>
 800309c:	23ff      	movs	r3, #255	; 0xff
 800309e:	2100      	movs	r1, #0
 80030a0:	05db      	lsls	r3, r3, #23
 80030a2:	430b      	orrs	r3, r1
 80030a4:	07e0      	lsls	r0, r4, #31
 80030a6:	4318      	orrs	r0, r3
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <__aeabi_d2f+0x44>
 80030ae:	4328      	orrs	r0, r5
 80030b0:	d027      	beq.n	8003102 <__aeabi_d2f+0x8a>
 80030b2:	2105      	movs	r1, #5
 80030b4:	0189      	lsls	r1, r1, #6
 80030b6:	0a49      	lsrs	r1, r1, #9
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e7f1      	b.n	80030a0 <__aeabi_d2f+0x28>
 80030bc:	4305      	orrs	r5, r0
 80030be:	d0ed      	beq.n	800309c <__aeabi_d2f+0x24>
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	03c9      	lsls	r1, r1, #15
 80030c4:	23ff      	movs	r3, #255	; 0xff
 80030c6:	4301      	orrs	r1, r0
 80030c8:	e7ea      	b.n	80030a0 <__aeabi_d2f+0x28>
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	dd1c      	ble.n	8003108 <__aeabi_d2f+0x90>
 80030ce:	0192      	lsls	r2, r2, #6
 80030d0:	0011      	movs	r1, r2
 80030d2:	1e4a      	subs	r2, r1, #1
 80030d4:	4191      	sbcs	r1, r2
 80030d6:	00c0      	lsls	r0, r0, #3
 80030d8:	0f6d      	lsrs	r5, r5, #29
 80030da:	4301      	orrs	r1, r0
 80030dc:	4329      	orrs	r1, r5
 80030de:	074b      	lsls	r3, r1, #29
 80030e0:	d048      	beq.n	8003174 <__aeabi_d2f+0xfc>
 80030e2:	230f      	movs	r3, #15
 80030e4:	400b      	ands	r3, r1
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d000      	beq.n	80030ec <__aeabi_d2f+0x74>
 80030ea:	3104      	adds	r1, #4
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	04db      	lsls	r3, r3, #19
 80030f0:	400b      	ands	r3, r1
 80030f2:	d03f      	beq.n	8003174 <__aeabi_d2f+0xfc>
 80030f4:	1c72      	adds	r2, r6, #1
 80030f6:	2efe      	cmp	r6, #254	; 0xfe
 80030f8:	d0d0      	beq.n	800309c <__aeabi_d2f+0x24>
 80030fa:	0189      	lsls	r1, r1, #6
 80030fc:	0a49      	lsrs	r1, r1, #9
 80030fe:	b2d3      	uxtb	r3, r2
 8003100:	e7ce      	b.n	80030a0 <__aeabi_d2f+0x28>
 8003102:	2300      	movs	r3, #0
 8003104:	2100      	movs	r1, #0
 8003106:	e7cb      	b.n	80030a0 <__aeabi_d2f+0x28>
 8003108:	0032      	movs	r2, r6
 800310a:	3217      	adds	r2, #23
 800310c:	db22      	blt.n	8003154 <__aeabi_d2f+0xdc>
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	221e      	movs	r2, #30
 8003112:	0409      	lsls	r1, r1, #16
 8003114:	4308      	orrs	r0, r1
 8003116:	1b92      	subs	r2, r2, r6
 8003118:	2a1f      	cmp	r2, #31
 800311a:	dd1d      	ble.n	8003158 <__aeabi_d2f+0xe0>
 800311c:	2102      	movs	r1, #2
 800311e:	4249      	negs	r1, r1
 8003120:	1b8e      	subs	r6, r1, r6
 8003122:	0001      	movs	r1, r0
 8003124:	40f1      	lsrs	r1, r6
 8003126:	000e      	movs	r6, r1
 8003128:	2a20      	cmp	r2, #32
 800312a:	d004      	beq.n	8003136 <__aeabi_d2f+0xbe>
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <__aeabi_d2f+0x108>)
 800312e:	4694      	mov	ip, r2
 8003130:	4463      	add	r3, ip
 8003132:	4098      	lsls	r0, r3
 8003134:	4305      	orrs	r5, r0
 8003136:	0029      	movs	r1, r5
 8003138:	1e4d      	subs	r5, r1, #1
 800313a:	41a9      	sbcs	r1, r5
 800313c:	4331      	orrs	r1, r6
 800313e:	2600      	movs	r6, #0
 8003140:	074b      	lsls	r3, r1, #29
 8003142:	d1ce      	bne.n	80030e2 <__aeabi_d2f+0x6a>
 8003144:	2080      	movs	r0, #128	; 0x80
 8003146:	000b      	movs	r3, r1
 8003148:	04c0      	lsls	r0, r0, #19
 800314a:	2201      	movs	r2, #1
 800314c:	4003      	ands	r3, r0
 800314e:	4201      	tst	r1, r0
 8003150:	d1d3      	bne.n	80030fa <__aeabi_d2f+0x82>
 8003152:	e7af      	b.n	80030b4 <__aeabi_d2f+0x3c>
 8003154:	2300      	movs	r3, #0
 8003156:	e7ac      	b.n	80030b2 <__aeabi_d2f+0x3a>
 8003158:	490a      	ldr	r1, [pc, #40]	; (8003184 <__aeabi_d2f+0x10c>)
 800315a:	468c      	mov	ip, r1
 800315c:	0029      	movs	r1, r5
 800315e:	4463      	add	r3, ip
 8003160:	40d1      	lsrs	r1, r2
 8003162:	409d      	lsls	r5, r3
 8003164:	000a      	movs	r2, r1
 8003166:	0029      	movs	r1, r5
 8003168:	4098      	lsls	r0, r3
 800316a:	1e4d      	subs	r5, r1, #1
 800316c:	41a9      	sbcs	r1, r5
 800316e:	4301      	orrs	r1, r0
 8003170:	4311      	orrs	r1, r2
 8003172:	e7e4      	b.n	800313e <__aeabi_d2f+0xc6>
 8003174:	0033      	movs	r3, r6
 8003176:	e79d      	b.n	80030b4 <__aeabi_d2f+0x3c>
 8003178:	000007fe 	.word	0x000007fe
 800317c:	fffffc80 	.word	0xfffffc80
 8003180:	fffffca2 	.word	0xfffffca2
 8003184:	fffffc82 	.word	0xfffffc82

08003188 <__aeabi_cfrcmple>:
 8003188:	4684      	mov	ip, r0
 800318a:	1c08      	adds	r0, r1, #0
 800318c:	4661      	mov	r1, ip
 800318e:	e7ff      	b.n	8003190 <__aeabi_cfcmpeq>

08003190 <__aeabi_cfcmpeq>:
 8003190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003192:	f000 f9b7 	bl	8003504 <__lesf2>
 8003196:	2800      	cmp	r0, #0
 8003198:	d401      	bmi.n	800319e <__aeabi_cfcmpeq+0xe>
 800319a:	2100      	movs	r1, #0
 800319c:	42c8      	cmn	r0, r1
 800319e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080031a0 <__aeabi_fcmpeq>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	f000 f93b 	bl	800341c <__eqsf2>
 80031a6:	4240      	negs	r0, r0
 80031a8:	3001      	adds	r0, #1
 80031aa:	bd10      	pop	{r4, pc}

080031ac <__aeabi_fcmplt>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	f000 f9a9 	bl	8003504 <__lesf2>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	db01      	blt.n	80031ba <__aeabi_fcmplt+0xe>
 80031b6:	2000      	movs	r0, #0
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	2001      	movs	r0, #1
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	46c0      	nop			; (mov r8, r8)

080031c0 <__aeabi_fcmple>:
 80031c0:	b510      	push	{r4, lr}
 80031c2:	f000 f99f 	bl	8003504 <__lesf2>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	dd01      	ble.n	80031ce <__aeabi_fcmple+0xe>
 80031ca:	2000      	movs	r0, #0
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	2001      	movs	r0, #1
 80031d0:	bd10      	pop	{r4, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)

080031d4 <__aeabi_fcmpgt>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	f000 f949 	bl	800346c <__gesf2>
 80031da:	2800      	cmp	r0, #0
 80031dc:	dc01      	bgt.n	80031e2 <__aeabi_fcmpgt+0xe>
 80031de:	2000      	movs	r0, #0
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	2001      	movs	r0, #1
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)

080031e8 <__aeabi_fcmpge>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	f000 f93f 	bl	800346c <__gesf2>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	da01      	bge.n	80031f6 <__aeabi_fcmpge+0xe>
 80031f2:	2000      	movs	r0, #0
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	2001      	movs	r0, #1
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)

080031fc <__clzsi2>:
 80031fc:	211c      	movs	r1, #28
 80031fe:	2301      	movs	r3, #1
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	4298      	cmp	r0, r3
 8003204:	d301      	bcc.n	800320a <__clzsi2+0xe>
 8003206:	0c00      	lsrs	r0, r0, #16
 8003208:	3910      	subs	r1, #16
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	4298      	cmp	r0, r3
 800320e:	d301      	bcc.n	8003214 <__clzsi2+0x18>
 8003210:	0a00      	lsrs	r0, r0, #8
 8003212:	3908      	subs	r1, #8
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	4298      	cmp	r0, r3
 8003218:	d301      	bcc.n	800321e <__clzsi2+0x22>
 800321a:	0900      	lsrs	r0, r0, #4
 800321c:	3904      	subs	r1, #4
 800321e:	a202      	add	r2, pc, #8	; (adr r2, 8003228 <__clzsi2+0x2c>)
 8003220:	5c10      	ldrb	r0, [r2, r0]
 8003222:	1840      	adds	r0, r0, r1
 8003224:	4770      	bx	lr
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	02020304 	.word	0x02020304
 800322c:	01010101 	.word	0x01010101
	...

08003238 <__clzdi2>:
 8003238:	b510      	push	{r4, lr}
 800323a:	2900      	cmp	r1, #0
 800323c:	d103      	bne.n	8003246 <__clzdi2+0xe>
 800323e:	f7ff ffdd 	bl	80031fc <__clzsi2>
 8003242:	3020      	adds	r0, #32
 8003244:	e002      	b.n	800324c <__clzdi2+0x14>
 8003246:	1c08      	adds	r0, r1, #0
 8003248:	f7ff ffd8 	bl	80031fc <__clzsi2>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	46c0      	nop			; (mov r8, r8)

08003250 <__divdi3>:
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	4657      	mov	r7, sl
 8003254:	464e      	mov	r6, r9
 8003256:	4645      	mov	r5, r8
 8003258:	46de      	mov	lr, fp
 800325a:	b5e0      	push	{r5, r6, r7, lr}
 800325c:	000f      	movs	r7, r1
 800325e:	0019      	movs	r1, r3
 8003260:	2300      	movs	r3, #0
 8003262:	0006      	movs	r6, r0
 8003264:	4698      	mov	r8, r3
 8003266:	0010      	movs	r0, r2
 8003268:	b083      	sub	sp, #12
 800326a:	2f00      	cmp	r7, #0
 800326c:	da07      	bge.n	800327e <__divdi3+0x2e>
 800326e:	0033      	movs	r3, r6
 8003270:	003c      	movs	r4, r7
 8003272:	2700      	movs	r7, #0
 8003274:	425e      	negs	r6, r3
 8003276:	41a7      	sbcs	r7, r4
 8003278:	2301      	movs	r3, #1
 800327a:	425b      	negs	r3, r3
 800327c:	4698      	mov	r8, r3
 800327e:	2900      	cmp	r1, #0
 8003280:	da07      	bge.n	8003292 <__divdi3+0x42>
 8003282:	4643      	mov	r3, r8
 8003284:	43db      	mvns	r3, r3
 8003286:	000c      	movs	r4, r1
 8003288:	4698      	mov	r8, r3
 800328a:	0003      	movs	r3, r0
 800328c:	2100      	movs	r1, #0
 800328e:	4258      	negs	r0, r3
 8003290:	41a1      	sbcs	r1, r4
 8003292:	0034      	movs	r4, r6
 8003294:	003d      	movs	r5, r7
 8003296:	4682      	mov	sl, r0
 8003298:	4689      	mov	r9, r1
 800329a:	42b9      	cmp	r1, r7
 800329c:	d86a      	bhi.n	8003374 <__divdi3+0x124>
 800329e:	d067      	beq.n	8003370 <__divdi3+0x120>
 80032a0:	4649      	mov	r1, r9
 80032a2:	4650      	mov	r0, sl
 80032a4:	f7ff ffc8 	bl	8003238 <__clzdi2>
 80032a8:	4683      	mov	fp, r0
 80032aa:	0039      	movs	r1, r7
 80032ac:	0030      	movs	r0, r6
 80032ae:	f7ff ffc3 	bl	8003238 <__clzdi2>
 80032b2:	465b      	mov	r3, fp
 80032b4:	1a1b      	subs	r3, r3, r0
 80032b6:	469c      	mov	ip, r3
 80032b8:	3b20      	subs	r3, #32
 80032ba:	469b      	mov	fp, r3
 80032bc:	d46b      	bmi.n	8003396 <__divdi3+0x146>
 80032be:	4658      	mov	r0, fp
 80032c0:	4651      	mov	r1, sl
 80032c2:	4081      	lsls	r1, r0
 80032c4:	4660      	mov	r0, ip
 80032c6:	000b      	movs	r3, r1
 80032c8:	4651      	mov	r1, sl
 80032ca:	4081      	lsls	r1, r0
 80032cc:	000a      	movs	r2, r1
 80032ce:	42bb      	cmp	r3, r7
 80032d0:	d900      	bls.n	80032d4 <__divdi3+0x84>
 80032d2:	e072      	b.n	80033ba <__divdi3+0x16a>
 80032d4:	42bb      	cmp	r3, r7
 80032d6:	d100      	bne.n	80032da <__divdi3+0x8a>
 80032d8:	e079      	b.n	80033ce <__divdi3+0x17e>
 80032da:	0034      	movs	r4, r6
 80032dc:	003d      	movs	r5, r7
 80032de:	4659      	mov	r1, fp
 80032e0:	1aa4      	subs	r4, r4, r2
 80032e2:	419d      	sbcs	r5, r3
 80032e4:	2900      	cmp	r1, #0
 80032e6:	da00      	bge.n	80032ea <__divdi3+0x9a>
 80032e8:	e074      	b.n	80033d4 <__divdi3+0x184>
 80032ea:	2100      	movs	r1, #0
 80032ec:	2000      	movs	r0, #0
 80032ee:	2601      	movs	r6, #1
 80032f0:	9000      	str	r0, [sp, #0]
 80032f2:	9101      	str	r1, [sp, #4]
 80032f4:	4659      	mov	r1, fp
 80032f6:	408e      	lsls	r6, r1
 80032f8:	9601      	str	r6, [sp, #4]
 80032fa:	4661      	mov	r1, ip
 80032fc:	2601      	movs	r6, #1
 80032fe:	408e      	lsls	r6, r1
 8003300:	4661      	mov	r1, ip
 8003302:	9600      	str	r6, [sp, #0]
 8003304:	2900      	cmp	r1, #0
 8003306:	d05f      	beq.n	80033c8 <__divdi3+0x178>
 8003308:	07d9      	lsls	r1, r3, #31
 800330a:	0856      	lsrs	r6, r2, #1
 800330c:	430e      	orrs	r6, r1
 800330e:	085f      	lsrs	r7, r3, #1
 8003310:	4661      	mov	r1, ip
 8003312:	2201      	movs	r2, #1
 8003314:	2300      	movs	r3, #0
 8003316:	e00c      	b.n	8003332 <__divdi3+0xe2>
 8003318:	42af      	cmp	r7, r5
 800331a:	d101      	bne.n	8003320 <__divdi3+0xd0>
 800331c:	42a6      	cmp	r6, r4
 800331e:	d80a      	bhi.n	8003336 <__divdi3+0xe6>
 8003320:	1ba4      	subs	r4, r4, r6
 8003322:	41bd      	sbcs	r5, r7
 8003324:	1924      	adds	r4, r4, r4
 8003326:	416d      	adcs	r5, r5
 8003328:	3901      	subs	r1, #1
 800332a:	18a4      	adds	r4, r4, r2
 800332c:	415d      	adcs	r5, r3
 800332e:	2900      	cmp	r1, #0
 8003330:	d006      	beq.n	8003340 <__divdi3+0xf0>
 8003332:	42af      	cmp	r7, r5
 8003334:	d9f0      	bls.n	8003318 <__divdi3+0xc8>
 8003336:	3901      	subs	r1, #1
 8003338:	1924      	adds	r4, r4, r4
 800333a:	416d      	adcs	r5, r5
 800333c:	2900      	cmp	r1, #0
 800333e:	d1f8      	bne.n	8003332 <__divdi3+0xe2>
 8003340:	9800      	ldr	r0, [sp, #0]
 8003342:	9901      	ldr	r1, [sp, #4]
 8003344:	465b      	mov	r3, fp
 8003346:	1900      	adds	r0, r0, r4
 8003348:	4169      	adcs	r1, r5
 800334a:	2b00      	cmp	r3, #0
 800334c:	db4d      	blt.n	80033ea <__divdi3+0x19a>
 800334e:	002e      	movs	r6, r5
 8003350:	002c      	movs	r4, r5
 8003352:	40de      	lsrs	r6, r3
 8003354:	4663      	mov	r3, ip
 8003356:	40dc      	lsrs	r4, r3
 8003358:	465b      	mov	r3, fp
 800335a:	2b00      	cmp	r3, #0
 800335c:	db55      	blt.n	800340a <__divdi3+0x1ba>
 800335e:	0034      	movs	r4, r6
 8003360:	409c      	lsls	r4, r3
 8003362:	0023      	movs	r3, r4
 8003364:	4664      	mov	r4, ip
 8003366:	40a6      	lsls	r6, r4
 8003368:	0032      	movs	r2, r6
 800336a:	1a80      	subs	r0, r0, r2
 800336c:	4199      	sbcs	r1, r3
 800336e:	e003      	b.n	8003378 <__divdi3+0x128>
 8003370:	42b0      	cmp	r0, r6
 8003372:	d995      	bls.n	80032a0 <__divdi3+0x50>
 8003374:	2000      	movs	r0, #0
 8003376:	2100      	movs	r1, #0
 8003378:	4643      	mov	r3, r8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <__divdi3+0x138>
 800337e:	0003      	movs	r3, r0
 8003380:	000c      	movs	r4, r1
 8003382:	2100      	movs	r1, #0
 8003384:	4258      	negs	r0, r3
 8003386:	41a1      	sbcs	r1, r4
 8003388:	b003      	add	sp, #12
 800338a:	bcf0      	pop	{r4, r5, r6, r7}
 800338c:	46bb      	mov	fp, r7
 800338e:	46b2      	mov	sl, r6
 8003390:	46a9      	mov	r9, r5
 8003392:	46a0      	mov	r8, r4
 8003394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003396:	4662      	mov	r2, ip
 8003398:	4648      	mov	r0, r9
 800339a:	2320      	movs	r3, #32
 800339c:	4651      	mov	r1, sl
 800339e:	4090      	lsls	r0, r2
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	40d9      	lsrs	r1, r3
 80033a4:	0003      	movs	r3, r0
 80033a6:	9100      	str	r1, [sp, #0]
 80033a8:	9900      	ldr	r1, [sp, #0]
 80033aa:	4660      	mov	r0, ip
 80033ac:	430b      	orrs	r3, r1
 80033ae:	4651      	mov	r1, sl
 80033b0:	4081      	lsls	r1, r0
 80033b2:	000a      	movs	r2, r1
 80033b4:	42bb      	cmp	r3, r7
 80033b6:	d800      	bhi.n	80033ba <__divdi3+0x16a>
 80033b8:	e78c      	b.n	80032d4 <__divdi3+0x84>
 80033ba:	2100      	movs	r1, #0
 80033bc:	2000      	movs	r0, #0
 80033be:	9000      	str	r0, [sp, #0]
 80033c0:	9101      	str	r1, [sp, #4]
 80033c2:	4661      	mov	r1, ip
 80033c4:	2900      	cmp	r1, #0
 80033c6:	d19f      	bne.n	8003308 <__divdi3+0xb8>
 80033c8:	9800      	ldr	r0, [sp, #0]
 80033ca:	9901      	ldr	r1, [sp, #4]
 80033cc:	e7d4      	b.n	8003378 <__divdi3+0x128>
 80033ce:	42b1      	cmp	r1, r6
 80033d0:	d8f3      	bhi.n	80033ba <__divdi3+0x16a>
 80033d2:	e782      	b.n	80032da <__divdi3+0x8a>
 80033d4:	4661      	mov	r1, ip
 80033d6:	2620      	movs	r6, #32
 80033d8:	2701      	movs	r7, #1
 80033da:	1a76      	subs	r6, r6, r1
 80033dc:	2000      	movs	r0, #0
 80033de:	2100      	movs	r1, #0
 80033e0:	40f7      	lsrs	r7, r6
 80033e2:	9000      	str	r0, [sp, #0]
 80033e4:	9101      	str	r1, [sp, #4]
 80033e6:	9701      	str	r7, [sp, #4]
 80033e8:	e787      	b.n	80032fa <__divdi3+0xaa>
 80033ea:	4662      	mov	r2, ip
 80033ec:	2320      	movs	r3, #32
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	002a      	movs	r2, r5
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0026      	movs	r6, r4
 80033f6:	0013      	movs	r3, r2
 80033f8:	4662      	mov	r2, ip
 80033fa:	40d6      	lsrs	r6, r2
 80033fc:	002c      	movs	r4, r5
 80033fe:	431e      	orrs	r6, r3
 8003400:	4663      	mov	r3, ip
 8003402:	40dc      	lsrs	r4, r3
 8003404:	465b      	mov	r3, fp
 8003406:	2b00      	cmp	r3, #0
 8003408:	daa9      	bge.n	800335e <__divdi3+0x10e>
 800340a:	4662      	mov	r2, ip
 800340c:	2320      	movs	r3, #32
 800340e:	0035      	movs	r5, r6
 8003410:	4094      	lsls	r4, r2
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	40dd      	lsrs	r5, r3
 8003416:	0023      	movs	r3, r4
 8003418:	432b      	orrs	r3, r5
 800341a:	e7a3      	b.n	8003364 <__divdi3+0x114>

0800341c <__eqsf2>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	0042      	lsls	r2, r0, #1
 8003420:	024e      	lsls	r6, r1, #9
 8003422:	004c      	lsls	r4, r1, #1
 8003424:	0245      	lsls	r5, r0, #9
 8003426:	0a6d      	lsrs	r5, r5, #9
 8003428:	0e12      	lsrs	r2, r2, #24
 800342a:	0fc3      	lsrs	r3, r0, #31
 800342c:	0a76      	lsrs	r6, r6, #9
 800342e:	0e24      	lsrs	r4, r4, #24
 8003430:	0fc9      	lsrs	r1, r1, #31
 8003432:	2aff      	cmp	r2, #255	; 0xff
 8003434:	d00f      	beq.n	8003456 <__eqsf2+0x3a>
 8003436:	2cff      	cmp	r4, #255	; 0xff
 8003438:	d011      	beq.n	800345e <__eqsf2+0x42>
 800343a:	2001      	movs	r0, #1
 800343c:	42a2      	cmp	r2, r4
 800343e:	d000      	beq.n	8003442 <__eqsf2+0x26>
 8003440:	bd70      	pop	{r4, r5, r6, pc}
 8003442:	42b5      	cmp	r5, r6
 8003444:	d1fc      	bne.n	8003440 <__eqsf2+0x24>
 8003446:	428b      	cmp	r3, r1
 8003448:	d00d      	beq.n	8003466 <__eqsf2+0x4a>
 800344a:	2a00      	cmp	r2, #0
 800344c:	d1f8      	bne.n	8003440 <__eqsf2+0x24>
 800344e:	0028      	movs	r0, r5
 8003450:	1e45      	subs	r5, r0, #1
 8003452:	41a8      	sbcs	r0, r5
 8003454:	e7f4      	b.n	8003440 <__eqsf2+0x24>
 8003456:	2001      	movs	r0, #1
 8003458:	2d00      	cmp	r5, #0
 800345a:	d1f1      	bne.n	8003440 <__eqsf2+0x24>
 800345c:	e7eb      	b.n	8003436 <__eqsf2+0x1a>
 800345e:	2001      	movs	r0, #1
 8003460:	2e00      	cmp	r6, #0
 8003462:	d1ed      	bne.n	8003440 <__eqsf2+0x24>
 8003464:	e7e9      	b.n	800343a <__eqsf2+0x1e>
 8003466:	2000      	movs	r0, #0
 8003468:	e7ea      	b.n	8003440 <__eqsf2+0x24>
 800346a:	46c0      	nop			; (mov r8, r8)

0800346c <__gesf2>:
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	0042      	lsls	r2, r0, #1
 8003470:	0246      	lsls	r6, r0, #9
 8003472:	024d      	lsls	r5, r1, #9
 8003474:	004c      	lsls	r4, r1, #1
 8003476:	0fc3      	lsrs	r3, r0, #31
 8003478:	0a76      	lsrs	r6, r6, #9
 800347a:	0e12      	lsrs	r2, r2, #24
 800347c:	0a6d      	lsrs	r5, r5, #9
 800347e:	0e24      	lsrs	r4, r4, #24
 8003480:	0fc8      	lsrs	r0, r1, #31
 8003482:	2aff      	cmp	r2, #255	; 0xff
 8003484:	d01f      	beq.n	80034c6 <__gesf2+0x5a>
 8003486:	2cff      	cmp	r4, #255	; 0xff
 8003488:	d010      	beq.n	80034ac <__gesf2+0x40>
 800348a:	2a00      	cmp	r2, #0
 800348c:	d11f      	bne.n	80034ce <__gesf2+0x62>
 800348e:	4271      	negs	r1, r6
 8003490:	4171      	adcs	r1, r6
 8003492:	2c00      	cmp	r4, #0
 8003494:	d101      	bne.n	800349a <__gesf2+0x2e>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01e      	beq.n	80034d8 <__gesf2+0x6c>
 800349a:	2900      	cmp	r1, #0
 800349c:	d10e      	bne.n	80034bc <__gesf2+0x50>
 800349e:	4283      	cmp	r3, r0
 80034a0:	d01e      	beq.n	80034e0 <__gesf2+0x74>
 80034a2:	2102      	movs	r1, #2
 80034a4:	1e58      	subs	r0, r3, #1
 80034a6:	4008      	ands	r0, r1
 80034a8:	3801      	subs	r0, #1
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	d126      	bne.n	80034fe <__gesf2+0x92>
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	d1f4      	bne.n	800349e <__gesf2+0x32>
 80034b4:	4271      	negs	r1, r6
 80034b6:	4171      	adcs	r1, r6
 80034b8:	2900      	cmp	r1, #0
 80034ba:	d0f0      	beq.n	800349e <__gesf2+0x32>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d1f4      	bne.n	80034aa <__gesf2+0x3e>
 80034c0:	2001      	movs	r0, #1
 80034c2:	4240      	negs	r0, r0
 80034c4:	e7f1      	b.n	80034aa <__gesf2+0x3e>
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d119      	bne.n	80034fe <__gesf2+0x92>
 80034ca:	2cff      	cmp	r4, #255	; 0xff
 80034cc:	d0ee      	beq.n	80034ac <__gesf2+0x40>
 80034ce:	2c00      	cmp	r4, #0
 80034d0:	d1e5      	bne.n	800349e <__gesf2+0x32>
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d1e3      	bne.n	800349e <__gesf2+0x32>
 80034d6:	e7e4      	b.n	80034a2 <__gesf2+0x36>
 80034d8:	2000      	movs	r0, #0
 80034da:	2e00      	cmp	r6, #0
 80034dc:	d0e5      	beq.n	80034aa <__gesf2+0x3e>
 80034de:	e7e0      	b.n	80034a2 <__gesf2+0x36>
 80034e0:	42a2      	cmp	r2, r4
 80034e2:	dc05      	bgt.n	80034f0 <__gesf2+0x84>
 80034e4:	dbea      	blt.n	80034bc <__gesf2+0x50>
 80034e6:	42ae      	cmp	r6, r5
 80034e8:	d802      	bhi.n	80034f0 <__gesf2+0x84>
 80034ea:	d3e7      	bcc.n	80034bc <__gesf2+0x50>
 80034ec:	2000      	movs	r0, #0
 80034ee:	e7dc      	b.n	80034aa <__gesf2+0x3e>
 80034f0:	4241      	negs	r1, r0
 80034f2:	4141      	adcs	r1, r0
 80034f4:	4248      	negs	r0, r1
 80034f6:	2102      	movs	r1, #2
 80034f8:	4008      	ands	r0, r1
 80034fa:	3801      	subs	r0, #1
 80034fc:	e7d5      	b.n	80034aa <__gesf2+0x3e>
 80034fe:	2002      	movs	r0, #2
 8003500:	4240      	negs	r0, r0
 8003502:	e7d2      	b.n	80034aa <__gesf2+0x3e>

08003504 <__lesf2>:
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	0042      	lsls	r2, r0, #1
 8003508:	0246      	lsls	r6, r0, #9
 800350a:	024d      	lsls	r5, r1, #9
 800350c:	004c      	lsls	r4, r1, #1
 800350e:	0fc3      	lsrs	r3, r0, #31
 8003510:	0a76      	lsrs	r6, r6, #9
 8003512:	0e12      	lsrs	r2, r2, #24
 8003514:	0a6d      	lsrs	r5, r5, #9
 8003516:	0e24      	lsrs	r4, r4, #24
 8003518:	0fc8      	lsrs	r0, r1, #31
 800351a:	2aff      	cmp	r2, #255	; 0xff
 800351c:	d00d      	beq.n	800353a <__lesf2+0x36>
 800351e:	2cff      	cmp	r4, #255	; 0xff
 8003520:	d00f      	beq.n	8003542 <__lesf2+0x3e>
 8003522:	2a00      	cmp	r2, #0
 8003524:	d123      	bne.n	800356e <__lesf2+0x6a>
 8003526:	4271      	negs	r1, r6
 8003528:	4171      	adcs	r1, r6
 800352a:	2c00      	cmp	r4, #0
 800352c:	d10f      	bne.n	800354e <__lesf2+0x4a>
 800352e:	2d00      	cmp	r5, #0
 8003530:	d10d      	bne.n	800354e <__lesf2+0x4a>
 8003532:	2000      	movs	r0, #0
 8003534:	2e00      	cmp	r6, #0
 8003536:	d014      	beq.n	8003562 <__lesf2+0x5e>
 8003538:	e00d      	b.n	8003556 <__lesf2+0x52>
 800353a:	2e00      	cmp	r6, #0
 800353c:	d110      	bne.n	8003560 <__lesf2+0x5c>
 800353e:	2cff      	cmp	r4, #255	; 0xff
 8003540:	d115      	bne.n	800356e <__lesf2+0x6a>
 8003542:	2d00      	cmp	r5, #0
 8003544:	d10c      	bne.n	8003560 <__lesf2+0x5c>
 8003546:	2a00      	cmp	r2, #0
 8003548:	d103      	bne.n	8003552 <__lesf2+0x4e>
 800354a:	4271      	negs	r1, r6
 800354c:	4171      	adcs	r1, r6
 800354e:	2900      	cmp	r1, #0
 8003550:	d108      	bne.n	8003564 <__lesf2+0x60>
 8003552:	4283      	cmp	r3, r0
 8003554:	d010      	beq.n	8003578 <__lesf2+0x74>
 8003556:	2102      	movs	r1, #2
 8003558:	1e58      	subs	r0, r3, #1
 800355a:	4008      	ands	r0, r1
 800355c:	3801      	subs	r0, #1
 800355e:	e000      	b.n	8003562 <__lesf2+0x5e>
 8003560:	2002      	movs	r0, #2
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003564:	2800      	cmp	r0, #0
 8003566:	d1fc      	bne.n	8003562 <__lesf2+0x5e>
 8003568:	2001      	movs	r0, #1
 800356a:	4240      	negs	r0, r0
 800356c:	e7f9      	b.n	8003562 <__lesf2+0x5e>
 800356e:	2c00      	cmp	r4, #0
 8003570:	d1ef      	bne.n	8003552 <__lesf2+0x4e>
 8003572:	2d00      	cmp	r5, #0
 8003574:	d1ed      	bne.n	8003552 <__lesf2+0x4e>
 8003576:	e7ee      	b.n	8003556 <__lesf2+0x52>
 8003578:	42a2      	cmp	r2, r4
 800357a:	dc05      	bgt.n	8003588 <__lesf2+0x84>
 800357c:	dbf2      	blt.n	8003564 <__lesf2+0x60>
 800357e:	42ae      	cmp	r6, r5
 8003580:	d802      	bhi.n	8003588 <__lesf2+0x84>
 8003582:	d3ef      	bcc.n	8003564 <__lesf2+0x60>
 8003584:	2000      	movs	r0, #0
 8003586:	e7ec      	b.n	8003562 <__lesf2+0x5e>
 8003588:	4241      	negs	r1, r0
 800358a:	4141      	adcs	r1, r0
 800358c:	4248      	negs	r0, r1
 800358e:	2102      	movs	r1, #2
 8003590:	4008      	ands	r0, r1
 8003592:	3801      	subs	r0, #1
 8003594:	e7e5      	b.n	8003562 <__lesf2+0x5e>
 8003596:	46c0      	nop			; (mov r8, r8)

08003598 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_Init+0x3c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_Init+0x3c>)
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	0049      	lsls	r1, r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b2:	2003      	movs	r0, #3
 80035b4:	f000 f810 	bl	80035d8 <HAL_InitTick>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e001      	b.n	80035c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80035c4:	f00b f8d4 	bl	800e770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40022000 	.word	0x40022000

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035e0:	230f      	movs	r3, #15
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_InitTick+0x88>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02b      	beq.n	8003648 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_InitTick+0x8c>)
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_InitTick+0x88>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	0019      	movs	r1, r3
 80035fa:	23fa      	movs	r3, #250	; 0xfa
 80035fc:	0098      	lsls	r0, r3, #2
 80035fe:	f7fc fd8d 	bl	800011c <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	0019      	movs	r1, r3
 8003606:	0020      	movs	r0, r4
 8003608:	f7fc fd88 	bl	800011c <__udivsi3>
 800360c:	0003      	movs	r3, r0
 800360e:	0018      	movs	r0, r3
 8003610:	f001 f8c1 	bl	8004796 <HAL_SYSTICK_Config>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d112      	bne.n	800363e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d80a      	bhi.n	8003634 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	2301      	movs	r3, #1
 8003622:	425b      	negs	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	0018      	movs	r0, r3
 8003628:	f001 f890 	bl	800474c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_InitTick+0x90>)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e00d      	b.n	8003650 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003634:	230f      	movs	r3, #15
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e008      	b.n	8003650 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800363e:	230f      	movs	r3, #15
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e003      	b.n	8003650 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003648:	230f      	movs	r3, #15
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003650:	230f      	movs	r3, #15
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	781b      	ldrb	r3, [r3, #0]
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b005      	add	sp, #20
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	20000004 	.word	0x20000004
 8003664:	2000000c 	.word	0x2000000c
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_IncTick+0x1c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	001a      	movs	r2, r3
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_IncTick+0x20>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	18d2      	adds	r2, r2, r3
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_IncTick+0x20>)
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000004 	.word	0x20000004
 800368c:	20000150 	.word	0x20000150

08003690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  return uwTick;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_GetTick+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	20000150 	.word	0x20000150

080036a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7ff fff0 	bl	8003690 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	d005      	beq.n	80036ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_Delay+0x44>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	001a      	movs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	189b      	adds	r3, r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	f7ff ffe0 	bl	8003690 <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d8f7      	bhi.n	80036cc <HAL_Delay+0x28>
  {
  }
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20000004 	.word	0x20000004

080036ec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40010000 	.word	0x40010000
 8003714:	fffff9ff 	.word	0xfffff9ff

08003718 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003728:	401a      	ands	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	fe3fffff 	.word	0xfe3fffff

08003740 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	23e0      	movs	r3, #224	; 0xe0
 800374e:	045b      	lsls	r3, r3, #17
 8003750:	4013      	ands	r3, r2
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}

0800375a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	400a      	ands	r2, r1
 8003770:	2107      	movs	r1, #7
 8003772:	4091      	lsls	r1, r2
 8003774:	000a      	movs	r2, r1
 8003776:	43d2      	mvns	r2, r2
 8003778:	401a      	ands	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2104      	movs	r1, #4
 800377e:	400b      	ands	r3, r1
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4099      	lsls	r1, r3
 8003784:	000b      	movs	r3, r1
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}

08003794 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	23c0      	movs	r3, #192	; 0xc0
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4013      	ands	r3, r2
 80037a6:	d101      	bne.n	80037ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	211f      	movs	r1, #31
 80037ca:	400a      	ands	r2, r1
 80037cc:	210f      	movs	r1, #15
 80037ce:	4091      	lsls	r1, r2
 80037d0:	000a      	movs	r2, r1
 80037d2:	43d2      	mvns	r2, r2
 80037d4:	401a      	ands	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	210f      	movs	r1, #15
 80037dc:	4019      	ands	r1, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	201f      	movs	r0, #31
 80037e2:	4003      	ands	r3, r0
 80037e4:	4099      	lsls	r1, r3
 80037e6:	000b      	movs	r3, r1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	035b      	lsls	r3, r3, #13
 8003808:	0b5b      	lsrs	r3, r3, #13
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	0352      	lsls	r2, r2, #13
 800382a:	0b52      	lsrs	r2, r2, #13
 800382c:	43d2      	mvns	r2, r2
 800382e:	401a      	ands	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	0212      	lsls	r2, r2, #8
 8003850:	43d2      	mvns	r2, r2
 8003852:	401a      	ands	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	400b      	ands	r3, r1
 800385c:	4904      	ldr	r1, [pc, #16]	; (8003870 <LL_ADC_SetChannelSamplingTime+0x34>)
 800385e:	400b      	ands	r3, r1
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	07ffff00 	.word	0x07ffff00

08003874 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a05      	ldr	r2, [pc, #20]	; (8003898 <LL_ADC_EnableInternalRegulator+0x24>)
 8003882:	4013      	ands	r3, r2
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0552      	lsls	r2, r2, #21
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	6fffffe8 	.word	0x6fffffe8

0800389c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	055b      	lsls	r3, r3, #21
 80038ac:	401a      	ands	r2, r3
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	055b      	lsls	r3, r3, #21
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d101      	bne.n	80038ba <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <LL_ADC_Enable+0x20>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	2201      	movs	r2, #1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	7fffffe8 	.word	0x7fffffe8

080038e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <LL_ADC_Disable+0x20>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	2202      	movs	r2, #2
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	7fffffe8 	.word	0x7fffffe8

0800390c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2201      	movs	r2, #1
 800391a:	4013      	ands	r3, r2
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <LL_ADC_IsEnabled+0x18>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <LL_ADC_IsEnabled+0x1a>
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}

0800392e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d101      	bne.n	8003946 <LL_ADC_IsDisableOngoing+0x18>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <LL_ADC_IsDisableOngoing+0x1a>
 8003946:	2300      	movs	r3, #0
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b002      	add	sp, #8
 800394e:	bd80      	pop	{r7, pc}

08003950 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <LL_ADC_REG_StartConversion+0x20>)
 800395e:	4013      	ands	r3, r2
 8003960:	2204      	movs	r2, #4
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	7fffffe8 	.word	0x7fffffe8

08003974 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2204      	movs	r2, #4
 8003982:	4013      	ands	r3, r2
 8003984:	2b04      	cmp	r3, #4
 8003986:	d101      	bne.n	800398c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a0:	231f      	movs	r3, #31
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e1b1      	b.n	8003d22 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f00a fef9 	bl	800e7c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2254      	movs	r2, #84	; 0x54
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff ff5b 	bl	800389c <LL_ADC_IsInternalRegulatorEnabled>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d115      	bne.n	8003a16 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff ff40 	bl	8003874 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f4:	4bcd      	ldr	r3, [pc, #820]	; (8003d2c <HAL_ADC_Init+0x394>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	49cd      	ldr	r1, [pc, #820]	; (8003d30 <HAL_ADC_Init+0x398>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7fc fb8e 	bl	800011c <__udivsi3>
 8003a00:	0003      	movs	r3, r0
 8003a02:	3301      	adds	r3, #1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a08:	e002      	b.n	8003a10 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f9      	bne.n	8003a0a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff ff3e 	bl	800389c <LL_ADC_IsInternalRegulatorEnabled>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d10f      	bne.n	8003a44 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	2210      	movs	r2, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2201      	movs	r2, #1
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a3c:	231f      	movs	r3, #31
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7ff ff93 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	2210      	movs	r2, #16
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d000      	beq.n	8003a5e <HAL_ADC_Init+0xc6>
 8003a5c:	e154      	b.n	8003d08 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d000      	beq.n	8003a66 <HAL_ADC_Init+0xce>
 8003a64:	e150      	b.n	8003d08 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	4ab2      	ldr	r2, [pc, #712]	; (8003d34 <HAL_ADC_Init+0x39c>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2202      	movs	r2, #2
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7ff ff46 	bl	800390c <LL_ADC_IsEnabled>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d156      	bne.n	8003b32 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2218      	movs	r2, #24
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0f9b      	lsrs	r3, r3, #30
 8003aa2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	223c      	movs	r2, #60	; 0x3c
 8003ab4:	5c9b      	ldrb	r3, [r3, r2]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d111      	bne.n	8003ade <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	0f9b      	lsrs	r3, r3, #30
 8003ac0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ac6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003acc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003ad2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	4a94      	ldr	r2, [pc, #592]	; (8003d38 <HAL_ADC_Init+0x3a0>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	23c0      	movs	r3, #192	; 0xc0
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d018      	beq.n	8003b32 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	05db      	lsls	r3, r3, #23
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d012      	beq.n	8003b32 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	061b      	lsls	r3, r3, #24
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d00c      	beq.n	8003b32 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003b18:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_ADC_Init+0x3a4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a88      	ldr	r2, [pc, #544]	; (8003d40 <HAL_ADC_Init+0x3a8>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	23f0      	movs	r3, #240	; 0xf0
 8003b28:	039b      	lsls	r3, r3, #14
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	4b83      	ldr	r3, [pc, #524]	; (8003d3c <HAL_ADC_Init+0x3a4>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7e1b      	ldrb	r3, [r3, #24]
 8003b36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7e5b      	ldrb	r3, [r3, #25]
 8003b3c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7e9b      	ldrb	r3, [r3, #26]
 8003b44:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b46:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_ADC_Init+0x1be>
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	015b      	lsls	r3, r3, #5
 8003b54:	e000      	b.n	8003b58 <HAL_ADC_Init+0x1c0>
 8003b56:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b58:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b5e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da04      	bge.n	8003b72 <HAL_ADC_Init+0x1da>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	e001      	b.n	8003b76 <HAL_ADC_Init+0x1de>
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003b76:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	5c5b      	ldrb	r3, [r3, r1]
 8003b7e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b80:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d115      	bne.n	8003bbe <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7e9b      	ldrb	r3, [r3, #26]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	0252      	lsls	r2, r2, #9
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e00b      	b.n	8003bbe <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	2220      	movs	r2, #32
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	23e0      	movs	r3, #224	; 0xe0
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_ADC_Init+0x3ac>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_ADC_Init+0x3b0>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	001a      	movs	r2, r3
 8003c12:	2100      	movs	r1, #0
 8003c14:	f7ff fda1 	bl	800375a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	494a      	ldr	r1, [pc, #296]	; (8003d4c <HAL_ADC_Init+0x3b4>)
 8003c22:	001a      	movs	r2, r3
 8003c24:	f7ff fd99 	bl	800375a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	4249      	negs	r1, r1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
 8003c42:	e03a      	b.n	8003cba <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	039b      	lsls	r3, r3, #14
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d134      	bne.n	8003cba <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e00c      	b.n	8003c70 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	40da      	lsrs	r2, r3
 8003c60:	0013      	movs	r3, r2
 8003c62:	220f      	movs	r2, #15
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d006      	beq.n	8003c78 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b07      	cmp	r3, #7
 8003c74:	d9ef      	bls.n	8003c56 <HAL_ADC_Init+0x2be>
 8003c76:	e000      	b.n	8003c7a <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003c78:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d109      	bne.n	8003c94 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	4249      	negs	r1, r1
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
 8003c92:	e012      	b.n	8003cba <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	221c      	movs	r2, #28
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	4252      	negs	r2, r2
 8003caa:	409a      	lsls	r2, r3
 8003cac:	0011      	movs	r1, r2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_ADC_Init+0x3b8>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	2201      	movs	r2, #1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003ce0:	e01c      	b.n	8003d1c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	2212      	movs	r2, #18
 8003ce8:	4393      	bics	r3, r2
 8003cea:	2210      	movs	r2, #16
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003cfe:	231f      	movs	r3, #31
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003d06:	e009      	b.n	8003d1c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d14:	231f      	movs	r3, #31
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003d1c:	231f      	movs	r3, #31
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	781b      	ldrb	r3, [r3, #0]
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b008      	add	sp, #32
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	2000000c 	.word	0x2000000c
 8003d30:	00030d40 	.word	0x00030d40
 8003d34:	fffffefd 	.word	0xfffffefd
 8003d38:	1ffffc02 	.word	0x1ffffc02
 8003d3c:	40012708 	.word	0x40012708
 8003d40:	ffc3ffff 	.word	0xffc3ffff
 8003d44:	fffe0219 	.word	0xfffe0219
 8003d48:	dffffc02 	.word	0xdffffc02
 8003d4c:	07ffff04 	.word	0x07ffff04
 8003d50:	833fffe7 	.word	0x833fffe7

08003d54 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fe07 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d135      	bne.n	8003dd6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2254      	movs	r2, #84	; 0x54
 8003d6e:	5c9b      	ldrb	r3, [r3, r2]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_Start+0x24>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e035      	b.n	8003de4 <HAL_ADC_Start+0x90>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2254      	movs	r2, #84	; 0x54
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d80:	250f      	movs	r5, #15
 8003d82:	197c      	adds	r4, r7, r5
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 faaa 	bl	80042e0 <ADC_Enable>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d90:	197b      	adds	r3, r7, r5
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d119      	bne.n	8003dcc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <HAL_ADC_Start+0x98>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	221c      	movs	r2, #28
 8003db6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2254      	movs	r2, #84	; 0x54
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fdc3 	bl	8003950 <LL_ADC_REG_StartConversion>
 8003dca:	e008      	b.n	8003dde <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2254      	movs	r2, #84	; 0x54
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]
 8003dd4:	e003      	b.n	8003dde <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dd6:	230f      	movs	r3, #15
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003dde:	230f      	movs	r3, #15
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	781b      	ldrb	r3, [r3, #0]
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b004      	add	sp, #16
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}
 8003dec:	fffff0fe 	.word	0xfffff0fe

08003df0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d102      	bne.n	8003e08 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003e02:	2308      	movs	r3, #8
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e00f      	b.n	8003e28 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d007      	beq.n	8003e24 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	2220      	movs	r2, #32
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e072      	b.n	8003f0a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003e24:	2304      	movs	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e28:	f7ff fc32 	bl	8003690 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e30:	e01f      	b.n	8003e72 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	d01c      	beq.n	8003e72 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e38:	f7ff fc2a 	bl	8003690 <HAL_GetTick>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <HAL_ADC_PollForConversion+0x5e>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d111      	bne.n	8003e72 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4013      	ands	r3, r2
 8003e58:	d10b      	bne.n	8003e72 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	2204      	movs	r2, #4
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2254      	movs	r2, #84	; 0x54
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e04b      	b.n	8003f0a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d0d9      	beq.n	8003e32 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff fc7f 	bl	8003794 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d02e      	beq.n	8003ef8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7e9b      	ldrb	r3, [r3, #26]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d12a      	bne.n	8003ef8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d123      	bne.n	8003ef8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fd5d 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8003eba:	1e03      	subs	r3, r0, #0
 8003ebc:	d110      	bne.n	8003ee0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	210c      	movs	r1, #12
 8003eca:	438a      	bics	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <HAL_ADC_PollForConversion+0x124>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	659a      	str	r2, [r3, #88]	; 0x58
 8003ede:	e00b      	b.n	8003ef8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	7e1b      	ldrb	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	220c      	movs	r2, #12
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	fffffefe 	.word	0xfffffefe

08003f18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f3a:	2317      	movs	r3, #23
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2254      	movs	r2, #84	; 0x54
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x24>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e1c0      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x3a6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2254      	movs	r2, #84	; 0x54
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7ff fd07 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d000      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x3c>
 8003f6a:	e1a3      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d100      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x46>
 8003f74:	e143      	b.n	80041fe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f86:	4ac1      	ldr	r2, [pc, #772]	; (800428c <HAL_ADC_ConfigChannel+0x35c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0019      	movs	r1, r3
 8003f96:	0010      	movs	r0, r2
 8003f98:	f7ff fc2d 	bl	80037f6 <LL_ADC_REG_SetSequencerChAdd>
 8003f9c:	e0c9      	b.n	8004132 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	211f      	movs	r1, #31
 8003fa8:	400b      	ands	r3, r1
 8003faa:	210f      	movs	r1, #15
 8003fac:	4099      	lsls	r1, r3
 8003fae:	000b      	movs	r3, r1
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	035b      	lsls	r3, r3, #13
 8003fbc:	0b5b      	lsrs	r3, r3, #13
 8003fbe:	d105      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x9c>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	221f      	movs	r2, #31
 8003fc8:	4013      	ands	r3, r2
 8003fca:	e098      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d000      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0xa8>
 8003fd6:	e091      	b.n	80040fc <HAL_ADC_ConfigChannel+0x1cc>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d000      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0xb4>
 8003fe2:	e089      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x1c8>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	4013      	ands	r3, r2
 8003fec:	d000      	beq.n	8003ff0 <HAL_ADC_ConfigChannel+0xc0>
 8003fee:	e081      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x1c4>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d000      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0xcc>
 8003ffa:	e079      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x1c0>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	d000      	beq.n	8004008 <HAL_ADC_ConfigChannel+0xd8>
 8004006:	e071      	b.n	80040ec <HAL_ADC_ConfigChannel+0x1bc>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2220      	movs	r2, #32
 800400e:	4013      	ands	r3, r2
 8004010:	d000      	beq.n	8004014 <HAL_ADC_ConfigChannel+0xe4>
 8004012:	e069      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x1b8>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	4013      	ands	r3, r2
 800401c:	d000      	beq.n	8004020 <HAL_ADC_ConfigChannel+0xf0>
 800401e:	e061      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1b4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	4013      	ands	r3, r2
 8004028:	d000      	beq.n	800402c <HAL_ADC_ConfigChannel+0xfc>
 800402a:	e059      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x1b0>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4013      	ands	r3, r2
 8004036:	d151      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x1ac>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4013      	ands	r3, r2
 8004042:	d149      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1a8>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4013      	ands	r3, r2
 800404e:	d141      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1a4>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	4013      	ands	r3, r2
 800405a:	d139      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1a0>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	015b      	lsls	r3, r3, #5
 8004064:	4013      	ands	r3, r2
 8004066:	d131      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x19c>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	019b      	lsls	r3, r3, #6
 8004070:	4013      	ands	r3, r2
 8004072:	d129      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x198>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	01db      	lsls	r3, r3, #7
 800407c:	4013      	ands	r3, r2
 800407e:	d121      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x194>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	4013      	ands	r3, r2
 800408a:	d119      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x190>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	025b      	lsls	r3, r3, #9
 8004094:	4013      	ands	r3, r2
 8004096:	d111      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x18c>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	4013      	ands	r3, r2
 80040a2:	d109      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x188>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	02db      	lsls	r3, r3, #11
 80040ac:	4013      	ands	r3, r2
 80040ae:	d001      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x184>
 80040b0:	2312      	movs	r3, #18
 80040b2:	e024      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040b4:	2300      	movs	r3, #0
 80040b6:	e022      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040b8:	2311      	movs	r3, #17
 80040ba:	e020      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040bc:	2310      	movs	r3, #16
 80040be:	e01e      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040c0:	230f      	movs	r3, #15
 80040c2:	e01c      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040c4:	230e      	movs	r3, #14
 80040c6:	e01a      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040c8:	230d      	movs	r3, #13
 80040ca:	e018      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040cc:	230c      	movs	r3, #12
 80040ce:	e016      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040d0:	230b      	movs	r3, #11
 80040d2:	e014      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040d4:	230a      	movs	r3, #10
 80040d6:	e012      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040d8:	2309      	movs	r3, #9
 80040da:	e010      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040dc:	2308      	movs	r3, #8
 80040de:	e00e      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040e0:	2307      	movs	r3, #7
 80040e2:	e00c      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040e4:	2306      	movs	r3, #6
 80040e6:	e00a      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040e8:	2305      	movs	r3, #5
 80040ea:	e008      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040ec:	2304      	movs	r3, #4
 80040ee:	e006      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040f0:	2303      	movs	r3, #3
 80040f2:	e004      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e002      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_ADC_ConfigChannel+0x1ce>
 80040fc:	2300      	movs	r3, #0
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	6852      	ldr	r2, [r2, #4]
 8004102:	201f      	movs	r0, #31
 8004104:	4002      	ands	r2, r0
 8004106:	4093      	lsls	r3, r2
 8004108:	000a      	movs	r2, r1
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	429a      	cmp	r2, r3
 800411e:	d808      	bhi.n	8004132 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	f7ff fb42 	bl	80037b6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	001a      	movs	r2, r3
 8004140:	f7ff fb7c 	bl	800383c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	db00      	blt.n	800414e <HAL_ADC_ConfigChannel+0x21e>
 800414c:	e0bc      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800414e:	4b50      	ldr	r3, [pc, #320]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff faf5 	bl	8003740 <LL_ADC_GetCommonPathInternalCh>
 8004156:	0003      	movs	r3, r0
 8004158:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4d      	ldr	r2, [pc, #308]	; (8004294 <HAL_ADC_ConfigChannel+0x364>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d122      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800416c:	d11d      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2280      	movs	r2, #128	; 0x80
 8004172:	0412      	lsls	r2, r2, #16
 8004174:	4313      	orrs	r3, r2
 8004176:	4a46      	ldr	r2, [pc, #280]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 8004178:	0019      	movs	r1, r3
 800417a:	0010      	movs	r0, r2
 800417c:	f7ff facc 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004180:	4b45      	ldr	r3, [pc, #276]	; (8004298 <HAL_ADC_ConfigChannel+0x368>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4945      	ldr	r1, [pc, #276]	; (800429c <HAL_ADC_ConfigChannel+0x36c>)
 8004186:	0018      	movs	r0, r3
 8004188:	f7fb ffc8 	bl	800011c <__udivsi3>
 800418c:	0003      	movs	r3, r0
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	0013      	movs	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	189b      	adds	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800419a:	e002      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3b01      	subs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041a8:	e08e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <HAL_ADC_ConfigChannel+0x370>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10e      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x2a2>
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	045b      	lsls	r3, r3, #17
 80041ba:	4013      	ands	r3, r2
 80041bc:	d109      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2280      	movs	r2, #128	; 0x80
 80041c2:	0452      	lsls	r2, r2, #17
 80041c4:	4313      	orrs	r3, r2
 80041c6:	4a32      	ldr	r2, [pc, #200]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 80041c8:	0019      	movs	r1, r3
 80041ca:	0010      	movs	r0, r2
 80041cc:	f7ff faa4 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 80041d0:	e07a      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a33      	ldr	r2, [pc, #204]	; (80042a4 <HAL_ADC_ConfigChannel+0x374>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d000      	beq.n	80041de <HAL_ADC_ConfigChannel+0x2ae>
 80041dc:	e074      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	03db      	lsls	r3, r3, #15
 80041e4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80041e6:	d000      	beq.n	80041ea <HAL_ADC_ConfigChannel+0x2ba>
 80041e8:	e06e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2280      	movs	r2, #128	; 0x80
 80041ee:	03d2      	lsls	r2, r2, #15
 80041f0:	4313      	orrs	r3, r2
 80041f2:	4a27      	ldr	r2, [pc, #156]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 80041f4:	0019      	movs	r1, r3
 80041f6:	0010      	movs	r0, r2
 80041f8:	f7ff fa8e 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 80041fc:	e064      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	429a      	cmp	r2, r3
 8004208:	d004      	beq.n	8004214 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800420e:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_ADC_ConfigChannel+0x35c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d107      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0019      	movs	r1, r3
 800421e:	0010      	movs	r0, r2
 8004220:	f7ff fafa 	bl	8003818 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da4d      	bge.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 800422e:	0018      	movs	r0, r3
 8004230:	f7ff fa86 	bl	8003740 <LL_ADC_GetCommonPathInternalCh>
 8004234:	0003      	movs	r3, r0
 8004236:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_ADC_ConfigChannel+0x364>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d108      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_ADC_ConfigChannel+0x378>)
 8004246:	4013      	ands	r3, r2
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 800424a:	0019      	movs	r1, r3
 800424c:	0010      	movs	r0, r2
 800424e:	f7ff fa63 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 8004252:	e039      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <HAL_ADC_ConfigChannel+0x370>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4a12      	ldr	r2, [pc, #72]	; (80042ac <HAL_ADC_ConfigChannel+0x37c>)
 8004262:	4013      	ands	r3, r2
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 8004266:	0019      	movs	r1, r3
 8004268:	0010      	movs	r0, r2
 800426a:	f7ff fa55 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 800426e:	e02b      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <HAL_ADC_ConfigChannel+0x374>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d126      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <HAL_ADC_ConfigChannel+0x380>)
 800427e:	4013      	ands	r3, r2
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <HAL_ADC_ConfigChannel+0x360>)
 8004282:	0019      	movs	r1, r3
 8004284:	0010      	movs	r0, r2
 8004286:	f7ff fa47 	bl	8003718 <LL_ADC_SetCommonPathInternalCh>
 800428a:	e01d      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x398>
 800428c:	80000004 	.word	0x80000004
 8004290:	40012708 	.word	0x40012708
 8004294:	b0001000 	.word	0xb0001000
 8004298:	2000000c 	.word	0x2000000c
 800429c:	00030d40 	.word	0x00030d40
 80042a0:	b8004000 	.word	0xb8004000
 80042a4:	b4002000 	.word	0xb4002000
 80042a8:	ff7fffff 	.word	0xff7fffff
 80042ac:	feffffff 	.word	0xfeffffff
 80042b0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	2220      	movs	r2, #32
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042c0:	2317      	movs	r3, #23
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2254      	movs	r2, #84	; 0x54
 80042cc:	2100      	movs	r1, #0
 80042ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80042d0:	2317      	movs	r3, #23
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	781b      	ldrb	r3, [r3, #0]
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b006      	add	sp, #24
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)

080042e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7ff fb0b 	bl	800390c <LL_ADC_IsEnabled>
 80042f6:	1e03      	subs	r3, r0, #0
 80042f8:	d000      	beq.n	80042fc <ADC_Enable+0x1c>
 80042fa:	e069      	b.n	80043d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4a36      	ldr	r2, [pc, #216]	; (80043dc <ADC_Enable+0xfc>)
 8004304:	4013      	ands	r3, r2
 8004306:	d00d      	beq.n	8004324 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	2210      	movs	r2, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2201      	movs	r2, #1
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e056      	b.n	80043d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff facb 	bl	80038c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800432e:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <ADC_Enable+0x100>)
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff fa05 	bl	8003740 <LL_ADC_GetCommonPathInternalCh>
 8004336:	0002      	movs	r2, r0
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	4013      	ands	r3, r2
 800433e:	d00f      	beq.n	8004360 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <ADC_Enable+0x104>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4928      	ldr	r1, [pc, #160]	; (80043e8 <ADC_Enable+0x108>)
 8004346:	0018      	movs	r0, r3
 8004348:	f7fb fee8 	bl	800011c <__udivsi3>
 800434c:	0003      	movs	r3, r0
 800434e:	3301      	adds	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004352:	e002      	b.n	800435a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f9      	bne.n	8004354 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7e5b      	ldrb	r3, [r3, #25]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d033      	beq.n	80043d0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004368:	f7ff f992 	bl	8003690 <HAL_GetTick>
 800436c:	0003      	movs	r3, r0
 800436e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004370:	e027      	b.n	80043c2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0018      	movs	r0, r3
 8004378:	f7ff fac8 	bl	800390c <LL_ADC_IsEnabled>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d104      	bne.n	800438a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0018      	movs	r0, r3
 8004386:	f7ff fa9d 	bl	80038c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800438a:	f7ff f981 	bl	8003690 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d914      	bls.n	80043c2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2201      	movs	r2, #1
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d00d      	beq.n	80043c2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	2210      	movs	r2, #16
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	2201      	movs	r2, #1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e007      	b.n	80043d2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d1d0      	bne.n	8004372 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b004      	add	sp, #16
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	80000017 	.word	0x80000017
 80043e0:	40012708 	.word	0x40012708
 80043e4:	2000000c 	.word	0x2000000c
 80043e8:	00030d40 	.word	0x00030d40

080043ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7ff fa98 	bl	800392e <LL_ADC_IsDisableOngoing>
 80043fe:	0003      	movs	r3, r0
 8004400:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0018      	movs	r0, r3
 8004408:	f7ff fa80 	bl	800390c <LL_ADC_IsEnabled>
 800440c:	1e03      	subs	r3, r0, #0
 800440e:	d046      	beq.n	800449e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d143      	bne.n	800449e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2205      	movs	r2, #5
 800441e:	4013      	ands	r3, r2
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10d      	bne.n	8004440 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0018      	movs	r0, r3
 800442a:	f7ff fa5d 	bl	80038e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2203      	movs	r2, #3
 8004434:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004436:	f7ff f92b 	bl	8003690 <HAL_GetTick>
 800443a:	0003      	movs	r3, r0
 800443c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800443e:	e028      	b.n	8004492 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	2210      	movs	r2, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2201      	movs	r2, #1
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e021      	b.n	80044a0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800445c:	f7ff f918 	bl	8003690 <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d913      	bls.n	8004492 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d00d      	beq.n	8004492 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	2210      	movs	r2, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2201      	movs	r2, #1
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e006      	b.n	80044a0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2201      	movs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	d1de      	bne.n	800445c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b004      	add	sp, #16
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <LL_ADC_IsEnabled>:
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2201      	movs	r2, #1
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <LL_ADC_IsEnabled+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_ADC_IsEnabled+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b002      	add	sp, #8
 80044c8:	bd80      	pop	{r7, pc}

080044ca <LL_ADC_IsCalibrationOnGoing>:
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0fdb      	lsrs	r3, r3, #31
 80044d8:	07da      	lsls	r2, r3, #31
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	429a      	cmp	r2, r3
 80044e0:	d101      	bne.n	80044e6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2254      	movs	r2, #84	; 0x54
 8004500:	5c9b      	ldrb	r3, [r3, r2]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_ADCEx_Calibration_Start+0x1a>
 8004506:	2302      	movs	r3, #2
 8004508:	e06c      	b.n	80045e4 <HAL_ADCEx_Calibration_Start+0xf4>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2254      	movs	r2, #84	; 0x54
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004512:	2317      	movs	r3, #23
 8004514:	18fc      	adds	r4, r7, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff ff67 	bl	80043ec <ADC_Disable>
 800451e:	0003      	movs	r3, r0
 8004520:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff ffbe 	bl	80044a8 <LL_ADC_IsEnabled>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d14c      	bne.n	80045ca <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	4a2d      	ldr	r2, [pc, #180]	; (80045ec <HAL_ADCEx_Calibration_Start+0xfc>)
 8004536:	4013      	ands	r3, r2
 8004538:	2202      	movs	r2, #2
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2203      	movs	r2, #3
 8004548:	4013      	ands	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2103      	movs	r1, #3
 8004558:	438a      	bics	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	0609      	lsls	r1, r1, #24
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800456e:	e014      	b.n	800459a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3301      	adds	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_ADCEx_Calibration_Start+0x100>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d90d      	bls.n	800459a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	2212      	movs	r2, #18
 8004584:	4393      	bics	r3, r2
 8004586:	2210      	movs	r2, #16
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2254      	movs	r2, #84	; 0x54
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e024      	b.n	80045e4 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0018      	movs	r0, r3
 80045a0:	f7ff ff93 	bl	80044ca <LL_ADC_IsCalibrationOnGoing>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d1e3      	bne.n	8004570 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	2203      	movs	r2, #3
 80045be:	4393      	bics	r3, r2
 80045c0:	2201      	movs	r2, #1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58
 80045c8:	e005      	b.n	80045d6 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	2210      	movs	r2, #16
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2254      	movs	r2, #84	; 0x54
 80045da:	2100      	movs	r1, #0
 80045dc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80045de:	2317      	movs	r3, #23
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	781b      	ldrb	r3, [r3, #0]
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b007      	add	sp, #28
 80045ea:	bd90      	pop	{r4, r7, pc}
 80045ec:	fffffefd 	.word	0xfffffefd
 80045f0:	0002f1ff 	.word	0x0002f1ff

080045f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	0002      	movs	r2, r0
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004600:	1dfb      	adds	r3, r7, #7
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b7f      	cmp	r3, #127	; 0x7f
 8004606:	d809      	bhi.n	800461c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004608:	1dfb      	adds	r3, r7, #7
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	001a      	movs	r2, r3
 800460e:	231f      	movs	r3, #31
 8004610:	401a      	ands	r2, r3
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <__NVIC_EnableIRQ+0x30>)
 8004614:	2101      	movs	r1, #1
 8004616:	4091      	lsls	r1, r2
 8004618:	000a      	movs	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000e100 	.word	0xe000e100

08004628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	0002      	movs	r2, r0
 8004630:	6039      	str	r1, [r7, #0]
 8004632:	1dfb      	adds	r3, r7, #7
 8004634:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004636:	1dfb      	adds	r3, r7, #7
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b7f      	cmp	r3, #127	; 0x7f
 800463c:	d828      	bhi.n	8004690 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800463e:	4a2f      	ldr	r2, [pc, #188]	; (80046fc <__NVIC_SetPriority+0xd4>)
 8004640:	1dfb      	adds	r3, r7, #7
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b25b      	sxtb	r3, r3
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	33c0      	adds	r3, #192	; 0xc0
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	589b      	ldr	r3, [r3, r2]
 800464e:	1dfa      	adds	r2, r7, #7
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	0011      	movs	r1, r2
 8004654:	2203      	movs	r2, #3
 8004656:	400a      	ands	r2, r1
 8004658:	00d2      	lsls	r2, r2, #3
 800465a:	21ff      	movs	r1, #255	; 0xff
 800465c:	4091      	lsls	r1, r2
 800465e:	000a      	movs	r2, r1
 8004660:	43d2      	mvns	r2, r2
 8004662:	401a      	ands	r2, r3
 8004664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	22ff      	movs	r2, #255	; 0xff
 800466c:	401a      	ands	r2, r3
 800466e:	1dfb      	adds	r3, r7, #7
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	0018      	movs	r0, r3
 8004674:	2303      	movs	r3, #3
 8004676:	4003      	ands	r3, r0
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467c:	481f      	ldr	r0, [pc, #124]	; (80046fc <__NVIC_SetPriority+0xd4>)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b25b      	sxtb	r3, r3
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	430a      	orrs	r2, r1
 8004688:	33c0      	adds	r3, #192	; 0xc0
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800468e:	e031      	b.n	80046f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <__NVIC_SetPriority+0xd8>)
 8004692:	1dfb      	adds	r3, r7, #7
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	0019      	movs	r1, r3
 8004698:	230f      	movs	r3, #15
 800469a:	400b      	ands	r3, r1
 800469c:	3b08      	subs	r3, #8
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3306      	adds	r3, #6
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	3304      	adds	r3, #4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1dfa      	adds	r2, r7, #7
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	0011      	movs	r1, r2
 80046b0:	2203      	movs	r2, #3
 80046b2:	400a      	ands	r2, r1
 80046b4:	00d2      	lsls	r2, r2, #3
 80046b6:	21ff      	movs	r1, #255	; 0xff
 80046b8:	4091      	lsls	r1, r2
 80046ba:	000a      	movs	r2, r1
 80046bc:	43d2      	mvns	r2, r2
 80046be:	401a      	ands	r2, r3
 80046c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	22ff      	movs	r2, #255	; 0xff
 80046c8:	401a      	ands	r2, r3
 80046ca:	1dfb      	adds	r3, r7, #7
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	0018      	movs	r0, r3
 80046d0:	2303      	movs	r3, #3
 80046d2:	4003      	ands	r3, r0
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046d8:	4809      	ldr	r0, [pc, #36]	; (8004700 <__NVIC_SetPriority+0xd8>)
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	001c      	movs	r4, r3
 80046e0:	230f      	movs	r3, #15
 80046e2:	4023      	ands	r3, r4
 80046e4:	3b08      	subs	r3, #8
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	430a      	orrs	r2, r1
 80046ea:	3306      	adds	r3, #6
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	18c3      	adds	r3, r0, r3
 80046f0:	3304      	adds	r3, #4
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b003      	add	sp, #12
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1e5a      	subs	r2, r3, #1
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	045b      	lsls	r3, r3, #17
 8004714:	429a      	cmp	r2, r3
 8004716:	d301      	bcc.n	800471c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004718:	2301      	movs	r3, #1
 800471a:	e010      	b.n	800473e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <SysTick_Config+0x44>)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	3a01      	subs	r2, #1
 8004722:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004724:	2301      	movs	r3, #1
 8004726:	425b      	negs	r3, r3
 8004728:	2103      	movs	r1, #3
 800472a:	0018      	movs	r0, r3
 800472c:	f7ff ff7c 	bl	8004628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <SysTick_Config+0x44>)
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <SysTick_Config+0x44>)
 8004738:	2207      	movs	r2, #7
 800473a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	e000e010 	.word	0xe000e010

0800474c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	210f      	movs	r1, #15
 8004758:	187b      	adds	r3, r7, r1
 800475a:	1c02      	adds	r2, r0, #0
 800475c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	187b      	adds	r3, r7, r1
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b25b      	sxtb	r3, r3
 8004766:	0011      	movs	r1, r2
 8004768:	0018      	movs	r0, r3
 800476a:	f7ff ff5d 	bl	8004628 <__NVIC_SetPriority>
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	0002      	movs	r2, r0
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004782:	1dfb      	adds	r3, r7, #7
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b25b      	sxtb	r3, r3
 8004788:	0018      	movs	r0, r3
 800478a:	f7ff ff33 	bl	80045f4 <__NVIC_EnableIRQ>
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff ffaf 	bl	8004704 <SysTick_Config>
 80047a6:	0003      	movs	r3, r0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b002      	add	sp, #8
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603a      	str	r2, [r7, #0]
 80047bc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_FLASH_Program+0x94>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_FLASH_Program+0x1a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e038      	b.n	800483c <HAL_FLASH_Program+0x8c>
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <HAL_FLASH_Program+0x94>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047d0:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_FLASH_Program+0x94>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047d6:	2517      	movs	r5, #23
 80047d8:	197c      	adds	r4, r7, r5
 80047da:	23fa      	movs	r3, #250	; 0xfa
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 f874 	bl	80048cc <FLASH_WaitForLastOperation>
 80047e4:	0003      	movs	r3, r0
 80047e6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80047e8:	197b      	adds	r3, r7, r5
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11f      	bne.n	8004830 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d106      	bne.n	8004804 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	0008      	movs	r0, r1
 80047fe:	f000 f8b3 	bl	8004968 <FLASH_Program_DoubleWord>
 8004802:	e005      	b.n	8004810 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	0011      	movs	r1, r2
 800480a:	0018      	movs	r0, r3
 800480c:	f00b f8b4 	bl	800f978 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004810:	2317      	movs	r3, #23
 8004812:	18fc      	adds	r4, r7, r3
 8004814:	23fa      	movs	r3, #250	; 0xfa
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f857 	bl	80048cc <FLASH_WaitForLastOperation>
 800481e:	0003      	movs	r3, r0
 8004820:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_FLASH_Program+0x98>)
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	43d9      	mvns	r1, r3
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <HAL_FLASH_Program+0x98>)
 800482c:	400a      	ands	r2, r1
 800482e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_FLASH_Program+0x94>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004836:	2317      	movs	r3, #23
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	781b      	ldrb	r3, [r3, #0]
}
 800483c:	0018      	movs	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	b006      	add	sp, #24
 8004842:	bdb0      	pop	{r4, r5, r7, pc}
 8004844:	2000011c 	.word	0x2000011c
 8004848:	40022000 	.word	0x40022000

0800484c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004852:	1dfb      	adds	r3, r7, #7
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_FLASH_Unlock+0x3c>)
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	da0c      	bge.n	800487a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_FLASH_Unlock+0x3c>)
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <HAL_FLASH_Unlock+0x40>)
 8004864:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_FLASH_Unlock+0x3c>)
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <HAL_FLASH_Unlock+0x44>)
 800486a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_FLASH_Unlock+0x3c>)
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	da02      	bge.n	800487a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8004874:	1dfb      	adds	r3, r7, #7
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800487a:	1dfb      	adds	r3, r7, #7
 800487c:	781b      	ldrb	r3, [r3, #0]
}
 800487e:	0018      	movs	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	b002      	add	sp, #8
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	40022000 	.word	0x40022000
 800488c:	45670123 	.word	0x45670123
 8004890:	cdef89ab 	.word	0xcdef89ab

08004894 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800489a:	1dfb      	adds	r3, r7, #7
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_FLASH_Lock+0x34>)
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <HAL_FLASH_Lock+0x34>)
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	0609      	lsls	r1, r1, #24
 80048aa:	430a      	orrs	r2, r1
 80048ac:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_FLASH_Lock+0x34>)
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	da02      	bge.n	80048bc <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80048bc:	1dfb      	adds	r3, r7, #7
 80048be:	781b      	ldrb	r3, [r3, #0]
}
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40022000 	.word	0x40022000

080048cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80048d4:	f7fe fedc 	bl	8003690 <HAL_GetTick>
 80048d8:	0002      	movs	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	025b      	lsls	r3, r3, #9
 80048e4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80048e6:	e007      	b.n	80048f8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80048e8:	f7fe fed2 	bl	8003690 <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d801      	bhi.n	80048f8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e02a      	b.n	800494e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <FLASH_WaitForLastOperation+0x8c>)
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	d1f2      	bne.n	80048e8 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <FLASH_WaitForLastOperation+0x8c>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <FLASH_WaitForLastOperation+0x90>)
 8004908:	4013      	ands	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <FLASH_WaitForLastOperation+0x8c>)
 800490e:	4a14      	ldr	r2, [pc, #80]	; (8004960 <FLASH_WaitForLastOperation+0x94>)
 8004910:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <FLASH_WaitForLastOperation+0x98>)
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e015      	b.n	800494e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8004922:	f7fe feb5 	bl	8003690 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	189b      	adds	r3, r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800492e:	e007      	b.n	8004940 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8004930:	f7fe feae 	bl	8003690 <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4293      	cmp	r3, r2
 800493a:	d801      	bhi.n	8004940 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <FLASH_WaitForLastOperation+0x8c>)
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	02db      	lsls	r3, r3, #11
 8004948:	4013      	ands	r3, r2
 800494a:	d1f1      	bne.n	8004930 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40022000 	.word	0x40022000
 800495c:	0000c3fa 	.word	0x0000c3fa
 8004960:	0000c3fb 	.word	0x0000c3fb
 8004964:	2000011c 	.word	0x2000011c

08004968 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004968:	b5b0      	push	{r4, r5, r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	603a      	str	r2, [r7, #0]
 8004972:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <FLASH_Program_DoubleWord+0x3c>)
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <FLASH_Program_DoubleWord+0x3c>)
 800497a:	2101      	movs	r1, #1
 800497c:	430a      	orrs	r2, r1
 800497e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004986:	f3bf 8f6f 	isb	sy
}
 800498a:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	001c      	movs	r4, r3
 8004990:	2300      	movs	r3, #0
 8004992:	001d      	movs	r5, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3304      	adds	r3, #4
 8004998:	0022      	movs	r2, r4
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bdb0      	pop	{r4, r5, r7, pc}
 80049a4:	40022000 	.word	0x40022000

080049a8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80049a8:	b5b0      	push	{r4, r5, r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049b2:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_FLASHEx_Erase+0xe0>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_FLASHEx_Erase+0x16>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e05f      	b.n	8004a7e <HAL_FLASHEx_Erase+0xd6>
 80049be:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <HAL_FLASHEx_Erase+0xe0>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049c4:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <HAL_FLASHEx_Erase+0xe0>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049ca:	250f      	movs	r5, #15
 80049cc:	197c      	adds	r4, r7, r5
 80049ce:	23fa      	movs	r3, #250	; 0xfa
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff ff7a 	bl	80048cc <FLASH_WaitForLastOperation>
 80049d8:	0003      	movs	r3, r0
 80049da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80049dc:	002c      	movs	r4, r5
 80049de:	193b      	adds	r3, r7, r4
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d145      	bne.n	8004a72 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d10d      	bne.n	8004a10 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 f849 	bl	8004a90 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049fe:	193c      	adds	r4, r7, r4
 8004a00:	23fa      	movs	r3, #250	; 0xfa
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7ff ff61 	bl	80048cc <FLASH_WaitForLastOperation>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	7023      	strb	r3, [r4, #0]
 8004a0e:	e030      	b.n	8004a72 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	4252      	negs	r2, r2
 8004a16:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	e01a      	b.n	8004a56 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	0011      	movs	r1, r2
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f845 	bl	8004ab8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a2e:	250f      	movs	r5, #15
 8004a30:	197c      	adds	r4, r7, r5
 8004a32:	23fa      	movs	r3, #250	; 0xfa
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7ff ff48 	bl	80048cc <FLASH_WaitForLastOperation>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8004a40:	197b      	adds	r3, r7, r5
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	601a      	str	r2, [r3, #0]
          break;
 8004a4e:	e00a      	b.n	8004a66 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	18d3      	adds	r3, r2, r3
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3dc      	bcc.n	8004a20 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_FLASHEx_Erase+0xe4>)
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_FLASHEx_Erase+0xe4>)
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	438a      	bics	r2, r1
 8004a70:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_FLASHEx_Erase+0xe0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004a78:	230f      	movs	r3, #15
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b004      	add	sp, #16
 8004a84:	bdb0      	pop	{r4, r5, r7, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	2000011c 	.word	0x2000011c
 8004a8c:	40022000 	.word	0x40022000

08004a90 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <FLASH_MassErase+0x24>)
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <FLASH_MassErase+0x24>)
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	0249      	lsls	r1, r1, #9
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	615a      	str	r2, [r3, #20]
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	40022000 	.word	0x40022000

08004ab8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <FLASH_PageErase+0x2c>)
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <FLASH_PageErase+0x30>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	00da      	lsls	r2, r3, #3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <FLASH_PageErase+0x2c>)
 8004ad6:	4905      	ldr	r1, [pc, #20]	; (8004aec <FLASH_PageErase+0x34>)
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	615a      	str	r2, [r3, #20]
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b004      	add	sp, #16
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	fffffe07 	.word	0xfffffe07
 8004aec:	00010002 	.word	0x00010002

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afe:	e147      	b.n	8004d90 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4091      	lsls	r1, r2
 8004b0a:	000a      	movs	r2, r1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d100      	bne.n	8004b18 <HAL_GPIO_Init+0x28>
 8004b16:	e138      	b.n	8004d8a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d005      	beq.n	8004b30 <HAL_GPIO_Init+0x40>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d130      	bne.n	8004b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	0013      	movs	r3, r2
 8004b40:	43da      	mvns	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	0013      	movs	r3, r2
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b66:	2201      	movs	r2, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	401a      	ands	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	409a      	lsls	r2, r3
 8004b84:	0013      	movs	r3, r2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2203      	movs	r2, #3
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d017      	beq.n	8004bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	409a      	lsls	r2, r3
 8004bac:	0013      	movs	r3, r2
 8004bae:	43da      	mvns	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	0013      	movs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d123      	bne.n	8004c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	58d3      	ldr	r3, [r2, r3]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2207      	movs	r2, #7
 8004bec:	4013      	ands	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	43da      	mvns	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2107      	movs	r1, #7
 8004c06:	400b      	ands	r3, r1
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	0013      	movs	r3, r2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	0092      	lsls	r2, r2, #2
 8004c1e:	6939      	ldr	r1, [r7, #16]
 8004c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	0013      	movs	r3, r2
 8004c32:	43da      	mvns	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	401a      	ands	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	409a      	lsls	r2, r3
 8004c48:	0013      	movs	r3, r2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	23c0      	movs	r3, #192	; 0xc0
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d100      	bne.n	8004c64 <HAL_GPIO_Init+0x174>
 8004c62:	e092      	b.n	8004d8a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004c64:	4a50      	ldr	r2, [pc, #320]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	589b      	ldr	r3, [r3, r2]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2203      	movs	r2, #3
 8004c76:	4013      	ands	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	220f      	movs	r2, #15
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	0013      	movs	r3, r2
 8004c80:	43da      	mvns	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	23a0      	movs	r3, #160	; 0xa0
 8004c8c:	05db      	lsls	r3, r3, #23
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d013      	beq.n	8004cba <HAL_GPIO_Init+0x1ca>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a45      	ldr	r2, [pc, #276]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00d      	beq.n	8004cb6 <HAL_GPIO_Init+0x1c6>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a44      	ldr	r2, [pc, #272]	; (8004db0 <HAL_GPIO_Init+0x2c0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <HAL_GPIO_Init+0x1c2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a43      	ldr	r2, [pc, #268]	; (8004db4 <HAL_GPIO_Init+0x2c4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_GPIO_Init+0x1be>
 8004caa:	2303      	movs	r3, #3
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x1cc>
 8004cae:	2305      	movs	r3, #5
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x1cc>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x1cc>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x1cc>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	00d2      	lsls	r2, r2, #3
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004ccc:	4936      	ldr	r1, [pc, #216]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cda:	4a33      	ldr	r2, [pc, #204]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	58d3      	ldr	r3, [r2, r3]
 8004ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	2380      	movs	r3, #128	; 0x80
 8004cf2:	025b      	lsls	r3, r3, #9
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d00:	4929      	ldr	r1, [pc, #164]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d0a:	2384      	movs	r3, #132	; 0x84
 8004d0c:	58d3      	ldr	r3, [r2, r3]
 8004d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	43da      	mvns	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	029b      	lsls	r3, r3, #10
 8004d22:	4013      	ands	r3, r2
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d2e:	491e      	ldr	r1, [pc, #120]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d30:	2284      	movs	r2, #132	; 0x84
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	035b      	lsls	r3, r3, #13
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004d60:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	039b      	lsls	r3, r3, #14
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	40da      	lsrs	r2, r3
 8004d98:	1e13      	subs	r3, r2, #0
 8004d9a:	d000      	beq.n	8004d9e <HAL_GPIO_Init+0x2ae>
 8004d9c:	e6b0      	b.n	8004b00 <HAL_GPIO_Init+0x10>
  }
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b006      	add	sp, #24
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021800 	.word	0x40021800
 8004dac:	50000400 	.word	0x50000400
 8004db0:	50000800 	.word	0x50000800
 8004db4:	50000c00 	.word	0x50000c00

08004db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	000a      	movs	r2, r1
 8004dc2:	1cbb      	adds	r3, r7, #2
 8004dc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	1cba      	adds	r2, r7, #2
 8004dcc:	8812      	ldrh	r2, [r2, #0]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004dd2:	230f      	movs	r3, #15
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e003      	b.n	8004de4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ddc:	230f      	movs	r3, #15
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004de4:	230f      	movs	r3, #15
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	781b      	ldrb	r3, [r3, #0]
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	0008      	movs	r0, r1
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	1cbb      	adds	r3, r7, #2
 8004e00:	1c02      	adds	r2, r0, #0
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	1c7b      	adds	r3, r7, #1
 8004e06:	1c0a      	adds	r2, r1, #0
 8004e08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e0a:	1c7b      	adds	r3, r7, #1
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e12:	1cbb      	adds	r3, r7, #2
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e1a:	e003      	b.n	8004e24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e1c:	1cbb      	adds	r3, r7, #2
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	0002      	movs	r2, r0
 8004e34:	1dbb      	adds	r3, r7, #6
 8004e36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	1dba      	adds	r2, r7, #6
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	4013      	ands	r3, r2
 8004e42:	d008      	beq.n	8004e56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004e46:	1dba      	adds	r2, r7, #6
 8004e48:	8812      	ldrh	r2, [r2, #0]
 8004e4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004e4c:	1dbb      	adds	r3, r7, #6
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f007 fba8 	bl	800c5a6 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	1dba      	adds	r2, r7, #6
 8004e5c:	8812      	ldrh	r2, [r2, #0]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d008      	beq.n	8004e74 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004e64:	1dba      	adds	r2, r7, #6
 8004e66:	8812      	ldrh	r2, [r2, #0]
 8004e68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004e6a:	1dbb      	adds	r3, r7, #6
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f007 fb8a 	bl	800c588 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021800 	.word	0x40021800

08004e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e082      	b.n	8004f98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2241      	movs	r2, #65	; 0x41
 8004e96:	5c9b      	ldrb	r3, [r3, r2]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2240      	movs	r2, #64	; 0x40
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f009 fcbf 	bl	800e82c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2241      	movs	r2, #65	; 0x41
 8004eb2:	2124      	movs	r1, #36	; 0x24
 8004eb4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4934      	ldr	r1, [pc, #208]	; (8004fa0 <HAL_I2C_Init+0x120>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4931      	ldr	r1, [pc, #196]	; (8004fa4 <HAL_I2C_Init+0x124>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d108      	bne.n	8004efe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	0209      	lsls	r1, r1, #8
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	e007      	b.n	8004f0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2184      	movs	r1, #132	; 0x84
 8004f08:	0209      	lsls	r1, r1, #8
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d104      	bne.n	8004f20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2280      	movs	r2, #128	; 0x80
 8004f1c:	0112      	lsls	r2, r2, #4
 8004f1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	491f      	ldr	r1, [pc, #124]	; (8004fa8 <HAL_I2C_Init+0x128>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	491a      	ldr	r1, [pc, #104]	; (8004fa4 <HAL_I2C_Init+0x124>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69d9      	ldr	r1, [r3, #28]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2241      	movs	r2, #65	; 0x41
 8004f84:	2120      	movs	r1, #32
 8004f86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2242      	movs	r2, #66	; 0x42
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	f0ffffff 	.word	0xf0ffffff
 8004fa4:	ffff7fff 	.word	0xffff7fff
 8004fa8:	02008000 	.word	0x02008000

08004fac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	000c      	movs	r4, r1
 8004fb6:	0010      	movs	r0, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	230a      	movs	r3, #10
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	1c22      	adds	r2, r4, #0
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	1c02      	adds	r2, r0, #0
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	1dbb      	adds	r3, r7, #6
 8004fcc:	1c0a      	adds	r2, r1, #0
 8004fce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2241      	movs	r2, #65	; 0x41
 8004fd4:	5c9b      	ldrb	r3, [r3, r2]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d000      	beq.n	8004fde <HAL_I2C_Mem_Write+0x32>
 8004fdc:	e10c      	b.n	80051f8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_I2C_Mem_Write+0x42>
 8004fe4:	232c      	movs	r3, #44	; 0x2c
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d105      	bne.n	8004ffa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2280      	movs	r2, #128	; 0x80
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0ff      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_I2C_Mem_Write+0x5c>
 8005004:	2302      	movs	r3, #2
 8005006:	e0f8      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	2101      	movs	r1, #1
 800500e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005010:	f7fe fb3e 	bl	8003690 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	0219      	lsls	r1, r3, #8
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2319      	movs	r3, #25
 8005024:	2201      	movs	r2, #1
 8005026:	f000 fb0b 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 800502a:	1e03      	subs	r3, r0, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0e3      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2241      	movs	r2, #65	; 0x41
 8005036:	2121      	movs	r1, #33	; 0x21
 8005038:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2242      	movs	r2, #66	; 0x42
 800503e:	2140      	movs	r1, #64	; 0x40
 8005040:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	222c      	movs	r2, #44	; 0x2c
 8005052:	18ba      	adds	r2, r7, r2
 8005054:	8812      	ldrh	r2, [r2, #0]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800505e:	1dbb      	adds	r3, r7, #6
 8005060:	881c      	ldrh	r4, [r3, #0]
 8005062:	2308      	movs	r3, #8
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	881a      	ldrh	r2, [r3, #0]
 8005068:	230a      	movs	r3, #10
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	8819      	ldrh	r1, [r3, #0]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	0023      	movs	r3, r4
 800507a:	f000 f9f9 	bl	8005470 <I2C_RequestMemoryWrite>
 800507e:	1e03      	subs	r3, r0, #0
 8005080:	d005      	beq.n	800508e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2240      	movs	r2, #64	; 0x40
 8005086:	2100      	movs	r1, #0
 8005088:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0b5      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	2bff      	cmp	r3, #255	; 0xff
 8005096:	d911      	bls.n	80050bc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	22ff      	movs	r2, #255	; 0xff
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	045c      	lsls	r4, r3, #17
 80050a8:	230a      	movs	r3, #10
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	8819      	ldrh	r1, [r3, #0]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	0023      	movs	r3, r4
 80050b6:	f000 fbf7 	bl	80058a8 <I2C_TransferConfig>
 80050ba:	e012      	b.n	80050e2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	049c      	lsls	r4, r3, #18
 80050d0:	230a      	movs	r3, #10
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	8819      	ldrh	r1, [r3, #0]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	2300      	movs	r3, #0
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	0023      	movs	r3, r4
 80050de:	f000 fbe3 	bl	80058a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fae8 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e081      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d03a      	beq.n	80051a6 <HAL_I2C_Mem_Write+0x1fa>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d136      	bne.n	80051a6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	0013      	movs	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	2180      	movs	r1, #128	; 0x80
 8005146:	f000 fa7b 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d001      	beq.n	8005152 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e053      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005156:	b29b      	uxth	r3, r3
 8005158:	2bff      	cmp	r3, #255	; 0xff
 800515a:	d911      	bls.n	8005180 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	b2da      	uxtb	r2, r3
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	045c      	lsls	r4, r3, #17
 800516c:	230a      	movs	r3, #10
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	8819      	ldrh	r1, [r3, #0]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	2300      	movs	r3, #0
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	0023      	movs	r3, r4
 800517a:	f000 fb95 	bl	80058a8 <I2C_TransferConfig>
 800517e:	e012      	b.n	80051a6 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	049c      	lsls	r4, r3, #18
 8005194:	230a      	movs	r3, #10
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	8819      	ldrh	r1, [r3, #0]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	2300      	movs	r3, #0
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	0023      	movs	r3, r4
 80051a2:	f000 fb81 	bl	80058a8 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d198      	bne.n	80050e2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 fac0 	bl	800573c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051bc:	1e03      	subs	r3, r0, #0
 80051be:	d001      	beq.n	80051c4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e01a      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2220      	movs	r2, #32
 80051ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	490b      	ldr	r1, [pc, #44]	; (8005204 <HAL_I2C_Mem_Write+0x258>)
 80051d8:	400a      	ands	r2, r1
 80051da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2241      	movs	r2, #65	; 0x41
 80051e0:	2120      	movs	r1, #32
 80051e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2242      	movs	r2, #66	; 0x42
 80051e8:	2100      	movs	r1, #0
 80051ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2240      	movs	r2, #64	; 0x40
 80051f0:	2100      	movs	r1, #0
 80051f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e000      	b.n	80051fa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b007      	add	sp, #28
 8005200:	bd90      	pop	{r4, r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	fe00e800 	.word	0xfe00e800

08005208 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b089      	sub	sp, #36	; 0x24
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	000c      	movs	r4, r1
 8005212:	0010      	movs	r0, r2
 8005214:	0019      	movs	r1, r3
 8005216:	230a      	movs	r3, #10
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	1c22      	adds	r2, r4, #0
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	2308      	movs	r3, #8
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	1c02      	adds	r2, r0, #0
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	1c0a      	adds	r2, r1, #0
 800522a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2241      	movs	r2, #65	; 0x41
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	d000      	beq.n	800523a <HAL_I2C_Mem_Read+0x32>
 8005238:	e110      	b.n	800545c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <HAL_I2C_Mem_Read+0x42>
 8005240:	232c      	movs	r3, #44	; 0x2c
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	0092      	lsls	r2, r2, #2
 8005250:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e103      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2240      	movs	r2, #64	; 0x40
 800525a:	5c9b      	ldrb	r3, [r3, r2]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_I2C_Mem_Read+0x5c>
 8005260:	2302      	movs	r3, #2
 8005262:	e0fc      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2240      	movs	r2, #64	; 0x40
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800526c:	f7fe fa10 	bl	8003690 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	0219      	lsls	r1, r3, #8
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2319      	movs	r3, #25
 8005280:	2201      	movs	r2, #1
 8005282:	f000 f9dd 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0e7      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2241      	movs	r2, #65	; 0x41
 8005292:	2122      	movs	r1, #34	; 0x22
 8005294:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2242      	movs	r2, #66	; 0x42
 800529a:	2140      	movs	r1, #64	; 0x40
 800529c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	222c      	movs	r2, #44	; 0x2c
 80052ae:	18ba      	adds	r2, r7, r2
 80052b0:	8812      	ldrh	r2, [r2, #0]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ba:	1dbb      	adds	r3, r7, #6
 80052bc:	881c      	ldrh	r4, [r3, #0]
 80052be:	2308      	movs	r3, #8
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	230a      	movs	r3, #10
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	8819      	ldrh	r1, [r3, #0]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	0023      	movs	r3, r4
 80052d6:	f000 f92f 	bl	8005538 <I2C_RequestMemoryRead>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d005      	beq.n	80052ea <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2240      	movs	r2, #64	; 0x40
 80052e2:	2100      	movs	r1, #0
 80052e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0b9      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2bff      	cmp	r3, #255	; 0xff
 80052f2:	d911      	bls.n	8005318 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	22ff      	movs	r2, #255	; 0xff
 80052f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	045c      	lsls	r4, r3, #17
 8005304:	230a      	movs	r3, #10
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	8819      	ldrh	r1, [r3, #0]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	4b56      	ldr	r3, [pc, #344]	; (8005468 <HAL_I2C_Mem_Read+0x260>)
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	0023      	movs	r3, r4
 8005312:	f000 fac9 	bl	80058a8 <I2C_TransferConfig>
 8005316:	e012      	b.n	800533e <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	b2da      	uxtb	r2, r3
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	049c      	lsls	r4, r3, #18
 800532c:	230a      	movs	r3, #10
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	8819      	ldrh	r1, [r3, #0]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <HAL_I2C_Mem_Read+0x260>)
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	0023      	movs	r3, r4
 800533a:	f000 fab5 	bl	80058a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	0013      	movs	r3, r2
 8005348:	2200      	movs	r2, #0
 800534a:	2104      	movs	r1, #4
 800534c:	f000 f978 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e082      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d03a      	beq.n	800540a <HAL_I2C_Mem_Read+0x202>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005398:	2b00      	cmp	r3, #0
 800539a:	d136      	bne.n	800540a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800539c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	0013      	movs	r3, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	f000 f949 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 80053ae:	1e03      	subs	r3, r0, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e053      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2bff      	cmp	r3, #255	; 0xff
 80053be:	d911      	bls.n	80053e4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	22ff      	movs	r2, #255	; 0xff
 80053c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	045c      	lsls	r4, r3, #17
 80053d0:	230a      	movs	r3, #10
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	8819      	ldrh	r1, [r3, #0]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	2300      	movs	r3, #0
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	0023      	movs	r3, r4
 80053de:	f000 fa63 	bl	80058a8 <I2C_TransferConfig>
 80053e2:	e012      	b.n	800540a <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	049c      	lsls	r4, r3, #18
 80053f8:	230a      	movs	r3, #10
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	8819      	ldrh	r1, [r3, #0]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	2300      	movs	r3, #0
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	0023      	movs	r3, r4
 8005406:	f000 fa4f 	bl	80058a8 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d194      	bne.n	800533e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	0018      	movs	r0, r3
 800541c:	f000 f98e 	bl	800573c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005420:	1e03      	subs	r3, r0, #0
 8005422:	d001      	beq.n	8005428 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e01a      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2220      	movs	r2, #32
 800542e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	490c      	ldr	r1, [pc, #48]	; (800546c <HAL_I2C_Mem_Read+0x264>)
 800543c:	400a      	ands	r2, r1
 800543e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2241      	movs	r2, #65	; 0x41
 8005444:	2120      	movs	r1, #32
 8005446:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2242      	movs	r2, #66	; 0x42
 800544c:	2100      	movs	r1, #0
 800544e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
  }
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b007      	add	sp, #28
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	80002400 	.word	0x80002400
 800546c:	fe00e800 	.word	0xfe00e800

08005470 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	000c      	movs	r4, r1
 800547a:	0010      	movs	r0, r2
 800547c:	0019      	movs	r1, r3
 800547e:	250a      	movs	r5, #10
 8005480:	197b      	adds	r3, r7, r5
 8005482:	1c22      	adds	r2, r4, #0
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	2308      	movs	r3, #8
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	1c02      	adds	r2, r0, #0
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	1dbb      	adds	r3, r7, #6
 8005490:	1c0a      	adds	r2, r1, #0
 8005492:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005494:	1dbb      	adds	r3, r7, #6
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	045c      	lsls	r4, r3, #17
 800549e:	197b      	adds	r3, r7, r5
 80054a0:	8819      	ldrh	r1, [r3, #0]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	4b23      	ldr	r3, [pc, #140]	; (8005534 <I2C_RequestMemoryWrite+0xc4>)
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	0023      	movs	r3, r4
 80054aa:	f000 f9fd 	bl	80058a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b0:	6a39      	ldr	r1, [r7, #32]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 f902 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 80054ba:	1e03      	subs	r3, r0, #0
 80054bc:	d001      	beq.n	80054c2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e033      	b.n	800552a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c2:	1dbb      	adds	r3, r7, #6
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054ca:	2308      	movs	r3, #8
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28
 80054d8:	e019      	b.n	800550e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054da:	2308      	movs	r3, #8
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	0a1b      	lsrs	r3, r3, #8
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	6a39      	ldr	r1, [r7, #32]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 f8e3 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d001      	beq.n	8005500 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e014      	b.n	800552a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005500:	2308      	movs	r3, #8
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	0013      	movs	r3, r2
 8005518:	2200      	movs	r2, #0
 800551a:	2180      	movs	r1, #128	; 0x80
 800551c:	f000 f890 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 8005520:	1e03      	subs	r3, r0, #0
 8005522:	d001      	beq.n	8005528 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bdb0      	pop	{r4, r5, r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	80002000 	.word	0x80002000

08005538 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 8005538:	b5b0      	push	{r4, r5, r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	000c      	movs	r4, r1
 8005542:	0010      	movs	r0, r2
 8005544:	0019      	movs	r1, r3
 8005546:	250a      	movs	r5, #10
 8005548:	197b      	adds	r3, r7, r5
 800554a:	1c22      	adds	r2, r4, #0
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	2308      	movs	r3, #8
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	1c02      	adds	r2, r0, #0
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	1dbb      	adds	r3, r7, #6
 8005558:	1c0a      	adds	r2, r1, #0
 800555a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800555c:	1dbb      	adds	r3, r7, #6
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	197b      	adds	r3, r7, r5
 8005564:	8819      	ldrh	r1, [r3, #0]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <I2C_RequestMemoryRead+0xc0>)
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	f000 f99b 	bl	80058a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	6a39      	ldr	r1, [r7, #32]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	0018      	movs	r0, r3
 800557a:	f000 f8a0 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 800557e:	1e03      	subs	r3, r0, #0
 8005580:	d001      	beq.n	8005586 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e033      	b.n	80055ee <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005586:	1dbb      	adds	r3, r7, #6
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800558e:	2308      	movs	r3, #8
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b2da      	uxtb	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	629a      	str	r2, [r3, #40]	; 0x28
 800559c:	e019      	b.n	80055d2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800559e:	2308      	movs	r3, #8
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b2:	6a39      	ldr	r1, [r7, #32]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 f881 	bl	80056be <I2C_WaitOnTXISFlagUntilTimeout>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d001      	beq.n	80055c4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e014      	b.n	80055ee <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055c4:	2308      	movs	r3, #8
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a3a      	ldr	r2, [r7, #32]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	0013      	movs	r3, r2
 80055dc:	2200      	movs	r2, #0
 80055de:	2140      	movs	r1, #64	; 0x40
 80055e0:	f000 f82e 	bl	8005640 <I2C_WaitOnFlagUntilTimeout>
 80055e4:	1e03      	subs	r3, r0, #0
 80055e6:	d001      	beq.n	80055ec <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	0018      	movs	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b004      	add	sp, #16
 80055f4:	bdb0      	pop	{r4, r5, r7, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	80002000 	.word	0x80002000

080055fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2202      	movs	r2, #2
 800560c:	4013      	ands	r3, r2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d103      	bne.n	800561a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2201      	movs	r2, #1
 8005622:	4013      	ands	r3, r2
 8005624:	2b01      	cmp	r3, #1
 8005626:	d007      	beq.n	8005638 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2101      	movs	r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	619a      	str	r2, [r3, #24]
  }
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	1dfb      	adds	r3, r7, #7
 800564e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005650:	e021      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	d01e      	beq.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005658:	f7fe f81a 	bl	8003690 <HAL_GetTick>
 800565c:	0002      	movs	r2, r0
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d302      	bcc.n	800566e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d113      	bne.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	2220      	movs	r2, #32
 8005674:	431a      	orrs	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2241      	movs	r2, #65	; 0x41
 800567e:	2120      	movs	r1, #32
 8005680:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2242      	movs	r2, #66	; 0x42
 8005686:	2100      	movs	r1, #0
 8005688:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e00f      	b.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	425a      	negs	r2, r3
 80056a6:	4153      	adcs	r3, r2
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	001a      	movs	r2, r3
 80056ac:	1dfb      	adds	r3, r7, #7
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d0ce      	beq.n	8005652 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b004      	add	sp, #16
 80056bc:	bd80      	pop	{r7, pc}

080056be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ca:	e02b      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f86e 	bl	80057b4 <I2C_IsAcknowledgeFailed>
 80056d8:	1e03      	subs	r3, r0, #0
 80056da:	d001      	beq.n	80056e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e029      	b.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3301      	adds	r3, #1
 80056e4:	d01e      	beq.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fd ffd3 	bl	8003690 <HAL_GetTick>
 80056ea:	0002      	movs	r2, r0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d113      	bne.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	2220      	movs	r2, #32
 8005702:	431a      	orrs	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2241      	movs	r2, #65	; 0x41
 800570c:	2120      	movs	r1, #32
 800570e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2242      	movs	r2, #66	; 0x42
 8005714:	2100      	movs	r1, #0
 8005716:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	2100      	movs	r1, #0
 800571e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e007      	b.n	8005734 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2202      	movs	r2, #2
 800572c:	4013      	ands	r3, r2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d1cc      	bne.n	80056cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b004      	add	sp, #16
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005748:	e028      	b.n	800579c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	0018      	movs	r0, r3
 8005752:	f000 f82f 	bl	80057b4 <I2C_IsAcknowledgeFailed>
 8005756:	1e03      	subs	r3, r0, #0
 8005758:	d001      	beq.n	800575e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e026      	b.n	80057ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fd ff97 	bl	8003690 <HAL_GetTick>
 8005762:	0002      	movs	r2, r0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d113      	bne.n	800579c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	2220      	movs	r2, #32
 800577a:	431a      	orrs	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2241      	movs	r2, #65	; 0x41
 8005784:	2120      	movs	r1, #32
 8005786:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2242      	movs	r2, #66	; 0x42
 800578c:	2100      	movs	r1, #0
 800578e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e007      	b.n	80057ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2220      	movs	r2, #32
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d1cf      	bne.n	800574a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b004      	add	sp, #16
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2210      	movs	r2, #16
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d164      	bne.n	8005898 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	049b      	lsls	r3, r3, #18
 80057d8:	401a      	ands	r2, r3
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	049b      	lsls	r3, r3, #18
 80057de:	429a      	cmp	r2, r3
 80057e0:	d02b      	beq.n	800583a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2180      	movs	r1, #128	; 0x80
 80057ee:	01c9      	lsls	r1, r1, #7
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057f4:	e021      	b.n	800583a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3301      	adds	r3, #1
 80057fa:	d01e      	beq.n	800583a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fd ff48 	bl	8003690 <HAL_GetTick>
 8005800:	0002      	movs	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_IsAcknowledgeFailed+0x5e>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d113      	bne.n	800583a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	2220      	movs	r2, #32
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2241      	movs	r2, #65	; 0x41
 8005822:	2120      	movs	r1, #32
 8005824:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2242      	movs	r2, #66	; 0x42
 800582a:	2100      	movs	r1, #0
 800582c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2240      	movs	r2, #64	; 0x40
 8005832:	2100      	movs	r1, #0
 8005834:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e02f      	b.n	800589a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2220      	movs	r2, #32
 8005842:	4013      	ands	r3, r2
 8005844:	2b20      	cmp	r3, #32
 8005846:	d1d6      	bne.n	80057f6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2220      	movs	r2, #32
 8005856:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff fece 	bl	80055fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	490e      	ldr	r1, [pc, #56]	; (80058a4 <I2C_IsAcknowledgeFailed+0xf0>)
 800586c:	400a      	ands	r2, r1
 800586e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	2204      	movs	r2, #4
 8005876:	431a      	orrs	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2241      	movs	r2, #65	; 0x41
 8005880:	2120      	movs	r1, #32
 8005882:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2242      	movs	r2, #66	; 0x42
 8005888:	2100      	movs	r1, #0
 800588a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2240      	movs	r2, #64	; 0x40
 8005890:	2100      	movs	r1, #0
 8005892:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	0018      	movs	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	b004      	add	sp, #16
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	fe00e800 	.word	0xfe00e800

080058a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	0008      	movs	r0, r1
 80058b2:	0011      	movs	r1, r2
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	240a      	movs	r4, #10
 80058b8:	193b      	adds	r3, r7, r4
 80058ba:	1c02      	adds	r2, r0, #0
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	2009      	movs	r0, #9
 80058c0:	183b      	adds	r3, r7, r0
 80058c2:	1c0a      	adds	r2, r1, #0
 80058c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	6a3a      	ldr	r2, [r7, #32]
 80058ce:	0d51      	lsrs	r1, r2, #21
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	00d2      	lsls	r2, r2, #3
 80058d4:	400a      	ands	r2, r1
 80058d6:	490e      	ldr	r1, [pc, #56]	; (8005910 <I2C_TransferConfig+0x68>)
 80058d8:	430a      	orrs	r2, r1
 80058da:	43d2      	mvns	r2, r2
 80058dc:	401a      	ands	r2, r3
 80058de:	0011      	movs	r1, r2
 80058e0:	193b      	adds	r3, r7, r4
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	059b      	lsls	r3, r3, #22
 80058e6:	0d9a      	lsrs	r2, r3, #22
 80058e8:	183b      	adds	r3, r7, r0
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	0418      	lsls	r0, r3, #16
 80058ee:	23ff      	movs	r3, #255	; 0xff
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	4003      	ands	r3, r0
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b005      	add	sp, #20
 800590c:	bd90      	pop	{r4, r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	03ff63ff 	.word	0x03ff63ff

08005914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2241      	movs	r2, #65	; 0x41
 8005922:	5c9b      	ldrb	r3, [r3, r2]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b20      	cmp	r3, #32
 8005928:	d138      	bne.n	800599c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	5c9b      	ldrb	r3, [r3, r2]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005934:	2302      	movs	r3, #2
 8005936:	e032      	b.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2240      	movs	r2, #64	; 0x40
 800593c:	2101      	movs	r1, #1
 800593e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2241      	movs	r2, #65	; 0x41
 8005944:	2124      	movs	r1, #36	; 0x24
 8005946:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2101      	movs	r1, #1
 8005954:	438a      	bics	r2, r1
 8005956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4911      	ldr	r1, [pc, #68]	; (80059a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005964:	400a      	ands	r2, r1
 8005966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2101      	movs	r1, #1
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2241      	movs	r2, #65	; 0x41
 800598c:	2120      	movs	r1, #32
 800598e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2240      	movs	r2, #64	; 0x40
 8005994:	2100      	movs	r1, #0
 8005996:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b002      	add	sp, #8
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	ffffefff 	.word	0xffffefff

080059ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2241      	movs	r2, #65	; 0x41
 80059ba:	5c9b      	ldrb	r3, [r3, r2]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d139      	bne.n	8005a36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2240      	movs	r2, #64	; 0x40
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e033      	b.n	8005a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	2101      	movs	r1, #1
 80059d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2241      	movs	r2, #65	; 0x41
 80059dc:	2124      	movs	r1, #36	; 0x24
 80059de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	438a      	bics	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a11      	ldr	r2, [pc, #68]	; (8005a40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2241      	movs	r2, #65	; 0x41
 8005a26:	2120      	movs	r1, #32
 8005a28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2240      	movs	r2, #64	; 0x40
 8005a2e:	2100      	movs	r1, #0
 8005a30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e000      	b.n	8005a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
  }
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	fffff0ff 	.word	0xfffff0ff

08005a44 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a48:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <HAL_PWR_EnableBkUpAccess+0x18>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_PWR_EnableBkUpAccess+0x18>)
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	0049      	lsls	r1, r1, #1
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40007000 	.word	0x40007000

08005a60 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	000a      	movs	r2, r1
 8005a6a:	1cfb      	adds	r3, r7, #3
 8005a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <HAL_PWR_EnterSTOPMode+0x68>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2207      	movs	r2, #7
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <HAL_PWR_EnterSTOPMode+0x68>)
 8005a80:	2101      	movs	r1, #1
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e005      	b.n	8005a94 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_PWR_EnterSTOPMode+0x68>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <HAL_PWR_EnterSTOPMode+0x68>)
 8005a8e:	2107      	movs	r1, #7
 8005a90:	438a      	bics	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <HAL_PWR_EnterSTOPMode+0x6c>)
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <HAL_PWR_EnterSTOPMode+0x6c>)
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005aa0:	1cfb      	adds	r3, r7, #3
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005aa8:	bf30      	wfi
 8005aaa:	e002      	b.n	8005ab2 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005aac:	bf40      	sev
    __WFE();
 8005aae:	bf20      	wfe
    __WFE();
 8005ab0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_PWR_EnterSTOPMode+0x6c>)
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	4b05      	ldr	r3, [pc, #20]	; (8005acc <HAL_PWR_EnterSTOPMode+0x6c>)
 8005ab8:	2104      	movs	r1, #4
 8005aba:	438a      	bics	r2, r1
 8005abc:	611a      	str	r2, [r3, #16]
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	40007000 	.word	0x40007000
 8005acc:	e000ed00 	.word	0xe000ed00

08005ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d11f      	bne.n	8005b34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	0013      	movs	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4912      	ldr	r1, [pc, #72]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fa fb0a 	bl	800011c <__udivsi3>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b0e:	e008      	b.n	8005b22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e001      	b.n	8005b22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e009      	b.n	8005b36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d0ed      	beq.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	0018      	movs	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b004      	add	sp, #16
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	40007000 	.word	0x40007000
 8005b44:	fffff9ff 	.word	0xfffff9ff
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	000f4240 	.word	0x000f4240

08005b50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	23e0      	movs	r3, #224	; 0xe0
 8005b5a:	01db      	lsls	r3, r3, #7
 8005b5c:	4013      	ands	r3, r2
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000

08005b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e304      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4013      	ands	r3, r2
 8005b82:	d100      	bne.n	8005b86 <HAL_RCC_OscConfig+0x1e>
 8005b84:	e07c      	b.n	8005c80 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b86:	4bc3      	ldr	r3, [pc, #780]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2238      	movs	r2, #56	; 0x38
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b90:	4bc0      	ldr	r3, [pc, #768]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2203      	movs	r2, #3
 8005b96:	4013      	ands	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d102      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x3e>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d002      	beq.n	8005bac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d10b      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	4bb9      	ldr	r3, [pc, #740]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d062      	beq.n	8005c7e <HAL_RCC_OscConfig+0x116>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d15e      	bne.n	8005c7e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e2df      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	025b      	lsls	r3, r3, #9
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_OscConfig+0x78>
 8005bd0:	4bb0      	ldr	r3, [pc, #704]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4baf      	ldr	r3, [pc, #700]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	0249      	lsls	r1, r1, #9
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e020      	b.n	8005c22 <HAL_RCC_OscConfig+0xba>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	23a0      	movs	r3, #160	; 0xa0
 8005be6:	02db      	lsls	r3, r3, #11
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d10e      	bne.n	8005c0a <HAL_RCC_OscConfig+0xa2>
 8005bec:	4ba9      	ldr	r3, [pc, #676]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4ba8      	ldr	r3, [pc, #672]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005bf2:	2180      	movs	r1, #128	; 0x80
 8005bf4:	02c9      	lsls	r1, r1, #11
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4ba6      	ldr	r3, [pc, #664]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4ba5      	ldr	r3, [pc, #660]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	0249      	lsls	r1, r1, #9
 8005c04:	430a      	orrs	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e00b      	b.n	8005c22 <HAL_RCC_OscConfig+0xba>
 8005c0a:	4ba2      	ldr	r3, [pc, #648]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4ba1      	ldr	r3, [pc, #644]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c10:	49a1      	ldr	r1, [pc, #644]	; (8005e98 <HAL_RCC_OscConfig+0x330>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	4b9f      	ldr	r3, [pc, #636]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b9e      	ldr	r3, [pc, #632]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c1c:	499f      	ldr	r1, [pc, #636]	; (8005e9c <HAL_RCC_OscConfig+0x334>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fd fd31 	bl	8003690 <HAL_GetTick>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fd fd2c 	bl	8003690 <HAL_GetTick>
 8005c38:	0002      	movs	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e29e      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c46:	4b93      	ldr	r3, [pc, #588]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0xcc>
 8005c52:	e015      	b.n	8005c80 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fd fd1c 	bl	8003690 <HAL_GetTick>
 8005c58:	0003      	movs	r3, r0
 8005c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c5e:	f7fd fd17 	bl	8003690 <HAL_GetTick>
 8005c62:	0002      	movs	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b64      	cmp	r3, #100	; 0x64
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e289      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c70:	4b88      	ldr	r3, [pc, #544]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d1f0      	bne.n	8005c5e <HAL_RCC_OscConfig+0xf6>
 8005c7c:	e000      	b.n	8005c80 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2202      	movs	r2, #2
 8005c86:	4013      	ands	r3, r2
 8005c88:	d100      	bne.n	8005c8c <HAL_RCC_OscConfig+0x124>
 8005c8a:	e099      	b.n	8005dc0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8c:	4b81      	ldr	r3, [pc, #516]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2238      	movs	r2, #56	; 0x38
 8005c92:	4013      	ands	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c96:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d102      	bne.n	8005cac <HAL_RCC_OscConfig+0x144>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d002      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d135      	bne.n	8005d1e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cb2:	4b78      	ldr	r3, [pc, #480]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d005      	beq.n	8005cca <HAL_RCC_OscConfig+0x162>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e25c      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cca:	4b72      	ldr	r3, [pc, #456]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4a74      	ldr	r2, [pc, #464]	; (8005ea0 <HAL_RCC_OscConfig+0x338>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	4b6e      	ldr	r3, [pc, #440]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d112      	bne.n	8005d0c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ce6:	4b6b      	ldr	r3, [pc, #428]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6e      	ldr	r2, [pc, #440]	; (8005ea4 <HAL_RCC_OscConfig+0x33c>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	4b67      	ldr	r3, [pc, #412]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005cfa:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	0adb      	lsrs	r3, r3, #11
 8005d00:	2207      	movs	r2, #7
 8005d02:	4013      	ands	r3, r2
 8005d04:	4a68      	ldr	r2, [pc, #416]	; (8005ea8 <HAL_RCC_OscConfig+0x340>)
 8005d06:	40da      	lsrs	r2, r3
 8005d08:	4b68      	ldr	r3, [pc, #416]	; (8005eac <HAL_RCC_OscConfig+0x344>)
 8005d0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d0c:	4b68      	ldr	r3, [pc, #416]	; (8005eb0 <HAL_RCC_OscConfig+0x348>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7fd fc61 	bl	80035d8 <HAL_InitTick>
 8005d16:	1e03      	subs	r3, r0, #0
 8005d18:	d051      	beq.n	8005dbe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e232      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d030      	beq.n	8005d88 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d26:	4b5b      	ldr	r3, [pc, #364]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5e      	ldr	r2, [pc, #376]	; (8005ea4 <HAL_RCC_OscConfig+0x33c>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	0019      	movs	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	4b57      	ldr	r3, [pc, #348]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d36:	430a      	orrs	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005d3a:	4b56      	ldr	r3, [pc, #344]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	0049      	lsls	r1, r1, #1
 8005d44:	430a      	orrs	r2, r1
 8005d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fd fca2 	bl	8003690 <HAL_GetTick>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d52:	f7fd fc9d 	bl	8003690 <HAL_GetTick>
 8005d56:	0002      	movs	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e20f      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d64:	4b4b      	ldr	r3, [pc, #300]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a4a      	ldr	r2, [pc, #296]	; (8005ea0 <HAL_RCC_OscConfig+0x338>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	0019      	movs	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	021a      	lsls	r2, r3, #8
 8005d80:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	e01b      	b.n	8005dc0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005d88:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b41      	ldr	r3, [pc, #260]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005d8e:	4949      	ldr	r1, [pc, #292]	; (8005eb4 <HAL_RCC_OscConfig+0x34c>)
 8005d90:	400a      	ands	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fd fc7c 	bl	8003690 <HAL_GetTick>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fd fc77 	bl	8003690 <HAL_GetTick>
 8005da2:	0002      	movs	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e1e9      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005db0:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4013      	ands	r3, r2
 8005dba:	d1f0      	bne.n	8005d9e <HAL_RCC_OscConfig+0x236>
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dbe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d047      	beq.n	8005e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dca:	4b32      	ldr	r3, [pc, #200]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2238      	movs	r2, #56	; 0x38
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b18      	cmp	r3, #24
 8005dd4:	d10a      	bne.n	8005dec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	2202      	movs	r2, #2
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d03c      	beq.n	8005e5a <HAL_RCC_OscConfig+0x2f2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d138      	bne.n	8005e5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e1cb      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d019      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005df6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005df8:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fd fc46 	bl	8003690 <HAL_GetTick>
 8005e04:	0003      	movs	r3, r0
 8005e06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e0a:	f7fd fc41 	bl	8003690 <HAL_GetTick>
 8005e0e:	0002      	movs	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e1b3      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	2202      	movs	r2, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d0f1      	beq.n	8005e0a <HAL_RCC_OscConfig+0x2a2>
 8005e26:	e018      	b.n	8005e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005e28:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005e2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005e2e:	2101      	movs	r1, #1
 8005e30:	438a      	bics	r2, r1
 8005e32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fd fc2c 	bl	8003690 <HAL_GetTick>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e3e:	f7fd fc27 	bl	8003690 <HAL_GetTick>
 8005e42:	0002      	movs	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e199      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	2202      	movs	r2, #2
 8005e56:	4013      	ands	r3, r2
 8005e58:	d1f1      	bne.n	8005e3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	4013      	ands	r3, r2
 8005e62:	d100      	bne.n	8005e66 <HAL_RCC_OscConfig+0x2fe>
 8005e64:	e0c6      	b.n	8005ff4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e66:	231f      	movs	r3, #31
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2238      	movs	r2, #56	; 0x38
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d11e      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_RCC_OscConfig+0x32c>)
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7e:	2202      	movs	r2, #2
 8005e80:	4013      	ands	r3, r2
 8005e82:	d100      	bne.n	8005e86 <HAL_RCC_OscConfig+0x31e>
 8005e84:	e0b6      	b.n	8005ff4 <HAL_RCC_OscConfig+0x48c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d000      	beq.n	8005e90 <HAL_RCC_OscConfig+0x328>
 8005e8e:	e0b1      	b.n	8005ff4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e177      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
 8005e94:	40021000 	.word	0x40021000
 8005e98:	fffeffff 	.word	0xfffeffff
 8005e9c:	fffbffff 	.word	0xfffbffff
 8005ea0:	ffff80ff 	.word	0xffff80ff
 8005ea4:	ffffc7ff 	.word	0xffffc7ff
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	20000000 	.word	0x20000000
 8005eb4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005eb8:	4bb4      	ldr	r3, [pc, #720]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	055b      	lsls	r3, r3, #21
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x360>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x362>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ece:	4baf      	ldr	r3, [pc, #700]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed2:	4bae      	ldr	r3, [pc, #696]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005ed4:	2180      	movs	r1, #128	; 0x80
 8005ed6:	0549      	lsls	r1, r1, #21
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8005edc:	4bab      	ldr	r3, [pc, #684]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	055b      	lsls	r3, r3, #21
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005eea:	231f      	movs	r3, #31
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef2:	4ba7      	ldr	r3, [pc, #668]	; (8006190 <HAL_RCC_OscConfig+0x628>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	d11a      	bne.n	8005f34 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005efe:	4ba4      	ldr	r3, [pc, #656]	; (8006190 <HAL_RCC_OscConfig+0x628>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4ba3      	ldr	r3, [pc, #652]	; (8006190 <HAL_RCC_OscConfig+0x628>)
 8005f04:	2180      	movs	r1, #128	; 0x80
 8005f06:	0049      	lsls	r1, r1, #1
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005f0c:	f7fd fbc0 	bl	8003690 <HAL_GetTick>
 8005f10:	0003      	movs	r3, r0
 8005f12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f16:	f7fd fbbb 	bl	8003690 <HAL_GetTick>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e12d      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f28:	4b99      	ldr	r3, [pc, #612]	; (8006190 <HAL_RCC_OscConfig+0x628>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4013      	ands	r3, r2
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d106      	bne.n	8005f4a <HAL_RCC_OscConfig+0x3e2>
 8005f3c:	4b93      	ldr	r3, [pc, #588]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f40:	4b92      	ldr	r3, [pc, #584]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f42:	2101      	movs	r1, #1
 8005f44:	430a      	orrs	r2, r1
 8005f46:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f48:	e01c      	b.n	8005f84 <HAL_RCC_OscConfig+0x41c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d10c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x404>
 8005f52:	4b8e      	ldr	r3, [pc, #568]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f56:	4b8d      	ldr	r3, [pc, #564]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f58:	2104      	movs	r1, #4
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f5e:	4b8b      	ldr	r3, [pc, #556]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f62:	4b8a      	ldr	r3, [pc, #552]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f64:	2101      	movs	r1, #1
 8005f66:	430a      	orrs	r2, r1
 8005f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f6a:	e00b      	b.n	8005f84 <HAL_RCC_OscConfig+0x41c>
 8005f6c:	4b87      	ldr	r3, [pc, #540]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f70:	4b86      	ldr	r3, [pc, #536]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f72:	2101      	movs	r1, #1
 8005f74:	438a      	bics	r2, r1
 8005f76:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f78:	4b84      	ldr	r3, [pc, #528]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f7c:	4b83      	ldr	r3, [pc, #524]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005f7e:	2104      	movs	r1, #4
 8005f80:	438a      	bics	r2, r1
 8005f82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d014      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fd fb80 	bl	8003690 <HAL_GetTick>
 8005f90:	0003      	movs	r3, r0
 8005f92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f94:	e009      	b.n	8005faa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fd fb7b 	bl	8003690 <HAL_GetTick>
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	4a7c      	ldr	r2, [pc, #496]	; (8006194 <HAL_RCC_OscConfig+0x62c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e0ec      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005faa:	4b78      	ldr	r3, [pc, #480]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	2202      	movs	r2, #2
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d0f0      	beq.n	8005f96 <HAL_RCC_OscConfig+0x42e>
 8005fb4:	e013      	b.n	8005fde <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fd fb6b 	bl	8003690 <HAL_GetTick>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fbe:	e009      	b.n	8005fd4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc0:	f7fd fb66 	bl	8003690 <HAL_GetTick>
 8005fc4:	0002      	movs	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	4a72      	ldr	r2, [pc, #456]	; (8006194 <HAL_RCC_OscConfig+0x62c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e0d7      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fd4:	4b6d      	ldr	r3, [pc, #436]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	2202      	movs	r2, #2
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005fde:	231f      	movs	r3, #31
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d105      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005fe8:	4b68      	ldr	r3, [pc, #416]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fec:	4b67      	ldr	r3, [pc, #412]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8005fee:	496a      	ldr	r1, [pc, #424]	; (8006198 <HAL_RCC_OscConfig+0x630>)
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d100      	bne.n	8005ffe <HAL_RCC_OscConfig+0x496>
 8005ffc:	e0c1      	b.n	8006182 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ffe:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2238      	movs	r2, #56	; 0x38
 8006004:	4013      	ands	r3, r2
 8006006:	2b10      	cmp	r3, #16
 8006008:	d100      	bne.n	800600c <HAL_RCC_OscConfig+0x4a4>
 800600a:	e081      	b.n	8006110 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d156      	bne.n	80060c2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006014:	4b5d      	ldr	r3, [pc, #372]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b5c      	ldr	r3, [pc, #368]	; (800618c <HAL_RCC_OscConfig+0x624>)
 800601a:	4960      	ldr	r1, [pc, #384]	; (800619c <HAL_RCC_OscConfig+0x634>)
 800601c:	400a      	ands	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fd fb36 	bl	8003690 <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602a:	f7fd fb31 	bl	8003690 <HAL_GetTick>
 800602e:	0002      	movs	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e0a3      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800603c:	4b53      	ldr	r3, [pc, #332]	; (800618c <HAL_RCC_OscConfig+0x624>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	049b      	lsls	r3, r3, #18
 8006044:	4013      	ands	r3, r2
 8006046:	d1f0      	bne.n	800602a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006048:	4b50      	ldr	r3, [pc, #320]	; (800618c <HAL_RCC_OscConfig+0x624>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a54      	ldr	r2, [pc, #336]	; (80061a0 <HAL_RCC_OscConfig+0x638>)
 800604e:	4013      	ands	r3, r2
 8006050:	0019      	movs	r1, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	431a      	orrs	r2, r3
 8006076:	4b45      	ldr	r3, [pc, #276]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8006078:	430a      	orrs	r2, r1
 800607a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800607c:	4b43      	ldr	r3, [pc, #268]	; (800618c <HAL_RCC_OscConfig+0x624>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	4b42      	ldr	r3, [pc, #264]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	0449      	lsls	r1, r1, #17
 8006086:	430a      	orrs	r2, r1
 8006088:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800608a:	4b40      	ldr	r3, [pc, #256]	; (800618c <HAL_RCC_OscConfig+0x624>)
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8006090:	2180      	movs	r1, #128	; 0x80
 8006092:	0549      	lsls	r1, r1, #21
 8006094:	430a      	orrs	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fd fafa 	bl	8003690 <HAL_GetTick>
 800609c:	0003      	movs	r3, r0
 800609e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a2:	f7fd faf5 	bl	8003690 <HAL_GetTick>
 80060a6:	0002      	movs	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e067      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b4:	4b35      	ldr	r3, [pc, #212]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	049b      	lsls	r3, r3, #18
 80060bc:	4013      	ands	r3, r2
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x53a>
 80060c0:	e05f      	b.n	8006182 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c2:	4b32      	ldr	r3, [pc, #200]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060c8:	4934      	ldr	r1, [pc, #208]	; (800619c <HAL_RCC_OscConfig+0x634>)
 80060ca:	400a      	ands	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80060ce:	4b2f      	ldr	r3, [pc, #188]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060d4:	2103      	movs	r1, #3
 80060d6:	438a      	bics	r2, r1
 80060d8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80060da:	4b2c      	ldr	r3, [pc, #176]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b2b      	ldr	r3, [pc, #172]	; (800618c <HAL_RCC_OscConfig+0x624>)
 80060e0:	4930      	ldr	r1, [pc, #192]	; (80061a4 <HAL_RCC_OscConfig+0x63c>)
 80060e2:	400a      	ands	r2, r1
 80060e4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fd fad3 	bl	8003690 <HAL_GetTick>
 80060ea:	0003      	movs	r3, r0
 80060ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fd face 	bl	8003690 <HAL_GetTick>
 80060f4:	0002      	movs	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e040      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006102:	4b22      	ldr	r3, [pc, #136]	; (800618c <HAL_RCC_OscConfig+0x624>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	049b      	lsls	r3, r3, #18
 800610a:	4013      	ands	r3, r2
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x588>
 800610e:	e038      	b.n	8006182 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e033      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800611c:	4b1b      	ldr	r3, [pc, #108]	; (800618c <HAL_RCC_OscConfig+0x624>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2203      	movs	r2, #3
 8006126:	401a      	ands	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	429a      	cmp	r2, r3
 800612e:	d126      	bne.n	800617e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2270      	movs	r2, #112	; 0x70
 8006134:	401a      	ands	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d11f      	bne.n	800617e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	23fe      	movs	r3, #254	; 0xfe
 8006142:	01db      	lsls	r3, r3, #7
 8006144:	401a      	ands	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d116      	bne.n	800617e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	23f8      	movs	r3, #248	; 0xf8
 8006154:	039b      	lsls	r3, r3, #14
 8006156:	401a      	ands	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d10e      	bne.n	800617e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	23e0      	movs	r3, #224	; 0xe0
 8006164:	051b      	lsls	r3, r3, #20
 8006166:	401a      	ands	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d106      	bne.n	800617e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	0f5b      	lsrs	r3, r3, #29
 8006174:	075a      	lsls	r2, r3, #29
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b008      	add	sp, #32
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40021000 	.word	0x40021000
 8006190:	40007000 	.word	0x40007000
 8006194:	00001388 	.word	0x00001388
 8006198:	efffffff 	.word	0xefffffff
 800619c:	feffffff 	.word	0xfeffffff
 80061a0:	11c1808c 	.word	0x11c1808c
 80061a4:	eefeffff 	.word	0xeefeffff

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0e9      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061bc:	4b76      	ldr	r3, [pc, #472]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2207      	movs	r2, #7
 80061c2:	4013      	ands	r3, r2
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d91e      	bls.n	8006208 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b73      	ldr	r3, [pc, #460]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2207      	movs	r2, #7
 80061d0:	4393      	bics	r3, r2
 80061d2:	0019      	movs	r1, r3
 80061d4:	4b70      	ldr	r3, [pc, #448]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061dc:	f7fd fa58 	bl	8003690 <HAL_GetTick>
 80061e0:	0003      	movs	r3, r0
 80061e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061e4:	e009      	b.n	80061fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e6:	f7fd fa53 	bl	8003690 <HAL_GetTick>
 80061ea:	0002      	movs	r2, r0
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	4a6a      	ldr	r2, [pc, #424]	; (800639c <HAL_RCC_ClockConfig+0x1f4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e0ca      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061fa:	4b67      	ldr	r3, [pc, #412]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2207      	movs	r2, #7
 8006200:	4013      	ands	r3, r2
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d1ee      	bne.n	80061e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2202      	movs	r2, #2
 800620e:	4013      	ands	r3, r2
 8006210:	d015      	beq.n	800623e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2204      	movs	r2, #4
 8006218:	4013      	ands	r3, r2
 800621a:	d006      	beq.n	800622a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800621c:	4b60      	ldr	r3, [pc, #384]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	4b5f      	ldr	r3, [pc, #380]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 8006222:	21e0      	movs	r1, #224	; 0xe0
 8006224:	01c9      	lsls	r1, r1, #7
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622a:	4b5d      	ldr	r3, [pc, #372]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	4a5d      	ldr	r2, [pc, #372]	; (80063a4 <HAL_RCC_ClockConfig+0x1fc>)
 8006230:	4013      	ands	r3, r2
 8006232:	0019      	movs	r1, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	4b59      	ldr	r3, [pc, #356]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	4013      	ands	r3, r2
 8006246:	d057      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006250:	4b53      	ldr	r3, [pc, #332]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	4013      	ands	r3, r2
 800625a:	d12b      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e097      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d107      	bne.n	8006278 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006268:	4b4d      	ldr	r3, [pc, #308]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	049b      	lsls	r3, r3, #18
 8006270:	4013      	ands	r3, r2
 8006272:	d11f      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e08b      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006280:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4013      	ands	r3, r2
 800628a:	d113      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e07f      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d106      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006298:	4b41      	ldr	r3, [pc, #260]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	2202      	movs	r2, #2
 800629e:	4013      	ands	r3, r2
 80062a0:	d108      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e074      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a6:	4b3e      	ldr	r3, [pc, #248]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	2202      	movs	r2, #2
 80062ac:	4013      	ands	r3, r2
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e06d      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062b4:	4b3a      	ldr	r3, [pc, #232]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2207      	movs	r2, #7
 80062ba:	4393      	bics	r3, r2
 80062bc:	0019      	movs	r1, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c8:	f7fd f9e2 	bl	8003690 <HAL_GetTick>
 80062cc:	0003      	movs	r3, r0
 80062ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d0:	e009      	b.n	80062e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d2:	f7fd f9dd 	bl	8003690 <HAL_GetTick>
 80062d6:	0002      	movs	r2, r0
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	4a2f      	ldr	r2, [pc, #188]	; (800639c <HAL_RCC_ClockConfig+0x1f4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e054      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	4b2e      	ldr	r3, [pc, #184]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2238      	movs	r2, #56	; 0x38
 80062ec:	401a      	ands	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d1ec      	bne.n	80062d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062f8:	4b27      	ldr	r3, [pc, #156]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2207      	movs	r2, #7
 80062fe:	4013      	ands	r3, r2
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d21e      	bcs.n	8006344 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b24      	ldr	r3, [pc, #144]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2207      	movs	r2, #7
 800630c:	4393      	bics	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	4b21      	ldr	r3, [pc, #132]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006318:	f7fd f9ba 	bl	8003690 <HAL_GetTick>
 800631c:	0003      	movs	r3, r0
 800631e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006320:	e009      	b.n	8006336 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006322:	f7fd f9b5 	bl	8003690 <HAL_GetTick>
 8006326:	0002      	movs	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	4a1b      	ldr	r2, [pc, #108]	; (800639c <HAL_RCC_ClockConfig+0x1f4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e02c      	b.n	8006390 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006336:	4b18      	ldr	r3, [pc, #96]	; (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2207      	movs	r2, #7
 800633c:	4013      	ands	r3, r2
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d1ee      	bne.n	8006322 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2204      	movs	r2, #4
 800634a:	4013      	ands	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <HAL_RCC_ClockConfig+0x200>)
 8006354:	4013      	ands	r3, r2
 8006356:	0019      	movs	r1, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006362:	f000 f829 	bl	80063b8 <HAL_RCC_GetSysClockFreq>
 8006366:	0001      	movs	r1, r0
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	220f      	movs	r2, #15
 8006370:	401a      	ands	r2, r3
 8006372:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <HAL_RCC_ClockConfig+0x204>)
 8006374:	0092      	lsls	r2, r2, #2
 8006376:	58d3      	ldr	r3, [r2, r3]
 8006378:	221f      	movs	r2, #31
 800637a:	4013      	ands	r3, r2
 800637c:	000a      	movs	r2, r1
 800637e:	40da      	lsrs	r2, r3
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x208>)
 8006382:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_ClockConfig+0x20c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	0018      	movs	r0, r3
 800638a:	f7fd f925 	bl	80035d8 <HAL_InitTick>
 800638e:	0003      	movs	r3, r0
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b004      	add	sp, #16
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40022000 	.word	0x40022000
 800639c:	00001388 	.word	0x00001388
 80063a0:	40021000 	.word	0x40021000
 80063a4:	fffff0ff 	.word	0xfffff0ff
 80063a8:	ffff8fff 	.word	0xffff8fff
 80063ac:	0800fcf8 	.word	0x0800fcf8
 80063b0:	2000000c 	.word	0x2000000c
 80063b4:	20000000 	.word	0x20000000

080063b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063be:	4b3c      	ldr	r3, [pc, #240]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2238      	movs	r2, #56	; 0x38
 80063c4:	4013      	ands	r3, r2
 80063c6:	d10f      	bne.n	80063e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80063c8:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0adb      	lsrs	r3, r3, #11
 80063ce:	2207      	movs	r2, #7
 80063d0:	4013      	ands	r3, r2
 80063d2:	2201      	movs	r2, #1
 80063d4:	409a      	lsls	r2, r3
 80063d6:	0013      	movs	r3, r2
 80063d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	4835      	ldr	r0, [pc, #212]	; (80064b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063de:	f7f9 fe9d 	bl	800011c <__udivsi3>
 80063e2:	0003      	movs	r3, r0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	e05d      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e8:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2238      	movs	r2, #56	; 0x38
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d102      	bne.n	80063fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063f4:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	e054      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2238      	movs	r2, #56	; 0x38
 8006400:	4013      	ands	r3, r2
 8006402:	2b10      	cmp	r3, #16
 8006404:	d138      	bne.n	8006478 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006406:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2203      	movs	r2, #3
 800640c:	4013      	ands	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	2207      	movs	r2, #7
 8006418:	4013      	ands	r3, r2
 800641a:	3301      	adds	r3, #1
 800641c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d10d      	bne.n	8006440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4824      	ldr	r0, [pc, #144]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006428:	f7f9 fe78 	bl	800011c <__udivsi3>
 800642c:	0003      	movs	r3, r0
 800642e:	0019      	movs	r1, r3
 8006430:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	227f      	movs	r2, #127	; 0x7f
 8006438:	4013      	ands	r3, r2
 800643a:	434b      	muls	r3, r1
 800643c:	617b      	str	r3, [r7, #20]
        break;
 800643e:	e00d      	b.n	800645c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	481c      	ldr	r0, [pc, #112]	; (80064b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006444:	f7f9 fe6a 	bl	800011c <__udivsi3>
 8006448:	0003      	movs	r3, r0
 800644a:	0019      	movs	r1, r3
 800644c:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	227f      	movs	r2, #127	; 0x7f
 8006454:	4013      	ands	r3, r2
 8006456:	434b      	muls	r3, r1
 8006458:	617b      	str	r3, [r7, #20]
        break;
 800645a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800645c:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0f5b      	lsrs	r3, r3, #29
 8006462:	2207      	movs	r2, #7
 8006464:	4013      	ands	r3, r2
 8006466:	3301      	adds	r3, #1
 8006468:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	6978      	ldr	r0, [r7, #20]
 800646e:	f7f9 fe55 	bl	800011c <__udivsi3>
 8006472:	0003      	movs	r3, r0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e015      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2238      	movs	r2, #56	; 0x38
 800647e:	4013      	ands	r3, r2
 8006480:	2b20      	cmp	r3, #32
 8006482:	d103      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006484:	2380      	movs	r3, #128	; 0x80
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	e00b      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2238      	movs	r2, #56	; 0x38
 8006492:	4013      	ands	r3, r2
 8006494:	2b18      	cmp	r3, #24
 8006496:	d103      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006498:	23fa      	movs	r3, #250	; 0xfa
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e001      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064a4:	693b      	ldr	r3, [r7, #16]
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b006      	add	sp, #24
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	40021000 	.word	0x40021000
 80064b4:	00f42400 	.word	0x00f42400
 80064b8:	007a1200 	.word	0x007a1200

080064bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c0:	4b02      	ldr	r3, [pc, #8]	; (80064cc <HAL_RCC_GetHCLKFreq+0x10>)
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	0018      	movs	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	2000000c 	.word	0x2000000c

080064d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d0:	b5b0      	push	{r4, r5, r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064d4:	f7ff fff2 	bl	80064bc <HAL_RCC_GetHCLKFreq>
 80064d8:	0004      	movs	r4, r0
 80064da:	f7ff fb39 	bl	8005b50 <LL_RCC_GetAPB1Prescaler>
 80064de:	0003      	movs	r3, r0
 80064e0:	0b1a      	lsrs	r2, r3, #12
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	58d3      	ldr	r3, [r2, r3]
 80064e8:	221f      	movs	r2, #31
 80064ea:	4013      	ands	r3, r2
 80064ec:	40dc      	lsrs	r4, r3
 80064ee:	0023      	movs	r3, r4
}
 80064f0:	0018      	movs	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bdb0      	pop	{r4, r5, r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	0800fd38 	.word	0x0800fd38

080064fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006504:	2313      	movs	r3, #19
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800650c:	2312      	movs	r3, #18
 800650e:	18fb      	adds	r3, r7, r3
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	2380      	movs	r3, #128	; 0x80
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	4013      	ands	r3, r2
 800651e:	d100      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006520:	e0a3      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006522:	2011      	movs	r0, #17
 8006524:	183b      	adds	r3, r7, r0
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652a:	4bc3      	ldr	r3, [pc, #780]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800652c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	055b      	lsls	r3, r3, #21
 8006532:	4013      	ands	r3, r2
 8006534:	d110      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	4bc0      	ldr	r3, [pc, #768]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800653a:	4bbf      	ldr	r3, [pc, #764]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	0549      	lsls	r1, r1, #21
 8006540:	430a      	orrs	r2, r1
 8006542:	63da      	str	r2, [r3, #60]	; 0x3c
 8006544:	4bbc      	ldr	r3, [pc, #752]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006548:	2380      	movs	r3, #128	; 0x80
 800654a:	055b      	lsls	r3, r3, #21
 800654c:	4013      	ands	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]
 8006550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006552:	183b      	adds	r3, r7, r0
 8006554:	2201      	movs	r2, #1
 8006556:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006558:	4bb8      	ldr	r3, [pc, #736]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4bb7      	ldr	r3, [pc, #732]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800655e:	2180      	movs	r1, #128	; 0x80
 8006560:	0049      	lsls	r1, r1, #1
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006566:	f7fd f893 	bl	8003690 <HAL_GetTick>
 800656a:	0003      	movs	r3, r0
 800656c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800656e:	e00b      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006570:	f7fd f88e 	bl	8003690 <HAL_GetTick>
 8006574:	0002      	movs	r2, r0
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d904      	bls.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800657e:	2313      	movs	r3, #19
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	2203      	movs	r2, #3
 8006584:	701a      	strb	r2, [r3, #0]
        break;
 8006586:	e005      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006588:	4bac      	ldr	r3, [pc, #688]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4013      	ands	r3, r2
 8006592:	d0ed      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006594:	2313      	movs	r3, #19
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d154      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800659e:	4ba6      	ldr	r3, [pc, #664]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065a2:	23c0      	movs	r3, #192	; 0xc0
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4013      	ands	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d019      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d014      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065ba:	4b9f      	ldr	r3, [pc, #636]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	4aa0      	ldr	r2, [pc, #640]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065c4:	4b9c      	ldr	r3, [pc, #624]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065c8:	4b9b      	ldr	r3, [pc, #620]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065ca:	2180      	movs	r1, #128	; 0x80
 80065cc:	0249      	lsls	r1, r1, #9
 80065ce:	430a      	orrs	r2, r1
 80065d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065d2:	4b99      	ldr	r3, [pc, #612]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065d6:	4b98      	ldr	r3, [pc, #608]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065d8:	499a      	ldr	r1, [pc, #616]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80065da:	400a      	ands	r2, r1
 80065dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065de:	4b96      	ldr	r3, [pc, #600]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	d016      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fd f850 	bl	8003690 <HAL_GetTick>
 80065f0:	0003      	movs	r3, r0
 80065f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f4:	e00c      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f6:	f7fd f84b 	bl	8003690 <HAL_GetTick>
 80065fa:	0002      	movs	r2, r0
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	4a91      	ldr	r2, [pc, #580]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d904      	bls.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006606:	2313      	movs	r3, #19
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	2203      	movs	r2, #3
 800660c:	701a      	strb	r2, [r3, #0]
            break;
 800660e:	e004      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006610:	4b89      	ldr	r3, [pc, #548]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	2202      	movs	r2, #2
 8006616:	4013      	ands	r3, r2
 8006618:	d0ed      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800661a:	2313      	movs	r3, #19
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006624:	4b84      	ldr	r3, [pc, #528]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	4a85      	ldr	r2, [pc, #532]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800662a:	4013      	ands	r3, r2
 800662c:	0019      	movs	r1, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006632:	4b81      	ldr	r3, [pc, #516]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006634:	430a      	orrs	r2, r1
 8006636:	65da      	str	r2, [r3, #92]	; 0x5c
 8006638:	e00c      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800663a:	2312      	movs	r3, #18
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	2213      	movs	r2, #19
 8006640:	18ba      	adds	r2, r7, r2
 8006642:	7812      	ldrb	r2, [r2, #0]
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e005      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	2312      	movs	r3, #18
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2213      	movs	r2, #19
 800664e:	18ba      	adds	r2, r7, r2
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006654:	2311      	movs	r3, #17
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d105      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800665e:	4b76      	ldr	r3, [pc, #472]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006662:	4b75      	ldr	r3, [pc, #468]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006664:	4979      	ldr	r1, [pc, #484]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006666:	400a      	ands	r2, r1
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	4013      	ands	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006674:	4b70      	ldr	r3, [pc, #448]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	2203      	movs	r2, #3
 800667a:	4393      	bics	r3, r2
 800667c:	0019      	movs	r1, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	4b6d      	ldr	r3, [pc, #436]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006684:	430a      	orrs	r2, r1
 8006686:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2202      	movs	r2, #2
 800668e:	4013      	ands	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006692:	4b69      	ldr	r3, [pc, #420]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	220c      	movs	r2, #12
 8006698:	4393      	bics	r3, r2
 800669a:	0019      	movs	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	4b65      	ldr	r3, [pc, #404]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066a2:	430a      	orrs	r2, r1
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2210      	movs	r2, #16
 80066ac:	4013      	ands	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b0:	4b61      	ldr	r3, [pc, #388]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b4:	4a66      	ldr	r2, [pc, #408]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	0019      	movs	r1, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	4b5e      	ldr	r3, [pc, #376]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066c0:	430a      	orrs	r2, r1
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4013      	ands	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066d0:	4b59      	ldr	r3, [pc, #356]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d4:	4a5f      	ldr	r2, [pc, #380]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	4b56      	ldr	r3, [pc, #344]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066e0:	430a      	orrs	r2, r1
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	2380      	movs	r3, #128	; 0x80
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4013      	ands	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066f0:	4b51      	ldr	r3, [pc, #324]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	4a58      	ldr	r2, [pc, #352]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	0019      	movs	r1, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	4b4e      	ldr	r3, [pc, #312]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006700:	430a      	orrs	r2, r1
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2220      	movs	r2, #32
 800670a:	4013      	ands	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800670e:	4b4a      	ldr	r3, [pc, #296]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	4a52      	ldr	r2, [pc, #328]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006714:	4013      	ands	r3, r2
 8006716:	0019      	movs	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	4b46      	ldr	r3, [pc, #280]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800671e:	430a      	orrs	r2, r1
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	01db      	lsls	r3, r3, #7
 800672a:	4013      	ands	r3, r2
 800672c:	d015      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800672e:	4b42      	ldr	r3, [pc, #264]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	0899      	lsrs	r1, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	4b3f      	ldr	r3, [pc, #252]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800673c:	430a      	orrs	r2, r1
 800673e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	05db      	lsls	r3, r3, #23
 8006748:	429a      	cmp	r2, r3
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800674c:	4b3a      	ldr	r3, [pc, #232]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	4b39      	ldr	r3, [pc, #228]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	0249      	lsls	r1, r1, #9
 8006756:	430a      	orrs	r2, r1
 8006758:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	2380      	movs	r3, #128	; 0x80
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	4013      	ands	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006766:	4b34      	ldr	r3, [pc, #208]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	4393      	bics	r3, r2
 800676e:	0019      	movs	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006774:	4b30      	ldr	r3, [pc, #192]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006776:	430a      	orrs	r2, r1
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	039b      	lsls	r3, r3, #14
 8006782:	4013      	ands	r3, r2
 8006784:	d016      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006786:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	4a35      	ldr	r2, [pc, #212]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800678c:	4013      	ands	r3, r2
 800678e:	0019      	movs	r1, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006794:	4b28      	ldr	r3, [pc, #160]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006796:	430a      	orrs	r2, r1
 8006798:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	03db      	lsls	r3, r3, #15
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d106      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067a6:	4b24      	ldr	r3, [pc, #144]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	0449      	lsls	r1, r1, #17
 80067b0:	430a      	orrs	r2, r1
 80067b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	2380      	movs	r3, #128	; 0x80
 80067ba:	03db      	lsls	r3, r3, #15
 80067bc:	4013      	ands	r3, r2
 80067be:	d016      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80067c0:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c4:	4a27      	ldr	r2, [pc, #156]	; (8006864 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	0019      	movs	r1, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067d0:	430a      	orrs	r2, r1
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	045b      	lsls	r3, r3, #17
 80067dc:	429a      	cmp	r2, r3
 80067de:	d106      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067e0:	4b15      	ldr	r3, [pc, #84]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b14      	ldr	r3, [pc, #80]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067e6:	2180      	movs	r1, #128	; 0x80
 80067e8:	0449      	lsls	r1, r1, #17
 80067ea:	430a      	orrs	r2, r1
 80067ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	2380      	movs	r3, #128	; 0x80
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	4013      	ands	r3, r2
 80067f8:	d016      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80067fa:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	4a1a      	ldr	r2, [pc, #104]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006800:	4013      	ands	r3, r2
 8006802:	0019      	movs	r1, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800680a:	430a      	orrs	r2, r1
 800680c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695a      	ldr	r2, [r3, #20]
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	01db      	lsls	r3, r3, #7
 8006816:	429a      	cmp	r2, r3
 8006818:	d106      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	0249      	lsls	r1, r1, #9
 8006824:	430a      	orrs	r2, r1
 8006826:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006828:	2312      	movs	r3, #18
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	781b      	ldrb	r3, [r3, #0]
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	b006      	add	sp, #24
 8006834:	bd80      	pop	{r7, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	40021000 	.word	0x40021000
 800683c:	40007000 	.word	0x40007000
 8006840:	fffffcff 	.word	0xfffffcff
 8006844:	fffeffff 	.word	0xfffeffff
 8006848:	00001388 	.word	0x00001388
 800684c:	efffffff 	.word	0xefffffff
 8006850:	fffff3ff 	.word	0xfffff3ff
 8006854:	fff3ffff 	.word	0xfff3ffff
 8006858:	ffcfffff 	.word	0xffcfffff
 800685c:	ffffcfff 	.word	0xffffcfff
 8006860:	ffbfffff 	.word	0xffbfffff
 8006864:	feffffff 	.word	0xfeffffff
 8006868:	ffff3fff 	.word	0xffff3fff

0800686c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800686c:	b5b0      	push	{r4, r5, r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006874:	230f      	movs	r3, #15
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	2201      	movs	r2, #1
 800687a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d100      	bne.n	8006884 <HAL_RTC_Init+0x18>
 8006882:	e080      	b.n	8006986 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2229      	movs	r2, #41	; 0x29
 8006888:	5c9b      	ldrb	r3, [r3, r2]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2228      	movs	r2, #40	; 0x28
 8006894:	2100      	movs	r1, #0
 8006896:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2288      	movs	r2, #136	; 0x88
 800689c:	0212      	lsls	r2, r2, #8
 800689e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	0018      	movs	r0, r3
 80068a4:	f008 f824 	bl	800e8f0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2229      	movs	r2, #41	; 0x29
 80068ac:	2102      	movs	r1, #2
 80068ae:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	22ca      	movs	r2, #202	; 0xca
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2253      	movs	r2, #83	; 0x53
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80068c0:	250f      	movs	r5, #15
 80068c2:	197c      	adds	r4, r7, r5
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 fa71 	bl	8006dae <RTC_EnterInitMode>
 80068cc:	0003      	movs	r3, r0
 80068ce:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80068d0:	0028      	movs	r0, r5
 80068d2:	183b      	adds	r3, r7, r0
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d148      	bne.n	800696c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	492b      	ldr	r1, [pc, #172]	; (8006994 <HAL_RTC_Init+0x128>)
 80068e6:	400a      	ands	r2, r1
 80068e8:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6999      	ldr	r1, [r3, #24]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6912      	ldr	r2, [r2, #16]
 8006910:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6919      	ldr	r1, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	041a      	lsls	r2, r3, #16
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006926:	0005      	movs	r5, r0
 8006928:	183c      	adds	r4, r7, r0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0018      	movs	r0, r3
 800692e:	f000 fa81 	bl	8006e34 <RTC_ExitInitMode>
 8006932:	0003      	movs	r3, r0
 8006934:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8006936:	197b      	adds	r3, r7, r5
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	00d2      	lsls	r2, r2, #3
 800694a:	08d2      	lsrs	r2, r2, #3
 800694c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6999      	ldr	r1, [r3, #24]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	22ff      	movs	r2, #255	; 0xff
 8006972:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006974:	230f      	movs	r3, #15
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2229      	movs	r2, #41	; 0x29
 8006982:	2101      	movs	r1, #1
 8006984:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006986:	230f      	movs	r3, #15
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	781b      	ldrb	r3, [r3, #0]
}
 800698c:	0018      	movs	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	b004      	add	sp, #16
 8006992:	bdb0      	pop	{r4, r5, r7, pc}
 8006994:	fb8fffbf 	.word	0xfb8fffbf

08006998 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006998:	b5b0      	push	{r4, r5, r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2228      	movs	r2, #40	; 0x28
 80069a8:	5c9b      	ldrb	r3, [r3, r2]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_RTC_SetTime+0x1a>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e092      	b.n	8006ad8 <HAL_RTC_SetTime+0x140>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2228      	movs	r2, #40	; 0x28
 80069b6:	2101      	movs	r1, #1
 80069b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2229      	movs	r2, #41	; 0x29
 80069be:	2102      	movs	r1, #2
 80069c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	22ca      	movs	r2, #202	; 0xca
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2253      	movs	r2, #83	; 0x53
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069d2:	2513      	movs	r5, #19
 80069d4:	197c      	adds	r4, r7, r5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 f9e8 	bl	8006dae <RTC_EnterInitMode>
 80069de:	0003      	movs	r3, r0
 80069e0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80069e2:	197b      	adds	r3, r7, r5
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d162      	bne.n	8006ab0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d125      	bne.n	8006a3c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	4013      	ands	r3, r2
 80069fa:	d102      	bne.n	8006a02 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	0018      	movs	r0, r3
 8006a08:	f000 fa58 	bl	8006ebc <RTC_ByteToBcd2>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 fa51 	bl	8006ebc <RTC_ByteToBcd2>
 8006a1a:	0003      	movs	r3, r0
 8006a1c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a1e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 fa49 	bl	8006ebc <RTC_ByteToBcd2>
 8006a2a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a2c:	0022      	movs	r2, r4
 8006a2e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	78db      	ldrb	r3, [r3, #3]
 8006a34:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e017      	b.n	8006a6c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	4013      	ands	r3, r2
 8006a46:	d102      	bne.n	8006a4e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	78db      	ldrb	r3, [r3, #3]
 8006a66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	491b      	ldr	r1, [pc, #108]	; (8006ae0 <HAL_RTC_SetTime+0x148>)
 8006a74:	400a      	ands	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4918      	ldr	r1, [pc, #96]	; (8006ae4 <HAL_RTC_SetTime+0x14c>)
 8006a84:	400a      	ands	r2, r1
 8006a86:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6999      	ldr	r1, [r3, #24]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006aa0:	2313      	movs	r3, #19
 8006aa2:	18fc      	adds	r4, r7, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 f9c4 	bl	8006e34 <RTC_ExitInitMode>
 8006aac:	0003      	movs	r3, r0
 8006aae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	22ff      	movs	r2, #255	; 0xff
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8006ab8:	2313      	movs	r3, #19
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2229      	movs	r2, #41	; 0x29
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2228      	movs	r2, #40	; 0x28
 8006ace:	2100      	movs	r1, #0
 8006ad0:	5499      	strb	r1, [r3, r2]

  return status;
 8006ad2:	2313      	movs	r3, #19
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	781b      	ldrb	r3, [r3, #0]
}
 8006ad8:	0018      	movs	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b006      	add	sp, #24
 8006ade:	bdb0      	pop	{r4, r5, r7, pc}
 8006ae0:	007f7f7f 	.word	0x007f7f7f
 8006ae4:	fffbffff 	.word	0xfffbffff

08006ae8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	045b      	lsls	r3, r3, #17
 8006b06:	0c5a      	lsrs	r2, r3, #17
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <HAL_RTC_GetTime+0xb4>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	223f      	movs	r2, #63	; 0x3f
 8006b20:	4013      	ands	r3, r2
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	227f      	movs	r2, #127	; 0x7f
 8006b30:	4013      	ands	r3, r2
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	227f      	movs	r2, #127	; 0x7f
 8006b3e:	4013      	ands	r3, r2
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	0d9b      	lsrs	r3, r3, #22
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4013      	ands	r3, r2
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11a      	bne.n	8006b92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 f9d3 	bl	8006f0c <RTC_Bcd2ToByte>
 8006b66:	0003      	movs	r3, r0
 8006b68:	001a      	movs	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f000 f9ca 	bl	8006f0c <RTC_Bcd2ToByte>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	789b      	ldrb	r3, [r3, #2]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 f9c1 	bl	8006f0c <RTC_Bcd2ToByte>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	001a      	movs	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	0018      	movs	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b006      	add	sp, #24
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	007f7f7f 	.word	0x007f7f7f

08006ba0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2228      	movs	r2, #40	; 0x28
 8006bb0:	5c9b      	ldrb	r3, [r3, r2]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_RTC_SetDate+0x1a>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e07e      	b.n	8006cb8 <HAL_RTC_SetDate+0x118>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2228      	movs	r2, #40	; 0x28
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2229      	movs	r2, #41	; 0x29
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10e      	bne.n	8006bee <HAL_RTC_SetDate+0x4e>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	2310      	movs	r3, #16
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d008      	beq.n	8006bee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2210      	movs	r2, #16
 8006be2:	4393      	bics	r3, r2
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	330a      	adds	r3, #10
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11c      	bne.n	8006c2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	78db      	ldrb	r3, [r3, #3]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 f95f 	bl	8006ebc <RTC_ByteToBcd2>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f000 f958 	bl	8006ebc <RTC_ByteToBcd2>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c10:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	789b      	ldrb	r3, [r3, #2]
 8006c16:	0018      	movs	r0, r3
 8006c18:	f000 f950 	bl	8006ebc <RTC_ByteToBcd2>
 8006c1c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c1e:	0022      	movs	r2, r4
 8006c20:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e00e      	b.n	8006c4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	78db      	ldrb	r3, [r3, #3]
 8006c32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	22ca      	movs	r2, #202	; 0xca
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2253      	movs	r2, #83	; 0x53
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c5c:	2513      	movs	r5, #19
 8006c5e:	197c      	adds	r4, r7, r5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 f8a3 	bl	8006dae <RTC_EnterInitMode>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006c6c:	0028      	movs	r0, r5
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10c      	bne.n	8006c90 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4910      	ldr	r1, [pc, #64]	; (8006cc0 <HAL_RTC_SetDate+0x120>)
 8006c7e:	400a      	ands	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c82:	183c      	adds	r4, r7, r0
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	0018      	movs	r0, r3
 8006c88:	f000 f8d4 	bl	8006e34 <RTC_ExitInitMode>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	22ff      	movs	r2, #255	; 0xff
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c98:	2313      	movs	r3, #19
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d103      	bne.n	8006caa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2229      	movs	r2, #41	; 0x29
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2228      	movs	r2, #40	; 0x28
 8006cae:	2100      	movs	r1, #0
 8006cb0:	5499      	strb	r1, [r3, r2]

  return status;
 8006cb2:	2313      	movs	r3, #19
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	781b      	ldrb	r3, [r3, #0]
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b006      	add	sp, #24
 8006cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc0:	00ffff3f 	.word	0x00ffff3f

08006cc4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <HAL_RTC_GetDate+0x98>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	0a1b      	lsrs	r3, r3, #8
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	221f      	movs	r2, #31
 8006cee:	4013      	ands	r3, r2
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	223f      	movs	r2, #63	; 0x3f
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	0b5b      	lsrs	r3, r3, #13
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11a      	bne.n	8006d50 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	78db      	ldrb	r3, [r3, #3]
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 f8f4 	bl	8006f0c <RTC_Bcd2ToByte>
 8006d24:	0003      	movs	r3, r0
 8006d26:	001a      	movs	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f8eb 	bl	8006f0c <RTC_Bcd2ToByte>
 8006d36:	0003      	movs	r3, r0
 8006d38:	001a      	movs	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	789b      	ldrb	r3, [r3, #2]
 8006d42:	0018      	movs	r0, r3
 8006d44:	f000 f8e2 	bl	8006f0c <RTC_Bcd2ToByte>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b006      	add	sp, #24
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	00ffff3f 	.word	0x00ffff3f

08006d60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	21a0      	movs	r1, #160	; 0xa0
 8006d74:	438a      	bics	r2, r1
 8006d76:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006d78:	f7fc fc8a 	bl	8003690 <HAL_GetTick>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006d80:	e00a      	b.n	8006d98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006d82:	f7fc fc85 	bl	8003690 <HAL_GetTick>
 8006d86:	0002      	movs	r2, r0
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	23fa      	movs	r3, #250	; 0xfa
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d901      	bls.n	8006d98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e006      	b.n	8006da6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	4013      	ands	r3, r2
 8006da2:	d0ee      	beq.n	8006d82 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	0018      	movs	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	b004      	add	sp, #16
 8006dac:	bd80      	pop	{r7, pc}

08006dae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006db6:	230f      	movs	r3, #15
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2240      	movs	r2, #64	; 0x40
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d12c      	bne.n	8006e24 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2180      	movs	r1, #128	; 0x80
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006dda:	f7fc fc59 	bl	8003690 <HAL_GetTick>
 8006dde:	0003      	movs	r3, r0
 8006de0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006de2:	e014      	b.n	8006e0e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006de4:	f7fc fc54 	bl	8003690 <HAL_GetTick>
 8006de8:	0002      	movs	r2, r0
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	200f      	movs	r0, #15
 8006df0:	183b      	adds	r3, r7, r0
 8006df2:	1839      	adds	r1, r7, r0
 8006df4:	7809      	ldrb	r1, [r1, #0]
 8006df6:	7019      	strb	r1, [r3, #0]
 8006df8:	23fa      	movs	r3, #250	; 0xfa
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d906      	bls.n	8006e0e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	2203      	movs	r2, #3
 8006e04:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2229      	movs	r2, #41	; 0x29
 8006e0a:	2103      	movs	r1, #3
 8006e0c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2240      	movs	r2, #64	; 0x40
 8006e16:	4013      	ands	r3, r2
 8006e18:	d104      	bne.n	8006e24 <RTC_EnterInitMode+0x76>
 8006e1a:	230f      	movs	r3, #15
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d1df      	bne.n	8006de4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006e24:	230f      	movs	r3, #15
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	781b      	ldrb	r3, [r3, #0]
}
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b004      	add	sp, #16
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3c:	240f      	movs	r4, #15
 8006e3e:	193b      	adds	r3, r7, r4
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e44:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006e4a:	2180      	movs	r1, #128	; 0x80
 8006e4c:	438a      	bics	r2, r1
 8006e4e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2220      	movs	r2, #32
 8006e56:	4013      	ands	r3, r2
 8006e58:	d10d      	bne.n	8006e76 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f7ff ff7f 	bl	8006d60 <HAL_RTC_WaitForSynchro>
 8006e62:	1e03      	subs	r3, r0, #0
 8006e64:	d021      	beq.n	8006eaa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2229      	movs	r2, #41	; 0x29
 8006e6a:	2103      	movs	r1, #3
 8006e6c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006e6e:	193b      	adds	r3, r7, r4
 8006e70:	2203      	movs	r2, #3
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e019      	b.n	8006eaa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006e7c:	2120      	movs	r1, #32
 8006e7e:	438a      	bics	r2, r1
 8006e80:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff ff6b 	bl	8006d60 <HAL_RTC_WaitForSynchro>
 8006e8a:	1e03      	subs	r3, r0, #0
 8006e8c:	d007      	beq.n	8006e9e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2229      	movs	r2, #41	; 0x29
 8006e92:	2103      	movs	r1, #3
 8006e94:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006e96:	230f      	movs	r3, #15
 8006e98:	18fb      	adds	r3, r7, r3
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <RTC_ExitInitMode+0x84>)
 8006ea4:	2120      	movs	r1, #32
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006eaa:	230f      	movs	r3, #15
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	781b      	ldrb	r3, [r3, #0]
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b005      	add	sp, #20
 8006eb6:	bd90      	pop	{r4, r7, pc}
 8006eb8:	40002800 	.word	0x40002800

08006ebc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	0002      	movs	r2, r0
 8006ec4:	1dfb      	adds	r3, r7, #7
 8006ec6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006ecc:	230b      	movs	r3, #11
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	1dfa      	adds	r2, r7, #7
 8006ed2:	7812      	ldrb	r2, [r2, #0]
 8006ed4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006ed6:	e008      	b.n	8006eea <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006ede:	220b      	movs	r2, #11
 8006ee0:	18bb      	adds	r3, r7, r2
 8006ee2:	18ba      	adds	r2, r7, r2
 8006ee4:	7812      	ldrb	r2, [r2, #0]
 8006ee6:	3a0a      	subs	r2, #10
 8006ee8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006eea:	210b      	movs	r1, #11
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b09      	cmp	r3, #9
 8006ef2:	d8f1      	bhi.n	8006ed8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	b2db      	uxtb	r3, r3
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b004      	add	sp, #16
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	0002      	movs	r2, r0
 8006f14:	1dfb      	adds	r3, r7, #7
 8006f16:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006f18:	1dfb      	adds	r3, r7, #7
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	0013      	movs	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	189b      	adds	r3, r3, r2
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	1dfb      	adds	r3, r7, #7
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	210f      	movs	r1, #15
 8006f36:	400b      	ands	r3, r1
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	b2db      	uxtb	r3, r3
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b004      	add	sp, #16
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e04a      	b.n	8006fee <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	223d      	movs	r2, #61	; 0x3d
 8006f5c:	5c9b      	ldrb	r3, [r3, r2]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	223c      	movs	r2, #60	; 0x3c
 8006f68:	2100      	movs	r1, #0
 8006f6a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f007 fcfc 	bl	800e96c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	223d      	movs	r2, #61	; 0x3d
 8006f78:	2102      	movs	r1, #2
 8006f7a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	0019      	movs	r1, r3
 8006f86:	0010      	movs	r0, r2
 8006f88:	f000 fade 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2248      	movs	r2, #72	; 0x48
 8006f90:	2101      	movs	r1, #1
 8006f92:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	223e      	movs	r2, #62	; 0x3e
 8006f98:	2101      	movs	r1, #1
 8006f9a:	5499      	strb	r1, [r3, r2]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	223f      	movs	r2, #63	; 0x3f
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	5499      	strb	r1, [r3, r2]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2240      	movs	r2, #64	; 0x40
 8006fa8:	2101      	movs	r1, #1
 8006faa:	5499      	strb	r1, [r3, r2]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2241      	movs	r2, #65	; 0x41
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	5499      	strb	r1, [r3, r2]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2242      	movs	r2, #66	; 0x42
 8006fb8:	2101      	movs	r1, #1
 8006fba:	5499      	strb	r1, [r3, r2]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2243      	movs	r2, #67	; 0x43
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2244      	movs	r2, #68	; 0x44
 8006fc8:	2101      	movs	r1, #1
 8006fca:	5499      	strb	r1, [r3, r2]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2245      	movs	r2, #69	; 0x45
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	5499      	strb	r1, [r3, r2]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2246      	movs	r2, #70	; 0x46
 8006fd8:	2101      	movs	r1, #1
 8006fda:	5499      	strb	r1, [r3, r2]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2247      	movs	r2, #71	; 0x47
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	223d      	movs	r2, #61	; 0x3d
 8006fe8:	2101      	movs	r1, #1
 8006fea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b002      	add	sp, #8
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	223d      	movs	r2, #61	; 0x3d
 8007004:	5c9b      	ldrb	r3, [r3, r2]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d001      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e042      	b.n	8007096 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	223d      	movs	r2, #61	; 0x3d
 8007014:	2102      	movs	r1, #2
 8007016:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2101      	movs	r1, #1
 8007024:	430a      	orrs	r2, r1
 8007026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <HAL_TIM_Base_Start_IT+0xa8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x5a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	2380      	movs	r3, #128	; 0x80
 8007038:	05db      	lsls	r3, r3, #23
 800703a:	429a      	cmp	r2, r3
 800703c:	d009      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x5a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <HAL_TIM_Base_Start_IT+0xac>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x5a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d116      	bne.n	8007080 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	4a14      	ldr	r2, [pc, #80]	; (80070ac <HAL_TIM_Base_Start_IT+0xb4>)
 800705a:	4013      	ands	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d016      	beq.n	8007092 <HAL_TIM_Base_Start_IT+0x9a>
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	025b      	lsls	r3, r3, #9
 800706a:	429a      	cmp	r2, r3
 800706c:	d011      	beq.n	8007092 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2101      	movs	r1, #1
 800707a:	430a      	orrs	r2, r1
 800707c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707e:	e008      	b.n	8007092 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2101      	movs	r1, #1
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e000      	b.n	8007094 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007092:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	0018      	movs	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	b004      	add	sp, #16
 800709c:	bd80      	pop	{r7, pc}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	00010007 	.word	0x00010007

080070b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2101      	movs	r1, #1
 80070c4:	438a      	bics	r2, r1
 80070c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <HAL_TIM_Base_Stop_IT+0x54>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	d10d      	bne.n	80070f0 <HAL_TIM_Base_Stop_IT+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	4a0b      	ldr	r2, [pc, #44]	; (8007108 <HAL_TIM_Base_Stop_IT+0x58>)
 80070dc:	4013      	ands	r3, r2
 80070de:	d107      	bne.n	80070f0 <HAL_TIM_Base_Stop_IT+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2101      	movs	r1, #1
 80070ec:	438a      	bics	r2, r1
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	223d      	movs	r2, #61	; 0x3d
 80070f4:	2101      	movs	r1, #1
 80070f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	0018      	movs	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b002      	add	sp, #8
 8007100:	bd80      	pop	{r7, pc}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	00001111 	.word	0x00001111
 8007108:	00000444 	.word	0x00000444

0800710c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2202      	movs	r2, #2
 800711c:	4013      	ands	r3, r2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d124      	bne.n	800716c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	2202      	movs	r2, #2
 800712a:	4013      	ands	r3, r2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d11d      	bne.n	800716c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2203      	movs	r2, #3
 8007136:	4252      	negs	r2, r2
 8007138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	2203      	movs	r2, #3
 8007148:	4013      	ands	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f000 f9e2 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8007154:	e007      	b.n	8007166 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	0018      	movs	r0, r3
 800715a:	f000 f9d5 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0018      	movs	r0, r3
 8007162:	f000 f9e1 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2204      	movs	r2, #4
 8007174:	4013      	ands	r3, r2
 8007176:	2b04      	cmp	r3, #4
 8007178:	d125      	bne.n	80071c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2204      	movs	r2, #4
 8007182:	4013      	ands	r3, r2
 8007184:	2b04      	cmp	r3, #4
 8007186:	d11e      	bne.n	80071c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2205      	movs	r2, #5
 800718e:	4252      	negs	r2, r2
 8007190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	23c0      	movs	r3, #192	; 0xc0
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4013      	ands	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	0018      	movs	r0, r3
 80071aa:	f000 f9b5 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 80071ae:	e007      	b.n	80071c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	0018      	movs	r0, r3
 80071b4:	f000 f9a8 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	0018      	movs	r0, r3
 80071bc:	f000 f9b4 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2208      	movs	r2, #8
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d124      	bne.n	800721e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2208      	movs	r2, #8
 80071dc:	4013      	ands	r3, r2
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d11d      	bne.n	800721e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2209      	movs	r2, #9
 80071e8:	4252      	negs	r2, r2
 80071ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	2203      	movs	r2, #3
 80071fa:	4013      	ands	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0018      	movs	r0, r3
 8007202:	f000 f989 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8007206:	e007      	b.n	8007218 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	0018      	movs	r0, r3
 800720c:	f000 f97c 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	0018      	movs	r0, r3
 8007214:	f000 f988 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2210      	movs	r2, #16
 8007226:	4013      	ands	r3, r2
 8007228:	2b10      	cmp	r3, #16
 800722a:	d125      	bne.n	8007278 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2210      	movs	r2, #16
 8007234:	4013      	ands	r3, r2
 8007236:	2b10      	cmp	r3, #16
 8007238:	d11e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2211      	movs	r2, #17
 8007240:	4252      	negs	r2, r2
 8007242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2208      	movs	r2, #8
 8007248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	23c0      	movs	r3, #192	; 0xc0
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4013      	ands	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	0018      	movs	r0, r3
 800725c:	f000 f95c 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8007260:	e007      	b.n	8007272 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0018      	movs	r0, r3
 8007266:	f000 f94f 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	0018      	movs	r0, r3
 800726e:	f000 f95b 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2201      	movs	r2, #1
 8007280:	4013      	ands	r3, r2
 8007282:	2b01      	cmp	r3, #1
 8007284:	d10f      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	4013      	ands	r3, r2
 8007290:	2b01      	cmp	r3, #1
 8007292:	d108      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2202      	movs	r2, #2
 800729a:	4252      	negs	r2, r2
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f005 f98f 	bl	800c5c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2280      	movs	r2, #128	; 0x80
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d10f      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2280      	movs	r2, #128	; 0x80
 80072bc:	4013      	ands	r3, r2
 80072be:	2b80      	cmp	r3, #128	; 0x80
 80072c0:	d108      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2281      	movs	r2, #129	; 0x81
 80072c8:	4252      	negs	r2, r2
 80072ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	0018      	movs	r0, r3
 80072d0:	f000 facc 	bl	800786c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	2380      	movs	r3, #128	; 0x80
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	401a      	ands	r2, r3
 80072e0:	2380      	movs	r3, #128	; 0x80
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d10e      	bne.n	8007306 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2280      	movs	r2, #128	; 0x80
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b80      	cmp	r3, #128	; 0x80
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1c      	ldr	r2, [pc, #112]	; (800736c <HAL_TIM_IRQHandler+0x260>)
 80072fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0018      	movs	r0, r3
 8007302:	f000 fabb 	bl	800787c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2240      	movs	r2, #64	; 0x40
 800730e:	4013      	ands	r3, r2
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d10f      	bne.n	8007334 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	4013      	ands	r3, r2
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d108      	bne.n	8007334 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2241      	movs	r2, #65	; 0x41
 8007328:	4252      	negs	r2, r2
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0018      	movs	r0, r3
 8007330:	f000 f902 	bl	8007538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2220      	movs	r2, #32
 800733c:	4013      	ands	r3, r2
 800733e:	2b20      	cmp	r3, #32
 8007340:	d10f      	bne.n	8007362 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	4013      	ands	r3, r2
 800734c:	2b20      	cmp	r3, #32
 800734e:	d108      	bne.n	8007362 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2221      	movs	r2, #33	; 0x21
 8007356:	4252      	negs	r2, r2
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0018      	movs	r0, r3
 800735e:	f000 fa7d 	bl	800785c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	fffffeff 	.word	0xfffffeff

08007370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	223c      	movs	r2, #60	; 0x3c
 800737e:	5c9b      	ldrb	r3, [r3, r2]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIM_ConfigClockSource+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e0b7      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x188>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	223c      	movs	r2, #60	; 0x3c
 800738c:	2101      	movs	r1, #1
 800738e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	223d      	movs	r2, #61	; 0x3d
 8007394:	2102      	movs	r1, #2
 8007396:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a57      	ldr	r2, [pc, #348]	; (8007500 <HAL_TIM_ConfigClockSource+0x190>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a56      	ldr	r2, [pc, #344]	; (8007504 <HAL_TIM_ConfigClockSource+0x194>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	0192      	lsls	r2, r2, #6
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d040      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0xd6>
 80073c4:	2280      	movs	r2, #128	; 0x80
 80073c6:	0192      	lsls	r2, r2, #6
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d900      	bls.n	80073ce <HAL_TIM_ConfigClockSource+0x5e>
 80073cc:	e088      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	0152      	lsls	r2, r2, #5
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d100      	bne.n	80073d8 <HAL_TIM_ConfigClockSource+0x68>
 80073d6:	e085      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x174>
 80073d8:	2280      	movs	r2, #128	; 0x80
 80073da:	0152      	lsls	r2, r2, #5
 80073dc:	4293      	cmp	r3, r2
 80073de:	d900      	bls.n	80073e2 <HAL_TIM_ConfigClockSource+0x72>
 80073e0:	e07e      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 80073e2:	2b70      	cmp	r3, #112	; 0x70
 80073e4:	d018      	beq.n	8007418 <HAL_TIM_ConfigClockSource+0xa8>
 80073e6:	d900      	bls.n	80073ea <HAL_TIM_ConfigClockSource+0x7a>
 80073e8:	e07a      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 80073ea:	2b60      	cmp	r3, #96	; 0x60
 80073ec:	d04f      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x11e>
 80073ee:	d900      	bls.n	80073f2 <HAL_TIM_ConfigClockSource+0x82>
 80073f0:	e076      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 80073f2:	2b50      	cmp	r3, #80	; 0x50
 80073f4:	d03b      	beq.n	800746e <HAL_TIM_ConfigClockSource+0xfe>
 80073f6:	d900      	bls.n	80073fa <HAL_TIM_ConfigClockSource+0x8a>
 80073f8:	e072      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 80073fa:	2b40      	cmp	r3, #64	; 0x40
 80073fc:	d057      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x13e>
 80073fe:	d900      	bls.n	8007402 <HAL_TIM_ConfigClockSource+0x92>
 8007400:	e06e      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 8007402:	2b30      	cmp	r3, #48	; 0x30
 8007404:	d063      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15e>
 8007406:	d86b      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d060      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15e>
 800740c:	d868      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d05d      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15e>
 8007412:	2b10      	cmp	r3, #16
 8007414:	d05b      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007416:	e063      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6899      	ldr	r1, [r3, #8]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f000 f98a 	bl	8007740 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2277      	movs	r2, #119	; 0x77
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	609a      	str	r2, [r3, #8]
      break;
 8007444:	e04f      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6899      	ldr	r1, [r3, #8]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f000 f973 	bl	8007740 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2180      	movs	r1, #128	; 0x80
 8007466:	01c9      	lsls	r1, r1, #7
 8007468:	430a      	orrs	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
      break;
 800746c:	e03b      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	001a      	movs	r2, r3
 800747c:	f000 f8e4 	bl	8007648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2150      	movs	r1, #80	; 0x50
 8007486:	0018      	movs	r0, r3
 8007488:	f000 f93e 	bl	8007708 <TIM_ITRx_SetConfig>
      break;
 800748c:	e02b      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6859      	ldr	r1, [r3, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	001a      	movs	r2, r3
 800749c:	f000 f902 	bl	80076a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2160      	movs	r1, #96	; 0x60
 80074a6:	0018      	movs	r0, r3
 80074a8:	f000 f92e 	bl	8007708 <TIM_ITRx_SetConfig>
      break;
 80074ac:	e01b      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	001a      	movs	r2, r3
 80074bc:	f000 f8c4 	bl	8007648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2140      	movs	r1, #64	; 0x40
 80074c6:	0018      	movs	r0, r3
 80074c8:	f000 f91e 	bl	8007708 <TIM_ITRx_SetConfig>
      break;
 80074cc:	e00b      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	0019      	movs	r1, r3
 80074d8:	0010      	movs	r0, r2
 80074da:	f000 f915 	bl	8007708 <TIM_ITRx_SetConfig>
        break;
 80074de:	e002      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80074e0:	46c0      	nop			; (mov r8, r8)
 80074e2:	e000      	b.n	80074e6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80074e4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	223d      	movs	r2, #61	; 0x3d
 80074ea:	2101      	movs	r1, #1
 80074ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	223c      	movs	r2, #60	; 0x3c
 80074f2:	2100      	movs	r1, #0
 80074f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	0018      	movs	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b004      	add	sp, #16
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	ffceff88 	.word	0xffceff88
 8007504:	ffff00ff 	.word	0xffff00ff

08007508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007510:	46c0      	nop			; (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	b002      	add	sp, #8
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a34      	ldr	r2, [pc, #208]	; (800762c <TIM_Base_SetConfig+0xe4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d008      	beq.n	8007572 <TIM_Base_SetConfig+0x2a>
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	2380      	movs	r3, #128	; 0x80
 8007564:	05db      	lsls	r3, r3, #23
 8007566:	429a      	cmp	r2, r3
 8007568:	d003      	beq.n	8007572 <TIM_Base_SetConfig+0x2a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a30      	ldr	r2, [pc, #192]	; (8007630 <TIM_Base_SetConfig+0xe8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2270      	movs	r2, #112	; 0x70
 8007576:	4393      	bics	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a29      	ldr	r2, [pc, #164]	; (800762c <TIM_Base_SetConfig+0xe4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d018      	beq.n	80075be <TIM_Base_SetConfig+0x76>
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	2380      	movs	r3, #128	; 0x80
 8007590:	05db      	lsls	r3, r3, #23
 8007592:	429a      	cmp	r2, r3
 8007594:	d013      	beq.n	80075be <TIM_Base_SetConfig+0x76>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <TIM_Base_SetConfig+0xe8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00f      	beq.n	80075be <TIM_Base_SetConfig+0x76>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a24      	ldr	r2, [pc, #144]	; (8007634 <TIM_Base_SetConfig+0xec>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_Base_SetConfig+0x76>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a23      	ldr	r2, [pc, #140]	; (8007638 <TIM_Base_SetConfig+0xf0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_Base_SetConfig+0x76>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a22      	ldr	r2, [pc, #136]	; (800763c <TIM_Base_SetConfig+0xf4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_Base_SetConfig+0x76>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a21      	ldr	r2, [pc, #132]	; (8007640 <TIM_Base_SetConfig+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d108      	bne.n	80075d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <TIM_Base_SetConfig+0xfc>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2280      	movs	r2, #128	; 0x80
 80075d4:	4393      	bics	r3, r2
 80075d6:	001a      	movs	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a0c      	ldr	r2, [pc, #48]	; (800762c <TIM_Base_SetConfig+0xe4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00b      	beq.n	8007616 <TIM_Base_SetConfig+0xce>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a0d      	ldr	r2, [pc, #52]	; (8007638 <TIM_Base_SetConfig+0xf0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d007      	beq.n	8007616 <TIM_Base_SetConfig+0xce>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a0c      	ldr	r2, [pc, #48]	; (800763c <TIM_Base_SetConfig+0xf4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d003      	beq.n	8007616 <TIM_Base_SetConfig+0xce>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <TIM_Base_SetConfig+0xf8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d103      	bne.n	800761e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	615a      	str	r2, [r3, #20]
}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	46bd      	mov	sp, r7
 8007628:	b004      	add	sp, #16
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40000400 	.word	0x40000400
 8007634:	40002000 	.word	0x40002000
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800
 8007644:	fffffcff 	.word	0xfffffcff

08007648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	2201      	movs	r2, #1
 8007660:	4393      	bics	r3, r2
 8007662:	001a      	movs	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	22f0      	movs	r2, #240	; 0xf0
 8007672:	4393      	bics	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	220a      	movs	r2, #10
 8007684:	4393      	bics	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	621a      	str	r2, [r3, #32]
}
 800769c:	46c0      	nop			; (mov r8, r8)
 800769e:	46bd      	mov	sp, r7
 80076a0:	b006      	add	sp, #24
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	2210      	movs	r2, #16
 80076b6:	4393      	bics	r3, r2
 80076b8:	001a      	movs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <TIM_TI2_ConfigInputStage+0x60>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	031b      	lsls	r3, r3, #12
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	22a0      	movs	r2, #160	; 0xa0
 80076e0:	4393      	bics	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b006      	add	sp, #24
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	ffff0fff 	.word	0xffff0fff

08007708 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a08      	ldr	r2, [pc, #32]	; (800773c <TIM_ITRx_SetConfig+0x34>)
 800771c:	4013      	ands	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4313      	orrs	r3, r2
 8007726:	2207      	movs	r2, #7
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	609a      	str	r2, [r3, #8]
}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	46bd      	mov	sp, r7
 8007736:	b004      	add	sp, #16
 8007738:	bd80      	pop	{r7, pc}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	ffcfff8f 	.word	0xffcfff8f

08007740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	4a09      	ldr	r2, [pc, #36]	; (800777c <TIM_ETR_SetConfig+0x3c>)
 8007758:	4013      	ands	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	021a      	lsls	r2, r3, #8
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	431a      	orrs	r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4313      	orrs	r3, r2
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	b006      	add	sp, #24
 800777a:	bd80      	pop	{r7, pc}
 800777c:	ffff00ff 	.word	0xffff00ff

08007780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	223c      	movs	r2, #60	; 0x3c
 800778e:	5c9b      	ldrb	r3, [r3, r2]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007794:	2302      	movs	r3, #2
 8007796:	e055      	b.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	223c      	movs	r2, #60	; 0x3c
 800779c:	2101      	movs	r1, #1
 800779e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	223d      	movs	r2, #61	; 0x3d
 80077a4:	2102      	movs	r1, #2
 80077a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a23      	ldr	r2, [pc, #140]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d108      	bne.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2270      	movs	r2, #112	; 0x70
 80077d8:	4393      	bics	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00f      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	05db      	lsls	r3, r3, #23
 8007800:	429a      	cmp	r2, r3
 8007802:	d009      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a12      	ldr	r2, [pc, #72]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a11      	ldr	r2, [pc, #68]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10c      	bne.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2280      	movs	r2, #128	; 0x80
 800781c:	4393      	bics	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	4313      	orrs	r3, r2
 8007828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	223d      	movs	r2, #61	; 0x3d
 8007836:	2101      	movs	r1, #1
 8007838:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	223c      	movs	r2, #60	; 0x3c
 800783e:	2100      	movs	r1, #0
 8007840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b004      	add	sp, #16
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40012c00 	.word	0x40012c00
 8007850:	ff0fffff 	.word	0xff0fffff
 8007854:	40000400 	.word	0x40000400
 8007858:	40014000 	.word	0x40014000

0800785c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007864:	46c0      	nop			; (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007884:	46c0      	nop			; (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b002      	add	sp, #8
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e046      	b.n	800792c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2284      	movs	r2, #132	; 0x84
 80078a2:	589b      	ldr	r3, [r3, r2]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d107      	bne.n	80078b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	2100      	movs	r1, #0
 80078ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	0018      	movs	r0, r3
 80078b4:	f007 f8d8 	bl	800ea68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2284      	movs	r2, #132	; 0x84
 80078bc:	2124      	movs	r1, #36	; 0x24
 80078be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2101      	movs	r1, #1
 80078cc:	438a      	bics	r2, r1
 80078ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	0018      	movs	r0, r3
 80078d4:	f000 f830 	bl	8007938 <UART_SetConfig>
 80078d8:	0003      	movs	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e024      	b.n	800792c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	0018      	movs	r0, r3
 80078ee:	f000 fb01 	bl	8007ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	490d      	ldr	r1, [pc, #52]	; (8007934 <HAL_UART_Init+0xa8>)
 80078fe:	400a      	ands	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	212a      	movs	r1, #42	; 0x2a
 800790e:	438a      	bics	r2, r1
 8007910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2101      	movs	r1, #1
 800791e:	430a      	orrs	r2, r1
 8007920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	0018      	movs	r0, r3
 8007926:	f000 fb99 	bl	800805c <UART_CheckIdleState>
 800792a:	0003      	movs	r3, r0
}
 800792c:	0018      	movs	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	b002      	add	sp, #8
 8007932:	bd80      	pop	{r7, pc}
 8007934:	ffffb7ff 	.word	0xffffb7ff

08007938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	b5b0      	push	{r4, r5, r7, lr}
 800793a:	b090      	sub	sp, #64	; 0x40
 800793c:	af00      	add	r7, sp, #0
 800793e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007940:	231a      	movs	r3, #26
 8007942:	2220      	movs	r2, #32
 8007944:	4694      	mov	ip, r2
 8007946:	44bc      	add	ip, r7
 8007948:	4463      	add	r3, ip
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	431a      	orrs	r2, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	431a      	orrs	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	4313      	orrs	r3, r2
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4ab9      	ldr	r2, [pc, #740]	; (8007c54 <UART_SetConfig+0x31c>)
 800796e:	4013      	ands	r3, r2
 8007970:	0019      	movs	r1, r3
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007978:	430b      	orrs	r3, r1
 800797a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4ab5      	ldr	r2, [pc, #724]	; (8007c58 <UART_SetConfig+0x320>)
 8007984:	4013      	ands	r3, r2
 8007986:	0018      	movs	r0, r3
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	68d9      	ldr	r1, [r3, #12]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	0003      	movs	r3, r0
 8007992:	430b      	orrs	r3, r1
 8007994:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4aae      	ldr	r2, [pc, #696]	; (8007c5c <UART_SetConfig+0x324>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ac:	4313      	orrs	r3, r2
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	4aaa      	ldr	r2, [pc, #680]	; (8007c60 <UART_SetConfig+0x328>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	0019      	movs	r1, r3
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	220f      	movs	r2, #15
 80079ce:	4393      	bics	r3, r2
 80079d0:	0018      	movs	r0, r3
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	0003      	movs	r3, r0
 80079dc:	430b      	orrs	r3, r1
 80079de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a9f      	ldr	r2, [pc, #636]	; (8007c64 <UART_SetConfig+0x32c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d136      	bne.n	8007a58 <UART_SetConfig+0x120>
 80079ea:	4b9f      	ldr	r3, [pc, #636]	; (8007c68 <UART_SetConfig+0x330>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	2203      	movs	r2, #3
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d020      	beq.n	8007a38 <UART_SetConfig+0x100>
 80079f6:	d827      	bhi.n	8007a48 <UART_SetConfig+0x110>
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d00d      	beq.n	8007a18 <UART_SetConfig+0xe0>
 80079fc:	d824      	bhi.n	8007a48 <UART_SetConfig+0x110>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <UART_SetConfig+0xd0>
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d010      	beq.n	8007a28 <UART_SetConfig+0xf0>
 8007a06:	e01f      	b.n	8007a48 <UART_SetConfig+0x110>
 8007a08:	231b      	movs	r3, #27
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	4694      	mov	ip, r2
 8007a0e:	44bc      	add	ip, r7
 8007a10:	4463      	add	r3, ip
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e0c5      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007a18:	231b      	movs	r3, #27
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	44bc      	add	ip, r7
 8007a20:	4463      	add	r3, ip
 8007a22:	2202      	movs	r2, #2
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e0bd      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007a28:	231b      	movs	r3, #27
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	4694      	mov	ip, r2
 8007a2e:	44bc      	add	ip, r7
 8007a30:	4463      	add	r3, ip
 8007a32:	2204      	movs	r2, #4
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e0b5      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007a38:	231b      	movs	r3, #27
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	4694      	mov	ip, r2
 8007a3e:	44bc      	add	ip, r7
 8007a40:	4463      	add	r3, ip
 8007a42:	2208      	movs	r2, #8
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e0ad      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007a48:	231b      	movs	r3, #27
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	4694      	mov	ip, r2
 8007a4e:	44bc      	add	ip, r7
 8007a50:	4463      	add	r3, ip
 8007a52:	2210      	movs	r2, #16
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	e0a5      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a83      	ldr	r2, [pc, #524]	; (8007c6c <UART_SetConfig+0x334>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d136      	bne.n	8007ad0 <UART_SetConfig+0x198>
 8007a62:	4b81      	ldr	r3, [pc, #516]	; (8007c68 <UART_SetConfig+0x330>)
 8007a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a66:	220c      	movs	r2, #12
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b0c      	cmp	r3, #12
 8007a6c:	d020      	beq.n	8007ab0 <UART_SetConfig+0x178>
 8007a6e:	d827      	bhi.n	8007ac0 <UART_SetConfig+0x188>
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d00d      	beq.n	8007a90 <UART_SetConfig+0x158>
 8007a74:	d824      	bhi.n	8007ac0 <UART_SetConfig+0x188>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <UART_SetConfig+0x148>
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d010      	beq.n	8007aa0 <UART_SetConfig+0x168>
 8007a7e:	e01f      	b.n	8007ac0 <UART_SetConfig+0x188>
 8007a80:	231b      	movs	r3, #27
 8007a82:	2220      	movs	r2, #32
 8007a84:	4694      	mov	ip, r2
 8007a86:	44bc      	add	ip, r7
 8007a88:	4463      	add	r3, ip
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e089      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007a90:	231b      	movs	r3, #27
 8007a92:	2220      	movs	r2, #32
 8007a94:	4694      	mov	ip, r2
 8007a96:	44bc      	add	ip, r7
 8007a98:	4463      	add	r3, ip
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e081      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007aa0:	231b      	movs	r3, #27
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	4694      	mov	ip, r2
 8007aa6:	44bc      	add	ip, r7
 8007aa8:	4463      	add	r3, ip
 8007aaa:	2204      	movs	r2, #4
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	e079      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007ab0:	231b      	movs	r3, #27
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	4694      	mov	ip, r2
 8007ab6:	44bc      	add	ip, r7
 8007ab8:	4463      	add	r3, ip
 8007aba:	2208      	movs	r2, #8
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e071      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007ac0:	231b      	movs	r3, #27
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	4694      	mov	ip, r2
 8007ac6:	44bc      	add	ip, r7
 8007ac8:	4463      	add	r3, ip
 8007aca:	2210      	movs	r2, #16
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	e069      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a66      	ldr	r2, [pc, #408]	; (8007c70 <UART_SetConfig+0x338>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d107      	bne.n	8007aea <UART_SetConfig+0x1b2>
 8007ada:	231b      	movs	r3, #27
 8007adc:	2220      	movs	r2, #32
 8007ade:	4694      	mov	ip, r2
 8007ae0:	44bc      	add	ip, r7
 8007ae2:	4463      	add	r3, ip
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e05c      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a61      	ldr	r2, [pc, #388]	; (8007c74 <UART_SetConfig+0x33c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d107      	bne.n	8007b04 <UART_SetConfig+0x1cc>
 8007af4:	231b      	movs	r3, #27
 8007af6:	2220      	movs	r2, #32
 8007af8:	4694      	mov	ip, r2
 8007afa:	44bc      	add	ip, r7
 8007afc:	4463      	add	r3, ip
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e04f      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a54      	ldr	r2, [pc, #336]	; (8007c5c <UART_SetConfig+0x324>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d143      	bne.n	8007b96 <UART_SetConfig+0x25e>
 8007b0e:	4b56      	ldr	r3, [pc, #344]	; (8007c68 <UART_SetConfig+0x330>)
 8007b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b12:	23c0      	movs	r3, #192	; 0xc0
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4013      	ands	r3, r2
 8007b18:	22c0      	movs	r2, #192	; 0xc0
 8007b1a:	0112      	lsls	r2, r2, #4
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d02a      	beq.n	8007b76 <UART_SetConfig+0x23e>
 8007b20:	22c0      	movs	r2, #192	; 0xc0
 8007b22:	0112      	lsls	r2, r2, #4
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d82e      	bhi.n	8007b86 <UART_SetConfig+0x24e>
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	0112      	lsls	r2, r2, #4
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d012      	beq.n	8007b56 <UART_SetConfig+0x21e>
 8007b30:	2280      	movs	r2, #128	; 0x80
 8007b32:	0112      	lsls	r2, r2, #4
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d826      	bhi.n	8007b86 <UART_SetConfig+0x24e>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <UART_SetConfig+0x20e>
 8007b3c:	2280      	movs	r2, #128	; 0x80
 8007b3e:	00d2      	lsls	r2, r2, #3
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d010      	beq.n	8007b66 <UART_SetConfig+0x22e>
 8007b44:	e01f      	b.n	8007b86 <UART_SetConfig+0x24e>
 8007b46:	231b      	movs	r3, #27
 8007b48:	2220      	movs	r2, #32
 8007b4a:	4694      	mov	ip, r2
 8007b4c:	44bc      	add	ip, r7
 8007b4e:	4463      	add	r3, ip
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e026      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007b56:	231b      	movs	r3, #27
 8007b58:	2220      	movs	r2, #32
 8007b5a:	4694      	mov	ip, r2
 8007b5c:	44bc      	add	ip, r7
 8007b5e:	4463      	add	r3, ip
 8007b60:	2202      	movs	r2, #2
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	e01e      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007b66:	231b      	movs	r3, #27
 8007b68:	2220      	movs	r2, #32
 8007b6a:	4694      	mov	ip, r2
 8007b6c:	44bc      	add	ip, r7
 8007b6e:	4463      	add	r3, ip
 8007b70:	2204      	movs	r2, #4
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	e016      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007b76:	231b      	movs	r3, #27
 8007b78:	2220      	movs	r2, #32
 8007b7a:	4694      	mov	ip, r2
 8007b7c:	44bc      	add	ip, r7
 8007b7e:	4463      	add	r3, ip
 8007b80:	2208      	movs	r2, #8
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e00e      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007b86:	231b      	movs	r3, #27
 8007b88:	2220      	movs	r2, #32
 8007b8a:	4694      	mov	ip, r2
 8007b8c:	44bc      	add	ip, r7
 8007b8e:	4463      	add	r3, ip
 8007b90:	2210      	movs	r2, #16
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e006      	b.n	8007ba4 <UART_SetConfig+0x26c>
 8007b96:	231b      	movs	r3, #27
 8007b98:	2220      	movs	r2, #32
 8007b9a:	4694      	mov	ip, r2
 8007b9c:	44bc      	add	ip, r7
 8007b9e:	4463      	add	r3, ip
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2c      	ldr	r2, [pc, #176]	; (8007c5c <UART_SetConfig+0x324>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d000      	beq.n	8007bb0 <UART_SetConfig+0x278>
 8007bae:	e0ad      	b.n	8007d0c <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bb0:	231b      	movs	r3, #27
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	4694      	mov	ip, r2
 8007bb6:	44bc      	add	ip, r7
 8007bb8:	4463      	add	r3, ip
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d015      	beq.n	8007bec <UART_SetConfig+0x2b4>
 8007bc0:	dc18      	bgt.n	8007bf4 <UART_SetConfig+0x2bc>
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d00d      	beq.n	8007be2 <UART_SetConfig+0x2aa>
 8007bc6:	dc15      	bgt.n	8007bf4 <UART_SetConfig+0x2bc>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <UART_SetConfig+0x29a>
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d005      	beq.n	8007bdc <UART_SetConfig+0x2a4>
 8007bd0:	e010      	b.n	8007bf4 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd2:	f7fe fc7d 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bda:	e015      	b.n	8007c08 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bdc:	4b26      	ldr	r3, [pc, #152]	; (8007c78 <UART_SetConfig+0x340>)
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007be0:	e012      	b.n	8007c08 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007be2:	f7fe fbe9 	bl	80063b8 <HAL_RCC_GetSysClockFreq>
 8007be6:	0003      	movs	r3, r0
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bea:	e00d      	b.n	8007c08 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bf2:	e009      	b.n	8007c08 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007bf8:	231a      	movs	r3, #26
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	4694      	mov	ip, r2
 8007bfe:	44bc      	add	ip, r7
 8007c00:	4463      	add	r3, ip
 8007c02:	2201      	movs	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
        break;
 8007c06:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d100      	bne.n	8007c10 <UART_SetConfig+0x2d8>
 8007c0e:	e154      	b.n	8007eba <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c14:	4b19      	ldr	r3, [pc, #100]	; (8007c7c <UART_SetConfig+0x344>)
 8007c16:	0052      	lsls	r2, r2, #1
 8007c18:	5ad3      	ldrh	r3, [r2, r3]
 8007c1a:	0019      	movs	r1, r3
 8007c1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c1e:	f7f8 fa7d 	bl	800011c <__udivsi3>
 8007c22:	0003      	movs	r3, r0
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	0013      	movs	r3, r2
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	189b      	adds	r3, r3, r2
 8007c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d305      	bcc.n	8007c42 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d91e      	bls.n	8007c80 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007c42:	231a      	movs	r3, #26
 8007c44:	2220      	movs	r2, #32
 8007c46:	4694      	mov	ip, r2
 8007c48:	44bc      	add	ip, r7
 8007c4a:	4463      	add	r3, ip
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e133      	b.n	8007eba <UART_SetConfig+0x582>
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	cfff69f3 	.word	0xcfff69f3
 8007c58:	ffffcfff 	.word	0xffffcfff
 8007c5c:	40008000 	.word	0x40008000
 8007c60:	11fff4ff 	.word	0x11fff4ff
 8007c64:	40013800 	.word	0x40013800
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	40004400 	.word	0x40004400
 8007c70:	40004800 	.word	0x40004800
 8007c74:	40004c00 	.word	0x40004c00
 8007c78:	00f42400 	.word	0x00f42400
 8007c7c:	0800fb18 	.word	0x0800fb18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	2300      	movs	r3, #0
 8007c86:	61fb      	str	r3, [r7, #28]
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c8c:	4b97      	ldr	r3, [pc, #604]	; (8007eec <UART_SetConfig+0x5b4>)
 8007c8e:	0052      	lsls	r2, r2, #1
 8007c90:	5ad3      	ldrh	r3, [r2, r3]
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	69b8      	ldr	r0, [r7, #24]
 8007c9e:	69f9      	ldr	r1, [r7, #28]
 8007ca0:	f7f8 fc14 	bl	80004cc <__aeabi_uldivmod>
 8007ca4:	0002      	movs	r2, r0
 8007ca6:	000b      	movs	r3, r1
 8007ca8:	0e11      	lsrs	r1, r2, #24
 8007caa:	021d      	lsls	r5, r3, #8
 8007cac:	430d      	orrs	r5, r1
 8007cae:	0214      	lsls	r4, r2, #8
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	085b      	lsrs	r3, r3, #1
 8007cb6:	60bb      	str	r3, [r7, #8]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68b8      	ldr	r0, [r7, #8]
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	1900      	adds	r0, r0, r4
 8007cc2:	4169      	adcs	r1, r5
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f7f8 fbfb 	bl	80004cc <__aeabi_uldivmod>
 8007cd6:	0002      	movs	r2, r0
 8007cd8:	000b      	movs	r3, r1
 8007cda:	0013      	movs	r3, r2
 8007cdc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce0:	23c0      	movs	r3, #192	; 0xc0
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d309      	bcc.n	8007cfc <UART_SetConfig+0x3c4>
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	035b      	lsls	r3, r3, #13
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d204      	bcs.n	8007cfc <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e0de      	b.n	8007eba <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8007cfc:	231a      	movs	r3, #26
 8007cfe:	2220      	movs	r2, #32
 8007d00:	4694      	mov	ip, r2
 8007d02:	44bc      	add	ip, r7
 8007d04:	4463      	add	r3, ip
 8007d06:	2201      	movs	r2, #1
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e0d6      	b.n	8007eba <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d000      	beq.n	8007d1a <UART_SetConfig+0x3e2>
 8007d18:	e074      	b.n	8007e04 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8007d1a:	231b      	movs	r3, #27
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	4694      	mov	ip, r2
 8007d20:	44bc      	add	ip, r7
 8007d22:	4463      	add	r3, ip
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d015      	beq.n	8007d56 <UART_SetConfig+0x41e>
 8007d2a:	dc18      	bgt.n	8007d5e <UART_SetConfig+0x426>
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d00d      	beq.n	8007d4c <UART_SetConfig+0x414>
 8007d30:	dc15      	bgt.n	8007d5e <UART_SetConfig+0x426>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <UART_SetConfig+0x404>
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d005      	beq.n	8007d46 <UART_SetConfig+0x40e>
 8007d3a:	e010      	b.n	8007d5e <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d3c:	f7fe fbc8 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 8007d40:	0003      	movs	r3, r0
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d44:	e015      	b.n	8007d72 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d46:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <UART_SetConfig+0x5b8>)
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4a:	e012      	b.n	8007d72 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d4c:	f7fe fb34 	bl	80063b8 <HAL_RCC_GetSysClockFreq>
 8007d50:	0003      	movs	r3, r0
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d54:	e00d      	b.n	8007d72 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d56:	2380      	movs	r3, #128	; 0x80
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d5c:	e009      	b.n	8007d72 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007d62:	231a      	movs	r3, #26
 8007d64:	2220      	movs	r2, #32
 8007d66:	4694      	mov	ip, r2
 8007d68:	44bc      	add	ip, r7
 8007d6a:	4463      	add	r3, ip
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	701a      	strb	r2, [r3, #0]
        break;
 8007d70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d100      	bne.n	8007d7a <UART_SetConfig+0x442>
 8007d78:	e09f      	b.n	8007eba <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7e:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <UART_SetConfig+0x5b4>)
 8007d80:	0052      	lsls	r2, r2, #1
 8007d82:	5ad3      	ldrh	r3, [r2, r3]
 8007d84:	0019      	movs	r1, r3
 8007d86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d88:	f7f8 f9c8 	bl	800011c <__udivsi3>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	005a      	lsls	r2, r3, #1
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	085b      	lsrs	r3, r3, #1
 8007d96:	18d2      	adds	r2, r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	0019      	movs	r1, r3
 8007d9e:	0010      	movs	r0, r2
 8007da0:	f7f8 f9bc 	bl	800011c <__udivsi3>
 8007da4:	0003      	movs	r3, r0
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	2b0f      	cmp	r3, #15
 8007dae:	d921      	bls.n	8007df4 <UART_SetConfig+0x4bc>
 8007db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db2:	2380      	movs	r3, #128	; 0x80
 8007db4:	025b      	lsls	r3, r3, #9
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d21c      	bcs.n	8007df4 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	200e      	movs	r0, #14
 8007dc0:	2420      	movs	r4, #32
 8007dc2:	193b      	adds	r3, r7, r4
 8007dc4:	181b      	adds	r3, r3, r0
 8007dc6:	210f      	movs	r1, #15
 8007dc8:	438a      	bics	r2, r1
 8007dca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2207      	movs	r2, #7
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	b299      	uxth	r1, r3
 8007dd8:	193b      	adds	r3, r7, r4
 8007dda:	181b      	adds	r3, r3, r0
 8007ddc:	193a      	adds	r2, r7, r4
 8007dde:	1812      	adds	r2, r2, r0
 8007de0:	8812      	ldrh	r2, [r2, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	193a      	adds	r2, r7, r4
 8007dec:	1812      	adds	r2, r2, r0
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	e062      	b.n	8007eba <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007df4:	231a      	movs	r3, #26
 8007df6:	2220      	movs	r2, #32
 8007df8:	4694      	mov	ip, r2
 8007dfa:	44bc      	add	ip, r7
 8007dfc:	4463      	add	r3, ip
 8007dfe:	2201      	movs	r2, #1
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	e05a      	b.n	8007eba <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e04:	231b      	movs	r3, #27
 8007e06:	2220      	movs	r2, #32
 8007e08:	4694      	mov	ip, r2
 8007e0a:	44bc      	add	ip, r7
 8007e0c:	4463      	add	r3, ip
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d015      	beq.n	8007e40 <UART_SetConfig+0x508>
 8007e14:	dc18      	bgt.n	8007e48 <UART_SetConfig+0x510>
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d00d      	beq.n	8007e36 <UART_SetConfig+0x4fe>
 8007e1a:	dc15      	bgt.n	8007e48 <UART_SetConfig+0x510>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <UART_SetConfig+0x4ee>
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d005      	beq.n	8007e30 <UART_SetConfig+0x4f8>
 8007e24:	e010      	b.n	8007e48 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e26:	f7fe fb53 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 8007e2a:	0003      	movs	r3, r0
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e2e:	e015      	b.n	8007e5c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e30:	4b2f      	ldr	r3, [pc, #188]	; (8007ef0 <UART_SetConfig+0x5b8>)
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e34:	e012      	b.n	8007e5c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e36:	f7fe fabf 	bl	80063b8 <HAL_RCC_GetSysClockFreq>
 8007e3a:	0003      	movs	r3, r0
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e3e:	e00d      	b.n	8007e5c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e40:	2380      	movs	r3, #128	; 0x80
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e46:	e009      	b.n	8007e5c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007e4c:	231a      	movs	r3, #26
 8007e4e:	2220      	movs	r2, #32
 8007e50:	4694      	mov	ip, r2
 8007e52:	44bc      	add	ip, r7
 8007e54:	4463      	add	r3, ip
 8007e56:	2201      	movs	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]
        break;
 8007e5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02b      	beq.n	8007eba <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e66:	4b21      	ldr	r3, [pc, #132]	; (8007eec <UART_SetConfig+0x5b4>)
 8007e68:	0052      	lsls	r2, r2, #1
 8007e6a:	5ad3      	ldrh	r3, [r2, r3]
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e70:	f7f8 f954 	bl	800011c <__udivsi3>
 8007e74:	0003      	movs	r3, r0
 8007e76:	001a      	movs	r2, r3
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	18d2      	adds	r2, r2, r3
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	0019      	movs	r1, r3
 8007e86:	0010      	movs	r0, r2
 8007e88:	f7f8 f948 	bl	800011c <__udivsi3>
 8007e8c:	0003      	movs	r3, r0
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2b0f      	cmp	r3, #15
 8007e96:	d909      	bls.n	8007eac <UART_SetConfig+0x574>
 8007e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9a:	2380      	movs	r3, #128	; 0x80
 8007e9c:	025b      	lsls	r3, r3, #9
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d204      	bcs.n	8007eac <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea8:	60da      	str	r2, [r3, #12]
 8007eaa:	e006      	b.n	8007eba <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007eac:	231a      	movs	r3, #26
 8007eae:	2220      	movs	r2, #32
 8007eb0:	4694      	mov	ip, r2
 8007eb2:	44bc      	add	ip, r7
 8007eb4:	4463      	add	r3, ip
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	226a      	movs	r2, #106	; 0x6a
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2268      	movs	r2, #104	; 0x68
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	2200      	movs	r2, #0
 8007ece:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ed6:	231a      	movs	r3, #26
 8007ed8:	2220      	movs	r2, #32
 8007eda:	4694      	mov	ip, r2
 8007edc:	44bc      	add	ip, r7
 8007ede:	4463      	add	r3, ip
 8007ee0:	781b      	ldrb	r3, [r3, #0]
}
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	b010      	add	sp, #64	; 0x40
 8007ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	0800fb18 	.word	0x0800fb18
 8007ef0:	00f42400 	.word	0x00f42400

08007ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	2201      	movs	r2, #1
 8007f02:	4013      	ands	r3, r2
 8007f04:	d00b      	beq.n	8007f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	4a4a      	ldr	r2, [pc, #296]	; (8008038 <UART_AdvFeatureConfig+0x144>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	0019      	movs	r1, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	2202      	movs	r2, #2
 8007f24:	4013      	ands	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4a43      	ldr	r2, [pc, #268]	; (800803c <UART_AdvFeatureConfig+0x148>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	0019      	movs	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	2204      	movs	r2, #4
 8007f46:	4013      	ands	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a3b      	ldr	r2, [pc, #236]	; (8008040 <UART_AdvFeatureConfig+0x14c>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	0019      	movs	r1, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	2208      	movs	r2, #8
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	4a34      	ldr	r2, [pc, #208]	; (8008044 <UART_AdvFeatureConfig+0x150>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	0019      	movs	r1, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	2210      	movs	r2, #16
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	4a2c      	ldr	r2, [pc, #176]	; (8008048 <UART_AdvFeatureConfig+0x154>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	0019      	movs	r1, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	2220      	movs	r2, #32
 8007fac:	4013      	ands	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4a25      	ldr	r2, [pc, #148]	; (800804c <UART_AdvFeatureConfig+0x158>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	0019      	movs	r1, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	2240      	movs	r2, #64	; 0x40
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d01d      	beq.n	800800e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	; (8008050 <UART_AdvFeatureConfig+0x15c>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fee:	2380      	movs	r3, #128	; 0x80
 8007ff0:	035b      	lsls	r3, r3, #13
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d10b      	bne.n	800800e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <UART_AdvFeatureConfig+0x160>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	0019      	movs	r1, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	2280      	movs	r2, #128	; 0x80
 8008014:	4013      	ands	r3, r2
 8008016:	d00b      	beq.n	8008030 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <UART_AdvFeatureConfig+0x164>)
 8008020:	4013      	ands	r3, r2
 8008022:	0019      	movs	r1, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  }
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	46bd      	mov	sp, r7
 8008034:	b002      	add	sp, #8
 8008036:	bd80      	pop	{r7, pc}
 8008038:	fffdffff 	.word	0xfffdffff
 800803c:	fffeffff 	.word	0xfffeffff
 8008040:	fffbffff 	.word	0xfffbffff
 8008044:	ffff7fff 	.word	0xffff7fff
 8008048:	ffffefff 	.word	0xffffefff
 800804c:	ffffdfff 	.word	0xffffdfff
 8008050:	ffefffff 	.word	0xffefffff
 8008054:	ff9fffff 	.word	0xff9fffff
 8008058:	fff7ffff 	.word	0xfff7ffff

0800805c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	228c      	movs	r2, #140	; 0x8c
 8008068:	2100      	movs	r1, #0
 800806a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800806c:	f7fb fb10 	bl	8003690 <HAL_GetTick>
 8008070:	0003      	movs	r3, r0
 8008072:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2208      	movs	r2, #8
 800807c:	4013      	ands	r3, r2
 800807e:	2b08      	cmp	r3, #8
 8008080:	d10c      	bne.n	800809c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2280      	movs	r2, #128	; 0x80
 8008086:	0391      	lsls	r1, r2, #14
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4a18      	ldr	r2, [pc, #96]	; (80080ec <UART_CheckIdleState+0x90>)
 800808c:	9200      	str	r2, [sp, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	f000 f82e 	bl	80080f0 <UART_WaitOnFlagUntilTimeout>
 8008094:	1e03      	subs	r3, r0, #0
 8008096:	d001      	beq.n	800809c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e023      	b.n	80080e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2204      	movs	r2, #4
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d10c      	bne.n	80080c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2280      	movs	r2, #128	; 0x80
 80080ae:	03d1      	lsls	r1, r2, #15
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <UART_CheckIdleState+0x90>)
 80080b4:	9200      	str	r2, [sp, #0]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f000 f81a 	bl	80080f0 <UART_WaitOnFlagUntilTimeout>
 80080bc:	1e03      	subs	r3, r0, #0
 80080be:	d001      	beq.n	80080c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e00f      	b.n	80080e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2284      	movs	r2, #132	; 0x84
 80080c8:	2120      	movs	r1, #32
 80080ca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2288      	movs	r2, #136	; 0x88
 80080d0:	2120      	movs	r1, #32
 80080d2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2280      	movs	r2, #128	; 0x80
 80080de:	2100      	movs	r1, #0
 80080e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	0018      	movs	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b004      	add	sp, #16
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	01ffffff 	.word	0x01ffffff

080080f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b094      	sub	sp, #80	; 0x50
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	1dfb      	adds	r3, r7, #7
 80080fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008100:	e0a7      	b.n	8008252 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008104:	3301      	adds	r3, #1
 8008106:	d100      	bne.n	800810a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008108:	e0a3      	b.n	8008252 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800810a:	f7fb fac1 	bl	8003690 <HAL_GetTick>
 800810e:	0002      	movs	r2, r0
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <UART_WaitOnFlagUntilTimeout+0x30>
 800811a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800811c:	2b00      	cmp	r3, #0
 800811e:	d13f      	bne.n	80081a0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008120:	f3ef 8310 	mrs	r3, PRIMASK
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008128:	647b      	str	r3, [r7, #68]	; 0x44
 800812a:	2301      	movs	r3, #1
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	f383 8810 	msr	PRIMASK, r3
}
 8008134:	46c0      	nop			; (mov r8, r8)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	494e      	ldr	r1, [pc, #312]	; (800827c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008142:	400a      	ands	r2, r1
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008148:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f383 8810 	msr	PRIMASK, r3
}
 8008150:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008152:	f3ef 8310 	mrs	r3, PRIMASK
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815a:	643b      	str	r3, [r7, #64]	; 0x40
 800815c:	2301      	movs	r3, #1
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f383 8810 	msr	PRIMASK, r3
}
 8008166:	46c0      	nop			; (mov r8, r8)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2101      	movs	r1, #1
 8008174:	438a      	bics	r2, r1
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817e:	f383 8810 	msr	PRIMASK, r3
}
 8008182:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2284      	movs	r2, #132	; 0x84
 8008188:	2120      	movs	r1, #32
 800818a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2288      	movs	r2, #136	; 0x88
 8008190:	2120      	movs	r1, #32
 8008192:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2280      	movs	r2, #128	; 0x80
 8008198:	2100      	movs	r1, #0
 800819a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e069      	b.n	8008274 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2204      	movs	r2, #4
 80081a8:	4013      	ands	r3, r2
 80081aa:	d052      	beq.n	8008252 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69da      	ldr	r2, [r3, #28]
 80081b2:	2380      	movs	r3, #128	; 0x80
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	401a      	ands	r2, r3
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	429a      	cmp	r2, r3
 80081be:	d148      	bne.n	8008252 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2280      	movs	r2, #128	; 0x80
 80081c6:	0112      	lsls	r2, r2, #4
 80081c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ca:	f3ef 8310 	mrs	r3, PRIMASK
 80081ce:	613b      	str	r3, [r7, #16]
  return(result);
 80081d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081d4:	2301      	movs	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f383 8810 	msr	PRIMASK, r3
}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4924      	ldr	r1, [pc, #144]	; (800827c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80081ec:	400a      	ands	r2, r1
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f383 8810 	msr	PRIMASK, r3
}
 80081fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008200:	61fb      	str	r3, [r7, #28]
  return(result);
 8008202:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	64bb      	str	r3, [r7, #72]	; 0x48
 8008206:	2301      	movs	r3, #1
 8008208:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	f383 8810 	msr	PRIMASK, r3
}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2101      	movs	r1, #1
 800821e:	438a      	bics	r2, r1
 8008220:	609a      	str	r2, [r3, #8]
 8008222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	f383 8810 	msr	PRIMASK, r3
}
 800822c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2284      	movs	r2, #132	; 0x84
 8008232:	2120      	movs	r1, #32
 8008234:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2288      	movs	r2, #136	; 0x88
 800823a:	2120      	movs	r1, #32
 800823c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	228c      	movs	r2, #140	; 0x8c
 8008242:	2120      	movs	r1, #32
 8008244:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2280      	movs	r2, #128	; 0x80
 800824a:	2100      	movs	r1, #0
 800824c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e010      	b.n	8008274 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	4013      	ands	r3, r2
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	425a      	negs	r2, r3
 8008262:	4153      	adcs	r3, r2
 8008264:	b2db      	uxtb	r3, r3
 8008266:	001a      	movs	r2, r3
 8008268:	1dfb      	adds	r3, r7, #7
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d100      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0x182>
 8008270:	e747      	b.n	8008102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b014      	add	sp, #80	; 0x50
 800827a:	bd80      	pop	{r7, pc}
 800827c:	fffffe5f 	.word	0xfffffe5f

08008280 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2280      	movs	r2, #128	; 0x80
 800828c:	5c9b      	ldrb	r3, [r3, r2]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_UARTEx_DisableFifoMode+0x16>
 8008292:	2302      	movs	r3, #2
 8008294:	e027      	b.n	80082e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2280      	movs	r2, #128	; 0x80
 800829a:	2101      	movs	r1, #1
 800829c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2284      	movs	r2, #132	; 0x84
 80082a2:	2124      	movs	r1, #36	; 0x24
 80082a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2101      	movs	r1, #1
 80082ba:	438a      	bics	r2, r1
 80082bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a0b      	ldr	r2, [pc, #44]	; (80082f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80082c2:	4013      	ands	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2284      	movs	r2, #132	; 0x84
 80082d8:	2120      	movs	r1, #32
 80082da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	2100      	movs	r1, #0
 80082e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	0018      	movs	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b004      	add	sp, #16
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	dfffffff 	.word	0xdfffffff

080082f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	5c9b      	ldrb	r3, [r3, r2]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008308:	2302      	movs	r3, #2
 800830a:	e02e      	b.n	800836a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	2101      	movs	r1, #1
 8008312:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2284      	movs	r2, #132	; 0x84
 8008318:	2124      	movs	r1, #36	; 0x24
 800831a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2101      	movs	r1, #1
 8008330:	438a      	bics	r2, r1
 8008332:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	08d9      	lsrs	r1, r3, #3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	0018      	movs	r0, r3
 800834c:	f000 f854 	bl	80083f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2284      	movs	r2, #132	; 0x84
 800835c:	2120      	movs	r1, #32
 800835e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	2100      	movs	r1, #0
 8008366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	0018      	movs	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	b004      	add	sp, #16
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2280      	movs	r2, #128	; 0x80
 8008382:	5c9b      	ldrb	r3, [r3, r2]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008388:	2302      	movs	r3, #2
 800838a:	e02f      	b.n	80083ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2280      	movs	r2, #128	; 0x80
 8008390:	2101      	movs	r1, #1
 8008392:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2284      	movs	r2, #132	; 0x84
 8008398:	2124      	movs	r1, #36	; 0x24
 800839a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2101      	movs	r1, #1
 80083b0:	438a      	bics	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4a0e      	ldr	r2, [pc, #56]	; (80083f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80083bc:	4013      	ands	r3, r2
 80083be:	0019      	movs	r1, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	0018      	movs	r0, r3
 80083ce:	f000 f813 	bl	80083f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2284      	movs	r2, #132	; 0x84
 80083de:	2120      	movs	r1, #32
 80083e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2280      	movs	r2, #128	; 0x80
 80083e6:	2100      	movs	r1, #0
 80083e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	0018      	movs	r0, r3
 80083ee:	46bd      	mov	sp, r7
 80083f0:	b004      	add	sp, #16
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	f1ffffff 	.word	0xf1ffffff

080083f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008404:	2b00      	cmp	r3, #0
 8008406:	d108      	bne.n	800841a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	226a      	movs	r2, #106	; 0x6a
 800840c:	2101      	movs	r1, #1
 800840e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2268      	movs	r2, #104	; 0x68
 8008414:	2101      	movs	r1, #1
 8008416:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008418:	e043      	b.n	80084a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800841a:	260f      	movs	r6, #15
 800841c:	19bb      	adds	r3, r7, r6
 800841e:	2208      	movs	r2, #8
 8008420:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008422:	200e      	movs	r0, #14
 8008424:	183b      	adds	r3, r7, r0
 8008426:	2208      	movs	r2, #8
 8008428:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	0e5b      	lsrs	r3, r3, #25
 8008432:	b2da      	uxtb	r2, r3
 8008434:	240d      	movs	r4, #13
 8008436:	193b      	adds	r3, r7, r4
 8008438:	2107      	movs	r1, #7
 800843a:	400a      	ands	r2, r1
 800843c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	0f5b      	lsrs	r3, r3, #29
 8008446:	b2da      	uxtb	r2, r3
 8008448:	250c      	movs	r5, #12
 800844a:	197b      	adds	r3, r7, r5
 800844c:	2107      	movs	r1, #7
 800844e:	400a      	ands	r2, r1
 8008450:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008452:	183b      	adds	r3, r7, r0
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	197a      	adds	r2, r7, r5
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	4914      	ldr	r1, [pc, #80]	; (80084ac <UARTEx_SetNbDataToProcess+0xb4>)
 800845c:	5c8a      	ldrb	r2, [r1, r2]
 800845e:	435a      	muls	r2, r3
 8008460:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008462:	197b      	adds	r3, r7, r5
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	4a12      	ldr	r2, [pc, #72]	; (80084b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008468:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800846a:	0019      	movs	r1, r3
 800846c:	f7f7 fee0 	bl	8000230 <__divsi3>
 8008470:	0003      	movs	r3, r0
 8008472:	b299      	uxth	r1, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	226a      	movs	r2, #106	; 0x6a
 8008478:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800847a:	19bb      	adds	r3, r7, r6
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	193a      	adds	r2, r7, r4
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	490a      	ldr	r1, [pc, #40]	; (80084ac <UARTEx_SetNbDataToProcess+0xb4>)
 8008484:	5c8a      	ldrb	r2, [r1, r2]
 8008486:	435a      	muls	r2, r3
 8008488:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800848a:	193b      	adds	r3, r7, r4
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4a08      	ldr	r2, [pc, #32]	; (80084b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008490:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008492:	0019      	movs	r1, r3
 8008494:	f7f7 fecc 	bl	8000230 <__divsi3>
 8008498:	0003      	movs	r3, r0
 800849a:	b299      	uxth	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2268      	movs	r2, #104	; 0x68
 80084a0:	5299      	strh	r1, [r3, r2]
}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b005      	add	sp, #20
 80084a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	0800fb30 	.word	0x0800fb30
 80084b0:	0800fb38 	.word	0x0800fb38

080084b4 <LEDmultiplexing>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDmultiplexing(LEDdisplayTypeDef *LEDdisplay) {
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

//every intterrupt occurs
	_LEDallOff(LEDdisplay);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	0018      	movs	r0, r3
 80084c0:	f000 f9ba 	bl	8008838 <_LEDallOff>
	_LEDfieldOn(LEDdisplay, LEDdisplay->actualField);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2265      	movs	r2, #101	; 0x65
 80084c8:	5c9a      	ldrb	r2, [r3, r2]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	0011      	movs	r1, r2
 80084ce:	0018      	movs	r0, r3
 80084d0:	f000 f970 	bl	80087b4 <_LEDfieldOn>
	_LEDwriteCharacter(LEDdisplay,
			LEDdisplay->digitBuffer[LEDdisplay->actualField]);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2265      	movs	r2, #101	; 0x65
 80084d8:	5c9b      	ldrb	r3, [r3, r2]
 80084da:	0019      	movs	r1, r3
	_LEDwriteCharacter(LEDdisplay,
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2260      	movs	r2, #96	; 0x60
 80084e0:	185b      	adds	r3, r3, r1
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	781a      	ldrb	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0011      	movs	r1, r2
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 fa10 	bl	8008910 <_LEDwriteCharacter>

	if (LEDdisplay->dotPosition == LEDdisplay->actualField) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2264      	movs	r2, #100	; 0x64
 80084f4:	5c9a      	ldrb	r2, [r3, r2]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2165      	movs	r1, #101	; 0x65
 80084fa:	5c5b      	ldrb	r3, [r3, r1]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d107      	bne.n	8008510 <LEDmultiplexing+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008508:	2200      	movs	r2, #0
 800850a:	0019      	movs	r1, r3
 800850c:	f7fc fc71 	bl	8004df2 <HAL_GPIO_WritePin>
		LED_SEGMENT_ON);
	}

	LEDdisplay->actualField++;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2265      	movs	r2, #101	; 0x65
 8008514:	5c9b      	ldrb	r3, [r3, r2]
 8008516:	3301      	adds	r3, #1
 8008518:	b2d9      	uxtb	r1, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2265      	movs	r2, #101	; 0x65
 800851e:	5499      	strb	r1, [r3, r2]
	if (LEDdisplay->actualField >= LED_FIELDS)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2265      	movs	r2, #101	; 0x65
 8008524:	5c9b      	ldrb	r3, [r3, r2]
 8008526:	2b03      	cmp	r3, #3
 8008528:	d903      	bls.n	8008532 <LEDmultiplexing+0x7e>
		LEDdisplay->actualField = 0;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2265      	movs	r2, #101	; 0x65
 800852e:	2100      	movs	r1, #0
 8008530:	5499      	strb	r1, [r3, r2]

	LEDdisplay->prescalerCounter++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	226c      	movs	r2, #108	; 0x6c
 8008536:	5a9b      	ldrh	r3, [r3, r2]
 8008538:	3301      	adds	r3, #1
 800853a:	b299      	uxth	r1, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	226c      	movs	r2, #108	; 0x6c
 8008540:	5299      	strh	r1, [r3, r2]

//every interrupt divided by prescaler
	if (LEDdisplay->prescalerCounter % LED_TRANSITION_PRE == 0) {
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	226c      	movs	r2, #108	; 0x6c
 8008546:	5a9b      	ldrh	r3, [r3, r2]
 8008548:	2105      	movs	r1, #5
 800854a:	0018      	movs	r0, r3
 800854c:	f7f7 fe6c 	bl	8000228 <__aeabi_uidivmod>
 8008550:	000b      	movs	r3, r1
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d000      	beq.n	800855a <LEDmultiplexing+0xa6>
 8008558:	e0a2      	b.n	80086a0 <LEDmultiplexing+0x1ec>

		//transition handling
		if (LEDdisplay->transitionStatus != LED_TRANSITION_DISABLED) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2267      	movs	r2, #103	; 0x67
 800855e:	5c9b      	ldrb	r3, [r3, r2]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d100      	bne.n	8008566 <LEDmultiplexing+0xb2>
 8008564:	e09c      	b.n	80086a0 <LEDmultiplexing+0x1ec>

			//right dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_RIGHT) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2267      	movs	r2, #103	; 0x67
 800856a:	5c9b      	ldrb	r3, [r3, r2]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d13f      	bne.n	80085f0 <LEDmultiplexing+0x13c>
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 8008570:	230f      	movs	r3, #15
 8008572:	18fb      	adds	r3, r7, r3
 8008574:	2203      	movs	r2, #3
 8008576:	701a      	strb	r2, [r3, #0]
 8008578:	e015      	b.n	80085a6 <LEDmultiplexing+0xf2>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i - 1]; //fill with separator fields
 800857a:	240f      	movs	r4, #15
 800857c:	193b      	adds	r3, r7, r4
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	1e5a      	subs	r2, r3, #1
 8008582:	193b      	adds	r3, r7, r4
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	2060      	movs	r0, #96	; 0x60
 800858a:	188a      	adds	r2, r1, r2
 800858c:	1812      	adds	r2, r2, r0
 800858e:	7810      	ldrb	r0, [r2, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	2160      	movs	r1, #96	; 0x60
 8008594:	18d3      	adds	r3, r2, r3
 8008596:	185b      	adds	r3, r3, r1
 8008598:	1c02      	adds	r2, r0, #0
 800859a:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = LED_FIELDS - 1; i > 0; i--) {
 800859c:	193b      	adds	r3, r7, r4
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	193b      	adds	r3, r7, r4
 80085a2:	3a01      	subs	r2, #1
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	230f      	movs	r3, #15
 80085a8:	18fb      	adds	r3, r7, r3
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <LEDmultiplexing+0xc6>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2266      	movs	r2, #102	; 0x66
 80085b4:	5c9b      	ldrb	r3, [r3, r2]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d80c      	bhi.n	80085d4 <LEDmultiplexing+0x120>
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2266      	movs	r2, #102	; 0x66
 80085be:	5c9b      	ldrb	r3, [r3, r2]
 80085c0:	0019      	movs	r1, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2268      	movs	r2, #104	; 0x68
 80085c6:	185b      	adds	r3, r3, r1
 80085c8:	189b      	adds	r3, r3, r2
 80085ca:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2260      	movs	r2, #96	; 0x60
 80085d0:	5499      	strb	r1, [r3, r2]
 80085d2:	e00d      	b.n	80085f0 <LEDmultiplexing+0x13c>
				} else {
					LEDdisplay->digitBuffer[0] =
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
									- (LEDdisplay->transitionStage
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2266      	movs	r2, #102	; 0x66
 80085d8:	5c9b      	ldrb	r3, [r3, r2]
 80085da:	001a      	movs	r2, r3
 80085dc:	2307      	movs	r3, #7
 80085de:	1a9b      	subs	r3, r3, r2
							LEDdisplay->digitTransitionBuffer[LED_FIELDS - 1
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	216e      	movs	r1, #110	; 0x6e
 80085e4:	18d3      	adds	r3, r2, r3
 80085e6:	185b      	adds	r3, r3, r1
 80085e8:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[0] =
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2260      	movs	r2, #96	; 0x60
 80085ee:	5499      	strb	r1, [r3, r2]
				}

			}

			//left dir
			if (LEDdisplay->transitionStatus == LED_TRANSITION_DIR_LEFT) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2267      	movs	r2, #103	; 0x67
 80085f4:	5c9b      	ldrb	r3, [r3, r2]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d13d      	bne.n	8008676 <LEDmultiplexing+0x1c2>
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 80085fa:	230e      	movs	r3, #14
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	2200      	movs	r2, #0
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	e015      	b.n	8008630 <LEDmultiplexing+0x17c>
					LEDdisplay->digitBuffer[i] = LEDdisplay->digitBuffer[i + 1]; //digits
 8008604:	240e      	movs	r4, #14
 8008606:	193b      	adds	r3, r7, r4
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	193b      	adds	r3, r7, r4
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	2060      	movs	r0, #96	; 0x60
 8008614:	188a      	adds	r2, r1, r2
 8008616:	1812      	adds	r2, r2, r0
 8008618:	7810      	ldrb	r0, [r2, #0]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	2160      	movs	r1, #96	; 0x60
 800861e:	18d3      	adds	r3, r2, r3
 8008620:	185b      	adds	r3, r3, r1
 8008622:	1c02      	adds	r2, r0, #0
 8008624:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < LED_FIELDS - 1; i++) {
 8008626:	193b      	adds	r3, r7, r4
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	193b      	adds	r3, r7, r4
 800862c:	3201      	adds	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	230e      	movs	r3, #14
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d9e4      	bls.n	8008604 <LEDmultiplexing+0x150>
				}

				if (LEDdisplay->transitionStage < LED_TRANSITION_SEPARATOR_SIZE) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2266      	movs	r2, #102	; 0x66
 800863e:	5c9b      	ldrb	r3, [r3, r2]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d80c      	bhi.n	800865e <LEDmultiplexing+0x1aa>
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->transitionSeparator[LEDdisplay->transitionStage]; //fill with separator fields
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2266      	movs	r2, #102	; 0x66
 8008648:	5c9b      	ldrb	r3, [r3, r2]
 800864a:	0019      	movs	r1, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2268      	movs	r2, #104	; 0x68
 8008650:	185b      	adds	r3, r3, r1
 8008652:	189b      	adds	r3, r3, r2
 8008654:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2263      	movs	r2, #99	; 0x63
 800865a:	5499      	strb	r1, [r3, r2]
 800865c:	e00b      	b.n	8008676 <LEDmultiplexing+0x1c2>
				} else {
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2266      	movs	r2, #102	; 0x66
 8008662:	5c9b      	ldrb	r3, [r3, r2]
									- LED_TRANSITION_SEPARATOR_SIZE]; //fill with digits from transition buffer
 8008664:	3b04      	subs	r3, #4
							LEDdisplay->digitTransitionBuffer[LEDdisplay->transitionStage
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	216e      	movs	r1, #110	; 0x6e
 800866a:	18d3      	adds	r3, r2, r3
 800866c:	185b      	adds	r3, r3, r1
 800866e:	7819      	ldrb	r1, [r3, #0]
					LEDdisplay->digitBuffer[LED_FIELDS - 1] =
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2263      	movs	r2, #99	; 0x63
 8008674:	5499      	strb	r1, [r3, r2]
				}

			}

			LEDdisplay->transitionStage++;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2266      	movs	r2, #102	; 0x66
 800867a:	5c9b      	ldrb	r3, [r3, r2]
 800867c:	3301      	adds	r3, #1
 800867e:	b2d9      	uxtb	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2266      	movs	r2, #102	; 0x66
 8008684:	5499      	strb	r1, [r3, r2]
			if (LEDdisplay->transitionStage >= LED_TRANSITION_STAGES) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2266      	movs	r2, #102	; 0x66
 800868a:	5c9b      	ldrb	r3, [r3, r2]
 800868c:	2b07      	cmp	r3, #7
 800868e:	d907      	bls.n	80086a0 <LEDmultiplexing+0x1ec>
				LEDdisplay->transitionStage = 0;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2266      	movs	r2, #102	; 0x66
 8008694:	2100      	movs	r1, #0
 8008696:	5499      	strb	r1, [r3, r2]
				LEDdisplay->transitionStatus = LED_TRANSITION_DISABLED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2267      	movs	r2, #103	; 0x67
 800869c:	2100      	movs	r1, #0
 800869e:	5499      	strb	r1, [r3, r2]
			}
		}

	}
}
 80086a0:	46c0      	nop			; (mov r8, r8)
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b005      	add	sp, #20
 80086a6:	bd90      	pop	{r4, r7, pc}

080086a8 <_LEDtransition>:

void _LEDtransition(LEDdisplayTypeDef *LEDdisplay, uint8_t transition) {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	000a      	movs	r2, r1
 80086b2:	1cfb      	adds	r3, r7, #3
 80086b4:	701a      	strb	r2, [r3, #0]

	LEDdisplay->transitionStatus = transition;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	1cfa      	adds	r2, r7, #3
 80086ba:	2167      	movs	r1, #103	; 0x67
 80086bc:	7812      	ldrb	r2, [r2, #0]
 80086be:	545a      	strb	r2, [r3, r1]
	LEDdisplay->transitionStage = 0;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2266      	movs	r2, #102	; 0x66
 80086c4:	2100      	movs	r1, #0
 80086c6:	5499      	strb	r1, [r3, r2]

}
 80086c8:	46c0      	nop			; (mov r8, r8)
 80086ca:	46bd      	mov	sp, r7
 80086cc:	b002      	add	sp, #8
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <_LEDsegmentOn>:

static void _LEDsegmentOn(LEDdisplayTypeDef *LEDdisplay, uint8_t segment) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	000a      	movs	r2, r1
 80086da:	1cfb      	adds	r3, r7, #3
 80086dc:	701a      	strb	r2, [r3, #0]

	if (segment == LED_SEG_A)
 80086de:	1cfb      	adds	r3, r7, #3
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d108      	bne.n	80086f8 <_LEDsegmentOn+0x28>
		HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6858      	ldr	r0, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	0019      	movs	r1, r3
 80086f2:	f7fc fb7e 	bl	8004df2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
		LED_SEGMENT_ON);
	else if (segment == LED_SEG_DOT)
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
		LED_SEGMENT_ON);
}
 80086f6:	e059      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_B)
 80086f8:	1cfb      	adds	r3, r7, #3
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d108      	bne.n	8008712 <_LEDsegmentOn+0x42>
		HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68d8      	ldr	r0, [r3, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	891b      	ldrh	r3, [r3, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	0019      	movs	r1, r3
 800870c:	f7fc fb71 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8008710:	e04c      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_C)
 8008712:	1cfb      	adds	r3, r7, #3
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d108      	bne.n	800872c <_LEDsegmentOn+0x5c>
		HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6958      	ldr	r0, [r3, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	8a1b      	ldrh	r3, [r3, #16]
 8008722:	2200      	movs	r2, #0
 8008724:	0019      	movs	r1, r3
 8008726:	f7fc fb64 	bl	8004df2 <HAL_GPIO_WritePin>
}
 800872a:	e03f      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_D)
 800872c:	1cfb      	adds	r3, r7, #3
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b04      	cmp	r3, #4
 8008732:	d108      	bne.n	8008746 <_LEDsegmentOn+0x76>
		HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	69d8      	ldr	r0, [r3, #28]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	8b1b      	ldrh	r3, [r3, #24]
 800873c:	2200      	movs	r2, #0
 800873e:	0019      	movs	r1, r3
 8008740:	f7fc fb57 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8008744:	e032      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_E)
 8008746:	1cfb      	adds	r3, r7, #3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b05      	cmp	r3, #5
 800874c:	d108      	bne.n	8008760 <_LEDsegmentOn+0x90>
		HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin,
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	8c1b      	ldrh	r3, [r3, #32]
 8008756:	2200      	movs	r2, #0
 8008758:	0019      	movs	r1, r3
 800875a:	f7fc fb4a 	bl	8004df2 <HAL_GPIO_WritePin>
}
 800875e:	e025      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_F)
 8008760:	1cfb      	adds	r3, r7, #3
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b06      	cmp	r3, #6
 8008766:	d108      	bne.n	800877a <_LEDsegmentOn+0xaa>
		HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008770:	2200      	movs	r2, #0
 8008772:	0019      	movs	r1, r3
 8008774:	f7fc fb3d 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8008778:	e018      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_G)
 800877a:	1cfb      	adds	r3, r7, #3
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b07      	cmp	r3, #7
 8008780:	d108      	bne.n	8008794 <_LEDsegmentOn+0xc4>
		HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800878a:	2200      	movs	r2, #0
 800878c:	0019      	movs	r1, r3
 800878e:	f7fc fb30 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8008792:	e00b      	b.n	80087ac <_LEDsegmentOn+0xdc>
	else if (segment == LED_SEG_DOT)
 8008794:	1cfb      	adds	r3, r7, #3
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b08      	cmp	r3, #8
 800879a:	d107      	bne.n	80087ac <_LEDsegmentOn+0xdc>
		HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80087a4:	2200      	movs	r2, #0
 80087a6:	0019      	movs	r1, r3
 80087a8:	f7fc fb23 	bl	8004df2 <HAL_GPIO_WritePin>
}
 80087ac:	46c0      	nop			; (mov r8, r8)
 80087ae:	46bd      	mov	sp, r7
 80087b0:	b002      	add	sp, #8
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <_LEDfieldOn>:

static void _LEDfieldOn(LEDdisplayTypeDef *LEDdisplay, uint8_t field) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	000a      	movs	r2, r1
 80087be:	1cfb      	adds	r3, r7, #3
 80087c0:	701a      	strb	r2, [r3, #0]

#if LED_FIELDS >=1
	if (field == LED_FIELD_0)
 80087c2:	1cfb      	adds	r3, r7, #3
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <_LEDfieldOn+0x2a>
		HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin,
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2240      	movs	r2, #64	; 0x40
 80087d2:	5a9b      	ldrh	r3, [r3, r2]
 80087d4:	2200      	movs	r2, #0
 80087d6:	0019      	movs	r1, r3
 80087d8:	f7fc fb0b 	bl	8004df2 <HAL_GPIO_WritePin>
#if LED_FIELDS >=4
	else if (field == LED_FIELD_3)
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
		LED_FIELD_ON);
#endif
}
 80087dc:	e028      	b.n	8008830 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_1)
 80087de:	1cfb      	adds	r3, r7, #3
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d109      	bne.n	80087fa <_LEDfieldOn+0x46>
		HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin,
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2248      	movs	r2, #72	; 0x48
 80087ee:	5a9b      	ldrh	r3, [r3, r2]
 80087f0:	2200      	movs	r2, #0
 80087f2:	0019      	movs	r1, r3
 80087f4:	f7fc fafd 	bl	8004df2 <HAL_GPIO_WritePin>
}
 80087f8:	e01a      	b.n	8008830 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_2)
 80087fa:	1cfb      	adds	r3, r7, #3
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d109      	bne.n	8008816 <_LEDfieldOn+0x62>
		HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2250      	movs	r2, #80	; 0x50
 800880a:	5a9b      	ldrh	r3, [r3, r2]
 800880c:	2200      	movs	r2, #0
 800880e:	0019      	movs	r1, r3
 8008810:	f7fc faef 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8008814:	e00c      	b.n	8008830 <_LEDfieldOn+0x7c>
	else if (field == LED_FIELD_3)
 8008816:	1cfb      	adds	r3, r7, #3
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d108      	bne.n	8008830 <_LEDfieldOn+0x7c>
		HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2258      	movs	r2, #88	; 0x58
 8008826:	5a9b      	ldrh	r3, [r3, r2]
 8008828:	2200      	movs	r2, #0
 800882a:	0019      	movs	r1, r3
 800882c:	f7fc fae1 	bl	8004df2 <HAL_GPIO_WritePin>
}
 8008830:	46c0      	nop			; (mov r8, r8)
 8008832:	46bd      	mov	sp, r7
 8008834:	b002      	add	sp, #8
 8008836:	bd80      	pop	{r7, pc}

08008838 <_LEDallOff>:

static void _LEDallOff(LEDdisplayTypeDef *LEDdisplay) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]

#if LED_FIELDS >=1
	HAL_GPIO_WritePin(LEDdisplay->Field0Port, LEDdisplay->Field0Pin, LED_FIELD_OFF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2240      	movs	r2, #64	; 0x40
 8008848:	5a9b      	ldrh	r3, [r3, r2]
 800884a:	2201      	movs	r2, #1
 800884c:	0019      	movs	r1, r3
 800884e:	f7fc fad0 	bl	8004df2 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=2
	HAL_GPIO_WritePin(LEDdisplay->Field1Port, LEDdisplay->Field1Pin, LED_FIELD_OFF);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2248      	movs	r2, #72	; 0x48
 800885a:	5a9b      	ldrh	r3, [r3, r2]
 800885c:	2201      	movs	r2, #1
 800885e:	0019      	movs	r1, r3
 8008860:	f7fc fac7 	bl	8004df2 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=3
	HAL_GPIO_WritePin(LEDdisplay->Field2Port, LEDdisplay->Field2Pin, LED_FIELD_OFF);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2250      	movs	r2, #80	; 0x50
 800886c:	5a9b      	ldrh	r3, [r3, r2]
 800886e:	2201      	movs	r2, #1
 8008870:	0019      	movs	r1, r3
 8008872:	f7fc fabe 	bl	8004df2 <HAL_GPIO_WritePin>
#endif
#if LED_FIELDS >=4
	HAL_GPIO_WritePin(LEDdisplay->Field3Port, LEDdisplay->Field3Pin, LED_FIELD_OFF);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2258      	movs	r2, #88	; 0x58
 800887e:	5a9b      	ldrh	r3, [r3, r2]
 8008880:	2201      	movs	r2, #1
 8008882:	0019      	movs	r1, r3
 8008884:	f7fc fab5 	bl	8004df2 <HAL_GPIO_WritePin>
#endif

	HAL_GPIO_WritePin(LEDdisplay->SegAPort, LEDdisplay->SegAPin, LED_SEGMENT_OFF);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6858      	ldr	r0, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	2201      	movs	r2, #1
 8008892:	0019      	movs	r1, r3
 8008894:	f7fc faad 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegBPort, LEDdisplay->SegBPin, LED_SEGMENT_OFF);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68d8      	ldr	r0, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	891b      	ldrh	r3, [r3, #8]
 80088a0:	2201      	movs	r2, #1
 80088a2:	0019      	movs	r1, r3
 80088a4:	f7fc faa5 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegCPort, LEDdisplay->SegCPin, LED_SEGMENT_OFF);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6958      	ldr	r0, [r3, #20]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8a1b      	ldrh	r3, [r3, #16]
 80088b0:	2201      	movs	r2, #1
 80088b2:	0019      	movs	r1, r3
 80088b4:	f7fc fa9d 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDPort, LEDdisplay->SegDPin, LED_SEGMENT_OFF);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	69d8      	ldr	r0, [r3, #28]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8b1b      	ldrh	r3, [r3, #24]
 80088c0:	2201      	movs	r2, #1
 80088c2:	0019      	movs	r1, r3
 80088c4:	f7fc fa95 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegEPort, LEDdisplay->SegEPin, LED_SEGMENT_OFF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	8c1b      	ldrh	r3, [r3, #32]
 80088d0:	2201      	movs	r2, #1
 80088d2:	0019      	movs	r1, r3
 80088d4:	f7fc fa8d 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegFPort, LEDdisplay->SegFPin, LED_SEGMENT_OFF);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e0:	2201      	movs	r2, #1
 80088e2:	0019      	movs	r1, r3
 80088e4:	f7fc fa85 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegGPort, LEDdisplay->SegGPin, LED_SEGMENT_OFF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80088f0:	2201      	movs	r2, #1
 80088f2:	0019      	movs	r1, r3
 80088f4:	f7fc fa7d 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDdisplay->SegDOTPort, LEDdisplay->SegDOTPin,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008900:	2201      	movs	r2, #1
 8008902:	0019      	movs	r1, r3
 8008904:	f7fc fa75 	bl	8004df2 <HAL_GPIO_WritePin>
	LED_SEGMENT_OFF);

}
 8008908:	46c0      	nop			; (mov r8, r8)
 800890a:	46bd      	mov	sp, r7
 800890c:	b002      	add	sp, #8
 800890e:	bd80      	pop	{r7, pc}

08008910 <_LEDwriteCharacter>:

static void _LEDwriteCharacter(LEDdisplayTypeDef *LEDdisplay, uint8_t character) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	000a      	movs	r2, r1
 800891a:	1cfb      	adds	r3, r7, #3
 800891c:	701a      	strb	r2, [r3, #0]

	if (character >= 48 && character <= 57) {
 800891e:	1cfb      	adds	r3, r7, #3
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	2b2f      	cmp	r3, #47	; 0x2f
 8008924:	d800      	bhi.n	8008928 <_LEDwriteCharacter+0x18>
 8008926:	e10f      	b.n	8008b48 <_LEDwriteCharacter+0x238>
 8008928:	1cfb      	adds	r3, r7, #3
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b39      	cmp	r3, #57	; 0x39
 800892e:	d900      	bls.n	8008932 <_LEDwriteCharacter+0x22>
 8008930:	e10a      	b.n	8008b48 <_LEDwriteCharacter+0x238>
		switch (character) {
 8008932:	1cfb      	adds	r3, r7, #3
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	3b30      	subs	r3, #48	; 0x30
 8008938:	2b09      	cmp	r3, #9
 800893a:	d900      	bls.n	800893e <_LEDwriteCharacter+0x2e>
 800893c:	e2e7      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
 800893e:	009a      	lsls	r2, r3, #2
 8008940:	4bea      	ldr	r3, [pc, #936]	; (8008cec <_LEDwriteCharacter+0x3dc>)
 8008942:	18d3      	adds	r3, r2, r3
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	469f      	mov	pc, r3
		case '1':

			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2102      	movs	r1, #2
 800894c:	0018      	movs	r0, r3
 800894e:	f7ff febf 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2103      	movs	r1, #3
 8008956:	0018      	movs	r0, r3
 8008958:	f7ff feba 	bl	80086d0 <_LEDsegmentOn>
			break;
 800895c:	e0f3      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '2':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2101      	movs	r1, #1
 8008962:	0018      	movs	r0, r3
 8008964:	f7ff feb4 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2102      	movs	r1, #2
 800896c:	0018      	movs	r0, r3
 800896e:	f7ff feaf 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2107      	movs	r1, #7
 8008976:	0018      	movs	r0, r3
 8008978:	f7ff feaa 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2105      	movs	r1, #5
 8008980:	0018      	movs	r0, r3
 8008982:	f7ff fea5 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2104      	movs	r1, #4
 800898a:	0018      	movs	r0, r3
 800898c:	f7ff fea0 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008990:	e0d9      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '3':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2101      	movs	r1, #1
 8008996:	0018      	movs	r0, r3
 8008998:	f7ff fe9a 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2102      	movs	r1, #2
 80089a0:	0018      	movs	r0, r3
 80089a2:	f7ff fe95 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2107      	movs	r1, #7
 80089aa:	0018      	movs	r0, r3
 80089ac:	f7ff fe90 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2103      	movs	r1, #3
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7ff fe8b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2104      	movs	r1, #4
 80089be:	0018      	movs	r0, r3
 80089c0:	f7ff fe86 	bl	80086d0 <_LEDsegmentOn>
			break;
 80089c4:	e0bf      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '4':
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2106      	movs	r1, #6
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7ff fe80 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2107      	movs	r1, #7
 80089d4:	0018      	movs	r0, r3
 80089d6:	f7ff fe7b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2102      	movs	r1, #2
 80089de:	0018      	movs	r0, r3
 80089e0:	f7ff fe76 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2103      	movs	r1, #3
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7ff fe71 	bl	80086d0 <_LEDsegmentOn>
			break;
 80089ee:	e0aa      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '5':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2101      	movs	r1, #1
 80089f4:	0018      	movs	r0, r3
 80089f6:	f7ff fe6b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2106      	movs	r1, #6
 80089fe:	0018      	movs	r0, r3
 8008a00:	f7ff fe66 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2107      	movs	r1, #7
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f7ff fe61 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2103      	movs	r1, #3
 8008a12:	0018      	movs	r0, r3
 8008a14:	f7ff fe5c 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7ff fe57 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008a22:	e090      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '6':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2101      	movs	r1, #1
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f7ff fe51 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2103      	movs	r1, #3
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7ff fe4c 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff fe47 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2105      	movs	r1, #5
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7ff fe42 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2106      	movs	r1, #6
 8008a50:	0018      	movs	r0, r3
 8008a52:	f7ff fe3d 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2107      	movs	r1, #7
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f7ff fe38 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008a60:	e071      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '7':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2101      	movs	r1, #1
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7ff fe32 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2102      	movs	r1, #2
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff fe2d 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2103      	movs	r1, #3
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7ff fe28 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008a80:	e061      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '8':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2101      	movs	r1, #1
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7ff fe22 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2102      	movs	r1, #2
 8008a90:	0018      	movs	r0, r3
 8008a92:	f7ff fe1d 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2103      	movs	r1, #3
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f7ff fe18 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff fe13 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2105      	movs	r1, #5
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7ff fe0e 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2106      	movs	r1, #6
 8008ab8:	0018      	movs	r0, r3
 8008aba:	f7ff fe09 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2107      	movs	r1, #7
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f7ff fe04 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008ac8:	e03d      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '9':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2101      	movs	r1, #1
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7ff fdfe 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2102      	movs	r1, #2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fdf9 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2103      	movs	r1, #3
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7ff fdf4 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2104      	movs	r1, #4
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7ff fdef 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2106      	movs	r1, #6
 8008af6:	0018      	movs	r0, r3
 8008af8:	f7ff fdea 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2107      	movs	r1, #7
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7ff fde5 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008b06:	e01e      	b.n	8008b46 <_LEDwriteCharacter+0x236>
		case '0':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f7ff fddf 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2102      	movs	r1, #2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7ff fdda 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2103      	movs	r1, #3
 8008b20:	0018      	movs	r0, r3
 8008b22:	f7ff fdd5 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2104      	movs	r1, #4
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7ff fdd0 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2105      	movs	r1, #5
 8008b34:	0018      	movs	r0, r3
 8008b36:	f7ff fdcb 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2106      	movs	r1, #6
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f7ff fdc6 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008b44:	46c0      	nop			; (mov r8, r8)
		switch (character) {
 8008b46:	e1e2      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		}
	} else {
		switch (character) {
 8008b48:	1cfb      	adds	r3, r7, #3
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	3b2d      	subs	r3, #45	; 0x2d
 8008b4e:	2b47      	cmp	r3, #71	; 0x47
 8008b50:	d900      	bls.n	8008b54 <_LEDwriteCharacter+0x244>
 8008b52:	e1dc      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
 8008b54:	009a      	lsls	r2, r3, #2
 8008b56:	4b66      	ldr	r3, [pc, #408]	; (8008cf0 <_LEDwriteCharacter+0x3e0>)
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	469f      	mov	pc, r3
		case 'A':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2101      	movs	r1, #1
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7ff fdb4 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f7ff fdaf 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2103      	movs	r1, #3
 8008b76:	0018      	movs	r0, r3
 8008b78:	f7ff fdaa 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2105      	movs	r1, #5
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff fda5 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2106      	movs	r1, #6
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7ff fda0 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2107      	movs	r1, #7
 8008b94:	0018      	movs	r0, r3
 8008b96:	f7ff fd9b 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008b9a:	e1b8      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'b':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2103      	movs	r1, #3
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7ff fd95 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2104      	movs	r1, #4
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7ff fd90 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2105      	movs	r1, #5
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7ff fd8b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2106      	movs	r1, #6
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f7ff fd86 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2107      	movs	r1, #7
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f7ff fd81 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008bce:	e19e      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'C':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	f7ff fd7b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2104      	movs	r1, #4
 8008bde:	0018      	movs	r0, r3
 8008be0:	f7ff fd76 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2105      	movs	r1, #5
 8008be8:	0018      	movs	r0, r3
 8008bea:	f7ff fd71 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2106      	movs	r1, #6
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7ff fd6c 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008bf8:	e189      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'c':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2104      	movs	r1, #4
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f7ff fd66 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2105      	movs	r1, #5
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f7ff fd61 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2107      	movs	r1, #7
 8008c12:	0018      	movs	r0, r3
 8008c14:	f7ff fd5c 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008c18:	e179      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'D':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff fd56 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2102      	movs	r1, #2
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f7ff fd51 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2103      	movs	r1, #3
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff fd4c 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2104      	movs	r1, #4
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f7ff fd47 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2105      	movs	r1, #5
 8008c46:	0018      	movs	r0, r3
 8008c48:	f7ff fd42 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2106      	movs	r1, #6
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7ff fd3d 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008c56:	e15a      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'd':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2102      	movs	r1, #2
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f7ff fd37 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2103      	movs	r1, #3
 8008c66:	0018      	movs	r0, r3
 8008c68:	f7ff fd32 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2104      	movs	r1, #4
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff fd2d 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2105      	movs	r1, #5
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f7ff fd28 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2107      	movs	r1, #7
 8008c84:	0018      	movs	r0, r3
 8008c86:	f7ff fd23 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008c8a:	e140      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'E':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2101      	movs	r1, #1
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7ff fd1d 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2104      	movs	r1, #4
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7ff fd18 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2105      	movs	r1, #5
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7ff fd13 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2106      	movs	r1, #6
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f7ff fd0e 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2107      	movs	r1, #7
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7ff fd09 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008cbe:	e126      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'F':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f7ff fd03 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2105      	movs	r1, #5
 8008cce:	0018      	movs	r0, r3
 8008cd0:	f7ff fcfe 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2106      	movs	r1, #6
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f7ff fcf9 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2107      	movs	r1, #7
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f7ff fcf4 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008ce8:	e111      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	0800fb40 	.word	0x0800fb40
 8008cf0:	0800fb68 	.word	0x0800fb68
		case 'H':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2102      	movs	r1, #2
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff fce9 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2103      	movs	r1, #3
 8008d02:	0018      	movs	r0, r3
 8008d04:	f7ff fce4 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2105      	movs	r1, #5
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7ff fcdf 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2106      	movs	r1, #6
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7ff fcda 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2107      	movs	r1, #7
 8008d20:	0018      	movs	r0, r3
 8008d22:	f7ff fcd5 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008d26:	e0f2      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'h':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2103      	movs	r1, #3
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7ff fccf 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2105      	movs	r1, #5
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7ff fcca 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2106      	movs	r1, #6
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7ff fcc5 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2107      	movs	r1, #7
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f7ff fcc0 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008d50:	e0dd      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'J':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2102      	movs	r1, #2
 8008d56:	0018      	movs	r0, r3
 8008d58:	f7ff fcba 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2103      	movs	r1, #3
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7ff fcb5 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2104      	movs	r1, #4
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff fcb0 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008d70:	e0cd      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'L':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2104      	movs	r1, #4
 8008d76:	0018      	movs	r0, r3
 8008d78:	f7ff fcaa 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2105      	movs	r1, #5
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7ff fca5 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2106      	movs	r1, #6
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f7ff fca0 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008d90:	e0bd      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'O':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2101      	movs	r1, #1
 8008d96:	0018      	movs	r0, r3
 8008d98:	f7ff fc9a 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2102      	movs	r1, #2
 8008da0:	0018      	movs	r0, r3
 8008da2:	f7ff fc95 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2103      	movs	r1, #3
 8008daa:	0018      	movs	r0, r3
 8008dac:	f7ff fc90 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2104      	movs	r1, #4
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7ff fc8b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2105      	movs	r1, #5
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7ff fc86 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2106      	movs	r1, #6
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f7ff fc81 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008dce:	e09e      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 'o':
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7ff fc7b 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2104      	movs	r1, #4
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7ff fc76 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2105      	movs	r1, #5
 8008de8:	0018      	movs	r0, r3
 8008dea:	f7ff fc71 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2107      	movs	r1, #7
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7ff fc6c 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008df8:	e089      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'P':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f7ff fc66 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2102      	movs	r1, #2
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f7ff fc61 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2105      	movs	r1, #5
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7ff fc5c 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2106      	movs	r1, #6
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f7ff fc57 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2107      	movs	r1, #7
 8008e26:	0018      	movs	r0, r3
 8008e28:	f7ff fc52 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008e2c:	e06f      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'r':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2105      	movs	r1, #5
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7ff fc4c 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2107      	movs	r1, #7
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7ff fc47 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008e42:	e064      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'S':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2101      	movs	r1, #1
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f7ff fc41 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2106      	movs	r1, #6
 8008e52:	0018      	movs	r0, r3
 8008e54:	f7ff fc3c 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2107      	movs	r1, #7
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7ff fc37 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2103      	movs	r1, #3
 8008e66:	0018      	movs	r0, r3
 8008e68:	f7ff fc32 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2104      	movs	r1, #4
 8008e70:	0018      	movs	r0, r3
 8008e72:	f7ff fc2d 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008e76:	e04a      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case 't':
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2105      	movs	r1, #5
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f7ff fc27 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2106      	movs	r1, #6
 8008e86:	0018      	movs	r0, r3
 8008e88:	f7ff fc22 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2107      	movs	r1, #7
 8008e90:	0018      	movs	r0, r3
 8008e92:	f7ff fc1d 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008e96:	e03a      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case 'U':
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2102      	movs	r1, #2
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f7ff fc17 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_C);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2103      	movs	r1, #3
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7ff fc12 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2104      	movs	r1, #4
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7ff fc0d 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_E);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2105      	movs	r1, #5
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f7ff fc08 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2106      	movs	r1, #6
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f7ff fc03 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008eca:	e020      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case '-':
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2107      	movs	r1, #7
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f7ff fbfd 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008ed6:	e01a      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>
		case '_':
			_LEDsegmentOn(LEDdisplay, LED_SEG_D);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2104      	movs	r1, #4
 8008edc:	0018      	movs	r0, r3
 8008ede:	f7ff fbf7 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008ee2:	e014      	b.n	8008f0e <_LEDwriteCharacter+0x5fe>

		case '^':
			_LEDsegmentOn(LEDdisplay, LED_SEG_A);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7ff fbf1 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_B);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f7ff fbec 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_F);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2106      	movs	r1, #6
 8008efc:	0018      	movs	r0, r3
 8008efe:	f7ff fbe7 	bl	80086d0 <_LEDsegmentOn>
			_LEDsegmentOn(LEDdisplay, LED_SEG_G);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2107      	movs	r1, #7
 8008f06:	0018      	movs	r0, r3
 8008f08:	f7ff fbe2 	bl	80086d0 <_LEDsegmentOn>
			break;
 8008f0c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	46bd      	mov	sp, r7
 8008f12:	b002      	add	sp, #8
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	46c0      	nop			; (mov r8, r8)

08008f18 <LEDinit>:
		GPIO_TypeDef *SAPort, uint16_t SAPin, GPIO_TypeDef *SBPort,
		uint16_t SBPin, GPIO_TypeDef *SCPort, uint16_t SCPin,
		GPIO_TypeDef *SDPort, uint16_t SDPin, GPIO_TypeDef *SEPort,
		uint16_t SEPin, GPIO_TypeDef *SFPort, uint16_t SFPin,
		GPIO_TypeDef *SGPort, uint16_t SGPin, GPIO_TypeDef *SDPPort,
		uint16_t SDPPin) {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	1dbb      	adds	r3, r7, #6
 8008f26:	801a      	strh	r2, [r3, #0]

#if LED_FIELDS > 0
	LEDdisplay->Field0Port = D0Port;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	645a      	str	r2, [r3, #68]	; 0x44
	LEDdisplay->Field0Pin = D0Pin;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	1dba      	adds	r2, r7, #6
 8008f32:	2140      	movs	r1, #64	; 0x40
 8008f34:	8812      	ldrh	r2, [r2, #0]
 8008f36:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 1
	LEDdisplay->Field1Port = D1Port;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	64da      	str	r2, [r3, #76]	; 0x4c
	LEDdisplay->Field1Pin = D1Pin;
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	2318      	movs	r3, #24
 8008f42:	18fb      	adds	r3, r7, r3
 8008f44:	2148      	movs	r1, #72	; 0x48
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	5253      	strh	r3, [r2, r1]
#endif
#if LED_FIELDS > 2
	LEDdisplay->Field2Port = D2Port;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	655a      	str	r2, [r3, #84]	; 0x54
	LEDdisplay->Field2Pin = D2Pin;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2220      	movs	r2, #32
 8008f54:	18ba      	adds	r2, r7, r2
 8008f56:	2150      	movs	r1, #80	; 0x50
 8008f58:	8812      	ldrh	r2, [r2, #0]
 8008f5a:	525a      	strh	r2, [r3, r1]
#endif
#if LED_FIELDS > 3
	LEDdisplay->Field3Port = D3Port;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f60:	65da      	str	r2, [r3, #92]	; 0x5c
	LEDdisplay->Field3Pin = D3Pin;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2228      	movs	r2, #40	; 0x28
 8008f66:	18ba      	adds	r2, r7, r2
 8008f68:	2158      	movs	r1, #88	; 0x58
 8008f6a:	8812      	ldrh	r2, [r2, #0]
 8008f6c:	525a      	strh	r2, [r3, r1]
#endif
	LEDdisplay->SegAPort = SAPort;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f72:	605a      	str	r2, [r3, #4]
	LEDdisplay->SegAPin = SAPin;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2230      	movs	r2, #48	; 0x30
 8008f78:	18ba      	adds	r2, r7, r2
 8008f7a:	8812      	ldrh	r2, [r2, #0]
 8008f7c:	801a      	strh	r2, [r3, #0]
	LEDdisplay->SegBPort = SBPort;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f82:	60da      	str	r2, [r3, #12]
	LEDdisplay->SegBPin = SBPin;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2238      	movs	r2, #56	; 0x38
 8008f88:	18ba      	adds	r2, r7, r2
 8008f8a:	8812      	ldrh	r2, [r2, #0]
 8008f8c:	811a      	strh	r2, [r3, #8]
	LEDdisplay->SegCPort = SCPort;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f92:	615a      	str	r2, [r3, #20]
	LEDdisplay->SegCPin = SCPin;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2240      	movs	r2, #64	; 0x40
 8008f98:	18ba      	adds	r2, r7, r2
 8008f9a:	8812      	ldrh	r2, [r2, #0]
 8008f9c:	821a      	strh	r2, [r3, #16]
	LEDdisplay->SegDPort = SDPort;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fa2:	61da      	str	r2, [r3, #28]
	LEDdisplay->SegDPin = SDPin;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2248      	movs	r2, #72	; 0x48
 8008fa8:	18ba      	adds	r2, r7, r2
 8008faa:	8812      	ldrh	r2, [r2, #0]
 8008fac:	831a      	strh	r2, [r3, #24]
	LEDdisplay->SegEPort = SEPort;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24
	LEDdisplay->SegEPin = SEPin;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2250      	movs	r2, #80	; 0x50
 8008fb8:	18ba      	adds	r2, r7, r2
 8008fba:	8812      	ldrh	r2, [r2, #0]
 8008fbc:	841a      	strh	r2, [r3, #32]
	LEDdisplay->SegFPort = SFPort;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fc2:	62da      	str	r2, [r3, #44]	; 0x2c
	LEDdisplay->SegFPin = SFPin;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2240      	movs	r2, #64	; 0x40
 8008fc8:	2118      	movs	r1, #24
 8008fca:	468c      	mov	ip, r1
 8008fcc:	44bc      	add	ip, r7
 8008fce:	4462      	add	r2, ip
 8008fd0:	8812      	ldrh	r2, [r2, #0]
 8008fd2:	851a      	strh	r2, [r3, #40]	; 0x28
	LEDdisplay->SegGPort = SGPort;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fd8:	635a      	str	r2, [r3, #52]	; 0x34
	LEDdisplay->SegGPin = SGPin;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2248      	movs	r2, #72	; 0x48
 8008fde:	2118      	movs	r1, #24
 8008fe0:	468c      	mov	ip, r1
 8008fe2:	44bc      	add	ip, r7
 8008fe4:	4462      	add	r2, ip
 8008fe6:	8812      	ldrh	r2, [r2, #0]
 8008fe8:	861a      	strh	r2, [r3, #48]	; 0x30
	LEDdisplay->SegDOTPort = SDPPort;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fee:	63da      	str	r2, [r3, #60]	; 0x3c
	LEDdisplay->SegDOTPin = SDPPin;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2250      	movs	r2, #80	; 0x50
 8008ff4:	2118      	movs	r1, #24
 8008ff6:	468c      	mov	ip, r1
 8008ff8:	44bc      	add	ip, r7
 8008ffa:	4462      	add	r2, ip
 8008ffc:	8812      	ldrh	r2, [r2, #0]
 8008ffe:	871a      	strh	r2, [r3, #56]	; 0x38

	LEDclear(LEDdisplay);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	0018      	movs	r0, r3
 8009004:	f000 f82f 	bl	8009066 <LEDclear>
	LEDdisplay->actualField = LED_FIELD_0;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2265      	movs	r2, #101	; 0x65
 800900c:	2100      	movs	r1, #0
 800900e:	5499      	strb	r1, [r3, r2]
}
 8009010:	46c0      	nop			; (mov r8, r8)
 8009012:	46bd      	mov	sp, r7
 8009014:	b004      	add	sp, #16
 8009016:	bd80      	pop	{r7, pc}

08009018 <LEDseparator>:
 *
 * @param separator string
 *
 * @retval None
 */
void LEDseparator(LEDdisplayTypeDef *LEDdisplay, char* separator){
 8009018:	b590      	push	{r4, r7, lr}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8009022:	230f      	movs	r3, #15
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]
 800902a:	e012      	b.n	8009052 <LEDseparator+0x3a>
		LEDdisplay->transitionSeparator[i] = separator[i];
 800902c:	240f      	movs	r4, #15
 800902e:	193b      	adds	r3, r7, r4
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	18d2      	adds	r2, r2, r3
 8009036:	193b      	adds	r3, r7, r4
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	7810      	ldrb	r0, [r2, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	2168      	movs	r1, #104	; 0x68
 8009040:	18d3      	adds	r3, r2, r3
 8009042:	185b      	adds	r3, r3, r1
 8009044:	1c02      	adds	r2, r0, #0
 8009046:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= LED_TRANSITION_SEPARATOR_SIZE; i++){
 8009048:	193b      	adds	r3, r7, r4
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	193b      	adds	r3, r7, r4
 800904e:	3201      	adds	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
 8009052:	230f      	movs	r3, #15
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b04      	cmp	r3, #4
 800905a:	d9e7      	bls.n	800902c <LEDseparator+0x14>
	}
}
 800905c:	46c0      	nop			; (mov r8, r8)
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	46bd      	mov	sp, r7
 8009062:	b005      	add	sp, #20
 8009064:	bd90      	pop	{r4, r7, pc}

08009066 <LEDclear>:
 *
 * @param  Display handler
 *
 * @retval None
 */
void LEDclear(LEDdisplayTypeDef *LEDdisplay) {
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
	memset(LEDdisplay->digitBuffer, ' ', LED_FIELDS);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3360      	adds	r3, #96	; 0x60
 8009072:	2204      	movs	r2, #4
 8009074:	2120      	movs	r1, #32
 8009076:	0018      	movs	r0, r3
 8009078:	f005 fe57 	bl	800ed2a <memset>
	LEDdisplay->dotPosition = LED_DOT_DISABLED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2264      	movs	r2, #100	; 0x64
 8009080:	2104      	movs	r1, #4
 8009082:	5499      	strb	r1, [r3, r2]
	_LEDallOff(LEDdisplay);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	0018      	movs	r0, r3
 8009088:	f7ff fbd6 	bl	8008838 <_LEDallOff>
}
 800908c:	46c0      	nop			; (mov r8, r8)
 800908e:	46bd      	mov	sp, r7
 8009090:	b002      	add	sp, #8
 8009092:	bd80      	pop	{r7, pc}

08009094 <LEDstr>:
 * @param LED_TRANSITION_DIR_LEFT/RIGHT
 *
 * @retval None
 */
void LEDstr(LEDdisplayTypeDef *LEDdisplay, uint8_t offset, char *str,
		uint8_t transition) {
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	0008      	movs	r0, r1
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	0019      	movs	r1, r3
 80090a2:	230b      	movs	r3, #11
 80090a4:	18fb      	adds	r3, r7, r3
 80090a6:	1c02      	adds	r2, r0, #0
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	230a      	movs	r3, #10
 80090ac:	18fb      	adds	r3, r7, r3
 80090ae:	1c0a      	adds	r2, r1, #0
 80090b0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < sizeof(str); i++) {
 80090b2:	2317      	movs	r3, #23
 80090b4:	18fb      	adds	r3, r7, r3
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	e02f      	b.n	800911c <LEDstr+0x88>

		if (transition == LED_TRANSITION_DISABLED) {
 80090bc:	230a      	movs	r3, #10
 80090be:	18fb      	adds	r3, r7, r3
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10e      	bne.n	80090e4 <LEDstr+0x50>
			LEDdisplay->digitBuffer[i] = str[i];
 80090c6:	2117      	movs	r1, #23
 80090c8:	187b      	adds	r3, r7, r1
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	18d2      	adds	r2, r2, r3
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	7810      	ldrb	r0, [r2, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	2160      	movs	r1, #96	; 0x60
 80090da:	18d3      	adds	r3, r2, r3
 80090dc:	185b      	adds	r3, r3, r1
 80090de:	1c02      	adds	r2, r0, #0
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	e015      	b.n	8009110 <LEDstr+0x7c>
		} else {
			LEDdisplay->digitTransitionBuffer[i] = str[i];
 80090e4:	2117      	movs	r1, #23
 80090e6:	187b      	adds	r3, r7, r1
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	18d2      	adds	r2, r2, r3
 80090ee:	187b      	adds	r3, r7, r1
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	7810      	ldrb	r0, [r2, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	216e      	movs	r1, #110	; 0x6e
 80090f8:	18d3      	adds	r3, r2, r3
 80090fa:	185b      	adds	r3, r3, r1
 80090fc:	1c02      	adds	r2, r0, #0
 80090fe:	701a      	strb	r2, [r3, #0]
			_LEDtransition(LEDdisplay, transition);
 8009100:	230a      	movs	r3, #10
 8009102:	18fb      	adds	r3, r7, r3
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	0011      	movs	r1, r2
 800910a:	0018      	movs	r0, r3
 800910c:	f7ff facc 	bl	80086a8 <_LEDtransition>
	for (uint8_t i = 0; i < sizeof(str); i++) {
 8009110:	2117      	movs	r1, #23
 8009112:	187b      	adds	r3, r7, r1
 8009114:	781a      	ldrb	r2, [r3, #0]
 8009116:	187b      	adds	r3, r7, r1
 8009118:	3201      	adds	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
 800911c:	2317      	movs	r3, #23
 800911e:	18fb      	adds	r3, r7, r3
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d9ca      	bls.n	80090bc <LEDstr+0x28>
		}

	}
}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	46c0      	nop			; (mov r8, r8)
 800912a:	46bd      	mov	sp, r7
 800912c:	b006      	add	sp, #24
 800912e:	bd80      	pop	{r7, pc}

08009130 <LEDdot>:
 *
 * @param  Dot position- USE LED_DOT_DISABLED for turn off dot
 *
 * @retval None
 */
void LEDdot(LEDdisplayTypeDef *LEDdisplay, uint8_t dotNum/*, uint8_t active*/) {
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	000a      	movs	r2, r1
 800913a:	1cfb      	adds	r3, r7, #3
 800913c:	701a      	strb	r2, [r3, #0]

	LEDdisplay->dotPosition = dotNum;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	1cfa      	adds	r2, r7, #3
 8009142:	2164      	movs	r1, #100	; 0x64
 8009144:	7812      	ldrb	r2, [r2, #0]
 8009146:	545a      	strb	r2, [r3, r1]
//	if (active == DOT_ACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 1;
//	else if (active == DOT_INACTIVE)
//		LEDdisplay->dotBuffer[dotNum] = 0;
}
 8009148:	46c0      	nop			; (mov r8, r8)
 800914a:	46bd      	mov	sp, r7
 800914c:	b002      	add	sp, #8
 800914e:	bd80      	pop	{r7, pc}

08009150 <adcInit>:
 *
 * @param  adc handler
 *
 * @retval None
 */
void adcInit(ADC_HandleTypeDef *adcHandler){
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(adcHandler);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	0018      	movs	r0, r3
 800915c:	f7fb f9c8 	bl	80044f0 <HAL_ADCEx_Calibration_Start>
}
 8009160:	46c0      	nop			; (mov r8, r8)
 8009162:	46bd      	mov	sp, r7
 8009164:	b002      	add	sp, #8
 8009166:	bd80      	pop	{r7, pc}

08009168 <adcSetChannel>:
 *
 * @param adc channel- e.g. ADC_CHANNEL_0, ADC_CHANNEL_TEMPSENSOR
 *
 * @retval None
 */
void adcSetChannel(ADC_HandleTypeDef *adcHandler, uint32_t channel) {
 8009168:	b590      	push	{r4, r7, lr}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef chConf = { 0 };
 8009172:	240c      	movs	r4, #12
 8009174:	193b      	adds	r3, r7, r4
 8009176:	0018      	movs	r0, r3
 8009178:	230c      	movs	r3, #12
 800917a:	001a      	movs	r2, r3
 800917c:	2100      	movs	r1, #0
 800917e:	f005 fdd4 	bl	800ed2a <memset>
	chConf.Channel = channel;
 8009182:	193b      	adds	r3, r7, r4
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	601a      	str	r2, [r3, #0]
	chConf.Rank = ADC_REGULAR_RANK_1;
 8009188:	193b      	adds	r3, r7, r4
 800918a:	2200      	movs	r2, #0
 800918c:	605a      	str	r2, [r3, #4]
	chConf.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800918e:	193b      	adds	r3, r7, r4
 8009190:	2200      	movs	r2, #0
 8009192:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(adcHandler, &chConf) != HAL_OK) {
 8009194:	193a      	adds	r2, r7, r4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	0011      	movs	r1, r2
 800919a:	0018      	movs	r0, r3
 800919c:	f7fa fec8 	bl	8003f30 <HAL_ADC_ConfigChannel>
 80091a0:	1e03      	subs	r3, r0, #0
 80091a2:	d001      	beq.n	80091a8 <adcSetChannel+0x40>
		Error_Handler();
 80091a4:	f004 f900 	bl	800d3a8 <Error_Handler>
	}

}
 80091a8:	46c0      	nop			; (mov r8, r8)
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b007      	add	sp, #28
 80091ae:	bd90      	pop	{r4, r7, pc}

080091b0 <adcRead>:
 *
 * @param  adc handler
 *
 * @retval raw adc reading
 */
uint32_t adcRead(ADC_HandleTypeDef *adcHandler){
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adcHandler);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	0018      	movs	r0, r3
 80091bc:	f7fa fdca 	bl	8003d54 <HAL_ADC_Start>

	while(HAL_ADC_PollForConversion(adcHandler, 100) != HAL_OK);
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2164      	movs	r1, #100	; 0x64
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7fa fe12 	bl	8003df0 <HAL_ADC_PollForConversion>
 80091cc:	1e03      	subs	r3, r0, #0
 80091ce:	d1f8      	bne.n	80091c2 <adcRead+0x12>
	return HAL_ADC_GetValue(adcHandler);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	0018      	movs	r0, r3
 80091d4:	f7fa fea0 	bl	8003f18 <HAL_ADC_GetValue>
 80091d8:	0003      	movs	r3, r0


}
 80091da:	0018      	movs	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	b002      	add	sp, #8
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <adcTemperature>:
 *
 * @param  adc handler
 *
 * @retval temperature in Celcius degree
 */
uint32_t adcTemperature(uint32_t adcReading, uint32_t reference){
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	return __HAL_ADC_CALC_TEMPERATURE(reference, adcReading, ADC_RESOLUTION_12B);
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <adcTemperature+0x58>)
 80091f0:	881a      	ldrh	r2, [r3, #0]
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <adcTemperature+0x5c>)
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d01a      	beq.n	8009230 <adcTemperature+0x4c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	4353      	muls	r3, r2
 8009200:	4910      	ldr	r1, [pc, #64]	; (8009244 <adcTemperature+0x60>)
 8009202:	0018      	movs	r0, r3
 8009204:	f7f6 ff8a 	bl	800011c <__udivsi3>
 8009208:	0003      	movs	r3, r0
 800920a:	001a      	movs	r2, r3
 800920c:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <adcTemperature+0x5c>)
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2264      	movs	r2, #100	; 0x64
 8009214:	4353      	muls	r3, r2
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <adcTemperature+0x58>)
 8009218:	8812      	ldrh	r2, [r2, #0]
 800921a:	0011      	movs	r1, r2
 800921c:	4a08      	ldr	r2, [pc, #32]	; (8009240 <adcTemperature+0x5c>)
 800921e:	8812      	ldrh	r2, [r2, #0]
 8009220:	1a8a      	subs	r2, r1, r2
 8009222:	0011      	movs	r1, r2
 8009224:	0018      	movs	r0, r3
 8009226:	f7f7 f803 	bl	8000230 <__divsi3>
 800922a:	0003      	movs	r3, r0
 800922c:	331e      	adds	r3, #30
 800922e:	e000      	b.n	8009232 <adcTemperature+0x4e>
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <adcTemperature+0x64>)
}
 8009232:	0018      	movs	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	b002      	add	sp, #8
 8009238:	bd80      	pop	{r7, pc}
 800923a:	46c0      	nop			; (mov r8, r8)
 800923c:	1fff75ca 	.word	0x1fff75ca
 8009240:	1fff75a8 	.word	0x1fff75a8
 8009244:	00000bb8 	.word	0x00000bb8
 8009248:	00007fff 	.word	0x00007fff

0800924c <adcVoltage>:
 *
 * @param  adc handler
 *
 * @retval voltage in mV
 */
uint32_t adcVoltage(uint32_t adcReading){
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
//	return (3300*1000)/4095;
	return __HAL_ADC_CALC_VREFANALOG_VOLTAGE(adcReading, ADC_RESOLUTION_12B);
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <adcVoltage+0x24>)
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	001a      	movs	r2, r3
 800925a:	4b06      	ldr	r3, [pc, #24]	; (8009274 <adcVoltage+0x28>)
 800925c:	4353      	muls	r3, r2
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	0018      	movs	r0, r3
 8009262:	f7f6 ff5b 	bl	800011c <__udivsi3>
 8009266:	0003      	movs	r3, r0
}
 8009268:	0018      	movs	r0, r3
 800926a:	46bd      	mov	sp, r7
 800926c:	b002      	add	sp, #8
 800926e:	bd80      	pop	{r7, pc}
 8009270:	1fff75aa 	.word	0x1fff75aa
 8009274:	00000bb8 	.word	0x00000bb8

08009278 <backupInit>:
 *
 * @param  none
 *
 * @retval None
 */
void backupInit(void) {
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800927c:	f7fb fae6 	bl	800484c <HAL_FLASH_Unlock>

	eeStatus = EE_Format(EE_FORCED_ERASE);
 8009280:	2000      	movs	r0, #0
 8009282:	f001 fbab 	bl	800a9dc <EE_Format>
 8009286:	0003      	movs	r3, r0
 8009288:	b2da      	uxtb	r2, r3
 800928a:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <backupInit+0x6c>)
 800928c:	701a      	strb	r2, [r3, #0]
	eeStatus = EE_Init(EE_FORCED_ERASE);
 800928e:	2000      	movs	r0, #0
 8009290:	f000 fdfc 	bl	8009e8c <EE_Init>
 8009294:	0003      	movs	r3, r0
 8009296:	b2da      	uxtb	r2, r3
 8009298:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <backupInit+0x6c>)
 800929a:	701a      	strb	r2, [r3, #0]

	if (eeStatus != EE_OK) {
 800929c:	4b11      	ldr	r3, [pc, #68]	; (80092e4 <backupInit+0x6c>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d019      	beq.n	80092d8 <backupInit+0x60>
		eeStatus = EE_Format(EE_FORCED_ERASE);
 80092a4:	2000      	movs	r0, #0
 80092a6:	f001 fb99 	bl	800a9dc <EE_Format>
 80092aa:	0003      	movs	r3, r0
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <backupInit+0x6c>)
 80092b0:	701a      	strb	r2, [r3, #0]

		if (eeStatus != EE_OK) {
 80092b2:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <backupInit+0x6c>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <backupInit+0x46>
			Error_Handler();
 80092ba:	f004 f875 	bl	800d3a8 <Error_Handler>
		}

		eeStatus = EE_Init(EE_FORCED_ERASE);
 80092be:	2000      	movs	r0, #0
 80092c0:	f000 fde4 	bl	8009e8c <EE_Init>
 80092c4:	0003      	movs	r3, r0
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <backupInit+0x6c>)
 80092ca:	701a      	strb	r2, [r3, #0]
		if (eeStatus != EE_OK) {
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <backupInit+0x6c>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <backupInit+0x60>
			Error_Handler();
 80092d4:	f004 f868 	bl	800d3a8 <Error_Handler>
		}

	}

	HAL_FLASH_Lock();
 80092d8:	f7fb fadc 	bl	8004894 <HAL_FLASH_Lock>
}
 80092dc:	46c0      	nop			; (mov r8, r8)
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	2000016c 	.word	0x2000016c

080092e8 <backupRestore>:
 *
 * @param  RTC handler
 *
 * @retval None
 */
void backupRestore(RTCChronoTypeDef *chrono) {
 80092e8:	b590      	push	{r4, r7, lr}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]

	uint16_t virtualAddress[2];
	uint32_t timeBackup[2];

	virtualAddress[0] = BACKUP_VIRTUAL_ADRESS;
 80092f0:	2110      	movs	r1, #16
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	2201      	movs	r2, #1
 80092f6:	801a      	strh	r2, [r3, #0]
	virtualAddress[1] = BACKUP_VIRTUAL_ADRESS + 1;
 80092f8:	187b      	adds	r3, r7, r1
 80092fa:	2202      	movs	r2, #2
 80092fc:	805a      	strh	r2, [r3, #2]

	HAL_FLASH_Unlock();
 80092fe:	f7fb faa5 	bl	800484c <HAL_FLASH_Unlock>

	eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8009302:	2001      	movs	r0, #1
 8009304:	f000 fdc2 	bl	8009e8c <EE_Init>
 8009308:	0003      	movs	r3, r0
 800930a:	b2da      	uxtb	r2, r3
 800930c:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <backupRestore+0xd8>)
 800930e:	701a      	strb	r2, [r3, #0]
	if (eeStatus != EE_OK) {
 8009310:	4b2b      	ldr	r3, [pc, #172]	; (80093c0 <backupRestore+0xd8>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <backupRestore+0x34>
		Error_Handler();
 8009318:	f004 f846 	bl	800d3a8 <Error_Handler>
	}

	for (uint8_t i = 0; i < 2; i++) {
 800931c:	2317      	movs	r3, #23
 800931e:	18fb      	adds	r3, r7, r3
 8009320:	2200      	movs	r2, #0
 8009322:	701a      	strb	r2, [r3, #0]
 8009324:	e018      	b.n	8009358 <backupRestore+0x70>
		eeStatus = EE_ReadVariable32bits(virtualAddress[i], &timeBackup[i]);
 8009326:	2417      	movs	r4, #23
 8009328:	193b      	adds	r3, r7, r4
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	2310      	movs	r3, #16
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	0052      	lsls	r2, r2, #1
 8009332:	5ad0      	ldrh	r0, [r2, r3]
 8009334:	193b      	adds	r3, r7, r4
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2208      	movs	r2, #8
 800933a:	18ba      	adds	r2, r7, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	18d3      	adds	r3, r2, r3
 8009340:	0019      	movs	r1, r3
 8009342:	f001 fbf5 	bl	800ab30 <EE_ReadVariable32bits>
 8009346:	0003      	movs	r3, r0
 8009348:	b2da      	uxtb	r2, r3
 800934a:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <backupRestore+0xd8>)
 800934c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 800934e:	193b      	adds	r3, r7, r4
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	193b      	adds	r3, r7, r4
 8009354:	3201      	adds	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
 8009358:	2317      	movs	r3, #23
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d9e1      	bls.n	8009326 <backupRestore+0x3e>
		if (eeStatus == EE_NO_DATA) {

		}
	}

	HAL_FLASH_Lock();
 8009362:	f7fb fa97 	bl	8004894 <HAL_FLASH_Lock>

	chrono->actual.hour = timeBackup[0] >> 24;
 8009366:	2108      	movs	r1, #8
 8009368:	187b      	adds	r3, r7, r1
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	0e1b      	lsrs	r3, r3, #24
 800936e:	b25a      	sxtb	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	70da      	strb	r2, [r3, #3]
	chrono->actual.minute = timeBackup[0] >> 16;
 8009374:	187b      	adds	r3, r7, r1
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	0c1b      	lsrs	r3, r3, #16
 800937a:	b25a      	sxtb	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = timeBackup[0] >> 8;
 8009380:	187b      	adds	r3, r7, r1
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	0a1b      	lsrs	r3, r3, #8
 8009386:	b25a      	sxtb	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	715a      	strb	r2, [r3, #5]
	chrono->actual.day = timeBackup[1] >> 24;
 800938c:	187b      	adds	r3, r7, r1
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	0e1b      	lsrs	r3, r3, #24
 8009392:	b25a      	sxtb	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = timeBackup[1] >> 16;
 8009398:	187b      	adds	r3, r7, r1
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	b25a      	sxtb	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = timeBackup[1] >> 8;
 80093a4:	187b      	adds	r3, r7, r1
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	0a1b      	lsrs	r3, r3, #8
 80093aa:	b25a      	sxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	701a      	strb	r2, [r3, #0]

	rtcSetTime(chrono);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	0018      	movs	r0, r3
 80093b4:	f004 ff08 	bl	800e1c8 <rtcSetTime>
}
 80093b8:	46c0      	nop			; (mov r8, r8)
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b007      	add	sp, #28
 80093be:	bd90      	pop	{r4, r7, pc}
 80093c0:	2000016c 	.word	0x2000016c

080093c4 <backupWrite>:
 *
 * @param  RTC handler
 *
 * @retval None
 */
void backupWrite(RTCChronoTypeDef *chrono) {
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

	uint16_t virtualAddress[2];
	uint32_t timeBackup[2];

	virtualAddress[0] = BACKUP_VIRTUAL_ADRESS;
 80093cc:	2110      	movs	r1, #16
 80093ce:	187b      	adds	r3, r7, r1
 80093d0:	2201      	movs	r2, #1
 80093d2:	801a      	strh	r2, [r3, #0]
	virtualAddress[1] = BACKUP_VIRTUAL_ADRESS + 1;
 80093d4:	187b      	adds	r3, r7, r1
 80093d6:	2202      	movs	r2, #2
 80093d8:	805a      	strh	r2, [r3, #2]

	timeBackup[0] = ((uint32_t) chrono->actual.hour << 24)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	78db      	ldrb	r3, [r3, #3]
 80093de:	b25b      	sxtb	r3, r3
 80093e0:	061a      	lsls	r2, r3, #24
			| ((uint32_t) chrono->actual.minute << 16)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	791b      	ldrb	r3, [r3, #4]
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	431a      	orrs	r2, r3
			| ((uint32_t) chrono->actual.second << 8);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	795b      	ldrb	r3, [r3, #5]
 80093f0:	b25b      	sxtb	r3, r3
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	431a      	orrs	r2, r3
	timeBackup[0] = ((uint32_t) chrono->actual.hour << 24)
 80093f6:	2108      	movs	r1, #8
 80093f8:	187b      	adds	r3, r7, r1
 80093fa:	601a      	str	r2, [r3, #0]

	timeBackup[1] = ((uint32_t) chrono->actual.day << 24)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	789b      	ldrb	r3, [r3, #2]
 8009400:	b25b      	sxtb	r3, r3
 8009402:	061a      	lsls	r2, r3, #24
			| ((uint32_t) chrono->actual.month << 16)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	785b      	ldrb	r3, [r3, #1]
 8009408:	b25b      	sxtb	r3, r3
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	431a      	orrs	r2, r3
			| ((uint32_t) chrono->actual.year << 8);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b25b      	sxtb	r3, r3
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	431a      	orrs	r2, r3
	timeBackup[1] = ((uint32_t) chrono->actual.day << 24)
 8009418:	187b      	adds	r3, r7, r1
 800941a:	605a      	str	r2, [r3, #4]

	HAL_FLASH_Unlock();
 800941c:	f7fb fa16 	bl	800484c <HAL_FLASH_Unlock>

	eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8009420:	2001      	movs	r0, #1
 8009422:	f000 fd33 	bl	8009e8c <EE_Init>
 8009426:	0003      	movs	r3, r0
 8009428:	b2da      	uxtb	r2, r3
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <backupWrite+0xd8>)
 800942c:	701a      	strb	r2, [r3, #0]
	if (eeStatus != EE_OK) {
 800942e:	4b1b      	ldr	r3, [pc, #108]	; (800949c <backupWrite+0xd8>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <backupWrite+0x76>
		Error_Handler();
 8009436:	f003 ffb7 	bl	800d3a8 <Error_Handler>
	}

	for (uint8_t i = 0; i < 2; i++) {
 800943a:	2317      	movs	r3, #23
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	e01f      	b.n	8009484 <backupWrite+0xc0>

		eeStatus = EE_WriteVariable32bits(virtualAddress[i], timeBackup[i]);
 8009444:	2117      	movs	r1, #23
 8009446:	187b      	adds	r3, r7, r1
 8009448:	781a      	ldrb	r2, [r3, #0]
 800944a:	2310      	movs	r3, #16
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	0052      	lsls	r2, r2, #1
 8009450:	5ad0      	ldrh	r0, [r2, r3]
 8009452:	187b      	adds	r3, r7, r1
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	2308      	movs	r3, #8
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	0092      	lsls	r2, r2, #2
 800945c:	58d3      	ldr	r3, [r2, r3]
 800945e:	0019      	movs	r1, r3
 8009460:	f001 fb94 	bl	800ab8c <EE_WriteVariable32bits>
 8009464:	0003      	movs	r3, r0
 8009466:	b2da      	uxtb	r2, r3
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <backupWrite+0xd8>)
 800946a:	701a      	strb	r2, [r3, #0]

		if (eeStatus != EE_OK) {
 800946c:	4b0b      	ldr	r3, [pc, #44]	; (800949c <backupWrite+0xd8>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <backupWrite+0xb4>
			Error_Handler();
 8009474:	f003 ff98 	bl	800d3a8 <Error_Handler>
	for (uint8_t i = 0; i < 2; i++) {
 8009478:	2117      	movs	r1, #23
 800947a:	187b      	adds	r3, r7, r1
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	187b      	adds	r3, r7, r1
 8009480:	3201      	adds	r2, #1
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	2317      	movs	r3, #23
 8009486:	18fb      	adds	r3, r7, r3
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d9da      	bls.n	8009444 <backupWrite+0x80>
		}
	}

	HAL_FLASH_Lock();
 800948e:	f7fb fa01 	bl	8004894 <HAL_FLASH_Lock>
}
 8009492:	46c0      	nop			; (mov r8, r8)
 8009494:	46bd      	mov	sp, r7
 8009496:	b006      	add	sp, #24
 8009498:	bd80      	pop	{r7, pc}
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	2000016c 	.word	0x2000016c

080094a0 <bme280Init>:
 *
 * @param  i2C handler
 *
 * @retval None
 */
void bme280Init(bme280TypeDef *bme280, I2C_HandleTypeDef *I2Chandler) {
 80094a0:	b590      	push	{r4, r7, lr}
 80094a2:	b091      	sub	sp, #68	; 0x44
 80094a4:	af04      	add	r7, sp, #16
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]

	bme280->I2Chandler = I2Chandler;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	645a      	str	r2, [r3, #68]	; 0x44

	bme280->i2cTimeout = BME280_I2C_TIMEOUT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2264      	movs	r2, #100	; 0x64
 80094b4:	76da      	strb	r2, [r3, #27]
//	bme280->ctrlHum = 0x01; //oversampling for humidity disabled
////	bme280->ctrlMeas = 0x24; //oversampling for temp, pressure disabled
//	bme280->ctrlMeas = 0x34; //pressure oversampling x16

//set oversampling
	bme280->ctrlMeas = (BME280_OVERSAMPLING_TEM << 5)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	22b4      	movs	r2, #180	; 0xb4
 80094ba:	761a      	strb	r2, [r3, #24]
			| (BME280_OVERSAMPLING_PRE << 2);
	bme280->ctrlHum = BME280_OVERSAMPLING_HUM;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2205      	movs	r2, #5
 80094c0:	765a      	strb	r2, [r3, #25]
	bme280->config = BME280_IIR_FILTER << 2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2208      	movs	r2, #8
 80094c6:	769a      	strb	r2, [r3, #26]
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								READING CALIBRATION DATA

	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_T, 6, bme280->i2cTimeout) != HAL_OK) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7edb      	ldrb	r3, [r3, #27]
	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	2306      	movs	r3, #6
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	2428      	movs	r4, #40	; 0x28
 80094d8:	193b      	adds	r3, r7, r4
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	2301      	movs	r3, #1
 80094de:	2288      	movs	r2, #136	; 0x88
 80094e0:	21ee      	movs	r1, #238	; 0xee
 80094e2:	f7fb fe91 	bl	8005208 <HAL_I2C_Mem_Read>

	}
	bme280->dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 80094e6:	0021      	movs	r1, r4
 80094e8:	187b      	adds	r3, r7, r1
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	b21a      	sxth	r2, r3
 80094ee:	187b      	adds	r3, r7, r1
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	b21b      	sxth	r3, r3
 80094f6:	4313      	orrs	r3, r2
 80094f8:	b21b      	sxth	r3, r3
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	839a      	strh	r2, [r3, #28]
	bme280->dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 8009500:	187b      	adds	r3, r7, r1
 8009502:	789b      	ldrb	r3, [r3, #2]
 8009504:	b21a      	sxth	r2, r3
 8009506:	187b      	adds	r3, r7, r1
 8009508:	78db      	ldrb	r3, [r3, #3]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	b21b      	sxth	r3, r3
 800950e:	4313      	orrs	r3, r2
 8009510:	b21a      	sxth	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	83da      	strh	r2, [r3, #30]
	bme280->dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 8009516:	187b      	adds	r3, r7, r1
 8009518:	791b      	ldrb	r3, [r3, #4]
 800951a:	b21a      	sxth	r2, r3
 800951c:	187b      	adds	r3, r7, r1
 800951e:	791b      	ldrb	r3, [r3, #4]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	b21b      	sxth	r3, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	b21a      	sxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	841a      	strh	r2, [r3, #32]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_P, 18, bme280->i2cTimeout);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 8009534:	9302      	str	r3, [sp, #8]
 8009536:	2312      	movs	r3, #18
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	2414      	movs	r4, #20
 800953c:	193b      	adds	r3, r7, r4
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	2301      	movs	r3, #1
 8009542:	228e      	movs	r2, #142	; 0x8e
 8009544:	21ee      	movs	r1, #238	; 0xee
 8009546:	f7fb fe5f 	bl	8005208 <HAL_I2C_Mem_Read>
	bme280->dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 800954a:	0021      	movs	r1, r4
 800954c:	187b      	adds	r3, r7, r1
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	b21a      	sxth	r2, r3
 8009552:	187b      	adds	r3, r7, r1
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	b21b      	sxth	r3, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	b21b      	sxth	r3, r3
 800955e:	b29a      	uxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280->dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 8009564:	187b      	adds	r3, r7, r1
 8009566:	789b      	ldrb	r3, [r3, #2]
 8009568:	b21a      	sxth	r2, r3
 800956a:	187b      	adds	r3, r7, r1
 800956c:	78db      	ldrb	r3, [r3, #3]
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	b21b      	sxth	r3, r3
 8009572:	4313      	orrs	r3, r2
 8009574:	b21a      	sxth	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280->dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800957a:	187b      	adds	r3, r7, r1
 800957c:	791b      	ldrb	r3, [r3, #4]
 800957e:	b21a      	sxth	r2, r3
 8009580:	187b      	adds	r3, r7, r1
 8009582:	795b      	ldrb	r3, [r3, #5]
 8009584:	021b      	lsls	r3, r3, #8
 8009586:	b21b      	sxth	r3, r3
 8009588:	4313      	orrs	r3, r2
 800958a:	b21a      	sxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280->dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 8009590:	187b      	adds	r3, r7, r1
 8009592:	799b      	ldrb	r3, [r3, #6]
 8009594:	b21a      	sxth	r2, r3
 8009596:	187b      	adds	r3, r7, r1
 8009598:	79db      	ldrb	r3, [r3, #7]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	b21b      	sxth	r3, r3
 800959e:	4313      	orrs	r3, r2
 80095a0:	b21a      	sxth	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280->dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 80095a6:	187b      	adds	r3, r7, r1
 80095a8:	7a1b      	ldrb	r3, [r3, #8]
 80095aa:	b21a      	sxth	r2, r3
 80095ac:	187b      	adds	r3, r7, r1
 80095ae:	7a5b      	ldrb	r3, [r3, #9]
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	b21b      	sxth	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b21a      	sxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280->dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 80095bc:	187b      	adds	r3, r7, r1
 80095be:	7a9b      	ldrb	r3, [r3, #10]
 80095c0:	b21a      	sxth	r2, r3
 80095c2:	187b      	adds	r3, r7, r1
 80095c4:	7adb      	ldrb	r3, [r3, #11]
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	b21b      	sxth	r3, r3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	b21a      	sxth	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280->dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 80095d2:	187b      	adds	r3, r7, r1
 80095d4:	7b1b      	ldrb	r3, [r3, #12]
 80095d6:	b21a      	sxth	r2, r3
 80095d8:	187b      	adds	r3, r7, r1
 80095da:	7b5b      	ldrb	r3, [r3, #13]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	b21b      	sxth	r3, r3
 80095e0:	4313      	orrs	r3, r2
 80095e2:	b21a      	sxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	85da      	strh	r2, [r3, #46]	; 0x2e
	bme280->dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 80095e8:	187b      	adds	r3, r7, r1
 80095ea:	7b9b      	ldrb	r3, [r3, #14]
 80095ec:	b21a      	sxth	r2, r3
 80095ee:	187b      	adds	r3, r7, r1
 80095f0:	7bdb      	ldrb	r3, [r3, #15]
 80095f2:	021b      	lsls	r3, r3, #8
 80095f4:	b21b      	sxth	r3, r3
 80095f6:	4313      	orrs	r3, r2
 80095f8:	b21a      	sxth	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	861a      	strh	r2, [r3, #48]	; 0x30
	bme280->dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 80095fe:	187b      	adds	r3, r7, r1
 8009600:	7c1b      	ldrb	r3, [r3, #16]
 8009602:	b21a      	sxth	r2, r3
 8009604:	187b      	adds	r3, r7, r1
 8009606:	7c5b      	ldrb	r3, [r3, #17]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	b21b      	sxth	r3, r3
 800960c:	4313      	orrs	r3, r2
 800960e:	b21a      	sxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	865a      	strh	r2, [r3, #50]	; 0x32

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c58      	ldr	r0, [r3, #68]	; 0x44
			&dig_H_1, 1, bme280->i2cTimeout);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 800961c:	9302      	str	r3, [sp, #8]
 800961e:	2301      	movs	r3, #1
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	2413      	movs	r4, #19
 8009624:	193b      	adds	r3, r7, r4
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2301      	movs	r3, #1
 800962a:	22a1      	movs	r2, #161	; 0xa1
 800962c:	21ee      	movs	r1, #238	; 0xee
 800962e:	f7fb fdeb 	bl	8005208 <HAL_I2C_Mem_Read>
	bme280->dig_H1 = ((unsigned char) dig_H_1);
 8009632:	193b      	adds	r3, r7, r4
 8009634:	7819      	ldrb	r1, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2234      	movs	r2, #52	; 0x34
 800963a:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6c58      	ldr	r0, [r3, #68]	; 0x44
			dig_H_2_6, 7, bme280->i2cTimeout);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	2307      	movs	r3, #7
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	240c      	movs	r4, #12
 800964c:	193b      	adds	r3, r7, r4
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2301      	movs	r3, #1
 8009652:	22e1      	movs	r2, #225	; 0xe1
 8009654:	21ee      	movs	r1, #238	; 0xee
 8009656:	f7fb fdd7 	bl	8005208 <HAL_I2C_Mem_Read>
	bme280->dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 800965a:	0020      	movs	r0, r4
 800965c:	183b      	adds	r3, r7, r0
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	b21a      	sxth	r2, r3
 8009662:	183b      	adds	r3, r7, r0
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	b21b      	sxth	r3, r3
 800966a:	4313      	orrs	r3, r2
 800966c:	b21a      	sxth	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	86da      	strh	r2, [r3, #54]	; 0x36
	bme280->dig_H3 = ((unsigned char) dig_H_2_6[2]);
 8009672:	183b      	adds	r3, r7, r0
 8009674:	7899      	ldrb	r1, [r3, #2]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2238      	movs	r2, #56	; 0x38
 800967a:	5499      	strb	r1, [r3, r2]

	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 800967c:	183b      	adds	r3, r7, r0
 800967e:	78db      	ldrb	r3, [r3, #3]
 8009680:	011b      	lsls	r3, r3, #4
			| (((int16_t) dig_H_2_6[4]) & 0x0f));
 8009682:	b21a      	sxth	r2, r3
 8009684:	183b      	adds	r3, r7, r0
 8009686:	791b      	ldrb	r3, [r3, #4]
 8009688:	b21b      	sxth	r3, r3
 800968a:	210f      	movs	r1, #15
 800968c:	400b      	ands	r3, r1
 800968e:	b21b      	sxth	r3, r3
 8009690:	4313      	orrs	r3, r2
 8009692:	b21a      	sxth	r2, r3
	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	875a      	strh	r2, [r3, #58]	; 0x3a
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 8009698:	183b      	adds	r3, r7, r0
 800969a:	791b      	ldrb	r3, [r3, #4]
			| ((int16_t) dig_H_2_6[5]) << 4);
 800969c:	091b      	lsrs	r3, r3, #4
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	b21a      	sxth	r2, r3
 80096a2:	183b      	adds	r3, r7, r0
 80096a4:	795b      	ldrb	r3, [r3, #5]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	b21b      	sxth	r3, r3
 80096aa:	4313      	orrs	r3, r2
 80096ac:	b21a      	sxth	r2, r3
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	879a      	strh	r2, [r3, #60]	; 0x3c
	bme280->dig_H6 = ((unsigned char) dig_H_2_6[6]);
 80096b2:	183b      	adds	r3, r7, r0
 80096b4:	7999      	ldrb	r1, [r3, #6]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	223e      	movs	r2, #62	; 0x3e
 80096ba:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3318      	adds	r3, #24
			&bme280->ctrlMeas, 1, bme280->i2cTimeout); //write temp and press oversampling
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 80096c8:	9202      	str	r2, [sp, #8]
 80096ca:	2201      	movs	r2, #1
 80096cc:	9201      	str	r2, [sp, #4]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2301      	movs	r3, #1
 80096d2:	22f4      	movs	r2, #244	; 0xf4
 80096d4:	21ee      	movs	r1, #238	; 0xee
 80096d6:	f7fb fc69 	bl	8004fac <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3319      	adds	r3, #25
			&bme280->ctrlHum, 1, bme280->i2cTimeout); //write humidity oversampling
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 80096e6:	9202      	str	r2, [sp, #8]
 80096e8:	2201      	movs	r2, #1
 80096ea:	9201      	str	r2, [sp, #4]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	2301      	movs	r3, #1
 80096f0:	22f2      	movs	r2, #242	; 0xf2
 80096f2:	21ee      	movs	r1, #238	; 0xee
 80096f4:	f7fb fc5a 	bl	8004fac <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	331a      	adds	r3, #26
				&bme280->config, 1, bme280->i2cTimeout); //write iir filter config
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	7ed2      	ldrb	r2, [r2, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 8009704:	9202      	str	r2, [sp, #8]
 8009706:	2201      	movs	r2, #1
 8009708:	9201      	str	r2, [sp, #4]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	2301      	movs	r3, #1
 800970e:	22f5      	movs	r2, #245	; 0xf5
 8009710:	21ee      	movs	r1, #238	; 0xee
 8009712:	f7fb fc4b 	bl	8004fac <HAL_I2C_Mem_Write>


}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	46bd      	mov	sp, r7
 800971a:	b00d      	add	sp, #52	; 0x34
 800971c:	bd90      	pop	{r4, r7, pc}
	...

08009720 <bme280Read>:
 *
 * @param  BME280 handler
 *
 * @retval None
 */
void bme280Read(bme280TypeDef *bme280) {
 8009720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009722:	b08d      	sub	sp, #52	; 0x34
 8009724:	af04      	add	r7, sp, #16
 8009726:	6078      	str	r0, [r7, #4]

	uint8_t readings[8] = {0};
 8009728:	230c      	movs	r3, #12
 800972a:	18fb      	adds	r3, r7, r3
 800972c:	2200      	movs	r2, #0
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	2200      	movs	r2, #0
 8009732:	605a      	str	r2, [r3, #4]

	//adc data
	int32_t temperatureADC = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	61fb      	str	r3, [r7, #28]
	int32_t pressureADC = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	61bb      	str	r3, [r7, #24]
	int32_t humidityADC = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]

	//start measure by setting las bit of ctrlMeas register
	uint8_t startConversion = (bme280->ctrlMeas) + 1;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7e1b      	ldrb	r3, [r3, #24]
 8009744:	3301      	adds	r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	210b      	movs	r1, #11
 800974a:	187b      	adds	r3, r7, r1
 800974c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c58      	ldr	r0, [r3, #68]	; 0x44
			&startConversion, 1, bme280->i2cTimeout);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 8009756:	9302      	str	r3, [sp, #8]
 8009758:	2301      	movs	r3, #1
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	187b      	adds	r3, r7, r1
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2301      	movs	r3, #1
 8009762:	22f4      	movs	r2, #244	; 0xf4
 8009764:	21ee      	movs	r1, #238	; 0xee
 8009766:	f7fb fc21 	bl	8004fac <HAL_I2C_Mem_Write>

	//wait for measurement
	uint8_t status = 0;
 800976a:	230a      	movs	r3, #10
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
	do {
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c58      	ldr	r0, [r3, #68]	; 0x44
				&status, 1, bme280->i2cTimeout);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	7edb      	ldrb	r3, [r3, #27]
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 800977a:	9302      	str	r3, [sp, #8]
 800977c:	2301      	movs	r3, #1
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	260a      	movs	r6, #10
 8009782:	19bb      	adds	r3, r7, r6
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	2301      	movs	r3, #1
 8009788:	22f3      	movs	r2, #243	; 0xf3
 800978a:	21ee      	movs	r1, #238	; 0xee
 800978c:	f7fb fd3c 	bl	8005208 <HAL_I2C_Mem_Read>
	} while (((status >> 3) & 1) == 1);
 8009790:	19bb      	adds	r3, r7, r6
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	b2db      	uxtb	r3, r3
 8009798:	001a      	movs	r2, r3
 800979a:	2301      	movs	r3, #1
 800979c:	4013      	ands	r3, r2
 800979e:	d1e8      	bne.n	8009772 <bme280Read+0x52>

	//read output registers
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6c58      	ldr	r0, [r3, #68]	; 0x44
			readings, 8, bme280->i2cTimeout);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7edb      	ldrb	r3, [r3, #27]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 80097a8:	9302      	str	r3, [sp, #8]
 80097aa:	2308      	movs	r3, #8
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	260c      	movs	r6, #12
 80097b0:	19bb      	adds	r3, r7, r6
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	2301      	movs	r3, #1
 80097b6:	22f7      	movs	r2, #247	; 0xf7
 80097b8:	21ee      	movs	r1, #238	; 0xee
 80097ba:	f7fb fd25 	bl	8005208 <HAL_I2C_Mem_Read>


	//TEMPERATURE
	temperatureADC = ((((int32_t) readings[3] << 12)
 80097be:	19bb      	adds	r3, r7, r6
 80097c0:	78db      	ldrb	r3, [r3, #3]
 80097c2:	031a      	lsls	r2, r3, #12
			| ((int32_t) readings[4] << 4) | ((int32_t) readings[5] >> 4)));
 80097c4:	19bb      	adds	r3, r7, r6
 80097c6:	791b      	ldrb	r3, [r3, #4]
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	4313      	orrs	r3, r2
 80097cc:	19ba      	adds	r2, r7, r6
 80097ce:	7952      	ldrb	r2, [r2, #5]
 80097d0:	0912      	lsrs	r2, r2, #4
 80097d2:	b2d2      	uxtb	r2, r2
	temperatureADC = ((((int32_t) readings[3] << 12)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	61fb      	str	r3, [r7, #28]

	bme280->temperatureValue = (_BME280_compensate_T_int32(bme280,
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	0011      	movs	r1, r2
 80097de:	0018      	movs	r0, r3
 80097e0:	f000 f8a0 	bl	8009924 <_BME280_compensate_T_int32>
 80097e4:	0002      	movs	r2, r0
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
			temperatureADC));

	//PRESSURE
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 80097ea:	19bb      	adds	r3, r7, r6
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	031a      	lsls	r2, r3, #12
 80097f0:	19bb      	adds	r3, r7, r6
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	4313      	orrs	r3, r2
			| ((int32_t) readings[2] >> 4)));
 80097f8:	19ba      	adds	r2, r7, r6
 80097fa:	7892      	ldrb	r2, [r2, #2]
 80097fc:	0912      	lsrs	r2, r2, #4
 80097fe:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 8009800:	4313      	orrs	r3, r2
 8009802:	61bb      	str	r3, [r7, #24]

	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	0011      	movs	r1, r2
 800980a:	0018      	movs	r0, r3
 800980c:	f000 f8c0 	bl	8009990 <_BME280_compensate_P_int64>
 8009810:	0003      	movs	r3, r0
			/ 256;
 8009812:	0a1a      	lsrs	r2, r3, #8
	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	609a      	str	r2, [r3, #8]

	//HUMIDITY
	humidityADC = (((int32_t) readings[6] << 8) | (int32_t) readings[7]);
 8009818:	19bb      	adds	r3, r7, r6
 800981a:	799b      	ldrb	r3, [r3, #6]
 800981c:	021b      	lsls	r3, r3, #8
 800981e:	19ba      	adds	r2, r7, r6
 8009820:	79d2      	ldrb	r2, [r2, #7]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]

	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	0011      	movs	r1, r2
 800982c:	0018      	movs	r0, r3
 800982e:	f000 fa5f 	bl	8009cf0 <_BME280_compensate_H_int32>
 8009832:	0003      	movs	r3, r0
			/ 1024;
 8009834:	0a9a      	lsrs	r2, r3, #10
	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60da      	str	r2, [r3, #12]
	 * T- air temperature[K]
	 *
	 */

	bme280->altitudeValue = (-((8.314
			* ((((float) bme280->temperatureValue) / 100) + 273.15))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	0018      	movs	r0, r3
 8009840:	f7f7 fd38 	bl	80012b4 <__aeabi_i2f>
 8009844:	1c03      	adds	r3, r0, #0
 8009846:	492f      	ldr	r1, [pc, #188]	; (8009904 <bme280Read+0x1e4>)
 8009848:	1c18      	adds	r0, r3, #0
 800984a:	f7f7 f925 	bl	8000a98 <__aeabi_fdiv>
 800984e:	1c03      	adds	r3, r0, #0
 8009850:	1c18      	adds	r0, r3, #0
 8009852:	f7f9 fbc9 	bl	8002fe8 <__aeabi_f2d>
 8009856:	4a2c      	ldr	r2, [pc, #176]	; (8009908 <bme280Read+0x1e8>)
 8009858:	4b2c      	ldr	r3, [pc, #176]	; (800990c <bme280Read+0x1ec>)
 800985a:	f7f7 fdad 	bl	80013b8 <__aeabi_dadd>
 800985e:	0002      	movs	r2, r0
 8009860:	000b      	movs	r3, r1
 8009862:	0010      	movs	r0, r2
 8009864:	0019      	movs	r1, r3
 8009866:	4a2a      	ldr	r2, [pc, #168]	; (8009910 <bme280Read+0x1f0>)
 8009868:	4b2a      	ldr	r3, [pc, #168]	; (8009914 <bme280Read+0x1f4>)
 800986a:	f7f8 fd15 	bl	8002298 <__aeabi_dmul>
 800986e:	0002      	movs	r2, r0
 8009870:	000b      	movs	r3, r1
 8009872:	0010      	movs	r0, r2
 8009874:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 8009876:	4a28      	ldr	r2, [pc, #160]	; (8009918 <bme280Read+0x1f8>)
 8009878:	4b28      	ldr	r3, [pc, #160]	; (800991c <bme280Read+0x1fc>)
 800987a:	f7f8 f907 	bl	8001a8c <__aeabi_ddiv>
 800987e:	0002      	movs	r2, r0
 8009880:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 8009882:	0011      	movs	r1, r2
 8009884:	000c      	movs	r4, r1
 8009886:	2180      	movs	r1, #128	; 0x80
 8009888:	0609      	lsls	r1, r1, #24
 800988a:	4059      	eors	r1, r3
 800988c:	000d      	movs	r5, r1
			* log(
					(float) bme280->pressureValue
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	0018      	movs	r0, r3
 8009894:	f7f7 fd54 	bl	8001340 <__aeabi_ui2f>
 8009898:	1c06      	adds	r6, r0, #0
							/ (((float) bme280->pressureReference) * 100)))*100;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	0018      	movs	r0, r3
 80098a0:	f7f7 fd4e 	bl	8001340 <__aeabi_ui2f>
 80098a4:	1c03      	adds	r3, r0, #0
 80098a6:	4917      	ldr	r1, [pc, #92]	; (8009904 <bme280Read+0x1e4>)
 80098a8:	1c18      	adds	r0, r3, #0
 80098aa:	f7f7 fa01 	bl	8000cb0 <__aeabi_fmul>
 80098ae:	1c03      	adds	r3, r0, #0
 80098b0:	1c19      	adds	r1, r3, #0
 80098b2:	1c30      	adds	r0, r6, #0
 80098b4:	f7f7 f8f0 	bl	8000a98 <__aeabi_fdiv>
 80098b8:	1c03      	adds	r3, r0, #0
			* log(
 80098ba:	1c18      	adds	r0, r3, #0
 80098bc:	f7f9 fb94 	bl	8002fe8 <__aeabi_f2d>
 80098c0:	0002      	movs	r2, r0
 80098c2:	000b      	movs	r3, r1
 80098c4:	0010      	movs	r0, r2
 80098c6:	0019      	movs	r1, r3
 80098c8:	f005 fe54 	bl	800f574 <log>
 80098cc:	0002      	movs	r2, r0
 80098ce:	000b      	movs	r3, r1
 80098d0:	0020      	movs	r0, r4
 80098d2:	0029      	movs	r1, r5
 80098d4:	f7f8 fce0 	bl	8002298 <__aeabi_dmul>
 80098d8:	0002      	movs	r2, r0
 80098da:	000b      	movs	r3, r1
 80098dc:	0010      	movs	r0, r2
 80098de:	0019      	movs	r1, r3
							/ (((float) bme280->pressureReference) * 100)))*100;
 80098e0:	2200      	movs	r2, #0
 80098e2:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <bme280Read+0x200>)
 80098e4:	f7f8 fcd8 	bl	8002298 <__aeabi_dmul>
 80098e8:	0002      	movs	r2, r0
 80098ea:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 80098ec:	0010      	movs	r0, r2
 80098ee:	0019      	movs	r1, r3
 80098f0:	f7f9 faee 	bl	8002ed0 <__aeabi_d2iz>
 80098f4:	0002      	movs	r2, r0
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	611a      	str	r2, [r3, #16]
}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b009      	add	sp, #36	; 0x24
 8009900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	42c80000 	.word	0x42c80000
 8009908:	66666666 	.word	0x66666666
 800990c:	40711266 	.word	0x40711266
 8009910:	9ba5e354 	.word	0x9ba5e354
 8009914:	4020a0c4 	.word	0x4020a0c4
 8009918:	db22d0e5 	.word	0xdb22d0e5
 800991c:	3fd27ef9 	.word	0x3fd27ef9
 8009920:	40590000 	.word	0x40590000

08009924 <_BME280_compensate_T_int32>:
//									COMP FUNCTIONS DEFINITIONS

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	10da      	asrs	r2, r3, #3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	8b9b      	ldrh	r3, [r3, #28]
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	1ad3      	subs	r3, r2, r3
			* ((int32_t) bme280->dig_T2)) >> 11;
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	211e      	movs	r1, #30
 800993e:	5e52      	ldrsh	r2, [r2, r1]
 8009940:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 8009942:	12db      	asrs	r3, r3, #11
 8009944:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	111b      	asrs	r3, r3, #4
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	8b92      	ldrh	r2, [r2, #28]
 800994e:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((int32_t) bme280->dig_T1))) >> 12)
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	1112      	asrs	r2, r2, #4
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	8b89      	ldrh	r1, [r1, #28]
 8009958:	1a52      	subs	r2, r2, r1
 800995a:	4353      	muls	r3, r2
 800995c:	131b      	asrs	r3, r3, #12
			* ((int32_t) bme280->dig_T3)) >> 14;
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	2120      	movs	r1, #32
 8009962:	5e52      	ldrsh	r2, [r2, r1]
 8009964:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 8009966:	139b      	asrs	r3, r3, #14
 8009968:	613b      	str	r3, [r7, #16]
	bme280->t_fine = var1 + var2;
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	18d2      	adds	r2, r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	641a      	str	r2, [r3, #64]	; 0x40
	T = (bme280->t_fine * 5 + 128) >> 8;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009978:	0013      	movs	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	189b      	adds	r3, r3, r2
 800997e:	3380      	adds	r3, #128	; 0x80
 8009980:	121b      	asrs	r3, r3, #8
 8009982:	60fb      	str	r3, [r7, #12]
	return T;
 8009984:	68fb      	ldr	r3, [r7, #12]
}
 8009986:	0018      	movs	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	b006      	add	sp, #24
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <_BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P) {
 8009990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009992:	b0ad      	sub	sp, #180	; 0xb4
 8009994:	af00      	add	r7, sp, #0
 8009996:	2394      	movs	r3, #148	; 0x94
 8009998:	18fa      	adds	r2, r7, r3
 800999a:	6010      	str	r0, [r2, #0]
 800999c:	2290      	movs	r2, #144	; 0x90
 800999e:	18ba      	adds	r2, r7, r2
 80099a0:	6011      	str	r1, [r2, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t) bme280->t_fine) - 128000;
 80099a2:	18fa      	adds	r2, r7, r3
 80099a4:	6813      	ldr	r3, [r2, #0]
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80099aa:	17db      	asrs	r3, r3, #31
 80099ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ae:	4ace      	ldr	r2, [pc, #824]	; (8009ce8 <_BME280_compensate_P_int64+0x358>)
 80099b0:	2301      	movs	r3, #1
 80099b2:	425b      	negs	r3, r3
 80099b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80099b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80099b8:	1880      	adds	r0, r0, r2
 80099ba:	4159      	adcs	r1, r3
 80099bc:	0002      	movs	r2, r0
 80099be:	000b      	movs	r3, r1
 80099c0:	26a8      	movs	r6, #168	; 0xa8
 80099c2:	19b9      	adds	r1, r7, r6
 80099c4:	600a      	str	r2, [r1, #0]
 80099c6:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) bme280->dig_P6;
 80099c8:	19ba      	adds	r2, r7, r6
 80099ca:	6853      	ldr	r3, [r2, #4]
 80099cc:	6812      	ldr	r2, [r2, #0]
 80099ce:	19b9      	adds	r1, r7, r6
 80099d0:	6808      	ldr	r0, [r1, #0]
 80099d2:	6849      	ldr	r1, [r1, #4]
 80099d4:	f7f6 fd9a 	bl	800050c <__aeabi_lmul>
 80099d8:	0002      	movs	r2, r0
 80099da:	000b      	movs	r3, r1
 80099dc:	0010      	movs	r0, r2
 80099de:	0019      	movs	r1, r3
 80099e0:	2394      	movs	r3, #148	; 0x94
 80099e2:	18fa      	adds	r2, r7, r3
 80099e4:	6813      	ldr	r3, [r2, #0]
 80099e6:	222c      	movs	r2, #44	; 0x2c
 80099e8:	5e9b      	ldrsh	r3, [r3, r2]
 80099ea:	653b      	str	r3, [r7, #80]	; 0x50
 80099ec:	17db      	asrs	r3, r3, #31
 80099ee:	657b      	str	r3, [r7, #84]	; 0x54
 80099f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f4:	f7f6 fd8a 	bl	800050c <__aeabi_lmul>
 80099f8:	0002      	movs	r2, r0
 80099fa:	000b      	movs	r3, r1
 80099fc:	21a0      	movs	r1, #160	; 0xa0
 80099fe:	1878      	adds	r0, r7, r1
 8009a00:	6002      	str	r2, [r0, #0]
 8009a02:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) bme280->dig_P5) << 17);
 8009a04:	2394      	movs	r3, #148	; 0x94
 8009a06:	18fa      	adds	r2, r7, r3
 8009a08:	6813      	ldr	r3, [r2, #0]
 8009a0a:	222a      	movs	r2, #42	; 0x2a
 8009a0c:	5e9b      	ldrsh	r3, [r3, r2]
 8009a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a10:	17db      	asrs	r3, r3, #31
 8009a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a14:	19ba      	adds	r2, r7, r6
 8009a16:	6853      	ldr	r3, [r2, #4]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009a1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a1e:	f7f6 fd75 	bl	800050c <__aeabi_lmul>
 8009a22:	0002      	movs	r2, r0
 8009a24:	000b      	movs	r3, r1
 8009a26:	0bd1      	lsrs	r1, r2, #15
 8009a28:	045d      	lsls	r5, r3, #17
 8009a2a:	430d      	orrs	r5, r1
 8009a2c:	0454      	lsls	r4, r2, #17
 8009a2e:	21a0      	movs	r1, #160	; 0xa0
 8009a30:	187a      	adds	r2, r7, r1
 8009a32:	6853      	ldr	r3, [r2, #4]
 8009a34:	6812      	ldr	r2, [r2, #0]
 8009a36:	1912      	adds	r2, r2, r4
 8009a38:	416b      	adcs	r3, r5
 8009a3a:	1878      	adds	r0, r7, r1
 8009a3c:	6002      	str	r2, [r0, #0]
 8009a3e:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) bme280->dig_P4) << 35);
 8009a40:	2594      	movs	r5, #148	; 0x94
 8009a42:	197b      	adds	r3, r7, r5
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2228      	movs	r2, #40	; 0x28
 8009a48:	5e9b      	ldrsh	r3, [r3, r2]
 8009a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a4c:	17db      	asrs	r3, r3, #31
 8009a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a56:	2300      	movs	r3, #0
 8009a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a5a:	000c      	movs	r4, r1
 8009a5c:	187b      	adds	r3, r7, r1
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a66:	1812      	adds	r2, r2, r0
 8009a68:	414b      	adcs	r3, r1
 8009a6a:	1939      	adds	r1, r7, r4
 8009a6c:	600a      	str	r2, [r1, #0]
 8009a6e:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 8009a70:	0034      	movs	r4, r6
 8009a72:	193b      	adds	r3, r7, r4
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	1939      	adds	r1, r7, r4
 8009a7a:	6808      	ldr	r0, [r1, #0]
 8009a7c:	6849      	ldr	r1, [r1, #4]
 8009a7e:	f7f6 fd45 	bl	800050c <__aeabi_lmul>
 8009a82:	0002      	movs	r2, r0
 8009a84:	000b      	movs	r3, r1
 8009a86:	0010      	movs	r0, r2
 8009a88:	0019      	movs	r1, r3
 8009a8a:	197b      	adds	r3, r7, r5
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2226      	movs	r2, #38	; 0x26
 8009a90:	5e9b      	ldrsh	r3, [r3, r2]
 8009a92:	633b      	str	r3, [r7, #48]	; 0x30
 8009a94:	17db      	asrs	r3, r3, #31
 8009a96:	637b      	str	r3, [r7, #52]	; 0x34
 8009a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9c:	f7f6 fd36 	bl	800050c <__aeabi_lmul>
 8009aa0:	0002      	movs	r2, r0
 8009aa2:	000b      	movs	r3, r1
 8009aa4:	0619      	lsls	r1, r3, #24
 8009aa6:	468c      	mov	ip, r1
 8009aa8:	0a10      	lsrs	r0, r2, #8
 8009aaa:	2688      	movs	r6, #136	; 0x88
 8009aac:	19b9      	adds	r1, r7, r6
 8009aae:	6008      	str	r0, [r1, #0]
 8009ab0:	19b8      	adds	r0, r7, r6
 8009ab2:	6800      	ldr	r0, [r0, #0]
 8009ab4:	4661      	mov	r1, ip
 8009ab6:	4308      	orrs	r0, r1
 8009ab8:	19b9      	adds	r1, r7, r6
 8009aba:	6008      	str	r0, [r1, #0]
 8009abc:	121b      	asrs	r3, r3, #8
 8009abe:	228c      	movs	r2, #140	; 0x8c
 8009ac0:	18ba      	adds	r2, r7, r2
 8009ac2:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) bme280->dig_P2) << 12);
 8009ac4:	197b      	adds	r3, r7, r5
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2224      	movs	r2, #36	; 0x24
 8009aca:	5e9b      	ldrsh	r3, [r3, r2]
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ace:	17db      	asrs	r3, r3, #31
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad2:	193b      	adds	r3, r7, r4
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009adc:	f7f6 fd16 	bl	800050c <__aeabi_lmul>
 8009ae0:	0002      	movs	r2, r0
 8009ae2:	000b      	movs	r3, r1
 8009ae4:	0d11      	lsrs	r1, r2, #20
 8009ae6:	468c      	mov	ip, r1
 8009ae8:	0318      	lsls	r0, r3, #12
 8009aea:	2184      	movs	r1, #132	; 0x84
 8009aec:	1879      	adds	r1, r7, r1
 8009aee:	6008      	str	r0, [r1, #0]
 8009af0:	2084      	movs	r0, #132	; 0x84
 8009af2:	1839      	adds	r1, r7, r0
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	4661      	mov	r1, ip
 8009af8:	4308      	orrs	r0, r1
 8009afa:	2184      	movs	r1, #132	; 0x84
 8009afc:	1879      	adds	r1, r7, r1
 8009afe:	6008      	str	r0, [r1, #0]
 8009b00:	0313      	lsls	r3, r2, #12
 8009b02:	2180      	movs	r1, #128	; 0x80
 8009b04:	187a      	adds	r2, r7, r1
 8009b06:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 8009b08:	19bb      	adds	r3, r7, r6
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	1879      	adds	r1, r7, r1
 8009b10:	6808      	ldr	r0, [r1, #0]
 8009b12:	6849      	ldr	r1, [r1, #4]
 8009b14:	1812      	adds	r2, r2, r0
 8009b16:	414b      	adcs	r3, r1
 8009b18:	1939      	adds	r1, r7, r4
 8009b1a:	600a      	str	r2, [r1, #0]
 8009b1c:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) bme280->dig_P1) >> 33;
 8009b1e:	193b      	adds	r3, r7, r4
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	6859      	ldr	r1, [r3, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	2380      	movs	r3, #128	; 0x80
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	1880      	adds	r0, r0, r2
 8009b2c:	4159      	adcs	r1, r3
 8009b2e:	197b      	adds	r3, r7, r5
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009b34:	623b      	str	r3, [r7, #32]
 8009b36:	2300      	movs	r3, #0
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3a:	6a3a      	ldr	r2, [r7, #32]
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	f7f6 fce5 	bl	800050c <__aeabi_lmul>
 8009b42:	0002      	movs	r2, r0
 8009b44:	000b      	movs	r3, r1
 8009b46:	1059      	asrs	r1, r3, #1
 8009b48:	1938      	adds	r0, r7, r4
 8009b4a:	6001      	str	r1, [r0, #0]
 8009b4c:	17db      	asrs	r3, r3, #31
 8009b4e:	21ac      	movs	r1, #172	; 0xac
 8009b50:	187a      	adds	r2, r7, r1
 8009b52:	6013      	str	r3, [r2, #0]
	if (var1 == 0) {
 8009b54:	193b      	adds	r3, r7, r4
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	187b      	adds	r3, r7, r1
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	d101      	bne.n	8009b64 <_BME280_compensate_P_int64+0x1d4>
		return 0; // avoid exception caused by division by zero
 8009b60:	2300      	movs	r3, #0
 8009b62:	e0bc      	b.n	8009cde <_BME280_compensate_P_int64+0x34e>
	}
	p = 1048576 - adc_P;
 8009b64:	2390      	movs	r3, #144	; 0x90
 8009b66:	18fb      	adds	r3, r7, r3
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	2380      	movs	r3, #128	; 0x80
 8009b6c:	035b      	lsls	r3, r3, #13
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	2498      	movs	r4, #152	; 0x98
 8009b72:	193a      	adds	r2, r7, r4
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	17db      	asrs	r3, r3, #31
 8009b78:	259c      	movs	r5, #156	; 0x9c
 8009b7a:	197a      	adds	r2, r7, r5
 8009b7c:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8009b7e:	193b      	adds	r3, r7, r4
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	105b      	asrs	r3, r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	193b      	adds	r3, r7, r4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	07db      	lsls	r3, r3, #31
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	20a0      	movs	r0, #160	; 0xa0
 8009b90:	183a      	adds	r2, r7, r0
 8009b92:	6853      	ldr	r3, [r2, #4]
 8009b94:	6812      	ldr	r2, [r2, #0]
 8009b96:	69b8      	ldr	r0, [r7, #24]
 8009b98:	69f9      	ldr	r1, [r7, #28]
 8009b9a:	1a80      	subs	r0, r0, r2
 8009b9c:	4199      	sbcs	r1, r3
 8009b9e:	4a53      	ldr	r2, [pc, #332]	; (8009cec <_BME280_compensate_P_int64+0x35c>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f7f6 fcb3 	bl	800050c <__aeabi_lmul>
 8009ba6:	0002      	movs	r2, r0
 8009ba8:	000b      	movs	r3, r1
 8009baa:	0010      	movs	r0, r2
 8009bac:	0019      	movs	r1, r3
 8009bae:	23a8      	movs	r3, #168	; 0xa8
 8009bb0:	18fa      	adds	r2, r7, r3
 8009bb2:	6853      	ldr	r3, [r2, #4]
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	f7f6 fc65 	bl	8000484 <__aeabi_ldivmod>
 8009bba:	0002      	movs	r2, r0
 8009bbc:	000b      	movs	r3, r1
 8009bbe:	1939      	adds	r1, r7, r4
 8009bc0:	600a      	str	r2, [r1, #0]
 8009bc2:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) bme280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8009bc4:	2694      	movs	r6, #148	; 0x94
 8009bc6:	19ba      	adds	r2, r7, r6
 8009bc8:	6813      	ldr	r3, [r2, #0]
 8009bca:	2232      	movs	r2, #50	; 0x32
 8009bcc:	5e9b      	ldrsh	r3, [r3, r2]
 8009bce:	613b      	str	r3, [r7, #16]
 8009bd0:	17db      	asrs	r3, r3, #31
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	197a      	adds	r2, r7, r5
 8009bd6:	6813      	ldr	r3, [r2, #0]
 8009bd8:	04da      	lsls	r2, r3, #19
 8009bda:	1939      	adds	r1, r7, r4
 8009bdc:	680b      	ldr	r3, [r1, #0]
 8009bde:	0b5b      	lsrs	r3, r3, #13
 8009be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be4:	4313      	orrs	r3, r2
 8009be6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009be8:	197a      	adds	r2, r7, r5
 8009bea:	6813      	ldr	r3, [r2, #0]
 8009bec:	135b      	asrs	r3, r3, #13
 8009bee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bf4:	6938      	ldr	r0, [r7, #16]
 8009bf6:	6979      	ldr	r1, [r7, #20]
 8009bf8:	f7f6 fc88 	bl	800050c <__aeabi_lmul>
 8009bfc:	0002      	movs	r2, r0
 8009bfe:	000b      	movs	r3, r1
 8009c00:	0010      	movs	r0, r2
 8009c02:	0019      	movs	r1, r3
 8009c04:	197a      	adds	r2, r7, r5
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	04da      	lsls	r2, r3, #19
 8009c0a:	193b      	adds	r3, r7, r4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	0b5b      	lsrs	r3, r3, #13
 8009c10:	673b      	str	r3, [r7, #112]	; 0x70
 8009c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c14:	4313      	orrs	r3, r2
 8009c16:	673b      	str	r3, [r7, #112]	; 0x70
 8009c18:	197a      	adds	r2, r7, r5
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	135b      	asrs	r3, r3, #13
 8009c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c24:	f7f6 fc72 	bl	800050c <__aeabi_lmul>
 8009c28:	0002      	movs	r2, r0
 8009c2a:	000b      	movs	r3, r1
 8009c2c:	01d9      	lsls	r1, r3, #7
 8009c2e:	0e50      	lsrs	r0, r2, #25
 8009c30:	4301      	orrs	r1, r0
 8009c32:	25a8      	movs	r5, #168	; 0xa8
 8009c34:	1978      	adds	r0, r7, r5
 8009c36:	6001      	str	r1, [r0, #0]
 8009c38:	165b      	asrs	r3, r3, #25
 8009c3a:	22ac      	movs	r2, #172	; 0xac
 8009c3c:	18ba      	adds	r2, r7, r2
 8009c3e:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) bme280->dig_P8) * p) >> 19;
 8009c40:	19ba      	adds	r2, r7, r6
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	2230      	movs	r2, #48	; 0x30
 8009c46:	5e9b      	ldrsh	r3, [r3, r2]
 8009c48:	60bb      	str	r3, [r7, #8]
 8009c4a:	17db      	asrs	r3, r3, #31
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	193a      	adds	r2, r7, r4
 8009c50:	6853      	ldr	r3, [r2, #4]
 8009c52:	6812      	ldr	r2, [r2, #0]
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	f7f6 fc58 	bl	800050c <__aeabi_lmul>
 8009c5c:	0002      	movs	r2, r0
 8009c5e:	000b      	movs	r3, r1
 8009c60:	0359      	lsls	r1, r3, #13
 8009c62:	0cd0      	lsrs	r0, r2, #19
 8009c64:	4301      	orrs	r1, r0
 8009c66:	20a0      	movs	r0, #160	; 0xa0
 8009c68:	1838      	adds	r0, r7, r0
 8009c6a:	6001      	str	r1, [r0, #0]
 8009c6c:	14db      	asrs	r3, r3, #19
 8009c6e:	22a4      	movs	r2, #164	; 0xa4
 8009c70:	18ba      	adds	r2, r7, r2
 8009c72:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t) bme280->dig_P7) << 4);
 8009c74:	193a      	adds	r2, r7, r4
 8009c76:	6810      	ldr	r0, [r2, #0]
 8009c78:	6851      	ldr	r1, [r2, #4]
 8009c7a:	197a      	adds	r2, r7, r5
 8009c7c:	6853      	ldr	r3, [r2, #4]
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	1880      	adds	r0, r0, r2
 8009c82:	4159      	adcs	r1, r3
 8009c84:	23a0      	movs	r3, #160	; 0xa0
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	1812      	adds	r2, r2, r0
 8009c8e:	414b      	adcs	r3, r1
 8009c90:	0619      	lsls	r1, r3, #24
 8009c92:	0a10      	lsrs	r0, r2, #8
 8009c94:	66b8      	str	r0, [r7, #104]	; 0x68
 8009c96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009c98:	4308      	orrs	r0, r1
 8009c9a:	66b8      	str	r0, [r7, #104]	; 0x68
 8009c9c:	121b      	asrs	r3, r3, #8
 8009c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ca0:	19bb      	adds	r3, r7, r6
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	222e      	movs	r2, #46	; 0x2e
 8009ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ca8:	603b      	str	r3, [r7, #0]
 8009caa:	17db      	asrs	r3, r3, #31
 8009cac:	607b      	str	r3, [r7, #4]
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	000b      	movs	r3, r1
 8009cb4:	0f1b      	lsrs	r3, r3, #28
 8009cb6:	0010      	movs	r0, r2
 8009cb8:	0100      	lsls	r0, r0, #4
 8009cba:	6678      	str	r0, [r7, #100]	; 0x64
 8009cbc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009cbe:	4318      	orrs	r0, r3
 8009cc0:	6678      	str	r0, [r7, #100]	; 0x64
 8009cc2:	000b      	movs	r3, r1
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8009cc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ccc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009cce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009cd0:	1812      	adds	r2, r2, r0
 8009cd2:	414b      	adcs	r3, r1
 8009cd4:	1939      	adds	r1, r7, r4
 8009cd6:	600a      	str	r2, [r1, #0]
 8009cd8:	604b      	str	r3, [r1, #4]
	return (uint32_t) p;
 8009cda:	193b      	adds	r3, r7, r4
 8009cdc:	681b      	ldr	r3, [r3, #0]
}
 8009cde:	0018      	movs	r0, r3
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	b02d      	add	sp, #180	; 0xb4
 8009ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	fffe0c00 	.word	0xfffe0c00
 8009cec:	00000c35 	.word	0x00000c35

08009cf0 <_BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;
	v_x1_u32r = (bme280->t_fine - ((int32_t) 76800));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	4a2d      	ldr	r2, [pc, #180]	; (8009db4 <_BME280_compensate_H_int32+0xc4>)
 8009d00:	4694      	mov	ip, r2
 8009d02:	4463      	add	r3, ip
 8009d04:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	039a      	lsls	r2, r3, #14
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	213a      	movs	r1, #58	; 0x3a
 8009d0e:	5e5b      	ldrsh	r3, [r3, r1]
 8009d10:	051b      	lsls	r3, r3, #20
 8009d12:	1ad2      	subs	r2, r2, r3
			- (((int32_t) bme280->dig_H5) * v_x1_u32r)) + ((int32_t) 16384))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	213c      	movs	r1, #60	; 0x3c
 8009d18:	5e5b      	ldrsh	r3, [r3, r1]
 8009d1a:	0019      	movs	r1, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	434b      	muls	r3, r1
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2280      	movs	r2, #128	; 0x80
 8009d24:	01d2      	lsls	r2, r2, #7
 8009d26:	4694      	mov	ip, r2
 8009d28:	4463      	add	r3, ip
			>> 15)
 8009d2a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * ((int32_t) bme280->dig_H6)) >> 10)
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	213e      	movs	r1, #62	; 0x3e
 8009d30:	5c52      	ldrb	r2, [r2, r1]
 8009d32:	0011      	movs	r1, r2
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	434a      	muls	r2, r1
 8009d38:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	2038      	movs	r0, #56	; 0x38
 8009d3e:	5c09      	ldrb	r1, [r1, r0]
 8009d40:	0008      	movs	r0, r1
 8009d42:	68f9      	ldr	r1, [r7, #12]
 8009d44:	4341      	muls	r1, r0
 8009d46:	12c9      	asrs	r1, r1, #11
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 8009d48:	2080      	movs	r0, #128	; 0x80
 8009d4a:	0200      	lsls	r0, r0, #8
 8009d4c:	4684      	mov	ip, r0
 8009d4e:	4461      	add	r1, ip
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 8009d50:	434a      	muls	r2, r1
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 8009d52:	1292      	asrs	r2, r2, #10
 8009d54:	2180      	movs	r1, #128	; 0x80
 8009d56:	0389      	lsls	r1, r1, #14
 8009d58:	468c      	mov	ip, r1
 8009d5a:	4462      	add	r2, ip
					* ((int32_t) bme280->dig_H2) + 8192) >> 14));
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	2036      	movs	r0, #54	; 0x36
 8009d60:	5e09      	ldrsh	r1, [r1, r0]
 8009d62:	434a      	muls	r2, r1
 8009d64:	2180      	movs	r1, #128	; 0x80
 8009d66:	0189      	lsls	r1, r1, #6
 8009d68:	468c      	mov	ip, r1
 8009d6a:	4462      	add	r2, ip
 8009d6c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 8009d6e:	4353      	muls	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	13db      	asrs	r3, r3, #15
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	13d2      	asrs	r2, r2, #15
 8009d7a:	4353      	muls	r3, r2
 8009d7c:	11db      	asrs	r3, r3, #7
					* ((int32_t) bme280->dig_H1)) >> 4));
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	2134      	movs	r1, #52	; 0x34
 8009d82:	5c52      	ldrb	r2, [r2, r1]
 8009d84:	4353      	muls	r3, r2
 8009d86:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	da00      	bge.n	8009d96 <_BME280_compensate_H_int32+0xa6>
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	22c8      	movs	r2, #200	; 0xc8
 8009d9c:	0552      	lsls	r2, r2, #21
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	dd01      	ble.n	8009da6 <_BME280_compensate_H_int32+0xb6>
 8009da2:	23c8      	movs	r3, #200	; 0xc8
 8009da4:	055b      	lsls	r3, r3, #21
 8009da6:	60fb      	str	r3, [r7, #12]
	return (uint32_t) (v_x1_u32r >> 12);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	131b      	asrs	r3, r3, #12
}
 8009dac:	0018      	movs	r0, r3
 8009dae:	46bd      	mov	sp, r7
 8009db0:	b004      	add	sp, #16
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	fffed400 	.word	0xfffed400

08009db8 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	46c0      	nop			; (mov r8, r8)
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	2218      	movs	r2, #24
 8009de4:	4393      	bics	r3, r2
 8009de6:	001a      	movs	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	609a      	str	r2, [r3, #8]
}
 8009df0:	46c0      	nop			; (mov r8, r8)
 8009df2:	46bd      	mov	sp, r7
 8009df4:	b002      	add	sp, #8
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	615a      	str	r2, [r3, #20]
}
 8009e08:	46c0      	nop			; (mov r8, r8)
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	b002      	add	sp, #8
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	601a      	str	r2, [r3, #0]
}
 8009e20:	46c0      	nop			; (mov r8, r8)
 8009e22:	46bd      	mov	sp, r7
 8009e24:	b002      	add	sp, #8
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	000a      	movs	r2, r1
 8009e32:	1cbb      	adds	r3, r7, #2
 8009e34:	801a      	strh	r2, [r3, #0]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1cba      	adds	r2, r7, #2
 8009e3e:	8812      	ldrh	r2, [r2, #0]
 8009e40:	801a      	strh	r2, [r3, #0]
}
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	46bd      	mov	sp, r7
 8009e46:	b004      	add	sp, #16
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
}
 8009e58:	0018      	movs	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8009e68:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009e6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009e6c:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
}
 8009e80:	46c0      	nop			; (mov r8, r8)
 8009e82:	46bd      	mov	sp, r7
 8009e84:	b004      	add	sp, #16
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	40021000 	.word	0x40021000

08009e8c <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8009e8c:	b5b0      	push	{r4, r5, r7, lr}
 8009e8e:	b090      	sub	sp, #64	; 0x40
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	0002      	movs	r2, r0
 8009e94:	1dfb      	adds	r3, r7, #7
 8009e96:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8009e98:	231a      	movs	r3, #26
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	2205      	movs	r2, #5
 8009e9e:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8009eac:	2300      	movs	r3, #0
 8009eae:	633b      	str	r3, [r7, #48]	; 0x30
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8009eb8:	2300      	movs	r3, #0
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613a      	str	r2, [r7, #16]
 8009eca:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8009ecc:	231b      	movs	r3, #27
 8009ece:	18fb      	adds	r3, r7, r3
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]

  EE_Status status = EE_OK;
 8009ed4:	230e      	movs	r3, #14
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	2200      	movs	r2, #0
 8009eda:	801a      	strh	r2, [r3, #0]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8009edc:	f001 fe57 	bl	800bb8e <FI_CheckBankConfig>
 8009ee0:	1e03      	subs	r3, r0, #0
 8009ee2:	d002      	beq.n	8009eea <EE_Init+0x5e>
  {
    return EE_INVALID_BANK_CFG;
 8009ee4:	230e      	movs	r3, #14
 8009ee6:	f000 fd72 	bl	800a9ce <EE_Init+0xb42>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8009eea:	f001 fdd1 	bl	800ba90 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8009eee:	4baa      	ldr	r3, [pc, #680]	; (800a198 <EE_Init+0x30c>)
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	701a      	strb	r2, [r3, #0]
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009ef4:	4ba9      	ldr	r3, [pc, #676]	; (800a19c <EE_Init+0x310>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	029a      	lsls	r2, r3, #10
 8009efa:	23ff      	movs	r3, #255	; 0xff
 8009efc:	029b      	lsls	r3, r3, #10
 8009efe:	401a      	ands	r2, r3
 8009f00:	23b8      	movs	r3, #184	; 0xb8
 8009f02:	025b      	lsls	r3, r3, #9
 8009f04:	0011      	movs	r1, r2
 8009f06:	0018      	movs	r0, r3
 8009f08:	f7f6 f98e 	bl	8000228 <__aeabi_uidivmod>
 8009f0c:	000b      	movs	r3, r1
 8009f0e:	0adb      	lsrs	r3, r3, #11
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f12:	e035      	b.n	8009f80 <EE_Init+0xf4>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f16:	2280      	movs	r2, #128	; 0x80
 8009f18:	0252      	lsls	r2, r2, #9
 8009f1a:	4694      	mov	ip, r2
 8009f1c:	4463      	add	r3, ip
 8009f1e:	02dc      	lsls	r4, r3, #11
 8009f20:	4b9e      	ldr	r3, [pc, #632]	; (800a19c <EE_Init+0x310>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	029a      	lsls	r2, r3, #10
 8009f26:	23ff      	movs	r3, #255	; 0xff
 8009f28:	029b      	lsls	r3, r3, #10
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	0019      	movs	r1, r3
 8009f2e:	23b8      	movs	r3, #184	; 0xb8
 8009f30:	0258      	lsls	r0, r3, #9
 8009f32:	f7f6 f8f3 	bl	800011c <__udivsi3>
 8009f36:	0003      	movs	r3, r0
 8009f38:	0019      	movs	r1, r3
 8009f3a:	4b98      	ldr	r3, [pc, #608]	; (800a19c <EE_Init+0x310>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	029a      	lsls	r2, r3, #10
 8009f40:	23ff      	movs	r3, #255	; 0xff
 8009f42:	029b      	lsls	r3, r3, #10
 8009f44:	4013      	ands	r3, r2
 8009f46:	434b      	muls	r3, r1
 8009f48:	18e3      	adds	r3, r4, r3
 8009f4a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f50:	e00e      	b.n	8009f70 <EE_Init+0xe4>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8009f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f56:	18d2      	adds	r2, r2, r3
 8009f58:	4b91      	ldr	r3, [pc, #580]	; (800a1a0 <EE_Init+0x314>)
 8009f5a:	601a      	str	r2, [r3, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8009f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f60:	18d3      	adds	r3, r2, r3
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	613a      	str	r2, [r7, #16]
 8009f68:	617b      	str	r3, [r7, #20]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f72:	2380      	movs	r3, #128	; 0x80
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d3eb      	bcc.n	8009f52 <EE_Init+0xc6>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f80:	4b86      	ldr	r3, [pc, #536]	; (800a19c <EE_Init+0x310>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	029a      	lsls	r2, r3, #10
 8009f86:	23ff      	movs	r3, #255	; 0xff
 8009f88:	029b      	lsls	r3, r3, #10
 8009f8a:	401a      	ands	r2, r3
 8009f8c:	23b8      	movs	r3, #184	; 0xb8
 8009f8e:	025b      	lsls	r3, r3, #9
 8009f90:	0011      	movs	r1, r2
 8009f92:	0018      	movs	r0, r3
 8009f94:	f7f6 f948 	bl	8000228 <__aeabi_uidivmod>
 8009f98:	000b      	movs	r3, r1
 8009f9a:	0adb      	lsrs	r3, r3, #11
 8009f9c:	3312      	adds	r3, #18
 8009f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d3b7      	bcc.n	8009f14 <EE_Init+0x88>
     Address=(0x8000000|(FLASH->ECCR & 0x000FFFFF)); //Recovery of address where ECC error occured
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8009fa4:	4b7c      	ldr	r3, [pc, #496]	; (800a198 <EE_Init+0x30c>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009faa:	4b7c      	ldr	r3, [pc, #496]	; (800a19c <EE_Init+0x310>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	029a      	lsls	r2, r3, #10
 8009fb0:	23ff      	movs	r3, #255	; 0xff
 8009fb2:	029b      	lsls	r3, r3, #10
 8009fb4:	401a      	ands	r2, r3
 8009fb6:	23b8      	movs	r3, #184	; 0xb8
 8009fb8:	025b      	lsls	r3, r3, #9
 8009fba:	0011      	movs	r1, r2
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f7f6 f933 	bl	8000228 <__aeabi_uidivmod>
 8009fc2:	000b      	movs	r3, r1
 8009fc4:	0adb      	lsrs	r3, r3, #11
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc8:	e041      	b.n	800a04e <EE_Init+0x1c2>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fcc:	2280      	movs	r2, #128	; 0x80
 8009fce:	0252      	lsls	r2, r2, #9
 8009fd0:	4694      	mov	ip, r2
 8009fd2:	4463      	add	r3, ip
 8009fd4:	02dc      	lsls	r4, r3, #11
 8009fd6:	4b71      	ldr	r3, [pc, #452]	; (800a19c <EE_Init+0x310>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	029a      	lsls	r2, r3, #10
 8009fdc:	23ff      	movs	r3, #255	; 0xff
 8009fde:	029b      	lsls	r3, r3, #10
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	0019      	movs	r1, r3
 8009fe4:	23b8      	movs	r3, #184	; 0xb8
 8009fe6:	0258      	lsls	r0, r3, #9
 8009fe8:	f7f6 f898 	bl	800011c <__udivsi3>
 8009fec:	0003      	movs	r3, r0
 8009fee:	0019      	movs	r1, r3
 8009ff0:	4b6a      	ldr	r3, [pc, #424]	; (800a19c <EE_Init+0x310>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	029a      	lsls	r2, r3, #10
 8009ff6:	23ff      	movs	r3, #255	; 0xff
 8009ff8:	029b      	lsls	r3, r3, #10
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	434b      	muls	r3, r1
 8009ffe:	18e3      	adds	r3, r4, r3
 800a000:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a002:	251a      	movs	r5, #26
 800a004:	197c      	adds	r4, r7, r5
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	0018      	movs	r0, r3
 800a00a:	f001 fcf1 	bl	800b9f0 <GetPageState>
 800a00e:	0003      	movs	r3, r0
 800a010:	7023      	strb	r3, [r4, #0]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 800a012:	197b      	adds	r3, r7, r5
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d003      	beq.n	800a022 <EE_Init+0x196>
 800a01a:	197b      	adds	r3, r7, r5
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d103      	bne.n	800a02a <EE_Init+0x19e>
    {
      nbactivereceivepage++;
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	3301      	adds	r3, #1
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a028:	e00e      	b.n	800a048 <EE_Init+0x1bc>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 800a02a:	231a      	movs	r3, #26
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d109      	bne.n	800a048 <EE_Init+0x1bc>
    {
      if (nbvalidpage == 0U)
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <EE_Init+0x1b2>
      {
        firstvalidpage = page;
 800a03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03c:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 800a03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	3301      	adds	r3, #1
 800a046:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04a:	3301      	adds	r3, #1
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a04e:	4b53      	ldr	r3, [pc, #332]	; (800a19c <EE_Init+0x310>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	029a      	lsls	r2, r3, #10
 800a054:	23ff      	movs	r3, #255	; 0xff
 800a056:	029b      	lsls	r3, r3, #10
 800a058:	401a      	ands	r2, r3
 800a05a:	23b8      	movs	r3, #184	; 0xb8
 800a05c:	025b      	lsls	r3, r3, #9
 800a05e:	0011      	movs	r1, r2
 800a060:	0018      	movs	r0, r3
 800a062:	f7f6 f8e1 	bl	8000228 <__aeabi_uidivmod>
 800a066:	000b      	movs	r3, r1
 800a068:	0adb      	lsrs	r3, r3, #11
 800a06a:	3312      	adds	r3, #18
 800a06c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d3ab      	bcc.n	8009fca <EE_Init+0x13e>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d000      	beq.n	800a07a <EE_Init+0x1ee>
 800a078:	e07d      	b.n	800a176 <EE_Init+0x2ea>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d074      	beq.n	800a16a <EE_Init+0x2de>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 800a080:	4b46      	ldr	r3, [pc, #280]	; (800a19c <EE_Init+0x310>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	029a      	lsls	r2, r3, #10
 800a086:	23ff      	movs	r3, #255	; 0xff
 800a088:	029b      	lsls	r3, r3, #10
 800a08a:	401a      	ands	r2, r3
 800a08c:	23b8      	movs	r3, #184	; 0xb8
 800a08e:	025b      	lsls	r3, r3, #9
 800a090:	0011      	movs	r1, r2
 800a092:	0018      	movs	r0, r3
 800a094:	f7f6 f8c8 	bl	8000228 <__aeabi_uidivmod>
 800a098:	000b      	movs	r3, r1
 800a09a:	0adb      	lsrs	r3, r3, #11
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	3311      	adds	r3, #17
 800a0a2:	2112      	movs	r1, #18
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f7f6 f8bf 	bl	8000228 <__aeabi_uidivmod>
 800a0aa:	000b      	movs	r3, r1
 800a0ac:	001c      	movs	r4, r3
 800a0ae:	4b3b      	ldr	r3, [pc, #236]	; (800a19c <EE_Init+0x310>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	029a      	lsls	r2, r3, #10
 800a0b4:	23ff      	movs	r3, #255	; 0xff
 800a0b6:	029b      	lsls	r3, r3, #10
 800a0b8:	401a      	ands	r2, r3
 800a0ba:	23b8      	movs	r3, #184	; 0xb8
 800a0bc:	025b      	lsls	r3, r3, #9
 800a0be:	0011      	movs	r1, r2
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7f6 f8b1 	bl	8000228 <__aeabi_uidivmod>
 800a0c6:	000b      	movs	r3, r1
 800a0c8:	0adb      	lsrs	r3, r3, #11
 800a0ca:	18e3      	adds	r3, r4, r3
 800a0cc:	2280      	movs	r2, #128	; 0x80
 800a0ce:	0252      	lsls	r2, r2, #9
 800a0d0:	4694      	mov	ip, r2
 800a0d2:	4463      	add	r3, ip
 800a0d4:	02dc      	lsls	r4, r3, #11
 800a0d6:	4b31      	ldr	r3, [pc, #196]	; (800a19c <EE_Init+0x310>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	029a      	lsls	r2, r3, #10
 800a0dc:	23ff      	movs	r3, #255	; 0xff
 800a0de:	029b      	lsls	r3, r3, #10
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	0019      	movs	r1, r3
 800a0e4:	23b8      	movs	r3, #184	; 0xb8
 800a0e6:	0258      	lsls	r0, r3, #9
 800a0e8:	f7f6 f818 	bl	800011c <__udivsi3>
 800a0ec:	0003      	movs	r3, r0
 800a0ee:	0019      	movs	r1, r3
 800a0f0:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <EE_Init+0x310>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	029a      	lsls	r2, r3, #10
 800a0f6:	23ff      	movs	r3, #255	; 0xff
 800a0f8:	029b      	lsls	r3, r3, #10
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	434b      	muls	r3, r1
 800a0fe:	18e3      	adds	r3, r4, r3
 800a100:	0018      	movs	r0, r3
 800a102:	f001 fc75 	bl	800b9f0 <GetPageState>
 800a106:	0003      	movs	r3, r0
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d134      	bne.n	800a176 <EE_Init+0x2ea>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 800a10c:	4b23      	ldr	r3, [pc, #140]	; (800a19c <EE_Init+0x310>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	029a      	lsls	r2, r3, #10
 800a112:	23ff      	movs	r3, #255	; 0xff
 800a114:	029b      	lsls	r3, r3, #10
 800a116:	401a      	ands	r2, r3
 800a118:	23b8      	movs	r3, #184	; 0xb8
 800a11a:	025b      	lsls	r3, r3, #9
 800a11c:	0011      	movs	r1, r2
 800a11e:	0018      	movs	r0, r3
 800a120:	f7f6 f882 	bl	8000228 <__aeabi_uidivmod>
 800a124:	000b      	movs	r3, r1
 800a126:	0adb      	lsrs	r3, r3, #11
 800a128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	3301      	adds	r3, #1
 800a12e:	2112      	movs	r1, #18
 800a130:	0018      	movs	r0, r3
 800a132:	f7f6 f879 	bl	8000228 <__aeabi_uidivmod>
 800a136:	000b      	movs	r3, r1
 800a138:	001c      	movs	r4, r3
 800a13a:	4b18      	ldr	r3, [pc, #96]	; (800a19c <EE_Init+0x310>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	029a      	lsls	r2, r3, #10
 800a140:	23ff      	movs	r3, #255	; 0xff
 800a142:	029b      	lsls	r3, r3, #10
 800a144:	401a      	ands	r2, r3
 800a146:	23b8      	movs	r3, #184	; 0xb8
 800a148:	025b      	lsls	r3, r3, #9
 800a14a:	0011      	movs	r1, r2
 800a14c:	0018      	movs	r0, r3
 800a14e:	f7f6 f86b 	bl	8000228 <__aeabi_uidivmod>
 800a152:	000b      	movs	r3, r1
 800a154:	0adb      	lsrs	r3, r3, #11
 800a156:	18e3      	adds	r3, r4, r3
 800a158:	2101      	movs	r1, #1
 800a15a:	0018      	movs	r0, r3
 800a15c:	f001 fb76 	bl	800b84c <SetPageState>
 800a160:	1e03      	subs	r3, r0, #0
 800a162:	d008      	beq.n	800a176 <EE_Init+0x2ea>
        {
          return EE_WRITE_ERROR;
 800a164:	2302      	movs	r3, #2
 800a166:	f000 fc32 	bl	800a9ce <EE_Init+0xb42>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 800a16a:	2000      	movs	r0, #0
 800a16c:	f000 fc36 	bl	800a9dc <EE_Format>
 800a170:	0003      	movs	r3, r0
 800a172:	f000 fc2c 	bl	800a9ce <EE_Init+0xb42>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a176:	4b09      	ldr	r3, [pc, #36]	; (800a19c <EE_Init+0x310>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	029a      	lsls	r2, r3, #10
 800a17c:	23ff      	movs	r3, #255	; 0xff
 800a17e:	029b      	lsls	r3, r3, #10
 800a180:	401a      	ands	r2, r3
 800a182:	23b8      	movs	r3, #184	; 0xb8
 800a184:	025b      	lsls	r3, r3, #9
 800a186:	0011      	movs	r1, r2
 800a188:	0018      	movs	r0, r3
 800a18a:	f7f6 f84d 	bl	8000228 <__aeabi_uidivmod>
 800a18e:	000b      	movs	r3, r1
 800a190:	0adb      	lsrs	r3, r3, #11
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a194:	e10c      	b.n	800a3b0 <EE_Init+0x524>
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	20000140 	.word	0x20000140
 800a19c:	1fff75e0 	.word	0x1fff75e0
 800a1a0:	2000013c 	.word	0x2000013c
  {
    pageaddress = PAGE_ADDRESS(page);
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a6:	2280      	movs	r2, #128	; 0x80
 800a1a8:	0252      	lsls	r2, r2, #9
 800a1aa:	4694      	mov	ip, r2
 800a1ac:	4463      	add	r3, ip
 800a1ae:	02dc      	lsls	r4, r3, #11
 800a1b0:	4be0      	ldr	r3, [pc, #896]	; (800a534 <EE_Init+0x6a8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	029a      	lsls	r2, r3, #10
 800a1b6:	23ff      	movs	r3, #255	; 0xff
 800a1b8:	029b      	lsls	r3, r3, #10
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	0019      	movs	r1, r3
 800a1be:	23b8      	movs	r3, #184	; 0xb8
 800a1c0:	0258      	lsls	r0, r3, #9
 800a1c2:	f7f5 ffab 	bl	800011c <__udivsi3>
 800a1c6:	0003      	movs	r3, r0
 800a1c8:	0019      	movs	r1, r3
 800a1ca:	4bda      	ldr	r3, [pc, #872]	; (800a534 <EE_Init+0x6a8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	029a      	lsls	r2, r3, #10
 800a1d0:	23ff      	movs	r3, #255	; 0xff
 800a1d2:	029b      	lsls	r3, r3, #10
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	434b      	muls	r3, r1
 800a1d8:	18e3      	adds	r3, r4, r3
 800a1da:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a1dc:	251a      	movs	r5, #26
 800a1de:	197c      	adds	r4, r7, r5
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f001 fc04 	bl	800b9f0 <GetPageState>
 800a1e8:	0003      	movs	r3, r0
 800a1ea:	7023      	strb	r3, [r4, #0]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 800a1ec:	197b      	adds	r3, r7, r5
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d000      	beq.n	800a1f6 <EE_Init+0x36a>
 800a1f4:	e0d9      	b.n	800a3aa <EE_Init+0x51e>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a1f6:	4bcf      	ldr	r3, [pc, #828]	; (800a534 <EE_Init+0x6a8>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	029a      	lsls	r2, r3, #10
 800a1fc:	23ff      	movs	r3, #255	; 0xff
 800a1fe:	029b      	lsls	r3, r3, #10
 800a200:	401a      	ands	r2, r3
 800a202:	23b8      	movs	r3, #184	; 0xb8
 800a204:	025b      	lsls	r3, r3, #9
 800a206:	0011      	movs	r1, r2
 800a208:	0018      	movs	r0, r3
 800a20a:	f7f6 f80d 	bl	8000228 <__aeabi_uidivmod>
 800a20e:	000b      	movs	r3, r1
 800a210:	0adb      	lsrs	r3, r3, #11
 800a212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a214:	429a      	cmp	r2, r3
 800a216:	d061      	beq.n	800a2dc <EE_Init+0x450>
 800a218:	4bc6      	ldr	r3, [pc, #792]	; (800a534 <EE_Init+0x6a8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	029a      	lsls	r2, r3, #10
 800a21e:	23ff      	movs	r3, #255	; 0xff
 800a220:	029b      	lsls	r3, r3, #10
 800a222:	401a      	ands	r2, r3
 800a224:	23b8      	movs	r3, #184	; 0xb8
 800a226:	025b      	lsls	r3, r3, #9
 800a228:	0011      	movs	r1, r2
 800a22a:	0018      	movs	r0, r3
 800a22c:	f7f5 fffc 	bl	8000228 <__aeabi_uidivmod>
 800a230:	000b      	movs	r3, r1
 800a232:	0adb      	lsrs	r3, r3, #11
 800a234:	3309      	adds	r3, #9
 800a236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a238:	429a      	cmp	r2, r3
 800a23a:	d04f      	beq.n	800a2dc <EE_Init+0x450>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a23c:	4bbd      	ldr	r3, [pc, #756]	; (800a534 <EE_Init+0x6a8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	029a      	lsls	r2, r3, #10
 800a242:	23ff      	movs	r3, #255	; 0xff
 800a244:	029b      	lsls	r3, r3, #10
 800a246:	401a      	ands	r2, r3
 800a248:	23b8      	movs	r3, #184	; 0xb8
 800a24a:	025b      	lsls	r3, r3, #9
 800a24c:	0011      	movs	r1, r2
 800a24e:	0018      	movs	r0, r3
 800a250:	f7f5 ffea 	bl	8000228 <__aeabi_uidivmod>
 800a254:	000b      	movs	r3, r1
 800a256:	0adb      	lsrs	r3, r3, #11
 800a258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	3311      	adds	r3, #17
 800a25e:	2112      	movs	r1, #18
 800a260:	0018      	movs	r0, r3
 800a262:	f7f5 ffe1 	bl	8000228 <__aeabi_uidivmod>
 800a266:	000b      	movs	r3, r1
 800a268:	001c      	movs	r4, r3
 800a26a:	4bb2      	ldr	r3, [pc, #712]	; (800a534 <EE_Init+0x6a8>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	029a      	lsls	r2, r3, #10
 800a270:	23ff      	movs	r3, #255	; 0xff
 800a272:	029b      	lsls	r3, r3, #10
 800a274:	401a      	ands	r2, r3
 800a276:	23b8      	movs	r3, #184	; 0xb8
 800a278:	025b      	lsls	r3, r3, #9
 800a27a:	0011      	movs	r1, r2
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7f5 ffd3 	bl	8000228 <__aeabi_uidivmod>
 800a282:	000b      	movs	r3, r1
 800a284:	0adb      	lsrs	r3, r3, #11
 800a286:	18e3      	adds	r3, r4, r3
 800a288:	2280      	movs	r2, #128	; 0x80
 800a28a:	0252      	lsls	r2, r2, #9
 800a28c:	4694      	mov	ip, r2
 800a28e:	4463      	add	r3, ip
 800a290:	02dc      	lsls	r4, r3, #11
 800a292:	4ba8      	ldr	r3, [pc, #672]	; (800a534 <EE_Init+0x6a8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	029a      	lsls	r2, r3, #10
 800a298:	23ff      	movs	r3, #255	; 0xff
 800a29a:	029b      	lsls	r3, r3, #10
 800a29c:	4013      	ands	r3, r2
 800a29e:	0019      	movs	r1, r3
 800a2a0:	23b8      	movs	r3, #184	; 0xb8
 800a2a2:	0258      	lsls	r0, r3, #9
 800a2a4:	f7f5 ff3a 	bl	800011c <__udivsi3>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	0019      	movs	r1, r3
 800a2ac:	4ba1      	ldr	r3, [pc, #644]	; (800a534 <EE_Init+0x6a8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	029a      	lsls	r2, r3, #10
 800a2b2:	23ff      	movs	r3, #255	; 0xff
 800a2b4:	029b      	lsls	r3, r3, #10
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	434b      	muls	r3, r1
 800a2ba:	18e3      	adds	r3, r4, r3
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f001 fb97 	bl	800b9f0 <GetPageState>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d104      	bne.n	800a2d2 <EE_Init+0x446>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a2c8:	231b      	movs	r3, #27
 800a2ca:	18fb      	adds	r3, r7, r3
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a2d0:	e052      	b.n	800a378 <EE_Init+0x4ec>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a2d2:	231b      	movs	r3, #27
 800a2d4:	18fb      	adds	r3, r7, r3
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a2da:	e04d      	b.n	800a378 <EE_Init+0x4ec>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a2dc:	4b95      	ldr	r3, [pc, #596]	; (800a534 <EE_Init+0x6a8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	029a      	lsls	r2, r3, #10
 800a2e2:	23ff      	movs	r3, #255	; 0xff
 800a2e4:	029b      	lsls	r3, r3, #10
 800a2e6:	401a      	ands	r2, r3
 800a2e8:	23b8      	movs	r3, #184	; 0xb8
 800a2ea:	025b      	lsls	r3, r3, #9
 800a2ec:	0011      	movs	r1, r2
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f7f5 ff9a 	bl	8000228 <__aeabi_uidivmod>
 800a2f4:	000b      	movs	r3, r1
 800a2f6:	0adb      	lsrs	r3, r3, #11
 800a2f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	2112      	movs	r1, #18
 800a300:	0018      	movs	r0, r3
 800a302:	f7f5 ff91 	bl	8000228 <__aeabi_uidivmod>
 800a306:	000b      	movs	r3, r1
 800a308:	001c      	movs	r4, r3
 800a30a:	4b8a      	ldr	r3, [pc, #552]	; (800a534 <EE_Init+0x6a8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	029a      	lsls	r2, r3, #10
 800a310:	23ff      	movs	r3, #255	; 0xff
 800a312:	029b      	lsls	r3, r3, #10
 800a314:	401a      	ands	r2, r3
 800a316:	23b8      	movs	r3, #184	; 0xb8
 800a318:	025b      	lsls	r3, r3, #9
 800a31a:	0011      	movs	r1, r2
 800a31c:	0018      	movs	r0, r3
 800a31e:	f7f5 ff83 	bl	8000228 <__aeabi_uidivmod>
 800a322:	000b      	movs	r3, r1
 800a324:	0adb      	lsrs	r3, r3, #11
 800a326:	18e3      	adds	r3, r4, r3
 800a328:	2280      	movs	r2, #128	; 0x80
 800a32a:	0252      	lsls	r2, r2, #9
 800a32c:	4694      	mov	ip, r2
 800a32e:	4463      	add	r3, ip
 800a330:	02dc      	lsls	r4, r3, #11
 800a332:	4b80      	ldr	r3, [pc, #512]	; (800a534 <EE_Init+0x6a8>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	029a      	lsls	r2, r3, #10
 800a338:	23ff      	movs	r3, #255	; 0xff
 800a33a:	029b      	lsls	r3, r3, #10
 800a33c:	4013      	ands	r3, r2
 800a33e:	0019      	movs	r1, r3
 800a340:	23b8      	movs	r3, #184	; 0xb8
 800a342:	0258      	lsls	r0, r3, #9
 800a344:	f7f5 feea 	bl	800011c <__udivsi3>
 800a348:	0003      	movs	r3, r0
 800a34a:	0019      	movs	r1, r3
 800a34c:	4b79      	ldr	r3, [pc, #484]	; (800a534 <EE_Init+0x6a8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	029a      	lsls	r2, r3, #10
 800a352:	23ff      	movs	r3, #255	; 0xff
 800a354:	029b      	lsls	r3, r3, #10
 800a356:	4013      	ands	r3, r2
 800a358:	434b      	muls	r3, r1
 800a35a:	18e3      	adds	r3, r4, r3
 800a35c:	0018      	movs	r0, r3
 800a35e:	f001 fb47 	bl	800b9f0 <GetPageState>
 800a362:	1e03      	subs	r3, r0, #0
 800a364:	d104      	bne.n	800a370 <EE_Init+0x4e4>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a366:	231b      	movs	r3, #27
 800a368:	18fb      	adds	r3, r7, r3
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	e003      	b.n	800a378 <EE_Init+0x4ec>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a370:	231b      	movs	r3, #27
 800a372:	18fb      	adds	r3, r7, r3
 800a374:	2201      	movs	r2, #1
 800a376:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 800a378:	231b      	movs	r3, #27
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d113      	bne.n	800a3aa <EE_Init+0x51e>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 800a382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a384:	b2da      	uxtb	r2, r3
 800a386:	4b6c      	ldr	r3, [pc, #432]	; (800a538 <EE_Init+0x6ac>)
 800a388:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 800a38a:	2201      	movs	r2, #1
 800a38c:	2100      	movs	r1, #0
 800a38e:	2000      	movs	r0, #0
 800a390:	f000 ff4e 	bl	800b230 <PagesTransfer>
 800a394:	0003      	movs	r3, r0
 800a396:	001a      	movs	r2, r3
 800a398:	2380      	movs	r3, #128	; 0x80
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d001      	beq.n	800a3a4 <EE_Init+0x518>
        {
          return EE_TRANSFER_ERROR;
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	e314      	b.n	800a9ce <EE_Init+0xb42>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 800a3a8:	e015      	b.n	800a3d6 <EE_Init+0x54a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b0:	4b60      	ldr	r3, [pc, #384]	; (800a534 <EE_Init+0x6a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	029a      	lsls	r2, r3, #10
 800a3b6:	23ff      	movs	r3, #255	; 0xff
 800a3b8:	029b      	lsls	r3, r3, #10
 800a3ba:	401a      	ands	r2, r3
 800a3bc:	23b8      	movs	r3, #184	; 0xb8
 800a3be:	025b      	lsls	r3, r3, #9
 800a3c0:	0011      	movs	r1, r2
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f7f5 ff30 	bl	8000228 <__aeabi_uidivmod>
 800a3c8:	000b      	movs	r3, r1
 800a3ca:	0adb      	lsrs	r3, r3, #11
 800a3cc:	3312      	adds	r3, #18
 800a3ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d200      	bcs.n	800a3d6 <EE_Init+0x54a>
 800a3d4:	e6e6      	b.n	800a1a4 <EE_Init+0x318>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a3da:	4b56      	ldr	r3, [pc, #344]	; (800a534 <EE_Init+0x6a8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	029a      	lsls	r2, r3, #10
 800a3e0:	23ff      	movs	r3, #255	; 0xff
 800a3e2:	029b      	lsls	r3, r3, #10
 800a3e4:	401a      	ands	r2, r3
 800a3e6:	23b8      	movs	r3, #184	; 0xb8
 800a3e8:	025b      	lsls	r3, r3, #9
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f7f5 ff1b 	bl	8000228 <__aeabi_uidivmod>
 800a3f2:	000b      	movs	r3, r1
 800a3f4:	0adb      	lsrs	r3, r3, #11
 800a3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f8:	e10a      	b.n	800a610 <EE_Init+0x784>
  {
    pageaddress = PAGE_ADDRESS(page);
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fc:	2280      	movs	r2, #128	; 0x80
 800a3fe:	0252      	lsls	r2, r2, #9
 800a400:	4694      	mov	ip, r2
 800a402:	4463      	add	r3, ip
 800a404:	02dc      	lsls	r4, r3, #11
 800a406:	4b4b      	ldr	r3, [pc, #300]	; (800a534 <EE_Init+0x6a8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	029a      	lsls	r2, r3, #10
 800a40c:	23ff      	movs	r3, #255	; 0xff
 800a40e:	029b      	lsls	r3, r3, #10
 800a410:	4013      	ands	r3, r2
 800a412:	0019      	movs	r1, r3
 800a414:	23b8      	movs	r3, #184	; 0xb8
 800a416:	0258      	lsls	r0, r3, #9
 800a418:	f7f5 fe80 	bl	800011c <__udivsi3>
 800a41c:	0003      	movs	r3, r0
 800a41e:	0019      	movs	r1, r3
 800a420:	4b44      	ldr	r3, [pc, #272]	; (800a534 <EE_Init+0x6a8>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	029a      	lsls	r2, r3, #10
 800a426:	23ff      	movs	r3, #255	; 0xff
 800a428:	029b      	lsls	r3, r3, #10
 800a42a:	4013      	ands	r3, r2
 800a42c:	434b      	muls	r3, r1
 800a42e:	18e3      	adds	r3, r4, r3
 800a430:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a432:	251a      	movs	r5, #26
 800a434:	197c      	adds	r4, r7, r5
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	0018      	movs	r0, r3
 800a43a:	f001 fad9 	bl	800b9f0 <GetPageState>
 800a43e:	0003      	movs	r3, r0
 800a440:	7023      	strb	r3, [r4, #0]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800a442:	197b      	adds	r3, r7, r5
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d000      	beq.n	800a44c <EE_Init+0x5c0>
 800a44a:	e0d7      	b.n	800a5fc <EE_Init+0x770>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a44c:	4b39      	ldr	r3, [pc, #228]	; (800a534 <EE_Init+0x6a8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	029a      	lsls	r2, r3, #10
 800a452:	23ff      	movs	r3, #255	; 0xff
 800a454:	029b      	lsls	r3, r3, #10
 800a456:	401a      	ands	r2, r3
 800a458:	23b8      	movs	r3, #184	; 0xb8
 800a45a:	025b      	lsls	r3, r3, #9
 800a45c:	0011      	movs	r1, r2
 800a45e:	0018      	movs	r0, r3
 800a460:	f7f5 fee2 	bl	8000228 <__aeabi_uidivmod>
 800a464:	000b      	movs	r3, r1
 800a466:	0adb      	lsrs	r3, r3, #11
 800a468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d066      	beq.n	800a53c <EE_Init+0x6b0>
 800a46e:	4b31      	ldr	r3, [pc, #196]	; (800a534 <EE_Init+0x6a8>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	029a      	lsls	r2, r3, #10
 800a474:	23ff      	movs	r3, #255	; 0xff
 800a476:	029b      	lsls	r3, r3, #10
 800a478:	401a      	ands	r2, r3
 800a47a:	23b8      	movs	r3, #184	; 0xb8
 800a47c:	025b      	lsls	r3, r3, #9
 800a47e:	0011      	movs	r1, r2
 800a480:	0018      	movs	r0, r3
 800a482:	f7f5 fed1 	bl	8000228 <__aeabi_uidivmod>
 800a486:	000b      	movs	r3, r1
 800a488:	0adb      	lsrs	r3, r3, #11
 800a48a:	3309      	adds	r3, #9
 800a48c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a48e:	429a      	cmp	r2, r3
 800a490:	d054      	beq.n	800a53c <EE_Init+0x6b0>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a492:	4b28      	ldr	r3, [pc, #160]	; (800a534 <EE_Init+0x6a8>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	029a      	lsls	r2, r3, #10
 800a498:	23ff      	movs	r3, #255	; 0xff
 800a49a:	029b      	lsls	r3, r3, #10
 800a49c:	401a      	ands	r2, r3
 800a49e:	23b8      	movs	r3, #184	; 0xb8
 800a4a0:	025b      	lsls	r3, r3, #9
 800a4a2:	0011      	movs	r1, r2
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f7f5 febf 	bl	8000228 <__aeabi_uidivmod>
 800a4aa:	000b      	movs	r3, r1
 800a4ac:	0adb      	lsrs	r3, r3, #11
 800a4ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	3311      	adds	r3, #17
 800a4b4:	2112      	movs	r1, #18
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f7f5 feb6 	bl	8000228 <__aeabi_uidivmod>
 800a4bc:	000b      	movs	r3, r1
 800a4be:	001c      	movs	r4, r3
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <EE_Init+0x6a8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	029a      	lsls	r2, r3, #10
 800a4c6:	23ff      	movs	r3, #255	; 0xff
 800a4c8:	029b      	lsls	r3, r3, #10
 800a4ca:	401a      	ands	r2, r3
 800a4cc:	23b8      	movs	r3, #184	; 0xb8
 800a4ce:	025b      	lsls	r3, r3, #9
 800a4d0:	0011      	movs	r1, r2
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f7f5 fea8 	bl	8000228 <__aeabi_uidivmod>
 800a4d8:	000b      	movs	r3, r1
 800a4da:	0adb      	lsrs	r3, r3, #11
 800a4dc:	18e3      	adds	r3, r4, r3
 800a4de:	2280      	movs	r2, #128	; 0x80
 800a4e0:	0252      	lsls	r2, r2, #9
 800a4e2:	4694      	mov	ip, r2
 800a4e4:	4463      	add	r3, ip
 800a4e6:	02dc      	lsls	r4, r3, #11
 800a4e8:	4b12      	ldr	r3, [pc, #72]	; (800a534 <EE_Init+0x6a8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	029a      	lsls	r2, r3, #10
 800a4ee:	23ff      	movs	r3, #255	; 0xff
 800a4f0:	029b      	lsls	r3, r3, #10
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	0019      	movs	r1, r3
 800a4f6:	23b8      	movs	r3, #184	; 0xb8
 800a4f8:	0258      	lsls	r0, r3, #9
 800a4fa:	f7f5 fe0f 	bl	800011c <__udivsi3>
 800a4fe:	0003      	movs	r3, r0
 800a500:	0019      	movs	r1, r3
 800a502:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <EE_Init+0x6a8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	029a      	lsls	r2, r3, #10
 800a508:	23ff      	movs	r3, #255	; 0xff
 800a50a:	029b      	lsls	r3, r3, #10
 800a50c:	4013      	ands	r3, r2
 800a50e:	434b      	muls	r3, r1
 800a510:	18e3      	adds	r3, r4, r3
 800a512:	0018      	movs	r0, r3
 800a514:	f001 fa6c 	bl	800b9f0 <GetPageState>
 800a518:	0003      	movs	r3, r0
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d104      	bne.n	800a528 <EE_Init+0x69c>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a51e:	231b      	movs	r3, #27
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a526:	e057      	b.n	800a5d8 <EE_Init+0x74c>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a528:	231b      	movs	r3, #27
 800a52a:	18fb      	adds	r3, r7, r3
 800a52c:	2201      	movs	r2, #1
 800a52e:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a530:	e052      	b.n	800a5d8 <EE_Init+0x74c>
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	1fff75e0 	.word	0x1fff75e0
 800a538:	2000013a 	.word	0x2000013a
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a53c:	4be0      	ldr	r3, [pc, #896]	; (800a8c0 <EE_Init+0xa34>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	029a      	lsls	r2, r3, #10
 800a542:	23ff      	movs	r3, #255	; 0xff
 800a544:	029b      	lsls	r3, r3, #10
 800a546:	401a      	ands	r2, r3
 800a548:	23b8      	movs	r3, #184	; 0xb8
 800a54a:	025b      	lsls	r3, r3, #9
 800a54c:	0011      	movs	r1, r2
 800a54e:	0018      	movs	r0, r3
 800a550:	f7f5 fe6a 	bl	8000228 <__aeabi_uidivmod>
 800a554:	000b      	movs	r3, r1
 800a556:	0adb      	lsrs	r3, r3, #11
 800a558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	3301      	adds	r3, #1
 800a55e:	2112      	movs	r1, #18
 800a560:	0018      	movs	r0, r3
 800a562:	f7f5 fe61 	bl	8000228 <__aeabi_uidivmod>
 800a566:	000b      	movs	r3, r1
 800a568:	001c      	movs	r4, r3
 800a56a:	4bd5      	ldr	r3, [pc, #852]	; (800a8c0 <EE_Init+0xa34>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	029a      	lsls	r2, r3, #10
 800a570:	23ff      	movs	r3, #255	; 0xff
 800a572:	029b      	lsls	r3, r3, #10
 800a574:	401a      	ands	r2, r3
 800a576:	23b8      	movs	r3, #184	; 0xb8
 800a578:	025b      	lsls	r3, r3, #9
 800a57a:	0011      	movs	r1, r2
 800a57c:	0018      	movs	r0, r3
 800a57e:	f7f5 fe53 	bl	8000228 <__aeabi_uidivmod>
 800a582:	000b      	movs	r3, r1
 800a584:	0adb      	lsrs	r3, r3, #11
 800a586:	18e3      	adds	r3, r4, r3
 800a588:	2280      	movs	r2, #128	; 0x80
 800a58a:	0252      	lsls	r2, r2, #9
 800a58c:	4694      	mov	ip, r2
 800a58e:	4463      	add	r3, ip
 800a590:	02dc      	lsls	r4, r3, #11
 800a592:	4bcb      	ldr	r3, [pc, #812]	; (800a8c0 <EE_Init+0xa34>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	029a      	lsls	r2, r3, #10
 800a598:	23ff      	movs	r3, #255	; 0xff
 800a59a:	029b      	lsls	r3, r3, #10
 800a59c:	4013      	ands	r3, r2
 800a59e:	0019      	movs	r1, r3
 800a5a0:	23b8      	movs	r3, #184	; 0xb8
 800a5a2:	0258      	lsls	r0, r3, #9
 800a5a4:	f7f5 fdba 	bl	800011c <__udivsi3>
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	0019      	movs	r1, r3
 800a5ac:	4bc4      	ldr	r3, [pc, #784]	; (800a8c0 <EE_Init+0xa34>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	029a      	lsls	r2, r3, #10
 800a5b2:	23ff      	movs	r3, #255	; 0xff
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	434b      	muls	r3, r1
 800a5ba:	18e3      	adds	r3, r4, r3
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f001 fa17 	bl	800b9f0 <GetPageState>
 800a5c2:	1e03      	subs	r3, r0, #0
 800a5c4:	d104      	bne.n	800a5d0 <EE_Init+0x744>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a5c6:	231b      	movs	r3, #27
 800a5c8:	18fb      	adds	r3, r7, r3
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	e003      	b.n	800a5d8 <EE_Init+0x74c>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a5d0:	231b      	movs	r3, #27
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 800a5d8:	231b      	movs	r3, #27
 800a5da:	18fb      	adds	r3, r7, r3
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d113      	bne.n	800a60a <EE_Init+0x77e>
      {
        if (nbactivepage == 0U)
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d107      	bne.n	800a5f8 <EE_Init+0x76c>
        {
          ubCurrentActivePage = page;
 800a5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4bb5      	ldr	r3, [pc, #724]	; (800a8c4 <EE_Init+0xa38>)
 800a5ee:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a5f6:	e008      	b.n	800a60a <EE_Init+0x77e>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 800a5f8:	230a      	movs	r3, #10
 800a5fa:	e1e8      	b.n	800a9ce <EE_Init+0xb42>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800a5fc:	231a      	movs	r3, #26
 800a5fe:	18fb      	adds	r3, r7, r3
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b03      	cmp	r3, #3
 800a604:	d101      	bne.n	800a60a <EE_Init+0x77e>
    {
      lastvalidpage = page;
 800a606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60c:	3301      	adds	r3, #1
 800a60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a610:	4bab      	ldr	r3, [pc, #684]	; (800a8c0 <EE_Init+0xa34>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	029a      	lsls	r2, r3, #10
 800a616:	23ff      	movs	r3, #255	; 0xff
 800a618:	029b      	lsls	r3, r3, #10
 800a61a:	401a      	ands	r2, r3
 800a61c:	23b8      	movs	r3, #184	; 0xb8
 800a61e:	025b      	lsls	r3, r3, #9
 800a620:	0011      	movs	r1, r2
 800a622:	0018      	movs	r0, r3
 800a624:	f7f5 fe00 	bl	8000228 <__aeabi_uidivmod>
 800a628:	000b      	movs	r3, r1
 800a62a:	0adb      	lsrs	r3, r3, #11
 800a62c:	3312      	adds	r3, #18
 800a62e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a630:	429a      	cmp	r2, r3
 800a632:	d200      	bcs.n	800a636 <EE_Init+0x7aa>
 800a634:	e6e1      	b.n	800a3fa <EE_Init+0x56e>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d133      	bne.n	800a6a4 <EE_Init+0x818>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 800a63c:	4ba0      	ldr	r3, [pc, #640]	; (800a8c0 <EE_Init+0xa34>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	029a      	lsls	r2, r3, #10
 800a642:	23ff      	movs	r3, #255	; 0xff
 800a644:	029b      	lsls	r3, r3, #10
 800a646:	401a      	ands	r2, r3
 800a648:	23b8      	movs	r3, #184	; 0xb8
 800a64a:	025b      	lsls	r3, r3, #9
 800a64c:	0011      	movs	r1, r2
 800a64e:	0018      	movs	r0, r3
 800a650:	f7f5 fdea 	bl	8000228 <__aeabi_uidivmod>
 800a654:	000b      	movs	r3, r1
 800a656:	0adb      	lsrs	r3, r3, #11
 800a658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	3301      	adds	r3, #1
 800a65e:	2112      	movs	r1, #18
 800a660:	0018      	movs	r0, r3
 800a662:	f7f5 fde1 	bl	8000228 <__aeabi_uidivmod>
 800a666:	000b      	movs	r3, r1
 800a668:	b2dc      	uxtb	r4, r3
 800a66a:	4b95      	ldr	r3, [pc, #596]	; (800a8c0 <EE_Init+0xa34>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	029a      	lsls	r2, r3, #10
 800a670:	23ff      	movs	r3, #255	; 0xff
 800a672:	029b      	lsls	r3, r3, #10
 800a674:	401a      	ands	r2, r3
 800a676:	23b8      	movs	r3, #184	; 0xb8
 800a678:	025b      	lsls	r3, r3, #9
 800a67a:	0011      	movs	r1, r2
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7f5 fdd3 	bl	8000228 <__aeabi_uidivmod>
 800a682:	000b      	movs	r3, r1
 800a684:	0adb      	lsrs	r3, r3, #11
 800a686:	b2db      	uxtb	r3, r3
 800a688:	18e3      	adds	r3, r4, r3
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	4b8d      	ldr	r3, [pc, #564]	; (800a8c4 <EE_Init+0xa38>)
 800a68e:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800a690:	4b8c      	ldr	r3, [pc, #560]	; (800a8c4 <EE_Init+0xa38>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2102      	movs	r1, #2
 800a696:	0018      	movs	r0, r3
 800a698:	f001 f8d8 	bl	800b84c <SetPageState>
 800a69c:	1e03      	subs	r3, r0, #0
 800a69e:	d001      	beq.n	800a6a4 <EE_Init+0x818>
    {
      return EE_WRITE_ERROR;
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e194      	b.n	800a9ce <EE_Init+0xb42>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800a6a4:	4b88      	ldr	r3, [pc, #544]	; (800a8c8 <EE_Init+0xa3c>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800a6aa:	4b88      	ldr	r3, [pc, #544]	; (800a8cc <EE_Init+0xa40>)
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a6b0:	2320      	movs	r3, #32
 800a6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b4:	e037      	b.n	800a726 <EE_Init+0x89a>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800a6b6:	4b83      	ldr	r3, [pc, #524]	; (800a8c4 <EE_Init+0xa38>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2280      	movs	r2, #128	; 0x80
 800a6bc:	0252      	lsls	r2, r2, #9
 800a6be:	4694      	mov	ip, r2
 800a6c0:	4463      	add	r3, ip
 800a6c2:	02dc      	lsls	r4, r3, #11
 800a6c4:	4b7e      	ldr	r3, [pc, #504]	; (800a8c0 <EE_Init+0xa34>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	029a      	lsls	r2, r3, #10
 800a6ca:	23ff      	movs	r3, #255	; 0xff
 800a6cc:	029b      	lsls	r3, r3, #10
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	0019      	movs	r1, r3
 800a6d2:	23b8      	movs	r3, #184	; 0xb8
 800a6d4:	0258      	lsls	r0, r3, #9
 800a6d6:	f7f5 fd21 	bl	800011c <__udivsi3>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	0019      	movs	r1, r3
 800a6de:	4b78      	ldr	r3, [pc, #480]	; (800a8c0 <EE_Init+0xa34>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	029a      	lsls	r2, r3, #10
 800a6e4:	23ff      	movs	r3, #255	; 0xff
 800a6e6:	029b      	lsls	r3, r3, #10
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	434b      	muls	r3, r1
 800a6ec:	18e2      	adds	r2, r4, r3
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	18d3      	adds	r3, r2, r3
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	613a      	str	r2, [r7, #16]
 800a6f8:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) && (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	d103      	bne.n	800a708 <EE_Init+0x87c>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	3301      	adds	r3, #1
 800a704:	d100      	bne.n	800a708 <EE_Init+0x87c>
      uhNbWrittenElements++;
      uwAddressNextWrite += EE_ELEMENT_SIZE;
    }
    else /* no more element in the page */
    {
      break;
 800a706:	e013      	b.n	800a730 <EE_Init+0x8a4>
      uhNbWrittenElements++;
 800a708:	4b6f      	ldr	r3, [pc, #444]	; (800a8c8 <EE_Init+0xa3c>)
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	b29a      	uxth	r2, r3
 800a710:	4b6d      	ldr	r3, [pc, #436]	; (800a8c8 <EE_Init+0xa3c>)
 800a712:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 800a714:	4b6d      	ldr	r3, [pc, #436]	; (800a8cc <EE_Init+0xa40>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3308      	adds	r3, #8
 800a71a:	001a      	movs	r2, r3
 800a71c:	4b6b      	ldr	r3, [pc, #428]	; (800a8cc <EE_Init+0xa40>)
 800a71e:	601a      	str	r2, [r3, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	3308      	adds	r3, #8
 800a724:	637b      	str	r3, [r7, #52]	; 0x34
 800a726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a728:	2380      	movs	r3, #128	; 0x80
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d3c2      	bcc.n	800a6b6 <EE_Init+0x82a>
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800a730:	4b64      	ldr	r3, [pc, #400]	; (800a8c4 <EE_Init+0xa38>)
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 800a736:	4b63      	ldr	r3, [pc, #396]	; (800a8c4 <EE_Init+0xa38>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a73c:	e057      	b.n	800a7ee <EE_Init+0x962>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800a73e:	4b60      	ldr	r3, [pc, #384]	; (800a8c0 <EE_Init+0xa34>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	029a      	lsls	r2, r3, #10
 800a744:	23ff      	movs	r3, #255	; 0xff
 800a746:	029b      	lsls	r3, r3, #10
 800a748:	401a      	ands	r2, r3
 800a74a:	23b8      	movs	r3, #184	; 0xb8
 800a74c:	025b      	lsls	r3, r3, #9
 800a74e:	0011      	movs	r1, r2
 800a750:	0018      	movs	r0, r3
 800a752:	f7f5 fd69 	bl	8000228 <__aeabi_uidivmod>
 800a756:	000b      	movs	r3, r1
 800a758:	0adb      	lsrs	r3, r3, #11
 800a75a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	3311      	adds	r3, #17
 800a760:	2112      	movs	r1, #18
 800a762:	0018      	movs	r0, r3
 800a764:	f7f5 fd60 	bl	8000228 <__aeabi_uidivmod>
 800a768:	000b      	movs	r3, r1
 800a76a:	001c      	movs	r4, r3
 800a76c:	4b54      	ldr	r3, [pc, #336]	; (800a8c0 <EE_Init+0xa34>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	029a      	lsls	r2, r3, #10
 800a772:	23ff      	movs	r3, #255	; 0xff
 800a774:	029b      	lsls	r3, r3, #10
 800a776:	401a      	ands	r2, r3
 800a778:	23b8      	movs	r3, #184	; 0xb8
 800a77a:	025b      	lsls	r3, r3, #9
 800a77c:	0011      	movs	r1, r2
 800a77e:	0018      	movs	r0, r3
 800a780:	f7f5 fd52 	bl	8000228 <__aeabi_uidivmod>
 800a784:	000b      	movs	r3, r1
 800a786:	0adb      	lsrs	r3, r3, #11
 800a788:	18e3      	adds	r3, r4, r3
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800a78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78e:	2280      	movs	r2, #128	; 0x80
 800a790:	0252      	lsls	r2, r2, #9
 800a792:	4694      	mov	ip, r2
 800a794:	4463      	add	r3, ip
 800a796:	02dc      	lsls	r4, r3, #11
 800a798:	4b49      	ldr	r3, [pc, #292]	; (800a8c0 <EE_Init+0xa34>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	029a      	lsls	r2, r3, #10
 800a79e:	23ff      	movs	r3, #255	; 0xff
 800a7a0:	029b      	lsls	r3, r3, #10
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	0019      	movs	r1, r3
 800a7a6:	23b8      	movs	r3, #184	; 0xb8
 800a7a8:	0258      	lsls	r0, r3, #9
 800a7aa:	f7f5 fcb7 	bl	800011c <__udivsi3>
 800a7ae:	0003      	movs	r3, r0
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	4b43      	ldr	r3, [pc, #268]	; (800a8c0 <EE_Init+0xa34>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	029a      	lsls	r2, r3, #10
 800a7b8:	23ff      	movs	r3, #255	; 0xff
 800a7ba:	029b      	lsls	r3, r3, #10
 800a7bc:	4013      	ands	r3, r2
 800a7be:	434b      	muls	r3, r1
 800a7c0:	18e3      	adds	r3, r4, r3
 800a7c2:	251a      	movs	r5, #26
 800a7c4:	197c      	adds	r4, r7, r5
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	f001 f912 	bl	800b9f0 <GetPageState>
 800a7cc:	0003      	movs	r3, r0
 800a7ce:	7023      	strb	r3, [r4, #0]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800a7d0:	197b      	adds	r3, r7, r5
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d108      	bne.n	800a7ea <EE_Init+0x95e>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800a7d8:	4b3b      	ldr	r3, [pc, #236]	; (800a8c8 <EE_Init+0xa3c>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	33fc      	adds	r3, #252	; 0xfc
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	4b39      	ldr	r3, [pc, #228]	; (800a8c8 <EE_Init+0xa3c>)
 800a7e2:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800a7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e6:	623b      	str	r3, [r7, #32]
 800a7e8:	e001      	b.n	800a7ee <EE_Init+0x962>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	e0ef      	b.n	800a9ce <EE_Init+0xb42>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a7ee:	4b34      	ldr	r3, [pc, #208]	; (800a8c0 <EE_Init+0xa34>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	029a      	lsls	r2, r3, #10
 800a7f4:	23ff      	movs	r3, #255	; 0xff
 800a7f6:	029b      	lsls	r3, r3, #10
 800a7f8:	401a      	ands	r2, r3
 800a7fa:	23b8      	movs	r3, #184	; 0xb8
 800a7fc:	025b      	lsls	r3, r3, #9
 800a7fe:	0011      	movs	r1, r2
 800a800:	0018      	movs	r0, r3
 800a802:	f7f5 fd11 	bl	8000228 <__aeabi_uidivmod>
 800a806:	000b      	movs	r3, r1
 800a808:	0adb      	lsrs	r3, r3, #11
 800a80a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d011      	beq.n	800a834 <EE_Init+0x9a8>
 800a810:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <EE_Init+0xa34>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	029a      	lsls	r2, r3, #10
 800a816:	23ff      	movs	r3, #255	; 0xff
 800a818:	029b      	lsls	r3, r3, #10
 800a81a:	401a      	ands	r2, r3
 800a81c:	23b8      	movs	r3, #184	; 0xb8
 800a81e:	025b      	lsls	r3, r3, #9
 800a820:	0011      	movs	r1, r2
 800a822:	0018      	movs	r0, r3
 800a824:	f7f5 fd00 	bl	8000228 <__aeabi_uidivmod>
 800a828:	000b      	movs	r3, r1
 800a82a:	0adb      	lsrs	r3, r3, #11
 800a82c:	3309      	adds	r3, #9
 800a82e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a830:	429a      	cmp	r2, r3
 800a832:	d184      	bne.n	800a73e <EE_Init+0x8b2>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800a834:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <EE_Init+0xa38>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	001c      	movs	r4, r3
 800a83a:	4b21      	ldr	r3, [pc, #132]	; (800a8c0 <EE_Init+0xa34>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	029a      	lsls	r2, r3, #10
 800a840:	23ff      	movs	r3, #255	; 0xff
 800a842:	029b      	lsls	r3, r3, #10
 800a844:	401a      	ands	r2, r3
 800a846:	23b8      	movs	r3, #184	; 0xb8
 800a848:	025b      	lsls	r3, r3, #9
 800a84a:	0011      	movs	r1, r2
 800a84c:	0018      	movs	r0, r3
 800a84e:	f7f5 fceb 	bl	8000228 <__aeabi_uidivmod>
 800a852:	000b      	movs	r3, r1
 800a854:	0adb      	lsrs	r3, r3, #11
 800a856:	1ae3      	subs	r3, r4, r3
 800a858:	3301      	adds	r3, #1
 800a85a:	2112      	movs	r1, #18
 800a85c:	0018      	movs	r0, r3
 800a85e:	f7f5 fce3 	bl	8000228 <__aeabi_uidivmod>
 800a862:	000b      	movs	r3, r1
 800a864:	001c      	movs	r4, r3
 800a866:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <EE_Init+0xa34>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	029a      	lsls	r2, r3, #10
 800a86c:	23ff      	movs	r3, #255	; 0xff
 800a86e:	029b      	lsls	r3, r3, #10
 800a870:	401a      	ands	r2, r3
 800a872:	23b8      	movs	r3, #184	; 0xb8
 800a874:	025b      	lsls	r3, r3, #9
 800a876:	0011      	movs	r1, r2
 800a878:	0018      	movs	r0, r3
 800a87a:	f7f5 fcd5 	bl	8000228 <__aeabi_uidivmod>
 800a87e:	000b      	movs	r3, r1
 800a880:	0adb      	lsrs	r3, r3, #11
 800a882:	18e3      	adds	r3, r4, r3
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800a886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a888:	2280      	movs	r2, #128	; 0x80
 800a88a:	0252      	lsls	r2, r2, #9
 800a88c:	4694      	mov	ip, r2
 800a88e:	4463      	add	r3, ip
 800a890:	02dc      	lsls	r4, r3, #11
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <EE_Init+0xa34>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	029a      	lsls	r2, r3, #10
 800a898:	23ff      	movs	r3, #255	; 0xff
 800a89a:	029b      	lsls	r3, r3, #10
 800a89c:	4013      	ands	r3, r2
 800a89e:	0019      	movs	r1, r3
 800a8a0:	23b8      	movs	r3, #184	; 0xb8
 800a8a2:	0258      	lsls	r0, r3, #9
 800a8a4:	f7f5 fc3a 	bl	800011c <__udivsi3>
 800a8a8:	0003      	movs	r3, r0
 800a8aa:	0019      	movs	r1, r3
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <EE_Init+0xa34>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	029a      	lsls	r2, r3, #10
 800a8b2:	23ff      	movs	r3, #255	; 0xff
 800a8b4:	029b      	lsls	r3, r3, #10
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	434b      	muls	r3, r1
 800a8ba:	18e3      	adds	r3, r4, r3
 800a8bc:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 800a8be:	e06a      	b.n	800a996 <EE_Init+0xb0a>
 800a8c0:	1fff75e0 	.word	0x1fff75e0
 800a8c4:	2000013a 	.word	0x2000013a
 800a8c8:	20000138 	.word	0x20000138
 800a8cc:	20000008 	.word	0x20000008
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a8d0:	1dfb      	adds	r3, r7, #7
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d108      	bne.n	800a8ea <EE_Init+0xa5e>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8da:	2101      	movs	r1, #1
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f001 f926 	bl	800bb2e <FI_PageErase>
 800a8e2:	1e03      	subs	r3, r0, #0
 800a8e4:	d014      	beq.n	800a910 <EE_Init+0xa84>
      {
        return EE_ERASE_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e071      	b.n	800a9ce <EE_Init+0xb42>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a8ea:	2380      	movs	r3, #128	; 0x80
 800a8ec:	011a      	lsls	r2, r3, #4
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	0011      	movs	r1, r2
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f000 fb33 	bl	800af5e <VerifyPageFullyErased>
 800a8f8:	0003      	movs	r3, r0
 800a8fa:	2b10      	cmp	r3, #16
 800a8fc:	d108      	bne.n	800a910 <EE_Init+0xa84>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a900:	2101      	movs	r1, #1
 800a902:	0018      	movs	r0, r3
 800a904:	f001 f913 	bl	800bb2e <FI_PageErase>
 800a908:	1e03      	subs	r3, r0, #0
 800a90a:	d001      	beq.n	800a910 <EE_Init+0xa84>
        {
          return EE_ERASE_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e05e      	b.n	800a9ce <EE_Init+0xb42>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 800a910:	4b31      	ldr	r3, [pc, #196]	; (800a9d8 <EE_Init+0xb4c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	029a      	lsls	r2, r3, #10
 800a916:	23ff      	movs	r3, #255	; 0xff
 800a918:	029b      	lsls	r3, r3, #10
 800a91a:	401a      	ands	r2, r3
 800a91c:	23b8      	movs	r3, #184	; 0xb8
 800a91e:	025b      	lsls	r3, r3, #9
 800a920:	0011      	movs	r1, r2
 800a922:	0018      	movs	r0, r3
 800a924:	f7f5 fc80 	bl	8000228 <__aeabi_uidivmod>
 800a928:	000b      	movs	r3, r1
 800a92a:	0adb      	lsrs	r3, r3, #11
 800a92c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	3301      	adds	r3, #1
 800a932:	2112      	movs	r1, #18
 800a934:	0018      	movs	r0, r3
 800a936:	f7f5 fc77 	bl	8000228 <__aeabi_uidivmod>
 800a93a:	000b      	movs	r3, r1
 800a93c:	001c      	movs	r4, r3
 800a93e:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <EE_Init+0xb4c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	029a      	lsls	r2, r3, #10
 800a944:	23ff      	movs	r3, #255	; 0xff
 800a946:	029b      	lsls	r3, r3, #10
 800a948:	401a      	ands	r2, r3
 800a94a:	23b8      	movs	r3, #184	; 0xb8
 800a94c:	025b      	lsls	r3, r3, #9
 800a94e:	0011      	movs	r1, r2
 800a950:	0018      	movs	r0, r3
 800a952:	f7f5 fc69 	bl	8000228 <__aeabi_uidivmod>
 800a956:	000b      	movs	r3, r1
 800a958:	0adb      	lsrs	r3, r3, #11
 800a95a:	18e3      	adds	r3, r4, r3
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800a95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a960:	2280      	movs	r2, #128	; 0x80
 800a962:	0252      	lsls	r2, r2, #9
 800a964:	4694      	mov	ip, r2
 800a966:	4463      	add	r3, ip
 800a968:	02dc      	lsls	r4, r3, #11
 800a96a:	4b1b      	ldr	r3, [pc, #108]	; (800a9d8 <EE_Init+0xb4c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	029a      	lsls	r2, r3, #10
 800a970:	23ff      	movs	r3, #255	; 0xff
 800a972:	029b      	lsls	r3, r3, #10
 800a974:	4013      	ands	r3, r2
 800a976:	0019      	movs	r1, r3
 800a978:	23b8      	movs	r3, #184	; 0xb8
 800a97a:	0258      	lsls	r0, r3, #9
 800a97c:	f7f5 fbce 	bl	800011c <__udivsi3>
 800a980:	0003      	movs	r3, r0
 800a982:	0019      	movs	r1, r3
 800a984:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <EE_Init+0xb4c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	029a      	lsls	r2, r3, #10
 800a98a:	23ff      	movs	r3, #255	; 0xff
 800a98c:	029b      	lsls	r3, r3, #10
 800a98e:	4013      	ands	r3, r2
 800a990:	434b      	muls	r3, r1
 800a992:	18e3      	adds	r3, r4, r3
 800a994:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 800a996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d198      	bne.n	800a8d0 <EE_Init+0xa44>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800a99e:	f001 f8f1 	bl	800bb84 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d111      	bne.n	800a9cc <EE_Init+0xb40>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 800a9a8:	250e      	movs	r5, #14
 800a9aa:	197c      	adds	r4, r7, r5
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f000 feb2 	bl	800b718 <VerifyPagesFullWriteVariable>
 800a9b4:	0003      	movs	r3, r0
 800a9b6:	8023      	strh	r3, [r4, #0]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 800a9b8:	197b      	adds	r3, r7, r5
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <EE_Init+0xb40>
 800a9c0:	197b      	adds	r3, r7, r5
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	2b12      	cmp	r3, #18
 800a9c6:	d001      	beq.n	800a9cc <EE_Init+0xb40>
    {
      return EE_WRITE_ERROR;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e000      	b.n	800a9ce <EE_Init+0xb42>
    }
#endif
  }

  return EE_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b010      	add	sp, #64	; 0x40
 800a9d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9d6:	46c0      	nop			; (mov r8, r8)
 800a9d8:	1fff75e0 	.word	0x1fff75e0

0800a9dc <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	0002      	movs	r2, r0
 800a9e4:	1dfb      	adds	r3, r7, #7
 800a9e6:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800a9ec:	f001 f8cf 	bl	800bb8e <FI_CheckBankConfig>
 800a9f0:	1e03      	subs	r3, r0, #0
 800a9f2:	d001      	beq.n	800a9f8 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 800a9f4:	230e      	movs	r3, #14
 800a9f6:	e08e      	b.n	800ab16 <EE_Format+0x13a>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a9f8:	4b49      	ldr	r3, [pc, #292]	; (800ab20 <EE_Format+0x144>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	029a      	lsls	r2, r3, #10
 800a9fe:	23ff      	movs	r3, #255	; 0xff
 800aa00:	029b      	lsls	r3, r3, #10
 800aa02:	401a      	ands	r2, r3
 800aa04:	23b8      	movs	r3, #184	; 0xb8
 800aa06:	025b      	lsls	r3, r3, #9
 800aa08:	0011      	movs	r1, r2
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f7f5 fc0c 	bl	8000228 <__aeabi_uidivmod>
 800aa10:	000b      	movs	r3, r1
 800aa12:	0adb      	lsrs	r3, r3, #11
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e03c      	b.n	800aa92 <EE_Format+0xb6>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800aa18:	1dfb      	adds	r3, r7, #7
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d108      	bne.n	800aa32 <EE_Format+0x56>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2101      	movs	r1, #1
 800aa24:	0018      	movs	r0, r3
 800aa26:	f001 f882 	bl	800bb2e <FI_PageErase>
 800aa2a:	1e03      	subs	r3, r0, #0
 800aa2c:	d02e      	beq.n	800aa8c <EE_Format+0xb0>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e071      	b.n	800ab16 <EE_Format+0x13a>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2280      	movs	r2, #128	; 0x80
 800aa36:	0252      	lsls	r2, r2, #9
 800aa38:	4694      	mov	ip, r2
 800aa3a:	4463      	add	r3, ip
 800aa3c:	02dc      	lsls	r4, r3, #11
 800aa3e:	4b38      	ldr	r3, [pc, #224]	; (800ab20 <EE_Format+0x144>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	029a      	lsls	r2, r3, #10
 800aa44:	23ff      	movs	r3, #255	; 0xff
 800aa46:	029b      	lsls	r3, r3, #10
 800aa48:	4013      	ands	r3, r2
 800aa4a:	0019      	movs	r1, r3
 800aa4c:	23b8      	movs	r3, #184	; 0xb8
 800aa4e:	0258      	lsls	r0, r3, #9
 800aa50:	f7f5 fb64 	bl	800011c <__udivsi3>
 800aa54:	0003      	movs	r3, r0
 800aa56:	0019      	movs	r1, r3
 800aa58:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <EE_Format+0x144>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	029a      	lsls	r2, r3, #10
 800aa5e:	23ff      	movs	r3, #255	; 0xff
 800aa60:	029b      	lsls	r3, r3, #10
 800aa62:	4013      	ands	r3, r2
 800aa64:	434b      	muls	r3, r1
 800aa66:	18e3      	adds	r3, r4, r3
 800aa68:	2280      	movs	r2, #128	; 0x80
 800aa6a:	0112      	lsls	r2, r2, #4
 800aa6c:	0011      	movs	r1, r2
 800aa6e:	0018      	movs	r0, r3
 800aa70:	f000 fa75 	bl	800af5e <VerifyPageFullyErased>
 800aa74:	0003      	movs	r3, r0
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d108      	bne.n	800aa8c <EE_Format+0xb0>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f001 f855 	bl	800bb2e <FI_PageErase>
 800aa84:	1e03      	subs	r3, r0, #0
 800aa86:	d001      	beq.n	800aa8c <EE_Format+0xb0>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e044      	b.n	800ab16 <EE_Format+0x13a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	4b23      	ldr	r3, [pc, #140]	; (800ab20 <EE_Format+0x144>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	029a      	lsls	r2, r3, #10
 800aa98:	23ff      	movs	r3, #255	; 0xff
 800aa9a:	029b      	lsls	r3, r3, #10
 800aa9c:	401a      	ands	r2, r3
 800aa9e:	23b8      	movs	r3, #184	; 0xb8
 800aaa0:	025b      	lsls	r3, r3, #9
 800aaa2:	0011      	movs	r1, r2
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	f7f5 fbbf 	bl	8000228 <__aeabi_uidivmod>
 800aaaa:	000b      	movs	r3, r1
 800aaac:	0adb      	lsrs	r3, r3, #11
 800aaae:	3312      	adds	r3, #18
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d3b0      	bcc.n	800aa18 <EE_Format+0x3c>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800aab6:	f001 f865 	bl	800bb84 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800aaba:	4b19      	ldr	r3, [pc, #100]	; (800ab20 <EE_Format+0x144>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	029a      	lsls	r2, r3, #10
 800aac0:	23ff      	movs	r3, #255	; 0xff
 800aac2:	029b      	lsls	r3, r3, #10
 800aac4:	401a      	ands	r2, r3
 800aac6:	23b8      	movs	r3, #184	; 0xb8
 800aac8:	025b      	lsls	r3, r3, #9
 800aaca:	0011      	movs	r1, r2
 800aacc:	0018      	movs	r0, r3
 800aace:	f7f5 fbab 	bl	8000228 <__aeabi_uidivmod>
 800aad2:	000b      	movs	r3, r1
 800aad4:	0adb      	lsrs	r3, r3, #11
 800aad6:	2102      	movs	r1, #2
 800aad8:	0018      	movs	r0, r3
 800aada:	f000 feb7 	bl	800b84c <SetPageState>
 800aade:	1e03      	subs	r3, r0, #0
 800aae0:	d001      	beq.n	800aae6 <EE_Format+0x10a>
  {
    return EE_WRITE_ERROR;
 800aae2:	2302      	movs	r3, #2
 800aae4:	e017      	b.n	800ab16 <EE_Format+0x13a>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800aae6:	4b0f      	ldr	r3, [pc, #60]	; (800ab24 <EE_Format+0x148>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 800aaec:	4b0c      	ldr	r3, [pc, #48]	; (800ab20 <EE_Format+0x144>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	029a      	lsls	r2, r3, #10
 800aaf2:	23ff      	movs	r3, #255	; 0xff
 800aaf4:	029b      	lsls	r3, r3, #10
 800aaf6:	401a      	ands	r2, r3
 800aaf8:	23b8      	movs	r3, #184	; 0xb8
 800aafa:	025b      	lsls	r3, r3, #9
 800aafc:	0011      	movs	r1, r2
 800aafe:	0018      	movs	r0, r3
 800ab00:	f7f5 fb92 	bl	8000228 <__aeabi_uidivmod>
 800ab04:	000b      	movs	r3, r1
 800ab06:	0adb      	lsrs	r3, r3, #11
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <EE_Format+0x14c>)
 800ab0c:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800ab0e:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <EE_Format+0x150>)
 800ab10:	2220      	movs	r2, #32
 800ab12:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	0018      	movs	r0, r3
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	b005      	add	sp, #20
 800ab1c:	bd90      	pop	{r4, r7, pc}
 800ab1e:	46c0      	nop			; (mov r8, r8)
 800ab20:	1fff75e0 	.word	0x1fff75e0
 800ab24:	20000138 	.word	0x20000138
 800ab28:	2000013a 	.word	0x2000013a
 800ab2c:	20000008 	.word	0x20000008

0800ab30 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 800ab30:	b5b0      	push	{r4, r5, r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	0002      	movs	r2, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	1dbb      	adds	r3, r7, #6
 800ab3c:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800ab3e:	1dbb      	adds	r3, r7, #6
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01b      	beq.n	800ab7e <EE_ReadVariable32bits+0x4e>
 800ab46:	1dbb      	adds	r3, r7, #6
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	4a0f      	ldr	r2, [pc, #60]	; (800ab88 <EE_ReadVariable32bits+0x58>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d016      	beq.n	800ab7e <EE_ReadVariable32bits+0x4e>
  {
    EE_DATA_TYPE datatmp = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800ab54:	250e      	movs	r5, #14
 800ab56:	197b      	adds	r3, r7, r5
 800ab58:	2200      	movs	r2, #0
 800ab5a:	801a      	strh	r2, [r3, #0]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 800ab5c:	197c      	adds	r4, r7, r5
 800ab5e:	2308      	movs	r3, #8
 800ab60:	18fa      	adds	r2, r7, r3
 800ab62:	1dbb      	adds	r3, r7, #6
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	0011      	movs	r1, r2
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f000 f8d5 	bl	800ad18 <ReadVariable>
 800ab6e:	0003      	movs	r3, r0
 800ab70:	8023      	strh	r3, [r4, #0]
    *pData = (uint32_t) datatmp;
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	601a      	str	r2, [r3, #0]

    return status;
 800ab78:	197b      	adds	r3, r7, r5
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	e000      	b.n	800ab80 <EE_ReadVariable32bits+0x50>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800ab7e:	2308      	movs	r3, #8
  } 
}
 800ab80:	0018      	movs	r0, r3
 800ab82:	46bd      	mov	sp, r7
 800ab84:	b004      	add	sp, #16
 800ab86:	bdb0      	pop	{r4, r5, r7, pc}
 800ab88:	0000ffff 	.word	0x0000ffff

0800ab8c <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	0002      	movs	r2, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	1dbb      	adds	r3, r7, #6
 800ab98:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800ab9a:	1dbb      	adds	r3, r7, #6
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00d      	beq.n	800abbe <EE_WriteVariable32bits+0x32>
 800aba2:	1dbb      	adds	r3, r7, #6
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <EE_WriteVariable32bits+0x3c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d008      	beq.n	800abbe <EE_WriteVariable32bits+0x32>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	1dbb      	adds	r3, r7, #6
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	0011      	movs	r1, r2
 800abb4:	0018      	movs	r0, r3
 800abb6:	f000 f9a9 	bl	800af0c <WriteVariable>
 800abba:	0003      	movs	r3, r0
 800abbc:	e000      	b.n	800abc0 <EE_WriteVariable32bits+0x34>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800abbe:	2308      	movs	r3, #8
  } 
}
 800abc0:	0018      	movs	r0, r3
 800abc2:	46bd      	mov	sp, r7
 800abc4:	b002      	add	sp, #8
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	0000ffff 	.word	0x0000ffff

0800abcc <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	2300      	movs	r3, #0
 800abd8:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	2300      	movs	r3, #0
 800abe0:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800abe2:	1dfb      	adds	r3, r7, #7
 800abe4:	2205      	movs	r2, #5
 800abe6:	701a      	strb	r2, [r3, #0]
 800abe8:	1dbb      	adds	r3, r7, #6
 800abea:	2205      	movs	r2, #5
 800abec:	701a      	strb	r2, [r3, #0]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800abee:	4b49      	ldr	r3, [pc, #292]	; (800ad14 <EE_CleanUp+0x148>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	029a      	lsls	r2, r3, #10
 800abf4:	23ff      	movs	r3, #255	; 0xff
 800abf6:	029b      	lsls	r3, r3, #10
 800abf8:	401a      	ands	r2, r3
 800abfa:	23b8      	movs	r3, #184	; 0xb8
 800abfc:	025b      	lsls	r3, r3, #9
 800abfe:	0011      	movs	r1, r2
 800ac00:	0018      	movs	r0, r3
 800ac02:	f7f5 fb11 	bl	8000228 <__aeabi_uidivmod>
 800ac06:	000b      	movs	r3, r1
 800ac08:	0adb      	lsrs	r3, r3, #11
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	e06b      	b.n	800ace6 <EE_CleanUp+0x11a>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2280      	movs	r2, #128	; 0x80
 800ac12:	0252      	lsls	r2, r2, #9
 800ac14:	4694      	mov	ip, r2
 800ac16:	4463      	add	r3, ip
 800ac18:	02dc      	lsls	r4, r3, #11
 800ac1a:	4b3e      	ldr	r3, [pc, #248]	; (800ad14 <EE_CleanUp+0x148>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	029a      	lsls	r2, r3, #10
 800ac20:	23ff      	movs	r3, #255	; 0xff
 800ac22:	029b      	lsls	r3, r3, #10
 800ac24:	4013      	ands	r3, r2
 800ac26:	0019      	movs	r1, r3
 800ac28:	23b8      	movs	r3, #184	; 0xb8
 800ac2a:	0258      	lsls	r0, r3, #9
 800ac2c:	f7f5 fa76 	bl	800011c <__udivsi3>
 800ac30:	0003      	movs	r3, r0
 800ac32:	0019      	movs	r1, r3
 800ac34:	4b37      	ldr	r3, [pc, #220]	; (800ad14 <EE_CleanUp+0x148>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	029a      	lsls	r2, r3, #10
 800ac3a:	23ff      	movs	r3, #255	; 0xff
 800ac3c:	029b      	lsls	r3, r3, #10
 800ac3e:	4013      	ands	r3, r2
 800ac40:	434b      	muls	r3, r1
 800ac42:	18e3      	adds	r3, r4, r3
 800ac44:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800ac46:	1dfc      	adds	r4, r7, #7
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f000 fed0 	bl	800b9f0 <GetPageState>
 800ac50:	0003      	movs	r3, r0
 800ac52:	7023      	strb	r3, [r4, #0]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800ac54:	1dfb      	adds	r3, r7, #7
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d141      	bne.n	800ace0 <EE_CleanUp+0x114>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	613b      	str	r3, [r7, #16]
 800ac62:	e02b      	b.n	800acbc <EE_CleanUp+0xf0>
      {
        pageaddress = PAGE_ADDRESS(page);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2280      	movs	r2, #128	; 0x80
 800ac68:	0252      	lsls	r2, r2, #9
 800ac6a:	4694      	mov	ip, r2
 800ac6c:	4463      	add	r3, ip
 800ac6e:	02dc      	lsls	r4, r3, #11
 800ac70:	4b28      	ldr	r3, [pc, #160]	; (800ad14 <EE_CleanUp+0x148>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	029a      	lsls	r2, r3, #10
 800ac76:	23ff      	movs	r3, #255	; 0xff
 800ac78:	029b      	lsls	r3, r3, #10
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	0019      	movs	r1, r3
 800ac7e:	23b8      	movs	r3, #184	; 0xb8
 800ac80:	0258      	lsls	r0, r3, #9
 800ac82:	f7f5 fa4b 	bl	800011c <__udivsi3>
 800ac86:	0003      	movs	r3, r0
 800ac88:	0019      	movs	r1, r3
 800ac8a:	4b22      	ldr	r3, [pc, #136]	; (800ad14 <EE_CleanUp+0x148>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	029a      	lsls	r2, r3, #10
 800ac90:	23ff      	movs	r3, #255	; 0xff
 800ac92:	029b      	lsls	r3, r3, #10
 800ac94:	4013      	ands	r3, r2
 800ac96:	434b      	muls	r3, r1
 800ac98:	18e3      	adds	r3, r4, r3
 800ac9a:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800ac9c:	1dbc      	adds	r4, r7, #6
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	0018      	movs	r0, r3
 800aca2:	f000 fea5 	bl	800b9f0 <GetPageState>
 800aca6:	0003      	movs	r3, r0
 800aca8:	7023      	strb	r3, [r4, #0]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800acaa:	1dbb      	adds	r3, r7, #6
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d001      	beq.n	800acb6 <EE_CleanUp+0xea>
        {
          return EE_ERROR_NOERASING_PAGE;
 800acb2:	2305      	movs	r3, #5
 800acb4:	e02a      	b.n	800ad0c <EE_CleanUp+0x140>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	3301      	adds	r3, #1
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	3309      	adds	r3, #9
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d3ce      	bcc.n	800ac64 <EE_CleanUp+0x98>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2109      	movs	r1, #9
 800acca:	0018      	movs	r0, r3
 800accc:	f000 ff2f 	bl	800bb2e <FI_PageErase>
 800acd0:	1e03      	subs	r3, r0, #0
 800acd2:	d001      	beq.n	800acd8 <EE_CleanUp+0x10c>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e019      	b.n	800ad0c <EE_CleanUp+0x140>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800acd8:	f000 ff54 	bl	800bb84 <FI_CacheFlush>
        
        return EE_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	e015      	b.n	800ad0c <EE_CleanUp+0x140>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	3309      	adds	r3, #9
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <EE_CleanUp+0x148>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	029a      	lsls	r2, r3, #10
 800acec:	23ff      	movs	r3, #255	; 0xff
 800acee:	029b      	lsls	r3, r3, #10
 800acf0:	401a      	ands	r2, r3
 800acf2:	23b8      	movs	r3, #184	; 0xb8
 800acf4:	025b      	lsls	r3, r3, #9
 800acf6:	0011      	movs	r1, r2
 800acf8:	0018      	movs	r0, r3
 800acfa:	f7f5 fa95 	bl	8000228 <__aeabi_uidivmod>
 800acfe:	000b      	movs	r3, r1
 800ad00:	0adb      	lsrs	r3, r3, #11
 800ad02:	3312      	adds	r3, #18
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d381      	bcc.n	800ac0e <EE_CleanUp+0x42>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800ad0a:	2305      	movs	r3, #5
}
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b007      	add	sp, #28
 800ad12:	bd90      	pop	{r4, r7, pc}
 800ad14:	1fff75e0 	.word	0x1fff75e0

0800ad18 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 800ad18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1a:	b08f      	sub	sp, #60	; 0x3c
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	0002      	movs	r2, r0
 800ad20:	6139      	str	r1, [r7, #16]
 800ad22:	2316      	movs	r3, #22
 800ad24:	18fb      	adds	r3, r7, r3
 800ad26:	801a      	strh	r2, [r3, #0]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	623a      	str	r2, [r7, #32]
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	637b      	str	r3, [r7, #52]	; 0x34
 800ad34:	2300      	movs	r3, #0
 800ad36:	633b      	str	r3, [r7, #48]	; 0x30
 800ad38:	2300      	movs	r3, #0
 800ad3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800ad40:	231b      	movs	r3, #27
 800ad42:	2210      	movs	r2, #16
 800ad44:	4694      	mov	ip, r2
 800ad46:	44bc      	add	ip, r7
 800ad48:	4463      	add	r3, ip
 800ad4a:	2205      	movs	r2, #5
 800ad4c:	701a      	strb	r2, [r3, #0]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 800ad4e:	2000      	movs	r0, #0
 800ad50:	f000 f92c 	bl	800afac <FindPage>
 800ad54:	0003      	movs	r3, r0
 800ad56:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 800ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <ReadVariable+0x4a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e0cd      	b.n	800aefe <ReadVariable+0x1e6>
  }
  pageaddress = PAGE_ADDRESS(page);
 800ad62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad64:	2280      	movs	r2, #128	; 0x80
 800ad66:	0252      	lsls	r2, r2, #9
 800ad68:	4694      	mov	ip, r2
 800ad6a:	4463      	add	r3, ip
 800ad6c:	02de      	lsls	r6, r3, #11
 800ad6e:	4b66      	ldr	r3, [pc, #408]	; (800af08 <ReadVariable+0x1f0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	029a      	lsls	r2, r3, #10
 800ad74:	23ff      	movs	r3, #255	; 0xff
 800ad76:	029b      	lsls	r3, r3, #10
 800ad78:	4013      	ands	r3, r2
 800ad7a:	0019      	movs	r1, r3
 800ad7c:	23b8      	movs	r3, #184	; 0xb8
 800ad7e:	0258      	lsls	r0, r3, #9
 800ad80:	f7f5 f9cc 	bl	800011c <__udivsi3>
 800ad84:	0003      	movs	r3, r0
 800ad86:	0019      	movs	r1, r3
 800ad88:	4b5f      	ldr	r3, [pc, #380]	; (800af08 <ReadVariable+0x1f0>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	029a      	lsls	r2, r3, #10
 800ad8e:	23ff      	movs	r3, #255	; 0xff
 800ad90:	029b      	lsls	r3, r3, #10
 800ad92:	4013      	ands	r3, r2
 800ad94:	434b      	muls	r3, r1
 800ad96:	18f3      	adds	r3, r6, r3
 800ad98:	633b      	str	r3, [r7, #48]	; 0x30
  pagestate = GetPageState(pageaddress);
 800ad9a:	231b      	movs	r3, #27
 800ad9c:	2210      	movs	r2, #16
 800ad9e:	18ba      	adds	r2, r7, r2
 800ada0:	18d6      	adds	r6, r2, r3
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	0018      	movs	r0, r3
 800ada6:	f000 fe23 	bl	800b9f0 <GetPageState>
 800adaa:	0003      	movs	r3, r0
 800adac:	7033      	strb	r3, [r6, #0]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800adae:	e091      	b.n	800aed4 <ReadVariable+0x1bc>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800adb0:	23ff      	movs	r3, #255	; 0xff
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800adb6:	e03d      	b.n	800ae34 <ReadVariable+0x11c>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 800adb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	18d3      	adds	r3, r2, r3
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	623a      	str	r2, [r7, #32]
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	3301      	adds	r3, #1
 800adca:	d102      	bne.n	800add2 <ReadVariable+0xba>
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	3301      	adds	r3, #1
 800add0:	d02d      	beq.n	800ae2e <ReadVariable+0x116>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800add2:	6a3a      	ldr	r2, [r7, #32]
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	1c13      	adds	r3, r2, #0
 800add8:	b29b      	uxth	r3, r3
 800adda:	2216      	movs	r2, #22
 800addc:	18ba      	adds	r2, r7, r2
 800adde:	8812      	ldrh	r2, [r2, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d124      	bne.n	800ae2e <ReadVariable+0x116>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	001b      	movs	r3, r3
 800ade8:	60bb      	str	r3, [r7, #8]
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	68b8      	ldr	r0, [r7, #8]
 800adf0:	6a3a      	ldr	r2, [r7, #32]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	1c13      	adds	r3, r2, #0
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	0019      	movs	r1, r3
 800adfa:	f000 fe63 	bl	800bac4 <CalculateCrc>
 800adfe:	0003      	movs	r3, r0
 800ae00:	61fb      	str	r3, [r7, #28]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	6a3a      	ldr	r2, [r7, #32]
 800ae08:	0c14      	lsrs	r4, r2, #16
 800ae0a:	431c      	orrs	r4, r3
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	0c1d      	lsrs	r5, r3, #16
 800ae10:	b2a3      	uxth	r3, r4
 800ae12:	001a      	movs	r2, r3
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d109      	bne.n	800ae2e <ReadVariable+0x116>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	001b      	movs	r3, r3
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	2300      	movs	r3, #0
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e067      	b.n	800aefe <ReadVariable+0x1e6>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	3b08      	subs	r3, #8
 800ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (counter >= PAGE_HEADER_SIZE)
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	2b1f      	cmp	r3, #31
 800ae38:	d8be      	bhi.n	800adb8 <ReadVariable+0xa0>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800ae3a:	4b33      	ldr	r3, [pc, #204]	; (800af08 <ReadVariable+0x1f0>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	029a      	lsls	r2, r3, #10
 800ae40:	23ff      	movs	r3, #255	; 0xff
 800ae42:	029b      	lsls	r3, r3, #10
 800ae44:	401a      	ands	r2, r3
 800ae46:	23b8      	movs	r3, #184	; 0xb8
 800ae48:	025b      	lsls	r3, r3, #9
 800ae4a:	0011      	movs	r1, r2
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f7f5 f9eb 	bl	8000228 <__aeabi_uidivmod>
 800ae52:	000b      	movs	r3, r1
 800ae54:	0adb      	lsrs	r3, r3, #11
 800ae56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	3311      	adds	r3, #17
 800ae5c:	2112      	movs	r1, #18
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f7f5 f9e2 	bl	8000228 <__aeabi_uidivmod>
 800ae64:	000b      	movs	r3, r1
 800ae66:	001e      	movs	r6, r3
 800ae68:	4b27      	ldr	r3, [pc, #156]	; (800af08 <ReadVariable+0x1f0>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	029a      	lsls	r2, r3, #10
 800ae6e:	23ff      	movs	r3, #255	; 0xff
 800ae70:	029b      	lsls	r3, r3, #10
 800ae72:	401a      	ands	r2, r3
 800ae74:	23b8      	movs	r3, #184	; 0xb8
 800ae76:	025b      	lsls	r3, r3, #9
 800ae78:	0011      	movs	r1, r2
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	f7f5 f9d4 	bl	8000228 <__aeabi_uidivmod>
 800ae80:	000b      	movs	r3, r1
 800ae82:	0adb      	lsrs	r3, r3, #11
 800ae84:	18f3      	adds	r3, r6, r3
 800ae86:	637b      	str	r3, [r7, #52]	; 0x34
    pageaddress = PAGE_ADDRESS(page);
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	2280      	movs	r2, #128	; 0x80
 800ae8c:	0252      	lsls	r2, r2, #9
 800ae8e:	4694      	mov	ip, r2
 800ae90:	4463      	add	r3, ip
 800ae92:	02de      	lsls	r6, r3, #11
 800ae94:	4b1c      	ldr	r3, [pc, #112]	; (800af08 <ReadVariable+0x1f0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	029a      	lsls	r2, r3, #10
 800ae9a:	23ff      	movs	r3, #255	; 0xff
 800ae9c:	029b      	lsls	r3, r3, #10
 800ae9e:	4013      	ands	r3, r2
 800aea0:	0019      	movs	r1, r3
 800aea2:	23b8      	movs	r3, #184	; 0xb8
 800aea4:	0258      	lsls	r0, r3, #9
 800aea6:	f7f5 f939 	bl	800011c <__udivsi3>
 800aeaa:	0003      	movs	r3, r0
 800aeac:	0019      	movs	r1, r3
 800aeae:	4b16      	ldr	r3, [pc, #88]	; (800af08 <ReadVariable+0x1f0>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	029a      	lsls	r2, r3, #10
 800aeb4:	23ff      	movs	r3, #255	; 0xff
 800aeb6:	029b      	lsls	r3, r3, #10
 800aeb8:	4013      	ands	r3, r2
 800aeba:	434b      	muls	r3, r1
 800aebc:	18f3      	adds	r3, r6, r3
 800aebe:	633b      	str	r3, [r7, #48]	; 0x30
    pagestate = GetPageState(pageaddress);
 800aec0:	231b      	movs	r3, #27
 800aec2:	2210      	movs	r2, #16
 800aec4:	18ba      	adds	r2, r7, r2
 800aec6:	18d6      	adds	r6, r2, r3
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	0018      	movs	r0, r3
 800aecc:	f000 fd90 	bl	800b9f0 <GetPageState>
 800aed0:	0003      	movs	r3, r0
 800aed2:	7033      	strb	r3, [r6, #0]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800aed4:	221b      	movs	r2, #27
 800aed6:	2110      	movs	r1, #16
 800aed8:	187b      	adds	r3, r7, r1
 800aeda:	189b      	adds	r3, r3, r2
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d100      	bne.n	800aee4 <ReadVariable+0x1cc>
 800aee2:	e765      	b.n	800adb0 <ReadVariable+0x98>
 800aee4:	187b      	adds	r3, r7, r1
 800aee6:	189b      	adds	r3, r3, r2
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d100      	bne.n	800aef0 <ReadVariable+0x1d8>
 800aeee:	e75f      	b.n	800adb0 <ReadVariable+0x98>
 800aef0:	187b      	adds	r3, r7, r1
 800aef2:	189b      	adds	r3, r3, r2
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	d100      	bne.n	800aefc <ReadVariable+0x1e4>
 800aefa:	e759      	b.n	800adb0 <ReadVariable+0x98>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800aefc:	2307      	movs	r3, #7
}
 800aefe:	0018      	movs	r0, r3
 800af00:	46bd      	mov	sp, r7
 800af02:	b00f      	add	sp, #60	; 0x3c
 800af04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af06:	46c0      	nop			; (mov r8, r8)
 800af08:	1fff75e0 	.word	0x1fff75e0

0800af0c <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800af0c:	b5b0      	push	{r4, r5, r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	0002      	movs	r2, r0
 800af14:	6039      	str	r1, [r7, #0]
 800af16:	1dbb      	adds	r3, r7, #6
 800af18:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800af1a:	250e      	movs	r5, #14
 800af1c:	197b      	adds	r3, r7, r5
 800af1e:	2200      	movs	r2, #0
 800af20:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800af22:	197c      	adds	r4, r7, r5
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	1dbb      	adds	r3, r7, #6
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	0011      	movs	r1, r2
 800af2c:	0018      	movs	r0, r3
 800af2e:	f000 fbf3 	bl	800b718 <VerifyPagesFullWriteVariable>
 800af32:	0003      	movs	r3, r0
 800af34:	8023      	strh	r3, [r4, #0]
#endif
  if (status == EE_PAGE_FULL)
 800af36:	197b      	adds	r3, r7, r5
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	2b12      	cmp	r3, #18
 800af3c:	d108      	bne.n	800af50 <WriteVariable+0x44>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	1dbb      	adds	r3, r7, #6
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	2200      	movs	r2, #0
 800af46:	0018      	movs	r0, r3
 800af48:	f000 f972 	bl	800b230 <PagesTransfer>
 800af4c:	0003      	movs	r3, r0
 800af4e:	e002      	b.n	800af56 <WriteVariable+0x4a>
  }

  /* Return last operation status */
  return status;
 800af50:	230e      	movs	r3, #14
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	881b      	ldrh	r3, [r3, #0]
}
 800af56:	0018      	movs	r0, r3
 800af58:	46bd      	mov	sp, r7
 800af5a:	b004      	add	sp, #16
 800af5c:	bdb0      	pop	{r4, r5, r7, pc}

0800af5e <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 800af68:	230e      	movs	r3, #14
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	2211      	movs	r2, #17
 800af6e:	801a      	strh	r2, [r3, #0]
  uint32_t counter = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 800af74:	e00f      	b.n	800af96 <VerifyPageFullyErased+0x38>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	18d3      	adds	r3, r2, r3
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	1c51      	adds	r1, r2, #1
 800af82:	d101      	bne.n	800af88 <VerifyPageFullyErased+0x2a>
 800af84:	3301      	adds	r3, #1
 800af86:	d003      	beq.n	800af90 <VerifyPageFullyErased+0x32>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 800af88:	230e      	movs	r3, #14
 800af8a:	18fb      	adds	r3, r7, r3
 800af8c:	2210      	movs	r2, #16
 800af8e:	801a      	strh	r2, [r3, #0]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	3308      	adds	r3, #8
 800af94:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d3eb      	bcc.n	800af76 <VerifyPageFullyErased+0x18>
  }

  /* Return readstatus value */
  return readstatus;
 800af9e:	230e      	movs	r3, #14
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	881b      	ldrh	r3, [r3, #0]
}
 800afa4:	0018      	movs	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	b004      	add	sp, #16
 800afaa:	bd80      	pop	{r7, pc}

0800afac <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 800afac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	0002      	movs	r2, r0
 800afb4:	1dfb      	adds	r3, r7, #7
 800afb6:	701a      	strb	r2, [r3, #0]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 800afb8:	2517      	movs	r5, #23
 800afba:	197b      	adds	r3, r7, r5
 800afbc:	2205      	movs	r2, #5
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	2616      	movs	r6, #22
 800afc2:	19bb      	adds	r3, r7, r6
 800afc4:	2205      	movs	r2, #5
 800afc6:	701a      	strb	r2, [r3, #0]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	2300      	movs	r3, #0
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	2300      	movs	r3, #0
 800afd2:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 800afd4:	4b93      	ldr	r3, [pc, #588]	; (800b224 <FindPage+0x278>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	2280      	movs	r2, #128	; 0x80
 800afde:	0252      	lsls	r2, r2, #9
 800afe0:	4694      	mov	ip, r2
 800afe2:	4463      	add	r3, ip
 800afe4:	02dc      	lsls	r4, r3, #11
 800afe6:	4b90      	ldr	r3, [pc, #576]	; (800b228 <FindPage+0x27c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	029a      	lsls	r2, r3, #10
 800afec:	23ff      	movs	r3, #255	; 0xff
 800afee:	029b      	lsls	r3, r3, #10
 800aff0:	4013      	ands	r3, r2
 800aff2:	0019      	movs	r1, r3
 800aff4:	23b8      	movs	r3, #184	; 0xb8
 800aff6:	0258      	lsls	r0, r3, #9
 800aff8:	f7f5 f890 	bl	800011c <__udivsi3>
 800affc:	0003      	movs	r3, r0
 800affe:	0019      	movs	r1, r3
 800b000:	4b89      	ldr	r3, [pc, #548]	; (800b228 <FindPage+0x27c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	029a      	lsls	r2, r3, #10
 800b006:	23ff      	movs	r3, #255	; 0xff
 800b008:	029b      	lsls	r3, r3, #10
 800b00a:	4013      	ands	r3, r2
 800b00c:	434b      	muls	r3, r1
 800b00e:	18e3      	adds	r3, r4, r3
 800b010:	197c      	adds	r4, r7, r5
 800b012:	0018      	movs	r0, r3
 800b014:	f000 fcec 	bl	800b9f0 <GetPageState>
 800b018:	0003      	movs	r3, r0
 800b01a:	7023      	strb	r3, [r4, #0]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800b01c:	4b82      	ldr	r3, [pc, #520]	; (800b228 <FindPage+0x27c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	029a      	lsls	r2, r3, #10
 800b022:	23ff      	movs	r3, #255	; 0xff
 800b024:	029b      	lsls	r3, r3, #10
 800b026:	401a      	ands	r2, r3
 800b028:	23b8      	movs	r3, #184	; 0xb8
 800b02a:	025b      	lsls	r3, r3, #9
 800b02c:	0011      	movs	r1, r2
 800b02e:	0018      	movs	r0, r3
 800b030:	f7f5 f8fa 	bl	8000228 <__aeabi_uidivmod>
 800b034:	000b      	movs	r3, r1
 800b036:	0adb      	lsrs	r3, r3, #11
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	3301      	adds	r3, #1
 800b03e:	2112      	movs	r1, #18
 800b040:	0018      	movs	r0, r3
 800b042:	f7f5 f8f1 	bl	8000228 <__aeabi_uidivmod>
 800b046:	000b      	movs	r3, r1
 800b048:	001c      	movs	r4, r3
 800b04a:	4b77      	ldr	r3, [pc, #476]	; (800b228 <FindPage+0x27c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	029a      	lsls	r2, r3, #10
 800b050:	23ff      	movs	r3, #255	; 0xff
 800b052:	029b      	lsls	r3, r3, #10
 800b054:	401a      	ands	r2, r3
 800b056:	23b8      	movs	r3, #184	; 0xb8
 800b058:	025b      	lsls	r3, r3, #9
 800b05a:	0011      	movs	r1, r2
 800b05c:	0018      	movs	r0, r3
 800b05e:	f7f5 f8e3 	bl	8000228 <__aeabi_uidivmod>
 800b062:	000b      	movs	r3, r1
 800b064:	0adb      	lsrs	r3, r3, #11
 800b066:	18e3      	adds	r3, r4, r3
 800b068:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2280      	movs	r2, #128	; 0x80
 800b06e:	0252      	lsls	r2, r2, #9
 800b070:	4694      	mov	ip, r2
 800b072:	4463      	add	r3, ip
 800b074:	02dc      	lsls	r4, r3, #11
 800b076:	4b6c      	ldr	r3, [pc, #432]	; (800b228 <FindPage+0x27c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	029a      	lsls	r2, r3, #10
 800b07c:	23ff      	movs	r3, #255	; 0xff
 800b07e:	029b      	lsls	r3, r3, #10
 800b080:	4013      	ands	r3, r2
 800b082:	0019      	movs	r1, r3
 800b084:	23b8      	movs	r3, #184	; 0xb8
 800b086:	0258      	lsls	r0, r3, #9
 800b088:	f7f5 f848 	bl	800011c <__udivsi3>
 800b08c:	0003      	movs	r3, r0
 800b08e:	0019      	movs	r1, r3
 800b090:	4b65      	ldr	r3, [pc, #404]	; (800b228 <FindPage+0x27c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	029a      	lsls	r2, r3, #10
 800b096:	23ff      	movs	r3, #255	; 0xff
 800b098:	029b      	lsls	r3, r3, #10
 800b09a:	4013      	ands	r3, r2
 800b09c:	434b      	muls	r3, r1
 800b09e:	18e3      	adds	r3, r4, r3
 800b0a0:	19bc      	adds	r4, r7, r6
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	f000 fca4 	bl	800b9f0 <GetPageState>
 800b0a8:	0003      	movs	r3, r0
 800b0aa:	7023      	strb	r3, [r4, #0]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 800b0ac:	4b5e      	ldr	r3, [pc, #376]	; (800b228 <FindPage+0x27c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	029a      	lsls	r2, r3, #10
 800b0b2:	23ff      	movs	r3, #255	; 0xff
 800b0b4:	029b      	lsls	r3, r3, #10
 800b0b6:	401a      	ands	r2, r3
 800b0b8:	23b8      	movs	r3, #184	; 0xb8
 800b0ba:	025b      	lsls	r3, r3, #9
 800b0bc:	0011      	movs	r1, r2
 800b0be:	0018      	movs	r0, r3
 800b0c0:	f7f5 f8b2 	bl	8000228 <__aeabi_uidivmod>
 800b0c4:	000b      	movs	r3, r1
 800b0c6:	0adb      	lsrs	r3, r3, #11
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	3311      	adds	r3, #17
 800b0ce:	2112      	movs	r1, #18
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f7f5 f8a9 	bl	8000228 <__aeabi_uidivmod>
 800b0d6:	000b      	movs	r3, r1
 800b0d8:	001c      	movs	r4, r3
 800b0da:	4b53      	ldr	r3, [pc, #332]	; (800b228 <FindPage+0x27c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	029a      	lsls	r2, r3, #10
 800b0e0:	23ff      	movs	r3, #255	; 0xff
 800b0e2:	029b      	lsls	r3, r3, #10
 800b0e4:	401a      	ands	r2, r3
 800b0e6:	23b8      	movs	r3, #184	; 0xb8
 800b0e8:	025b      	lsls	r3, r3, #9
 800b0ea:	0011      	movs	r1, r2
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	f7f5 f89b 	bl	8000228 <__aeabi_uidivmod>
 800b0f2:	000b      	movs	r3, r1
 800b0f4:	0adb      	lsrs	r3, r3, #11
 800b0f6:	18e3      	adds	r3, r4, r3
 800b0f8:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 800b0fa:	1dfb      	adds	r3, r7, #7
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d100      	bne.n	800b104 <FindPage+0x158>
 800b102:	e07e      	b.n	800b202 <FindPage+0x256>
 800b104:	dd00      	ble.n	800b108 <FindPage+0x15c>
 800b106:	e086      	b.n	800b216 <FindPage+0x26a>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d100      	bne.n	800b10e <FindPage+0x162>
 800b10c:	e068      	b.n	800b1e0 <FindPage+0x234>
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d000      	beq.n	800b114 <FindPage+0x168>
 800b112:	e080      	b.n	800b216 <FindPage+0x26a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800b114:	197b      	adds	r3, r7, r5
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d12c      	bne.n	800b176 <FindPage+0x1ca>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800b11c:	4b43      	ldr	r3, [pc, #268]	; (800b22c <FindPage+0x280>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	2380      	movs	r3, #128	; 0x80
 800b122:	011b      	lsls	r3, r3, #4
 800b124:	429a      	cmp	r2, r3
 800b126:	d201      	bcs.n	800b12c <FindPage+0x180>
        {
          /* Return current Active page */
          return currentpage;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	e076      	b.n	800b21a <FindPage+0x26e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800b12c:	2316      	movs	r3, #22
 800b12e:	18fb      	adds	r3, r7, r3
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b04      	cmp	r3, #4
 800b134:	d106      	bne.n	800b144 <FindPage+0x198>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 800b136:	f7ff fd49 	bl	800abcc <EE_CleanUp>
 800b13a:	1e03      	subs	r3, r0, #0
 800b13c:	d002      	beq.n	800b144 <FindPage+0x198>
            {
              return EE_NO_PAGE_FOUND;
 800b13e:	2301      	movs	r3, #1
 800b140:	425b      	negs	r3, r3
 800b142:	e06a      	b.n	800b21a <FindPage+0x26e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2103      	movs	r1, #3
 800b148:	0018      	movs	r0, r3
 800b14a:	f000 fb7f 	bl	800b84c <SetPageState>
 800b14e:	1e03      	subs	r3, r0, #0
 800b150:	d002      	beq.n	800b158 <FindPage+0x1ac>
          {
            return EE_NO_PAGE_FOUND;
 800b152:	2301      	movs	r3, #1
 800b154:	425b      	negs	r3, r3
 800b156:	e060      	b.n	800b21a <FindPage+0x26e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2102      	movs	r1, #2
 800b15c:	0018      	movs	r0, r3
 800b15e:	f000 fb75 	bl	800b84c <SetPageState>
 800b162:	1e03      	subs	r3, r0, #0
 800b164:	d002      	beq.n	800b16c <FindPage+0x1c0>
          {
            return EE_NO_PAGE_FOUND;
 800b166:	2301      	movs	r3, #1
 800b168:	425b      	negs	r3, r3
 800b16a:	e056      	b.n	800b21a <FindPage+0x26e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800b16c:	4b2f      	ldr	r3, [pc, #188]	; (800b22c <FindPage+0x280>)
 800b16e:	2220      	movs	r2, #32
 800b170:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	e051      	b.n	800b21a <FindPage+0x26e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800b176:	2317      	movs	r3, #23
 800b178:	18fb      	adds	r3, r7, r3
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d12c      	bne.n	800b1da <FindPage+0x22e>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 800b180:	4b2a      	ldr	r3, [pc, #168]	; (800b22c <FindPage+0x280>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	2380      	movs	r3, #128	; 0x80
 800b186:	011b      	lsls	r3, r3, #4
 800b188:	429a      	cmp	r2, r3
 800b18a:	d201      	bcs.n	800b190 <FindPage+0x1e4>
          {
            /* Return current receive page */
            return currentpage;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	e044      	b.n	800b21a <FindPage+0x26e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 800b190:	2316      	movs	r3, #22
 800b192:	18fb      	adds	r3, r7, r3
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b04      	cmp	r3, #4
 800b198:	d106      	bne.n	800b1a8 <FindPage+0x1fc>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800b19a:	f7ff fd17 	bl	800abcc <EE_CleanUp>
 800b19e:	1e03      	subs	r3, r0, #0
 800b1a0:	d002      	beq.n	800b1a8 <FindPage+0x1fc>
              {
                return EE_NO_PAGE_FOUND;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	425b      	negs	r3, r3
 800b1a6:	e038      	b.n	800b21a <FindPage+0x26e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2103      	movs	r1, #3
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f000 fb4d 	bl	800b84c <SetPageState>
 800b1b2:	1e03      	subs	r3, r0, #0
 800b1b4:	d002      	beq.n	800b1bc <FindPage+0x210>
            {
              return EE_NO_PAGE_FOUND;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	e02e      	b.n	800b21a <FindPage+0x26e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2101      	movs	r1, #1
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f000 fb43 	bl	800b84c <SetPageState>
 800b1c6:	1e03      	subs	r3, r0, #0
 800b1c8:	d002      	beq.n	800b1d0 <FindPage+0x224>
            {
              return EE_NO_PAGE_FOUND;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	425b      	negs	r3, r3
 800b1ce:	e024      	b.n	800b21a <FindPage+0x26e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800b1d0:	4b16      	ldr	r3, [pc, #88]	; (800b22c <FindPage+0x280>)
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	e01f      	b.n	800b21a <FindPage+0x26e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800b1da:	2301      	movs	r3, #1
 800b1dc:	425b      	negs	r3, r3
 800b1de:	e01c      	b.n	800b21a <FindPage+0x26e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800b1e0:	2317      	movs	r3, #23
 800b1e2:	18fb      	adds	r3, r7, r3
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d101      	bne.n	800b1ee <FindPage+0x242>
      {
        return currentpage;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	e015      	b.n	800b21a <FindPage+0x26e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800b1ee:	2317      	movs	r3, #23
 800b1f0:	18fb      	adds	r3, r7, r3
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <FindPage+0x250>
        {
          return previouspage;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	e00e      	b.n	800b21a <FindPage+0x26e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	425b      	negs	r3, r3
 800b200:	e00b      	b.n	800b21a <FindPage+0x26e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 800b202:	2316      	movs	r3, #22
 800b204:	18fb      	adds	r3, r7, r3
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <FindPage+0x264>
      {
        return followingpage;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	e004      	b.n	800b21a <FindPage+0x26e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 800b210:	2301      	movs	r3, #1
 800b212:	425b      	negs	r3, r3
 800b214:	e001      	b.n	800b21a <FindPage+0x26e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 800b216:	2301      	movs	r3, #1
 800b218:	425b      	negs	r3, r3
}
 800b21a:	0018      	movs	r0, r3
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b007      	add	sp, #28
 800b220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	2000013a 	.word	0x2000013a
 800b228:	1fff75e0 	.word	0x1fff75e0
 800b22c:	20000008 	.word	0x20000008

0800b230 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 800b230:	b5b0      	push	{r4, r5, r7, lr}
 800b232:	b08a      	sub	sp, #40	; 0x28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6039      	str	r1, [r7, #0]
 800b238:	0011      	movs	r1, r2
 800b23a:	1dbb      	adds	r3, r7, #6
 800b23c:	1c02      	adds	r2, r0, #0
 800b23e:	801a      	strh	r2, [r3, #0]
 800b240:	1d7b      	adds	r3, r7, #5
 800b242:	1c0a      	adds	r2, r1, #0
 800b244:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 800b246:	2327      	movs	r3, #39	; 0x27
 800b248:	18fb      	adds	r3, r7, r3
 800b24a:	2205      	movs	r2, #5
 800b24c:	701a      	strb	r2, [r3, #0]
  uint32_t pageaddress = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800b25a:	2200      	movs	r2, #0
 800b25c:	2300      	movs	r3, #0
 800b25e:	613a      	str	r2, [r7, #16]
 800b260:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 800b262:	230e      	movs	r3, #14
 800b264:	18fb      	adds	r3, r7, r3
 800b266:	2200      	movs	r2, #0
 800b268:	801a      	strh	r2, [r3, #0]
  EE_DATA_TYPE DataValue = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 800b26e:	1d7b      	adds	r3, r7, #5
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <PagesTransfer+0x4a>
 800b276:	2302      	movs	r3, #2
 800b278:	e000      	b.n	800b27c <PagesTransfer+0x4c>
 800b27a:	2301      	movs	r3, #1
 800b27c:	0018      	movs	r0, r3
 800b27e:	f7ff fe95 	bl	800afac <FindPage>
 800b282:	0003      	movs	r3, r0
 800b284:	623b      	str	r3, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	3301      	adds	r3, #1
 800b28a:	d101      	bne.n	800b290 <PagesTransfer+0x60>
  {
    return EE_ERROR_NOERASE_PAGE;
 800b28c:	2304      	movs	r3, #4
 800b28e:	e238      	b.n	800b702 <PagesTransfer+0x4d2>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 800b290:	4bbe      	ldr	r3, [pc, #760]	; (800b58c <PagesTransfer+0x35c>)
 800b292:	2200      	movs	r2, #0
 800b294:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	4bbd      	ldr	r3, [pc, #756]	; (800b590 <PagesTransfer+0x360>)
 800b29c:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800b29e:	4bbd      	ldr	r3, [pc, #756]	; (800b594 <PagesTransfer+0x364>)
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 800b2a4:	1d7b      	adds	r3, r7, #5
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d108      	bne.n	800b2be <PagesTransfer+0x8e>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f000 facb 	bl	800b84c <SetPageState>
 800b2b6:	1e03      	subs	r3, r0, #0
 800b2b8:	d001      	beq.n	800b2be <PagesTransfer+0x8e>
    {
      return EE_WRITE_ERROR;
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e221      	b.n	800b702 <PagesTransfer+0x4d2>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 800b2be:	4bb6      	ldr	r3, [pc, #728]	; (800b598 <PagesTransfer+0x368>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	029a      	lsls	r2, r3, #10
 800b2c4:	23ff      	movs	r3, #255	; 0xff
 800b2c6:	029b      	lsls	r3, r3, #10
 800b2c8:	401a      	ands	r2, r3
 800b2ca:	23b8      	movs	r3, #184	; 0xb8
 800b2cc:	025b      	lsls	r3, r3, #9
 800b2ce:	0011      	movs	r1, r2
 800b2d0:	0018      	movs	r0, r3
 800b2d2:	f7f4 ffa9 	bl	8000228 <__aeabi_uidivmod>
 800b2d6:	000b      	movs	r3, r1
 800b2d8:	0adb      	lsrs	r3, r3, #11
 800b2da:	6a3a      	ldr	r2, [r7, #32]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	3311      	adds	r3, #17
 800b2e0:	2112      	movs	r1, #18
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	f7f4 ffa0 	bl	8000228 <__aeabi_uidivmod>
 800b2e8:	000b      	movs	r3, r1
 800b2ea:	001c      	movs	r4, r3
 800b2ec:	4baa      	ldr	r3, [pc, #680]	; (800b598 <PagesTransfer+0x368>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	029a      	lsls	r2, r3, #10
 800b2f2:	23ff      	movs	r3, #255	; 0xff
 800b2f4:	029b      	lsls	r3, r3, #10
 800b2f6:	401a      	ands	r2, r3
 800b2f8:	23b8      	movs	r3, #184	; 0xb8
 800b2fa:	025b      	lsls	r3, r3, #9
 800b2fc:	0011      	movs	r1, r2
 800b2fe:	0018      	movs	r0, r3
 800b300:	f7f4 ff92 	bl	8000228 <__aeabi_uidivmod>
 800b304:	000b      	movs	r3, r1
 800b306:	0adb      	lsrs	r3, r3, #11
 800b308:	18e3      	adds	r3, r4, r3
 800b30a:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 800b30c:	6a3b      	ldr	r3, [r7, #32]
 800b30e:	2280      	movs	r2, #128	; 0x80
 800b310:	0252      	lsls	r2, r2, #9
 800b312:	4694      	mov	ip, r2
 800b314:	4463      	add	r3, ip
 800b316:	02dc      	lsls	r4, r3, #11
 800b318:	4b9f      	ldr	r3, [pc, #636]	; (800b598 <PagesTransfer+0x368>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	029a      	lsls	r2, r3, #10
 800b31e:	23ff      	movs	r3, #255	; 0xff
 800b320:	029b      	lsls	r3, r3, #10
 800b322:	4013      	ands	r3, r2
 800b324:	0019      	movs	r1, r3
 800b326:	23b8      	movs	r3, #184	; 0xb8
 800b328:	0258      	lsls	r0, r3, #9
 800b32a:	f7f4 fef7 	bl	800011c <__udivsi3>
 800b32e:	0003      	movs	r3, r0
 800b330:	0019      	movs	r1, r3
 800b332:	4b99      	ldr	r3, [pc, #612]	; (800b598 <PagesTransfer+0x368>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	029a      	lsls	r2, r3, #10
 800b338:	23ff      	movs	r3, #255	; 0xff
 800b33a:	029b      	lsls	r3, r3, #10
 800b33c:	4013      	ands	r3, r2
 800b33e:	434b      	muls	r3, r1
 800b340:	18e3      	adds	r3, r4, r3
 800b342:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 800b344:	2527      	movs	r5, #39	; 0x27
 800b346:	197c      	adds	r4, r7, r5
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	0018      	movs	r0, r3
 800b34c:	f000 fb50 	bl	800b9f0 <GetPageState>
 800b350:	0003      	movs	r3, r0
 800b352:	7023      	strb	r3, [r4, #0]

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b354:	197b      	adds	r3, r7, r5
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d004      	beq.n	800b366 <PagesTransfer+0x136>
 800b35c:	197b      	adds	r3, r7, r5
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b04      	cmp	r3, #4
 800b362:	d000      	beq.n	800b366 <PagesTransfer+0x136>
 800b364:	e0bc      	b.n	800b4e0 <PagesTransfer+0x2b0>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800b366:	2327      	movs	r3, #39	; 0x27
 800b368:	18fb      	adds	r3, r7, r3
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d108      	bne.n	800b382 <PagesTransfer+0x152>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	2104      	movs	r1, #4
 800b374:	0018      	movs	r0, r3
 800b376:	f000 fa69 	bl	800b84c <SetPageState>
 800b37a:	1e03      	subs	r3, r0, #0
 800b37c:	d001      	beq.n	800b382 <PagesTransfer+0x152>
      {
        return EE_WRITE_ERROR;
 800b37e:	2302      	movs	r3, #2
 800b380:	e1bf      	b.n	800b702 <PagesTransfer+0x4d2>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 800b382:	4b85      	ldr	r3, [pc, #532]	; (800b598 <PagesTransfer+0x368>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	029a      	lsls	r2, r3, #10
 800b388:	23ff      	movs	r3, #255	; 0xff
 800b38a:	029b      	lsls	r3, r3, #10
 800b38c:	401a      	ands	r2, r3
 800b38e:	23b8      	movs	r3, #184	; 0xb8
 800b390:	025b      	lsls	r3, r3, #9
 800b392:	0011      	movs	r1, r2
 800b394:	0018      	movs	r0, r3
 800b396:	f7f4 ff47 	bl	8000228 <__aeabi_uidivmod>
 800b39a:	000b      	movs	r3, r1
 800b39c:	0adb      	lsrs	r3, r3, #11
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	3311      	adds	r3, #17
 800b3a4:	2112      	movs	r1, #18
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	f7f4 ff3e 	bl	8000228 <__aeabi_uidivmod>
 800b3ac:	000b      	movs	r3, r1
 800b3ae:	001c      	movs	r4, r3
 800b3b0:	4b79      	ldr	r3, [pc, #484]	; (800b598 <PagesTransfer+0x368>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	029a      	lsls	r2, r3, #10
 800b3b6:	23ff      	movs	r3, #255	; 0xff
 800b3b8:	029b      	lsls	r3, r3, #10
 800b3ba:	401a      	ands	r2, r3
 800b3bc:	23b8      	movs	r3, #184	; 0xb8
 800b3be:	025b      	lsls	r3, r3, #9
 800b3c0:	0011      	movs	r1, r2
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f7f4 ff30 	bl	8000228 <__aeabi_uidivmod>
 800b3c8:	000b      	movs	r3, r1
 800b3ca:	0adb      	lsrs	r3, r3, #11
 800b3cc:	18e3      	adds	r3, r4, r3
 800b3ce:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	2280      	movs	r2, #128	; 0x80
 800b3d4:	0252      	lsls	r2, r2, #9
 800b3d6:	4694      	mov	ip, r2
 800b3d8:	4463      	add	r3, ip
 800b3da:	02dc      	lsls	r4, r3, #11
 800b3dc:	4b6e      	ldr	r3, [pc, #440]	; (800b598 <PagesTransfer+0x368>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	029a      	lsls	r2, r3, #10
 800b3e2:	23ff      	movs	r3, #255	; 0xff
 800b3e4:	029b      	lsls	r3, r3, #10
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	0019      	movs	r1, r3
 800b3ea:	23b8      	movs	r3, #184	; 0xb8
 800b3ec:	0258      	lsls	r0, r3, #9
 800b3ee:	f7f4 fe95 	bl	800011c <__udivsi3>
 800b3f2:	0003      	movs	r3, r0
 800b3f4:	0019      	movs	r1, r3
 800b3f6:	4b68      	ldr	r3, [pc, #416]	; (800b598 <PagesTransfer+0x368>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	029a      	lsls	r2, r3, #10
 800b3fc:	23ff      	movs	r3, #255	; 0xff
 800b3fe:	029b      	lsls	r3, r3, #10
 800b400:	4013      	ands	r3, r2
 800b402:	434b      	muls	r3, r1
 800b404:	18e3      	adds	r3, r4, r3
 800b406:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 800b408:	2327      	movs	r3, #39	; 0x27
 800b40a:	18fc      	adds	r4, r7, r3
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	0018      	movs	r0, r3
 800b410:	f000 faee 	bl	800b9f0 <GetPageState>
 800b414:	0003      	movs	r3, r0
 800b416:	7023      	strb	r3, [r4, #0]

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b418:	e058      	b.n	800b4cc <PagesTransfer+0x29c>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 800b41a:	2327      	movs	r3, #39	; 0x27
 800b41c:	18fb      	adds	r3, r7, r3
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b03      	cmp	r3, #3
 800b422:	d108      	bne.n	800b436 <PagesTransfer+0x206>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	2104      	movs	r1, #4
 800b428:	0018      	movs	r0, r3
 800b42a:	f000 fa0f 	bl	800b84c <SetPageState>
 800b42e:	1e03      	subs	r3, r0, #0
 800b430:	d001      	beq.n	800b436 <PagesTransfer+0x206>
        {
          return EE_WRITE_ERROR;
 800b432:	2302      	movs	r3, #2
 800b434:	e165      	b.n	800b702 <PagesTransfer+0x4d2>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 800b436:	4b58      	ldr	r3, [pc, #352]	; (800b598 <PagesTransfer+0x368>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	029a      	lsls	r2, r3, #10
 800b43c:	23ff      	movs	r3, #255	; 0xff
 800b43e:	029b      	lsls	r3, r3, #10
 800b440:	401a      	ands	r2, r3
 800b442:	23b8      	movs	r3, #184	; 0xb8
 800b444:	025b      	lsls	r3, r3, #9
 800b446:	0011      	movs	r1, r2
 800b448:	0018      	movs	r0, r3
 800b44a:	f7f4 feed 	bl	8000228 <__aeabi_uidivmod>
 800b44e:	000b      	movs	r3, r1
 800b450:	0adb      	lsrs	r3, r3, #11
 800b452:	6a3a      	ldr	r2, [r7, #32]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	3311      	adds	r3, #17
 800b458:	2112      	movs	r1, #18
 800b45a:	0018      	movs	r0, r3
 800b45c:	f7f4 fee4 	bl	8000228 <__aeabi_uidivmod>
 800b460:	000b      	movs	r3, r1
 800b462:	001c      	movs	r4, r3
 800b464:	4b4c      	ldr	r3, [pc, #304]	; (800b598 <PagesTransfer+0x368>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	029a      	lsls	r2, r3, #10
 800b46a:	23ff      	movs	r3, #255	; 0xff
 800b46c:	029b      	lsls	r3, r3, #10
 800b46e:	401a      	ands	r2, r3
 800b470:	23b8      	movs	r3, #184	; 0xb8
 800b472:	025b      	lsls	r3, r3, #9
 800b474:	0011      	movs	r1, r2
 800b476:	0018      	movs	r0, r3
 800b478:	f7f4 fed6 	bl	8000228 <__aeabi_uidivmod>
 800b47c:	000b      	movs	r3, r1
 800b47e:	0adb      	lsrs	r3, r3, #11
 800b480:	18e3      	adds	r3, r4, r3
 800b482:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	2280      	movs	r2, #128	; 0x80
 800b488:	0252      	lsls	r2, r2, #9
 800b48a:	4694      	mov	ip, r2
 800b48c:	4463      	add	r3, ip
 800b48e:	02dc      	lsls	r4, r3, #11
 800b490:	4b41      	ldr	r3, [pc, #260]	; (800b598 <PagesTransfer+0x368>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	029a      	lsls	r2, r3, #10
 800b496:	23ff      	movs	r3, #255	; 0xff
 800b498:	029b      	lsls	r3, r3, #10
 800b49a:	4013      	ands	r3, r2
 800b49c:	0019      	movs	r1, r3
 800b49e:	23b8      	movs	r3, #184	; 0xb8
 800b4a0:	0258      	lsls	r0, r3, #9
 800b4a2:	f7f4 fe3b 	bl	800011c <__udivsi3>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	0019      	movs	r1, r3
 800b4aa:	4b3b      	ldr	r3, [pc, #236]	; (800b598 <PagesTransfer+0x368>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	029a      	lsls	r2, r3, #10
 800b4b0:	23ff      	movs	r3, #255	; 0xff
 800b4b2:	029b      	lsls	r3, r3, #10
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	434b      	muls	r3, r1
 800b4b8:	18e3      	adds	r3, r4, r3
 800b4ba:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 800b4bc:	2327      	movs	r3, #39	; 0x27
 800b4be:	18fc      	adds	r4, r7, r3
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f000 fa94 	bl	800b9f0 <GetPageState>
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	7023      	strb	r3, [r4, #0]
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b4cc:	2227      	movs	r2, #39	; 0x27
 800b4ce:	18bb      	adds	r3, r7, r2
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d0a1      	beq.n	800b41a <PagesTransfer+0x1ea>
 800b4d6:	18bb      	adds	r3, r7, r2
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d09d      	beq.n	800b41a <PagesTransfer+0x1ea>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b4de:	e00a      	b.n	800b4f6 <PagesTransfer+0x2c6>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 800b4e0:	1d7b      	adds	r3, r7, #5
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d104      	bne.n	800b4f2 <PagesTransfer+0x2c2>
 800b4e8:	2327      	movs	r3, #39	; 0x27
 800b4ea:	18fb      	adds	r3, r7, r3
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d001      	beq.n	800b4f6 <PagesTransfer+0x2c6>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 800b4f2:	230a      	movs	r3, #10
 800b4f4:	e105      	b.n	800b702 <PagesTransfer+0x4d2>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 800b4f6:	1d7b      	adds	r3, r7, #5
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d000      	beq.n	800b500 <PagesTransfer+0x2d0>
 800b4fe:	e0a8      	b.n	800b652 <PagesTransfer+0x422>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b500:	2320      	movs	r3, #32
 800b502:	61fb      	str	r3, [r7, #28]
 800b504:	e037      	b.n	800b576 <PagesTransfer+0x346>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800b506:	4b22      	ldr	r3, [pc, #136]	; (800b590 <PagesTransfer+0x360>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2280      	movs	r2, #128	; 0x80
 800b50c:	0252      	lsls	r2, r2, #9
 800b50e:	4694      	mov	ip, r2
 800b510:	4463      	add	r3, ip
 800b512:	02dc      	lsls	r4, r3, #11
 800b514:	4b20      	ldr	r3, [pc, #128]	; (800b598 <PagesTransfer+0x368>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	029a      	lsls	r2, r3, #10
 800b51a:	23ff      	movs	r3, #255	; 0xff
 800b51c:	029b      	lsls	r3, r3, #10
 800b51e:	4013      	ands	r3, r2
 800b520:	0019      	movs	r1, r3
 800b522:	23b8      	movs	r3, #184	; 0xb8
 800b524:	0258      	lsls	r0, r3, #9
 800b526:	f7f4 fdf9 	bl	800011c <__udivsi3>
 800b52a:	0003      	movs	r3, r0
 800b52c:	0019      	movs	r1, r3
 800b52e:	4b1a      	ldr	r3, [pc, #104]	; (800b598 <PagesTransfer+0x368>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	029a      	lsls	r2, r3, #10
 800b534:	23ff      	movs	r3, #255	; 0xff
 800b536:	029b      	lsls	r3, r3, #10
 800b538:	4013      	ands	r3, r2
 800b53a:	434b      	muls	r3, r1
 800b53c:	18e2      	adds	r2, r4, r3
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	18d3      	adds	r3, r2, r3
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	613a      	str	r2, [r7, #16]
 800b548:	617b      	str	r3, [r7, #20]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) && (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)&& (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3301      	adds	r3, #1
 800b54e:	d103      	bne.n	800b558 <PagesTransfer+0x328>
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	3301      	adds	r3, #1
 800b554:	d100      	bne.n	800b558 <PagesTransfer+0x328>
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else
      {
        break;
 800b556:	e013      	b.n	800b580 <PagesTransfer+0x350>
        uhNbWrittenElements++;
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <PagesTransfer+0x35c>)
 800b55a:	881b      	ldrh	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	b29a      	uxth	r2, r3
 800b560:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <PagesTransfer+0x35c>)
 800b562:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b564:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <PagesTransfer+0x364>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3308      	adds	r3, #8
 800b56a:	001a      	movs	r2, r3
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <PagesTransfer+0x364>)
 800b56e:	601a      	str	r2, [r3, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	3308      	adds	r3, #8
 800b574:	61fb      	str	r3, [r7, #28]
 800b576:	69fa      	ldr	r2, [r7, #28]
 800b578:	2380      	movs	r3, #128	; 0x80
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d3c2      	bcc.n	800b506 <PagesTransfer+0x2d6>
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 800b580:	4b03      	ldr	r3, [pc, #12]	; (800b590 <PagesTransfer+0x360>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b586:	2300      	movs	r3, #0
 800b588:	61fb      	str	r3, [r7, #28]
 800b58a:	e05d      	b.n	800b648 <PagesTransfer+0x418>
 800b58c:	20000138 	.word	0x20000138
 800b590:	2000013a 	.word	0x2000013a
 800b594:	20000008 	.word	0x20000008
 800b598:	1fff75e0 	.word	0x1fff75e0
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 800b59c:	4b5b      	ldr	r3, [pc, #364]	; (800b70c <PagesTransfer+0x4dc>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	029a      	lsls	r2, r3, #10
 800b5a2:	23ff      	movs	r3, #255	; 0xff
 800b5a4:	029b      	lsls	r3, r3, #10
 800b5a6:	401a      	ands	r2, r3
 800b5a8:	23b8      	movs	r3, #184	; 0xb8
 800b5aa:	025b      	lsls	r3, r3, #9
 800b5ac:	0011      	movs	r1, r2
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	f7f4 fe3a 	bl	8000228 <__aeabi_uidivmod>
 800b5b4:	000b      	movs	r3, r1
 800b5b6:	0adb      	lsrs	r3, r3, #11
 800b5b8:	6a3a      	ldr	r2, [r7, #32]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	3311      	adds	r3, #17
 800b5be:	2112      	movs	r1, #18
 800b5c0:	0018      	movs	r0, r3
 800b5c2:	f7f4 fe31 	bl	8000228 <__aeabi_uidivmod>
 800b5c6:	000b      	movs	r3, r1
 800b5c8:	001c      	movs	r4, r3
 800b5ca:	4b50      	ldr	r3, [pc, #320]	; (800b70c <PagesTransfer+0x4dc>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	029a      	lsls	r2, r3, #10
 800b5d0:	23ff      	movs	r3, #255	; 0xff
 800b5d2:	029b      	lsls	r3, r3, #10
 800b5d4:	401a      	ands	r2, r3
 800b5d6:	23b8      	movs	r3, #184	; 0xb8
 800b5d8:	025b      	lsls	r3, r3, #9
 800b5da:	0011      	movs	r1, r2
 800b5dc:	0018      	movs	r0, r3
 800b5de:	f7f4 fe23 	bl	8000228 <__aeabi_uidivmod>
 800b5e2:	000b      	movs	r3, r1
 800b5e4:	0adb      	lsrs	r3, r3, #11
 800b5e6:	18e3      	adds	r3, r4, r3
 800b5e8:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	2280      	movs	r2, #128	; 0x80
 800b5ee:	0252      	lsls	r2, r2, #9
 800b5f0:	4694      	mov	ip, r2
 800b5f2:	4463      	add	r3, ip
 800b5f4:	02dc      	lsls	r4, r3, #11
 800b5f6:	4b45      	ldr	r3, [pc, #276]	; (800b70c <PagesTransfer+0x4dc>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	029a      	lsls	r2, r3, #10
 800b5fc:	23ff      	movs	r3, #255	; 0xff
 800b5fe:	029b      	lsls	r3, r3, #10
 800b600:	4013      	ands	r3, r2
 800b602:	0019      	movs	r1, r3
 800b604:	23b8      	movs	r3, #184	; 0xb8
 800b606:	0258      	lsls	r0, r3, #9
 800b608:	f7f4 fd88 	bl	800011c <__udivsi3>
 800b60c:	0003      	movs	r3, r0
 800b60e:	0019      	movs	r1, r3
 800b610:	4b3e      	ldr	r3, [pc, #248]	; (800b70c <PagesTransfer+0x4dc>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	029a      	lsls	r2, r3, #10
 800b616:	23ff      	movs	r3, #255	; 0xff
 800b618:	029b      	lsls	r3, r3, #10
 800b61a:	4013      	ands	r3, r2
 800b61c:	434b      	muls	r3, r1
 800b61e:	18e3      	adds	r3, r4, r3
 800b620:	2527      	movs	r5, #39	; 0x27
 800b622:	197c      	adds	r4, r7, r5
 800b624:	0018      	movs	r0, r3
 800b626:	f000 f9e3 	bl	800b9f0 <GetPageState>
 800b62a:	0003      	movs	r3, r0
 800b62c:	7023      	strb	r3, [r4, #0]

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800b62e:	197b      	adds	r3, r7, r5
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b03      	cmp	r3, #3
 800b634:	d10c      	bne.n	800b650 <PagesTransfer+0x420>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800b636:	4b36      	ldr	r3, [pc, #216]	; (800b710 <PagesTransfer+0x4e0>)
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	33fc      	adds	r3, #252	; 0xfc
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	4b34      	ldr	r3, [pc, #208]	; (800b710 <PagesTransfer+0x4e0>)
 800b640:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	3301      	adds	r3, #1
 800b646:	61fb      	str	r3, [r7, #28]
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	2b11      	cmp	r3, #17
 800b64c:	d9a6      	bls.n	800b59c <PagesTransfer+0x36c>
 800b64e:	e000      	b.n	800b652 <PagesTransfer+0x422>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 800b650:	46c0      	nop			; (mov r8, r8)
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	1dbb      	adds	r3, r7, #6
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	0011      	movs	r1, r2
 800b65a:	0018      	movs	r0, r3
 800b65c:	f000 f85c 	bl	800b718 <VerifyPagesFullWriteVariable>
 800b660:	1e03      	subs	r3, r0, #0
 800b662:	d001      	beq.n	800b668 <PagesTransfer+0x438>
  {
    return EE_WRITE_ERROR;
 800b664:	2302      	movs	r3, #2
 800b666:	e04c      	b.n	800b702 <PagesTransfer+0x4d2>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b668:	4b29      	ldr	r3, [pc, #164]	; (800b710 <PagesTransfer+0x4e0>)
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d903      	bls.n	800b678 <PagesTransfer+0x448>
 800b670:	4b27      	ldr	r3, [pc, #156]	; (800b710 <PagesTransfer+0x4e0>)
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	3b02      	subs	r3, #2
 800b676:	e000      	b.n	800b67a <PagesTransfer+0x44a>
 800b678:	2301      	movs	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	e032      	b.n	800b6e4 <PagesTransfer+0x4b4>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 800b67e:	1dbb      	adds	r3, r7, #6
 800b680:	881b      	ldrh	r3, [r3, #0]
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	429a      	cmp	r2, r3
 800b686:	d02a      	beq.n	800b6de <PagesTransfer+0x4ae>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	250e      	movs	r5, #14
 800b68e:	197c      	adds	r4, r7, r5
 800b690:	2208      	movs	r2, #8
 800b692:	18ba      	adds	r2, r7, r2
 800b694:	0011      	movs	r1, r2
 800b696:	0018      	movs	r0, r3
 800b698:	f7ff fb3e 	bl	800ad18 <ReadVariable>
 800b69c:	0003      	movs	r3, r0
 800b69e:	8023      	strh	r3, [r4, #0]
      if (status == EE_OK)
 800b6a0:	0029      	movs	r1, r5
 800b6a2:	187b      	adds	r3, r7, r1
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d111      	bne.n	800b6ce <PagesTransfer+0x49e>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	000d      	movs	r5, r1
 800b6b2:	187c      	adds	r4, r7, r1
 800b6b4:	0011      	movs	r1, r2
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	f000 f82e 	bl	800b718 <VerifyPagesFullWriteVariable>
 800b6bc:	0003      	movs	r3, r0
 800b6be:	8023      	strh	r3, [r4, #0]
    #endif
        if (status != EE_OK)
 800b6c0:	197b      	adds	r3, r7, r5
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00a      	beq.n	800b6de <PagesTransfer+0x4ae>
        {
          return status;
 800b6c8:	197b      	adds	r3, r7, r5
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	e019      	b.n	800b702 <PagesTransfer+0x4d2>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 800b6ce:	220e      	movs	r2, #14
 800b6d0:	18bb      	adds	r3, r7, r2
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	2b07      	cmp	r3, #7
 800b6d6:	d002      	beq.n	800b6de <PagesTransfer+0x4ae>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800b6d8:	18bb      	adds	r3, r7, r2
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	e011      	b.n	800b702 <PagesTransfer+0x4d2>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d9c9      	bls.n	800b67e <PagesTransfer+0x44e>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <PagesTransfer+0x4e4>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2102      	movs	r1, #2
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f000 f8ab 	bl	800b84c <SetPageState>
 800b6f6:	1e03      	subs	r3, r0, #0
 800b6f8:	d001      	beq.n	800b6fe <PagesTransfer+0x4ce>
  {
    return EE_WRITE_ERROR;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	e001      	b.n	800b702 <PagesTransfer+0x4d2>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 800b6fe:	2380      	movs	r3, #128	; 0x80
 800b700:	005b      	lsls	r3, r3, #1
}
 800b702:	0018      	movs	r0, r3
 800b704:	46bd      	mov	sp, r7
 800b706:	b00a      	add	sp, #40	; 0x28
 800b708:	bdb0      	pop	{r4, r5, r7, pc}
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	1fff75e0 	.word	0x1fff75e0
 800b710:	20000138 	.word	0x20000138
 800b714:	2000013a 	.word	0x2000013a

0800b718 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 800b718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71a:	b091      	sub	sp, #68	; 0x44
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	0003      	movs	r3, r0
 800b720:	62b9      	str	r1, [r7, #40]	; 0x28
 800b722:	222e      	movs	r2, #46	; 0x2e
 800b724:	18ba      	adds	r2, r7, r2
 800b726:	8013      	strh	r3, [r2, #0]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 800b728:	2300      	movs	r3, #0
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800b72c:	4b43      	ldr	r3, [pc, #268]	; (800b83c <VerifyPagesFullWriteVariable+0x124>)
 800b72e:	881a      	ldrh	r2, [r3, #0]
 800b730:	4b43      	ldr	r3, [pc, #268]	; (800b840 <VerifyPagesFullWriteVariable+0x128>)
 800b732:	429a      	cmp	r2, r3
 800b734:	d901      	bls.n	800b73a <VerifyPagesFullWriteVariable+0x22>
  {
    return EE_PAGE_FULL;
 800b736:	2312      	movs	r3, #18
 800b738:	e07b      	b.n	800b832 <VerifyPagesFullWriteVariable+0x11a>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 800b73a:	2001      	movs	r0, #1
 800b73c:	f7ff fc36 	bl	800afac <FindPage>
 800b740:	0003      	movs	r3, r0
 800b742:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t activepageaddress = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	3301      	adds	r3, #1
 800b74c:	d101      	bne.n	800b752 <VerifyPagesFullWriteVariable+0x3a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800b74e:	2303      	movs	r3, #3
 800b750:	e06f      	b.n	800b832 <VerifyPagesFullWriteVariable+0x11a>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b754:	2280      	movs	r2, #128	; 0x80
 800b756:	0252      	lsls	r2, r2, #9
 800b758:	4694      	mov	ip, r2
 800b75a:	4463      	add	r3, ip
 800b75c:	02de      	lsls	r6, r3, #11
 800b75e:	4b39      	ldr	r3, [pc, #228]	; (800b844 <VerifyPagesFullWriteVariable+0x12c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	029a      	lsls	r2, r3, #10
 800b764:	23ff      	movs	r3, #255	; 0xff
 800b766:	029b      	lsls	r3, r3, #10
 800b768:	4013      	ands	r3, r2
 800b76a:	0019      	movs	r1, r3
 800b76c:	23b8      	movs	r3, #184	; 0xb8
 800b76e:	0258      	lsls	r0, r3, #9
 800b770:	f7f4 fcd4 	bl	800011c <__udivsi3>
 800b774:	0003      	movs	r3, r0
 800b776:	0019      	movs	r1, r3
 800b778:	4b32      	ldr	r3, [pc, #200]	; (800b844 <VerifyPagesFullWriteVariable+0x12c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	029a      	lsls	r2, r3, #10
 800b77e:	23ff      	movs	r3, #255	; 0xff
 800b780:	029b      	lsls	r3, r3, #10
 800b782:	4013      	ands	r3, r2
 800b784:	434b      	muls	r3, r1
 800b786:	18f3      	adds	r3, r6, r3
 800b788:	637b      	str	r3, [r7, #52]	; 0x34

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d107      	bne.n	800b7a0 <VerifyPagesFullWriteVariable+0x88>
 800b790:	232e      	movs	r3, #46	; 0x2e
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	881b      	ldrh	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <VerifyPagesFullWriteVariable+0x88>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b79e:	e009      	b.n	800b7b4 <VerifyPagesFullWriteVariable+0x9c>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800b7a0:	232e      	movs	r3, #46	; 0x2e
 800b7a2:	18fb      	adds	r3, r7, r3
 800b7a4:	881a      	ldrh	r2, [r3, #0]
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	0011      	movs	r1, r2
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	f000 f98a 	bl	800bac4 <CalculateCrc>
 800b7b0:	0003      	movs	r3, r0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  EE_Status ee_status = FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, pData64, Write_type);
  if (ee_status != EE_OK) return ee_status;
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800b7b4:	4b24      	ldr	r3, [pc, #144]	; (800b848 <VerifyPagesFullWriteVariable+0x130>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ba:	18d1      	adds	r1, r2, r3
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	61bb      	str	r3, [r7, #24]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	61fb      	str	r3, [r7, #28]
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	001b      	movs	r3, r3
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	623b      	str	r3, [r7, #32]
 800b7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d0:	041b      	lsls	r3, r3, #16
 800b7d2:	613b      	str	r3, [r7, #16]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	6a38      	ldr	r0, [r7, #32]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	0016      	movs	r6, r2
 800b7e0:	4330      	orrs	r0, r6
 800b7e2:	0004      	movs	r4, r0
 800b7e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7e6:	4318      	orrs	r0, r3
 800b7e8:	0005      	movs	r5, r0
 800b7ea:	232e      	movs	r3, #46	; 0x2e
 800b7ec:	18fb      	adds	r3, r7, r3
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	60bb      	str	r3, [r7, #8]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	0010      	movs	r0, r2
 800b7fe:	4320      	orrs	r0, r4
 800b800:	6038      	str	r0, [r7, #0]
 800b802:	432b      	orrs	r3, r5
 800b804:	607b      	str	r3, [r7, #4]
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	0008      	movs	r0, r1
 800b80c:	f000 f97e 	bl	800bb0c <FI_WriteDoubleWord>
 800b810:	1e03      	subs	r3, r0, #0
 800b812:	d001      	beq.n	800b818 <VerifyPagesFullWriteVariable+0x100>
  {
    return EE_WRITE_ERROR;
 800b814:	2302      	movs	r3, #2
 800b816:	e00c      	b.n	800b832 <VerifyPagesFullWriteVariable+0x11a>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b818:	4b0b      	ldr	r3, [pc, #44]	; (800b848 <VerifyPagesFullWriteVariable+0x130>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3308      	adds	r3, #8
 800b81e:	001a      	movs	r2, r3
 800b820:	4b09      	ldr	r3, [pc, #36]	; (800b848 <VerifyPagesFullWriteVariable+0x130>)
 800b822:	601a      	str	r2, [r3, #0]
  uhNbWrittenElements++;
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <VerifyPagesFullWriteVariable+0x124>)
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	4b03      	ldr	r3, [pc, #12]	; (800b83c <VerifyPagesFullWriteVariable+0x124>)
 800b82e:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	0018      	movs	r0, r3
 800b834:	46bd      	mov	sp, r7
 800b836:	b011      	add	sp, #68	; 0x44
 800b838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b83a:	46c0      	nop			; (mov r8, r8)
 800b83c:	20000138 	.word	0x20000138
 800b840:	000008db 	.word	0x000008db
 800b844:	1fff75e0 	.word	0x1fff75e0
 800b848:	20000008 	.word	0x20000008

0800b84c <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	000a      	movs	r2, r1
 800b856:	1cfb      	adds	r3, r7, #3
 800b858:	701a      	strb	r2, [r3, #0]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	2300      	movs	r3, #0
 800b860:	613b      	str	r3, [r7, #16]
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	2300      	movs	r3, #0
 800b868:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2280      	movs	r2, #128	; 0x80
 800b86e:	0252      	lsls	r2, r2, #9
 800b870:	4694      	mov	ip, r2
 800b872:	4463      	add	r3, ip
 800b874:	02dc      	lsls	r4, r3, #11
 800b876:	4b5b      	ldr	r3, [pc, #364]	; (800b9e4 <SetPageState+0x198>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	029a      	lsls	r2, r3, #10
 800b87c:	23ff      	movs	r3, #255	; 0xff
 800b87e:	029b      	lsls	r3, r3, #10
 800b880:	4013      	ands	r3, r2
 800b882:	0019      	movs	r1, r3
 800b884:	23b8      	movs	r3, #184	; 0xb8
 800b886:	0258      	lsls	r0, r3, #9
 800b888:	f7f4 fc48 	bl	800011c <__udivsi3>
 800b88c:	0003      	movs	r3, r0
 800b88e:	0019      	movs	r1, r3
 800b890:	4b54      	ldr	r3, [pc, #336]	; (800b9e4 <SetPageState+0x198>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	029a      	lsls	r2, r3, #10
 800b896:	23ff      	movs	r3, #255	; 0xff
 800b898:	029b      	lsls	r3, r3, #10
 800b89a:	4013      	ands	r3, r2
 800b89c:	434b      	muls	r3, r1
 800b89e:	18e3      	adds	r3, r4, r3
 800b8a0:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2280      	movs	r2, #128	; 0x80
 800b8a6:	0252      	lsls	r2, r2, #9
 800b8a8:	4694      	mov	ip, r2
 800b8aa:	4463      	add	r3, ip
 800b8ac:	02dc      	lsls	r4, r3, #11
 800b8ae:	4b4d      	ldr	r3, [pc, #308]	; (800b9e4 <SetPageState+0x198>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	029a      	lsls	r2, r3, #10
 800b8b4:	23ff      	movs	r3, #255	; 0xff
 800b8b6:	029b      	lsls	r3, r3, #10
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	0019      	movs	r1, r3
 800b8bc:	23b8      	movs	r3, #184	; 0xb8
 800b8be:	0258      	lsls	r0, r3, #9
 800b8c0:	f7f4 fc2c 	bl	800011c <__udivsi3>
 800b8c4:	0003      	movs	r3, r0
 800b8c6:	0019      	movs	r1, r3
 800b8c8:	4b46      	ldr	r3, [pc, #280]	; (800b9e4 <SetPageState+0x198>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	029a      	lsls	r2, r3, #10
 800b8ce:	23ff      	movs	r3, #255	; 0xff
 800b8d0:	029b      	lsls	r3, r3, #10
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	434b      	muls	r3, r1
 800b8d6:	18e3      	adds	r3, r4, r3
 800b8d8:	3308      	adds	r3, #8
 800b8da:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2280      	movs	r2, #128	; 0x80
 800b8e0:	0252      	lsls	r2, r2, #9
 800b8e2:	4694      	mov	ip, r2
 800b8e4:	4463      	add	r3, ip
 800b8e6:	02dc      	lsls	r4, r3, #11
 800b8e8:	4b3e      	ldr	r3, [pc, #248]	; (800b9e4 <SetPageState+0x198>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	029a      	lsls	r2, r3, #10
 800b8ee:	23ff      	movs	r3, #255	; 0xff
 800b8f0:	029b      	lsls	r3, r3, #10
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	0019      	movs	r1, r3
 800b8f6:	23b8      	movs	r3, #184	; 0xb8
 800b8f8:	0258      	lsls	r0, r3, #9
 800b8fa:	f7f4 fc0f 	bl	800011c <__udivsi3>
 800b8fe:	0003      	movs	r3, r0
 800b900:	0019      	movs	r1, r3
 800b902:	4b38      	ldr	r3, [pc, #224]	; (800b9e4 <SetPageState+0x198>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	029a      	lsls	r2, r3, #10
 800b908:	23ff      	movs	r3, #255	; 0xff
 800b90a:	029b      	lsls	r3, r3, #10
 800b90c:	4013      	ands	r3, r2
 800b90e:	434b      	muls	r3, r1
 800b910:	18e3      	adds	r3, r4, r3
 800b912:	3310      	adds	r3, #16
 800b914:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2280      	movs	r2, #128	; 0x80
 800b91a:	0252      	lsls	r2, r2, #9
 800b91c:	4694      	mov	ip, r2
 800b91e:	4463      	add	r3, ip
 800b920:	02dc      	lsls	r4, r3, #11
 800b922:	4b30      	ldr	r3, [pc, #192]	; (800b9e4 <SetPageState+0x198>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	029a      	lsls	r2, r3, #10
 800b928:	23ff      	movs	r3, #255	; 0xff
 800b92a:	029b      	lsls	r3, r3, #10
 800b92c:	4013      	ands	r3, r2
 800b92e:	0019      	movs	r1, r3
 800b930:	23b8      	movs	r3, #184	; 0xb8
 800b932:	0258      	lsls	r0, r3, #9
 800b934:	f7f4 fbf2 	bl	800011c <__udivsi3>
 800b938:	0003      	movs	r3, r0
 800b93a:	0019      	movs	r1, r3
 800b93c:	4b29      	ldr	r3, [pc, #164]	; (800b9e4 <SetPageState+0x198>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	029a      	lsls	r2, r3, #10
 800b942:	23ff      	movs	r3, #255	; 0xff
 800b944:	029b      	lsls	r3, r3, #10
 800b946:	4013      	ands	r3, r2
 800b948:	434b      	muls	r3, r1
 800b94a:	18e3      	adds	r3, r4, r3
 800b94c:	3318      	adds	r3, #24
 800b94e:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 800b950:	1cfb      	adds	r3, r7, #3
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b04      	cmp	r3, #4
 800b956:	d030      	beq.n	800b9ba <SetPageState+0x16e>
 800b958:	dc39      	bgt.n	800b9ce <SetPageState+0x182>
 800b95a:	2b03      	cmp	r3, #3
 800b95c:	d023      	beq.n	800b9a6 <SetPageState+0x15a>
 800b95e:	dc36      	bgt.n	800b9ce <SetPageState+0x182>
 800b960:	2b01      	cmp	r3, #1
 800b962:	d002      	beq.n	800b96a <SetPageState+0x11e>
 800b964:	2b02      	cmp	r3, #2
 800b966:	d00f      	beq.n	800b988 <SetPageState+0x13c>
        return EE_WRITE_ERROR;
      }
    }
    break;
  default:
    break;
 800b968:	e031      	b.n	800b9ce <SetPageState+0x182>
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 800b96a:	4a1f      	ldr	r2, [pc, #124]	; (800b9e8 <SetPageState+0x19c>)
 800b96c:	4b1e      	ldr	r3, [pc, #120]	; (800b9e8 <SetPageState+0x19c>)
 800b96e:	6979      	ldr	r1, [r7, #20]
 800b970:	0008      	movs	r0, r1
 800b972:	f000 f8cb 	bl	800bb0c <FI_WriteDoubleWord>
 800b976:	1e03      	subs	r3, r0, #0
 800b978:	d001      	beq.n	800b97e <SetPageState+0x132>
        return EE_WRITE_ERROR;
 800b97a:	2302      	movs	r3, #2
 800b97c:	e02d      	b.n	800b9da <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	b2da      	uxtb	r2, r3
 800b982:	4b1a      	ldr	r3, [pc, #104]	; (800b9ec <SetPageState+0x1a0>)
 800b984:	701a      	strb	r2, [r3, #0]
    break;
 800b986:	e027      	b.n	800b9d8 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 800b988:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <SetPageState+0x19c>)
 800b98a:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <SetPageState+0x19c>)
 800b98c:	6939      	ldr	r1, [r7, #16]
 800b98e:	0008      	movs	r0, r1
 800b990:	f000 f8bc 	bl	800bb0c <FI_WriteDoubleWord>
 800b994:	1e03      	subs	r3, r0, #0
 800b996:	d001      	beq.n	800b99c <SetPageState+0x150>
        return EE_WRITE_ERROR;
 800b998:	2302      	movs	r3, #2
 800b99a:	e01e      	b.n	800b9da <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <SetPageState+0x1a0>)
 800b9a2:	701a      	strb	r2, [r3, #0]
    break;
 800b9a4:	e018      	b.n	800b9d8 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 800b9a6:	4a10      	ldr	r2, [pc, #64]	; (800b9e8 <SetPageState+0x19c>)
 800b9a8:	4b0f      	ldr	r3, [pc, #60]	; (800b9e8 <SetPageState+0x19c>)
 800b9aa:	68f9      	ldr	r1, [r7, #12]
 800b9ac:	0008      	movs	r0, r1
 800b9ae:	f000 f8ad 	bl	800bb0c <FI_WriteDoubleWord>
 800b9b2:	1e03      	subs	r3, r0, #0
 800b9b4:	d00d      	beq.n	800b9d2 <SetPageState+0x186>
        return EE_WRITE_ERROR;
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	e00f      	b.n	800b9da <SetPageState+0x18e>
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800b9ba:	4a0b      	ldr	r2, [pc, #44]	; (800b9e8 <SetPageState+0x19c>)
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <SetPageState+0x19c>)
 800b9be:	68b9      	ldr	r1, [r7, #8]
 800b9c0:	0008      	movs	r0, r1
 800b9c2:	f000 f8a3 	bl	800bb0c <FI_WriteDoubleWord>
 800b9c6:	1e03      	subs	r3, r0, #0
 800b9c8:	d005      	beq.n	800b9d6 <SetPageState+0x18a>
        return EE_WRITE_ERROR;
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e005      	b.n	800b9da <SetPageState+0x18e>
    break;
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	e002      	b.n	800b9d8 <SetPageState+0x18c>
    break;
 800b9d2:	46c0      	nop			; (mov r8, r8)
 800b9d4:	e000      	b.n	800b9d8 <SetPageState+0x18c>
    break;
 800b9d6:	46c0      	nop			; (mov r8, r8)
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	0018      	movs	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	b007      	add	sp, #28
 800b9e0:	bd90      	pop	{r4, r7, pc}
 800b9e2:	46c0      	nop			; (mov r8, r8)
 800b9e4:	1fff75e0 	.word	0x1fff75e0
 800b9e8:	aaaaaaaa 	.word	0xaaaaaaaa
 800b9ec:	2000013a 	.word	0x2000013a

0800b9f0 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b08a      	sub	sp, #40	; 0x28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	623a      	str	r2, [r7, #32]
 800b9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800ba00:	2200      	movs	r2, #0
 800ba02:	2300      	movs	r3, #0
 800ba04:	61ba      	str	r2, [r7, #24]
 800ba06:	61fb      	str	r3, [r7, #28]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	613a      	str	r2, [r7, #16]
 800ba0e:	617b      	str	r3, [r7, #20]
 800ba10:	2200      	movs	r2, #0
 800ba12:	2300      	movs	r3, #0
 800ba14:	60ba      	str	r2, [r7, #8]
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	623a      	str	r2, [r7, #32]
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3308      	adds	r3, #8
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	61ba      	str	r2, [r7, #24]
 800ba2c:	61fb      	str	r3, [r7, #28]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3310      	adds	r3, #16
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	613a      	str	r2, [r7, #16]
 800ba38:	617b      	str	r3, [r7, #20]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3318      	adds	r3, #24
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	60ba      	str	r2, [r7, #8]
 800ba44:	60fb      	str	r3, [r7, #12]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	d102      	bne.n	800ba52 <GetPageState+0x62>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	d001      	beq.n	800ba56 <GetPageState+0x66>
  {
    return STATE_PAGE_ERASING;
 800ba52:	2304      	movs	r3, #4
 800ba54:	e018      	b.n	800ba88 <GetPageState+0x98>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	d102      	bne.n	800ba62 <GetPageState+0x72>
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	d001      	beq.n	800ba66 <GetPageState+0x76>
  {
    return STATE_PAGE_VALID;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e010      	b.n	800ba88 <GetPageState+0x98>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	d102      	bne.n	800ba72 <GetPageState+0x82>
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	d001      	beq.n	800ba76 <GetPageState+0x86>
  {
    return STATE_PAGE_ACTIVE;
 800ba72:	2302      	movs	r3, #2
 800ba74:	e008      	b.n	800ba88 <GetPageState+0x98>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	d102      	bne.n	800ba82 <GetPageState+0x92>
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	3301      	adds	r3, #1
 800ba80:	d001      	beq.n	800ba86 <GetPageState+0x96>
  {
    return STATE_PAGE_RECEIVE;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <GetPageState+0x98>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	0018      	movs	r0, r3
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	b00a      	add	sp, #40	; 0x28
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800ba94:	2380      	movs	r3, #128	; 0x80
 800ba96:	015b      	lsls	r3, r3, #5
 800ba98:	0018      	movs	r0, r3
 800ba9a:	f7fe f9e1 	bl	8009e60 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 800ba9e:	4a07      	ldr	r2, [pc, #28]	; (800babc <ConfigureCrc+0x2c>)
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <ConfigureCrc+0x30>)
 800baa2:	0011      	movs	r1, r2
 800baa4:	0018      	movs	r0, r3
 800baa6:	f7fe f9a7 	bl	8009df8 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800baaa:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <ConfigureCrc+0x30>)
 800baac:	2108      	movs	r1, #8
 800baae:	0018      	movs	r0, r3
 800bab0:	f7fe f990 	bl	8009dd4 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800bab4:	46c0      	nop			; (mov r8, r8)
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	00008005 	.word	0x00008005
 800bac0:	40023000 	.word	0x40023000

0800bac4 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	000a      	movs	r2, r1
 800bace:	1cbb      	adds	r3, r7, #2
 800bad0:	801a      	strh	r2, [r3, #0]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800bad2:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <CalculateCrc+0x44>)
 800bad4:	0018      	movs	r0, r3
 800bad6:	f7fe f96f 	bl	8009db8 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a0a      	ldr	r2, [pc, #40]	; (800bb08 <CalculateCrc+0x44>)
 800bade:	0019      	movs	r1, r3
 800bae0:	0010      	movs	r0, r2
 800bae2:	f7fe f995 	bl	8009e10 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800bae6:	1cbb      	adds	r3, r7, #2
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	4a07      	ldr	r2, [pc, #28]	; (800bb08 <CalculateCrc+0x44>)
 800baec:	0019      	movs	r1, r3
 800baee:	0010      	movs	r0, r2
 800baf0:	f7fe f99a 	bl	8009e28 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <CalculateCrc+0x44>)
 800baf6:	0018      	movs	r0, r3
 800baf8:	f7fe f9a7 	bl	8009e4a <LL_CRC_ReadData16>
 800bafc:	0003      	movs	r3, r0
}
 800bafe:	0018      	movs	r0, r3
 800bb00:	46bd      	mov	sp, r7
 800bb02:	b002      	add	sp, #8
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	46c0      	nop			; (mov r8, r8)
 800bb08:	40023000 	.word	0x40023000

0800bb0c <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	603a      	str	r2, [r7, #0]
 800bb16:	607b      	str	r3, [r7, #4]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68f9      	ldr	r1, [r7, #12]
 800bb1e:	2001      	movs	r0, #1
 800bb20:	f7f8 fe46 	bl	80047b0 <HAL_FLASH_Program>
 800bb24:	0003      	movs	r3, r0
}
 800bb26:	0018      	movs	r0, r3
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	b004      	add	sp, #16
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800bb2e:	b590      	push	{r4, r7, lr}
 800bb30:	b089      	sub	sp, #36	; 0x24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	000a      	movs	r2, r1
 800bb38:	1cbb      	adds	r3, r7, #2
 800bb3a:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800bb3c:	241e      	movs	r4, #30
 800bb3e:	193b      	adds	r3, r7, r4
 800bb40:	2200      	movs	r2, #0
 800bb42:	801a      	strh	r2, [r3, #0]
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800bb44:	2300      	movs	r3, #0
 800bb46:	60bb      	str	r3, [r7, #8]
#ifdef FLASH_BANK_2
  uint32_t bank = GetBankNumber(PAGE_ADDRESS(Page));
  s_eraseinit.Banks       = bank;
#endif  
  
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800bb48:	210c      	movs	r1, #12
 800bb4a:	187b      	adds	r3, r7, r1
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	601a      	str	r2, [r3, #0]
  s_eraseinit.NbPages     = NbPages;
 800bb50:	1cbb      	adds	r3, r7, #2
 800bb52:	881a      	ldrh	r2, [r3, #0]
 800bb54:	187b      	adds	r3, r7, r1
 800bb56:	60da      	str	r2, [r3, #12]
  s_eraseinit.Page        = Page;
 800bb58:	187b      	adds	r3, r7, r1
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	609a      	str	r2, [r3, #8]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800bb5e:	2308      	movs	r3, #8
 800bb60:	18fa      	adds	r2, r7, r3
 800bb62:	187b      	adds	r3, r7, r1
 800bb64:	0011      	movs	r1, r2
 800bb66:	0018      	movs	r0, r3
 800bb68:	f7f8 ff1e 	bl	80049a8 <HAL_FLASHEx_Erase>
 800bb6c:	1e03      	subs	r3, r0, #0
 800bb6e:	d002      	beq.n	800bb76 <FI_PageErase+0x48>
  {
    status = EE_ERASE_ERROR;
 800bb70:	193b      	adds	r3, r7, r4
 800bb72:	2201      	movs	r2, #1
 800bb74:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800bb76:	231e      	movs	r3, #30
 800bb78:	18fb      	adds	r3, r7, r3
 800bb7a:	881b      	ldrh	r3, [r3, #0]
}
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b009      	add	sp, #36	; 0x24
 800bb82:	bd90      	pop	{r4, r7, pc}

0800bb84 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
  /* No flush needed. There is no D-Cache for the STM32G0x0 and STM32G0x1 products. */
  return;
 800bb88:	46c0      	nop			; (mov r8, r8)
}
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 800bb92:	2300      	movs	r3, #0
#endif
}
 800bb94:	0018      	movs	r0, r3
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
	...

0800bb9c <interfaceWrite>:
#include "interface.h"

void _interfaceIntToArray(char *destination, uint8_t offset, int16_t integer);
void _interfaceClear(char *buffer);

void interfaceWrite(void) {
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af02      	add	r7, sp, #8

	//								WRITE DATA TO CLOCK

	_interfaceClear(buffer);
 800bba2:	4b27      	ldr	r3, [pc, #156]	; (800bc40 <interfaceWrite+0xa4>)
 800bba4:	0018      	movs	r0, r3
 800bba6:	f000 fad5 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.hour);
 800bbaa:	4b26      	ldr	r3, [pc, #152]	; (800bc44 <interfaceWrite+0xa8>)
 800bbac:	78db      	ldrb	r3, [r3, #3]
 800bbae:	b25b      	sxtb	r3, r3
 800bbb0:	b21a      	sxth	r2, r3
 800bbb2:	4b23      	ldr	r3, [pc, #140]	; (800bc40 <interfaceWrite+0xa4>)
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	0018      	movs	r0, r3
 800bbb8:	f000 fa90 	bl	800c0dc <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.actual.minute);
 800bbbc:	4b21      	ldr	r3, [pc, #132]	; (800bc44 <interfaceWrite+0xa8>)
 800bbbe:	791b      	ldrb	r3, [r3, #4]
 800bbc0:	b25b      	sxtb	r3, r3
 800bbc2:	b21a      	sxth	r2, r3
 800bbc4:	4b1e      	ldr	r3, [pc, #120]	; (800bc40 <interfaceWrite+0xa4>)
 800bbc6:	2102      	movs	r1, #2
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f000 fa87 	bl	800c0dc <_interfaceIntToArray>

	if (rtcBlink(&chronograph)) {
 800bbce:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <interfaceWrite+0xa8>)
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f002 fda1 	bl	800e718 <rtcBlink>
 800bbd6:	1e03      	subs	r3, r0, #0
 800bbd8:	d00a      	beq.n	800bbf0 <interfaceWrite+0x54>
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_COLON, NOT_EDITABLE);
 800bbda:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <interfaceWrite+0xa4>)
 800bbdc:	481a      	ldr	r0, [pc, #104]	; (800bc48 <interfaceWrite+0xac>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	9201      	str	r2, [sp, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	9200      	str	r2, [sp, #0]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2100      	movs	r1, #0
 800bbea:	f001 fc0b 	bl	800d404 <menuItemChangeValue>
 800bbee:	e009      	b.n	800bc04 <interfaceWrite+0x68>
	} else {
		menuItemChangeValue(&menu, CLOCK, 0, buffer, INTER_DISABLED,
 800bbf0:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <interfaceWrite+0xa4>)
 800bbf2:	4815      	ldr	r0, [pc, #84]	; (800bc48 <interfaceWrite+0xac>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	9201      	str	r2, [sp, #4]
 800bbf8:	2204      	movs	r2, #4
 800bbfa:	9200      	str	r2, [sp, #0]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2100      	movs	r1, #0
 800bc00:	f001 fc00 	bl	800d404 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	_interfaceClear(buffer);
 800bc04:	4b0e      	ldr	r3, [pc, #56]	; (800bc40 <interfaceWrite+0xa4>)
 800bc06:	0018      	movs	r0, r3
 800bc08:	f000 faa4 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.second);
 800bc0c:	4b0d      	ldr	r3, [pc, #52]	; (800bc44 <interfaceWrite+0xa8>)
 800bc0e:	795b      	ldrb	r3, [r3, #5]
 800bc10:	b25b      	sxtb	r3, r3
 800bc12:	b21a      	sxth	r2, r3
 800bc14:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <interfaceWrite+0xa4>)
 800bc16:	2102      	movs	r1, #2
 800bc18:	0018      	movs	r0, r3
 800bc1a:	f000 fa5f 	bl	800c0dc <_interfaceIntToArray>
	if (rtcBlink(&chronograph)) {
 800bc1e:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <interfaceWrite+0xa8>)
 800bc20:	0018      	movs	r0, r3
 800bc22:	f002 fd79 	bl	800e718 <rtcBlink>
 800bc26:	1e03      	subs	r3, r0, #0
 800bc28:	d010      	beq.n	800bc4c <interfaceWrite+0xb0>
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_COLON,
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <interfaceWrite+0xa4>)
 800bc2c:	4806      	ldr	r0, [pc, #24]	; (800bc48 <interfaceWrite+0xac>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	9200      	str	r2, [sp, #0]
 800bc36:	2201      	movs	r2, #1
 800bc38:	2101      	movs	r1, #1
 800bc3a:	f001 fbe3 	bl	800d404 <menuItemChangeValue>
 800bc3e:	e00f      	b.n	800bc60 <interfaceWrite+0xc4>
 800bc40:	20000174 	.word	0x20000174
 800bc44:	2000034c 	.word	0x2000034c
 800bc48:	20000184 	.word	0x20000184
		NOT_EDITABLE);
	} else {
		menuItemChangeValue(&menu, CLOCK_SECONDHAND, 1, buffer, INTER_DISABLED,
 800bc4c:	4bf2      	ldr	r3, [pc, #968]	; (800c018 <interfaceWrite+0x47c>)
 800bc4e:	48f3      	ldr	r0, [pc, #972]	; (800c01c <interfaceWrite+0x480>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	9201      	str	r2, [sp, #4]
 800bc54:	2204      	movs	r2, #4
 800bc56:	9200      	str	r2, [sp, #0]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	f001 fbd2 	bl	800d404 <menuItemChangeValue>
		NOT_EDITABLE);
	}

	//								WRITE DATA TO CALENDAR

	_interfaceClear(buffer);
 800bc60:	4bed      	ldr	r3, [pc, #948]	; (800c018 <interfaceWrite+0x47c>)
 800bc62:	0018      	movs	r0, r3
 800bc64:	f000 fa76 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.day);
 800bc68:	4bed      	ldr	r3, [pc, #948]	; (800c020 <interfaceWrite+0x484>)
 800bc6a:	789b      	ldrb	r3, [r3, #2]
 800bc6c:	b25b      	sxtb	r3, r3
 800bc6e:	b21a      	sxth	r2, r3
 800bc70:	4be9      	ldr	r3, [pc, #932]	; (800c018 <interfaceWrite+0x47c>)
 800bc72:	2100      	movs	r1, #0
 800bc74:	0018      	movs	r0, r3
 800bc76:	f000 fa31 	bl	800c0dc <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.actual.month);
 800bc7a:	4be9      	ldr	r3, [pc, #932]	; (800c020 <interfaceWrite+0x484>)
 800bc7c:	785b      	ldrb	r3, [r3, #1]
 800bc7e:	b25b      	sxtb	r3, r3
 800bc80:	b21a      	sxth	r2, r3
 800bc82:	4be5      	ldr	r3, [pc, #916]	; (800c018 <interfaceWrite+0x47c>)
 800bc84:	2102      	movs	r1, #2
 800bc86:	0018      	movs	r0, r3
 800bc88:	f000 fa28 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, CLOCK_DATE, 1, buffer, INTER_DOT, NOT_EDITABLE);
 800bc8c:	4be2      	ldr	r3, [pc, #904]	; (800c018 <interfaceWrite+0x47c>)
 800bc8e:	48e3      	ldr	r0, [pc, #908]	; (800c01c <interfaceWrite+0x480>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	9201      	str	r2, [sp, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	9200      	str	r2, [sp, #0]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	f001 fbb2 	bl	800d404 <menuItemChangeValue>

	//								WRITE DATA TO SETTINGS_CLOCK

	_interfaceClear(buffer);
 800bca0:	4bdd      	ldr	r3, [pc, #884]	; (800c018 <interfaceWrite+0x47c>)
 800bca2:	0018      	movs	r0, r3
 800bca4:	f000 fa56 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.hour);
 800bca8:	4bdd      	ldr	r3, [pc, #884]	; (800c020 <interfaceWrite+0x484>)
 800bcaa:	78db      	ldrb	r3, [r3, #3]
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	b21a      	sxth	r2, r3
 800bcb0:	4bd9      	ldr	r3, [pc, #868]	; (800c018 <interfaceWrite+0x47c>)
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f000 fa11 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_HOUR, 2, buffer, INTER_COLON,
 800bcba:	4bd7      	ldr	r3, [pc, #860]	; (800c018 <interfaceWrite+0x47c>)
 800bcbc:	48d7      	ldr	r0, [pc, #860]	; (800c01c <interfaceWrite+0x480>)
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	9201      	str	r2, [sp, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	9200      	str	r2, [sp, #0]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	2100      	movs	r1, #0
 800bcca:	f001 fb9b 	bl	800d404 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800bcce:	4bd2      	ldr	r3, [pc, #840]	; (800c018 <interfaceWrite+0x47c>)
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f000 fa3f 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.minute);
 800bcd6:	4bd2      	ldr	r3, [pc, #840]	; (800c020 <interfaceWrite+0x484>)
 800bcd8:	791b      	ldrb	r3, [r3, #4]
 800bcda:	b25b      	sxtb	r3, r3
 800bcdc:	b21a      	sxth	r2, r3
 800bcde:	4bce      	ldr	r3, [pc, #824]	; (800c018 <interfaceWrite+0x47c>)
 800bce0:	2102      	movs	r1, #2
 800bce2:	0018      	movs	r0, r3
 800bce4:	f000 f9fa 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_MINUTE, 2, buffer, INTER_COLON,
 800bce8:	4bcb      	ldr	r3, [pc, #812]	; (800c018 <interfaceWrite+0x47c>)
 800bcea:	48cc      	ldr	r0, [pc, #816]	; (800c01c <interfaceWrite+0x480>)
 800bcec:	2201      	movs	r2, #1
 800bcee:	9201      	str	r2, [sp, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	9200      	str	r2, [sp, #0]
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	f001 fb84 	bl	800d404 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800bcfc:	4bc6      	ldr	r3, [pc, #792]	; (800c018 <interfaceWrite+0x47c>)
 800bcfe:	0018      	movs	r0, r3
 800bd00:	f000 fa28 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.second);
 800bd04:	4bc6      	ldr	r3, [pc, #792]	; (800c020 <interfaceWrite+0x484>)
 800bd06:	795b      	ldrb	r3, [r3, #5]
 800bd08:	b25b      	sxtb	r3, r3
 800bd0a:	b21a      	sxth	r2, r3
 800bd0c:	4bc2      	ldr	r3, [pc, #776]	; (800c018 <interfaceWrite+0x47c>)
 800bd0e:	2102      	movs	r1, #2
 800bd10:	0018      	movs	r0, r3
 800bd12:	f000 f9e3 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CLOCK_SECONDS, 2, buffer, INTER_COLON,
 800bd16:	4bc0      	ldr	r3, [pc, #768]	; (800c018 <interfaceWrite+0x47c>)
 800bd18:	48c0      	ldr	r0, [pc, #768]	; (800c01c <interfaceWrite+0x480>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	9201      	str	r2, [sp, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	9200      	str	r2, [sp, #0]
 800bd22:	2202      	movs	r2, #2
 800bd24:	2102      	movs	r1, #2
 800bd26:	f001 fb6d 	bl	800d404 <menuItemChangeValue>
	EDITABLE);

	//								WRITE DATA TO SETTINGS_CALENDAR

	_interfaceClear(buffer);
 800bd2a:	4bbb      	ldr	r3, [pc, #748]	; (800c018 <interfaceWrite+0x47c>)
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	f000 fa11 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.day);
 800bd32:	4bbb      	ldr	r3, [pc, #748]	; (800c020 <interfaceWrite+0x484>)
 800bd34:	789b      	ldrb	r3, [r3, #2]
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	b21a      	sxth	r2, r3
 800bd3a:	4bb7      	ldr	r3, [pc, #732]	; (800c018 <interfaceWrite+0x47c>)
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f000 f9cc 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_DAY, 2, buffer, INTER_DOT,
 800bd44:	4bb4      	ldr	r3, [pc, #720]	; (800c018 <interfaceWrite+0x47c>)
 800bd46:	48b5      	ldr	r0, [pc, #724]	; (800c01c <interfaceWrite+0x480>)
 800bd48:	2201      	movs	r2, #1
 800bd4a:	9201      	str	r2, [sp, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	9200      	str	r2, [sp, #0]
 800bd50:	2202      	movs	r2, #2
 800bd52:	2103      	movs	r1, #3
 800bd54:	f001 fb56 	bl	800d404 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800bd58:	4baf      	ldr	r3, [pc, #700]	; (800c018 <interfaceWrite+0x47c>)
 800bd5a:	0018      	movs	r0, r3
 800bd5c:	f000 f9fa 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.actual.month);
 800bd60:	4baf      	ldr	r3, [pc, #700]	; (800c020 <interfaceWrite+0x484>)
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	b25b      	sxtb	r3, r3
 800bd66:	b21a      	sxth	r2, r3
 800bd68:	4bab      	ldr	r3, [pc, #684]	; (800c018 <interfaceWrite+0x47c>)
 800bd6a:	2102      	movs	r1, #2
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f000 f9b5 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_MONTH, 2, buffer, INTER_DOT,
 800bd72:	4ba9      	ldr	r3, [pc, #676]	; (800c018 <interfaceWrite+0x47c>)
 800bd74:	48a9      	ldr	r0, [pc, #676]	; (800c01c <interfaceWrite+0x480>)
 800bd76:	2201      	movs	r2, #1
 800bd78:	9201      	str	r2, [sp, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	9200      	str	r2, [sp, #0]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	2104      	movs	r1, #4
 800bd82:	f001 fb3f 	bl	800d404 <menuItemChangeValue>
	EDITABLE);

	_interfaceClear(buffer);
 800bd86:	4ba4      	ldr	r3, [pc, #656]	; (800c018 <interfaceWrite+0x47c>)
 800bd88:	0018      	movs	r0, r3
 800bd8a:	f000 f9e3 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.actual.year);
 800bd8e:	4ba4      	ldr	r3, [pc, #656]	; (800c020 <interfaceWrite+0x484>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	b25b      	sxtb	r3, r3
 800bd94:	b21a      	sxth	r2, r3
 800bd96:	4ba0      	ldr	r3, [pc, #640]	; (800c018 <interfaceWrite+0x47c>)
 800bd98:	2100      	movs	r1, #0
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f000 f99e 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_CALENDAR_YEAR, 2, buffer,
 800bda0:	4b9d      	ldr	r3, [pc, #628]	; (800c018 <interfaceWrite+0x47c>)
 800bda2:	489e      	ldr	r0, [pc, #632]	; (800c01c <interfaceWrite+0x480>)
 800bda4:	2201      	movs	r2, #1
 800bda6:	9201      	str	r2, [sp, #4]
 800bda8:	2204      	movs	r2, #4
 800bdaa:	9200      	str	r2, [sp, #0]
 800bdac:	2202      	movs	r2, #2
 800bdae:	2105      	movs	r1, #5
 800bdb0:	f001 fb28 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, EDITABLE);

	//								WRITE CHRONO TIME

	_interfaceClear(buffer);
 800bdb4:	4b98      	ldr	r3, [pc, #608]	; (800c018 <interfaceWrite+0x47c>)
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	f000 f9cc 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.chrono.minute);
 800bdbc:	4b98      	ldr	r3, [pc, #608]	; (800c020 <interfaceWrite+0x484>)
 800bdbe:	7f1b      	ldrb	r3, [r3, #28]
 800bdc0:	b25b      	sxtb	r3, r3
 800bdc2:	b21a      	sxth	r2, r3
 800bdc4:	4b94      	ldr	r3, [pc, #592]	; (800c018 <interfaceWrite+0x47c>)
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f000 f987 	bl	800c0dc <_interfaceIntToArray>
	_interfaceIntToArray(buffer, 2, chronograph.chrono.second);
 800bdce:	4b94      	ldr	r3, [pc, #592]	; (800c020 <interfaceWrite+0x484>)
 800bdd0:	7f5b      	ldrb	r3, [r3, #29]
 800bdd2:	b25b      	sxtb	r3, r3
 800bdd4:	b21a      	sxth	r2, r3
 800bdd6:	4b90      	ldr	r3, [pc, #576]	; (800c018 <interfaceWrite+0x47c>)
 800bdd8:	2102      	movs	r1, #2
 800bdda:	0018      	movs	r0, r3
 800bddc:	f000 f97e 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, CHRONO, CHRONO_LEVEL, buffer, INTER_COLON,
 800bde0:	4b8d      	ldr	r3, [pc, #564]	; (800c018 <interfaceWrite+0x47c>)
 800bde2:	488e      	ldr	r0, [pc, #568]	; (800c01c <interfaceWrite+0x480>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	9201      	str	r2, [sp, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	9200      	str	r2, [sp, #0]
 800bdec:	2200      	movs	r2, #0
 800bdee:	2101      	movs	r1, #1
 800bdf0:	f001 fb08 	bl	800d404 <menuItemChangeValue>
	NOT_EDITABLE);

	_interfaceClear(buffer);
 800bdf4:	4b88      	ldr	r3, [pc, #544]	; (800c018 <interfaceWrite+0x47c>)
 800bdf6:	0018      	movs	r0, r3
 800bdf8:	f000 f9ac 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, chronograph.chrono.hour);
 800bdfc:	4b88      	ldr	r3, [pc, #544]	; (800c020 <interfaceWrite+0x484>)
 800bdfe:	7edb      	ldrb	r3, [r3, #27]
 800be00:	b25b      	sxtb	r3, r3
 800be02:	b21a      	sxth	r2, r3
 800be04:	4b84      	ldr	r3, [pc, #528]	; (800c018 <interfaceWrite+0x47c>)
 800be06:	2100      	movs	r1, #0
 800be08:	0018      	movs	r0, r3
 800be0a:	f000 f967 	bl	800c0dc <_interfaceIntToArray>
	buffer[3] = 'h';
 800be0e:	4b82      	ldr	r3, [pc, #520]	; (800c018 <interfaceWrite+0x47c>)
 800be10:	2268      	movs	r2, #104	; 0x68
 800be12:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, CHRONO_HOURS, CHRONO_HOURS_LEVEL, buffer,
 800be14:	4b80      	ldr	r3, [pc, #512]	; (800c018 <interfaceWrite+0x47c>)
 800be16:	4881      	ldr	r0, [pc, #516]	; (800c01c <interfaceWrite+0x480>)
 800be18:	2200      	movs	r2, #0
 800be1a:	9201      	str	r2, [sp, #4]
 800be1c:	2204      	movs	r2, #4
 800be1e:	9200      	str	r2, [sp, #0]
 800be20:	2201      	movs	r2, #1
 800be22:	2103      	movs	r1, #3
 800be24:	f001 faee 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	_interfaceClear(buffer);
 800be28:	4b7b      	ldr	r3, [pc, #492]	; (800c018 <interfaceWrite+0x47c>)
 800be2a:	0018      	movs	r0, r3
 800be2c:	f000 f992 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 2, chronograph.chrono.hundredth);
 800be30:	4b7b      	ldr	r3, [pc, #492]	; (800c020 <interfaceWrite+0x484>)
 800be32:	7f9b      	ldrb	r3, [r3, #30]
 800be34:	b25b      	sxtb	r3, r3
 800be36:	b21a      	sxth	r2, r3
 800be38:	4b77      	ldr	r3, [pc, #476]	; (800c018 <interfaceWrite+0x47c>)
 800be3a:	2102      	movs	r1, #2
 800be3c:	0018      	movs	r0, r3
 800be3e:	f000 f94d 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, CHRONO_HUNDREDTHS, CHRONO_HUNDREDTHS_LEVEL,
 800be42:	4b75      	ldr	r3, [pc, #468]	; (800c018 <interfaceWrite+0x47c>)
 800be44:	4875      	ldr	r0, [pc, #468]	; (800c01c <interfaceWrite+0x480>)
 800be46:	2200      	movs	r2, #0
 800be48:	9201      	str	r2, [sp, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	9200      	str	r2, [sp, #0]
 800be4e:	2201      	movs	r2, #1
 800be50:	2102      	movs	r1, #2
 800be52:	f001 fad7 	bl	800d404 <menuItemChangeValue>
//	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE, SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
//			INTER_DISABLED, EDITABLE);

//								WRITE BME280 DATA
	//temperature
	_interfaceClear(buffer);
 800be56:	4b70      	ldr	r3, [pc, #448]	; (800c018 <interfaceWrite+0x47c>)
 800be58:	0018      	movs	r0, r3
 800be5a:	f000 f97b 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0,
			(bme280.temperatureValue / 100) + temperatureCorrection);
 800be5e:	4b71      	ldr	r3, [pc, #452]	; (800c024 <interfaceWrite+0x488>)
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2164      	movs	r1, #100	; 0x64
 800be64:	0018      	movs	r0, r3
 800be66:	f7f4 f9e3 	bl	8000230 <__divsi3>
 800be6a:	0003      	movs	r3, r0
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	4b6e      	ldr	r3, [pc, #440]	; (800c028 <interfaceWrite+0x48c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	b29b      	uxth	r3, r3
 800be74:	18d3      	adds	r3, r2, r3
 800be76:	b29b      	uxth	r3, r3
	_interfaceIntToArray(buffer, 0,
 800be78:	b21a      	sxth	r2, r3
 800be7a:	4b67      	ldr	r3, [pc, #412]	; (800c018 <interfaceWrite+0x47c>)
 800be7c:	2100      	movs	r1, #0
 800be7e:	0018      	movs	r0, r3
 800be80:	f000 f92c 	bl	800c0dc <_interfaceIntToArray>
	if (((bme280.temperatureValue / 100) + temperatureCorrection) > -10)
 800be84:	4b67      	ldr	r3, [pc, #412]	; (800c024 <interfaceWrite+0x488>)
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	2164      	movs	r1, #100	; 0x64
 800be8a:	0018      	movs	r0, r3
 800be8c:	f7f4 f9d0 	bl	8000230 <__divsi3>
 800be90:	0003      	movs	r3, r0
 800be92:	001a      	movs	r2, r3
 800be94:	4b64      	ldr	r3, [pc, #400]	; (800c028 <interfaceWrite+0x48c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	18d3      	adds	r3, r2, r3
 800be9a:	3309      	adds	r3, #9
 800be9c:	db02      	blt.n	800bea4 <interfaceWrite+0x308>
		buffer[2] = '^';
 800be9e:	4b5e      	ldr	r3, [pc, #376]	; (800c018 <interfaceWrite+0x47c>)
 800bea0:	225e      	movs	r2, #94	; 0x5e
 800bea2:	709a      	strb	r2, [r3, #2]
	buffer[3] = 'C';
 800bea4:	4b5c      	ldr	r3, [pc, #368]	; (800c018 <interfaceWrite+0x47c>)
 800bea6:	2243      	movs	r2, #67	; 0x43
 800bea8:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, TEMPERATURE, TEMPERATURE_LEVEL, buffer,
 800beaa:	4b5b      	ldr	r3, [pc, #364]	; (800c018 <interfaceWrite+0x47c>)
 800beac:	485b      	ldr	r0, [pc, #364]	; (800c01c <interfaceWrite+0x480>)
 800beae:	2200      	movs	r2, #0
 800beb0:	9201      	str	r2, [sp, #4]
 800beb2:	2204      	movs	r2, #4
 800beb4:	9200      	str	r2, [sp, #0]
 800beb6:	2200      	movs	r2, #0
 800beb8:	2102      	movs	r1, #2
 800beba:	f001 faa3 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//temperature Correction
	_interfaceClear(buffer);
 800bebe:	4b56      	ldr	r3, [pc, #344]	; (800c018 <interfaceWrite+0x47c>)
 800bec0:	0018      	movs	r0, r3
 800bec2:	f000 f947 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, temperatureCorrection);
 800bec6:	4b58      	ldr	r3, [pc, #352]	; (800c028 <interfaceWrite+0x48c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	b21a      	sxth	r2, r3
 800becc:	4b52      	ldr	r3, [pc, #328]	; (800c018 <interfaceWrite+0x47c>)
 800bece:	2100      	movs	r1, #0
 800bed0:	0018      	movs	r0, r3
 800bed2:	f000 f903 	bl	800c0dc <_interfaceIntToArray>
	buffer[3] = '^';
 800bed6:	4b50      	ldr	r3, [pc, #320]	; (800c018 <interfaceWrite+0x47c>)
 800bed8:	225e      	movs	r2, #94	; 0x5e
 800beda:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, SETTINGS_CORRECTION_VALUE,
 800bedc:	4b4e      	ldr	r3, [pc, #312]	; (800c018 <interfaceWrite+0x47c>)
 800bede:	484f      	ldr	r0, [pc, #316]	; (800c01c <interfaceWrite+0x480>)
 800bee0:	2201      	movs	r2, #1
 800bee2:	9201      	str	r2, [sp, #4]
 800bee4:	2204      	movs	r2, #4
 800bee6:	9200      	str	r2, [sp, #0]
 800bee8:	2202      	movs	r2, #2
 800beea:	2106      	movs	r1, #6
 800beec:	f001 fa8a 	bl	800d404 <menuItemChangeValue>
	SETTINGS_CORRECTION_VALUE_LEVEL, buffer,
	INTER_DISABLED, EDITABLE);

	//pressure
	_interfaceClear(buffer);
 800bef0:	4b49      	ldr	r3, [pc, #292]	; (800c018 <interfaceWrite+0x47c>)
 800bef2:	0018      	movs	r0, r3
 800bef4:	f000 f92e 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.pressureValue / 100);
 800bef8:	4b4a      	ldr	r3, [pc, #296]	; (800c024 <interfaceWrite+0x488>)
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	2164      	movs	r1, #100	; 0x64
 800befe:	0018      	movs	r0, r3
 800bf00:	f7f4 f90c 	bl	800011c <__udivsi3>
 800bf04:	0003      	movs	r3, r0
 800bf06:	b21a      	sxth	r2, r3
 800bf08:	4b43      	ldr	r3, [pc, #268]	; (800c018 <interfaceWrite+0x47c>)
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	0018      	movs	r0, r3
 800bf0e:	f000 f8e5 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, BAROMETER, BAROMETER_LEVEL, buffer,
 800bf12:	4b41      	ldr	r3, [pc, #260]	; (800c018 <interfaceWrite+0x47c>)
 800bf14:	4841      	ldr	r0, [pc, #260]	; (800c01c <interfaceWrite+0x480>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	9201      	str	r2, [sp, #4]
 800bf1a:	2204      	movs	r2, #4
 800bf1c:	9200      	str	r2, [sp, #0]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2103      	movs	r1, #3
 800bf22:	f001 fa6f 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//pressure reference(altimeter)
	_interfaceClear(buffer);
 800bf26:	4b3c      	ldr	r3, [pc, #240]	; (800c018 <interfaceWrite+0x47c>)
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f000 f913 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.pressureReference);
 800bf2e:	4b3d      	ldr	r3, [pc, #244]	; (800c024 <interfaceWrite+0x488>)
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	b21a      	sxth	r2, r3
 800bf34:	4b38      	ldr	r3, [pc, #224]	; (800c018 <interfaceWrite+0x47c>)
 800bf36:	2100      	movs	r1, #0
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f000 f8cf 	bl	800c0dc <_interfaceIntToArray>
	menuItemChangeValue(&menu, SETTINGS_REFERENCE_VALUE,
 800bf3e:	4b36      	ldr	r3, [pc, #216]	; (800c018 <interfaceWrite+0x47c>)
 800bf40:	4836      	ldr	r0, [pc, #216]	; (800c01c <interfaceWrite+0x480>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	9201      	str	r2, [sp, #4]
 800bf46:	2204      	movs	r2, #4
 800bf48:	9200      	str	r2, [sp, #0]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	2107      	movs	r1, #7
 800bf4e:	f001 fa59 	bl	800d404 <menuItemChangeValue>
	SETTINGS_REFERENCE_VALUE_LEVEL, buffer,
	INTER_DISABLED, EDITABLE);

	//humidity
	_interfaceClear(buffer);
 800bf52:	4b31      	ldr	r3, [pc, #196]	; (800c018 <interfaceWrite+0x47c>)
 800bf54:	0018      	movs	r0, r3
 800bf56:	f000 f8fd 	bl	800c154 <_interfaceClear>
	_interfaceIntToArray(buffer, 0, bme280.humidityValue);
 800bf5a:	4b32      	ldr	r3, [pc, #200]	; (800c024 <interfaceWrite+0x488>)
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	b21a      	sxth	r2, r3
 800bf60:	4b2d      	ldr	r3, [pc, #180]	; (800c018 <interfaceWrite+0x47c>)
 800bf62:	2100      	movs	r1, #0
 800bf64:	0018      	movs	r0, r3
 800bf66:	f000 f8b9 	bl	800c0dc <_interfaceIntToArray>
	buffer[3] = 'H';
 800bf6a:	4b2b      	ldr	r3, [pc, #172]	; (800c018 <interfaceWrite+0x47c>)
 800bf6c:	2248      	movs	r2, #72	; 0x48
 800bf6e:	70da      	strb	r2, [r3, #3]
	menuItemChangeValue(&menu, HIGROMETER, HIGROMETER_LEVEL, buffer,
 800bf70:	4b29      	ldr	r3, [pc, #164]	; (800c018 <interfaceWrite+0x47c>)
 800bf72:	482a      	ldr	r0, [pc, #168]	; (800c01c <interfaceWrite+0x480>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	9201      	str	r2, [sp, #4]
 800bf78:	2204      	movs	r2, #4
 800bf7a:	9200      	str	r2, [sp, #0]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2104      	movs	r1, #4
 800bf80:	f001 fa40 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	//altitude
	_interfaceClear(buffer);
 800bf84:	4b24      	ldr	r3, [pc, #144]	; (800c018 <interfaceWrite+0x47c>)
 800bf86:	0018      	movs	r0, r3
 800bf88:	f000 f8e4 	bl	800c154 <_interfaceClear>
	if (bme280.altitudeValue < -99999) {
 800bf8c:	4b25      	ldr	r3, [pc, #148]	; (800c024 <interfaceWrite+0x488>)
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	4a26      	ldr	r2, [pc, #152]	; (800c02c <interfaceWrite+0x490>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	da0a      	bge.n	800bfac <interfaceWrite+0x410>
//		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, "OL  ",
 800bf96:	4b26      	ldr	r3, [pc, #152]	; (800c030 <interfaceWrite+0x494>)
 800bf98:	4820      	ldr	r0, [pc, #128]	; (800c01c <interfaceWrite+0x480>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	9201      	str	r2, [sp, #4]
 800bf9e:	2204      	movs	r2, #4
 800bfa0:	9200      	str	r2, [sp, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2105      	movs	r1, #5
 800bfa6:	f001 fa2d 	bl	800d404 <menuItemChangeValue>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
		INTER_DISABLED,
		NOT_EDITABLE);
	}

}
 800bfaa:	e072      	b.n	800c092 <interfaceWrite+0x4f6>
	else if (bme280.altitudeValue < 0) {
 800bfac:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <interfaceWrite+0x488>)
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	da17      	bge.n	800bfe4 <interfaceWrite+0x448>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
 800bfb4:	4b1b      	ldr	r3, [pc, #108]	; (800c024 <interfaceWrite+0x488>)
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2164      	movs	r1, #100	; 0x64
 800bfba:	0018      	movs	r0, r3
 800bfbc:	f7f4 f938 	bl	8000230 <__divsi3>
 800bfc0:	0003      	movs	r3, r0
 800bfc2:	b21a      	sxth	r2, r3
 800bfc4:	4b14      	ldr	r3, [pc, #80]	; (800c018 <interfaceWrite+0x47c>)
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	0018      	movs	r0, r3
 800bfca:	f000 f887 	bl	800c0dc <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800bfce:	4b12      	ldr	r3, [pc, #72]	; (800c018 <interfaceWrite+0x47c>)
 800bfd0:	4812      	ldr	r0, [pc, #72]	; (800c01c <interfaceWrite+0x480>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	9201      	str	r2, [sp, #4]
 800bfd6:	2204      	movs	r2, #4
 800bfd8:	9200      	str	r2, [sp, #0]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2105      	movs	r1, #5
 800bfde:	f001 fa11 	bl	800d404 <menuItemChangeValue>
}
 800bfe2:	e056      	b.n	800c092 <interfaceWrite+0x4f6>
	else if (bme280.altitudeValue < 1000) {
 800bfe4:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <interfaceWrite+0x488>)
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	23fa      	movs	r3, #250	; 0xfa
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	429a      	cmp	r2, r3
 800bfee:	da21      	bge.n	800c034 <interfaceWrite+0x498>
		_interfaceIntToArray(buffer, 1, bme280.altitudeValue);
 800bff0:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <interfaceWrite+0x488>)
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	b21a      	sxth	r2, r3
 800bff6:	4b08      	ldr	r3, [pc, #32]	; (800c018 <interfaceWrite+0x47c>)
 800bff8:	2101      	movs	r1, #1
 800bffa:	0018      	movs	r0, r3
 800bffc:	f000 f86e 	bl	800c0dc <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <interfaceWrite+0x47c>)
 800c002:	4806      	ldr	r0, [pc, #24]	; (800c01c <interfaceWrite+0x480>)
 800c004:	2200      	movs	r2, #0
 800c006:	9201      	str	r2, [sp, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	9200      	str	r2, [sp, #0]
 800c00c:	2200      	movs	r2, #0
 800c00e:	2105      	movs	r1, #5
 800c010:	f001 f9f8 	bl	800d404 <menuItemChangeValue>
}
 800c014:	e03d      	b.n	800c092 <interfaceWrite+0x4f6>
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	20000174 	.word	0x20000174
 800c01c:	20000184 	.word	0x20000184
 800c020:	2000034c 	.word	0x2000034c
 800c024:	20000498 	.word	0x20000498
 800c028:	2000017c 	.word	0x2000017c
 800c02c:	fffe7961 	.word	0xfffe7961
 800c030:	0800f988 	.word	0x0800f988
	} else if (bme280.altitudeValue < 10000) {
 800c034:	4b18      	ldr	r3, [pc, #96]	; (800c098 <interfaceWrite+0x4fc>)
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	4a18      	ldr	r2, [pc, #96]	; (800c09c <interfaceWrite+0x500>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	dc12      	bgt.n	800c064 <interfaceWrite+0x4c8>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue);
 800c03e:	4b16      	ldr	r3, [pc, #88]	; (800c098 <interfaceWrite+0x4fc>)
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	b21a      	sxth	r2, r3
 800c044:	4b16      	ldr	r3, [pc, #88]	; (800c0a0 <interfaceWrite+0x504>)
 800c046:	2100      	movs	r1, #0
 800c048:	0018      	movs	r0, r3
 800c04a:	f000 f847 	bl	800c0dc <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800c04e:	4b14      	ldr	r3, [pc, #80]	; (800c0a0 <interfaceWrite+0x504>)
 800c050:	4814      	ldr	r0, [pc, #80]	; (800c0a4 <interfaceWrite+0x508>)
 800c052:	2200      	movs	r2, #0
 800c054:	9201      	str	r2, [sp, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	9200      	str	r2, [sp, #0]
 800c05a:	2200      	movs	r2, #0
 800c05c:	2105      	movs	r1, #5
 800c05e:	f001 f9d1 	bl	800d404 <menuItemChangeValue>
}
 800c062:	e016      	b.n	800c092 <interfaceWrite+0x4f6>
		_interfaceIntToArray(buffer, 0, bme280.altitudeValue / 100);
 800c064:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <interfaceWrite+0x4fc>)
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	2164      	movs	r1, #100	; 0x64
 800c06a:	0018      	movs	r0, r3
 800c06c:	f7f4 f8e0 	bl	8000230 <__divsi3>
 800c070:	0003      	movs	r3, r0
 800c072:	b21a      	sxth	r2, r3
 800c074:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <interfaceWrite+0x504>)
 800c076:	2100      	movs	r1, #0
 800c078:	0018      	movs	r0, r3
 800c07a:	f000 f82f 	bl	800c0dc <_interfaceIntToArray>
		menuItemChangeValue(&menu, ALTITUDE, ALTITUDE_LEVEL, buffer,
 800c07e:	4b08      	ldr	r3, [pc, #32]	; (800c0a0 <interfaceWrite+0x504>)
 800c080:	4808      	ldr	r0, [pc, #32]	; (800c0a4 <interfaceWrite+0x508>)
 800c082:	2200      	movs	r2, #0
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	2204      	movs	r2, #4
 800c088:	9200      	str	r2, [sp, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	2105      	movs	r1, #5
 800c08e:	f001 f9b9 	bl	800d404 <menuItemChangeValue>
}
 800c092:	46c0      	nop			; (mov r8, r8)
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20000498 	.word	0x20000498
 800c09c:	0000270f 	.word	0x0000270f
 800c0a0:	20000174 	.word	0x20000174
 800c0a4:	20000184 	.word	0x20000184

0800c0a8 <interfaceShowActual>:

void interfaceShowActual(void) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
	LEDstr(&display, 0, menu.current.value, LED_TRANSITION_DISABLED);
 800c0ac:	4a08      	ldr	r2, [pc, #32]	; (800c0d0 <interfaceShowActual+0x28>)
 800c0ae:	4809      	ldr	r0, [pc, #36]	; (800c0d4 <interfaceShowActual+0x2c>)
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	f7fc ffee 	bl	8009094 <LEDstr>
	LEDdot(&display, menu.current.value2);
 800c0b8:	4a07      	ldr	r2, [pc, #28]	; (800c0d8 <interfaceShowActual+0x30>)
 800c0ba:	2370      	movs	r3, #112	; 0x70
 800c0bc:	33ff      	adds	r3, #255	; 0xff
 800c0be:	5cd2      	ldrb	r2, [r2, r3]
 800c0c0:	4b04      	ldr	r3, [pc, #16]	; (800c0d4 <interfaceShowActual+0x2c>)
 800c0c2:	0011      	movs	r1, r2
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f7fd f833 	bl	8009130 <LEDdot>
}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200002ef 	.word	0x200002ef
 800c0d4:	20000374 	.word	0x20000374
 800c0d8:	20000184 	.word	0x20000184

0800c0dc <_interfaceIntToArray>:

void _interfaceIntToArray(char *destination, uint8_t offset, int16_t integer) {
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	0008      	movs	r0, r1
 800c0e6:	0011      	movs	r1, r2
 800c0e8:	1cfb      	adds	r3, r7, #3
 800c0ea:	1c02      	adds	r2, r0, #0
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	003b      	movs	r3, r7
 800c0f0:	1c0a      	adds	r2, r1, #0
 800c0f2:	801a      	strh	r2, [r3, #0]

	if (integer < 10 && integer >= 0) {
 800c0f4:	003b      	movs	r3, r7
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	5e9b      	ldrsh	r3, [r3, r2]
 800c0fa:	2b09      	cmp	r3, #9
 800c0fc:	dc17      	bgt.n	800c12e <_interfaceIntToArray+0x52>
 800c0fe:	003b      	movs	r3, r7
 800c100:	2200      	movs	r2, #0
 800c102:	5e9b      	ldrsh	r3, [r3, r2]
 800c104:	2b00      	cmp	r3, #0
 800c106:	db12      	blt.n	800c12e <_interfaceIntToArray+0x52>
		sprintf(destination + offset + 1, "%d", integer);
 800c108:	1cfb      	adds	r3, r7, #3
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	3301      	adds	r3, #1
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	18d0      	adds	r0, r2, r3
 800c112:	003b      	movs	r3, r7
 800c114:	2200      	movs	r2, #0
 800c116:	5e9a      	ldrsh	r2, [r3, r2]
 800c118:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <_interfaceIntToArray+0x74>)
 800c11a:	0019      	movs	r1, r3
 800c11c:	f002 fe0e 	bl	800ed3c <siprintf>
		*(destination + offset) = '0';
 800c120:	1cfb      	adds	r3, r7, #3
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	18d3      	adds	r3, r2, r3
 800c128:	2230      	movs	r2, #48	; 0x30
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	e00b      	b.n	800c146 <_interfaceIntToArray+0x6a>
	} else {
		sprintf(destination + offset, "%d", integer);
 800c12e:	1cfb      	adds	r3, r7, #3
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	18d0      	adds	r0, r2, r3
 800c136:	003b      	movs	r3, r7
 800c138:	2200      	movs	r2, #0
 800c13a:	5e9a      	ldrsh	r2, [r3, r2]
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <_interfaceIntToArray+0x74>)
 800c13e:	0019      	movs	r1, r3
 800c140:	f002 fdfc 	bl	800ed3c <siprintf>
	}
}
 800c144:	46c0      	nop			; (mov r8, r8)
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	46bd      	mov	sp, r7
 800c14a:	b002      	add	sp, #8
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	0800f990 	.word	0x0800f990

0800c154 <_interfaceClear>:

void _interfaceClear(char *buffer) {
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
	memset(buffer, ' ', 4);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2204      	movs	r2, #4
 800c160:	2120      	movs	r1, #32
 800c162:	0018      	movs	r0, r3
 800c164:	f002 fde1 	bl	800ed2a <memset>
}
 800c168:	46c0      	nop			; (mov r8, r8)
 800c16a:	46bd      	mov	sp, r7
 800c16c:	b002      	add	sp, #8
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <encoderAction>:
 *      Manages sync/async interrupts from internal timaers, encoder, button and switch
 */

#include "interrupts.h"

void encoderAction(uint8_t direction) {
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	0002      	movs	r2, r0
 800c178:	1dfb      	adds	r3, r7, #7
 800c17a:	701a      	strb	r2, [r3, #0]

	if (direction == ENCODER_ACTION_ENTER) {
 800c17c:	1dfb      	adds	r3, r7, #7
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d000      	beq.n	800c186 <encoderAction+0x16>
 800c184:	e06d      	b.n	800c262 <encoderAction+0xf2>

		if (menu.current.entry == CHRONO_START
 800c186:	4ac0      	ldr	r2, [pc, #768]	; (800c488 <encoderAction+0x318>)
 800c188:	2372      	movs	r3, #114	; 0x72
 800c18a:	33ff      	adds	r3, #255	; 0xff
 800c18c:	5cd3      	ldrb	r3, [r2, r3]
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d123      	bne.n	800c1da <encoderAction+0x6a>
				&& menu.current.level == CHRONO_START_LEVEL) {
 800c192:	4abd      	ldr	r2, [pc, #756]	; (800c488 <encoderAction+0x318>)
 800c194:	23b9      	movs	r3, #185	; 0xb9
 800c196:	005b      	lsls	r3, r3, #1
 800c198:	5cd3      	ldrb	r3, [r2, r3]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d11d      	bne.n	800c1da <encoderAction+0x6a>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c19e:	4bbb      	ldr	r3, [pc, #748]	; (800c48c <encoderAction+0x31c>)
 800c1a0:	2224      	movs	r2, #36	; 0x24
 800c1a2:	5c9b      	ldrb	r3, [r3, r2]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d104      	bne.n	800c1b2 <encoderAction+0x42>
				rtcStartChrono(&chronograph);
 800c1a8:	4bb8      	ldr	r3, [pc, #736]	; (800c48c <encoderAction+0x31c>)
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	f002 f84a 	bl	800e244 <rtcStartChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c1b0:	e056      	b.n	800c260 <encoderAction+0xf0>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800c1b2:	4bb6      	ldr	r3, [pc, #728]	; (800c48c <encoderAction+0x31c>)
 800c1b4:	2224      	movs	r2, #36	; 0x24
 800c1b6:	5c9b      	ldrb	r3, [r3, r2]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d104      	bne.n	800c1c6 <encoderAction+0x56>
				rtcStopChrono(&chronograph);
 800c1bc:	4bb3      	ldr	r3, [pc, #716]	; (800c48c <encoderAction+0x31c>)
 800c1be:	0018      	movs	r0, r3
 800c1c0:	f002 f894 	bl	800e2ec <rtcStopChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c1c4:	e04c      	b.n	800c260 <encoderAction+0xf0>
			} else if (chronograph.chronoMode == RTC_CHRONO_MODE_STOP) {
 800c1c6:	4bb1      	ldr	r3, [pc, #708]	; (800c48c <encoderAction+0x31c>)
 800c1c8:	2224      	movs	r2, #36	; 0x24
 800c1ca:	5c9b      	ldrb	r3, [r3, r2]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d147      	bne.n	800c260 <encoderAction+0xf0>
				rtcResumeChrono(&chronograph);
 800c1d0:	4bae      	ldr	r3, [pc, #696]	; (800c48c <encoderAction+0x31c>)
 800c1d2:	0018      	movs	r0, r3
 800c1d4:	f002 f93c 	bl	800e450 <rtcResumeChrono>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c1d8:	e042      	b.n	800c260 <encoderAction+0xf0>
			}

		} else if (menu.current.entry == CHRONO_RESET
 800c1da:	4aab      	ldr	r2, [pc, #684]	; (800c488 <encoderAction+0x318>)
 800c1dc:	2372      	movs	r3, #114	; 0x72
 800c1de:	33ff      	adds	r3, #255	; 0xff
 800c1e0:	5cd3      	ldrb	r3, [r2, r3]
 800c1e2:	2b05      	cmp	r3, #5
 800c1e4:	d10a      	bne.n	800c1fc <encoderAction+0x8c>
				&& menu.current.level == CHRONO_RESET_LEVEL) {
 800c1e6:	4aa8      	ldr	r2, [pc, #672]	; (800c488 <encoderAction+0x318>)
 800c1e8:	23b9      	movs	r3, #185	; 0xb9
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	5cd3      	ldrb	r3, [r2, r3]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d104      	bne.n	800c1fc <encoderAction+0x8c>
			rtcResetChrono(&chronograph);
 800c1f2:	4ba6      	ldr	r3, [pc, #664]	; (800c48c <encoderAction+0x31c>)
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	f002 f937 	bl	800e468 <rtcResetChrono>
 800c1fa:	e032      	b.n	800c262 <encoderAction+0xf2>

		}else if(menu.current.entry == SETTINGS_SAVE && menu.current.level == SETTINGS_SAVE_LEVEL){
 800c1fc:	4aa2      	ldr	r2, [pc, #648]	; (800c488 <encoderAction+0x318>)
 800c1fe:	2372      	movs	r3, #114	; 0x72
 800c200:	33ff      	adds	r3, #255	; 0xff
 800c202:	5cd3      	ldrb	r3, [r2, r3]
 800c204:	2b0a      	cmp	r3, #10
 800c206:	d10a      	bne.n	800c21e <encoderAction+0xae>
 800c208:	4a9f      	ldr	r2, [pc, #636]	; (800c488 <encoderAction+0x318>)
 800c20a:	23b9      	movs	r3, #185	; 0xb9
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	5cd3      	ldrb	r3, [r2, r3]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d104      	bne.n	800c21e <encoderAction+0xae>

			backupWrite(&chronograph);
 800c214:	4b9d      	ldr	r3, [pc, #628]	; (800c48c <encoderAction+0x31c>)
 800c216:	0018      	movs	r0, r3
 800c218:	f7fd f8d4 	bl	80093c4 <backupWrite>
 800c21c:	e021      	b.n	800c262 <encoderAction+0xf2>

		} else {

			if (menuSwitch(&menu, MENU_ENTER)) {
 800c21e:	4b9a      	ldr	r3, [pc, #616]	; (800c488 <encoderAction+0x318>)
 800c220:	2100      	movs	r1, #0
 800c222:	0018      	movs	r0, r3
 800c224:	f001 fa34 	bl	800d690 <menuSwitch>
 800c228:	1e03      	subs	r3, r0, #0
 800c22a:	d00f      	beq.n	800c24c <encoderAction+0xdc>
				LEDstr(&display, 0, menu.current.value,
 800c22c:	4a98      	ldr	r2, [pc, #608]	; (800c490 <encoderAction+0x320>)
 800c22e:	4899      	ldr	r0, [pc, #612]	; (800c494 <encoderAction+0x324>)
 800c230:	2301      	movs	r3, #1
 800c232:	2100      	movs	r1, #0
 800c234:	f7fc ff2e 	bl	8009094 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 800c238:	4a93      	ldr	r2, [pc, #588]	; (800c488 <encoderAction+0x318>)
 800c23a:	2370      	movs	r3, #112	; 0x70
 800c23c:	33ff      	adds	r3, #255	; 0xff
 800c23e:	5cd2      	ldrb	r2, [r2, r3]
 800c240:	4b94      	ldr	r3, [pc, #592]	; (800c494 <encoderAction+0x324>)
 800c242:	0011      	movs	r1, r2
 800c244:	0018      	movs	r0, r3
 800c246:	f7fc ff73 	bl	8009130 <LEDdot>
 800c24a:	e00a      	b.n	800c262 <encoderAction+0xf2>
			} else { //if theres no child under item
				if (menu.current.value3) { //check thats editable
 800c24c:	4a8e      	ldr	r2, [pc, #568]	; (800c488 <encoderAction+0x318>)
 800c24e:	23b8      	movs	r3, #184	; 0xb8
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	5cd3      	ldrb	r3, [r2, r3]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d004      	beq.n	800c262 <encoderAction+0xf2>
					flags[FLAG_LOCKED] = 1;
 800c258:	4b8f      	ldr	r3, [pc, #572]	; (800c498 <encoderAction+0x328>)
 800c25a:	2201      	movs	r2, #1
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	e000      	b.n	800c262 <encoderAction+0xf2>
			if (chronograph.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800c260:	46c0      	nop			; (mov r8, r8)
			}
		}

	}

	if (direction == ENCODER_ACTION_EXIT) {
 800c262:	1dfb      	adds	r3, r7, #7
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b03      	cmp	r3, #3
 800c268:	d11d      	bne.n	800c2a6 <encoderAction+0x136>

		if (!flags[FLAG_LOCKED]) {
 800c26a:	4b8b      	ldr	r3, [pc, #556]	; (800c498 <encoderAction+0x328>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d116      	bne.n	800c2a0 <encoderAction+0x130>
			if (menuSwitch(&menu, MENU_EXIT)) {
 800c272:	4b85      	ldr	r3, [pc, #532]	; (800c488 <encoderAction+0x318>)
 800c274:	2101      	movs	r1, #1
 800c276:	0018      	movs	r0, r3
 800c278:	f001 fa0a 	bl	800d690 <menuSwitch>
 800c27c:	1e03      	subs	r3, r0, #0
 800c27e:	d012      	beq.n	800c2a6 <encoderAction+0x136>
				LEDstr(&display, 0, menu.current.value,
 800c280:	4a83      	ldr	r2, [pc, #524]	; (800c490 <encoderAction+0x320>)
 800c282:	4884      	ldr	r0, [pc, #528]	; (800c494 <encoderAction+0x324>)
 800c284:	2302      	movs	r3, #2
 800c286:	2100      	movs	r1, #0
 800c288:	f7fc ff04 	bl	8009094 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 800c28c:	4a7e      	ldr	r2, [pc, #504]	; (800c488 <encoderAction+0x318>)
 800c28e:	2370      	movs	r3, #112	; 0x70
 800c290:	33ff      	adds	r3, #255	; 0xff
 800c292:	5cd2      	ldrb	r2, [r2, r3]
 800c294:	4b7f      	ldr	r3, [pc, #508]	; (800c494 <encoderAction+0x324>)
 800c296:	0011      	movs	r1, r2
 800c298:	0018      	movs	r0, r3
 800c29a:	f7fc ff49 	bl	8009130 <LEDdot>
 800c29e:	e002      	b.n	800c2a6 <encoderAction+0x136>
			}
		} else {
			flags[FLAG_LOCKED] = 0;
 800c2a0:	4b7d      	ldr	r3, [pc, #500]	; (800c498 <encoderAction+0x328>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	701a      	strb	r2, [r3, #0]
		}

	}

	if (direction == ENCODER_ACTION_LEFT) {
 800c2a6:	1dfb      	adds	r3, r7, #7
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d000      	beq.n	800c2b0 <encoderAction+0x140>
 800c2ae:	e06b      	b.n	800c388 <encoderAction+0x218>

		if (!flags[FLAG_LOCKED]) {
 800c2b0:	4b79      	ldr	r3, [pc, #484]	; (800c498 <encoderAction+0x328>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d116      	bne.n	800c2e6 <encoderAction+0x176>
			if (menuSwitch(&menu, MENU_UP)) {
 800c2b8:	4b73      	ldr	r3, [pc, #460]	; (800c488 <encoderAction+0x318>)
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f001 f9e7 	bl	800d690 <menuSwitch>
 800c2c2:	1e03      	subs	r3, r0, #0
 800c2c4:	d065      	beq.n	800c392 <encoderAction+0x222>
				LEDstr(&display, 0, menu.current.value,
 800c2c6:	4a72      	ldr	r2, [pc, #456]	; (800c490 <encoderAction+0x320>)
 800c2c8:	4872      	ldr	r0, [pc, #456]	; (800c494 <encoderAction+0x324>)
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	f7fc fee1 	bl	8009094 <LEDstr>
				LED_TRANSITION_DIR_RIGHT);
				LEDdot(&display, menu.current.value2);
 800c2d2:	4a6d      	ldr	r2, [pc, #436]	; (800c488 <encoderAction+0x318>)
 800c2d4:	2370      	movs	r3, #112	; 0x70
 800c2d6:	33ff      	adds	r3, #255	; 0xff
 800c2d8:	5cd2      	ldrb	r2, [r2, r3]
 800c2da:	4b6e      	ldr	r3, [pc, #440]	; (800c494 <encoderAction+0x324>)
 800c2dc:	0011      	movs	r1, r2
 800c2de:	0018      	movs	r0, r3
 800c2e0:	f7fc ff26 	bl	8009130 <LEDdot>
 800c2e4:	e055      	b.n	800c392 <encoderAction+0x222>
			}
		} else {

			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 800c2e6:	4a68      	ldr	r2, [pc, #416]	; (800c488 <encoderAction+0x318>)
 800c2e8:	23b9      	movs	r3, #185	; 0xb9
 800c2ea:	005b      	lsls	r3, r3, #1
 800c2ec:	5cd3      	ldrb	r3, [r2, r3]
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d14a      	bne.n	800c388 <encoderAction+0x218>

				switch (menu.current.entry) {
 800c2f2:	4a65      	ldr	r2, [pc, #404]	; (800c488 <encoderAction+0x318>)
 800c2f4:	2372      	movs	r3, #114	; 0x72
 800c2f6:	33ff      	adds	r3, #255	; 0xff
 800c2f8:	5cd3      	ldrb	r3, [r2, r3]
 800c2fa:	2b07      	cmp	r3, #7
 800c2fc:	d849      	bhi.n	800c392 <encoderAction+0x222>
 800c2fe:	009a      	lsls	r2, r3, #2
 800c300:	4b66      	ldr	r3, [pc, #408]	; (800c49c <encoderAction+0x32c>)
 800c302:	18d3      	adds	r3, r2, r3
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	469f      	mov	pc, r3
				case SETTINGS_CLOCK_HOUR:
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 800c308:	4b60      	ldr	r3, [pc, #384]	; (800c48c <encoderAction+0x31c>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	2100      	movs	r1, #0
 800c30e:	0018      	movs	r0, r3
 800c310:	f002 f8ce 	bl	800e4b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c314:	e03d      	b.n	800c392 <encoderAction+0x222>
				case SETTINGS_CLOCK_MINUTE:
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 800c316:	4b5d      	ldr	r3, [pc, #372]	; (800c48c <encoderAction+0x31c>)
 800c318:	2201      	movs	r2, #1
 800c31a:	2101      	movs	r1, #1
 800c31c:	0018      	movs	r0, r3
 800c31e:	f002 f8c7 	bl	800e4b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c322:	e036      	b.n	800c392 <encoderAction+0x222>
				case SETTINGS_CLOCK_SECONDS:
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 800c324:	4b59      	ldr	r3, [pc, #356]	; (800c48c <encoderAction+0x31c>)
 800c326:	2201      	movs	r2, #1
 800c328:	2102      	movs	r1, #2
 800c32a:	0018      	movs	r0, r3
 800c32c:	f002 f8c0 	bl	800e4b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c330:	e02f      	b.n	800c392 <encoderAction+0x222>
				case SETTINGS_CALENDAR_DAY:
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 800c332:	4b56      	ldr	r3, [pc, #344]	; (800c48c <encoderAction+0x31c>)
 800c334:	2201      	movs	r2, #1
 800c336:	2103      	movs	r1, #3
 800c338:	0018      	movs	r0, r3
 800c33a:	f002 f8b9 	bl	800e4b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c33e:	e028      	b.n	800c392 <encoderAction+0x222>
				case SETTINGS_CALENDAR_MONTH:
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 800c340:	4b52      	ldr	r3, [pc, #328]	; (800c48c <encoderAction+0x31c>)
 800c342:	2201      	movs	r2, #1
 800c344:	2104      	movs	r1, #4
 800c346:	0018      	movs	r0, r3
 800c348:	f002 f8b2 	bl	800e4b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c34c:	e021      	b.n	800c392 <encoderAction+0x222>
				case SETTINGS_CALENDAR_YEAR:
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 800c34e:	4b4f      	ldr	r3, [pc, #316]	; (800c48c <encoderAction+0x31c>)
 800c350:	2201      	movs	r2, #1
 800c352:	2105      	movs	r1, #5
 800c354:	0018      	movs	r0, r3
 800c356:	f002 f8ab 	bl	800e4b0 <rtcChangeValue>
					RTC_CHANGE_DIR_DOWN);
					break;
 800c35a:	e01a      	b.n	800c392 <encoderAction+0x222>
				case SETTINGS_CORRECTION_VALUE:
					if (temperatureCorrection > TEMPERATURE_CORRECTION_MIN)
 800c35c:	4b50      	ldr	r3, [pc, #320]	; (800c4a0 <encoderAction+0x330>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3327      	adds	r3, #39	; 0x27
 800c362:	db13      	blt.n	800c38c <encoderAction+0x21c>
						temperatureCorrection--;
 800c364:	4b4e      	ldr	r3, [pc, #312]	; (800c4a0 <encoderAction+0x330>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	1e5a      	subs	r2, r3, #1
 800c36a:	4b4d      	ldr	r3, [pc, #308]	; (800c4a0 <encoderAction+0x330>)
 800c36c:	601a      	str	r2, [r3, #0]
					break;
 800c36e:	e00d      	b.n	800c38c <encoderAction+0x21c>
				case SETTINGS_REFERENCE_VALUE:
					if (bme280.pressureReference > PRESSURE_REFERENCE_MIN)
 800c370:	4b4c      	ldr	r3, [pc, #304]	; (800c4a4 <encoderAction+0x334>)
 800c372:	695a      	ldr	r2, [r3, #20]
 800c374:	2396      	movs	r3, #150	; 0x96
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	429a      	cmp	r2, r3
 800c37a:	d909      	bls.n	800c390 <encoderAction+0x220>
						bme280.pressureReference--;
 800c37c:	4b49      	ldr	r3, [pc, #292]	; (800c4a4 <encoderAction+0x334>)
 800c37e:	695b      	ldr	r3, [r3, #20]
 800c380:	1e5a      	subs	r2, r3, #1
 800c382:	4b48      	ldr	r3, [pc, #288]	; (800c4a4 <encoderAction+0x334>)
 800c384:	615a      	str	r2, [r3, #20]
					break;
 800c386:	e003      	b.n	800c390 <encoderAction+0x220>
				}

			}
 800c388:	46c0      	nop			; (mov r8, r8)
 800c38a:	e002      	b.n	800c392 <encoderAction+0x222>
					break;
 800c38c:	46c0      	nop			; (mov r8, r8)
 800c38e:	e000      	b.n	800c392 <encoderAction+0x222>
					break;
 800c390:	46c0      	nop			; (mov r8, r8)

		}

	}
	if (direction == ENCODER_ACTION_RIGHT) {
 800c392:	1dfb      	adds	r3, r7, #7
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d000      	beq.n	800c39c <encoderAction+0x22c>
 800c39a:	e06b      	b.n	800c474 <encoderAction+0x304>

		if (!flags[FLAG_LOCKED]) {
 800c39c:	4b3e      	ldr	r3, [pc, #248]	; (800c498 <encoderAction+0x328>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d116      	bne.n	800c3d2 <encoderAction+0x262>
			if (menuSwitch(&menu, MENU_DOWN)) {
 800c3a4:	4b38      	ldr	r3, [pc, #224]	; (800c488 <encoderAction+0x318>)
 800c3a6:	2103      	movs	r1, #3
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	f001 f971 	bl	800d690 <menuSwitch>
 800c3ae:	1e03      	subs	r3, r0, #0
 800c3b0:	d065      	beq.n	800c47e <encoderAction+0x30e>
				LEDstr(&display, 0, menu.current.value,
 800c3b2:	4a37      	ldr	r2, [pc, #220]	; (800c490 <encoderAction+0x320>)
 800c3b4:	4837      	ldr	r0, [pc, #220]	; (800c494 <encoderAction+0x324>)
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	f7fc fe6b 	bl	8009094 <LEDstr>
				LED_TRANSITION_DIR_LEFT);
				LEDdot(&display, menu.current.value2);
 800c3be:	4a32      	ldr	r2, [pc, #200]	; (800c488 <encoderAction+0x318>)
 800c3c0:	2370      	movs	r3, #112	; 0x70
 800c3c2:	33ff      	adds	r3, #255	; 0xff
 800c3c4:	5cd2      	ldrb	r2, [r2, r3]
 800c3c6:	4b33      	ldr	r3, [pc, #204]	; (800c494 <encoderAction+0x324>)
 800c3c8:	0011      	movs	r1, r2
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	f7fc feb0 	bl	8009130 <LEDdot>
			}

		}

	}
}
 800c3d0:	e055      	b.n	800c47e <encoderAction+0x30e>
			if (menu.current.level == SETTINGS_TIME_LEVEL) {
 800c3d2:	4a2d      	ldr	r2, [pc, #180]	; (800c488 <encoderAction+0x318>)
 800c3d4:	23b9      	movs	r3, #185	; 0xb9
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	5cd3      	ldrb	r3, [r2, r3]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d14a      	bne.n	800c474 <encoderAction+0x304>
				switch (menu.current.entry) {
 800c3de:	4a2a      	ldr	r2, [pc, #168]	; (800c488 <encoderAction+0x318>)
 800c3e0:	2372      	movs	r3, #114	; 0x72
 800c3e2:	33ff      	adds	r3, #255	; 0xff
 800c3e4:	5cd3      	ldrb	r3, [r2, r3]
 800c3e6:	2b07      	cmp	r3, #7
 800c3e8:	d849      	bhi.n	800c47e <encoderAction+0x30e>
 800c3ea:	009a      	lsls	r2, r3, #2
 800c3ec:	4b2e      	ldr	r3, [pc, #184]	; (800c4a8 <encoderAction+0x338>)
 800c3ee:	18d3      	adds	r3, r2, r3
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	469f      	mov	pc, r3
					rtcChangeValue(&chronograph, RTC_CHANGE_HOUR,
 800c3f4:	4b25      	ldr	r3, [pc, #148]	; (800c48c <encoderAction+0x31c>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	f002 f858 	bl	800e4b0 <rtcChangeValue>
					break;
 800c400:	e03d      	b.n	800c47e <encoderAction+0x30e>
					rtcChangeValue(&chronograph, RTC_CHANGE_MINUTE,
 800c402:	4b22      	ldr	r3, [pc, #136]	; (800c48c <encoderAction+0x31c>)
 800c404:	2200      	movs	r2, #0
 800c406:	2101      	movs	r1, #1
 800c408:	0018      	movs	r0, r3
 800c40a:	f002 f851 	bl	800e4b0 <rtcChangeValue>
					break;
 800c40e:	e036      	b.n	800c47e <encoderAction+0x30e>
					rtcChangeValue(&chronograph, RTC_CHANGE_SECOND,
 800c410:	4b1e      	ldr	r3, [pc, #120]	; (800c48c <encoderAction+0x31c>)
 800c412:	2200      	movs	r2, #0
 800c414:	2102      	movs	r1, #2
 800c416:	0018      	movs	r0, r3
 800c418:	f002 f84a 	bl	800e4b0 <rtcChangeValue>
					break;
 800c41c:	e02f      	b.n	800c47e <encoderAction+0x30e>
					rtcChangeValue(&chronograph, RTC_CHANGE_DAY,
 800c41e:	4b1b      	ldr	r3, [pc, #108]	; (800c48c <encoderAction+0x31c>)
 800c420:	2200      	movs	r2, #0
 800c422:	2103      	movs	r1, #3
 800c424:	0018      	movs	r0, r3
 800c426:	f002 f843 	bl	800e4b0 <rtcChangeValue>
					break;
 800c42a:	e028      	b.n	800c47e <encoderAction+0x30e>
					rtcChangeValue(&chronograph, RTC_CHANGE_MONTH,
 800c42c:	4b17      	ldr	r3, [pc, #92]	; (800c48c <encoderAction+0x31c>)
 800c42e:	2200      	movs	r2, #0
 800c430:	2104      	movs	r1, #4
 800c432:	0018      	movs	r0, r3
 800c434:	f002 f83c 	bl	800e4b0 <rtcChangeValue>
					break;
 800c438:	e021      	b.n	800c47e <encoderAction+0x30e>
					rtcChangeValue(&chronograph, RTC_CHANGE_YEAR,
 800c43a:	4b14      	ldr	r3, [pc, #80]	; (800c48c <encoderAction+0x31c>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	2105      	movs	r1, #5
 800c440:	0018      	movs	r0, r3
 800c442:	f002 f835 	bl	800e4b0 <rtcChangeValue>
					break;
 800c446:	e01a      	b.n	800c47e <encoderAction+0x30e>
					if (temperatureCorrection < TEMPERATURE_CORRECTION_MAX)
 800c448:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <encoderAction+0x330>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b1d      	cmp	r3, #29
 800c44e:	dc13      	bgt.n	800c478 <encoderAction+0x308>
						temperatureCorrection++;
 800c450:	4b13      	ldr	r3, [pc, #76]	; (800c4a0 <encoderAction+0x330>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	4b12      	ldr	r3, [pc, #72]	; (800c4a0 <encoderAction+0x330>)
 800c458:	601a      	str	r2, [r3, #0]
					break;
 800c45a:	e00d      	b.n	800c478 <encoderAction+0x308>
					if (bme280.pressureReference < PRESSURE_REFERENCE_MAX)
 800c45c:	4b11      	ldr	r3, [pc, #68]	; (800c4a4 <encoderAction+0x334>)
 800c45e:	695a      	ldr	r2, [r3, #20]
 800c460:	23af      	movs	r3, #175	; 0xaf
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	429a      	cmp	r2, r3
 800c466:	d209      	bcs.n	800c47c <encoderAction+0x30c>
						bme280.pressureReference++;
 800c468:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <encoderAction+0x334>)
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <encoderAction+0x334>)
 800c470:	615a      	str	r2, [r3, #20]
					break;
 800c472:	e003      	b.n	800c47c <encoderAction+0x30c>
			}
 800c474:	46c0      	nop			; (mov r8, r8)
 800c476:	e002      	b.n	800c47e <encoderAction+0x30e>
					break;
 800c478:	46c0      	nop			; (mov r8, r8)
 800c47a:	e000      	b.n	800c47e <encoderAction+0x30e>
					break;
 800c47c:	46c0      	nop			; (mov r8, r8)
}
 800c47e:	46c0      	nop			; (mov r8, r8)
 800c480:	46bd      	mov	sp, r7
 800c482:	b002      	add	sp, #8
 800c484:	bd80      	pop	{r7, pc}
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	20000184 	.word	0x20000184
 800c48c:	2000034c 	.word	0x2000034c
 800c490:	200002ef 	.word	0x200002ef
 800c494:	20000374 	.word	0x20000374
 800c498:	20000180 	.word	0x20000180
 800c49c:	0800fc88 	.word	0x0800fc88
 800c4a0:	2000017c 	.word	0x2000017c
 800c4a4:	20000498 	.word	0x20000498
 800c4a8:	0800fca8 	.word	0x0800fca8

0800c4ac <GPIO_EXTI_Rising_FallingCallback>:

void GPIO_EXTI_Rising_FallingCallback(uint16_t GPIO_Pin) {
 800c4ac:	b590      	push	{r4, r7, lr}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	0002      	movs	r2, r0
 800c4b4:	1dbb      	adds	r3, r7, #6
 800c4b6:	801a      	strh	r2, [r3, #0]




	if(GPIO_Pin == INPUT_Pin){
 800c4b8:	1dbb      	adds	r3, r7, #6
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d10f      	bne.n	800c4e0 <GPIO_EXTI_Rising_FallingCallback+0x34>

		//save clock if battery is pulled out
		rtcGetTime(&chronograph);
 800c4c0:	4b2f      	ldr	r3, [pc, #188]	; (800c580 <GPIO_EXTI_Rising_FallingCallback+0xd4>)
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	f001 fc36 	bl	800dd34 <rtcGetTime>
		backupWrite(&chronograph);
 800c4c8:	4b2d      	ldr	r3, [pc, #180]	; (800c580 <GPIO_EXTI_Rising_FallingCallback+0xd4>)
 800c4ca:	0018      	movs	r0, r3
 800c4cc:	f7fc ff7a 	bl	80093c4 <backupWrite>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800c4d0:	23a0      	movs	r3, #160	; 0xa0
 800c4d2:	05db      	lsls	r3, r3, #23
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	2120      	movs	r1, #32
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f7f8 fc8a 	bl	8004df2 <HAL_GPIO_WritePin>
 800c4de:	e00a      	b.n	800c4f6 <GPIO_EXTI_Rising_FallingCallback+0x4a>


	}else{
		TIM2->CNT = 0; // reset wakeup timer if interrupt occurs
 800c4e0:	2380      	movs	r3, #128	; 0x80
 800c4e2:	05db      	lsls	r3, r3, #23
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800c4e8:	23a0      	movs	r3, #160	; 0xa0
 800c4ea:	05db      	lsls	r3, r3, #23
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	2110      	movs	r1, #16
 800c4f0:	0018      	movs	r0, r3
 800c4f2:	f7f8 fc7e 	bl	8004df2 <HAL_GPIO_WritePin>
	}


	if (GPIO_Pin == ENC1_Pin) {
 800c4f6:	1dbb      	adds	r3, r7, #6
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	2b40      	cmp	r3, #64	; 0x40
 800c4fc:	d111      	bne.n	800c522 <GPIO_EXTI_Rising_FallingCallback+0x76>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c4fe:	4b21      	ldr	r3, [pc, #132]	; (800c584 <GPIO_EXTI_Rising_FallingCallback+0xd8>)
 800c500:	2140      	movs	r1, #64	; 0x40
 800c502:	0018      	movs	r0, r3
 800c504:	f7f8 fc58 	bl	8004db8 <HAL_GPIO_ReadPin>
 800c508:	0003      	movs	r3, r0
 800c50a:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800c50c:	4b1d      	ldr	r3, [pc, #116]	; (800c584 <GPIO_EXTI_Rising_FallingCallback+0xd8>)
 800c50e:	2180      	movs	r1, #128	; 0x80
 800c510:	0018      	movs	r0, r3
 800c512:	f7f8 fc51 	bl	8004db8 <HAL_GPIO_ReadPin>
 800c516:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c518:	429c      	cmp	r4, r3
 800c51a:	d002      	beq.n	800c522 <GPIO_EXTI_Rising_FallingCallback+0x76>
			encoderAction(ENCODER_ACTION_LEFT);
 800c51c:	2000      	movs	r0, #0
 800c51e:	f7ff fe27 	bl	800c170 <encoderAction>
		}

	}

	if (GPIO_Pin == ENC2_Pin) {
 800c522:	1dbb      	adds	r3, r7, #6
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	2b80      	cmp	r3, #128	; 0x80
 800c528:	d111      	bne.n	800c54e <GPIO_EXTI_Rising_FallingCallback+0xa2>
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c52a:	4b16      	ldr	r3, [pc, #88]	; (800c584 <GPIO_EXTI_Rising_FallingCallback+0xd8>)
 800c52c:	2140      	movs	r1, #64	; 0x40
 800c52e:	0018      	movs	r0, r3
 800c530:	f7f8 fc42 	bl	8004db8 <HAL_GPIO_ReadPin>
 800c534:	0003      	movs	r3, r0
 800c536:	001c      	movs	r4, r3
				!= HAL_GPIO_ReadPin(ENC2_GPIO_Port, ENC2_Pin)) {
 800c538:	4b12      	ldr	r3, [pc, #72]	; (800c584 <GPIO_EXTI_Rising_FallingCallback+0xd8>)
 800c53a:	2180      	movs	r1, #128	; 0x80
 800c53c:	0018      	movs	r0, r3
 800c53e:	f7f8 fc3b 	bl	8004db8 <HAL_GPIO_ReadPin>
 800c542:	0003      	movs	r3, r0
		if (HAL_GPIO_ReadPin(ENC1_GPIO_Port, ENC1_Pin)
 800c544:	429c      	cmp	r4, r3
 800c546:	d002      	beq.n	800c54e <GPIO_EXTI_Rising_FallingCallback+0xa2>
			encoderAction(ENCODER_ACTION_RIGHT);
 800c548:	2001      	movs	r0, #1
 800c54a:	f7ff fe11 	bl	800c170 <encoderAction>
		}
	}

	if (GPIO_Pin == BUTTON1_Pin) {
 800c54e:	1dbb      	adds	r3, r7, #6
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	2b20      	cmp	r3, #32
 800c554:	d102      	bne.n	800c55c <GPIO_EXTI_Rising_FallingCallback+0xb0>
		encoderAction(ENCODER_ACTION_ENTER);
 800c556:	2002      	movs	r0, #2
 800c558:	f7ff fe0a 	bl	800c170 <encoderAction>
	}

	if (GPIO_Pin == BUTTON2_Pin) {
 800c55c:	1dbb      	adds	r3, r7, #6
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	2b10      	cmp	r3, #16
 800c562:	d102      	bne.n	800c56a <GPIO_EXTI_Rising_FallingCallback+0xbe>
		encoderAction(ENCODER_ACTION_EXIT);
 800c564:	2003      	movs	r0, #3
 800c566:	f7ff fe03 	bl	800c170 <encoderAction>

	if (GPIO_Pin == MODE_Pin) {

	}

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800c56a:	23a0      	movs	r3, #160	; 0xa0
 800c56c:	05db      	lsls	r3, r3, #23
 800c56e:	2200      	movs	r2, #0
 800c570:	2110      	movs	r1, #16
 800c572:	0018      	movs	r0, r3
 800c574:	f7f8 fc3d 	bl	8004df2 <HAL_GPIO_WritePin>
}
 800c578:	46c0      	nop			; (mov r8, r8)
 800c57a:	46bd      	mov	sp, r7
 800c57c:	b003      	add	sp, #12
 800c57e:	bd90      	pop	{r4, r7, pc}
 800c580:	2000034c 	.word	0x2000034c
 800c584:	50000400 	.word	0x50000400

0800c588 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	0002      	movs	r2, r0
 800c590:	1dbb      	adds	r3, r7, #6
 800c592:	801a      	strh	r2, [r3, #0]
	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 800c594:	1dbb      	adds	r3, r7, #6
 800c596:	881b      	ldrh	r3, [r3, #0]
 800c598:	0018      	movs	r0, r3
 800c59a:	f7ff ff87 	bl	800c4ac <GPIO_EXTI_Rising_FallingCallback>
}
 800c59e:	46c0      	nop			; (mov r8, r8)
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	b002      	add	sp, #8
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	0002      	movs	r2, r0
 800c5ae:	1dbb      	adds	r3, r7, #6
 800c5b0:	801a      	strh	r2, [r3, #0]

	GPIO_EXTI_Rising_FallingCallback(GPIO_Pin);
 800c5b2:	1dbb      	adds	r3, r7, #6
 800c5b4:	881b      	ldrh	r3, [r3, #0]
 800c5b6:	0018      	movs	r0, r3
 800c5b8:	f7ff ff78 	bl	800c4ac <GPIO_EXTI_Rising_FallingCallback>

}
 800c5bc:	46c0      	nop			; (mov r8, r8)
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	b002      	add	sp, #8
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d103      	bne.n	800c5de <HAL_TIM_PeriodElapsedCallback+0x1a>
		LEDmultiplexing(&display);
 800c5d6:	4b1f      	ldr	r3, [pc, #124]	; (800c654 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800c5d8:	0018      	movs	r0, r3
 800c5da:	f7fb ff6b 	bl	80084b4 <LEDmultiplexing>
	}
	if (htim->Instance == TIM2) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	2380      	movs	r3, #128	; 0x80
 800c5e4:	05db      	lsls	r3, r3, #23
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d102      	bne.n	800c5f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		flags[FLAG_SLEEP] = 1;
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	; (800c658 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	705a      	strb	r2, [r3, #1]
	}
	if (htim->Instance == TIM3) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a19      	ldr	r2, [pc, #100]	; (800c65c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d126      	bne.n	800c648 <HAL_TIM_PeriodElapsedCallback+0x84>
		//								READ REF VOLTAGE
		adcSetChannel(&hadc1, ADC_CHANNEL_VREFINT);
 800c5fa:	4a19      	ldr	r2, [pc, #100]	; (800c660 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800c5fc:	4b19      	ldr	r3, [pc, #100]	; (800c664 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800c5fe:	0011      	movs	r1, r2
 800c600:	0018      	movs	r0, r3
 800c602:	f7fc fdb1 	bl	8009168 <adcSetChannel>
		uint32_t voltageRef = adcVoltage(adcRead(&hadc1));
 800c606:	4b17      	ldr	r3, [pc, #92]	; (800c664 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800c608:	0018      	movs	r0, r3
 800c60a:	f7fc fdd1 	bl	80091b0 <adcRead>
 800c60e:	0003      	movs	r3, r0
 800c610:	0018      	movs	r0, r3
 800c612:	f7fc fe1b 	bl	800924c <adcVoltage>
 800c616:	0003      	movs	r3, r0
 800c618:	60fb      	str	r3, [r7, #12]

		adcSetChannel(&hadc1, ADC_CHANNEL_TEMPSENSOR);
 800c61a:	4a13      	ldr	r2, [pc, #76]	; (800c668 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c61c:	4b11      	ldr	r3, [pc, #68]	; (800c664 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800c61e:	0011      	movs	r1, r2
 800c620:	0018      	movs	r0, r3
 800c622:	f7fc fda1 	bl	8009168 <adcSetChannel>
		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
 800c626:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800c628:	0018      	movs	r0, r3
 800c62a:	f7fc fdc1 	bl	80091b0 <adcRead>
 800c62e:	0002      	movs	r2, r0
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	0019      	movs	r1, r3
 800c634:	0010      	movs	r0, r2
 800c636:	f7fc fdd5 	bl	80091e4 <adcTemperature>
 800c63a:	0002      	movs	r2, r0
				+ temperatureCorrection;
 800c63c:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	18d3      	adds	r3, r2, r3
 800c642:	001a      	movs	r2, r3
		temperature = adcTemperature(adcRead(&hadc1), voltageRef)
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800c646:	601a      	str	r2, [r3, #0]
	}
}
 800c648:	46c0      	nop			; (mov r8, r8)
 800c64a:	46bd      	mov	sp, r7
 800c64c:	b004      	add	sp, #16
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	40012c00 	.word	0x40012c00
 800c654:	20000374 	.word	0x20000374
 800c658:	20000180 	.word	0x20000180
 800c65c:	40000400 	.word	0x40000400
 800c660:	b4002000 	.word	0xb4002000
 800c664:	20000434 	.word	0x20000434
 800c668:	b0001000 	.word	0xb0001000
 800c66c:	2000017c 	.word	0x2000017c
 800c670:	20000170 	.word	0x20000170

0800c674 <LL_CRC_SetPolynomialSize>:
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	2218      	movs	r2, #24
 800c684:	4393      	bics	r3, r2
 800c686:	001a      	movs	r2, r3
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	609a      	str	r2, [r3, #8]
}
 800c690:	46c0      	nop			; (mov r8, r8)
 800c692:	46bd      	mov	sp, r7
 800c694:	b002      	add	sp, #8
 800c696:	bd80      	pop	{r7, pc}

0800c698 <LL_CRC_SetInputDataReverseMode>:
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	2260      	movs	r2, #96	; 0x60
 800c6a8:	4393      	bics	r3, r2
 800c6aa:	001a      	movs	r2, r3
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	431a      	orrs	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	609a      	str	r2, [r3, #8]
}
 800c6b4:	46c0      	nop			; (mov r8, r8)
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	b002      	add	sp, #8
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <LL_CRC_SetOutputDataReverseMode>:
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	2280      	movs	r2, #128	; 0x80
 800c6cc:	4393      	bics	r3, r2
 800c6ce:	001a      	movs	r2, r3
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	609a      	str	r2, [r3, #8]
}
 800c6d8:	46c0      	nop			; (mov r8, r8)
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	b002      	add	sp, #8
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <LL_CRC_SetInitialData>:
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	611a      	str	r2, [r3, #16]
}
 800c6f0:	46c0      	nop			; (mov r8, r8)
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	b002      	add	sp, #8
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <LL_CRC_SetPolynomialCoef>:
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	615a      	str	r2, [r3, #20]
}
 800c708:	46c0      	nop			; (mov r8, r8)
 800c70a:	46bd      	mov	sp, r7
 800c70c:	b002      	add	sp, #8
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <LL_AHB1_GRP1_EnableClock>:
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c71a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	430a      	orrs	r2, r1
 800c722:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c724:	4b04      	ldr	r3, [pc, #16]	; (800c738 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	4013      	ands	r3, r2
 800c72c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c72e:	68fb      	ldr	r3, [r7, #12]
}
 800c730:	46c0      	nop			; (mov r8, r8)
 800c732:	46bd      	mov	sp, r7
 800c734:	b004      	add	sp, #16
 800c736:	bd80      	pop	{r7, pc}
 800c738:	40021000 	.word	0x40021000

0800c73c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b096      	sub	sp, #88	; 0x58
 800c740:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c742:	f7f6 ff29 	bl	8003598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c746:	f000 fa5f 	bl	800cc08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c74a:	f000 fd53 	bl	800d1f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800c74e:	f000 fbf9 	bl	800cf44 <MX_TIM1_Init>
  MX_TIM2_Init();
 800c752:	f000 fc53 	bl	800cffc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800c756:	f000 fcff 	bl	800d158 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800c75a:	f000 fb87 	bl	800ce6c <MX_RTC_Init>
  MX_ADC1_Init();
 800c75e:	f000 faa9 	bl	800ccb4 <MX_ADC1_Init>
  MX_TIM3_Init();
 800c762:	f000 fca1 	bl	800d0a8 <MX_TIM3_Init>
  MX_I2C1_Init();
 800c766:	f000 fb41 	bl	800cdec <MX_I2C1_Init>
  MX_CRC_Init();
 800c76a:	f000 fb15 	bl	800cd98 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 800c76e:	4bfb      	ldr	r3, [pc, #1004]	; (800cb5c <main+0x420>)
 800c770:	0018      	movs	r0, r3
 800c772:	f7fa fc41 	bl	8006ff8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800c776:	4bfa      	ldr	r3, [pc, #1000]	; (800cb60 <main+0x424>)
 800c778:	0018      	movs	r0, r3
 800c77a:	f7fa fc3d 	bl	8006ff8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800c77e:	4bf9      	ldr	r3, [pc, #996]	; (800cb64 <main+0x428>)
 800c780:	0018      	movs	r0, r3
 800c782:	f7fa fc39 	bl	8006ff8 <HAL_TIM_Base_Start_IT>

	adcInit(&hadc1);
 800c786:	4bf8      	ldr	r3, [pc, #992]	; (800cb68 <main+0x42c>)
 800c788:	0018      	movs	r0, r3
 800c78a:	f7fc fce1 	bl	8009150 <adcInit>
	temperatureCorrection = -5;
 800c78e:	4bf7      	ldr	r3, [pc, #988]	; (800cb6c <main+0x430>)
 800c790:	2205      	movs	r2, #5
 800c792:	4252      	negs	r2, r2
 800c794:	601a      	str	r2, [r3, #0]
	bme280.pressureReference = 1013;
 800c796:	4bf6      	ldr	r3, [pc, #984]	; (800cb70 <main+0x434>)
 800c798:	4af6      	ldr	r2, [pc, #984]	; (800cb74 <main+0x438>)
 800c79a:	615a      	str	r2, [r3, #20]

//												DISPLAY PIN ASSIGNMENT
	LEDinit(&display, DISP_0_GPIO_Port, DISP_0_Pin, DISP_1_GPIO_Port,
 800c79c:	4af6      	ldr	r2, [pc, #984]	; (800cb78 <main+0x43c>)
 800c79e:	23a0      	movs	r3, #160	; 0xa0
 800c7a0:	05d9      	lsls	r1, r3, #23
 800c7a2:	48f6      	ldr	r0, [pc, #984]	; (800cb7c <main+0x440>)
 800c7a4:	2380      	movs	r3, #128	; 0x80
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	9314      	str	r3, [sp, #80]	; 0x50
 800c7aa:	23a0      	movs	r3, #160	; 0xa0
 800c7ac:	05db      	lsls	r3, r3, #23
 800c7ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7b0:	2380      	movs	r3, #128	; 0x80
 800c7b2:	021b      	lsls	r3, r3, #8
 800c7b4:	9312      	str	r3, [sp, #72]	; 0x48
 800c7b6:	23a0      	movs	r3, #160	; 0xa0
 800c7b8:	05db      	lsls	r3, r3, #23
 800c7ba:	9311      	str	r3, [sp, #68]	; 0x44
 800c7bc:	2301      	movs	r3, #1
 800c7be:	9310      	str	r3, [sp, #64]	; 0x40
 800c7c0:	4bed      	ldr	r3, [pc, #948]	; (800cb78 <main+0x43c>)
 800c7c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7c4:	2340      	movs	r3, #64	; 0x40
 800c7c6:	930e      	str	r3, [sp, #56]	; 0x38
 800c7c8:	4bed      	ldr	r3, [pc, #948]	; (800cb80 <main+0x444>)
 800c7ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c7cc:	2380      	movs	r3, #128	; 0x80
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7d2:	23a0      	movs	r3, #160	; 0xa0
 800c7d4:	05db      	lsls	r3, r3, #23
 800c7d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7d8:	2380      	movs	r3, #128	; 0x80
 800c7da:	015b      	lsls	r3, r3, #5
 800c7dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c7de:	23a0      	movs	r3, #160	; 0xa0
 800c7e0:	05db      	lsls	r3, r3, #23
 800c7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e4:	2380      	movs	r3, #128	; 0x80
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	9308      	str	r3, [sp, #32]
 800c7ea:	23a0      	movs	r3, #160	; 0xa0
 800c7ec:	05db      	lsls	r3, r3, #23
 800c7ee:	9307      	str	r3, [sp, #28]
 800c7f0:	2380      	movs	r3, #128	; 0x80
 800c7f2:	9306      	str	r3, [sp, #24]
 800c7f4:	23a0      	movs	r3, #160	; 0xa0
 800c7f6:	05db      	lsls	r3, r3, #23
 800c7f8:	9305      	str	r3, [sp, #20]
 800c7fa:	2380      	movs	r3, #128	; 0x80
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	23a0      	movs	r3, #160	; 0xa0
 800c802:	05db      	lsls	r3, r3, #23
 800c804:	9303      	str	r3, [sp, #12]
 800c806:	2304      	movs	r3, #4
 800c808:	9302      	str	r3, [sp, #8]
 800c80a:	4bdb      	ldr	r3, [pc, #876]	; (800cb78 <main+0x43c>)
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	2302      	movs	r3, #2
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	0013      	movs	r3, r2
 800c814:	2240      	movs	r2, #64	; 0x40
 800c816:	f7fc fb7f 	bl	8008f18 <LEDinit>
	DISP_A_GPIO_Port, DISP_A_Pin, DISP_B_GPIO_Port, DISP_B_Pin,
	DISP_C_GPIO_Port, DISP_C_Pin, DISP_D_GPIO_Port, DISP_D_Pin,
	DISP_E_GPIO_Port, DISP_E_Pin, DISP_F_GPIO_Port, DISP_F_Pin,
	DISP_G_GPIO_Port, DISP_G_Pin, DISP_DP_GPIO_Port, DISP_DP_Pin);

	LEDseparator(&display, "    ");
 800c81a:	4ada      	ldr	r2, [pc, #872]	; (800cb84 <main+0x448>)
 800c81c:	4bd7      	ldr	r3, [pc, #860]	; (800cb7c <main+0x440>)
 800c81e:	0011      	movs	r1, r2
 800c820:	0018      	movs	r0, r3
 800c822:	f7fc fbf9 	bl	8009018 <LEDseparator>

	//												MENU ITEMS CONFIG
	//level 0
	menuItemInit(&menu, CLOCK, 0, MENU_NONE, 0, 1);
 800c826:	48d8      	ldr	r0, [pc, #864]	; (800cb88 <main+0x44c>)
 800c828:	2301      	movs	r3, #1
 800c82a:	9301      	str	r3, [sp, #4]
 800c82c:	2300      	movs	r3, #0
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	23ff      	movs	r3, #255	; 0xff
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	f000 feb5 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, CHRONO, 0, MENU_NONE, CHRONO_HUNDREDTHS,
 800c83a:	48d3      	ldr	r0, [pc, #844]	; (800cb88 <main+0x44c>)
 800c83c:	2305      	movs	r3, #5
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	2302      	movs	r3, #2
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	23ff      	movs	r3, #255	; 0xff
 800c846:	2200      	movs	r2, #0
 800c848:	2101      	movs	r1, #1
 800c84a:	f000 feab 	bl	800d5a4 <menuItemInit>
	CHRONO_RESET);
	menuItemInit(&menu, BAROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800c84e:	48ce      	ldr	r0, [pc, #824]	; (800cb88 <main+0x44c>)
 800c850:	23ff      	movs	r3, #255	; 0xff
 800c852:	9301      	str	r3, [sp, #4]
 800c854:	23ff      	movs	r3, #255	; 0xff
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	23ff      	movs	r3, #255	; 0xff
 800c85a:	2200      	movs	r2, #0
 800c85c:	2103      	movs	r1, #3
 800c85e:	f000 fea1 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, HIGROMETER, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800c862:	48c9      	ldr	r0, [pc, #804]	; (800cb88 <main+0x44c>)
 800c864:	23ff      	movs	r3, #255	; 0xff
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	23ff      	movs	r3, #255	; 0xff
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	23ff      	movs	r3, #255	; 0xff
 800c86e:	2200      	movs	r2, #0
 800c870:	2104      	movs	r1, #4
 800c872:	f000 fe97 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, TEMPERATURE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800c876:	48c4      	ldr	r0, [pc, #784]	; (800cb88 <main+0x44c>)
 800c878:	23ff      	movs	r3, #255	; 0xff
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	23ff      	movs	r3, #255	; 0xff
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	23ff      	movs	r3, #255	; 0xff
 800c882:	2200      	movs	r2, #0
 800c884:	2102      	movs	r1, #2
 800c886:	f000 fe8d 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, ALTITUDE, 0, MENU_NONE, MENU_NONE, MENU_NONE);
 800c88a:	48bf      	ldr	r0, [pc, #764]	; (800cb88 <main+0x44c>)
 800c88c:	23ff      	movs	r3, #255	; 0xff
 800c88e:	9301      	str	r3, [sp, #4]
 800c890:	23ff      	movs	r3, #255	; 0xff
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	23ff      	movs	r3, #255	; 0xff
 800c896:	2200      	movs	r2, #0
 800c898:	2105      	movs	r1, #5
 800c89a:	f000 fe83 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, SETTINGS, 0, MENU_NONE, SETTINGS_CLOCK,
 800c89e:	48ba      	ldr	r0, [pc, #744]	; (800cb88 <main+0x44c>)
 800c8a0:	230a      	movs	r3, #10
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	2306      	movs	r3, #6
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	23ff      	movs	r3, #255	; 0xff
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2106      	movs	r1, #6
 800c8ae:	f000 fe79 	bl	800d5a4 <menuItemInit>
	SETTINGS_SAVE);

	//level 1
	menuItemInit(&menu, CLOCK_DATE, 1, CLOCK, MENU_NONE, MENU_NONE);
 800c8b2:	48b5      	ldr	r0, [pc, #724]	; (800cb88 <main+0x44c>)
 800c8b4:	23ff      	movs	r3, #255	; 0xff
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	23ff      	movs	r3, #255	; 0xff
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	2201      	movs	r2, #1
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	f000 fe6f 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, CLOCK_SECONDHAND, 1, CLOCK, MENU_NONE, MENU_NONE);
 800c8c6:	48b0      	ldr	r0, [pc, #704]	; (800cb88 <main+0x44c>)
 800c8c8:	23ff      	movs	r3, #255	; 0xff
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	23ff      	movs	r3, #255	; 0xff
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	f000 fe65 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, CHRONO_HOURS, 1, CHRONO, MENU_NONE, MENU_NONE);
 800c8da:	48ab      	ldr	r0, [pc, #684]	; (800cb88 <main+0x44c>)
 800c8dc:	23ff      	movs	r3, #255	; 0xff
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	23ff      	movs	r3, #255	; 0xff
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	2103      	movs	r1, #3
 800c8ea:	f000 fe5b 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, CHRONO_HUNDREDTHS, 1, CHRONO, MENU_NONE, MENU_NONE);
 800c8ee:	48a6      	ldr	r0, [pc, #664]	; (800cb88 <main+0x44c>)
 800c8f0:	23ff      	movs	r3, #255	; 0xff
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	23ff      	movs	r3, #255	; 0xff
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	f000 fe51 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, CHRONO_START, 1, CHRONO, MENU_NONE, MENU_NONE);
 800c902:	48a1      	ldr	r0, [pc, #644]	; (800cb88 <main+0x44c>)
 800c904:	23ff      	movs	r3, #255	; 0xff
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	23ff      	movs	r3, #255	; 0xff
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	2301      	movs	r3, #1
 800c90e:	2201      	movs	r2, #1
 800c910:	2104      	movs	r1, #4
 800c912:	f000 fe47 	bl	800d5a4 <menuItemInit>
	menuItemInit(&menu, CHRONO_RESET, 1, CHRONO, MENU_NONE, MENU_NONE);
 800c916:	489c      	ldr	r0, [pc, #624]	; (800cb88 <main+0x44c>)
 800c918:	23ff      	movs	r3, #255	; 0xff
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	23ff      	movs	r3, #255	; 0xff
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	2301      	movs	r3, #1
 800c922:	2201      	movs	r2, #1
 800c924:	2105      	movs	r1, #5
 800c926:	f000 fe3d 	bl	800d5a4 <menuItemInit>

	menuItemInit(&menu, SETTINGS_CLOCK, 1, SETTINGS, SETTINGS_CLOCK_HOUR,
 800c92a:	4897      	ldr	r0, [pc, #604]	; (800cb88 <main+0x44c>)
 800c92c:	2302      	movs	r3, #2
 800c92e:	9301      	str	r3, [sp, #4]
 800c930:	2300      	movs	r3, #0
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	2306      	movs	r3, #6
 800c936:	2201      	movs	r2, #1
 800c938:	2106      	movs	r1, #6
 800c93a:	f000 fe33 	bl	800d5a4 <menuItemInit>
	SETTINGS_CLOCK_SECONDS);
	menuItemInit(&menu, SETTINGS_CALENDAR, 1, SETTINGS,
 800c93e:	4892      	ldr	r0, [pc, #584]	; (800cb88 <main+0x44c>)
 800c940:	2305      	movs	r3, #5
 800c942:	9301      	str	r3, [sp, #4]
 800c944:	2303      	movs	r3, #3
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	2306      	movs	r3, #6
 800c94a:	2201      	movs	r2, #1
 800c94c:	2107      	movs	r1, #7
 800c94e:	f000 fe29 	bl	800d5a4 <menuItemInit>
	SETTINGS_CALENDAR_DAY,
	SETTINGS_CALENDAR_YEAR);
	menuItemInit(&menu, SETTINGS_CORRECTION, 1, SETTINGS,
 800c952:	488d      	ldr	r0, [pc, #564]	; (800cb88 <main+0x44c>)
 800c954:	2306      	movs	r3, #6
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	2306      	movs	r3, #6
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	2306      	movs	r3, #6
 800c95e:	2201      	movs	r2, #1
 800c960:	2108      	movs	r1, #8
 800c962:	f000 fe1f 	bl	800d5a4 <menuItemInit>
	SETTINGS_CORRECTION_VALUE,
	SETTINGS_CORRECTION_VALUE);
	menuItemInit(&menu, SETTINGS_REFERENCE, 1, SETTINGS,
 800c966:	4888      	ldr	r0, [pc, #544]	; (800cb88 <main+0x44c>)
 800c968:	2307      	movs	r3, #7
 800c96a:	9301      	str	r3, [sp, #4]
 800c96c:	2307      	movs	r3, #7
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2306      	movs	r3, #6
 800c972:	2201      	movs	r2, #1
 800c974:	2109      	movs	r1, #9
 800c976:	f000 fe15 	bl	800d5a4 <menuItemInit>
	SETTINGS_REFERENCE_VALUE,
	SETTINGS_REFERENCE_VALUE);
	menuItemInit(&menu, SETTINGS_SAVE, 1, SETTINGS,
 800c97a:	4883      	ldr	r0, [pc, #524]	; (800cb88 <main+0x44c>)
 800c97c:	23ff      	movs	r3, #255	; 0xff
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	23ff      	movs	r3, #255	; 0xff
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	2306      	movs	r3, #6
 800c986:	2201      	movs	r2, #1
 800c988:	210a      	movs	r1, #10
 800c98a:	f000 fe0b 	bl	800d5a4 <menuItemInit>
	MENU_NONE,
	MENU_NONE);

	//level 2
	menuItemInit(&menu, SETTINGS_CLOCK_HOUR, 2, SETTINGS_CLOCK, MENU_NONE,
 800c98e:	487e      	ldr	r0, [pc, #504]	; (800cb88 <main+0x44c>)
 800c990:	23ff      	movs	r3, #255	; 0xff
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	23ff      	movs	r3, #255	; 0xff
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	2306      	movs	r3, #6
 800c99a:	2202      	movs	r2, #2
 800c99c:	2100      	movs	r1, #0
 800c99e:	f000 fe01 	bl	800d5a4 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_MINUTE, 2, SETTINGS_CLOCK, MENU_NONE,
 800c9a2:	4879      	ldr	r0, [pc, #484]	; (800cb88 <main+0x44c>)
 800c9a4:	23ff      	movs	r3, #255	; 0xff
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	23ff      	movs	r3, #255	; 0xff
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	2306      	movs	r3, #6
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	f000 fdf7 	bl	800d5a4 <menuItemInit>
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CLOCK_SECONDS, 2, SETTINGS_CLOCK,
 800c9b6:	4874      	ldr	r0, [pc, #464]	; (800cb88 <main+0x44c>)
 800c9b8:	23ff      	movs	r3, #255	; 0xff
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	23ff      	movs	r3, #255	; 0xff
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	2306      	movs	r3, #6
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	2102      	movs	r1, #2
 800c9c6:	f000 fded 	bl	800d5a4 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_DAY, 2, SETTINGS_CALENDAR,
 800c9ca:	486f      	ldr	r0, [pc, #444]	; (800cb88 <main+0x44c>)
 800c9cc:	23ff      	movs	r3, #255	; 0xff
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	23ff      	movs	r3, #255	; 0xff
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	2307      	movs	r3, #7
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	2103      	movs	r1, #3
 800c9da:	f000 fde3 	bl	800d5a4 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_MONTH, 2, SETTINGS_CALENDAR,
 800c9de:	486a      	ldr	r0, [pc, #424]	; (800cb88 <main+0x44c>)
 800c9e0:	23ff      	movs	r3, #255	; 0xff
 800c9e2:	9301      	str	r3, [sp, #4]
 800c9e4:	23ff      	movs	r3, #255	; 0xff
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	2307      	movs	r3, #7
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	2104      	movs	r1, #4
 800c9ee:	f000 fdd9 	bl	800d5a4 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_CALENDAR_YEAR, 2, SETTINGS_CALENDAR,
 800c9f2:	4865      	ldr	r0, [pc, #404]	; (800cb88 <main+0x44c>)
 800c9f4:	23ff      	movs	r3, #255	; 0xff
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	23ff      	movs	r3, #255	; 0xff
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	2307      	movs	r3, #7
 800c9fe:	2202      	movs	r2, #2
 800ca00:	2105      	movs	r1, #5
 800ca02:	f000 fdcf 	bl	800d5a4 <menuItemInit>
	MENU_NONE,
	MENU_NONE);
	menuItemInit(&menu, SETTINGS_CORRECTION_VALUE, 2, SETTINGS_CORRECTION,
 800ca06:	4860      	ldr	r0, [pc, #384]	; (800cb88 <main+0x44c>)
 800ca08:	23ff      	movs	r3, #255	; 0xff
 800ca0a:	9301      	str	r3, [sp, #4]
 800ca0c:	23ff      	movs	r3, #255	; 0xff
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	2308      	movs	r3, #8
 800ca12:	2202      	movs	r2, #2
 800ca14:	2106      	movs	r1, #6
 800ca16:	f000 fdc5 	bl	800d5a4 <menuItemInit>
	MENU_NONE, MENU_NONE);
	menuItemInit(&menu, SETTINGS_REFERENCE_VALUE, 2, SETTINGS_REFERENCE,
 800ca1a:	485b      	ldr	r0, [pc, #364]	; (800cb88 <main+0x44c>)
 800ca1c:	23ff      	movs	r3, #255	; 0xff
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	23ff      	movs	r3, #255	; 0xff
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	2309      	movs	r3, #9
 800ca26:	2202      	movs	r2, #2
 800ca28:	2107      	movs	r1, #7
 800ca2a:	f000 fdbb 	bl	800d5a4 <menuItemInit>
	MENU_NONE, MENU_NONE);

	//												MENU ITEMS CONSTANT VALUES
	//level 0
	menuItemChangeValue(&menu, SETTINGS, 0, "SEt", INTER_DISABLED,
 800ca2e:	4b57      	ldr	r3, [pc, #348]	; (800cb8c <main+0x450>)
 800ca30:	4855      	ldr	r0, [pc, #340]	; (800cb88 <main+0x44c>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	9201      	str	r2, [sp, #4]
 800ca36:	2204      	movs	r2, #4
 800ca38:	9200      	str	r2, [sp, #0]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2106      	movs	r1, #6
 800ca3e:	f000 fce1 	bl	800d404 <menuItemChangeValue>
	NOT_EDITABLE);

	//level 1
	menuItemChangeValue(&menu, CHRONO_START, 1, "St  ", INTER_DISABLED,
 800ca42:	4b53      	ldr	r3, [pc, #332]	; (800cb90 <main+0x454>)
 800ca44:	4850      	ldr	r0, [pc, #320]	; (800cb88 <main+0x44c>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	9201      	str	r2, [sp, #4]
 800ca4a:	2204      	movs	r2, #4
 800ca4c:	9200      	str	r2, [sp, #0]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	2104      	movs	r1, #4
 800ca52:	f000 fcd7 	bl	800d404 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, CHRONO_RESET, 1, "----", INTER_COLON,
 800ca56:	4b4f      	ldr	r3, [pc, #316]	; (800cb94 <main+0x458>)
 800ca58:	484b      	ldr	r0, [pc, #300]	; (800cb88 <main+0x44c>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	9201      	str	r2, [sp, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	9200      	str	r2, [sp, #0]
 800ca62:	2201      	movs	r2, #1
 800ca64:	2105      	movs	r1, #5
 800ca66:	f000 fccd 	bl	800d404 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CLOCK, 1, "SC  ", INTER_DISABLED,
 800ca6a:	4b4b      	ldr	r3, [pc, #300]	; (800cb98 <main+0x45c>)
 800ca6c:	4846      	ldr	r0, [pc, #280]	; (800cb88 <main+0x44c>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	9201      	str	r2, [sp, #4]
 800ca72:	2204      	movs	r2, #4
 800ca74:	9200      	str	r2, [sp, #0]
 800ca76:	2201      	movs	r2, #1
 800ca78:	2106      	movs	r1, #6
 800ca7a:	f000 fcc3 	bl	800d404 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CALENDAR, 1, "SCAL", INTER_DISABLED,
 800ca7e:	4b47      	ldr	r3, [pc, #284]	; (800cb9c <main+0x460>)
 800ca80:	4841      	ldr	r0, [pc, #260]	; (800cb88 <main+0x44c>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	9201      	str	r2, [sp, #4]
 800ca86:	2204      	movs	r2, #4
 800ca88:	9200      	str	r2, [sp, #0]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	2107      	movs	r1, #7
 800ca8e:	f000 fcb9 	bl	800d404 <menuItemChangeValue>
	NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_CORRECTION, 1, "tC  ",
 800ca92:	4b43      	ldr	r3, [pc, #268]	; (800cba0 <main+0x464>)
 800ca94:	483c      	ldr	r0, [pc, #240]	; (800cb88 <main+0x44c>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	9201      	str	r2, [sp, #4]
 800ca9a:	2204      	movs	r2, #4
 800ca9c:	9200      	str	r2, [sp, #0]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	2108      	movs	r1, #8
 800caa2:	f000 fcaf 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_REFERENCE, 1, "P0  ",
 800caa6:	4b3f      	ldr	r3, [pc, #252]	; (800cba4 <main+0x468>)
 800caa8:	4837      	ldr	r0, [pc, #220]	; (800cb88 <main+0x44c>)
 800caaa:	2200      	movs	r2, #0
 800caac:	9201      	str	r2, [sp, #4]
 800caae:	2204      	movs	r2, #4
 800cab0:	9200      	str	r2, [sp, #0]
 800cab2:	2201      	movs	r2, #1
 800cab4:	2109      	movs	r1, #9
 800cab6:	f000 fca5 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);
	menuItemChangeValue(&menu, SETTINGS_SAVE, 1, "SA  ",
 800caba:	4b3b      	ldr	r3, [pc, #236]	; (800cba8 <main+0x46c>)
 800cabc:	4832      	ldr	r0, [pc, #200]	; (800cb88 <main+0x44c>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	9201      	str	r2, [sp, #4]
 800cac2:	2204      	movs	r2, #4
 800cac4:	9200      	str	r2, [sp, #0]
 800cac6:	2201      	movs	r2, #1
 800cac8:	210a      	movs	r1, #10
 800caca:	f000 fc9b 	bl	800d404 <menuItemChangeValue>
	INTER_DISABLED, NOT_EDITABLE);

	bme280Init(&bme280, &hi2c1);
 800cace:	4a37      	ldr	r2, [pc, #220]	; (800cbac <main+0x470>)
 800cad0:	4b27      	ldr	r3, [pc, #156]	; (800cb70 <main+0x434>)
 800cad2:	0011      	movs	r1, r2
 800cad4:	0018      	movs	r0, r3
 800cad6:	f7fc fce3 	bl	80094a0 <bme280Init>
	HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800cada:	23a0      	movs	r3, #160	; 0xa0
 800cadc:	05db      	lsls	r3, r3, #23
 800cade:	2201      	movs	r2, #1
 800cae0:	2102      	movs	r1, #2
 800cae2:	0018      	movs	r0, r3
 800cae4:	f7f8 f985 	bl	8004df2 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800cae8:	2014      	movs	r0, #20
 800caea:	f7f6 fddb 	bl	80036a4 <HAL_Delay>
	menuResetCurrent(&menu);
 800caee:	4b26      	ldr	r3, [pc, #152]	; (800cb88 <main+0x44c>)
 800caf0:	0018      	movs	r0, r3
 800caf2:	f000 fc5e 	bl	800d3b2 <menuResetCurrent>

	//										FLASH RESTORE SECTION

	backupInit();
 800caf6:	f7fc fbbf 	bl	8009278 <backupInit>
//	chronograph.actual.second = 1;
//	chronograph.actual.day = 1;
//	chronograph.actual.month = 1;
//	chronograph.actual.year = 1;

	backupRestore(&chronograph);
 800cafa:	4b2d      	ldr	r3, [pc, #180]	; (800cbb0 <main+0x474>)
 800cafc:	0018      	movs	r0, r3
 800cafe:	f7fc fbf3 	bl	80092e8 <backupRestore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//read RTC time
		rtcGetTime(&chronograph);
 800cb02:	4b2b      	ldr	r3, [pc, #172]	; (800cbb0 <main+0x474>)
 800cb04:	0018      	movs	r0, r3
 800cb06:	f001 f915 	bl	800dd34 <rtcGetTime>

		//read sensor
		bme280Read(&bme280);
 800cb0a:	4b19      	ldr	r3, [pc, #100]	; (800cb70 <main+0x434>)
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f7fc fe07 	bl	8009720 <bme280Read>

		//write actual values to menu matrix
		interfaceWrite();
 800cb12:	f7ff f843 	bl	800bb9c <interfaceWrite>

		//display current item
		if (display.transitionStatus == LED_TRANSITION_DISABLED) {
 800cb16:	4b19      	ldr	r3, [pc, #100]	; (800cb7c <main+0x440>)
 800cb18:	2267      	movs	r2, #103	; 0x67
 800cb1a:	5c9b      	ldrb	r3, [r3, r2]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <main+0x3e8>
			interfaceShowActual();
 800cb20:	f7ff fac2 	bl	800c0a8 <interfaceShowActual>
		}

		//												LOW POWER SECTION
		if (flags[FLAG_SLEEP]
 800cb24:	4b23      	ldr	r3, [pc, #140]	; (800cbb4 <main+0x478>)
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d0ea      	beq.n	800cb02 <main+0x3c6>
				&& HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) {
 800cb2c:	4b12      	ldr	r3, [pc, #72]	; (800cb78 <main+0x43c>)
 800cb2e:	2108      	movs	r1, #8
 800cb30:	0018      	movs	r0, r3
 800cb32:	f7f8 f941 	bl	8004db8 <HAL_GPIO_ReadPin>
 800cb36:	0003      	movs	r3, r0
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d1e2      	bne.n	800cb02 <main+0x3c6>
			HAL_TIM_Base_Stop_IT(&htim1);
 800cb3c:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <main+0x420>)
 800cb3e:	0018      	movs	r0, r3
 800cb40:	f7fa fab6 	bl	80070b0 <HAL_TIM_Base_Stop_IT>
			LEDclear(&display);
 800cb44:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <main+0x440>)
 800cb46:	0018      	movs	r0, r3
 800cb48:	f7fc fa8d 	bl	8009066 <LEDclear>
			flags[FLAG_SLEEP] = 0;
 800cb4c:	4b19      	ldr	r3, [pc, #100]	; (800cbb4 <main+0x478>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 0);
 800cb52:	23a0      	movs	r3, #160	; 0xa0
 800cb54:	05db      	lsls	r3, r3, #23
 800cb56:	2200      	movs	r2, #0
 800cb58:	2102      	movs	r1, #2
 800cb5a:	e02d      	b.n	800cbb8 <main+0x47c>
 800cb5c:	2000050c 	.word	0x2000050c
 800cb60:	20000558 	.word	0x20000558
 800cb64:	200003e8 	.word	0x200003e8
 800cb68:	20000434 	.word	0x20000434
 800cb6c:	2000017c 	.word	0x2000017c
 800cb70:	20000498 	.word	0x20000498
 800cb74:	000003f5 	.word	0x000003f5
 800cb78:	50000400 	.word	0x50000400
 800cb7c:	20000374 	.word	0x20000374
 800cb80:	50000800 	.word	0x50000800
 800cb84:	0800f994 	.word	0x0800f994
 800cb88:	20000184 	.word	0x20000184
 800cb8c:	0800f99c 	.word	0x0800f99c
 800cb90:	0800f9a0 	.word	0x0800f9a0
 800cb94:	0800f9a8 	.word	0x0800f9a8
 800cb98:	0800f9b0 	.word	0x0800f9b0
 800cb9c:	0800f9b8 	.word	0x0800f9b8
 800cba0:	0800f9c0 	.word	0x0800f9c0
 800cba4:	0800f9c8 	.word	0x0800f9c8
 800cba8:	0800f9d0 	.word	0x0800f9d0
 800cbac:	20000300 	.word	0x20000300
 800cbb0:	2000034c 	.word	0x2000034c
 800cbb4:	20000180 	.word	0x20000180
 800cbb8:	0018      	movs	r0, r3
 800cbba:	f7f8 f91a 	bl	8004df2 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800cbbe:	200a      	movs	r0, #10
 800cbc0:	f7f6 fd70 	bl	80036a4 <HAL_Delay>

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,
 800cbc4:	2380      	movs	r3, #128	; 0x80
 800cbc6:	01db      	lsls	r3, r3, #7
 800cbc8:	2101      	movs	r1, #1
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f7f8 ff48 	bl	8005a60 <HAL_PWR_EnterSTOPMode>
			PWR_STOPENTRY_WFI);

			//											AFTER WAKE UP
			HAL_GPIO_WritePin(ENCODER_ACTIVE_GPIO_Port, ENCODER_ACTIVE_Pin, 1);
 800cbd0:	23a0      	movs	r3, #160	; 0xa0
 800cbd2:	05db      	lsls	r3, r3, #23
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	2102      	movs	r1, #2
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f7f8 f90a 	bl	8004df2 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800cbde:	200a      	movs	r0, #10
 800cbe0:	f7f6 fd60 	bl	80036a4 <HAL_Delay>
			menuResetCurrent(&menu);
 800cbe4:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <main+0x4c0>)
 800cbe6:	0018      	movs	r0, r3
 800cbe8:	f000 fbe3 	bl	800d3b2 <menuResetCurrent>
			flags[FLAG_LOCKED] = 0;
 800cbec:	4b04      	ldr	r3, [pc, #16]	; (800cc00 <main+0x4c4>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 800cbf2:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <main+0x4c8>)
 800cbf4:	0018      	movs	r0, r3
 800cbf6:	f7fa f9ff 	bl	8006ff8 <HAL_TIM_Base_Start_IT>
		rtcGetTime(&chronograph);
 800cbfa:	e782      	b.n	800cb02 <main+0x3c6>
 800cbfc:	20000184 	.word	0x20000184
 800cc00:	20000180 	.word	0x20000180
 800cc04:	2000050c 	.word	0x2000050c

0800cc08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b093      	sub	sp, #76	; 0x4c
 800cc0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cc0e:	2410      	movs	r4, #16
 800cc10:	193b      	adds	r3, r7, r4
 800cc12:	0018      	movs	r0, r3
 800cc14:	2338      	movs	r3, #56	; 0x38
 800cc16:	001a      	movs	r2, r3
 800cc18:	2100      	movs	r1, #0
 800cc1a:	f002 f886 	bl	800ed2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cc1e:	003b      	movs	r3, r7
 800cc20:	0018      	movs	r0, r3
 800cc22:	2310      	movs	r3, #16
 800cc24:	001a      	movs	r2, r3
 800cc26:	2100      	movs	r1, #0
 800cc28:	f002 f87f 	bl	800ed2a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cc2c:	2380      	movs	r3, #128	; 0x80
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	0018      	movs	r0, r3
 800cc32:	f7f8 ff4d 	bl	8005ad0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800cc36:	f7f8 ff05 	bl	8005a44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800cc3a:	4b1d      	ldr	r3, [pc, #116]	; (800ccb0 <SystemClock_Config+0xa8>)
 800cc3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc3e:	4b1c      	ldr	r3, [pc, #112]	; (800ccb0 <SystemClock_Config+0xa8>)
 800cc40:	2118      	movs	r1, #24
 800cc42:	438a      	bics	r2, r1
 800cc44:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800cc46:	193b      	adds	r3, r7, r4
 800cc48:	2206      	movs	r2, #6
 800cc4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800cc4c:	193b      	adds	r3, r7, r4
 800cc4e:	2201      	movs	r2, #1
 800cc50:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cc52:	193b      	adds	r3, r7, r4
 800cc54:	2280      	movs	r2, #128	; 0x80
 800cc56:	0052      	lsls	r2, r2, #1
 800cc58:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800cc5a:	193b      	adds	r3, r7, r4
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cc60:	193b      	adds	r3, r7, r4
 800cc62:	2240      	movs	r2, #64	; 0x40
 800cc64:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800cc66:	193b      	adds	r3, r7, r4
 800cc68:	2200      	movs	r2, #0
 800cc6a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cc6c:	193b      	adds	r3, r7, r4
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f7f8 ff7a 	bl	8005b68 <HAL_RCC_OscConfig>
 800cc74:	1e03      	subs	r3, r0, #0
 800cc76:	d001      	beq.n	800cc7c <SystemClock_Config+0x74>
  {
    Error_Handler();
 800cc78:	f000 fb96 	bl	800d3a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cc7c:	003b      	movs	r3, r7
 800cc7e:	2207      	movs	r2, #7
 800cc80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800cc82:	003b      	movs	r3, r7
 800cc84:	2200      	movs	r2, #0
 800cc86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc88:	003b      	movs	r3, r7
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800cc8e:	003b      	movs	r3, r7
 800cc90:	2200      	movs	r2, #0
 800cc92:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800cc94:	003b      	movs	r3, r7
 800cc96:	2100      	movs	r1, #0
 800cc98:	0018      	movs	r0, r3
 800cc9a:	f7f9 fa85 	bl	80061a8 <HAL_RCC_ClockConfig>
 800cc9e:	1e03      	subs	r3, r0, #0
 800cca0:	d001      	beq.n	800cca6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800cca2:	f000 fb81 	bl	800d3a8 <Error_Handler>
  }
}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b013      	add	sp, #76	; 0x4c
 800ccac:	bd90      	pop	{r4, r7, pc}
 800ccae:	46c0      	nop			; (mov r8, r8)
 800ccb0:	40021000 	.word	0x40021000

0800ccb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ccba:	1d3b      	adds	r3, r7, #4
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	230c      	movs	r3, #12
 800ccc0:	001a      	movs	r2, r3
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	f002 f831 	bl	800ed2a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ccc8:	4b30      	ldr	r3, [pc, #192]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccca:	4a31      	ldr	r2, [pc, #196]	; (800cd90 <MX_ADC1_Init+0xdc>)
 800cccc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800ccce:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccd0:	2280      	movs	r2, #128	; 0x80
 800ccd2:	05d2      	lsls	r2, r2, #23
 800ccd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ccd6:	4b2d      	ldr	r3, [pc, #180]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ccdc:	4b2b      	ldr	r3, [pc, #172]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800cce2:	4b2a      	ldr	r3, [pc, #168]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cce8:	4b28      	ldr	r3, [pc, #160]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccea:	2204      	movs	r2, #4
 800ccec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800ccee:	4b27      	ldr	r3, [pc, #156]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800ccf4:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ccfa:	4b24      	ldr	r3, [pc, #144]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800cd00:	4b22      	ldr	r3, [pc, #136]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd02:	2201      	movs	r2, #1
 800cd04:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cd06:	4b21      	ldr	r3, [pc, #132]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cd0c:	4b1f      	ldr	r3, [pc, #124]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800cd12:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd14:	222c      	movs	r2, #44	; 0x2c
 800cd16:	2100      	movs	r1, #0
 800cd18:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800cd1a:	4b1c      	ldr	r3, [pc, #112]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd1c:	2280      	movs	r2, #128	; 0x80
 800cd1e:	0152      	lsls	r2, r2, #5
 800cd20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800cd22:	4b1a      	ldr	r3, [pc, #104]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd24:	2206      	movs	r2, #6
 800cd26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 800cd28:	4b18      	ldr	r3, [pc, #96]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd2a:	2206      	movs	r2, #6
 800cd2c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800cd2e:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd30:	223c      	movs	r2, #60	; 0x3c
 800cd32:	2101      	movs	r1, #1
 800cd34:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800cd36:	4b15      	ldr	r3, [pc, #84]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd38:	220c      	movs	r2, #12
 800cd3a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800cd3c:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd3e:	2280      	movs	r2, #128	; 0x80
 800cd40:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800cd42:	4b12      	ldr	r3, [pc, #72]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800cd48:	4b10      	ldr	r3, [pc, #64]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cd4e:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd50:	0018      	movs	r0, r3
 800cd52:	f7f6 fe21 	bl	8003998 <HAL_ADC_Init>
 800cd56:	1e03      	subs	r3, r0, #0
 800cd58:	d001      	beq.n	800cd5e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800cd5a:	f000 fb25 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800cd5e:	1d3b      	adds	r3, r7, #4
 800cd60:	4a0c      	ldr	r2, [pc, #48]	; (800cd94 <MX_ADC1_Init+0xe0>)
 800cd62:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800cd64:	1d3b      	adds	r3, r7, #4
 800cd66:	2200      	movs	r2, #0
 800cd68:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800cd6a:	1d3b      	adds	r3, r7, #4
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cd70:	1d3a      	adds	r2, r7, #4
 800cd72:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <MX_ADC1_Init+0xd8>)
 800cd74:	0011      	movs	r1, r2
 800cd76:	0018      	movs	r0, r3
 800cd78:	f7f7 f8da 	bl	8003f30 <HAL_ADC_ConfigChannel>
 800cd7c:	1e03      	subs	r3, r0, #0
 800cd7e:	d001      	beq.n	800cd84 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800cd80:	f000 fb12 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cd84:	46c0      	nop			; (mov r8, r8)
 800cd86:	46bd      	mov	sp, r7
 800cd88:	b004      	add	sp, #16
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20000434 	.word	0x20000434
 800cd90:	40012400 	.word	0x40012400
 800cd94:	b0001000 	.word	0xb0001000

0800cd98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800cd9c:	2380      	movs	r3, #128	; 0x80
 800cd9e:	015b      	lsls	r3, r3, #5
 800cda0:	0018      	movs	r0, r3
 800cda2:	f7ff fcb5 	bl	800c710 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 800cda6:	4b0f      	ldr	r3, [pc, #60]	; (800cde4 <MX_CRC_Init+0x4c>)
 800cda8:	2100      	movs	r1, #0
 800cdaa:	0018      	movs	r0, r3
 800cdac:	f7ff fc74 	bl	800c698 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 800cdb0:	4b0c      	ldr	r3, [pc, #48]	; (800cde4 <MX_CRC_Init+0x4c>)
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f7ff fc81 	bl	800c6bc <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 800cdba:	4a0b      	ldr	r2, [pc, #44]	; (800cde8 <MX_CRC_Init+0x50>)
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <MX_CRC_Init+0x4c>)
 800cdbe:	0011      	movs	r1, r2
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	f7ff fc99 	bl	800c6f8 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 800cdc6:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <MX_CRC_Init+0x4c>)
 800cdc8:	2100      	movs	r1, #0
 800cdca:	0018      	movs	r0, r3
 800cdcc:	f7ff fc52 	bl	800c674 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	425b      	negs	r3, r3
 800cdd4:	4a03      	ldr	r2, [pc, #12]	; (800cde4 <MX_CRC_Init+0x4c>)
 800cdd6:	0019      	movs	r1, r3
 800cdd8:	0010      	movs	r0, r2
 800cdda:	f7ff fc81 	bl	800c6e0 <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	40023000 	.word	0x40023000
 800cde8:	04c11db7 	.word	0x04c11db7

0800cdec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cdf0:	4b1b      	ldr	r3, [pc, #108]	; (800ce60 <MX_I2C1_Init+0x74>)
 800cdf2:	4a1c      	ldr	r2, [pc, #112]	; (800ce64 <MX_I2C1_Init+0x78>)
 800cdf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800cdf6:	4b1a      	ldr	r3, [pc, #104]	; (800ce60 <MX_I2C1_Init+0x74>)
 800cdf8:	4a1b      	ldr	r2, [pc, #108]	; (800ce68 <MX_I2C1_Init+0x7c>)
 800cdfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800cdfc:	4b18      	ldr	r3, [pc, #96]	; (800ce60 <MX_I2C1_Init+0x74>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ce02:	4b17      	ldr	r3, [pc, #92]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce04:	2201      	movs	r2, #1
 800ce06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ce0e:	4b14      	ldr	r3, [pc, #80]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ce14:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ce1a:	4b11      	ldr	r3, [pc, #68]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ce20:	4b0f      	ldr	r3, [pc, #60]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ce26:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce28:	0018      	movs	r0, r3
 800ce2a:	f7f8 f829 	bl	8004e80 <HAL_I2C_Init>
 800ce2e:	1e03      	subs	r3, r0, #0
 800ce30:	d001      	beq.n	800ce36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800ce32:	f000 fab9 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ce36:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce38:	2100      	movs	r1, #0
 800ce3a:	0018      	movs	r0, r3
 800ce3c:	f7f8 fd6a 	bl	8005914 <HAL_I2CEx_ConfigAnalogFilter>
 800ce40:	1e03      	subs	r3, r0, #0
 800ce42:	d001      	beq.n	800ce48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800ce44:	f000 fab0 	bl	800d3a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800ce48:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <MX_I2C1_Init+0x74>)
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	0018      	movs	r0, r3
 800ce4e:	f7f8 fdad 	bl	80059ac <HAL_I2CEx_ConfigDigitalFilter>
 800ce52:	1e03      	subs	r3, r0, #0
 800ce54:	d001      	beq.n	800ce5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800ce56:	f000 faa7 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ce5a:	46c0      	nop			; (mov r8, r8)
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000300 	.word	0x20000300
 800ce64:	40005400 	.word	0x40005400
 800ce68:	00303d5b 	.word	0x00303d5b

0800ce6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800ce72:	1d3b      	adds	r3, r7, #4
 800ce74:	0018      	movs	r0, r3
 800ce76:	2314      	movs	r3, #20
 800ce78:	001a      	movs	r2, r3
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	f001 ff55 	bl	800ed2a <memset>
  RTC_DateTypeDef sDate = {0};
 800ce80:	003b      	movs	r3, r7
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ce86:	4b2d      	ldr	r3, [pc, #180]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ce88:	4a2d      	ldr	r2, [pc, #180]	; (800cf40 <MX_RTC_Init+0xd4>)
 800ce8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ce8c:	4b2b      	ldr	r3, [pc, #172]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800ce92:	4b2a      	ldr	r3, [pc, #168]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ce94:	227f      	movs	r2, #127	; 0x7f
 800ce96:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800ce98:	4b28      	ldr	r3, [pc, #160]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ce9a:	22ff      	movs	r2, #255	; 0xff
 800ce9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ce9e:	4b27      	ldr	r3, [pc, #156]	; (800cf3c <MX_RTC_Init+0xd0>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800cea4:	4b25      	ldr	r3, [pc, #148]	; (800cf3c <MX_RTC_Init+0xd0>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ceaa:	4b24      	ldr	r3, [pc, #144]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ceac:	2200      	movs	r2, #0
 800ceae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ceb0:	4b22      	ldr	r3, [pc, #136]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ceb2:	2280      	movs	r2, #128	; 0x80
 800ceb4:	05d2      	lsls	r2, r2, #23
 800ceb6:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800ceb8:	4b20      	ldr	r3, [pc, #128]	; (800cf3c <MX_RTC_Init+0xd0>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800cebe:	4b1f      	ldr	r3, [pc, #124]	; (800cf3c <MX_RTC_Init+0xd0>)
 800cec0:	0018      	movs	r0, r3
 800cec2:	f7f9 fcd3 	bl	800686c <HAL_RTC_Init>
 800cec6:	1e03      	subs	r3, r0, #0
 800cec8:	d001      	beq.n	800cece <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800ceca:	f000 fa6d 	bl	800d3a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 800cece:	1d3b      	adds	r3, r7, #4
 800ced0:	2215      	movs	r2, #21
 800ced2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 40;
 800ced4:	1d3b      	adds	r3, r7, #4
 800ced6:	2228      	movs	r2, #40	; 0x28
 800ced8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800ceda:	1d3b      	adds	r3, r7, #4
 800cedc:	2200      	movs	r2, #0
 800cede:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800cee0:	1d3b      	adds	r3, r7, #4
 800cee2:	2200      	movs	r2, #0
 800cee4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cee6:	1d3b      	adds	r3, r7, #4
 800cee8:	2200      	movs	r2, #0
 800ceea:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800ceec:	1d3b      	adds	r3, r7, #4
 800ceee:	2200      	movs	r2, #0
 800cef0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800cef2:	1d39      	adds	r1, r7, #4
 800cef4:	4b11      	ldr	r3, [pc, #68]	; (800cf3c <MX_RTC_Init+0xd0>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	0018      	movs	r0, r3
 800cefa:	f7f9 fd4d 	bl	8006998 <HAL_RTC_SetTime>
 800cefe:	1e03      	subs	r3, r0, #0
 800cf00:	d001      	beq.n	800cf06 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800cf02:	f000 fa51 	bl	800d3a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800cf06:	003b      	movs	r3, r7
 800cf08:	2201      	movs	r2, #1
 800cf0a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 800cf0c:	003b      	movs	r3, r7
 800cf0e:	2204      	movs	r2, #4
 800cf10:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 800cf12:	003b      	movs	r3, r7
 800cf14:	2214      	movs	r2, #20
 800cf16:	709a      	strb	r2, [r3, #2]
  sDate.Year = 20;
 800cf18:	003b      	movs	r3, r7
 800cf1a:	2214      	movs	r2, #20
 800cf1c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800cf1e:	0039      	movs	r1, r7
 800cf20:	4b06      	ldr	r3, [pc, #24]	; (800cf3c <MX_RTC_Init+0xd0>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	0018      	movs	r0, r3
 800cf26:	f7f9 fe3b 	bl	8006ba0 <HAL_RTC_SetDate>
 800cf2a:	1e03      	subs	r3, r0, #0
 800cf2c:	d001      	beq.n	800cf32 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800cf2e:	f000 fa3b 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800cf32:	46c0      	nop			; (mov r8, r8)
 800cf34:	46bd      	mov	sp, r7
 800cf36:	b006      	add	sp, #24
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	46c0      	nop			; (mov r8, r8)
 800cf3c:	200004e0 	.word	0x200004e0
 800cf40:	40002800 	.word	0x40002800

0800cf44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b088      	sub	sp, #32
 800cf48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cf4a:	2310      	movs	r3, #16
 800cf4c:	18fb      	adds	r3, r7, r3
 800cf4e:	0018      	movs	r0, r3
 800cf50:	2310      	movs	r3, #16
 800cf52:	001a      	movs	r2, r3
 800cf54:	2100      	movs	r1, #0
 800cf56:	f001 fee8 	bl	800ed2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf5a:	1d3b      	adds	r3, r7, #4
 800cf5c:	0018      	movs	r0, r3
 800cf5e:	230c      	movs	r3, #12
 800cf60:	001a      	movs	r2, r3
 800cf62:	2100      	movs	r1, #0
 800cf64:	f001 fee1 	bl	800ed2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800cf68:	4b21      	ldr	r3, [pc, #132]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf6a:	4a22      	ldr	r2, [pc, #136]	; (800cff4 <MX_TIM1_Init+0xb0>)
 800cf6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 800cf6e:	4b20      	ldr	r3, [pc, #128]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf70:	221d      	movs	r2, #29
 800cf72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf74:	4b1e      	ldr	r3, [pc, #120]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf7c:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <MX_TIM1_Init+0xb4>)
 800cf7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cf80:	4b1b      	ldr	r3, [pc, #108]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800cf86:	4b1a      	ldr	r3, [pc, #104]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cf8c:	4b18      	ldr	r3, [pc, #96]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800cf92:	4b17      	ldr	r3, [pc, #92]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cf94:	0018      	movs	r0, r3
 800cf96:	f7f9 ffd6 	bl	8006f46 <HAL_TIM_Base_Init>
 800cf9a:	1e03      	subs	r3, r0, #0
 800cf9c:	d001      	beq.n	800cfa2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800cf9e:	f000 fa03 	bl	800d3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cfa2:	2110      	movs	r1, #16
 800cfa4:	187b      	adds	r3, r7, r1
 800cfa6:	2280      	movs	r2, #128	; 0x80
 800cfa8:	0152      	lsls	r2, r2, #5
 800cfaa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800cfac:	187a      	adds	r2, r7, r1
 800cfae:	4b10      	ldr	r3, [pc, #64]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cfb0:	0011      	movs	r1, r2
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f7fa f9dc 	bl	8007370 <HAL_TIM_ConfigClockSource>
 800cfb8:	1e03      	subs	r3, r0, #0
 800cfba:	d001      	beq.n	800cfc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800cfbc:	f000 f9f4 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cfc0:	1d3b      	adds	r3, r7, #4
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800cfc6:	1d3b      	adds	r3, r7, #4
 800cfc8:	2200      	movs	r2, #0
 800cfca:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cfcc:	1d3b      	adds	r3, r7, #4
 800cfce:	2200      	movs	r2, #0
 800cfd0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800cfd2:	1d3a      	adds	r2, r7, #4
 800cfd4:	4b06      	ldr	r3, [pc, #24]	; (800cff0 <MX_TIM1_Init+0xac>)
 800cfd6:	0011      	movs	r1, r2
 800cfd8:	0018      	movs	r0, r3
 800cfda:	f7fa fbd1 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 800cfde:	1e03      	subs	r3, r0, #0
 800cfe0:	d001      	beq.n	800cfe6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800cfe2:	f000 f9e1 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800cfe6:	46c0      	nop			; (mov r8, r8)
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	b008      	add	sp, #32
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	46c0      	nop			; (mov r8, r8)
 800cff0:	2000050c 	.word	0x2000050c
 800cff4:	40012c00 	.word	0x40012c00
 800cff8:	000007cf 	.word	0x000007cf

0800cffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d002:	2310      	movs	r3, #16
 800d004:	18fb      	adds	r3, r7, r3
 800d006:	0018      	movs	r0, r3
 800d008:	2310      	movs	r3, #16
 800d00a:	001a      	movs	r2, r3
 800d00c:	2100      	movs	r1, #0
 800d00e:	f001 fe8c 	bl	800ed2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d012:	1d3b      	adds	r3, r7, #4
 800d014:	0018      	movs	r0, r3
 800d016:	230c      	movs	r3, #12
 800d018:	001a      	movs	r2, r3
 800d01a:	2100      	movs	r1, #0
 800d01c:	f001 fe85 	bl	800ed2a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d020:	4b1e      	ldr	r3, [pc, #120]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d022:	2280      	movs	r2, #128	; 0x80
 800d024:	05d2      	lsls	r2, r2, #23
 800d026:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8879;
 800d028:	4b1c      	ldr	r3, [pc, #112]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d02a:	4a1d      	ldr	r2, [pc, #116]	; (800d0a0 <MX_TIM2_Init+0xa4>)
 800d02c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d02e:	4b1b      	ldr	r3, [pc, #108]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d030:	2200      	movs	r2, #0
 800d032:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 800d034:	4b19      	ldr	r3, [pc, #100]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d036:	4a1b      	ldr	r2, [pc, #108]	; (800d0a4 <MX_TIM2_Init+0xa8>)
 800d038:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d03a:	4b18      	ldr	r3, [pc, #96]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d040:	4b16      	ldr	r3, [pc, #88]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d042:	2200      	movs	r2, #0
 800d044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d046:	4b15      	ldr	r3, [pc, #84]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d048:	0018      	movs	r0, r3
 800d04a:	f7f9 ff7c 	bl	8006f46 <HAL_TIM_Base_Init>
 800d04e:	1e03      	subs	r3, r0, #0
 800d050:	d001      	beq.n	800d056 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d052:	f000 f9a9 	bl	800d3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d056:	2110      	movs	r1, #16
 800d058:	187b      	adds	r3, r7, r1
 800d05a:	2280      	movs	r2, #128	; 0x80
 800d05c:	0152      	lsls	r2, r2, #5
 800d05e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d060:	187a      	adds	r2, r7, r1
 800d062:	4b0e      	ldr	r3, [pc, #56]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d064:	0011      	movs	r1, r2
 800d066:	0018      	movs	r0, r3
 800d068:	f7fa f982 	bl	8007370 <HAL_TIM_ConfigClockSource>
 800d06c:	1e03      	subs	r3, r0, #0
 800d06e:	d001      	beq.n	800d074 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800d070:	f000 f99a 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d074:	1d3b      	adds	r3, r7, #4
 800d076:	2200      	movs	r2, #0
 800d078:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d07a:	1d3b      	adds	r3, r7, #4
 800d07c:	2200      	movs	r2, #0
 800d07e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d080:	1d3a      	adds	r2, r7, #4
 800d082:	4b06      	ldr	r3, [pc, #24]	; (800d09c <MX_TIM2_Init+0xa0>)
 800d084:	0011      	movs	r1, r2
 800d086:	0018      	movs	r0, r3
 800d088:	f7fa fb7a 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 800d08c:	1e03      	subs	r3, r0, #0
 800d08e:	d001      	beq.n	800d094 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800d090:	f000 f98a 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800d094:	46c0      	nop			; (mov r8, r8)
 800d096:	46bd      	mov	sp, r7
 800d098:	b008      	add	sp, #32
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20000558 	.word	0x20000558
 800d0a0:	000022af 	.word	0x000022af
 800d0a4:	00002327 	.word	0x00002327

0800d0a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d0ae:	2310      	movs	r3, #16
 800d0b0:	18fb      	adds	r3, r7, r3
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	2310      	movs	r3, #16
 800d0b6:	001a      	movs	r2, r3
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f001 fe36 	bl	800ed2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d0be:	1d3b      	adds	r3, r7, #4
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	230c      	movs	r3, #12
 800d0c4:	001a      	movs	r2, r3
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	f001 fe2f 	bl	800ed2a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d0cc:	4b1e      	ldr	r3, [pc, #120]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0ce:	4a1f      	ldr	r2, [pc, #124]	; (800d14c <MX_TIM3_Init+0xa4>)
 800d0d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800d0d2:	4b1d      	ldr	r3, [pc, #116]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0d4:	4a1e      	ldr	r2, [pc, #120]	; (800d150 <MX_TIM3_Init+0xa8>)
 800d0d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0d8:	4b1b      	ldr	r3, [pc, #108]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8999;
 800d0de:	4b1a      	ldr	r3, [pc, #104]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0e0:	4a1c      	ldr	r2, [pc, #112]	; (800d154 <MX_TIM3_Init+0xac>)
 800d0e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0ea:	4b17      	ldr	r3, [pc, #92]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d0f0:	4b15      	ldr	r3, [pc, #84]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d0f2:	0018      	movs	r0, r3
 800d0f4:	f7f9 ff27 	bl	8006f46 <HAL_TIM_Base_Init>
 800d0f8:	1e03      	subs	r3, r0, #0
 800d0fa:	d001      	beq.n	800d100 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d0fc:	f000 f954 	bl	800d3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d100:	2110      	movs	r1, #16
 800d102:	187b      	adds	r3, r7, r1
 800d104:	2280      	movs	r2, #128	; 0x80
 800d106:	0152      	lsls	r2, r2, #5
 800d108:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d10a:	187a      	adds	r2, r7, r1
 800d10c:	4b0e      	ldr	r3, [pc, #56]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d10e:	0011      	movs	r1, r2
 800d110:	0018      	movs	r0, r3
 800d112:	f7fa f92d 	bl	8007370 <HAL_TIM_ConfigClockSource>
 800d116:	1e03      	subs	r3, r0, #0
 800d118:	d001      	beq.n	800d11e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800d11a:	f000 f945 	bl	800d3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d11e:	1d3b      	adds	r3, r7, #4
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d124:	1d3b      	adds	r3, r7, #4
 800d126:	2200      	movs	r2, #0
 800d128:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d12a:	1d3a      	adds	r2, r7, #4
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <MX_TIM3_Init+0xa0>)
 800d12e:	0011      	movs	r1, r2
 800d130:	0018      	movs	r0, r3
 800d132:	f7fa fb25 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 800d136:	1e03      	subs	r3, r0, #0
 800d138:	d001      	beq.n	800d13e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800d13a:	f000 f935 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800d13e:	46c0      	nop			; (mov r8, r8)
 800d140:	46bd      	mov	sp, r7
 800d142:	b008      	add	sp, #32
 800d144:	bd80      	pop	{r7, pc}
 800d146:	46c0      	nop			; (mov r8, r8)
 800d148:	200003e8 	.word	0x200003e8
 800d14c:	40000400 	.word	0x40000400
 800d150:	000003e7 	.word	0x000003e7
 800d154:	00002327 	.word	0x00002327

0800d158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d15c:	4b23      	ldr	r3, [pc, #140]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d15e:	4a24      	ldr	r2, [pc, #144]	; (800d1f0 <MX_USART2_UART_Init+0x98>)
 800d160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800d162:	4b22      	ldr	r3, [pc, #136]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d164:	2296      	movs	r2, #150	; 0x96
 800d166:	0192      	lsls	r2, r2, #6
 800d168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d16a:	4b20      	ldr	r3, [pc, #128]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d170:	4b1e      	ldr	r3, [pc, #120]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d172:	2200      	movs	r2, #0
 800d174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d176:	4b1d      	ldr	r3, [pc, #116]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d178:	2200      	movs	r2, #0
 800d17a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d17c:	4b1b      	ldr	r3, [pc, #108]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d17e:	220c      	movs	r2, #12
 800d180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d182:	4b1a      	ldr	r3, [pc, #104]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d184:	2200      	movs	r2, #0
 800d186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d188:	4b18      	ldr	r3, [pc, #96]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d18e:	4b17      	ldr	r3, [pc, #92]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d190:	2200      	movs	r2, #0
 800d192:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800d194:	4b15      	ldr	r3, [pc, #84]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d196:	2200      	movs	r2, #0
 800d198:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d19a:	4b14      	ldr	r3, [pc, #80]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d1a0:	4b12      	ldr	r3, [pc, #72]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d1a2:	0018      	movs	r0, r3
 800d1a4:	f7fa fb72 	bl	800788c <HAL_UART_Init>
 800d1a8:	1e03      	subs	r3, r0, #0
 800d1aa:	d001      	beq.n	800d1b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800d1ac:	f000 f8fc 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d1b0:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	f7fb f89d 	bl	80082f4 <HAL_UARTEx_SetTxFifoThreshold>
 800d1ba:	1e03      	subs	r3, r0, #0
 800d1bc:	d001      	beq.n	800d1c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800d1be:	f000 f8f3 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	f7fb f8d4 	bl	8008374 <HAL_UARTEx_SetRxFifoThreshold>
 800d1cc:	1e03      	subs	r3, r0, #0
 800d1ce:	d001      	beq.n	800d1d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800d1d0:	f000 f8ea 	bl	800d3a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800d1d4:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <MX_USART2_UART_Init+0x94>)
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f7fb f852 	bl	8008280 <HAL_UARTEx_DisableFifoMode>
 800d1dc:	1e03      	subs	r3, r0, #0
 800d1de:	d001      	beq.n	800d1e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800d1e0:	f000 f8e2 	bl	800d3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d1e4:	46c0      	nop			; (mov r8, r8)
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	200005a4 	.word	0x200005a4
 800d1f0:	40004400 	.word	0x40004400

0800d1f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d1f4:	b590      	push	{r4, r7, lr}
 800d1f6:	b089      	sub	sp, #36	; 0x24
 800d1f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1fa:	240c      	movs	r4, #12
 800d1fc:	193b      	adds	r3, r7, r4
 800d1fe:	0018      	movs	r0, r3
 800d200:	2314      	movs	r3, #20
 800d202:	001a      	movs	r2, r3
 800d204:	2100      	movs	r1, #0
 800d206:	f001 fd90 	bl	800ed2a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d20a:	4b62      	ldr	r3, [pc, #392]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d20e:	4b61      	ldr	r3, [pc, #388]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d210:	2102      	movs	r1, #2
 800d212:	430a      	orrs	r2, r1
 800d214:	635a      	str	r2, [r3, #52]	; 0x34
 800d216:	4b5f      	ldr	r3, [pc, #380]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21a:	2202      	movs	r2, #2
 800d21c:	4013      	ands	r3, r2
 800d21e:	60bb      	str	r3, [r7, #8]
 800d220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d222:	4b5c      	ldr	r3, [pc, #368]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d226:	4b5b      	ldr	r3, [pc, #364]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d228:	2104      	movs	r1, #4
 800d22a:	430a      	orrs	r2, r1
 800d22c:	635a      	str	r2, [r3, #52]	; 0x34
 800d22e:	4b59      	ldr	r3, [pc, #356]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d232:	2204      	movs	r2, #4
 800d234:	4013      	ands	r3, r2
 800d236:	607b      	str	r3, [r7, #4]
 800d238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d23a:	4b56      	ldr	r3, [pc, #344]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d23e:	4b55      	ldr	r3, [pc, #340]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d240:	2101      	movs	r1, #1
 800d242:	430a      	orrs	r2, r1
 800d244:	635a      	str	r2, [r3, #52]	; 0x34
 800d246:	4b53      	ldr	r3, [pc, #332]	; (800d394 <MX_GPIO_Init+0x1a0>)
 800d248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24a:	2201      	movs	r2, #1
 800d24c:	4013      	ands	r3, r2
 800d24e:	603b      	str	r3, [r7, #0]
 800d250:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800d252:	23a0      	movs	r3, #160	; 0xa0
 800d254:	05db      	lsls	r3, r3, #23
 800d256:	2200      	movs	r2, #0
 800d258:	2132      	movs	r1, #50	; 0x32
 800d25a:	0018      	movs	r0, r3
 800d25c:	f7f7 fdc9 	bl	8004df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_0_Pin|DISP_A_Pin|DISP_B_Pin|DISP_3_Pin
 800d260:	494d      	ldr	r1, [pc, #308]	; (800d398 <MX_GPIO_Init+0x1a4>)
 800d262:	23a0      	movs	r3, #160	; 0xa0
 800d264:	05db      	lsls	r3, r3, #23
 800d266:	2201      	movs	r2, #1
 800d268:	0018      	movs	r0, r3
 800d26a:	f7f7 fdc2 	bl	8004df2 <HAL_GPIO_WritePin>
                          |DISP_D_Pin|DISP_DP_Pin|DISP_C_Pin|DISP_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_F_Pin|DISP_1_Pin|DISP_2_Pin, GPIO_PIN_SET);
 800d26e:	4b4b      	ldr	r3, [pc, #300]	; (800d39c <MX_GPIO_Init+0x1a8>)
 800d270:	2201      	movs	r2, #1
 800d272:	2107      	movs	r1, #7
 800d274:	0018      	movs	r0, r3
 800d276:	f7f7 fdbc 	bl	8004df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_E_GPIO_Port, DISP_E_Pin, GPIO_PIN_SET);
 800d27a:	4b49      	ldr	r3, [pc, #292]	; (800d3a0 <MX_GPIO_Init+0x1ac>)
 800d27c:	2201      	movs	r2, #1
 800d27e:	2140      	movs	r1, #64	; 0x40
 800d280:	0018      	movs	r0, r3
 800d282:	f7f7 fdb6 	bl	8004df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INPUT_Pin */
  GPIO_InitStruct.Pin = INPUT_Pin;
 800d286:	193b      	adds	r3, r7, r4
 800d288:	2201      	movs	r2, #1
 800d28a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d28c:	193b      	adds	r3, r7, r4
 800d28e:	2288      	movs	r2, #136	; 0x88
 800d290:	0352      	lsls	r2, r2, #13
 800d292:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d294:	193b      	adds	r3, r7, r4
 800d296:	2201      	movs	r2, #1
 800d298:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 800d29a:	193a      	adds	r2, r7, r4
 800d29c:	23a0      	movs	r3, #160	; 0xa0
 800d29e:	05db      	lsls	r3, r3, #23
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	f7f7 fc24 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_ACTIVE_Pin LED1_Pin LED2_Pin DISP_0_Pin
                           DISP_A_Pin DISP_B_Pin DISP_3_Pin DISP_D_Pin
                           DISP_DP_Pin DISP_C_Pin DISP_G_Pin */
  GPIO_InitStruct.Pin = ENCODER_ACTIVE_Pin|LED1_Pin|LED2_Pin|DISP_0_Pin
 800d2a8:	193b      	adds	r3, r7, r4
 800d2aa:	4a3e      	ldr	r2, [pc, #248]	; (800d3a4 <MX_GPIO_Init+0x1b0>)
 800d2ac:	601a      	str	r2, [r3, #0]
                          |DISP_A_Pin|DISP_B_Pin|DISP_3_Pin|DISP_D_Pin
                          |DISP_DP_Pin|DISP_C_Pin|DISP_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d2ae:	193b      	adds	r3, r7, r4
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b4:	193b      	adds	r3, r7, r4
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2ba:	193b      	adds	r3, r7, r4
 800d2bc:	2200      	movs	r2, #0
 800d2be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2c0:	193a      	adds	r2, r7, r4
 800d2c2:	23a0      	movs	r3, #160	; 0xa0
 800d2c4:	05db      	lsls	r3, r3, #23
 800d2c6:	0011      	movs	r1, r2
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f7f7 fc11 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_F_Pin DISP_1_Pin DISP_2_Pin */
  GPIO_InitStruct.Pin = DISP_F_Pin|DISP_1_Pin|DISP_2_Pin;
 800d2ce:	193b      	adds	r3, r7, r4
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d2d4:	193b      	adds	r3, r7, r4
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2da:	193b      	adds	r3, r7, r4
 800d2dc:	2200      	movs	r2, #0
 800d2de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2e0:	193b      	adds	r3, r7, r4
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2e6:	193b      	adds	r3, r7, r4
 800d2e8:	4a2c      	ldr	r2, [pc, #176]	; (800d39c <MX_GPIO_Init+0x1a8>)
 800d2ea:	0019      	movs	r1, r3
 800d2ec:	0010      	movs	r0, r2
 800d2ee:	f7f7 fbff 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_E_Pin */
  GPIO_InitStruct.Pin = DISP_E_Pin;
 800d2f2:	193b      	adds	r3, r7, r4
 800d2f4:	2240      	movs	r2, #64	; 0x40
 800d2f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d2f8:	193b      	adds	r3, r7, r4
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2fe:	193b      	adds	r3, r7, r4
 800d300:	2200      	movs	r2, #0
 800d302:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d304:	193b      	adds	r3, r7, r4
 800d306:	2200      	movs	r2, #0
 800d308:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_E_GPIO_Port, &GPIO_InitStruct);
 800d30a:	193b      	adds	r3, r7, r4
 800d30c:	4a24      	ldr	r2, [pc, #144]	; (800d3a0 <MX_GPIO_Init+0x1ac>)
 800d30e:	0019      	movs	r1, r3
 800d310:	0010      	movs	r0, r2
 800d312:	f7f7 fbed 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 800d316:	0021      	movs	r1, r4
 800d318:	187b      	adds	r3, r7, r1
 800d31a:	2238      	movs	r2, #56	; 0x38
 800d31c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d31e:	187b      	adds	r3, r7, r1
 800d320:	2284      	movs	r2, #132	; 0x84
 800d322:	0392      	lsls	r2, r2, #14
 800d324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d326:	187b      	adds	r3, r7, r1
 800d328:	2201      	movs	r2, #1
 800d32a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d32c:	000c      	movs	r4, r1
 800d32e:	187b      	adds	r3, r7, r1
 800d330:	4a1a      	ldr	r2, [pc, #104]	; (800d39c <MX_GPIO_Init+0x1a8>)
 800d332:	0019      	movs	r1, r3
 800d334:	0010      	movs	r0, r2
 800d336:	f7f7 fbdb 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_Pin ENC2_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin|ENC2_Pin;
 800d33a:	0021      	movs	r1, r4
 800d33c:	187b      	adds	r3, r7, r1
 800d33e:	22c0      	movs	r2, #192	; 0xc0
 800d340:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d342:	187b      	adds	r3, r7, r1
 800d344:	22c4      	movs	r2, #196	; 0xc4
 800d346:	0392      	lsls	r2, r2, #14
 800d348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d34a:	187b      	adds	r3, r7, r1
 800d34c:	2200      	movs	r2, #0
 800d34e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d350:	187b      	adds	r3, r7, r1
 800d352:	4a12      	ldr	r2, [pc, #72]	; (800d39c <MX_GPIO_Init+0x1a8>)
 800d354:	0019      	movs	r1, r3
 800d356:	0010      	movs	r0, r2
 800d358:	f7f7 fbca 	bl	8004af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800d35c:	2200      	movs	r2, #0
 800d35e:	2100      	movs	r1, #0
 800d360:	2005      	movs	r0, #5
 800d362:	f7f7 f9f3 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800d366:	2005      	movs	r0, #5
 800d368:	f7f7 fa05 	bl	8004776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800d36c:	2200      	movs	r2, #0
 800d36e:	2100      	movs	r1, #0
 800d370:	2006      	movs	r0, #6
 800d372:	f7f7 f9eb 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800d376:	2006      	movs	r0, #6
 800d378:	f7f7 f9fd 	bl	8004776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800d37c:	2200      	movs	r2, #0
 800d37e:	2100      	movs	r1, #0
 800d380:	2007      	movs	r0, #7
 800d382:	f7f7 f9e3 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800d386:	2007      	movs	r0, #7
 800d388:	f7f7 f9f5 	bl	8004776 <HAL_NVIC_EnableIRQ>

}
 800d38c:	46c0      	nop			; (mov r8, r8)
 800d38e:	46bd      	mov	sp, r7
 800d390:	b009      	add	sp, #36	; 0x24
 800d392:	bd90      	pop	{r4, r7, pc}
 800d394:	40021000 	.word	0x40021000
 800d398:	00009fc0 	.word	0x00009fc0
 800d39c:	50000400 	.word	0x50000400
 800d3a0:	50000800 	.word	0x50000800
 800d3a4:	00009ff2 	.word	0x00009ff2

0800d3a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d3ac:	b672      	cpsid	i
}
 800d3ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800d3b0:	e7fe      	b.n	800d3b0 <Error_Handler+0x8>

0800d3b2 <menuResetCurrent>:
 *
 * @param  Menu item handler
 *
 * @retval None
 */
void menuResetCurrent(MenuTypeDef *menu) {
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]

	menu->current = menu->items[0][0];
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	236c      	movs	r3, #108	; 0x6c
 800d3be:	33ff      	adds	r3, #255	; 0xff
 800d3c0:	6879      	ldr	r1, [r7, #4]
 800d3c2:	18d3      	adds	r3, r2, r3
 800d3c4:	220b      	movs	r2, #11
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	f001 fca6 	bl	800ed18 <memcpy>
	menu->current.childFirst = menu->items[0][0].childFirst;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7a59      	ldrb	r1, [r3, #9]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	23ba      	movs	r3, #186	; 0xba
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	54d1      	strb	r1, [r2, r3]
	menu->current.childLast = menu->items[0][0].childLast;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	7a99      	ldrb	r1, [r3, #10]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	2376      	movs	r3, #118	; 0x76
 800d3e0:	33ff      	adds	r3, #255	; 0xff
 800d3e2:	54d1      	strb	r1, [r2, r3]
	menu->current.entry = menu->items[0][0].entry;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7999      	ldrb	r1, [r3, #6]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	2372      	movs	r3, #114	; 0x72
 800d3ec:	33ff      	adds	r3, #255	; 0xff
 800d3ee:	54d1      	strb	r1, [r2, r3]
	menu->current.level = menu->items[0][0].level;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	79d9      	ldrb	r1, [r3, #7]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	23b9      	movs	r3, #185	; 0xb9
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	54d1      	strb	r1, [r2, r3]
//	menu->current.parent = menu->items[0][0].parent;
//	menu->current.value = menu->items[0][0].value;
//	menu->current.value2 = menu->items[0][0].value2;
//	menu->current.value3 = menu->items[0][0].value3;

}
 800d3fc:	46c0      	nop			; (mov r8, r8)
 800d3fe:	46bd      	mov	sp, r7
 800d400:	b002      	add	sp, #8
 800d402:	bd80      	pop	{r7, pc}

0800d404 <menuItemChangeValue>:
 * @param int value
 *
 * @retval None
 */
void menuItemChangeValue(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		char *value, uint8_t value2, uint8_t value3) {
 800d404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	0008      	movs	r0, r1
 800d40e:	0011      	movs	r1, r2
 800d410:	607b      	str	r3, [r7, #4]
 800d412:	230b      	movs	r3, #11
 800d414:	18fb      	adds	r3, r7, r3
 800d416:	1c02      	adds	r2, r0, #0
 800d418:	701a      	strb	r2, [r3, #0]
 800d41a:	230a      	movs	r3, #10
 800d41c:	18fb      	adds	r3, r7, r3
 800d41e:	1c0a      	adds	r2, r1, #0
 800d420:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800d422:	2317      	movs	r3, #23
 800d424:	18fb      	adds	r3, r7, r3
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	e01f      	b.n	800d46c <menuItemChangeValue+0x68>

		menu->items[entry][level].value[i] = value[i];
 800d42c:	2617      	movs	r6, #23
 800d42e:	19bb      	adds	r3, r7, r6
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	18d3      	adds	r3, r2, r3
 800d436:	220b      	movs	r2, #11
 800d438:	18ba      	adds	r2, r7, r2
 800d43a:	7811      	ldrb	r1, [r2, #0]
 800d43c:	220a      	movs	r2, #10
 800d43e:	18ba      	adds	r2, r7, r2
 800d440:	7812      	ldrb	r2, [r2, #0]
 800d442:	19b8      	adds	r0, r7, r6
 800d444:	7800      	ldrb	r0, [r0, #0]
 800d446:	781d      	ldrb	r5, [r3, #0]
 800d448:	68fc      	ldr	r4, [r7, #12]
 800d44a:	0013      	movs	r3, r2
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	189b      	adds	r3, r3, r2
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	189b      	adds	r3, r3, r2
 800d454:	000a      	movs	r2, r1
 800d456:	0152      	lsls	r2, r2, #5
 800d458:	1852      	adds	r2, r2, r1
 800d45a:	189b      	adds	r3, r3, r2
 800d45c:	18e3      	adds	r3, r4, r3
 800d45e:	1c2a      	adds	r2, r5, #0
 800d460:	541a      	strb	r2, [r3, r0]
	for (uint8_t i = 0; i <= MENU_ITEM_VALUE_SIZE; i++) {
 800d462:	19bb      	adds	r3, r7, r6
 800d464:	781a      	ldrb	r2, [r3, #0]
 800d466:	19bb      	adds	r3, r7, r6
 800d468:	3201      	adds	r2, #1
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	2317      	movs	r3, #23
 800d46e:	18fb      	adds	r3, r7, r3
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b04      	cmp	r3, #4
 800d474:	d9da      	bls.n	800d42c <menuItemChangeValue+0x28>
	}

	menu->items[entry][level].value2 = value2;
 800d476:	240b      	movs	r4, #11
 800d478:	193b      	adds	r3, r7, r4
 800d47a:	7819      	ldrb	r1, [r3, #0]
 800d47c:	250a      	movs	r5, #10
 800d47e:	197b      	adds	r3, r7, r5
 800d480:	781a      	ldrb	r2, [r3, #0]
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	0013      	movs	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	189b      	adds	r3, r3, r2
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	189b      	adds	r3, r3, r2
 800d48e:	000a      	movs	r2, r1
 800d490:	0152      	lsls	r2, r2, #5
 800d492:	1852      	adds	r2, r2, r1
 800d494:	189b      	adds	r3, r3, r2
 800d496:	18c3      	adds	r3, r0, r3
 800d498:	1d1a      	adds	r2, r3, #4
 800d49a:	2328      	movs	r3, #40	; 0x28
 800d49c:	2108      	movs	r1, #8
 800d49e:	468c      	mov	ip, r1
 800d4a0:	44bc      	add	ip, r7
 800d4a2:	4463      	add	r3, ip
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].value3 = value3;
 800d4a8:	193b      	adds	r3, r7, r4
 800d4aa:	7819      	ldrb	r1, [r3, #0]
 800d4ac:	197b      	adds	r3, r7, r5
 800d4ae:	781a      	ldrb	r2, [r3, #0]
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	0013      	movs	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	189b      	adds	r3, r3, r2
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	189b      	adds	r3, r3, r2
 800d4bc:	000a      	movs	r2, r1
 800d4be:	0152      	lsls	r2, r2, #5
 800d4c0:	1852      	adds	r2, r2, r1
 800d4c2:	189b      	adds	r3, r3, r2
 800d4c4:	18c3      	adds	r3, r0, r3
 800d4c6:	3305      	adds	r3, #5
 800d4c8:	222c      	movs	r2, #44	; 0x2c
 800d4ca:	2108      	movs	r1, #8
 800d4cc:	468c      	mov	ip, r1
 800d4ce:	44bc      	add	ip, r7
 800d4d0:	4462      	add	r2, ip
 800d4d2:	7812      	ldrb	r2, [r2, #0]
 800d4d4:	701a      	strb	r2, [r3, #0]

	//automatically refresh current item
	if (menu->current.entry == entry && menu->current.level == level) {
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	2372      	movs	r3, #114	; 0x72
 800d4da:	33ff      	adds	r3, #255	; 0xff
 800d4dc:	5cd3      	ldrb	r3, [r2, r3]
 800d4de:	193a      	adds	r2, r7, r4
 800d4e0:	7812      	ldrb	r2, [r2, #0]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d15a      	bne.n	800d59c <menuItemChangeValue+0x198>
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	23b9      	movs	r3, #185	; 0xb9
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	5cd3      	ldrb	r3, [r2, r3]
 800d4ee:	197a      	adds	r2, r7, r5
 800d4f0:	7812      	ldrb	r2, [r2, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d152      	bne.n	800d59c <menuItemChangeValue+0x198>
		memcpy(menu->current.value,
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	336c      	adds	r3, #108	; 0x6c
 800d4fa:	33ff      	adds	r3, #255	; 0xff
 800d4fc:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	2372      	movs	r3, #114	; 0x72
 800d502:	33ff      	adds	r3, #255	; 0xff
 800d504:	5cd3      	ldrb	r3, [r2, r3]
 800d506:	0019      	movs	r1, r3
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	23b9      	movs	r3, #185	; 0xb9
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	5cd3      	ldrb	r3, [r2, r3]
 800d510:	001a      	movs	r2, r3
 800d512:	0013      	movs	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	189b      	adds	r3, r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	189b      	adds	r3, r3, r2
 800d51c:	000a      	movs	r2, r1
 800d51e:	0152      	lsls	r2, r2, #5
 800d520:	1852      	adds	r2, r2, r1
 800d522:	189b      	adds	r3, r3, r2
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800d528:	2204      	movs	r2, #4
 800d52a:	0019      	movs	r1, r3
 800d52c:	f001 fbf4 	bl	800ed18 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	2372      	movs	r3, #114	; 0x72
 800d534:	33ff      	adds	r3, #255	; 0xff
 800d536:	5cd3      	ldrb	r3, [r2, r3]
 800d538:	0018      	movs	r0, r3
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	23b9      	movs	r3, #185	; 0xb9
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	5cd3      	ldrb	r3, [r2, r3]
 800d542:	001a      	movs	r2, r3
 800d544:	68f9      	ldr	r1, [r7, #12]
 800d546:	0013      	movs	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	189b      	adds	r3, r3, r2
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	189b      	adds	r3, r3, r2
 800d550:	0002      	movs	r2, r0
 800d552:	0152      	lsls	r2, r2, #5
 800d554:	1812      	adds	r2, r2, r0
 800d556:	189b      	adds	r3, r3, r2
 800d558:	18cb      	adds	r3, r1, r3
 800d55a:	3304      	adds	r3, #4
 800d55c:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	2370      	movs	r3, #112	; 0x70
 800d562:	33ff      	adds	r3, #255	; 0xff
 800d564:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	2372      	movs	r3, #114	; 0x72
 800d56a:	33ff      	adds	r3, #255	; 0xff
 800d56c:	5cd3      	ldrb	r3, [r2, r3]
 800d56e:	0018      	movs	r0, r3
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	23b9      	movs	r3, #185	; 0xb9
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	5cd3      	ldrb	r3, [r2, r3]
 800d578:	001a      	movs	r2, r3
 800d57a:	68f9      	ldr	r1, [r7, #12]
 800d57c:	0013      	movs	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	189b      	adds	r3, r3, r2
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	189b      	adds	r3, r3, r2
 800d586:	0002      	movs	r2, r0
 800d588:	0152      	lsls	r2, r2, #5
 800d58a:	1812      	adds	r2, r2, r0
 800d58c:	189b      	adds	r3, r3, r2
 800d58e:	18cb      	adds	r3, r1, r3
 800d590:	3305      	adds	r3, #5
 800d592:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	23b8      	movs	r3, #184	; 0xb8
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	54d1      	strb	r1, [r2, r3]
	}

}
 800d59c:	46c0      	nop			; (mov r8, r8)
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	b007      	add	sp, #28
 800d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5a4 <menuItemInit>:
 * @param item last child entry number, ENU_NONE if no child
 *
 * @retval None
 */
void menuItemInit(MenuTypeDef *menu, uint8_t entry, uint8_t level,
		uint8_t parent, uint8_t childFirst, uint8_t childLast) {
 800d5a4:	b590      	push	{r4, r7, lr}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	000c      	movs	r4, r1
 800d5ae:	0010      	movs	r0, r2
 800d5b0:	0019      	movs	r1, r3
 800d5b2:	1cfb      	adds	r3, r7, #3
 800d5b4:	1c22      	adds	r2, r4, #0
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	1cbb      	adds	r3, r7, #2
 800d5ba:	1c02      	adds	r2, r0, #0
 800d5bc:	701a      	strb	r2, [r3, #0]
 800d5be:	1c7b      	adds	r3, r7, #1
 800d5c0:	1c0a      	adds	r2, r1, #0
 800d5c2:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].entry = entry;
 800d5c4:	1cfb      	adds	r3, r7, #3
 800d5c6:	7819      	ldrb	r1, [r3, #0]
 800d5c8:	1cbb      	adds	r3, r7, #2
 800d5ca:	781a      	ldrb	r2, [r3, #0]
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	0013      	movs	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	189b      	adds	r3, r3, r2
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	189b      	adds	r3, r3, r2
 800d5d8:	000a      	movs	r2, r1
 800d5da:	0152      	lsls	r2, r2, #5
 800d5dc:	1852      	adds	r2, r2, r1
 800d5de:	189b      	adds	r3, r3, r2
 800d5e0:	18c3      	adds	r3, r0, r3
 800d5e2:	3306      	adds	r3, #6
 800d5e4:	1cfa      	adds	r2, r7, #3
 800d5e6:	7812      	ldrb	r2, [r2, #0]
 800d5e8:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].level = level;
 800d5ea:	1cfb      	adds	r3, r7, #3
 800d5ec:	7819      	ldrb	r1, [r3, #0]
 800d5ee:	1cbb      	adds	r3, r7, #2
 800d5f0:	781a      	ldrb	r2, [r3, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	0013      	movs	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	189b      	adds	r3, r3, r2
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	189b      	adds	r3, r3, r2
 800d5fe:	000a      	movs	r2, r1
 800d600:	0152      	lsls	r2, r2, #5
 800d602:	1852      	adds	r2, r2, r1
 800d604:	189b      	adds	r3, r3, r2
 800d606:	18c3      	adds	r3, r0, r3
 800d608:	3307      	adds	r3, #7
 800d60a:	1cba      	adds	r2, r7, #2
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].parent = parent;
 800d610:	1cfb      	adds	r3, r7, #3
 800d612:	7819      	ldrb	r1, [r3, #0]
 800d614:	1cbb      	adds	r3, r7, #2
 800d616:	781a      	ldrb	r2, [r3, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	0013      	movs	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	189b      	adds	r3, r3, r2
 800d620:	005b      	lsls	r3, r3, #1
 800d622:	189b      	adds	r3, r3, r2
 800d624:	000a      	movs	r2, r1
 800d626:	0152      	lsls	r2, r2, #5
 800d628:	1852      	adds	r2, r2, r1
 800d62a:	189b      	adds	r3, r3, r2
 800d62c:	18c3      	adds	r3, r0, r3
 800d62e:	3308      	adds	r3, #8
 800d630:	1c7a      	adds	r2, r7, #1
 800d632:	7812      	ldrb	r2, [r2, #0]
 800d634:	701a      	strb	r2, [r3, #0]
	menu->items[entry][level].childFirst = childFirst;
 800d636:	1cfb      	adds	r3, r7, #3
 800d638:	7819      	ldrb	r1, [r3, #0]
 800d63a:	1cbb      	adds	r3, r7, #2
 800d63c:	781a      	ldrb	r2, [r3, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	0013      	movs	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	189b      	adds	r3, r3, r2
 800d646:	005b      	lsls	r3, r3, #1
 800d648:	189b      	adds	r3, r3, r2
 800d64a:	000a      	movs	r2, r1
 800d64c:	0152      	lsls	r2, r2, #5
 800d64e:	1852      	adds	r2, r2, r1
 800d650:	189b      	adds	r3, r3, r2
 800d652:	18c3      	adds	r3, r0, r3
 800d654:	3309      	adds	r3, #9
 800d656:	001a      	movs	r2, r3
 800d658:	2318      	movs	r3, #24
 800d65a:	18fb      	adds	r3, r7, r3
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	7013      	strb	r3, [r2, #0]
	menu->items[entry][level].childLast = childLast;
 800d660:	1cfb      	adds	r3, r7, #3
 800d662:	7819      	ldrb	r1, [r3, #0]
 800d664:	1cbb      	adds	r3, r7, #2
 800d666:	781a      	ldrb	r2, [r3, #0]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	0013      	movs	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	189b      	adds	r3, r3, r2
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	189b      	adds	r3, r3, r2
 800d674:	000a      	movs	r2, r1
 800d676:	0152      	lsls	r2, r2, #5
 800d678:	1852      	adds	r2, r2, r1
 800d67a:	189b      	adds	r3, r3, r2
 800d67c:	18c3      	adds	r3, r0, r3
 800d67e:	330a      	adds	r3, #10
 800d680:	221c      	movs	r2, #28
 800d682:	18ba      	adds	r2, r7, r2
 800d684:	7812      	ldrb	r2, [r2, #0]
 800d686:	701a      	strb	r2, [r3, #0]

}
 800d688:	46c0      	nop			; (mov r8, r8)
 800d68a:	46bd      	mov	sp, r7
 800d68c:	b003      	add	sp, #12
 800d68e:	bd90      	pop	{r4, r7, pc}

0800d690 <menuSwitch>:
 *
 * @param switch direction
 *
 * @retval OK if switched, ERROR if not switched(no parent, no child, no above, or no under)
 */
uint8_t menuSwitch(MenuTypeDef *menu, uint8_t direction) {
 800d690:	b590      	push	{r4, r7, lr}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	000a      	movs	r2, r1
 800d69a:	1cfb      	adds	r3, r7, #3
 800d69c:	701a      	strb	r2, [r3, #0]

	if (direction == MENU_UP) { //nie działa
 800d69e:	1cfb      	adds	r3, r7, #3
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d000      	beq.n	800d6a8 <menuSwitch+0x18>
 800d6a6:	e0e2      	b.n	800d86e <menuSwitch+0x1de>

		if ((menu->current.level == 0 && menu->current.entry > 0)
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	23b9      	movs	r3, #185	; 0xb9
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	5cd3      	ldrb	r3, [r2, r3]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d105      	bne.n	800d6c0 <menuSwitch+0x30>
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	2372      	movs	r3, #114	; 0x72
 800d6b8:	33ff      	adds	r3, #255	; 0xff
 800d6ba:	5cd3      	ldrb	r3, [r2, r3]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d124      	bne.n	800d70a <menuSwitch+0x7a>
				|| (menu->current.level != 0
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	23b9      	movs	r3, #185	; 0xb9
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	5cd3      	ldrb	r3, [r2, r3]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d100      	bne.n	800d6ce <menuSwitch+0x3e>
 800d6cc:	e0cd      	b.n	800d86a <menuSwitch+0x1da>
						&& menu->current.entry
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	2372      	movs	r3, #114	; 0x72
 800d6d2:	33ff      	adds	r3, #255	; 0xff
 800d6d4:	5cd1      	ldrb	r1, [r2, r3]
								> menu->items[menu->current.parent][menu->current.level
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	2374      	movs	r3, #116	; 0x74
 800d6da:	33ff      	adds	r3, #255	; 0xff
 800d6dc:	5cd3      	ldrb	r3, [r2, r3]
 800d6de:	001c      	movs	r4, r3
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	23b9      	movs	r3, #185	; 0xb9
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childFirst)) {
 800d6e8:	1e5a      	subs	r2, r3, #1
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	0013      	movs	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	189b      	adds	r3, r3, r2
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	189b      	adds	r3, r3, r2
 800d6f6:	0022      	movs	r2, r4
 800d6f8:	0152      	lsls	r2, r2, #5
 800d6fa:	1912      	adds	r2, r2, r4
 800d6fc:	189b      	adds	r3, r3, r2
 800d6fe:	18c3      	adds	r3, r0, r3
 800d700:	3309      	adds	r3, #9
 800d702:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800d704:	4299      	cmp	r1, r3
 800d706:	d800      	bhi.n	800d70a <menuSwitch+0x7a>
 800d708:	e0af      	b.n	800d86a <menuSwitch+0x1da>

			menu->current.entry--;
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	2372      	movs	r3, #114	; 0x72
 800d70e:	33ff      	adds	r3, #255	; 0xff
 800d710:	5cd3      	ldrb	r3, [r2, r3]
 800d712:	3b01      	subs	r3, #1
 800d714:	b2d9      	uxtb	r1, r3
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	2372      	movs	r3, #114	; 0x72
 800d71a:	33ff      	adds	r3, #255	; 0xff
 800d71c:	54d1      	strb	r1, [r2, r3]
			memcpy(menu->current.value,
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	336c      	adds	r3, #108	; 0x6c
 800d722:	33ff      	adds	r3, #255	; 0xff
 800d724:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	2372      	movs	r3, #114	; 0x72
 800d72a:	33ff      	adds	r3, #255	; 0xff
 800d72c:	5cd3      	ldrb	r3, [r2, r3]
 800d72e:	0019      	movs	r1, r3
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	23b9      	movs	r3, #185	; 0xb9
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	5cd3      	ldrb	r3, [r2, r3]
 800d738:	001a      	movs	r2, r3
 800d73a:	0013      	movs	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	189b      	adds	r3, r3, r2
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	189b      	adds	r3, r3, r2
 800d744:	000a      	movs	r2, r1
 800d746:	0152      	lsls	r2, r2, #5
 800d748:	1852      	adds	r2, r2, r1
 800d74a:	189b      	adds	r3, r3, r2
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800d750:	2204      	movs	r2, #4
 800d752:	0019      	movs	r1, r3
 800d754:	f001 fae0 	bl	800ed18 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	2372      	movs	r3, #114	; 0x72
 800d75c:	33ff      	adds	r3, #255	; 0xff
 800d75e:	5cd3      	ldrb	r3, [r2, r3]
 800d760:	0018      	movs	r0, r3
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	23b9      	movs	r3, #185	; 0xb9
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	5cd3      	ldrb	r3, [r2, r3]
 800d76a:	001a      	movs	r2, r3
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	0013      	movs	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	189b      	adds	r3, r3, r2
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	189b      	adds	r3, r3, r2
 800d778:	0002      	movs	r2, r0
 800d77a:	0152      	lsls	r2, r2, #5
 800d77c:	1812      	adds	r2, r2, r0
 800d77e:	189b      	adds	r3, r3, r2
 800d780:	18cb      	adds	r3, r1, r3
 800d782:	3304      	adds	r3, #4
 800d784:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	2370      	movs	r3, #112	; 0x70
 800d78a:	33ff      	adds	r3, #255	; 0xff
 800d78c:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	2372      	movs	r3, #114	; 0x72
 800d792:	33ff      	adds	r3, #255	; 0xff
 800d794:	5cd3      	ldrb	r3, [r2, r3]
 800d796:	0018      	movs	r0, r3
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	23b9      	movs	r3, #185	; 0xb9
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	5cd3      	ldrb	r3, [r2, r3]
 800d7a0:	001a      	movs	r2, r3
 800d7a2:	6879      	ldr	r1, [r7, #4]
 800d7a4:	0013      	movs	r3, r2
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	189b      	adds	r3, r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	189b      	adds	r3, r3, r2
 800d7ae:	0002      	movs	r2, r0
 800d7b0:	0152      	lsls	r2, r2, #5
 800d7b2:	1812      	adds	r2, r2, r0
 800d7b4:	189b      	adds	r3, r3, r2
 800d7b6:	18cb      	adds	r3, r1, r3
 800d7b8:	3305      	adds	r3, #5
 800d7ba:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	23b8      	movs	r3, #184	; 0xb8
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	2372      	movs	r3, #114	; 0x72
 800d7c8:	33ff      	adds	r3, #255	; 0xff
 800d7ca:	5cd3      	ldrb	r3, [r2, r3]
 800d7cc:	0018      	movs	r0, r3
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	23b9      	movs	r3, #185	; 0xb9
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	5cd3      	ldrb	r3, [r2, r3]
 800d7d6:	001a      	movs	r2, r3
 800d7d8:	6879      	ldr	r1, [r7, #4]
 800d7da:	0013      	movs	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	189b      	adds	r3, r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	189b      	adds	r3, r3, r2
 800d7e4:	0002      	movs	r2, r0
 800d7e6:	0152      	lsls	r2, r2, #5
 800d7e8:	1812      	adds	r2, r2, r0
 800d7ea:	189b      	adds	r3, r3, r2
 800d7ec:	18cb      	adds	r3, r1, r3
 800d7ee:	3308      	adds	r3, #8
 800d7f0:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	2374      	movs	r3, #116	; 0x74
 800d7f6:	33ff      	adds	r3, #255	; 0xff
 800d7f8:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	2372      	movs	r3, #114	; 0x72
 800d7fe:	33ff      	adds	r3, #255	; 0xff
 800d800:	5cd3      	ldrb	r3, [r2, r3]
 800d802:	0018      	movs	r0, r3
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	23b9      	movs	r3, #185	; 0xb9
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	5cd3      	ldrb	r3, [r2, r3]
 800d80c:	001a      	movs	r2, r3
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	0013      	movs	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	189b      	adds	r3, r3, r2
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	189b      	adds	r3, r3, r2
 800d81a:	0002      	movs	r2, r0
 800d81c:	0152      	lsls	r2, r2, #5
 800d81e:	1812      	adds	r2, r2, r0
 800d820:	189b      	adds	r3, r3, r2
 800d822:	18cb      	adds	r3, r1, r3
 800d824:	3309      	adds	r3, #9
 800d826:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	23ba      	movs	r3, #186	; 0xba
 800d82c:	005b      	lsls	r3, r3, #1
 800d82e:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	2372      	movs	r3, #114	; 0x72
 800d834:	33ff      	adds	r3, #255	; 0xff
 800d836:	5cd3      	ldrb	r3, [r2, r3]
 800d838:	0018      	movs	r0, r3
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	23b9      	movs	r3, #185	; 0xb9
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	5cd3      	ldrb	r3, [r2, r3]
 800d842:	001a      	movs	r2, r3
 800d844:	6879      	ldr	r1, [r7, #4]
 800d846:	0013      	movs	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	189b      	adds	r3, r3, r2
 800d84c:	005b      	lsls	r3, r3, #1
 800d84e:	189b      	adds	r3, r3, r2
 800d850:	0002      	movs	r2, r0
 800d852:	0152      	lsls	r2, r2, #5
 800d854:	1812      	adds	r2, r2, r0
 800d856:	189b      	adds	r3, r3, r2
 800d858:	18cb      	adds	r3, r1, r3
 800d85a:	330a      	adds	r3, #10
 800d85c:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	2376      	movs	r3, #118	; 0x76
 800d862:	33ff      	adds	r3, #255	; 0xff
 800d864:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800d866:	2301      	movs	r3, #1
 800d868:	e25f      	b.n	800dd2a <menuSwitch+0x69a>
		} else {
			return MENU_ERROR;
 800d86a:	2300      	movs	r3, #0
 800d86c:	e25d      	b.n	800dd2a <menuSwitch+0x69a>
		}

	} else if (direction == MENU_DOWN) {
 800d86e:	1cfb      	adds	r3, r7, #3
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	2b03      	cmp	r3, #3
 800d874:	d000      	beq.n	800d878 <menuSwitch+0x1e8>
 800d876:	e0e2      	b.n	800da3e <menuSwitch+0x3ae>

		if ((menu->current.level == 0
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	23b9      	movs	r3, #185	; 0xb9
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	5cd3      	ldrb	r3, [r2, r3]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d105      	bne.n	800d890 <menuSwitch+0x200>
				&& menu->current.entry < MENU_ENTRIES_MAIN - 1)
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	2372      	movs	r3, #114	; 0x72
 800d888:	33ff      	adds	r3, #255	; 0xff
 800d88a:	5cd3      	ldrb	r3, [r2, r3]
 800d88c:	2b05      	cmp	r3, #5
 800d88e:	d924      	bls.n	800d8da <menuSwitch+0x24a>
				|| (menu->current.level != 0
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	23b9      	movs	r3, #185	; 0xb9
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	5cd3      	ldrb	r3, [r2, r3]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d100      	bne.n	800d89e <menuSwitch+0x20e>
 800d89c:	e0cd      	b.n	800da3a <menuSwitch+0x3aa>
						&& menu->current.entry
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	2372      	movs	r3, #114	; 0x72
 800d8a2:	33ff      	adds	r3, #255	; 0xff
 800d8a4:	5cd1      	ldrb	r1, [r2, r3]
								< menu->items[menu->current.parent][menu->current.level
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	2374      	movs	r3, #116	; 0x74
 800d8aa:	33ff      	adds	r3, #255	; 0xff
 800d8ac:	5cd3      	ldrb	r3, [r2, r3]
 800d8ae:	001c      	movs	r4, r3
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	23b9      	movs	r3, #185	; 0xb9
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	5cd3      	ldrb	r3, [r2, r3]
										- 1].childLast)) {
 800d8b8:	1e5a      	subs	r2, r3, #1
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	0013      	movs	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	189b      	adds	r3, r3, r2
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	189b      	adds	r3, r3, r2
 800d8c6:	0022      	movs	r2, r4
 800d8c8:	0152      	lsls	r2, r2, #5
 800d8ca:	1912      	adds	r2, r2, r4
 800d8cc:	189b      	adds	r3, r3, r2
 800d8ce:	18c3      	adds	r3, r0, r3
 800d8d0:	330a      	adds	r3, #10
 800d8d2:	781b      	ldrb	r3, [r3, #0]
						&& menu->current.entry
 800d8d4:	4299      	cmp	r1, r3
 800d8d6:	d300      	bcc.n	800d8da <menuSwitch+0x24a>
 800d8d8:	e0af      	b.n	800da3a <menuSwitch+0x3aa>

			menu->current.entry++;
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	2372      	movs	r3, #114	; 0x72
 800d8de:	33ff      	adds	r3, #255	; 0xff
 800d8e0:	5cd3      	ldrb	r3, [r2, r3]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	b2d9      	uxtb	r1, r3
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	2372      	movs	r3, #114	; 0x72
 800d8ea:	33ff      	adds	r3, #255	; 0xff
 800d8ec:	54d1      	strb	r1, [r2, r3]

			memcpy(menu->current.value,
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	336c      	adds	r3, #108	; 0x6c
 800d8f2:	33ff      	adds	r3, #255	; 0xff
 800d8f4:	0018      	movs	r0, r3
					menu->items[menu->current.entry][menu->current.level].value,
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	2372      	movs	r3, #114	; 0x72
 800d8fa:	33ff      	adds	r3, #255	; 0xff
 800d8fc:	5cd3      	ldrb	r3, [r2, r3]
 800d8fe:	0019      	movs	r1, r3
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	23b9      	movs	r3, #185	; 0xb9
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	5cd3      	ldrb	r3, [r2, r3]
 800d908:	001a      	movs	r2, r3
 800d90a:	0013      	movs	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	189b      	adds	r3, r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	189b      	adds	r3, r3, r2
 800d914:	000a      	movs	r2, r1
 800d916:	0152      	lsls	r2, r2, #5
 800d918:	1852      	adds	r2, r2, r1
 800d91a:	189b      	adds	r3, r3, r2
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	18d3      	adds	r3, r2, r3
			memcpy(menu->current.value,
 800d920:	2204      	movs	r2, #4
 800d922:	0019      	movs	r1, r3
 800d924:	f001 f9f8 	bl	800ed18 <memcpy>
					sizeof(menu->current.value));
			menu->current.value2 =
					menu->items[menu->current.entry][menu->current.level].value2;
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	2372      	movs	r3, #114	; 0x72
 800d92c:	33ff      	adds	r3, #255	; 0xff
 800d92e:	5cd3      	ldrb	r3, [r2, r3]
 800d930:	0018      	movs	r0, r3
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	23b9      	movs	r3, #185	; 0xb9
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	5cd3      	ldrb	r3, [r2, r3]
 800d93a:	001a      	movs	r2, r3
 800d93c:	6879      	ldr	r1, [r7, #4]
 800d93e:	0013      	movs	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	189b      	adds	r3, r3, r2
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	189b      	adds	r3, r3, r2
 800d948:	0002      	movs	r2, r0
 800d94a:	0152      	lsls	r2, r2, #5
 800d94c:	1812      	adds	r2, r2, r0
 800d94e:	189b      	adds	r3, r3, r2
 800d950:	18cb      	adds	r3, r1, r3
 800d952:	3304      	adds	r3, #4
 800d954:	7819      	ldrb	r1, [r3, #0]
			menu->current.value2 =
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	2370      	movs	r3, #112	; 0x70
 800d95a:	33ff      	adds	r3, #255	; 0xff
 800d95c:	54d1      	strb	r1, [r2, r3]
			menu->current.value3 =
					menu->items[menu->current.entry][menu->current.level].value3;
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	2372      	movs	r3, #114	; 0x72
 800d962:	33ff      	adds	r3, #255	; 0xff
 800d964:	5cd3      	ldrb	r3, [r2, r3]
 800d966:	0018      	movs	r0, r3
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	23b9      	movs	r3, #185	; 0xb9
 800d96c:	005b      	lsls	r3, r3, #1
 800d96e:	5cd3      	ldrb	r3, [r2, r3]
 800d970:	001a      	movs	r2, r3
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	0013      	movs	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	189b      	adds	r3, r3, r2
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	189b      	adds	r3, r3, r2
 800d97e:	0002      	movs	r2, r0
 800d980:	0152      	lsls	r2, r2, #5
 800d982:	1812      	adds	r2, r2, r0
 800d984:	189b      	adds	r3, r3, r2
 800d986:	18cb      	adds	r3, r1, r3
 800d988:	3305      	adds	r3, #5
 800d98a:	7819      	ldrb	r1, [r3, #0]
			menu->current.value3 =
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	23b8      	movs	r3, #184	; 0xb8
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	54d1      	strb	r1, [r2, r3]

			menu->current.parent =
					menu->items[menu->current.entry][menu->current.level].parent;
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	2372      	movs	r3, #114	; 0x72
 800d998:	33ff      	adds	r3, #255	; 0xff
 800d99a:	5cd3      	ldrb	r3, [r2, r3]
 800d99c:	0018      	movs	r0, r3
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	23b9      	movs	r3, #185	; 0xb9
 800d9a2:	005b      	lsls	r3, r3, #1
 800d9a4:	5cd3      	ldrb	r3, [r2, r3]
 800d9a6:	001a      	movs	r2, r3
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	0013      	movs	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	189b      	adds	r3, r3, r2
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	189b      	adds	r3, r3, r2
 800d9b4:	0002      	movs	r2, r0
 800d9b6:	0152      	lsls	r2, r2, #5
 800d9b8:	1812      	adds	r2, r2, r0
 800d9ba:	189b      	adds	r3, r3, r2
 800d9bc:	18cb      	adds	r3, r1, r3
 800d9be:	3308      	adds	r3, #8
 800d9c0:	7819      	ldrb	r1, [r3, #0]
			menu->current.parent =
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	2374      	movs	r3, #116	; 0x74
 800d9c6:	33ff      	adds	r3, #255	; 0xff
 800d9c8:	54d1      	strb	r1, [r2, r3]
			menu->current.childFirst =
					menu->items[menu->current.entry][menu->current.level].childFirst;
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	2372      	movs	r3, #114	; 0x72
 800d9ce:	33ff      	adds	r3, #255	; 0xff
 800d9d0:	5cd3      	ldrb	r3, [r2, r3]
 800d9d2:	0018      	movs	r0, r3
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	23b9      	movs	r3, #185	; 0xb9
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	5cd3      	ldrb	r3, [r2, r3]
 800d9dc:	001a      	movs	r2, r3
 800d9de:	6879      	ldr	r1, [r7, #4]
 800d9e0:	0013      	movs	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	189b      	adds	r3, r3, r2
 800d9e6:	005b      	lsls	r3, r3, #1
 800d9e8:	189b      	adds	r3, r3, r2
 800d9ea:	0002      	movs	r2, r0
 800d9ec:	0152      	lsls	r2, r2, #5
 800d9ee:	1812      	adds	r2, r2, r0
 800d9f0:	189b      	adds	r3, r3, r2
 800d9f2:	18cb      	adds	r3, r1, r3
 800d9f4:	3309      	adds	r3, #9
 800d9f6:	7819      	ldrb	r1, [r3, #0]
			menu->current.childFirst =
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	23ba      	movs	r3, #186	; 0xba
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	54d1      	strb	r1, [r2, r3]
			menu->current.childLast =
					menu->items[menu->current.entry][menu->current.level].childLast;
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	2372      	movs	r3, #114	; 0x72
 800da04:	33ff      	adds	r3, #255	; 0xff
 800da06:	5cd3      	ldrb	r3, [r2, r3]
 800da08:	0018      	movs	r0, r3
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	23b9      	movs	r3, #185	; 0xb9
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	5cd3      	ldrb	r3, [r2, r3]
 800da12:	001a      	movs	r2, r3
 800da14:	6879      	ldr	r1, [r7, #4]
 800da16:	0013      	movs	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	189b      	adds	r3, r3, r2
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	189b      	adds	r3, r3, r2
 800da20:	0002      	movs	r2, r0
 800da22:	0152      	lsls	r2, r2, #5
 800da24:	1812      	adds	r2, r2, r0
 800da26:	189b      	adds	r3, r3, r2
 800da28:	18cb      	adds	r3, r1, r3
 800da2a:	330a      	adds	r3, #10
 800da2c:	7819      	ldrb	r1, [r3, #0]
			menu->current.childLast =
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	2376      	movs	r3, #118	; 0x76
 800da32:	33ff      	adds	r3, #255	; 0xff
 800da34:	54d1      	strb	r1, [r2, r3]
			return MENU_OK;
 800da36:	2301      	movs	r3, #1
 800da38:	e177      	b.n	800dd2a <menuSwitch+0x69a>

		} else {
			return MENU_ERROR;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e175      	b.n	800dd2a <menuSwitch+0x69a>
		}

	} else if (direction == MENU_ENTER && menu->current.childFirst != MENU_NONE) {
 800da3e:	1cfb      	adds	r3, r7, #3
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d000      	beq.n	800da48 <menuSwitch+0x3b8>
 800da46:	e0ab      	b.n	800dba0 <menuSwitch+0x510>
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	23ba      	movs	r3, #186	; 0xba
 800da4c:	005b      	lsls	r3, r3, #1
 800da4e:	5cd3      	ldrb	r3, [r2, r3]
 800da50:	2bff      	cmp	r3, #255	; 0xff
 800da52:	d100      	bne.n	800da56 <menuSwitch+0x3c6>
 800da54:	e0a4      	b.n	800dba0 <menuSwitch+0x510>

		menu->current.parent = menu->current.entry;
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	2372      	movs	r3, #114	; 0x72
 800da5a:	33ff      	adds	r3, #255	; 0xff
 800da5c:	5cd1      	ldrb	r1, [r2, r3]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	2374      	movs	r3, #116	; 0x74
 800da62:	33ff      	adds	r3, #255	; 0xff
 800da64:	54d1      	strb	r1, [r2, r3]
		menu->current.entry = menu->current.childFirst;
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	23ba      	movs	r3, #186	; 0xba
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	5cd1      	ldrb	r1, [r2, r3]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	2372      	movs	r3, #114	; 0x72
 800da72:	33ff      	adds	r3, #255	; 0xff
 800da74:	54d1      	strb	r1, [r2, r3]
		menu->current.level++;
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	23b9      	movs	r3, #185	; 0xb9
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	5cd3      	ldrb	r3, [r2, r3]
 800da7e:	3301      	adds	r3, #1
 800da80:	b2d9      	uxtb	r1, r3
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	23b9      	movs	r3, #185	; 0xb9
 800da86:	005b      	lsls	r3, r3, #1
 800da88:	54d1      	strb	r1, [r2, r3]

		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	2372      	movs	r3, #114	; 0x72
 800da8e:	33ff      	adds	r3, #255	; 0xff
 800da90:	5cd3      	ldrb	r3, [r2, r3]
 800da92:	0018      	movs	r0, r3
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	23b9      	movs	r3, #185	; 0xb9
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	5cd3      	ldrb	r3, [r2, r3]
 800da9c:	001a      	movs	r2, r3
 800da9e:	6879      	ldr	r1, [r7, #4]
 800daa0:	0013      	movs	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	189b      	adds	r3, r3, r2
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	189b      	adds	r3, r3, r2
 800daaa:	0002      	movs	r2, r0
 800daac:	0152      	lsls	r2, r2, #5
 800daae:	1812      	adds	r2, r2, r0
 800dab0:	189b      	adds	r3, r3, r2
 800dab2:	18cb      	adds	r3, r1, r3
 800dab4:	3309      	adds	r3, #9
 800dab6:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	23ba      	movs	r3, #186	; 0xba
 800dabc:	005b      	lsls	r3, r3, #1
 800dabe:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	2372      	movs	r3, #114	; 0x72
 800dac4:	33ff      	adds	r3, #255	; 0xff
 800dac6:	5cd3      	ldrb	r3, [r2, r3]
 800dac8:	0018      	movs	r0, r3
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	23b9      	movs	r3, #185	; 0xb9
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	5cd3      	ldrb	r3, [r2, r3]
 800dad2:	001a      	movs	r2, r3
 800dad4:	6879      	ldr	r1, [r7, #4]
 800dad6:	0013      	movs	r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	189b      	adds	r3, r3, r2
 800dadc:	005b      	lsls	r3, r3, #1
 800dade:	189b      	adds	r3, r3, r2
 800dae0:	0002      	movs	r2, r0
 800dae2:	0152      	lsls	r2, r2, #5
 800dae4:	1812      	adds	r2, r2, r0
 800dae6:	189b      	adds	r3, r3, r2
 800dae8:	18cb      	adds	r3, r1, r3
 800daea:	330a      	adds	r3, #10
 800daec:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	2376      	movs	r3, #118	; 0x76
 800daf2:	33ff      	adds	r3, #255	; 0xff
 800daf4:	54d1      	strb	r1, [r2, r3]
		memcpy(menu->current.value,
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	336c      	adds	r3, #108	; 0x6c
 800dafa:	33ff      	adds	r3, #255	; 0xff
 800dafc:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	2372      	movs	r3, #114	; 0x72
 800db02:	33ff      	adds	r3, #255	; 0xff
 800db04:	5cd3      	ldrb	r3, [r2, r3]
 800db06:	0019      	movs	r1, r3
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	23b9      	movs	r3, #185	; 0xb9
 800db0c:	005b      	lsls	r3, r3, #1
 800db0e:	5cd3      	ldrb	r3, [r2, r3]
 800db10:	001a      	movs	r2, r3
 800db12:	0013      	movs	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	189b      	adds	r3, r3, r2
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	189b      	adds	r3, r3, r2
 800db1c:	000a      	movs	r2, r1
 800db1e:	0152      	lsls	r2, r2, #5
 800db20:	1852      	adds	r2, r2, r1
 800db22:	189b      	adds	r3, r3, r2
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800db28:	2204      	movs	r2, #4
 800db2a:	0019      	movs	r1, r3
 800db2c:	f001 f8f4 	bl	800ed18 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	2372      	movs	r3, #114	; 0x72
 800db34:	33ff      	adds	r3, #255	; 0xff
 800db36:	5cd3      	ldrb	r3, [r2, r3]
 800db38:	0018      	movs	r0, r3
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	23b9      	movs	r3, #185	; 0xb9
 800db3e:	005b      	lsls	r3, r3, #1
 800db40:	5cd3      	ldrb	r3, [r2, r3]
 800db42:	001a      	movs	r2, r3
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	0013      	movs	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	189b      	adds	r3, r3, r2
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	189b      	adds	r3, r3, r2
 800db50:	0002      	movs	r2, r0
 800db52:	0152      	lsls	r2, r2, #5
 800db54:	1812      	adds	r2, r2, r0
 800db56:	189b      	adds	r3, r3, r2
 800db58:	18cb      	adds	r3, r1, r3
 800db5a:	3304      	adds	r3, #4
 800db5c:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	2370      	movs	r3, #112	; 0x70
 800db62:	33ff      	adds	r3, #255	; 0xff
 800db64:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
				menu->items[menu->current.entry][menu->current.level].value3;
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	2372      	movs	r3, #114	; 0x72
 800db6a:	33ff      	adds	r3, #255	; 0xff
 800db6c:	5cd3      	ldrb	r3, [r2, r3]
 800db6e:	0018      	movs	r0, r3
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	23b9      	movs	r3, #185	; 0xb9
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	5cd3      	ldrb	r3, [r2, r3]
 800db78:	001a      	movs	r2, r3
 800db7a:	6879      	ldr	r1, [r7, #4]
 800db7c:	0013      	movs	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	189b      	adds	r3, r3, r2
 800db82:	005b      	lsls	r3, r3, #1
 800db84:	189b      	adds	r3, r3, r2
 800db86:	0002      	movs	r2, r0
 800db88:	0152      	lsls	r2, r2, #5
 800db8a:	1812      	adds	r2, r2, r0
 800db8c:	189b      	adds	r3, r3, r2
 800db8e:	18cb      	adds	r3, r1, r3
 800db90:	3305      	adds	r3, #5
 800db92:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	23b8      	movs	r3, #184	; 0xb8
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800db9c:	2301      	movs	r3, #1
 800db9e:	e0c4      	b.n	800dd2a <menuSwitch+0x69a>

	} else if (direction == MENU_EXIT && menu->current.parent != MENU_NONE) {
 800dba0:	1cfb      	adds	r3, r7, #3
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d000      	beq.n	800dbaa <menuSwitch+0x51a>
 800dba8:	e0be      	b.n	800dd28 <menuSwitch+0x698>
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	2374      	movs	r3, #116	; 0x74
 800dbae:	33ff      	adds	r3, #255	; 0xff
 800dbb0:	5cd3      	ldrb	r3, [r2, r3]
 800dbb2:	2bff      	cmp	r3, #255	; 0xff
 800dbb4:	d100      	bne.n	800dbb8 <menuSwitch+0x528>
 800dbb6:	e0b7      	b.n	800dd28 <menuSwitch+0x698>

		menu->current.entry = menu->current.parent;
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	2374      	movs	r3, #116	; 0x74
 800dbbc:	33ff      	adds	r3, #255	; 0xff
 800dbbe:	5cd1      	ldrb	r1, [r2, r3]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	2372      	movs	r3, #114	; 0x72
 800dbc4:	33ff      	adds	r3, #255	; 0xff
 800dbc6:	54d1      	strb	r1, [r2, r3]
		menu->current.level--;
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	23b9      	movs	r3, #185	; 0xb9
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	5cd3      	ldrb	r3, [r2, r3]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	b2d9      	uxtb	r1, r3
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	23b9      	movs	r3, #185	; 0xb9
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	54d1      	strb	r1, [r2, r3]
		menu->current.parent = menu->items[menu->current.parent][menu->current.level].parent;
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	2374      	movs	r3, #116	; 0x74
 800dbe0:	33ff      	adds	r3, #255	; 0xff
 800dbe2:	5cd3      	ldrb	r3, [r2, r3]
 800dbe4:	0018      	movs	r0, r3
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	23b9      	movs	r3, #185	; 0xb9
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	5cd3      	ldrb	r3, [r2, r3]
 800dbee:	001a      	movs	r2, r3
 800dbf0:	6879      	ldr	r1, [r7, #4]
 800dbf2:	0013      	movs	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	189b      	adds	r3, r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	189b      	adds	r3, r3, r2
 800dbfc:	0002      	movs	r2, r0
 800dbfe:	0152      	lsls	r2, r2, #5
 800dc00:	1812      	adds	r2, r2, r0
 800dc02:	189b      	adds	r3, r3, r2
 800dc04:	18cb      	adds	r3, r1, r3
 800dc06:	3308      	adds	r3, #8
 800dc08:	7819      	ldrb	r1, [r3, #0]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	2374      	movs	r3, #116	; 0x74
 800dc0e:	33ff      	adds	r3, #255	; 0xff
 800dc10:	54d1      	strb	r1, [r2, r3]
		menu->current.childFirst =
				menu->items[menu->current.entry][menu->current.level].childFirst;
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	2372      	movs	r3, #114	; 0x72
 800dc16:	33ff      	adds	r3, #255	; 0xff
 800dc18:	5cd3      	ldrb	r3, [r2, r3]
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	23b9      	movs	r3, #185	; 0xb9
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	5cd3      	ldrb	r3, [r2, r3]
 800dc24:	001a      	movs	r2, r3
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	0013      	movs	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	189b      	adds	r3, r3, r2
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	189b      	adds	r3, r3, r2
 800dc32:	0002      	movs	r2, r0
 800dc34:	0152      	lsls	r2, r2, #5
 800dc36:	1812      	adds	r2, r2, r0
 800dc38:	189b      	adds	r3, r3, r2
 800dc3a:	18cb      	adds	r3, r1, r3
 800dc3c:	3309      	adds	r3, #9
 800dc3e:	7819      	ldrb	r1, [r3, #0]
		menu->current.childFirst =
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	23ba      	movs	r3, #186	; 0xba
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	54d1      	strb	r1, [r2, r3]
		menu->current.childLast =
				menu->items[menu->current.entry][menu->current.level].childLast;
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	2372      	movs	r3, #114	; 0x72
 800dc4c:	33ff      	adds	r3, #255	; 0xff
 800dc4e:	5cd3      	ldrb	r3, [r2, r3]
 800dc50:	0018      	movs	r0, r3
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	23b9      	movs	r3, #185	; 0xb9
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	5cd3      	ldrb	r3, [r2, r3]
 800dc5a:	001a      	movs	r2, r3
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	0013      	movs	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	189b      	adds	r3, r3, r2
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	189b      	adds	r3, r3, r2
 800dc68:	0002      	movs	r2, r0
 800dc6a:	0152      	lsls	r2, r2, #5
 800dc6c:	1812      	adds	r2, r2, r0
 800dc6e:	189b      	adds	r3, r3, r2
 800dc70:	18cb      	adds	r3, r1, r3
 800dc72:	330a      	adds	r3, #10
 800dc74:	7819      	ldrb	r1, [r3, #0]
		menu->current.childLast =
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	2376      	movs	r3, #118	; 0x76
 800dc7a:	33ff      	adds	r3, #255	; 0xff
 800dc7c:	54d1      	strb	r1, [r2, r3]

		memcpy(menu->current.value,
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	336c      	adds	r3, #108	; 0x6c
 800dc82:	33ff      	adds	r3, #255	; 0xff
 800dc84:	0018      	movs	r0, r3
				menu->items[menu->current.entry][menu->current.level].value,
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	2372      	movs	r3, #114	; 0x72
 800dc8a:	33ff      	adds	r3, #255	; 0xff
 800dc8c:	5cd3      	ldrb	r3, [r2, r3]
 800dc8e:	0019      	movs	r1, r3
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	23b9      	movs	r3, #185	; 0xb9
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	5cd3      	ldrb	r3, [r2, r3]
 800dc98:	001a      	movs	r2, r3
 800dc9a:	0013      	movs	r3, r2
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	189b      	adds	r3, r3, r2
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	189b      	adds	r3, r3, r2
 800dca4:	000a      	movs	r2, r1
 800dca6:	0152      	lsls	r2, r2, #5
 800dca8:	1852      	adds	r2, r2, r1
 800dcaa:	189b      	adds	r3, r3, r2
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	18d3      	adds	r3, r2, r3
		memcpy(menu->current.value,
 800dcb0:	2204      	movs	r2, #4
 800dcb2:	0019      	movs	r1, r3
 800dcb4:	f001 f830 	bl	800ed18 <memcpy>
				sizeof(menu->current.value));
		menu->current.value2 =
				menu->items[menu->current.entry][menu->current.level].value2;
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	2372      	movs	r3, #114	; 0x72
 800dcbc:	33ff      	adds	r3, #255	; 0xff
 800dcbe:	5cd3      	ldrb	r3, [r2, r3]
 800dcc0:	0018      	movs	r0, r3
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	23b9      	movs	r3, #185	; 0xb9
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	5cd3      	ldrb	r3, [r2, r3]
 800dcca:	001a      	movs	r2, r3
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	0013      	movs	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	189b      	adds	r3, r3, r2
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	189b      	adds	r3, r3, r2
 800dcd8:	0002      	movs	r2, r0
 800dcda:	0152      	lsls	r2, r2, #5
 800dcdc:	1812      	adds	r2, r2, r0
 800dcde:	189b      	adds	r3, r3, r2
 800dce0:	18cb      	adds	r3, r1, r3
 800dce2:	3304      	adds	r3, #4
 800dce4:	7819      	ldrb	r1, [r3, #0]
		menu->current.value2 =
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	2370      	movs	r3, #112	; 0x70
 800dcea:	33ff      	adds	r3, #255	; 0xff
 800dcec:	54d1      	strb	r1, [r2, r3]
		menu->current.value3 =
									menu->items[menu->current.entry][menu->current.level].value3;
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	2372      	movs	r3, #114	; 0x72
 800dcf2:	33ff      	adds	r3, #255	; 0xff
 800dcf4:	5cd3      	ldrb	r3, [r2, r3]
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	23b9      	movs	r3, #185	; 0xb9
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	5cd3      	ldrb	r3, [r2, r3]
 800dd00:	001a      	movs	r2, r3
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	0013      	movs	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	189b      	adds	r3, r3, r2
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	189b      	adds	r3, r3, r2
 800dd0e:	0002      	movs	r2, r0
 800dd10:	0152      	lsls	r2, r2, #5
 800dd12:	1812      	adds	r2, r2, r0
 800dd14:	189b      	adds	r3, r3, r2
 800dd16:	18cb      	adds	r3, r1, r3
 800dd18:	3305      	adds	r3, #5
 800dd1a:	7819      	ldrb	r1, [r3, #0]
		menu->current.value3 =
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	23b8      	movs	r3, #184	; 0xb8
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	54d1      	strb	r1, [r2, r3]
		return MENU_OK;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <menuSwitch+0x69a>
	} else {
		return MENU_ERROR;
 800dd28:	2300      	movs	r3, #0
	}
}
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	b003      	add	sp, #12
 800dd30:	bd90      	pop	{r4, r7, pc}
	...

0800dd34 <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800dd34:	b5b0      	push	{r4, r5, r7, lr}
 800dd36:	b090      	sub	sp, #64	; 0x40
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800dd3c:	49ee      	ldr	r1, [pc, #952]	; (800e0f8 <rtcGetTime+0x3c4>)
 800dd3e:	4bef      	ldr	r3, [pc, #956]	; (800e0fc <rtcGetTime+0x3c8>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	0018      	movs	r0, r3
 800dd44:	f7f8 fed0 	bl	8006ae8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800dd48:	49ed      	ldr	r1, [pc, #948]	; (800e100 <rtcGetTime+0x3cc>)
 800dd4a:	4bec      	ldr	r3, [pc, #944]	; (800e0fc <rtcGetTime+0x3c8>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	0018      	movs	r0, r3
 800dd50:	f7f8 ffb8 	bl	8006cc4 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800dd54:	4be8      	ldr	r3, [pc, #928]	; (800e0f8 <rtcGetTime+0x3c4>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	b25a      	sxtb	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 800dd5e:	4be6      	ldr	r3, [pc, #920]	; (800e0f8 <rtcGetTime+0x3c4>)
 800dd60:	785b      	ldrb	r3, [r3, #1]
 800dd62:	b25a      	sxtb	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800dd68:	4be3      	ldr	r3, [pc, #908]	; (800e0f8 <rtcGetTime+0x3c4>)
 800dd6a:	789b      	ldrb	r3, [r3, #2]
 800dd6c:	b25a      	sxtb	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800dd72:	4be1      	ldr	r3, [pc, #900]	; (800e0f8 <rtcGetTime+0x3c4>)
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	0013      	movs	r3, r2
 800dd78:	065b      	lsls	r3, r3, #25
 800dd7a:	1a9b      	subs	r3, r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	189b      	adds	r3, r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	1a9b      	subs	r3, r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4adf      	ldr	r2, [pc, #892]	; (800e104 <rtcGetTime+0x3d0>)
 800dd88:	4694      	mov	ip, r2
 800dd8a:	4463      	add	r3, ip
 800dd8c:	21ff      	movs	r1, #255	; 0xff
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f7f2 f9c4 	bl	800011c <__udivsi3>
 800dd94:	0003      	movs	r3, r0
 800dd96:	b25a      	sxtb	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800dd9c:	4bd8      	ldr	r3, [pc, #864]	; (800e100 <rtcGetTime+0x3cc>)
 800dd9e:	789b      	ldrb	r3, [r3, #2]
 800dda0:	b25a      	sxtb	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800dda6:	4bd6      	ldr	r3, [pc, #856]	; (800e100 <rtcGetTime+0x3cc>)
 800dda8:	785b      	ldrb	r3, [r3, #1]
 800ddaa:	b25a      	sxtb	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800ddb0:	4bd3      	ldr	r3, [pc, #844]	; (800e100 <rtcGetTime+0x3cc>)
 800ddb2:	78db      	ldrb	r3, [r3, #3]
 800ddb4:	b25a      	sxtb	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	785b      	ldrb	r3, [r3, #1]
 800ddbe:	b25b      	sxtb	r3, r3
 800ddc0:	3309      	adds	r3, #9
 800ddc2:	210c      	movs	r1, #12
 800ddc4:	0018      	movs	r0, r3
 800ddc6:	f7f2 fa33 	bl	8000230 <__divsi3>
 800ddca:	0003      	movs	r3, r0
 800ddcc:	0018      	movs	r0, r3
 800ddce:	f7f3 fa71 	bl	80012b4 <__aeabi_i2f>
 800ddd2:	1c03      	adds	r3, r0, #0
 800ddd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	b25b      	sxtb	r3, r3
 800dddc:	001c      	movs	r4, r3
 800ddde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dde0:	f7f2 fbbc 	bl	800055c <__aeabi_f2uiz>
 800dde4:	0003      	movs	r3, r0
 800dde6:	18e3      	adds	r3, r4, r3
 800dde8:	4ac7      	ldr	r2, [pc, #796]	; (800e108 <rtcGetTime+0x3d4>)
 800ddea:	4694      	mov	ip, r2
 800ddec:	4463      	add	r3, ip
 800ddee:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	785b      	ldrb	r3, [r3, #1]
 800ddf4:	b25b      	sxtb	r3, r3
 800ddf6:	001a      	movs	r2, r3
 800ddf8:	0013      	movs	r3, r2
 800ddfa:	00db      	lsls	r3, r3, #3
 800ddfc:	1a9b      	subs	r3, r3, r2
 800ddfe:	00db      	lsls	r3, r3, #3
 800de00:	1a9b      	subs	r3, r3, r2
 800de02:	009a      	lsls	r2, r3, #2
 800de04:	189b      	adds	r3, r3, r2
 800de06:	2109      	movs	r1, #9
 800de08:	0018      	movs	r0, r3
 800de0a:	f7f2 fa11 	bl	8000230 <__divsi3>
 800de0e:	0003      	movs	r3, r0
 800de10:	0018      	movs	r0, r3
 800de12:	f7f3 fa4f 	bl	80012b4 <__aeabi_i2f>
 800de16:	1c03      	adds	r3, r0, #0
 800de18:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 800de1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de1c:	0013      	movs	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	1a9b      	subs	r3, r3, r2
 800de22:	089b      	lsrs	r3, r3, #2
 800de24:	0018      	movs	r0, r3
 800de26:	f7f3 fa8b 	bl	8001340 <__aeabi_ui2f>
 800de2a:	1c03      	adds	r3, r0, #0
 800de2c:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b25b      	sxtb	r3, r3
 800de34:	22fa      	movs	r2, #250	; 0xfa
 800de36:	00d2      	lsls	r2, r2, #3
 800de38:	189a      	adds	r2, r3, r2
 800de3a:	0013      	movs	r3, r2
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	189b      	adds	r3, r3, r2
 800de40:	00db      	lsls	r3, r3, #3
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	011b      	lsls	r3, r3, #4
 800de46:	1a9b      	subs	r3, r3, r2
 800de48:	0018      	movs	r0, r3
 800de4a:	f7f5 f877 	bl	8002f3c <__aeabi_i2d>
 800de4e:	2280      	movs	r2, #128	; 0x80
 800de50:	0612      	lsls	r2, r2, #24
 800de52:	4bae      	ldr	r3, [pc, #696]	; (800e10c <rtcGetTime+0x3d8>)
 800de54:	f7f3 fab0 	bl	80013b8 <__aeabi_dadd>
 800de58:	0002      	movs	r2, r0
 800de5a:	000b      	movs	r3, r1
 800de5c:	0014      	movs	r4, r2
 800de5e:	001d      	movs	r5, r3
 800de60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de62:	f7f2 fb7b 	bl	800055c <__aeabi_f2uiz>
 800de66:	0003      	movs	r3, r0
 800de68:	0018      	movs	r0, r3
 800de6a:	f7f5 f897 	bl	8002f9c <__aeabi_ui2d>
 800de6e:	0002      	movs	r2, r0
 800de70:	000b      	movs	r3, r1
 800de72:	0020      	movs	r0, r4
 800de74:	0029      	movs	r1, r5
 800de76:	f7f3 fa9f 	bl	80013b8 <__aeabi_dadd>
 800de7a:	0002      	movs	r2, r0
 800de7c:	000b      	movs	r3, r1
 800de7e:	0014      	movs	r4, r2
 800de80:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800de82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de84:	f7f2 fb6a 	bl	800055c <__aeabi_f2uiz>
 800de88:	0003      	movs	r3, r0
 800de8a:	0018      	movs	r0, r3
 800de8c:	f7f5 f886 	bl	8002f9c <__aeabi_ui2d>
 800de90:	0002      	movs	r2, r0
 800de92:	000b      	movs	r3, r1
 800de94:	0020      	movs	r0, r4
 800de96:	0029      	movs	r1, r5
 800de98:	f7f4 fc6a 	bl	8002770 <__aeabi_dsub>
 800de9c:	0002      	movs	r2, r0
 800de9e:	000b      	movs	r3, r1
 800dea0:	0014      	movs	r4, r2
 800dea2:	001d      	movs	r5, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	789b      	ldrb	r3, [r3, #2]
 800dea8:	b25b      	sxtb	r3, r3
 800deaa:	0018      	movs	r0, r3
 800deac:	f7f5 f846 	bl	8002f3c <__aeabi_i2d>
 800deb0:	0002      	movs	r2, r0
 800deb2:	000b      	movs	r3, r1
 800deb4:	0020      	movs	r0, r4
 800deb6:	0029      	movs	r1, r5
 800deb8:	f7f3 fa7e 	bl	80013b8 <__aeabi_dadd>
 800debc:	0002      	movs	r2, r0
 800debe:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800dec0:	0010      	movs	r0, r2
 800dec2:	0019      	movs	r1, r3
 800dec4:	f7f5 f8d8 	bl	8003078 <__aeabi_d2f>
 800dec8:	1c03      	adds	r3, r0, #0
 800deca:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	3353      	adds	r3, #83	; 0x53
 800ded0:	2164      	movs	r1, #100	; 0x64
 800ded2:	0018      	movs	r0, r3
 800ded4:	f7f2 f922 	bl	800011c <__udivsi3>
 800ded8:	0003      	movs	r3, r0
 800deda:	0018      	movs	r0, r3
 800dedc:	f7f3 fa30 	bl	8001340 <__aeabi_ui2f>
 800dee0:	1c03      	adds	r3, r0, #0
 800dee2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 800dee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dee6:	f7f2 fb39 	bl	800055c <__aeabi_f2uiz>
 800deea:	0003      	movs	r3, r0
 800deec:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	1c5a      	adds	r2, r3, #1
 800def2:	0013      	movs	r3, r2
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	189b      	adds	r3, r3, r2
 800def8:	089b      	lsrs	r3, r3, #2
 800defa:	0018      	movs	r0, r3
 800defc:	f7f3 fa20 	bl	8001340 <__aeabi_ui2f>
 800df00:	1c03      	adds	r3, r0, #0
 800df02:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800df04:	6a38      	ldr	r0, [r7, #32]
 800df06:	f7f2 fb29 	bl	800055c <__aeabi_f2uiz>
 800df0a:	0003      	movs	r3, r0
 800df0c:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 800df0e:	4980      	ldr	r1, [pc, #512]	; (800e110 <rtcGetTime+0x3dc>)
 800df10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df12:	f7f2 fc25 	bl	8000760 <__aeabi_fadd>
 800df16:	1c03      	adds	r3, r0, #0
 800df18:	1c1c      	adds	r4, r3, #0
 800df1a:	69f8      	ldr	r0, [r7, #28]
 800df1c:	f7f3 fa10 	bl	8001340 <__aeabi_ui2f>
 800df20:	1c03      	adds	r3, r0, #0
 800df22:	1c19      	adds	r1, r3, #0
 800df24:	1c20      	adds	r0, r4, #0
 800df26:	f7f2 ffdd 	bl	8000ee4 <__aeabi_fsub>
 800df2a:	1c03      	adds	r3, r0, #0
 800df2c:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 800df2e:	4b79      	ldr	r3, [pc, #484]	; (800e114 <rtcGetTime+0x3e0>)
 800df30:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800df32:	6979      	ldr	r1, [r7, #20]
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f7f2 fdaf 	bl	8000a98 <__aeabi_fdiv>
 800df3a:	1c03      	adds	r3, r0, #0
 800df3c:	1c18      	adds	r0, r3, #0
 800df3e:	f7f5 f853 	bl	8002fe8 <__aeabi_f2d>
 800df42:	4a75      	ldr	r2, [pc, #468]	; (800e118 <rtcGetTime+0x3e4>)
 800df44:	4b75      	ldr	r3, [pc, #468]	; (800e11c <rtcGetTime+0x3e8>)
 800df46:	f7f4 fc13 	bl	8002770 <__aeabi_dsub>
 800df4a:	0002      	movs	r2, r0
 800df4c:	000b      	movs	r3, r1
 800df4e:	0010      	movs	r0, r2
 800df50:	0019      	movs	r1, r3
 800df52:	f7f5 f891 	bl	8003078 <__aeabi_d2f>
 800df56:	1c03      	adds	r3, r0, #0
 800df58:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800df5a:	6938      	ldr	r0, [r7, #16]
 800df5c:	f7f2 fafe 	bl	800055c <__aeabi_f2uiz>
 800df60:	0003      	movs	r3, r0
 800df62:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f7f3 f9eb 	bl	8001340 <__aeabi_ui2f>
 800df6a:	1c03      	adds	r3, r0, #0
 800df6c:	1c19      	adds	r1, r3, #0
 800df6e:	6938      	ldr	r0, [r7, #16]
 800df70:	f7f2 ffb8 	bl	8000ee4 <__aeabi_fsub>
 800df74:	1c03      	adds	r3, r0, #0
 800df76:	496a      	ldr	r1, [pc, #424]	; (800e120 <rtcGetTime+0x3ec>)
 800df78:	1c18      	adds	r0, r3, #0
 800df7a:	f7f2 fe99 	bl	8000cb0 <__aeabi_fmul>
 800df7e:	1c03      	adds	r3, r0, #0
 800df80:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800df82:	68b8      	ldr	r0, [r7, #8]
 800df84:	f7f2 faea 	bl	800055c <__aeabi_f2uiz>
 800df88:	0002      	movs	r2, r0
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2224      	movs	r2, #36	; 0x24
 800df92:	5c9b      	ldrb	r3, [r3, r2]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d114      	bne.n	800dfc2 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2224      	movs	r2, #36	; 0x24
 800dfc6:	5c9b      	ldrb	r3, [r3, r2]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d000      	beq.n	800dfce <rtcGetTime+0x29a>
 800dfcc:	e0f8      	b.n	800e1c0 <rtcGetTime+0x48c>

#if RTC_FREEZED_DECIMALS
		chrono->chrono.hundredth = 0;
#else
		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	799b      	ldrb	r3, [r3, #6]
 800dfd2:	b25b      	sxtb	r3, r3
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	7c9b      	ldrb	r3, [r3, #18]
 800dfda:	b25b      	sxtb	r3, r3
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	b25a      	sxtb	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	779a      	strb	r2, [r3, #30]
#endif

		chrono->chrono.second = chrono->actual.second
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	795b      	ldrb	r3, [r3, #5]
 800dfec:	b25b      	sxtb	r3, r3
 800dfee:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7c5b      	ldrb	r3, [r3, #17]
 800dff4:	b25b      	sxtb	r3, r3
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	791b      	ldrb	r3, [r3, #4]
 800e006:	b25b      	sxtb	r3, r3
 800e008:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	7c1b      	ldrb	r3, [r3, #16]
 800e00e:	b25b      	sxtb	r3, r3
 800e010:	b2db      	uxtb	r3, r3
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	b2db      	uxtb	r3, r3
 800e016:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	78db      	ldrb	r3, [r3, #3]
 800e020:	b25b      	sxtb	r3, r3
 800e022:	b2da      	uxtb	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7bdb      	ldrb	r3, [r3, #15]
 800e028:	b25b      	sxtb	r3, r3
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	b25a      	sxtb	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	789b      	ldrb	r3, [r3, #2]
 800e03a:	b25b      	sxtb	r3, r3
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	7b9b      	ldrb	r3, [r3, #14]
 800e042:	b25b      	sxtb	r3, r3
 800e044:	b2db      	uxtb	r3, r3
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	b25a      	sxtb	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	785b      	ldrb	r3, [r3, #1]
 800e054:	b25b      	sxtb	r3, r3
 800e056:	b2da      	uxtb	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	7b5b      	ldrb	r3, [r3, #13]
 800e05c:	b25b      	sxtb	r3, r3
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	b2db      	uxtb	r3, r3
 800e064:	b25a      	sxtb	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	7f9b      	ldrb	r3, [r3, #30]
 800e06e:	b25b      	sxtb	r3, r3
 800e070:	2b00      	cmp	r3, #0
 800e072:	da11      	bge.n	800e098 <rtcGetTime+0x364>
			chrono->chrono.second--;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	7f5b      	ldrb	r3, [r3, #29]
 800e078:	b25b      	sxtb	r3, r3
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	b25a      	sxtb	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	7f9b      	ldrb	r3, [r3, #30]
 800e08a:	b25b      	sxtb	r3, r3
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	3364      	adds	r3, #100	; 0x64
 800e090:	b2db      	uxtb	r3, r3
 800e092:	b25a      	sxtb	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	7f5b      	ldrb	r3, [r3, #29]
 800e09c:	b25b      	sxtb	r3, r3
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	da11      	bge.n	800e0c6 <rtcGetTime+0x392>
			chrono->chrono.minute--;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	7f1b      	ldrb	r3, [r3, #28]
 800e0a6:	b25b      	sxtb	r3, r3
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	b25a      	sxtb	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7f5b      	ldrb	r3, [r3, #29]
 800e0b8:	b25b      	sxtb	r3, r3
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	333c      	adds	r3, #60	; 0x3c
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	b25a      	sxtb	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	7f1b      	ldrb	r3, [r3, #28]
 800e0ca:	b25b      	sxtb	r3, r3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	da29      	bge.n	800e124 <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	7edb      	ldrb	r3, [r3, #27]
 800e0d4:	b25b      	sxtb	r3, r3
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	b25a      	sxtb	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	7f1b      	ldrb	r3, [r3, #28]
 800e0e6:	b25b      	sxtb	r3, r3
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	333c      	adds	r3, #60	; 0x3c
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	b25a      	sxtb	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	771a      	strb	r2, [r3, #28]
 800e0f4:	e016      	b.n	800e124 <rtcGetTime+0x3f0>
 800e0f6:	46c0      	nop			; (mov r8, r8)
 800e0f8:	20000158 	.word	0x20000158
 800e0fc:	200004e0 	.word	0x200004e0
 800e100:	20000154 	.word	0x20000154
 800e104:	0000639c 	.word	0x0000639c
 800e108:	00001a3c 	.word	0x00001a3c
 800e10c:	413a62ff 	.word	0x413a62ff
 800e110:	42180000 	.word	0x42180000
 800e114:	41ec3ea6 	.word	0x41ec3ea6
 800e118:	67381d7e 	.word	0x67381d7e
 800e11c:	3fd36944 	.word	0x3fd36944
 800e120:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7edb      	ldrb	r3, [r3, #27]
 800e128:	b25b      	sxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	da11      	bge.n	800e152 <rtcGetTime+0x41e>
			chrono->chrono.day--;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	7e9b      	ldrb	r3, [r3, #26]
 800e132:	b25b      	sxtb	r3, r3
 800e134:	b2db      	uxtb	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	b25a      	sxtb	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	7edb      	ldrb	r3, [r3, #27]
 800e144:	b25b      	sxtb	r3, r3
 800e146:	b2db      	uxtb	r3, r3
 800e148:	3318      	adds	r3, #24
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	b25a      	sxtb	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7e9b      	ldrb	r3, [r3, #26]
 800e156:	b25b      	sxtb	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	da11      	bge.n	800e180 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	7e5b      	ldrb	r3, [r3, #25]
 800e160:	b25b      	sxtb	r3, r3
 800e162:	b2db      	uxtb	r3, r3
 800e164:	3b01      	subs	r3, #1
 800e166:	b2db      	uxtb	r3, r3
 800e168:	b25a      	sxtb	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	7e9b      	ldrb	r3, [r3, #26]
 800e172:	b25b      	sxtb	r3, r3
 800e174:	b2db      	uxtb	r3, r3
 800e176:	331e      	adds	r3, #30
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	b25a      	sxtb	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	7e5b      	ldrb	r3, [r3, #25]
 800e184:	b25b      	sxtb	r3, r3
 800e186:	2b00      	cmp	r3, #0
 800e188:	da11      	bge.n	800e1ae <rtcGetTime+0x47a>
			chrono->chrono.year--;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	7e1b      	ldrb	r3, [r3, #24]
 800e18e:	b25b      	sxtb	r3, r3
 800e190:	b2db      	uxtb	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	b2db      	uxtb	r3, r3
 800e196:	b25a      	sxtb	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7e5b      	ldrb	r3, [r3, #25]
 800e1a0:	b25b      	sxtb	r3, r3
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	330c      	adds	r3, #12
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	b25a      	sxtb	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	765a      	strb	r2, [r3, #25]
		}

		//max chrono count
		if (chrono->chrono.hour >= 5) {
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	7edb      	ldrb	r3, [r3, #27]
 800e1b2:	b25b      	sxtb	r3, r3
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	dd03      	ble.n	800e1c0 <rtcGetTime+0x48c>
			chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2224      	movs	r2, #36	; 0x24
 800e1bc:	2102      	movs	r1, #2
 800e1be:	5499      	strb	r1, [r3, r2]
		}
	}

}
 800e1c0:	46c0      	nop			; (mov r8, r8)
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	b010      	add	sp, #64	; 0x40
 800e1c6:	bdb0      	pop	{r4, r5, r7, pc}

0800e1c8 <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	78db      	ldrb	r3, [r3, #3]
 800e1d4:	b25b      	sxtb	r3, r3
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	4b17      	ldr	r3, [pc, #92]	; (800e238 <rtcSetTime+0x70>)
 800e1da:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	791b      	ldrb	r3, [r3, #4]
 800e1e0:	b25b      	sxtb	r3, r3
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	4b14      	ldr	r3, [pc, #80]	; (800e238 <rtcSetTime+0x70>)
 800e1e6:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	795b      	ldrb	r3, [r3, #5]
 800e1ec:	b25b      	sxtb	r3, r3
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	4b11      	ldr	r3, [pc, #68]	; (800e238 <rtcSetTime+0x70>)
 800e1f2:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	789b      	ldrb	r3, [r3, #2]
 800e1f8:	b25b      	sxtb	r3, r3
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	4b0f      	ldr	r3, [pc, #60]	; (800e23c <rtcSetTime+0x74>)
 800e1fe:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	b25b      	sxtb	r3, r3
 800e206:	b2da      	uxtb	r2, r3
 800e208:	4b0c      	ldr	r3, [pc, #48]	; (800e23c <rtcSetTime+0x74>)
 800e20a:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	b25b      	sxtb	r3, r3
 800e212:	b2da      	uxtb	r2, r3
 800e214:	4b09      	ldr	r3, [pc, #36]	; (800e23c <rtcSetTime+0x74>)
 800e216:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e218:	4907      	ldr	r1, [pc, #28]	; (800e238 <rtcSetTime+0x70>)
 800e21a:	4b09      	ldr	r3, [pc, #36]	; (800e240 <rtcSetTime+0x78>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	0018      	movs	r0, r3
 800e220:	f7f8 fbba 	bl	8006998 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e224:	4905      	ldr	r1, [pc, #20]	; (800e23c <rtcSetTime+0x74>)
 800e226:	4b06      	ldr	r3, [pc, #24]	; (800e240 <rtcSetTime+0x78>)
 800e228:	2200      	movs	r2, #0
 800e22a:	0018      	movs	r0, r3
 800e22c:	f7f8 fcb8 	bl	8006ba0 <HAL_RTC_SetDate>

}
 800e230:	46c0      	nop			; (mov r8, r8)
 800e232:	46bd      	mov	sp, r7
 800e234:	b002      	add	sp, #8
 800e236:	bd80      	pop	{r7, pc}
 800e238:	20000158 	.word	0x20000158
 800e23c:	20000154 	.word	0x20000154
 800e240:	200004e0 	.word	0x200004e0

0800e244 <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e24c:	4923      	ldr	r1, [pc, #140]	; (800e2dc <rtcStartChrono+0x98>)
 800e24e:	4b24      	ldr	r3, [pc, #144]	; (800e2e0 <rtcStartChrono+0x9c>)
 800e250:	2200      	movs	r2, #0
 800e252:	0018      	movs	r0, r3
 800e254:	f7f8 fc48 	bl	8006ae8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e258:	4922      	ldr	r1, [pc, #136]	; (800e2e4 <rtcStartChrono+0xa0>)
 800e25a:	4b21      	ldr	r3, [pc, #132]	; (800e2e0 <rtcStartChrono+0x9c>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	0018      	movs	r0, r3
 800e260:	f7f8 fd30 	bl	8006cc4 <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800e264:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <rtcStartChrono+0x98>)
 800e266:	789b      	ldrb	r3, [r3, #2]
 800e268:	b25a      	sxtb	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 800e26e:	4b1b      	ldr	r3, [pc, #108]	; (800e2dc <rtcStartChrono+0x98>)
 800e270:	785b      	ldrb	r3, [r3, #1]
 800e272:	b25a      	sxtb	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800e278:	4b18      	ldr	r3, [pc, #96]	; (800e2dc <rtcStartChrono+0x98>)
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	0013      	movs	r3, r2
 800e27e:	065b      	lsls	r3, r3, #25
 800e280:	1a9b      	subs	r3, r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	189b      	adds	r3, r3, r2
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	1a9b      	subs	r3, r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4a16      	ldr	r2, [pc, #88]	; (800e2e8 <rtcStartChrono+0xa4>)
 800e28e:	4694      	mov	ip, r2
 800e290:	4463      	add	r3, ip
 800e292:	21ff      	movs	r1, #255	; 0xff
 800e294:	0018      	movs	r0, r3
 800e296:	f7f1 ff41 	bl	800011c <__udivsi3>
 800e29a:	0003      	movs	r3, r0
 800e29c:	b25a      	sxtb	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 800e2a2:	4b0e      	ldr	r3, [pc, #56]	; (800e2dc <rtcStartChrono+0x98>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	b25a      	sxtb	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 800e2ac:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <rtcStartChrono+0xa0>)
 800e2ae:	789b      	ldrb	r3, [r3, #2]
 800e2b0:	b25a      	sxtb	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 800e2b6:	4b0b      	ldr	r3, [pc, #44]	; (800e2e4 <rtcStartChrono+0xa0>)
 800e2b8:	785b      	ldrb	r3, [r3, #1]
 800e2ba:	b25a      	sxtb	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 800e2c0:	4b08      	ldr	r3, [pc, #32]	; (800e2e4 <rtcStartChrono+0xa0>)
 800e2c2:	78db      	ldrb	r3, [r3, #3]
 800e2c4:	b25a      	sxtb	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2224      	movs	r2, #36	; 0x24
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	5499      	strb	r1, [r3, r2]
}
 800e2d2:	46c0      	nop			; (mov r8, r8)
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	b002      	add	sp, #8
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	46c0      	nop			; (mov r8, r8)
 800e2dc:	20000158 	.word	0x20000158
 800e2e0:	200004e0 	.word	0x200004e0
 800e2e4:	20000154 	.word	0x20000154
 800e2e8:	0000639c 	.word	0x0000639c

0800e2ec <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e2f4:	4952      	ldr	r1, [pc, #328]	; (800e440 <rtcStopChrono+0x154>)
 800e2f6:	4b53      	ldr	r3, [pc, #332]	; (800e444 <rtcStopChrono+0x158>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	0018      	movs	r0, r3
 800e2fc:	f7f8 fbf4 	bl	8006ae8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e300:	4951      	ldr	r1, [pc, #324]	; (800e448 <rtcStopChrono+0x15c>)
 800e302:	4b50      	ldr	r3, [pc, #320]	; (800e444 <rtcStopChrono+0x158>)
 800e304:	2200      	movs	r2, #0
 800e306:	0018      	movs	r0, r3
 800e308:	f7f8 fcdc 	bl	8006cc4 <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 800e30c:	4b4c      	ldr	r3, [pc, #304]	; (800e440 <rtcStopChrono+0x154>)
 800e30e:	785b      	ldrb	r3, [r3, #1]
 800e310:	b25a      	sxtb	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800e316:	4b4a      	ldr	r3, [pc, #296]	; (800e440 <rtcStopChrono+0x154>)
 800e318:	789b      	ldrb	r3, [r3, #2]
 800e31a:	b25a      	sxtb	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800e320:	4b47      	ldr	r3, [pc, #284]	; (800e440 <rtcStopChrono+0x154>)
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	0013      	movs	r3, r2
 800e326:	065b      	lsls	r3, r3, #25
 800e328:	1a9b      	subs	r3, r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	189b      	adds	r3, r3, r2
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	1a9b      	subs	r3, r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4a45      	ldr	r2, [pc, #276]	; (800e44c <rtcStopChrono+0x160>)
 800e336:	4694      	mov	ip, r2
 800e338:	4463      	add	r3, ip
 800e33a:	21ff      	movs	r1, #255	; 0xff
 800e33c:	0018      	movs	r0, r3
 800e33e:	f7f1 feed 	bl	800011c <__udivsi3>
 800e342:	0003      	movs	r3, r0
 800e344:	b25a      	sxtb	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 800e34a:	4b3d      	ldr	r3, [pc, #244]	; (800e440 <rtcStopChrono+0x154>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b25a      	sxtb	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800e354:	4b3c      	ldr	r3, [pc, #240]	; (800e448 <rtcStopChrono+0x15c>)
 800e356:	789b      	ldrb	r3, [r3, #2]
 800e358:	b25a      	sxtb	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800e35e:	4b3a      	ldr	r3, [pc, #232]	; (800e448 <rtcStopChrono+0x15c>)
 800e360:	785b      	ldrb	r3, [r3, #1]
 800e362:	b25a      	sxtb	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800e368:	4b37      	ldr	r3, [pc, #220]	; (800e448 <rtcStopChrono+0x15c>)
 800e36a:	78db      	ldrb	r3, [r3, #3]
 800e36c:	b25a      	sxtb	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	799b      	ldrb	r3, [r3, #6]
 800e376:	b25b      	sxtb	r3, r3
 800e378:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	7c9b      	ldrb	r3, [r3, #18]
 800e37e:	b25b      	sxtb	r3, r3
 800e380:	b2db      	uxtb	r3, r3
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	b2db      	uxtb	r3, r3
 800e386:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	795b      	ldrb	r3, [r3, #5]
 800e390:	b25b      	sxtb	r3, r3
 800e392:	b2da      	uxtb	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7c5b      	ldrb	r3, [r3, #17]
 800e398:	b25b      	sxtb	r3, r3
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	b25a      	sxtb	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	791b      	ldrb	r3, [r3, #4]
 800e3aa:	b25b      	sxtb	r3, r3
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7c1b      	ldrb	r3, [r3, #16]
 800e3b2:	b25b      	sxtb	r3, r3
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	b25a      	sxtb	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	78db      	ldrb	r3, [r3, #3]
 800e3c4:	b25b      	sxtb	r3, r3
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7bdb      	ldrb	r3, [r3, #15]
 800e3cc:	b25b      	sxtb	r3, r3
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	b25a      	sxtb	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	789b      	ldrb	r3, [r3, #2]
 800e3de:	b25b      	sxtb	r3, r3
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	7b9b      	ldrb	r3, [r3, #14]
 800e3e6:	b25b      	sxtb	r3, r3
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	1ad3      	subs	r3, r2, r3
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	b25a      	sxtb	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	785b      	ldrb	r3, [r3, #1]
 800e3f8:	b25b      	sxtb	r3, r3
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7b5b      	ldrb	r3, [r3, #13]
 800e400:	b25b      	sxtb	r3, r3
 800e402:	b2db      	uxtb	r3, r3
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	b2db      	uxtb	r3, r3
 800e408:	b25a      	sxtb	r2, r3
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	b25b      	sxtb	r3, r3
 800e414:	b2da      	uxtb	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	7b1b      	ldrb	r3, [r3, #12]
 800e41a:	b25b      	sxtb	r3, r3
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	b2db      	uxtb	r3, r3
 800e422:	b25a      	sxtb	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	0018      	movs	r0, r3
 800e42c:	f7ff fc82 	bl	800dd34 <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2224      	movs	r2, #36	; 0x24
 800e434:	2102      	movs	r1, #2
 800e436:	5499      	strb	r1, [r3, r2]


}
 800e438:	46c0      	nop			; (mov r8, r8)
 800e43a:	46bd      	mov	sp, r7
 800e43c:	b002      	add	sp, #8
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	20000158 	.word	0x20000158
 800e444:	200004e0 	.word	0x200004e0
 800e448:	20000154 	.word	0x20000154
 800e44c:	0000639c 	.word	0x0000639c

0800e450 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2224      	movs	r2, #36	; 0x24
 800e45c:	2101      	movs	r1, #1
 800e45e:	5499      	strb	r1, [r3, r2]
}
 800e460:	46c0      	nop			; (mov r8, r8)
 800e462:	46bd      	mov	sp, r7
 800e464:	b002      	add	sp, #8
 800e466:	bd80      	pop	{r7, pc}

0800e468 <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2224      	movs	r2, #36	; 0x24
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	5499      	strb	r1, [r3, r2]

}
 800e4a8:	46c0      	nop			; (mov r8, r8)
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	b002      	add	sp, #8
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	0008      	movs	r0, r1
 800e4ba:	0011      	movs	r1, r2
 800e4bc:	1cfb      	adds	r3, r7, #3
 800e4be:	1c02      	adds	r2, r0, #0
 800e4c0:	701a      	strb	r2, [r3, #0]
 800e4c2:	1cbb      	adds	r3, r7, #2
 800e4c4:	1c0a      	adds	r2, r1, #0
 800e4c6:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 800e4c8:	1cbb      	adds	r3, r7, #2
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d000      	beq.n	800e4d2 <rtcChangeValue+0x22>
 800e4d0:	e08a      	b.n	800e5e8 <rtcChangeValue+0x138>
		switch (element) {
 800e4d2:	1cfb      	adds	r3, r7, #3
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b05      	cmp	r3, #5
 800e4d8:	d900      	bls.n	800e4dc <rtcChangeValue+0x2c>
 800e4da:	e080      	b.n	800e5de <rtcChangeValue+0x12e>
 800e4dc:	009a      	lsls	r2, r3, #2
 800e4de:	4b8c      	ldr	r3, [pc, #560]	; (800e710 <rtcChangeValue+0x260>)
 800e4e0:	18d3      	adds	r3, r2, r3
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	78db      	ldrb	r3, [r3, #3]
 800e4ea:	b25b      	sxtb	r3, r3
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	dd09      	ble.n	800e504 <rtcChangeValue+0x54>
				chrono->actual.hour--;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	78db      	ldrb	r3, [r3, #3]
 800e4f4:	b25b      	sxtb	r3, r3
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	b25a      	sxtb	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800e502:	e063      	b.n	800e5cc <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	78db      	ldrb	r3, [r3, #3]
 800e508:	b25b      	sxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d15e      	bne.n	800e5cc <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2217      	movs	r2, #23
 800e512:	70da      	strb	r2, [r3, #3]
			break;
 800e514:	e05a      	b.n	800e5cc <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	791b      	ldrb	r3, [r3, #4]
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	dd09      	ble.n	800e534 <rtcChangeValue+0x84>
				chrono->actual.minute--;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	791b      	ldrb	r3, [r3, #4]
 800e524:	b25b      	sxtb	r3, r3
 800e526:	b2db      	uxtb	r3, r3
 800e528:	3b01      	subs	r3, #1
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	b25a      	sxtb	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800e532:	e04d      	b.n	800e5d0 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	791b      	ldrb	r3, [r3, #4]
 800e538:	b25b      	sxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d148      	bne.n	800e5d0 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	223b      	movs	r2, #59	; 0x3b
 800e542:	711a      	strb	r2, [r3, #4]
			break;
 800e544:	e044      	b.n	800e5d0 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	715a      	strb	r2, [r3, #5]
			break;
 800e54c:	e047      	b.n	800e5de <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	789b      	ldrb	r3, [r3, #2]
 800e552:	b25b      	sxtb	r3, r3
 800e554:	2b01      	cmp	r3, #1
 800e556:	dd09      	ble.n	800e56c <rtcChangeValue+0xbc>
				chrono->actual.day--;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	789b      	ldrb	r3, [r3, #2]
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	3b01      	subs	r3, #1
 800e562:	b2db      	uxtb	r3, r3
 800e564:	b25a      	sxtb	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 800e56a:	e033      	b.n	800e5d4 <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	789b      	ldrb	r3, [r3, #2]
 800e570:	b25b      	sxtb	r3, r3
 800e572:	2b01      	cmp	r3, #1
 800e574:	d12e      	bne.n	800e5d4 <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	221f      	movs	r2, #31
 800e57a:	709a      	strb	r2, [r3, #2]
			break;
 800e57c:	e02a      	b.n	800e5d4 <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	785b      	ldrb	r3, [r3, #1]
 800e582:	b25b      	sxtb	r3, r3
 800e584:	2b01      	cmp	r3, #1
 800e586:	dd09      	ble.n	800e59c <rtcChangeValue+0xec>
				chrono->actual.month--;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	785b      	ldrb	r3, [r3, #1]
 800e58c:	b25b      	sxtb	r3, r3
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	3b01      	subs	r3, #1
 800e592:	b2db      	uxtb	r3, r3
 800e594:	b25a      	sxtb	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 800e59a:	e01d      	b.n	800e5d8 <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	b25b      	sxtb	r3, r3
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d118      	bne.n	800e5d8 <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	220c      	movs	r2, #12
 800e5aa:	705a      	strb	r2, [r3, #1]
			break;
 800e5ac:	e014      	b.n	800e5d8 <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	b25b      	sxtb	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd11      	ble.n	800e5dc <rtcChangeValue+0x12c>
				chrono->actual.year--;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	b25b      	sxtb	r3, r3
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	b25a      	sxtb	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	701a      	strb	r2, [r3, #0]
			break;
 800e5ca:	e007      	b.n	800e5dc <rtcChangeValue+0x12c>
			break;
 800e5cc:	46c0      	nop			; (mov r8, r8)
 800e5ce:	e006      	b.n	800e5de <rtcChangeValue+0x12e>
			break;
 800e5d0:	46c0      	nop			; (mov r8, r8)
 800e5d2:	e004      	b.n	800e5de <rtcChangeValue+0x12e>
			break;
 800e5d4:	46c0      	nop			; (mov r8, r8)
 800e5d6:	e002      	b.n	800e5de <rtcChangeValue+0x12e>
			break;
 800e5d8:	46c0      	nop			; (mov r8, r8)
 800e5da:	e000      	b.n	800e5de <rtcChangeValue+0x12e>
			break;
 800e5dc:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	0018      	movs	r0, r3
 800e5e2:	f7ff fdf1 	bl	800e1c8 <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 800e5e6:	e08e      	b.n	800e706 <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 800e5e8:	1cbb      	adds	r3, r7, #2
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d000      	beq.n	800e5f2 <rtcChangeValue+0x142>
 800e5f0:	e089      	b.n	800e706 <rtcChangeValue+0x256>
		switch (element) {
 800e5f2:	1cfb      	adds	r3, r7, #3
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b05      	cmp	r3, #5
 800e5f8:	d900      	bls.n	800e5fc <rtcChangeValue+0x14c>
 800e5fa:	e080      	b.n	800e6fe <rtcChangeValue+0x24e>
 800e5fc:	009a      	lsls	r2, r3, #2
 800e5fe:	4b45      	ldr	r3, [pc, #276]	; (800e714 <rtcChangeValue+0x264>)
 800e600:	18d3      	adds	r3, r2, r3
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	78db      	ldrb	r3, [r3, #3]
 800e60a:	b25b      	sxtb	r3, r3
 800e60c:	2b16      	cmp	r3, #22
 800e60e:	dc09      	bgt.n	800e624 <rtcChangeValue+0x174>
				chrono->actual.hour++;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	78db      	ldrb	r3, [r3, #3]
 800e614:	b25b      	sxtb	r3, r3
 800e616:	b2db      	uxtb	r3, r3
 800e618:	3301      	adds	r3, #1
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	b25a      	sxtb	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	70da      	strb	r2, [r3, #3]
			break;
 800e622:	e063      	b.n	800e6ec <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	78db      	ldrb	r3, [r3, #3]
 800e628:	b25b      	sxtb	r3, r3
 800e62a:	2b16      	cmp	r3, #22
 800e62c:	dd5e      	ble.n	800e6ec <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	70da      	strb	r2, [r3, #3]
			break;
 800e634:	e05a      	b.n	800e6ec <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	791b      	ldrb	r3, [r3, #4]
 800e63a:	b25b      	sxtb	r3, r3
 800e63c:	2b3a      	cmp	r3, #58	; 0x3a
 800e63e:	dc09      	bgt.n	800e654 <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	791b      	ldrb	r3, [r3, #4]
 800e644:	b25b      	sxtb	r3, r3
 800e646:	b2db      	uxtb	r3, r3
 800e648:	3301      	adds	r3, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	b25a      	sxtb	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	711a      	strb	r2, [r3, #4]
			break;
 800e652:	e04d      	b.n	800e6f0 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	791b      	ldrb	r3, [r3, #4]
 800e658:	b25b      	sxtb	r3, r3
 800e65a:	2b3a      	cmp	r3, #58	; 0x3a
 800e65c:	dd48      	ble.n	800e6f0 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	711a      	strb	r2, [r3, #4]
			break;
 800e664:	e044      	b.n	800e6f0 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	715a      	strb	r2, [r3, #5]
			break;
 800e66c:	e047      	b.n	800e6fe <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	789b      	ldrb	r3, [r3, #2]
 800e672:	b25b      	sxtb	r3, r3
 800e674:	2b1e      	cmp	r3, #30
 800e676:	dc09      	bgt.n	800e68c <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	789b      	ldrb	r3, [r3, #2]
 800e67c:	b25b      	sxtb	r3, r3
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	3301      	adds	r3, #1
 800e682:	b2db      	uxtb	r3, r3
 800e684:	b25a      	sxtb	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	709a      	strb	r2, [r3, #2]
			break;
 800e68a:	e033      	b.n	800e6f4 <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	789b      	ldrb	r3, [r3, #2]
 800e690:	b25b      	sxtb	r3, r3
 800e692:	2b1f      	cmp	r3, #31
 800e694:	d12e      	bne.n	800e6f4 <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	709a      	strb	r2, [r3, #2]
			break;
 800e69c:	e02a      	b.n	800e6f4 <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	785b      	ldrb	r3, [r3, #1]
 800e6a2:	b25b      	sxtb	r3, r3
 800e6a4:	2b0b      	cmp	r3, #11
 800e6a6:	dc09      	bgt.n	800e6bc <rtcChangeValue+0x20c>
				chrono->actual.month++;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	785b      	ldrb	r3, [r3, #1]
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	b25a      	sxtb	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	705a      	strb	r2, [r3, #1]
			break;
 800e6ba:	e01d      	b.n	800e6f8 <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	785b      	ldrb	r3, [r3, #1]
 800e6c0:	b25b      	sxtb	r3, r3
 800e6c2:	2b0c      	cmp	r3, #12
 800e6c4:	d118      	bne.n	800e6f8 <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	705a      	strb	r2, [r3, #1]
			break;
 800e6cc:	e014      	b.n	800e6f8 <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	b25b      	sxtb	r3, r3
 800e6d4:	2b62      	cmp	r3, #98	; 0x62
 800e6d6:	dc11      	bgt.n	800e6fc <rtcChangeValue+0x24c>
				chrono->actual.year++;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	b25b      	sxtb	r3, r3
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	b25a      	sxtb	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	701a      	strb	r2, [r3, #0]
			break;
 800e6ea:	e007      	b.n	800e6fc <rtcChangeValue+0x24c>
			break;
 800e6ec:	46c0      	nop			; (mov r8, r8)
 800e6ee:	e006      	b.n	800e6fe <rtcChangeValue+0x24e>
			break;
 800e6f0:	46c0      	nop			; (mov r8, r8)
 800e6f2:	e004      	b.n	800e6fe <rtcChangeValue+0x24e>
			break;
 800e6f4:	46c0      	nop			; (mov r8, r8)
 800e6f6:	e002      	b.n	800e6fe <rtcChangeValue+0x24e>
			break;
 800e6f8:	46c0      	nop			; (mov r8, r8)
 800e6fa:	e000      	b.n	800e6fe <rtcChangeValue+0x24e>
			break;
 800e6fc:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	0018      	movs	r0, r3
 800e702:	f7ff fd61 	bl	800e1c8 <rtcSetTime>
}
 800e706:	46c0      	nop			; (mov r8, r8)
 800e708:	46bd      	mov	sp, r7
 800e70a:	b002      	add	sp, #8
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	46c0      	nop			; (mov r8, r8)
 800e710:	0800fcc8 	.word	0x0800fcc8
 800e714:	0800fce0 	.word	0x0800fce0

0800e718 <rtcBlink>:
 *
 * @param  RTC item handler
 *
 * @retval Even- 1, Odd- 0
 */
uint8_t rtcBlink(RTCChronoTypeDef *chrono) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800e720:	4910      	ldr	r1, [pc, #64]	; (800e764 <rtcBlink+0x4c>)
 800e722:	4b11      	ldr	r3, [pc, #68]	; (800e768 <rtcBlink+0x50>)
 800e724:	2200      	movs	r2, #0
 800e726:	0018      	movs	r0, r3
 800e728:	f7f8 f9de 	bl	8006ae8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800e72c:	490f      	ldr	r1, [pc, #60]	; (800e76c <rtcBlink+0x54>)
 800e72e:	4b0e      	ldr	r3, [pc, #56]	; (800e768 <rtcBlink+0x50>)
 800e730:	2200      	movs	r2, #0
 800e732:	0018      	movs	r0, r3
 800e734:	f7f8 fac6 	bl	8006cc4 <HAL_RTC_GetDate>

	chrono->actual.second = Time.Seconds;
 800e738:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <rtcBlink+0x4c>)
 800e73a:	789b      	ldrb	r3, [r3, #2]
 800e73c:	b25a      	sxtb	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	715a      	strb	r2, [r3, #5]

	if (chrono->actual.second % 2) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	795b      	ldrb	r3, [r3, #5]
 800e746:	b25b      	sxtb	r3, r3
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2201      	movs	r2, #1
 800e74c:	4013      	ands	r3, r2
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <rtcBlink+0x40>
		return 1;
 800e754:	2301      	movs	r3, #1
 800e756:	e000      	b.n	800e75a <rtcBlink+0x42>
	} else {
		return 0;
 800e758:	2300      	movs	r3, #0
	}
}
 800e75a:	0018      	movs	r0, r3
 800e75c:	46bd      	mov	sp, r7
 800e75e:	b002      	add	sp, #8
 800e760:	bd80      	pop	{r7, pc}
 800e762:	46c0      	nop			; (mov r8, r8)
 800e764:	20000158 	.word	0x20000158
 800e768:	200004e0 	.word	0x200004e0
 800e76c:	20000154 	.word	0x20000154

0800e770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e776:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <HAL_MspInit+0x4c>)
 800e778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e77a:	4b10      	ldr	r3, [pc, #64]	; (800e7bc <HAL_MspInit+0x4c>)
 800e77c:	2101      	movs	r1, #1
 800e77e:	430a      	orrs	r2, r1
 800e780:	641a      	str	r2, [r3, #64]	; 0x40
 800e782:	4b0e      	ldr	r3, [pc, #56]	; (800e7bc <HAL_MspInit+0x4c>)
 800e784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e786:	2201      	movs	r2, #1
 800e788:	4013      	ands	r3, r2
 800e78a:	607b      	str	r3, [r7, #4]
 800e78c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e78e:	4b0b      	ldr	r3, [pc, #44]	; (800e7bc <HAL_MspInit+0x4c>)
 800e790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e792:	4b0a      	ldr	r3, [pc, #40]	; (800e7bc <HAL_MspInit+0x4c>)
 800e794:	2180      	movs	r1, #128	; 0x80
 800e796:	0549      	lsls	r1, r1, #21
 800e798:	430a      	orrs	r2, r1
 800e79a:	63da      	str	r2, [r3, #60]	; 0x3c
 800e79c:	4b07      	ldr	r3, [pc, #28]	; (800e7bc <HAL_MspInit+0x4c>)
 800e79e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7a0:	2380      	movs	r3, #128	; 0x80
 800e7a2:	055b      	lsls	r3, r3, #21
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	603b      	str	r3, [r7, #0]
 800e7a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800e7aa:	2380      	movs	r3, #128	; 0x80
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f7f4 ff9c 	bl	80036ec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e7b4:	46c0      	nop			; (mov r8, r8)
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	b002      	add	sp, #8
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	40021000 	.word	0x40021000

0800e7c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e7c0:	b590      	push	{r4, r7, lr}
 800e7c2:	b091      	sub	sp, #68	; 0x44
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e7c8:	240c      	movs	r4, #12
 800e7ca:	193b      	adds	r3, r7, r4
 800e7cc:	0018      	movs	r0, r3
 800e7ce:	2334      	movs	r3, #52	; 0x34
 800e7d0:	001a      	movs	r2, r3
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	f000 faa9 	bl	800ed2a <memset>
  if(hadc->Instance==ADC1)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a11      	ldr	r2, [pc, #68]	; (800e824 <HAL_ADC_MspInit+0x64>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d11c      	bne.n	800e81c <HAL_ADC_MspInit+0x5c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800e7e2:	193b      	adds	r3, r7, r4
 800e7e4:	2280      	movs	r2, #128	; 0x80
 800e7e6:	01d2      	lsls	r2, r2, #7
 800e7e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800e7ea:	193b      	adds	r3, r7, r4
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e7f0:	193b      	adds	r3, r7, r4
 800e7f2:	0018      	movs	r0, r3
 800e7f4:	f7f7 fe82 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800e7f8:	1e03      	subs	r3, r0, #0
 800e7fa:	d001      	beq.n	800e800 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800e7fc:	f7fe fdd4 	bl	800d3a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800e800:	4b09      	ldr	r3, [pc, #36]	; (800e828 <HAL_ADC_MspInit+0x68>)
 800e802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e804:	4b08      	ldr	r3, [pc, #32]	; (800e828 <HAL_ADC_MspInit+0x68>)
 800e806:	2180      	movs	r1, #128	; 0x80
 800e808:	0349      	lsls	r1, r1, #13
 800e80a:	430a      	orrs	r2, r1
 800e80c:	641a      	str	r2, [r3, #64]	; 0x40
 800e80e:	4b06      	ldr	r3, [pc, #24]	; (800e828 <HAL_ADC_MspInit+0x68>)
 800e810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e812:	2380      	movs	r3, #128	; 0x80
 800e814:	035b      	lsls	r3, r3, #13
 800e816:	4013      	ands	r3, r2
 800e818:	60bb      	str	r3, [r7, #8]
 800e81a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e81c:	46c0      	nop			; (mov r8, r8)
 800e81e:	46bd      	mov	sp, r7
 800e820:	b011      	add	sp, #68	; 0x44
 800e822:	bd90      	pop	{r4, r7, pc}
 800e824:	40012400 	.word	0x40012400
 800e828:	40021000 	.word	0x40021000

0800e82c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e82c:	b590      	push	{r4, r7, lr}
 800e82e:	b097      	sub	sp, #92	; 0x5c
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e834:	2344      	movs	r3, #68	; 0x44
 800e836:	18fb      	adds	r3, r7, r3
 800e838:	0018      	movs	r0, r3
 800e83a:	2314      	movs	r3, #20
 800e83c:	001a      	movs	r2, r3
 800e83e:	2100      	movs	r1, #0
 800e840:	f000 fa73 	bl	800ed2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e844:	2410      	movs	r4, #16
 800e846:	193b      	adds	r3, r7, r4
 800e848:	0018      	movs	r0, r3
 800e84a:	2334      	movs	r3, #52	; 0x34
 800e84c:	001a      	movs	r2, r3
 800e84e:	2100      	movs	r1, #0
 800e850:	f000 fa6b 	bl	800ed2a <memset>
  if(hi2c->Instance==I2C1)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a22      	ldr	r2, [pc, #136]	; (800e8e4 <HAL_I2C_MspInit+0xb8>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d13e      	bne.n	800e8dc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800e85e:	193b      	adds	r3, r7, r4
 800e860:	2220      	movs	r2, #32
 800e862:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800e864:	193b      	adds	r3, r7, r4
 800e866:	2200      	movs	r2, #0
 800e868:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e86a:	193b      	adds	r3, r7, r4
 800e86c:	0018      	movs	r0, r3
 800e86e:	f7f7 fe45 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800e872:	1e03      	subs	r3, r0, #0
 800e874:	d001      	beq.n	800e87a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800e876:	f7fe fd97 	bl	800d3a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e87a:	4b1b      	ldr	r3, [pc, #108]	; (800e8e8 <HAL_I2C_MspInit+0xbc>)
 800e87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e87e:	4b1a      	ldr	r3, [pc, #104]	; (800e8e8 <HAL_I2C_MspInit+0xbc>)
 800e880:	2102      	movs	r1, #2
 800e882:	430a      	orrs	r2, r1
 800e884:	635a      	str	r2, [r3, #52]	; 0x34
 800e886:	4b18      	ldr	r3, [pc, #96]	; (800e8e8 <HAL_I2C_MspInit+0xbc>)
 800e888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88a:	2202      	movs	r2, #2
 800e88c:	4013      	ands	r3, r2
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800e892:	2144      	movs	r1, #68	; 0x44
 800e894:	187b      	adds	r3, r7, r1
 800e896:	22c0      	movs	r2, #192	; 0xc0
 800e898:	0092      	lsls	r2, r2, #2
 800e89a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e89c:	187b      	adds	r3, r7, r1
 800e89e:	2212      	movs	r2, #18
 800e8a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a2:	187b      	adds	r3, r7, r1
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8a8:	187b      	adds	r3, r7, r1
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800e8ae:	187b      	adds	r3, r7, r1
 800e8b0:	2206      	movs	r2, #6
 800e8b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e8b4:	187b      	adds	r3, r7, r1
 800e8b6:	4a0d      	ldr	r2, [pc, #52]	; (800e8ec <HAL_I2C_MspInit+0xc0>)
 800e8b8:	0019      	movs	r1, r3
 800e8ba:	0010      	movs	r0, r2
 800e8bc:	f7f6 f918 	bl	8004af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e8c0:	4b09      	ldr	r3, [pc, #36]	; (800e8e8 <HAL_I2C_MspInit+0xbc>)
 800e8c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8c4:	4b08      	ldr	r3, [pc, #32]	; (800e8e8 <HAL_I2C_MspInit+0xbc>)
 800e8c6:	2180      	movs	r1, #128	; 0x80
 800e8c8:	0389      	lsls	r1, r1, #14
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	63da      	str	r2, [r3, #60]	; 0x3c
 800e8ce:	4b06      	ldr	r3, [pc, #24]	; (800e8e8 <HAL_I2C_MspInit+0xbc>)
 800e8d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8d2:	2380      	movs	r3, #128	; 0x80
 800e8d4:	039b      	lsls	r3, r3, #14
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	60bb      	str	r3, [r7, #8]
 800e8da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e8dc:	46c0      	nop			; (mov r8, r8)
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	b017      	add	sp, #92	; 0x5c
 800e8e2:	bd90      	pop	{r4, r7, pc}
 800e8e4:	40005400 	.word	0x40005400
 800e8e8:	40021000 	.word	0x40021000
 800e8ec:	50000400 	.word	0x50000400

0800e8f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e8f0:	b590      	push	{r4, r7, lr}
 800e8f2:	b091      	sub	sp, #68	; 0x44
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e8f8:	240c      	movs	r4, #12
 800e8fa:	193b      	adds	r3, r7, r4
 800e8fc:	0018      	movs	r0, r3
 800e8fe:	2334      	movs	r3, #52	; 0x34
 800e900:	001a      	movs	r2, r3
 800e902:	2100      	movs	r1, #0
 800e904:	f000 fa11 	bl	800ed2a <memset>
  if(hrtc->Instance==RTC)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a15      	ldr	r2, [pc, #84]	; (800e964 <HAL_RTC_MspInit+0x74>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d124      	bne.n	800e95c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800e912:	193b      	adds	r3, r7, r4
 800e914:	2280      	movs	r2, #128	; 0x80
 800e916:	0292      	lsls	r2, r2, #10
 800e918:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800e91a:	193b      	adds	r3, r7, r4
 800e91c:	2280      	movs	r2, #128	; 0x80
 800e91e:	0052      	lsls	r2, r2, #1
 800e920:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e922:	193b      	adds	r3, r7, r4
 800e924:	0018      	movs	r0, r3
 800e926:	f7f7 fde9 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800e92a:	1e03      	subs	r3, r0, #0
 800e92c:	d001      	beq.n	800e932 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800e92e:	f7fe fd3b 	bl	800d3a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e932:	4b0d      	ldr	r3, [pc, #52]	; (800e968 <HAL_RTC_MspInit+0x78>)
 800e934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e936:	4b0c      	ldr	r3, [pc, #48]	; (800e968 <HAL_RTC_MspInit+0x78>)
 800e938:	2180      	movs	r1, #128	; 0x80
 800e93a:	0209      	lsls	r1, r1, #8
 800e93c:	430a      	orrs	r2, r1
 800e93e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800e940:	4b09      	ldr	r3, [pc, #36]	; (800e968 <HAL_RTC_MspInit+0x78>)
 800e942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e944:	4b08      	ldr	r3, [pc, #32]	; (800e968 <HAL_RTC_MspInit+0x78>)
 800e946:	2180      	movs	r1, #128	; 0x80
 800e948:	00c9      	lsls	r1, r1, #3
 800e94a:	430a      	orrs	r2, r1
 800e94c:	63da      	str	r2, [r3, #60]	; 0x3c
 800e94e:	4b06      	ldr	r3, [pc, #24]	; (800e968 <HAL_RTC_MspInit+0x78>)
 800e950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e952:	2380      	movs	r3, #128	; 0x80
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	4013      	ands	r3, r2
 800e958:	60bb      	str	r3, [r7, #8]
 800e95a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e95c:	46c0      	nop			; (mov r8, r8)
 800e95e:	46bd      	mov	sp, r7
 800e960:	b011      	add	sp, #68	; 0x44
 800e962:	bd90      	pop	{r4, r7, pc}
 800e964:	40002800 	.word	0x40002800
 800e968:	40021000 	.word	0x40021000

0800e96c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e96c:	b590      	push	{r4, r7, lr}
 800e96e:	b093      	sub	sp, #76	; 0x4c
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e974:	2414      	movs	r4, #20
 800e976:	193b      	adds	r3, r7, r4
 800e978:	0018      	movs	r0, r3
 800e97a:	2334      	movs	r3, #52	; 0x34
 800e97c:	001a      	movs	r2, r3
 800e97e:	2100      	movs	r1, #0
 800e980:	f000 f9d3 	bl	800ed2a <memset>
  if(htim_base->Instance==TIM1)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a34      	ldr	r2, [pc, #208]	; (800ea5c <HAL_TIM_Base_MspInit+0xf0>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d12d      	bne.n	800e9ea <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800e98e:	193b      	adds	r3, r7, r4
 800e990:	2280      	movs	r2, #128	; 0x80
 800e992:	0392      	lsls	r2, r2, #14
 800e994:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800e996:	193b      	adds	r3, r7, r4
 800e998:	2200      	movs	r2, #0
 800e99a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e99c:	193b      	adds	r3, r7, r4
 800e99e:	0018      	movs	r0, r3
 800e9a0:	f7f7 fdac 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800e9a4:	1e03      	subs	r3, r0, #0
 800e9a6:	d001      	beq.n	800e9ac <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800e9a8:	f7fe fcfe 	bl	800d3a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e9ac:	4b2c      	ldr	r3, [pc, #176]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800e9ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800e9b2:	2180      	movs	r1, #128	; 0x80
 800e9b4:	0109      	lsls	r1, r1, #4
 800e9b6:	430a      	orrs	r2, r1
 800e9b8:	641a      	str	r2, [r3, #64]	; 0x40
 800e9ba:	4b29      	ldr	r3, [pc, #164]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800e9bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9be:	2380      	movs	r3, #128	; 0x80
 800e9c0:	011b      	lsls	r3, r3, #4
 800e9c2:	4013      	ands	r3, r2
 800e9c4:	613b      	str	r3, [r7, #16]
 800e9c6:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	200d      	movs	r0, #13
 800e9ce:	f7f5 febd 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800e9d2:	200d      	movs	r0, #13
 800e9d4:	f7f5 fecf 	bl	8004776 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	200e      	movs	r0, #14
 800e9de:	f7f5 feb5 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800e9e2:	200e      	movs	r0, #14
 800e9e4:	f7f5 fec7 	bl	8004776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e9e8:	e033      	b.n	800ea52 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	2380      	movs	r3, #128	; 0x80
 800e9f0:	05db      	lsls	r3, r3, #23
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d114      	bne.n	800ea20 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e9f6:	4b1a      	ldr	r3, [pc, #104]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800e9f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9fa:	4b19      	ldr	r3, [pc, #100]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	63da      	str	r2, [r3, #60]	; 0x3c
 800ea02:	4b17      	ldr	r3, [pc, #92]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800ea04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea06:	2201      	movs	r2, #1
 800ea08:	4013      	ands	r3, r2
 800ea0a:	60fb      	str	r3, [r7, #12]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ea0e:	2200      	movs	r2, #0
 800ea10:	2100      	movs	r1, #0
 800ea12:	200f      	movs	r0, #15
 800ea14:	f7f5 fe9a 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ea18:	200f      	movs	r0, #15
 800ea1a:	f7f5 feac 	bl	8004776 <HAL_NVIC_EnableIRQ>
}
 800ea1e:	e018      	b.n	800ea52 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a0f      	ldr	r2, [pc, #60]	; (800ea64 <HAL_TIM_Base_MspInit+0xf8>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d113      	bne.n	800ea52 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ea2a:	4b0d      	ldr	r3, [pc, #52]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800ea2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea2e:	4b0c      	ldr	r3, [pc, #48]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800ea30:	2102      	movs	r1, #2
 800ea32:	430a      	orrs	r2, r1
 800ea34:	63da      	str	r2, [r3, #60]	; 0x3c
 800ea36:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <HAL_TIM_Base_MspInit+0xf4>)
 800ea38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	60bb      	str	r3, [r7, #8]
 800ea40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ea42:	2200      	movs	r2, #0
 800ea44:	2100      	movs	r1, #0
 800ea46:	2010      	movs	r0, #16
 800ea48:	f7f5 fe80 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ea4c:	2010      	movs	r0, #16
 800ea4e:	f7f5 fe92 	bl	8004776 <HAL_NVIC_EnableIRQ>
}
 800ea52:	46c0      	nop			; (mov r8, r8)
 800ea54:	46bd      	mov	sp, r7
 800ea56:	b013      	add	sp, #76	; 0x4c
 800ea58:	bd90      	pop	{r4, r7, pc}
 800ea5a:	46c0      	nop			; (mov r8, r8)
 800ea5c:	40012c00 	.word	0x40012c00
 800ea60:	40021000 	.word	0x40021000
 800ea64:	40000400 	.word	0x40000400

0800ea68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ea68:	b590      	push	{r4, r7, lr}
 800ea6a:	b097      	sub	sp, #92	; 0x5c
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea70:	2344      	movs	r3, #68	; 0x44
 800ea72:	18fb      	adds	r3, r7, r3
 800ea74:	0018      	movs	r0, r3
 800ea76:	2314      	movs	r3, #20
 800ea78:	001a      	movs	r2, r3
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	f000 f955 	bl	800ed2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ea80:	2410      	movs	r4, #16
 800ea82:	193b      	adds	r3, r7, r4
 800ea84:	0018      	movs	r0, r3
 800ea86:	2334      	movs	r3, #52	; 0x34
 800ea88:	001a      	movs	r2, r3
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	f000 f94d 	bl	800ed2a <memset>
  if(huart->Instance==USART2)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a22      	ldr	r2, [pc, #136]	; (800eb20 <HAL_UART_MspInit+0xb8>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d13e      	bne.n	800eb18 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ea9a:	193b      	adds	r3, r7, r4
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800eaa0:	193b      	adds	r3, r7, r4
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eaa6:	193b      	adds	r3, r7, r4
 800eaa8:	0018      	movs	r0, r3
 800eaaa:	f7f7 fd27 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800eaae:	1e03      	subs	r3, r0, #0
 800eab0:	d001      	beq.n	800eab6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800eab2:	f7fe fc79 	bl	800d3a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800eab6:	4b1b      	ldr	r3, [pc, #108]	; (800eb24 <HAL_UART_MspInit+0xbc>)
 800eab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eaba:	4b1a      	ldr	r3, [pc, #104]	; (800eb24 <HAL_UART_MspInit+0xbc>)
 800eabc:	2180      	movs	r1, #128	; 0x80
 800eabe:	0289      	lsls	r1, r1, #10
 800eac0:	430a      	orrs	r2, r1
 800eac2:	63da      	str	r2, [r3, #60]	; 0x3c
 800eac4:	4b17      	ldr	r3, [pc, #92]	; (800eb24 <HAL_UART_MspInit+0xbc>)
 800eac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eac8:	2380      	movs	r3, #128	; 0x80
 800eaca:	029b      	lsls	r3, r3, #10
 800eacc:	4013      	ands	r3, r2
 800eace:	60fb      	str	r3, [r7, #12]
 800ead0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ead2:	4b14      	ldr	r3, [pc, #80]	; (800eb24 <HAL_UART_MspInit+0xbc>)
 800ead4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ead6:	4b13      	ldr	r3, [pc, #76]	; (800eb24 <HAL_UART_MspInit+0xbc>)
 800ead8:	2101      	movs	r1, #1
 800eada:	430a      	orrs	r2, r1
 800eadc:	635a      	str	r2, [r3, #52]	; 0x34
 800eade:	4b11      	ldr	r3, [pc, #68]	; (800eb24 <HAL_UART_MspInit+0xbc>)
 800eae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae2:	2201      	movs	r2, #1
 800eae4:	4013      	ands	r3, r2
 800eae6:	60bb      	str	r3, [r7, #8]
 800eae8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800eaea:	2144      	movs	r1, #68	; 0x44
 800eaec:	187b      	adds	r3, r7, r1
 800eaee:	220c      	movs	r2, #12
 800eaf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaf2:	187b      	adds	r3, r7, r1
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaf8:	187b      	adds	r3, r7, r1
 800eafa:	2200      	movs	r2, #0
 800eafc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eafe:	187b      	adds	r3, r7, r1
 800eb00:	2200      	movs	r2, #0
 800eb02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800eb04:	187b      	adds	r3, r7, r1
 800eb06:	2201      	movs	r2, #1
 800eb08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb0a:	187a      	adds	r2, r7, r1
 800eb0c:	23a0      	movs	r3, #160	; 0xa0
 800eb0e:	05db      	lsls	r3, r3, #23
 800eb10:	0011      	movs	r1, r2
 800eb12:	0018      	movs	r0, r3
 800eb14:	f7f5 ffec 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800eb18:	46c0      	nop			; (mov r8, r8)
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	b017      	add	sp, #92	; 0x5c
 800eb1e:	bd90      	pop	{r4, r7, pc}
 800eb20:	40004400 	.word	0x40004400
 800eb24:	40021000 	.word	0x40021000

0800eb28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800eb2c:	e7fe      	b.n	800eb2c <NMI_Handler+0x4>

0800eb2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800eb32:	e7fe      	b.n	800eb32 <HardFault_Handler+0x4>

0800eb34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800eb38:	46c0      	nop			; (mov r8, r8)
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800eb4c:	f7f4 fd8e 	bl	800366c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800eb50:	46c0      	nop			; (mov r8, r8)
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT_Pin);
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	f7f6 f966 	bl	8004e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800eb60:	46c0      	nop			; (mov r8, r8)
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 800eb6a:	2008      	movs	r0, #8
 800eb6c:	f7f6 f95e 	bl	8004e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800eb70:	46c0      	nop			; (mov r8, r8)
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800eb7a:	2010      	movs	r0, #16
 800eb7c:	f7f6 f956 	bl	8004e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800eb80:	2020      	movs	r0, #32
 800eb82:	f7f6 f953 	bl	8004e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_Pin);
 800eb86:	2040      	movs	r0, #64	; 0x40
 800eb88:	f7f6 f950 	bl	8004e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_Pin);
 800eb8c:	2080      	movs	r0, #128	; 0x80
 800eb8e:	f7f6 f94d 	bl	8004e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800eb92:	46c0      	nop			; (mov r8, r8)
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800eb9c:	4b03      	ldr	r3, [pc, #12]	; (800ebac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800eb9e:	0018      	movs	r0, r3
 800eba0:	f7f8 fab4 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800eba4:	46c0      	nop			; (mov r8, r8)
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	46c0      	nop			; (mov r8, r8)
 800ebac:	2000050c 	.word	0x2000050c

0800ebb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ebb4:	4b03      	ldr	r3, [pc, #12]	; (800ebc4 <TIM1_CC_IRQHandler+0x14>)
 800ebb6:	0018      	movs	r0, r3
 800ebb8:	f7f8 faa8 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800ebbc:	46c0      	nop			; (mov r8, r8)
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	46c0      	nop			; (mov r8, r8)
 800ebc4:	2000050c 	.word	0x2000050c

0800ebc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ebcc:	4b03      	ldr	r3, [pc, #12]	; (800ebdc <TIM2_IRQHandler+0x14>)
 800ebce:	0018      	movs	r0, r3
 800ebd0:	f7f8 fa9c 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ebd4:	46c0      	nop			; (mov r8, r8)
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	46c0      	nop			; (mov r8, r8)
 800ebdc:	20000558 	.word	0x20000558

0800ebe0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800ebe4:	4b03      	ldr	r3, [pc, #12]	; (800ebf4 <TIM3_IRQHandler+0x14>)
 800ebe6:	0018      	movs	r0, r3
 800ebe8:	f7f8 fa90 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800ebec:	46c0      	nop			; (mov r8, r8)
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	46c0      	nop			; (mov r8, r8)
 800ebf4:	200003e8 	.word	0x200003e8

0800ebf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ec00:	4a14      	ldr	r2, [pc, #80]	; (800ec54 <_sbrk+0x5c>)
 800ec02:	4b15      	ldr	r3, [pc, #84]	; (800ec58 <_sbrk+0x60>)
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ec0c:	4b13      	ldr	r3, [pc, #76]	; (800ec5c <_sbrk+0x64>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d102      	bne.n	800ec1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ec14:	4b11      	ldr	r3, [pc, #68]	; (800ec5c <_sbrk+0x64>)
 800ec16:	4a12      	ldr	r2, [pc, #72]	; (800ec60 <_sbrk+0x68>)
 800ec18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ec1a:	4b10      	ldr	r3, [pc, #64]	; (800ec5c <_sbrk+0x64>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	18d3      	adds	r3, r2, r3
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d207      	bcs.n	800ec38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ec28:	f000 f84c 	bl	800ecc4 <__errno>
 800ec2c:	0003      	movs	r3, r0
 800ec2e:	220c      	movs	r2, #12
 800ec30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ec32:	2301      	movs	r3, #1
 800ec34:	425b      	negs	r3, r3
 800ec36:	e009      	b.n	800ec4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ec38:	4b08      	ldr	r3, [pc, #32]	; (800ec5c <_sbrk+0x64>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ec3e:	4b07      	ldr	r3, [pc, #28]	; (800ec5c <_sbrk+0x64>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	18d2      	adds	r2, r2, r3
 800ec46:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <_sbrk+0x64>)
 800ec48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
}
 800ec4c:	0018      	movs	r0, r3
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	b006      	add	sp, #24
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20009000 	.word	0x20009000
 800ec58:	00000400 	.word	0x00000400
 800ec5c:	20000144 	.word	0x20000144
 800ec60:	20000648 	.word	0x20000648

0800ec64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ec68:	46c0      	nop			; (mov r8, r8)
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ec70:	480d      	ldr	r0, [pc, #52]	; (800eca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ec72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ec74:	f7ff fff6 	bl	800ec64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ec78:	480c      	ldr	r0, [pc, #48]	; (800ecac <LoopForever+0x6>)
  ldr r1, =_edata
 800ec7a:	490d      	ldr	r1, [pc, #52]	; (800ecb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ec7c:	4a0d      	ldr	r2, [pc, #52]	; (800ecb4 <LoopForever+0xe>)
  movs r3, #0
 800ec7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec80:	e002      	b.n	800ec88 <LoopCopyDataInit>

0800ec82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec86:	3304      	adds	r3, #4

0800ec88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec8c:	d3f9      	bcc.n	800ec82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec8e:	4a0a      	ldr	r2, [pc, #40]	; (800ecb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ec90:	4c0a      	ldr	r4, [pc, #40]	; (800ecbc <LoopForever+0x16>)
  movs r3, #0
 800ec92:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec94:	e001      	b.n	800ec9a <LoopFillZerobss>

0800ec96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec98:	3204      	adds	r2, #4

0800ec9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec9c:	d3fb      	bcc.n	800ec96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ec9e:	f000 f817 	bl	800ecd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800eca2:	f7fd fd4b 	bl	800c73c <main>

0800eca6 <LoopForever>:

LoopForever:
  b LoopForever
 800eca6:	e7fe      	b.n	800eca6 <LoopForever>
  ldr   r0, =_estack
 800eca8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800ecac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ecb0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800ecb4:	0800fd9c 	.word	0x0800fd9c
  ldr r2, =_sbss
 800ecb8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800ecbc:	20000644 	.word	0x20000644

0800ecc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ecc0:	e7fe      	b.n	800ecc0 <ADC1_COMP_IRQHandler>
	...

0800ecc4 <__errno>:
 800ecc4:	4b01      	ldr	r3, [pc, #4]	; (800eccc <__errno+0x8>)
 800ecc6:	6818      	ldr	r0, [r3, #0]
 800ecc8:	4770      	bx	lr
 800ecca:	46c0      	nop			; (mov r8, r8)
 800eccc:	20000010 	.word	0x20000010

0800ecd0 <__libc_init_array>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	2600      	movs	r6, #0
 800ecd4:	4d0c      	ldr	r5, [pc, #48]	; (800ed08 <__libc_init_array+0x38>)
 800ecd6:	4c0d      	ldr	r4, [pc, #52]	; (800ed0c <__libc_init_array+0x3c>)
 800ecd8:	1b64      	subs	r4, r4, r5
 800ecda:	10a4      	asrs	r4, r4, #2
 800ecdc:	42a6      	cmp	r6, r4
 800ecde:	d109      	bne.n	800ecf4 <__libc_init_array+0x24>
 800ece0:	2600      	movs	r6, #0
 800ece2:	f000 fe3b 	bl	800f95c <_init>
 800ece6:	4d0a      	ldr	r5, [pc, #40]	; (800ed10 <__libc_init_array+0x40>)
 800ece8:	4c0a      	ldr	r4, [pc, #40]	; (800ed14 <__libc_init_array+0x44>)
 800ecea:	1b64      	subs	r4, r4, r5
 800ecec:	10a4      	asrs	r4, r4, #2
 800ecee:	42a6      	cmp	r6, r4
 800ecf0:	d105      	bne.n	800ecfe <__libc_init_array+0x2e>
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	00b3      	lsls	r3, r6, #2
 800ecf6:	58eb      	ldr	r3, [r5, r3]
 800ecf8:	4798      	blx	r3
 800ecfa:	3601      	adds	r6, #1
 800ecfc:	e7ee      	b.n	800ecdc <__libc_init_array+0xc>
 800ecfe:	00b3      	lsls	r3, r6, #2
 800ed00:	58eb      	ldr	r3, [r5, r3]
 800ed02:	4798      	blx	r3
 800ed04:	3601      	adds	r6, #1
 800ed06:	e7f2      	b.n	800ecee <__libc_init_array+0x1e>
 800ed08:	0800fd94 	.word	0x0800fd94
 800ed0c:	0800fd94 	.word	0x0800fd94
 800ed10:	0800fd94 	.word	0x0800fd94
 800ed14:	0800fd98 	.word	0x0800fd98

0800ed18 <memcpy>:
 800ed18:	2300      	movs	r3, #0
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d100      	bne.n	800ed22 <memcpy+0xa>
 800ed20:	bd10      	pop	{r4, pc}
 800ed22:	5ccc      	ldrb	r4, [r1, r3]
 800ed24:	54c4      	strb	r4, [r0, r3]
 800ed26:	3301      	adds	r3, #1
 800ed28:	e7f8      	b.n	800ed1c <memcpy+0x4>

0800ed2a <memset>:
 800ed2a:	0003      	movs	r3, r0
 800ed2c:	1882      	adds	r2, r0, r2
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d100      	bne.n	800ed34 <memset+0xa>
 800ed32:	4770      	bx	lr
 800ed34:	7019      	strb	r1, [r3, #0]
 800ed36:	3301      	adds	r3, #1
 800ed38:	e7f9      	b.n	800ed2e <memset+0x4>
	...

0800ed3c <siprintf>:
 800ed3c:	b40e      	push	{r1, r2, r3}
 800ed3e:	b500      	push	{lr}
 800ed40:	490b      	ldr	r1, [pc, #44]	; (800ed70 <siprintf+0x34>)
 800ed42:	b09c      	sub	sp, #112	; 0x70
 800ed44:	ab1d      	add	r3, sp, #116	; 0x74
 800ed46:	9002      	str	r0, [sp, #8]
 800ed48:	9006      	str	r0, [sp, #24]
 800ed4a:	9107      	str	r1, [sp, #28]
 800ed4c:	9104      	str	r1, [sp, #16]
 800ed4e:	4809      	ldr	r0, [pc, #36]	; (800ed74 <siprintf+0x38>)
 800ed50:	4909      	ldr	r1, [pc, #36]	; (800ed78 <siprintf+0x3c>)
 800ed52:	cb04      	ldmia	r3!, {r2}
 800ed54:	9105      	str	r1, [sp, #20]
 800ed56:	6800      	ldr	r0, [r0, #0]
 800ed58:	a902      	add	r1, sp, #8
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	f000 f870 	bl	800ee40 <_svfiprintf_r>
 800ed60:	2300      	movs	r3, #0
 800ed62:	9a02      	ldr	r2, [sp, #8]
 800ed64:	7013      	strb	r3, [r2, #0]
 800ed66:	b01c      	add	sp, #112	; 0x70
 800ed68:	bc08      	pop	{r3}
 800ed6a:	b003      	add	sp, #12
 800ed6c:	4718      	bx	r3
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	7fffffff 	.word	0x7fffffff
 800ed74:	20000010 	.word	0x20000010
 800ed78:	ffff0208 	.word	0xffff0208

0800ed7c <__ssputs_r>:
 800ed7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7e:	688e      	ldr	r6, [r1, #8]
 800ed80:	b085      	sub	sp, #20
 800ed82:	0007      	movs	r7, r0
 800ed84:	000c      	movs	r4, r1
 800ed86:	9203      	str	r2, [sp, #12]
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	429e      	cmp	r6, r3
 800ed8c:	d83c      	bhi.n	800ee08 <__ssputs_r+0x8c>
 800ed8e:	2390      	movs	r3, #144	; 0x90
 800ed90:	898a      	ldrh	r2, [r1, #12]
 800ed92:	00db      	lsls	r3, r3, #3
 800ed94:	421a      	tst	r2, r3
 800ed96:	d034      	beq.n	800ee02 <__ssputs_r+0x86>
 800ed98:	2503      	movs	r5, #3
 800ed9a:	6909      	ldr	r1, [r1, #16]
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	1a5b      	subs	r3, r3, r1
 800eda0:	9302      	str	r3, [sp, #8]
 800eda2:	6963      	ldr	r3, [r4, #20]
 800eda4:	9802      	ldr	r0, [sp, #8]
 800eda6:	435d      	muls	r5, r3
 800eda8:	0feb      	lsrs	r3, r5, #31
 800edaa:	195d      	adds	r5, r3, r5
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	106d      	asrs	r5, r5, #1
 800edb0:	3301      	adds	r3, #1
 800edb2:	181b      	adds	r3, r3, r0
 800edb4:	42ab      	cmp	r3, r5
 800edb6:	d900      	bls.n	800edba <__ssputs_r+0x3e>
 800edb8:	001d      	movs	r5, r3
 800edba:	0553      	lsls	r3, r2, #21
 800edbc:	d532      	bpl.n	800ee24 <__ssputs_r+0xa8>
 800edbe:	0029      	movs	r1, r5
 800edc0:	0038      	movs	r0, r7
 800edc2:	f000 fb27 	bl	800f414 <_malloc_r>
 800edc6:	1e06      	subs	r6, r0, #0
 800edc8:	d109      	bne.n	800edde <__ssputs_r+0x62>
 800edca:	230c      	movs	r3, #12
 800edcc:	603b      	str	r3, [r7, #0]
 800edce:	2340      	movs	r3, #64	; 0x40
 800edd0:	2001      	movs	r0, #1
 800edd2:	89a2      	ldrh	r2, [r4, #12]
 800edd4:	4240      	negs	r0, r0
 800edd6:	4313      	orrs	r3, r2
 800edd8:	81a3      	strh	r3, [r4, #12]
 800edda:	b005      	add	sp, #20
 800eddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edde:	9a02      	ldr	r2, [sp, #8]
 800ede0:	6921      	ldr	r1, [r4, #16]
 800ede2:	f7ff ff99 	bl	800ed18 <memcpy>
 800ede6:	89a3      	ldrh	r3, [r4, #12]
 800ede8:	4a14      	ldr	r2, [pc, #80]	; (800ee3c <__ssputs_r+0xc0>)
 800edea:	401a      	ands	r2, r3
 800edec:	2380      	movs	r3, #128	; 0x80
 800edee:	4313      	orrs	r3, r2
 800edf0:	81a3      	strh	r3, [r4, #12]
 800edf2:	9b02      	ldr	r3, [sp, #8]
 800edf4:	6126      	str	r6, [r4, #16]
 800edf6:	18f6      	adds	r6, r6, r3
 800edf8:	6026      	str	r6, [r4, #0]
 800edfa:	6165      	str	r5, [r4, #20]
 800edfc:	9e01      	ldr	r6, [sp, #4]
 800edfe:	1aed      	subs	r5, r5, r3
 800ee00:	60a5      	str	r5, [r4, #8]
 800ee02:	9b01      	ldr	r3, [sp, #4]
 800ee04:	429e      	cmp	r6, r3
 800ee06:	d900      	bls.n	800ee0a <__ssputs_r+0x8e>
 800ee08:	9e01      	ldr	r6, [sp, #4]
 800ee0a:	0032      	movs	r2, r6
 800ee0c:	9903      	ldr	r1, [sp, #12]
 800ee0e:	6820      	ldr	r0, [r4, #0]
 800ee10:	f000 faa3 	bl	800f35a <memmove>
 800ee14:	68a3      	ldr	r3, [r4, #8]
 800ee16:	2000      	movs	r0, #0
 800ee18:	1b9b      	subs	r3, r3, r6
 800ee1a:	60a3      	str	r3, [r4, #8]
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	199e      	adds	r6, r3, r6
 800ee20:	6026      	str	r6, [r4, #0]
 800ee22:	e7da      	b.n	800edda <__ssputs_r+0x5e>
 800ee24:	002a      	movs	r2, r5
 800ee26:	0038      	movs	r0, r7
 800ee28:	f000 fb52 	bl	800f4d0 <_realloc_r>
 800ee2c:	1e06      	subs	r6, r0, #0
 800ee2e:	d1e0      	bne.n	800edf2 <__ssputs_r+0x76>
 800ee30:	0038      	movs	r0, r7
 800ee32:	6921      	ldr	r1, [r4, #16]
 800ee34:	f000 faa4 	bl	800f380 <_free_r>
 800ee38:	e7c7      	b.n	800edca <__ssputs_r+0x4e>
 800ee3a:	46c0      	nop			; (mov r8, r8)
 800ee3c:	fffffb7f 	.word	0xfffffb7f

0800ee40 <_svfiprintf_r>:
 800ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee42:	b0a1      	sub	sp, #132	; 0x84
 800ee44:	9003      	str	r0, [sp, #12]
 800ee46:	001d      	movs	r5, r3
 800ee48:	898b      	ldrh	r3, [r1, #12]
 800ee4a:	000f      	movs	r7, r1
 800ee4c:	0016      	movs	r6, r2
 800ee4e:	061b      	lsls	r3, r3, #24
 800ee50:	d511      	bpl.n	800ee76 <_svfiprintf_r+0x36>
 800ee52:	690b      	ldr	r3, [r1, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10e      	bne.n	800ee76 <_svfiprintf_r+0x36>
 800ee58:	2140      	movs	r1, #64	; 0x40
 800ee5a:	f000 fadb 	bl	800f414 <_malloc_r>
 800ee5e:	6038      	str	r0, [r7, #0]
 800ee60:	6138      	str	r0, [r7, #16]
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d105      	bne.n	800ee72 <_svfiprintf_r+0x32>
 800ee66:	230c      	movs	r3, #12
 800ee68:	9a03      	ldr	r2, [sp, #12]
 800ee6a:	3801      	subs	r0, #1
 800ee6c:	6013      	str	r3, [r2, #0]
 800ee6e:	b021      	add	sp, #132	; 0x84
 800ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee72:	2340      	movs	r3, #64	; 0x40
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	2300      	movs	r3, #0
 800ee78:	ac08      	add	r4, sp, #32
 800ee7a:	6163      	str	r3, [r4, #20]
 800ee7c:	3320      	adds	r3, #32
 800ee7e:	7663      	strb	r3, [r4, #25]
 800ee80:	3310      	adds	r3, #16
 800ee82:	76a3      	strb	r3, [r4, #26]
 800ee84:	9507      	str	r5, [sp, #28]
 800ee86:	0035      	movs	r5, r6
 800ee88:	782b      	ldrb	r3, [r5, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <_svfiprintf_r+0x52>
 800ee8e:	2b25      	cmp	r3, #37	; 0x25
 800ee90:	d147      	bne.n	800ef22 <_svfiprintf_r+0xe2>
 800ee92:	1bab      	subs	r3, r5, r6
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	42b5      	cmp	r5, r6
 800ee98:	d00c      	beq.n	800eeb4 <_svfiprintf_r+0x74>
 800ee9a:	0032      	movs	r2, r6
 800ee9c:	0039      	movs	r1, r7
 800ee9e:	9803      	ldr	r0, [sp, #12]
 800eea0:	f7ff ff6c 	bl	800ed7c <__ssputs_r>
 800eea4:	1c43      	adds	r3, r0, #1
 800eea6:	d100      	bne.n	800eeaa <_svfiprintf_r+0x6a>
 800eea8:	e0ae      	b.n	800f008 <_svfiprintf_r+0x1c8>
 800eeaa:	6962      	ldr	r2, [r4, #20]
 800eeac:	9b05      	ldr	r3, [sp, #20]
 800eeae:	4694      	mov	ip, r2
 800eeb0:	4463      	add	r3, ip
 800eeb2:	6163      	str	r3, [r4, #20]
 800eeb4:	782b      	ldrb	r3, [r5, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d100      	bne.n	800eebc <_svfiprintf_r+0x7c>
 800eeba:	e0a5      	b.n	800f008 <_svfiprintf_r+0x1c8>
 800eebc:	2201      	movs	r2, #1
 800eebe:	2300      	movs	r3, #0
 800eec0:	4252      	negs	r2, r2
 800eec2:	6062      	str	r2, [r4, #4]
 800eec4:	a904      	add	r1, sp, #16
 800eec6:	3254      	adds	r2, #84	; 0x54
 800eec8:	1852      	adds	r2, r2, r1
 800eeca:	1c6e      	adds	r6, r5, #1
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	60e3      	str	r3, [r4, #12]
 800eed0:	60a3      	str	r3, [r4, #8]
 800eed2:	7013      	strb	r3, [r2, #0]
 800eed4:	65a3      	str	r3, [r4, #88]	; 0x58
 800eed6:	2205      	movs	r2, #5
 800eed8:	7831      	ldrb	r1, [r6, #0]
 800eeda:	4854      	ldr	r0, [pc, #336]	; (800f02c <_svfiprintf_r+0x1ec>)
 800eedc:	f000 fa32 	bl	800f344 <memchr>
 800eee0:	1c75      	adds	r5, r6, #1
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d11f      	bne.n	800ef26 <_svfiprintf_r+0xe6>
 800eee6:	6822      	ldr	r2, [r4, #0]
 800eee8:	06d3      	lsls	r3, r2, #27
 800eeea:	d504      	bpl.n	800eef6 <_svfiprintf_r+0xb6>
 800eeec:	2353      	movs	r3, #83	; 0x53
 800eeee:	a904      	add	r1, sp, #16
 800eef0:	185b      	adds	r3, r3, r1
 800eef2:	2120      	movs	r1, #32
 800eef4:	7019      	strb	r1, [r3, #0]
 800eef6:	0713      	lsls	r3, r2, #28
 800eef8:	d504      	bpl.n	800ef04 <_svfiprintf_r+0xc4>
 800eefa:	2353      	movs	r3, #83	; 0x53
 800eefc:	a904      	add	r1, sp, #16
 800eefe:	185b      	adds	r3, r3, r1
 800ef00:	212b      	movs	r1, #43	; 0x2b
 800ef02:	7019      	strb	r1, [r3, #0]
 800ef04:	7833      	ldrb	r3, [r6, #0]
 800ef06:	2b2a      	cmp	r3, #42	; 0x2a
 800ef08:	d016      	beq.n	800ef38 <_svfiprintf_r+0xf8>
 800ef0a:	0035      	movs	r5, r6
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	200a      	movs	r0, #10
 800ef10:	68e3      	ldr	r3, [r4, #12]
 800ef12:	782a      	ldrb	r2, [r5, #0]
 800ef14:	1c6e      	adds	r6, r5, #1
 800ef16:	3a30      	subs	r2, #48	; 0x30
 800ef18:	2a09      	cmp	r2, #9
 800ef1a:	d94e      	bls.n	800efba <_svfiprintf_r+0x17a>
 800ef1c:	2900      	cmp	r1, #0
 800ef1e:	d111      	bne.n	800ef44 <_svfiprintf_r+0x104>
 800ef20:	e017      	b.n	800ef52 <_svfiprintf_r+0x112>
 800ef22:	3501      	adds	r5, #1
 800ef24:	e7b0      	b.n	800ee88 <_svfiprintf_r+0x48>
 800ef26:	4b41      	ldr	r3, [pc, #260]	; (800f02c <_svfiprintf_r+0x1ec>)
 800ef28:	6822      	ldr	r2, [r4, #0]
 800ef2a:	1ac0      	subs	r0, r0, r3
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	4083      	lsls	r3, r0
 800ef30:	4313      	orrs	r3, r2
 800ef32:	002e      	movs	r6, r5
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	e7ce      	b.n	800eed6 <_svfiprintf_r+0x96>
 800ef38:	9b07      	ldr	r3, [sp, #28]
 800ef3a:	1d19      	adds	r1, r3, #4
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	9107      	str	r1, [sp, #28]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	db01      	blt.n	800ef48 <_svfiprintf_r+0x108>
 800ef44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef46:	e004      	b.n	800ef52 <_svfiprintf_r+0x112>
 800ef48:	425b      	negs	r3, r3
 800ef4a:	60e3      	str	r3, [r4, #12]
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	782b      	ldrb	r3, [r5, #0]
 800ef54:	2b2e      	cmp	r3, #46	; 0x2e
 800ef56:	d10a      	bne.n	800ef6e <_svfiprintf_r+0x12e>
 800ef58:	786b      	ldrb	r3, [r5, #1]
 800ef5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef5c:	d135      	bne.n	800efca <_svfiprintf_r+0x18a>
 800ef5e:	9b07      	ldr	r3, [sp, #28]
 800ef60:	3502      	adds	r5, #2
 800ef62:	1d1a      	adds	r2, r3, #4
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	9207      	str	r2, [sp, #28]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	db2b      	blt.n	800efc4 <_svfiprintf_r+0x184>
 800ef6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef6e:	4e30      	ldr	r6, [pc, #192]	; (800f030 <_svfiprintf_r+0x1f0>)
 800ef70:	2203      	movs	r2, #3
 800ef72:	0030      	movs	r0, r6
 800ef74:	7829      	ldrb	r1, [r5, #0]
 800ef76:	f000 f9e5 	bl	800f344 <memchr>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d006      	beq.n	800ef8c <_svfiprintf_r+0x14c>
 800ef7e:	2340      	movs	r3, #64	; 0x40
 800ef80:	1b80      	subs	r0, r0, r6
 800ef82:	4083      	lsls	r3, r0
 800ef84:	6822      	ldr	r2, [r4, #0]
 800ef86:	3501      	adds	r5, #1
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	6023      	str	r3, [r4, #0]
 800ef8c:	7829      	ldrb	r1, [r5, #0]
 800ef8e:	2206      	movs	r2, #6
 800ef90:	4828      	ldr	r0, [pc, #160]	; (800f034 <_svfiprintf_r+0x1f4>)
 800ef92:	1c6e      	adds	r6, r5, #1
 800ef94:	7621      	strb	r1, [r4, #24]
 800ef96:	f000 f9d5 	bl	800f344 <memchr>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d03c      	beq.n	800f018 <_svfiprintf_r+0x1d8>
 800ef9e:	4b26      	ldr	r3, [pc, #152]	; (800f038 <_svfiprintf_r+0x1f8>)
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d125      	bne.n	800eff0 <_svfiprintf_r+0x1b0>
 800efa4:	2207      	movs	r2, #7
 800efa6:	9b07      	ldr	r3, [sp, #28]
 800efa8:	3307      	adds	r3, #7
 800efaa:	4393      	bics	r3, r2
 800efac:	3308      	adds	r3, #8
 800efae:	9307      	str	r3, [sp, #28]
 800efb0:	6963      	ldr	r3, [r4, #20]
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	189b      	adds	r3, r3, r2
 800efb6:	6163      	str	r3, [r4, #20]
 800efb8:	e765      	b.n	800ee86 <_svfiprintf_r+0x46>
 800efba:	4343      	muls	r3, r0
 800efbc:	0035      	movs	r5, r6
 800efbe:	2101      	movs	r1, #1
 800efc0:	189b      	adds	r3, r3, r2
 800efc2:	e7a6      	b.n	800ef12 <_svfiprintf_r+0xd2>
 800efc4:	2301      	movs	r3, #1
 800efc6:	425b      	negs	r3, r3
 800efc8:	e7d0      	b.n	800ef6c <_svfiprintf_r+0x12c>
 800efca:	2300      	movs	r3, #0
 800efcc:	200a      	movs	r0, #10
 800efce:	001a      	movs	r2, r3
 800efd0:	3501      	adds	r5, #1
 800efd2:	6063      	str	r3, [r4, #4]
 800efd4:	7829      	ldrb	r1, [r5, #0]
 800efd6:	1c6e      	adds	r6, r5, #1
 800efd8:	3930      	subs	r1, #48	; 0x30
 800efda:	2909      	cmp	r1, #9
 800efdc:	d903      	bls.n	800efe6 <_svfiprintf_r+0x1a6>
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d0c5      	beq.n	800ef6e <_svfiprintf_r+0x12e>
 800efe2:	9209      	str	r2, [sp, #36]	; 0x24
 800efe4:	e7c3      	b.n	800ef6e <_svfiprintf_r+0x12e>
 800efe6:	4342      	muls	r2, r0
 800efe8:	0035      	movs	r5, r6
 800efea:	2301      	movs	r3, #1
 800efec:	1852      	adds	r2, r2, r1
 800efee:	e7f1      	b.n	800efd4 <_svfiprintf_r+0x194>
 800eff0:	ab07      	add	r3, sp, #28
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	003a      	movs	r2, r7
 800eff6:	0021      	movs	r1, r4
 800eff8:	4b10      	ldr	r3, [pc, #64]	; (800f03c <_svfiprintf_r+0x1fc>)
 800effa:	9803      	ldr	r0, [sp, #12]
 800effc:	e000      	b.n	800f000 <_svfiprintf_r+0x1c0>
 800effe:	bf00      	nop
 800f000:	9004      	str	r0, [sp, #16]
 800f002:	9b04      	ldr	r3, [sp, #16]
 800f004:	3301      	adds	r3, #1
 800f006:	d1d3      	bne.n	800efb0 <_svfiprintf_r+0x170>
 800f008:	89bb      	ldrh	r3, [r7, #12]
 800f00a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f00c:	065b      	lsls	r3, r3, #25
 800f00e:	d400      	bmi.n	800f012 <_svfiprintf_r+0x1d2>
 800f010:	e72d      	b.n	800ee6e <_svfiprintf_r+0x2e>
 800f012:	2001      	movs	r0, #1
 800f014:	4240      	negs	r0, r0
 800f016:	e72a      	b.n	800ee6e <_svfiprintf_r+0x2e>
 800f018:	ab07      	add	r3, sp, #28
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	003a      	movs	r2, r7
 800f01e:	0021      	movs	r1, r4
 800f020:	4b06      	ldr	r3, [pc, #24]	; (800f03c <_svfiprintf_r+0x1fc>)
 800f022:	9803      	ldr	r0, [sp, #12]
 800f024:	f000 f87c 	bl	800f120 <_printf_i>
 800f028:	e7ea      	b.n	800f000 <_svfiprintf_r+0x1c0>
 800f02a:	46c0      	nop			; (mov r8, r8)
 800f02c:	0800fd58 	.word	0x0800fd58
 800f030:	0800fd5e 	.word	0x0800fd5e
 800f034:	0800fd62 	.word	0x0800fd62
 800f038:	00000000 	.word	0x00000000
 800f03c:	0800ed7d 	.word	0x0800ed7d

0800f040 <_printf_common>:
 800f040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f042:	0015      	movs	r5, r2
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	688a      	ldr	r2, [r1, #8]
 800f048:	690b      	ldr	r3, [r1, #16]
 800f04a:	000c      	movs	r4, r1
 800f04c:	9000      	str	r0, [sp, #0]
 800f04e:	4293      	cmp	r3, r2
 800f050:	da00      	bge.n	800f054 <_printf_common+0x14>
 800f052:	0013      	movs	r3, r2
 800f054:	0022      	movs	r2, r4
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	3243      	adds	r2, #67	; 0x43
 800f05a:	7812      	ldrb	r2, [r2, #0]
 800f05c:	2a00      	cmp	r2, #0
 800f05e:	d001      	beq.n	800f064 <_printf_common+0x24>
 800f060:	3301      	adds	r3, #1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	6823      	ldr	r3, [r4, #0]
 800f066:	069b      	lsls	r3, r3, #26
 800f068:	d502      	bpl.n	800f070 <_printf_common+0x30>
 800f06a:	682b      	ldr	r3, [r5, #0]
 800f06c:	3302      	adds	r3, #2
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	6822      	ldr	r2, [r4, #0]
 800f072:	2306      	movs	r3, #6
 800f074:	0017      	movs	r7, r2
 800f076:	401f      	ands	r7, r3
 800f078:	421a      	tst	r2, r3
 800f07a:	d027      	beq.n	800f0cc <_printf_common+0x8c>
 800f07c:	0023      	movs	r3, r4
 800f07e:	3343      	adds	r3, #67	; 0x43
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	1e5a      	subs	r2, r3, #1
 800f084:	4193      	sbcs	r3, r2
 800f086:	6822      	ldr	r2, [r4, #0]
 800f088:	0692      	lsls	r2, r2, #26
 800f08a:	d430      	bmi.n	800f0ee <_printf_common+0xae>
 800f08c:	0022      	movs	r2, r4
 800f08e:	9901      	ldr	r1, [sp, #4]
 800f090:	9800      	ldr	r0, [sp, #0]
 800f092:	9e08      	ldr	r6, [sp, #32]
 800f094:	3243      	adds	r2, #67	; 0x43
 800f096:	47b0      	blx	r6
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d025      	beq.n	800f0e8 <_printf_common+0xa8>
 800f09c:	2306      	movs	r3, #6
 800f09e:	6820      	ldr	r0, [r4, #0]
 800f0a0:	682a      	ldr	r2, [r5, #0]
 800f0a2:	68e1      	ldr	r1, [r4, #12]
 800f0a4:	2500      	movs	r5, #0
 800f0a6:	4003      	ands	r3, r0
 800f0a8:	2b04      	cmp	r3, #4
 800f0aa:	d103      	bne.n	800f0b4 <_printf_common+0x74>
 800f0ac:	1a8d      	subs	r5, r1, r2
 800f0ae:	43eb      	mvns	r3, r5
 800f0b0:	17db      	asrs	r3, r3, #31
 800f0b2:	401d      	ands	r5, r3
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	6922      	ldr	r2, [r4, #16]
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	dd01      	ble.n	800f0c0 <_printf_common+0x80>
 800f0bc:	1a9b      	subs	r3, r3, r2
 800f0be:	18ed      	adds	r5, r5, r3
 800f0c0:	2700      	movs	r7, #0
 800f0c2:	42bd      	cmp	r5, r7
 800f0c4:	d120      	bne.n	800f108 <_printf_common+0xc8>
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	e010      	b.n	800f0ec <_printf_common+0xac>
 800f0ca:	3701      	adds	r7, #1
 800f0cc:	68e3      	ldr	r3, [r4, #12]
 800f0ce:	682a      	ldr	r2, [r5, #0]
 800f0d0:	1a9b      	subs	r3, r3, r2
 800f0d2:	42bb      	cmp	r3, r7
 800f0d4:	ddd2      	ble.n	800f07c <_printf_common+0x3c>
 800f0d6:	0022      	movs	r2, r4
 800f0d8:	2301      	movs	r3, #1
 800f0da:	9901      	ldr	r1, [sp, #4]
 800f0dc:	9800      	ldr	r0, [sp, #0]
 800f0de:	9e08      	ldr	r6, [sp, #32]
 800f0e0:	3219      	adds	r2, #25
 800f0e2:	47b0      	blx	r6
 800f0e4:	1c43      	adds	r3, r0, #1
 800f0e6:	d1f0      	bne.n	800f0ca <_printf_common+0x8a>
 800f0e8:	2001      	movs	r0, #1
 800f0ea:	4240      	negs	r0, r0
 800f0ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f0ee:	2030      	movs	r0, #48	; 0x30
 800f0f0:	18e1      	adds	r1, r4, r3
 800f0f2:	3143      	adds	r1, #67	; 0x43
 800f0f4:	7008      	strb	r0, [r1, #0]
 800f0f6:	0021      	movs	r1, r4
 800f0f8:	1c5a      	adds	r2, r3, #1
 800f0fa:	3145      	adds	r1, #69	; 0x45
 800f0fc:	7809      	ldrb	r1, [r1, #0]
 800f0fe:	18a2      	adds	r2, r4, r2
 800f100:	3243      	adds	r2, #67	; 0x43
 800f102:	3302      	adds	r3, #2
 800f104:	7011      	strb	r1, [r2, #0]
 800f106:	e7c1      	b.n	800f08c <_printf_common+0x4c>
 800f108:	0022      	movs	r2, r4
 800f10a:	2301      	movs	r3, #1
 800f10c:	9901      	ldr	r1, [sp, #4]
 800f10e:	9800      	ldr	r0, [sp, #0]
 800f110:	9e08      	ldr	r6, [sp, #32]
 800f112:	321a      	adds	r2, #26
 800f114:	47b0      	blx	r6
 800f116:	1c43      	adds	r3, r0, #1
 800f118:	d0e6      	beq.n	800f0e8 <_printf_common+0xa8>
 800f11a:	3701      	adds	r7, #1
 800f11c:	e7d1      	b.n	800f0c2 <_printf_common+0x82>
	...

0800f120 <_printf_i>:
 800f120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f122:	b08b      	sub	sp, #44	; 0x2c
 800f124:	9206      	str	r2, [sp, #24]
 800f126:	000a      	movs	r2, r1
 800f128:	3243      	adds	r2, #67	; 0x43
 800f12a:	9307      	str	r3, [sp, #28]
 800f12c:	9005      	str	r0, [sp, #20]
 800f12e:	9204      	str	r2, [sp, #16]
 800f130:	7e0a      	ldrb	r2, [r1, #24]
 800f132:	000c      	movs	r4, r1
 800f134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f136:	2a78      	cmp	r2, #120	; 0x78
 800f138:	d806      	bhi.n	800f148 <_printf_i+0x28>
 800f13a:	2a62      	cmp	r2, #98	; 0x62
 800f13c:	d808      	bhi.n	800f150 <_printf_i+0x30>
 800f13e:	2a00      	cmp	r2, #0
 800f140:	d100      	bne.n	800f144 <_printf_i+0x24>
 800f142:	e0c0      	b.n	800f2c6 <_printf_i+0x1a6>
 800f144:	2a58      	cmp	r2, #88	; 0x58
 800f146:	d052      	beq.n	800f1ee <_printf_i+0xce>
 800f148:	0026      	movs	r6, r4
 800f14a:	3642      	adds	r6, #66	; 0x42
 800f14c:	7032      	strb	r2, [r6, #0]
 800f14e:	e022      	b.n	800f196 <_printf_i+0x76>
 800f150:	0010      	movs	r0, r2
 800f152:	3863      	subs	r0, #99	; 0x63
 800f154:	2815      	cmp	r0, #21
 800f156:	d8f7      	bhi.n	800f148 <_printf_i+0x28>
 800f158:	f7f0 ffd6 	bl	8000108 <__gnu_thumb1_case_shi>
 800f15c:	001f0016 	.word	0x001f0016
 800f160:	fff6fff6 	.word	0xfff6fff6
 800f164:	fff6fff6 	.word	0xfff6fff6
 800f168:	fff6001f 	.word	0xfff6001f
 800f16c:	fff6fff6 	.word	0xfff6fff6
 800f170:	00a8fff6 	.word	0x00a8fff6
 800f174:	009a0036 	.word	0x009a0036
 800f178:	fff6fff6 	.word	0xfff6fff6
 800f17c:	fff600b9 	.word	0xfff600b9
 800f180:	fff60036 	.word	0xfff60036
 800f184:	009efff6 	.word	0x009efff6
 800f188:	0026      	movs	r6, r4
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	3642      	adds	r6, #66	; 0x42
 800f18e:	1d11      	adds	r1, r2, #4
 800f190:	6019      	str	r1, [r3, #0]
 800f192:	6813      	ldr	r3, [r2, #0]
 800f194:	7033      	strb	r3, [r6, #0]
 800f196:	2301      	movs	r3, #1
 800f198:	e0a7      	b.n	800f2ea <_printf_i+0x1ca>
 800f19a:	6808      	ldr	r0, [r1, #0]
 800f19c:	6819      	ldr	r1, [r3, #0]
 800f19e:	1d0a      	adds	r2, r1, #4
 800f1a0:	0605      	lsls	r5, r0, #24
 800f1a2:	d50b      	bpl.n	800f1bc <_printf_i+0x9c>
 800f1a4:	680d      	ldr	r5, [r1, #0]
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	2d00      	cmp	r5, #0
 800f1aa:	da03      	bge.n	800f1b4 <_printf_i+0x94>
 800f1ac:	232d      	movs	r3, #45	; 0x2d
 800f1ae:	9a04      	ldr	r2, [sp, #16]
 800f1b0:	426d      	negs	r5, r5
 800f1b2:	7013      	strb	r3, [r2, #0]
 800f1b4:	4b61      	ldr	r3, [pc, #388]	; (800f33c <_printf_i+0x21c>)
 800f1b6:	270a      	movs	r7, #10
 800f1b8:	9303      	str	r3, [sp, #12]
 800f1ba:	e032      	b.n	800f222 <_printf_i+0x102>
 800f1bc:	680d      	ldr	r5, [r1, #0]
 800f1be:	601a      	str	r2, [r3, #0]
 800f1c0:	0641      	lsls	r1, r0, #25
 800f1c2:	d5f1      	bpl.n	800f1a8 <_printf_i+0x88>
 800f1c4:	b22d      	sxth	r5, r5
 800f1c6:	e7ef      	b.n	800f1a8 <_printf_i+0x88>
 800f1c8:	680d      	ldr	r5, [r1, #0]
 800f1ca:	6819      	ldr	r1, [r3, #0]
 800f1cc:	1d08      	adds	r0, r1, #4
 800f1ce:	6018      	str	r0, [r3, #0]
 800f1d0:	062e      	lsls	r6, r5, #24
 800f1d2:	d501      	bpl.n	800f1d8 <_printf_i+0xb8>
 800f1d4:	680d      	ldr	r5, [r1, #0]
 800f1d6:	e003      	b.n	800f1e0 <_printf_i+0xc0>
 800f1d8:	066d      	lsls	r5, r5, #25
 800f1da:	d5fb      	bpl.n	800f1d4 <_printf_i+0xb4>
 800f1dc:	680d      	ldr	r5, [r1, #0]
 800f1de:	b2ad      	uxth	r5, r5
 800f1e0:	4b56      	ldr	r3, [pc, #344]	; (800f33c <_printf_i+0x21c>)
 800f1e2:	270a      	movs	r7, #10
 800f1e4:	9303      	str	r3, [sp, #12]
 800f1e6:	2a6f      	cmp	r2, #111	; 0x6f
 800f1e8:	d117      	bne.n	800f21a <_printf_i+0xfa>
 800f1ea:	2708      	movs	r7, #8
 800f1ec:	e015      	b.n	800f21a <_printf_i+0xfa>
 800f1ee:	3145      	adds	r1, #69	; 0x45
 800f1f0:	700a      	strb	r2, [r1, #0]
 800f1f2:	4a52      	ldr	r2, [pc, #328]	; (800f33c <_printf_i+0x21c>)
 800f1f4:	9203      	str	r2, [sp, #12]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	6821      	ldr	r1, [r4, #0]
 800f1fa:	ca20      	ldmia	r2!, {r5}
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	0608      	lsls	r0, r1, #24
 800f200:	d550      	bpl.n	800f2a4 <_printf_i+0x184>
 800f202:	07cb      	lsls	r3, r1, #31
 800f204:	d502      	bpl.n	800f20c <_printf_i+0xec>
 800f206:	2320      	movs	r3, #32
 800f208:	4319      	orrs	r1, r3
 800f20a:	6021      	str	r1, [r4, #0]
 800f20c:	2710      	movs	r7, #16
 800f20e:	2d00      	cmp	r5, #0
 800f210:	d103      	bne.n	800f21a <_printf_i+0xfa>
 800f212:	2320      	movs	r3, #32
 800f214:	6822      	ldr	r2, [r4, #0]
 800f216:	439a      	bics	r2, r3
 800f218:	6022      	str	r2, [r4, #0]
 800f21a:	0023      	movs	r3, r4
 800f21c:	2200      	movs	r2, #0
 800f21e:	3343      	adds	r3, #67	; 0x43
 800f220:	701a      	strb	r2, [r3, #0]
 800f222:	6863      	ldr	r3, [r4, #4]
 800f224:	60a3      	str	r3, [r4, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	db03      	blt.n	800f232 <_printf_i+0x112>
 800f22a:	2204      	movs	r2, #4
 800f22c:	6821      	ldr	r1, [r4, #0]
 800f22e:	4391      	bics	r1, r2
 800f230:	6021      	str	r1, [r4, #0]
 800f232:	2d00      	cmp	r5, #0
 800f234:	d102      	bne.n	800f23c <_printf_i+0x11c>
 800f236:	9e04      	ldr	r6, [sp, #16]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00c      	beq.n	800f256 <_printf_i+0x136>
 800f23c:	9e04      	ldr	r6, [sp, #16]
 800f23e:	0028      	movs	r0, r5
 800f240:	0039      	movs	r1, r7
 800f242:	f7f0 fff1 	bl	8000228 <__aeabi_uidivmod>
 800f246:	9b03      	ldr	r3, [sp, #12]
 800f248:	3e01      	subs	r6, #1
 800f24a:	5c5b      	ldrb	r3, [r3, r1]
 800f24c:	7033      	strb	r3, [r6, #0]
 800f24e:	002b      	movs	r3, r5
 800f250:	0005      	movs	r5, r0
 800f252:	429f      	cmp	r7, r3
 800f254:	d9f3      	bls.n	800f23e <_printf_i+0x11e>
 800f256:	2f08      	cmp	r7, #8
 800f258:	d109      	bne.n	800f26e <_printf_i+0x14e>
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	07db      	lsls	r3, r3, #31
 800f25e:	d506      	bpl.n	800f26e <_printf_i+0x14e>
 800f260:	6863      	ldr	r3, [r4, #4]
 800f262:	6922      	ldr	r2, [r4, #16]
 800f264:	4293      	cmp	r3, r2
 800f266:	dc02      	bgt.n	800f26e <_printf_i+0x14e>
 800f268:	2330      	movs	r3, #48	; 0x30
 800f26a:	3e01      	subs	r6, #1
 800f26c:	7033      	strb	r3, [r6, #0]
 800f26e:	9b04      	ldr	r3, [sp, #16]
 800f270:	1b9b      	subs	r3, r3, r6
 800f272:	6123      	str	r3, [r4, #16]
 800f274:	9b07      	ldr	r3, [sp, #28]
 800f276:	0021      	movs	r1, r4
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	9805      	ldr	r0, [sp, #20]
 800f27c:	9b06      	ldr	r3, [sp, #24]
 800f27e:	aa09      	add	r2, sp, #36	; 0x24
 800f280:	f7ff fede 	bl	800f040 <_printf_common>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d135      	bne.n	800f2f4 <_printf_i+0x1d4>
 800f288:	2001      	movs	r0, #1
 800f28a:	4240      	negs	r0, r0
 800f28c:	b00b      	add	sp, #44	; 0x2c
 800f28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f290:	2220      	movs	r2, #32
 800f292:	6809      	ldr	r1, [r1, #0]
 800f294:	430a      	orrs	r2, r1
 800f296:	6022      	str	r2, [r4, #0]
 800f298:	0022      	movs	r2, r4
 800f29a:	2178      	movs	r1, #120	; 0x78
 800f29c:	3245      	adds	r2, #69	; 0x45
 800f29e:	7011      	strb	r1, [r2, #0]
 800f2a0:	4a27      	ldr	r2, [pc, #156]	; (800f340 <_printf_i+0x220>)
 800f2a2:	e7a7      	b.n	800f1f4 <_printf_i+0xd4>
 800f2a4:	0648      	lsls	r0, r1, #25
 800f2a6:	d5ac      	bpl.n	800f202 <_printf_i+0xe2>
 800f2a8:	b2ad      	uxth	r5, r5
 800f2aa:	e7aa      	b.n	800f202 <_printf_i+0xe2>
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	680d      	ldr	r5, [r1, #0]
 800f2b0:	1d10      	adds	r0, r2, #4
 800f2b2:	6949      	ldr	r1, [r1, #20]
 800f2b4:	6018      	str	r0, [r3, #0]
 800f2b6:	6813      	ldr	r3, [r2, #0]
 800f2b8:	062e      	lsls	r6, r5, #24
 800f2ba:	d501      	bpl.n	800f2c0 <_printf_i+0x1a0>
 800f2bc:	6019      	str	r1, [r3, #0]
 800f2be:	e002      	b.n	800f2c6 <_printf_i+0x1a6>
 800f2c0:	066d      	lsls	r5, r5, #25
 800f2c2:	d5fb      	bpl.n	800f2bc <_printf_i+0x19c>
 800f2c4:	8019      	strh	r1, [r3, #0]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9e04      	ldr	r6, [sp, #16]
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	e7d2      	b.n	800f274 <_printf_i+0x154>
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	1d11      	adds	r1, r2, #4
 800f2d2:	6019      	str	r1, [r3, #0]
 800f2d4:	6816      	ldr	r6, [r2, #0]
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	0030      	movs	r0, r6
 800f2da:	6862      	ldr	r2, [r4, #4]
 800f2dc:	f000 f832 	bl	800f344 <memchr>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d001      	beq.n	800f2e8 <_printf_i+0x1c8>
 800f2e4:	1b80      	subs	r0, r0, r6
 800f2e6:	6060      	str	r0, [r4, #4]
 800f2e8:	6863      	ldr	r3, [r4, #4]
 800f2ea:	6123      	str	r3, [r4, #16]
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9a04      	ldr	r2, [sp, #16]
 800f2f0:	7013      	strb	r3, [r2, #0]
 800f2f2:	e7bf      	b.n	800f274 <_printf_i+0x154>
 800f2f4:	6923      	ldr	r3, [r4, #16]
 800f2f6:	0032      	movs	r2, r6
 800f2f8:	9906      	ldr	r1, [sp, #24]
 800f2fa:	9805      	ldr	r0, [sp, #20]
 800f2fc:	9d07      	ldr	r5, [sp, #28]
 800f2fe:	47a8      	blx	r5
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d0c1      	beq.n	800f288 <_printf_i+0x168>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	079b      	lsls	r3, r3, #30
 800f308:	d415      	bmi.n	800f336 <_printf_i+0x216>
 800f30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f30c:	68e0      	ldr	r0, [r4, #12]
 800f30e:	4298      	cmp	r0, r3
 800f310:	dabc      	bge.n	800f28c <_printf_i+0x16c>
 800f312:	0018      	movs	r0, r3
 800f314:	e7ba      	b.n	800f28c <_printf_i+0x16c>
 800f316:	0022      	movs	r2, r4
 800f318:	2301      	movs	r3, #1
 800f31a:	9906      	ldr	r1, [sp, #24]
 800f31c:	9805      	ldr	r0, [sp, #20]
 800f31e:	9e07      	ldr	r6, [sp, #28]
 800f320:	3219      	adds	r2, #25
 800f322:	47b0      	blx	r6
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d0af      	beq.n	800f288 <_printf_i+0x168>
 800f328:	3501      	adds	r5, #1
 800f32a:	68e3      	ldr	r3, [r4, #12]
 800f32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f32e:	1a9b      	subs	r3, r3, r2
 800f330:	42ab      	cmp	r3, r5
 800f332:	dcf0      	bgt.n	800f316 <_printf_i+0x1f6>
 800f334:	e7e9      	b.n	800f30a <_printf_i+0x1ea>
 800f336:	2500      	movs	r5, #0
 800f338:	e7f7      	b.n	800f32a <_printf_i+0x20a>
 800f33a:	46c0      	nop			; (mov r8, r8)
 800f33c:	0800fd69 	.word	0x0800fd69
 800f340:	0800fd7a 	.word	0x0800fd7a

0800f344 <memchr>:
 800f344:	b2c9      	uxtb	r1, r1
 800f346:	1882      	adds	r2, r0, r2
 800f348:	4290      	cmp	r0, r2
 800f34a:	d101      	bne.n	800f350 <memchr+0xc>
 800f34c:	2000      	movs	r0, #0
 800f34e:	4770      	bx	lr
 800f350:	7803      	ldrb	r3, [r0, #0]
 800f352:	428b      	cmp	r3, r1
 800f354:	d0fb      	beq.n	800f34e <memchr+0xa>
 800f356:	3001      	adds	r0, #1
 800f358:	e7f6      	b.n	800f348 <memchr+0x4>

0800f35a <memmove>:
 800f35a:	b510      	push	{r4, lr}
 800f35c:	4288      	cmp	r0, r1
 800f35e:	d902      	bls.n	800f366 <memmove+0xc>
 800f360:	188b      	adds	r3, r1, r2
 800f362:	4298      	cmp	r0, r3
 800f364:	d303      	bcc.n	800f36e <memmove+0x14>
 800f366:	2300      	movs	r3, #0
 800f368:	e007      	b.n	800f37a <memmove+0x20>
 800f36a:	5c8b      	ldrb	r3, [r1, r2]
 800f36c:	5483      	strb	r3, [r0, r2]
 800f36e:	3a01      	subs	r2, #1
 800f370:	d2fb      	bcs.n	800f36a <memmove+0x10>
 800f372:	bd10      	pop	{r4, pc}
 800f374:	5ccc      	ldrb	r4, [r1, r3]
 800f376:	54c4      	strb	r4, [r0, r3]
 800f378:	3301      	adds	r3, #1
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d1fa      	bne.n	800f374 <memmove+0x1a>
 800f37e:	e7f8      	b.n	800f372 <memmove+0x18>

0800f380 <_free_r>:
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	0005      	movs	r5, r0
 800f384:	2900      	cmp	r1, #0
 800f386:	d010      	beq.n	800f3aa <_free_r+0x2a>
 800f388:	1f0c      	subs	r4, r1, #4
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	da00      	bge.n	800f392 <_free_r+0x12>
 800f390:	18e4      	adds	r4, r4, r3
 800f392:	0028      	movs	r0, r5
 800f394:	f000 f8d4 	bl	800f540 <__malloc_lock>
 800f398:	4a1d      	ldr	r2, [pc, #116]	; (800f410 <_free_r+0x90>)
 800f39a:	6813      	ldr	r3, [r2, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d105      	bne.n	800f3ac <_free_r+0x2c>
 800f3a0:	6063      	str	r3, [r4, #4]
 800f3a2:	6014      	str	r4, [r2, #0]
 800f3a4:	0028      	movs	r0, r5
 800f3a6:	f000 f8d3 	bl	800f550 <__malloc_unlock>
 800f3aa:	bd70      	pop	{r4, r5, r6, pc}
 800f3ac:	42a3      	cmp	r3, r4
 800f3ae:	d908      	bls.n	800f3c2 <_free_r+0x42>
 800f3b0:	6821      	ldr	r1, [r4, #0]
 800f3b2:	1860      	adds	r0, r4, r1
 800f3b4:	4283      	cmp	r3, r0
 800f3b6:	d1f3      	bne.n	800f3a0 <_free_r+0x20>
 800f3b8:	6818      	ldr	r0, [r3, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	1841      	adds	r1, r0, r1
 800f3be:	6021      	str	r1, [r4, #0]
 800f3c0:	e7ee      	b.n	800f3a0 <_free_r+0x20>
 800f3c2:	001a      	movs	r2, r3
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <_free_r+0x4e>
 800f3ca:	42a3      	cmp	r3, r4
 800f3cc:	d9f9      	bls.n	800f3c2 <_free_r+0x42>
 800f3ce:	6811      	ldr	r1, [r2, #0]
 800f3d0:	1850      	adds	r0, r2, r1
 800f3d2:	42a0      	cmp	r0, r4
 800f3d4:	d10b      	bne.n	800f3ee <_free_r+0x6e>
 800f3d6:	6820      	ldr	r0, [r4, #0]
 800f3d8:	1809      	adds	r1, r1, r0
 800f3da:	1850      	adds	r0, r2, r1
 800f3dc:	6011      	str	r1, [r2, #0]
 800f3de:	4283      	cmp	r3, r0
 800f3e0:	d1e0      	bne.n	800f3a4 <_free_r+0x24>
 800f3e2:	6818      	ldr	r0, [r3, #0]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	1841      	adds	r1, r0, r1
 800f3e8:	6011      	str	r1, [r2, #0]
 800f3ea:	6053      	str	r3, [r2, #4]
 800f3ec:	e7da      	b.n	800f3a4 <_free_r+0x24>
 800f3ee:	42a0      	cmp	r0, r4
 800f3f0:	d902      	bls.n	800f3f8 <_free_r+0x78>
 800f3f2:	230c      	movs	r3, #12
 800f3f4:	602b      	str	r3, [r5, #0]
 800f3f6:	e7d5      	b.n	800f3a4 <_free_r+0x24>
 800f3f8:	6821      	ldr	r1, [r4, #0]
 800f3fa:	1860      	adds	r0, r4, r1
 800f3fc:	4283      	cmp	r3, r0
 800f3fe:	d103      	bne.n	800f408 <_free_r+0x88>
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	1841      	adds	r1, r0, r1
 800f406:	6021      	str	r1, [r4, #0]
 800f408:	6063      	str	r3, [r4, #4]
 800f40a:	6054      	str	r4, [r2, #4]
 800f40c:	e7ca      	b.n	800f3a4 <_free_r+0x24>
 800f40e:	46c0      	nop			; (mov r8, r8)
 800f410:	20000148 	.word	0x20000148

0800f414 <_malloc_r>:
 800f414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f416:	2303      	movs	r3, #3
 800f418:	1ccd      	adds	r5, r1, #3
 800f41a:	439d      	bics	r5, r3
 800f41c:	3508      	adds	r5, #8
 800f41e:	0006      	movs	r6, r0
 800f420:	2d0c      	cmp	r5, #12
 800f422:	d21f      	bcs.n	800f464 <_malloc_r+0x50>
 800f424:	250c      	movs	r5, #12
 800f426:	42a9      	cmp	r1, r5
 800f428:	d81e      	bhi.n	800f468 <_malloc_r+0x54>
 800f42a:	0030      	movs	r0, r6
 800f42c:	f000 f888 	bl	800f540 <__malloc_lock>
 800f430:	4925      	ldr	r1, [pc, #148]	; (800f4c8 <_malloc_r+0xb4>)
 800f432:	680a      	ldr	r2, [r1, #0]
 800f434:	0014      	movs	r4, r2
 800f436:	2c00      	cmp	r4, #0
 800f438:	d11a      	bne.n	800f470 <_malloc_r+0x5c>
 800f43a:	4f24      	ldr	r7, [pc, #144]	; (800f4cc <_malloc_r+0xb8>)
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d104      	bne.n	800f44c <_malloc_r+0x38>
 800f442:	0021      	movs	r1, r4
 800f444:	0030      	movs	r0, r6
 800f446:	f000 f869 	bl	800f51c <_sbrk_r>
 800f44a:	6038      	str	r0, [r7, #0]
 800f44c:	0029      	movs	r1, r5
 800f44e:	0030      	movs	r0, r6
 800f450:	f000 f864 	bl	800f51c <_sbrk_r>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d12b      	bne.n	800f4b0 <_malloc_r+0x9c>
 800f458:	230c      	movs	r3, #12
 800f45a:	0030      	movs	r0, r6
 800f45c:	6033      	str	r3, [r6, #0]
 800f45e:	f000 f877 	bl	800f550 <__malloc_unlock>
 800f462:	e003      	b.n	800f46c <_malloc_r+0x58>
 800f464:	2d00      	cmp	r5, #0
 800f466:	dade      	bge.n	800f426 <_malloc_r+0x12>
 800f468:	230c      	movs	r3, #12
 800f46a:	6033      	str	r3, [r6, #0]
 800f46c:	2000      	movs	r0, #0
 800f46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	1b5b      	subs	r3, r3, r5
 800f474:	d419      	bmi.n	800f4aa <_malloc_r+0x96>
 800f476:	2b0b      	cmp	r3, #11
 800f478:	d903      	bls.n	800f482 <_malloc_r+0x6e>
 800f47a:	6023      	str	r3, [r4, #0]
 800f47c:	18e4      	adds	r4, r4, r3
 800f47e:	6025      	str	r5, [r4, #0]
 800f480:	e003      	b.n	800f48a <_malloc_r+0x76>
 800f482:	6863      	ldr	r3, [r4, #4]
 800f484:	42a2      	cmp	r2, r4
 800f486:	d10e      	bne.n	800f4a6 <_malloc_r+0x92>
 800f488:	600b      	str	r3, [r1, #0]
 800f48a:	0030      	movs	r0, r6
 800f48c:	f000 f860 	bl	800f550 <__malloc_unlock>
 800f490:	0020      	movs	r0, r4
 800f492:	2207      	movs	r2, #7
 800f494:	300b      	adds	r0, #11
 800f496:	1d23      	adds	r3, r4, #4
 800f498:	4390      	bics	r0, r2
 800f49a:	1ac2      	subs	r2, r0, r3
 800f49c:	4298      	cmp	r0, r3
 800f49e:	d0e6      	beq.n	800f46e <_malloc_r+0x5a>
 800f4a0:	1a1b      	subs	r3, r3, r0
 800f4a2:	50a3      	str	r3, [r4, r2]
 800f4a4:	e7e3      	b.n	800f46e <_malloc_r+0x5a>
 800f4a6:	6053      	str	r3, [r2, #4]
 800f4a8:	e7ef      	b.n	800f48a <_malloc_r+0x76>
 800f4aa:	0022      	movs	r2, r4
 800f4ac:	6864      	ldr	r4, [r4, #4]
 800f4ae:	e7c2      	b.n	800f436 <_malloc_r+0x22>
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	1cc4      	adds	r4, r0, #3
 800f4b4:	439c      	bics	r4, r3
 800f4b6:	42a0      	cmp	r0, r4
 800f4b8:	d0e1      	beq.n	800f47e <_malloc_r+0x6a>
 800f4ba:	1a21      	subs	r1, r4, r0
 800f4bc:	0030      	movs	r0, r6
 800f4be:	f000 f82d 	bl	800f51c <_sbrk_r>
 800f4c2:	1c43      	adds	r3, r0, #1
 800f4c4:	d1db      	bne.n	800f47e <_malloc_r+0x6a>
 800f4c6:	e7c7      	b.n	800f458 <_malloc_r+0x44>
 800f4c8:	20000148 	.word	0x20000148
 800f4cc:	2000014c 	.word	0x2000014c

0800f4d0 <_realloc_r>:
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	0007      	movs	r7, r0
 800f4d4:	000d      	movs	r5, r1
 800f4d6:	0016      	movs	r6, r2
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	d105      	bne.n	800f4e8 <_realloc_r+0x18>
 800f4dc:	0011      	movs	r1, r2
 800f4de:	f7ff ff99 	bl	800f414 <_malloc_r>
 800f4e2:	0004      	movs	r4, r0
 800f4e4:	0020      	movs	r0, r4
 800f4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e8:	2a00      	cmp	r2, #0
 800f4ea:	d103      	bne.n	800f4f4 <_realloc_r+0x24>
 800f4ec:	f7ff ff48 	bl	800f380 <_free_r>
 800f4f0:	0034      	movs	r4, r6
 800f4f2:	e7f7      	b.n	800f4e4 <_realloc_r+0x14>
 800f4f4:	f000 f834 	bl	800f560 <_malloc_usable_size_r>
 800f4f8:	002c      	movs	r4, r5
 800f4fa:	42b0      	cmp	r0, r6
 800f4fc:	d2f2      	bcs.n	800f4e4 <_realloc_r+0x14>
 800f4fe:	0031      	movs	r1, r6
 800f500:	0038      	movs	r0, r7
 800f502:	f7ff ff87 	bl	800f414 <_malloc_r>
 800f506:	1e04      	subs	r4, r0, #0
 800f508:	d0ec      	beq.n	800f4e4 <_realloc_r+0x14>
 800f50a:	0029      	movs	r1, r5
 800f50c:	0032      	movs	r2, r6
 800f50e:	f7ff fc03 	bl	800ed18 <memcpy>
 800f512:	0029      	movs	r1, r5
 800f514:	0038      	movs	r0, r7
 800f516:	f7ff ff33 	bl	800f380 <_free_r>
 800f51a:	e7e3      	b.n	800f4e4 <_realloc_r+0x14>

0800f51c <_sbrk_r>:
 800f51c:	2300      	movs	r3, #0
 800f51e:	b570      	push	{r4, r5, r6, lr}
 800f520:	4d06      	ldr	r5, [pc, #24]	; (800f53c <_sbrk_r+0x20>)
 800f522:	0004      	movs	r4, r0
 800f524:	0008      	movs	r0, r1
 800f526:	602b      	str	r3, [r5, #0]
 800f528:	f7ff fb66 	bl	800ebf8 <_sbrk>
 800f52c:	1c43      	adds	r3, r0, #1
 800f52e:	d103      	bne.n	800f538 <_sbrk_r+0x1c>
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d000      	beq.n	800f538 <_sbrk_r+0x1c>
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	bd70      	pop	{r4, r5, r6, pc}
 800f53a:	46c0      	nop			; (mov r8, r8)
 800f53c:	20000634 	.word	0x20000634

0800f540 <__malloc_lock>:
 800f540:	b510      	push	{r4, lr}
 800f542:	4802      	ldr	r0, [pc, #8]	; (800f54c <__malloc_lock+0xc>)
 800f544:	f000 f814 	bl	800f570 <__retarget_lock_acquire_recursive>
 800f548:	bd10      	pop	{r4, pc}
 800f54a:	46c0      	nop			; (mov r8, r8)
 800f54c:	2000063c 	.word	0x2000063c

0800f550 <__malloc_unlock>:
 800f550:	b510      	push	{r4, lr}
 800f552:	4802      	ldr	r0, [pc, #8]	; (800f55c <__malloc_unlock+0xc>)
 800f554:	f000 f80d 	bl	800f572 <__retarget_lock_release_recursive>
 800f558:	bd10      	pop	{r4, pc}
 800f55a:	46c0      	nop			; (mov r8, r8)
 800f55c:	2000063c 	.word	0x2000063c

0800f560 <_malloc_usable_size_r>:
 800f560:	1f0b      	subs	r3, r1, #4
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	1f18      	subs	r0, r3, #4
 800f566:	2b00      	cmp	r3, #0
 800f568:	da01      	bge.n	800f56e <_malloc_usable_size_r+0xe>
 800f56a:	580b      	ldr	r3, [r1, r0]
 800f56c:	18c0      	adds	r0, r0, r3
 800f56e:	4770      	bx	lr

0800f570 <__retarget_lock_acquire_recursive>:
 800f570:	4770      	bx	lr

0800f572 <__retarget_lock_release_recursive>:
 800f572:	4770      	bx	lr

0800f574 <log>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	0004      	movs	r4, r0
 800f578:	000d      	movs	r5, r1
 800f57a:	f000 f839 	bl	800f5f0 <__ieee754_log>
 800f57e:	4b19      	ldr	r3, [pc, #100]	; (800f5e4 <log+0x70>)
 800f580:	0006      	movs	r6, r0
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	000f      	movs	r7, r1
 800f586:	b25b      	sxtb	r3, r3
 800f588:	3301      	adds	r3, #1
 800f58a:	d01d      	beq.n	800f5c8 <log+0x54>
 800f58c:	0022      	movs	r2, r4
 800f58e:	002b      	movs	r3, r5
 800f590:	0020      	movs	r0, r4
 800f592:	0029      	movs	r1, r5
 800f594:	f7f3 fc7e 	bl	8002e94 <__aeabi_dcmpun>
 800f598:	2800      	cmp	r0, #0
 800f59a:	d115      	bne.n	800f5c8 <log+0x54>
 800f59c:	2200      	movs	r2, #0
 800f59e:	2300      	movs	r3, #0
 800f5a0:	0020      	movs	r0, r4
 800f5a2:	0029      	movs	r1, r5
 800f5a4:	f7f0 ff5a 	bl	800045c <__aeabi_dcmpgt>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d10d      	bne.n	800f5c8 <log+0x54>
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	0020      	movs	r0, r4
 800f5b2:	0029      	movs	r1, r5
 800f5b4:	f7f0 ff38 	bl	8000428 <__aeabi_dcmpeq>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d008      	beq.n	800f5ce <log+0x5a>
 800f5bc:	f7ff fb82 	bl	800ecc4 <__errno>
 800f5c0:	2322      	movs	r3, #34	; 0x22
 800f5c2:	2600      	movs	r6, #0
 800f5c4:	4f08      	ldr	r7, [pc, #32]	; (800f5e8 <log+0x74>)
 800f5c6:	6003      	str	r3, [r0, #0]
 800f5c8:	0030      	movs	r0, r6
 800f5ca:	0039      	movs	r1, r7
 800f5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ce:	f7ff fb79 	bl	800ecc4 <__errno>
 800f5d2:	2321      	movs	r3, #33	; 0x21
 800f5d4:	6003      	str	r3, [r0, #0]
 800f5d6:	4805      	ldr	r0, [pc, #20]	; (800f5ec <log+0x78>)
 800f5d8:	f000 f9ba 	bl	800f950 <nan>
 800f5dc:	0006      	movs	r6, r0
 800f5de:	000f      	movs	r7, r1
 800f5e0:	e7f2      	b.n	800f5c8 <log+0x54>
 800f5e2:	46c0      	nop			; (mov r8, r8)
 800f5e4:	20000074 	.word	0x20000074
 800f5e8:	fff00000 	.word	0xfff00000
 800f5ec:	0800fd5d 	.word	0x0800fd5d

0800f5f0 <__ieee754_log>:
 800f5f0:	2280      	movs	r2, #128	; 0x80
 800f5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5f4:	000b      	movs	r3, r1
 800f5f6:	b08d      	sub	sp, #52	; 0x34
 800f5f8:	0352      	lsls	r2, r2, #13
 800f5fa:	4291      	cmp	r1, r2
 800f5fc:	da22      	bge.n	800f644 <__ieee754_log+0x54>
 800f5fe:	004a      	lsls	r2, r1, #1
 800f600:	0852      	lsrs	r2, r2, #1
 800f602:	4302      	orrs	r2, r0
 800f604:	d107      	bne.n	800f616 <__ieee754_log+0x26>
 800f606:	2200      	movs	r2, #0
 800f608:	2300      	movs	r3, #0
 800f60a:	2000      	movs	r0, #0
 800f60c:	49b3      	ldr	r1, [pc, #716]	; (800f8dc <__ieee754_log+0x2ec>)
 800f60e:	f7f2 fa3d 	bl	8001a8c <__aeabi_ddiv>
 800f612:	b00d      	add	sp, #52	; 0x34
 800f614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f616:	2900      	cmp	r1, #0
 800f618:	da05      	bge.n	800f626 <__ieee754_log+0x36>
 800f61a:	0002      	movs	r2, r0
 800f61c:	f7f3 f8a8 	bl	8002770 <__aeabi_dsub>
 800f620:	2200      	movs	r2, #0
 800f622:	2300      	movs	r3, #0
 800f624:	e7f3      	b.n	800f60e <__ieee754_log+0x1e>
 800f626:	4bae      	ldr	r3, [pc, #696]	; (800f8e0 <__ieee754_log+0x2f0>)
 800f628:	2200      	movs	r2, #0
 800f62a:	f7f2 fe35 	bl	8002298 <__aeabi_dmul>
 800f62e:	2436      	movs	r4, #54	; 0x36
 800f630:	000b      	movs	r3, r1
 800f632:	4264      	negs	r4, r4
 800f634:	4aab      	ldr	r2, [pc, #684]	; (800f8e4 <__ieee754_log+0x2f4>)
 800f636:	4293      	cmp	r3, r2
 800f638:	dd06      	ble.n	800f648 <__ieee754_log+0x58>
 800f63a:	0002      	movs	r2, r0
 800f63c:	000b      	movs	r3, r1
 800f63e:	f7f1 febb 	bl	80013b8 <__aeabi_dadd>
 800f642:	e7e6      	b.n	800f612 <__ieee754_log+0x22>
 800f644:	2400      	movs	r4, #0
 800f646:	e7f5      	b.n	800f634 <__ieee754_log+0x44>
 800f648:	4da7      	ldr	r5, [pc, #668]	; (800f8e8 <__ieee754_log+0x2f8>)
 800f64a:	151a      	asrs	r2, r3, #20
 800f64c:	1952      	adds	r2, r2, r5
 800f64e:	1912      	adds	r2, r2, r4
 800f650:	031b      	lsls	r3, r3, #12
 800f652:	4ca6      	ldr	r4, [pc, #664]	; (800f8ec <__ieee754_log+0x2fc>)
 800f654:	0b1b      	lsrs	r3, r3, #12
 800f656:	9302      	str	r3, [sp, #8]
 800f658:	191c      	adds	r4, r3, r4
 800f65a:	2380      	movs	r3, #128	; 0x80
 800f65c:	035b      	lsls	r3, r3, #13
 800f65e:	4023      	ands	r3, r4
 800f660:	4ca3      	ldr	r4, [pc, #652]	; (800f8f0 <__ieee754_log+0x300>)
 800f662:	9d02      	ldr	r5, [sp, #8]
 800f664:	405c      	eors	r4, r3
 800f666:	151b      	asrs	r3, r3, #20
 800f668:	189b      	adds	r3, r3, r2
 800f66a:	4325      	orrs	r5, r4
 800f66c:	2200      	movs	r2, #0
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	0029      	movs	r1, r5
 800f672:	4b9f      	ldr	r3, [pc, #636]	; (800f8f0 <__ieee754_log+0x300>)
 800f674:	f7f3 f87c 	bl	8002770 <__aeabi_dsub>
 800f678:	9b02      	ldr	r3, [sp, #8]
 800f67a:	0006      	movs	r6, r0
 800f67c:	3302      	adds	r3, #2
 800f67e:	031b      	lsls	r3, r3, #12
 800f680:	000f      	movs	r7, r1
 800f682:	2200      	movs	r2, #0
 800f684:	0b1b      	lsrs	r3, r3, #12
 800f686:	2b02      	cmp	r3, #2
 800f688:	dc64      	bgt.n	800f754 <__ieee754_log+0x164>
 800f68a:	2300      	movs	r3, #0
 800f68c:	f7f0 fecc 	bl	8000428 <__aeabi_dcmpeq>
 800f690:	2800      	cmp	r0, #0
 800f692:	d019      	beq.n	800f6c8 <__ieee754_log+0xd8>
 800f694:	9b00      	ldr	r3, [sp, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d100      	bne.n	800f69c <__ieee754_log+0xac>
 800f69a:	e11c      	b.n	800f8d6 <__ieee754_log+0x2e6>
 800f69c:	0018      	movs	r0, r3
 800f69e:	f7f3 fc4d 	bl	8002f3c <__aeabi_i2d>
 800f6a2:	4a94      	ldr	r2, [pc, #592]	; (800f8f4 <__ieee754_log+0x304>)
 800f6a4:	4b94      	ldr	r3, [pc, #592]	; (800f8f8 <__ieee754_log+0x308>)
 800f6a6:	0004      	movs	r4, r0
 800f6a8:	000d      	movs	r5, r1
 800f6aa:	f7f2 fdf5 	bl	8002298 <__aeabi_dmul>
 800f6ae:	4a93      	ldr	r2, [pc, #588]	; (800f8fc <__ieee754_log+0x30c>)
 800f6b0:	0006      	movs	r6, r0
 800f6b2:	000f      	movs	r7, r1
 800f6b4:	4b92      	ldr	r3, [pc, #584]	; (800f900 <__ieee754_log+0x310>)
 800f6b6:	0020      	movs	r0, r4
 800f6b8:	0029      	movs	r1, r5
 800f6ba:	f7f2 fded 	bl	8002298 <__aeabi_dmul>
 800f6be:	0002      	movs	r2, r0
 800f6c0:	000b      	movs	r3, r1
 800f6c2:	0030      	movs	r0, r6
 800f6c4:	0039      	movs	r1, r7
 800f6c6:	e7ba      	b.n	800f63e <__ieee754_log+0x4e>
 800f6c8:	4a8e      	ldr	r2, [pc, #568]	; (800f904 <__ieee754_log+0x314>)
 800f6ca:	4b8f      	ldr	r3, [pc, #572]	; (800f908 <__ieee754_log+0x318>)
 800f6cc:	0030      	movs	r0, r6
 800f6ce:	0039      	movs	r1, r7
 800f6d0:	f7f2 fde2 	bl	8002298 <__aeabi_dmul>
 800f6d4:	0002      	movs	r2, r0
 800f6d6:	000b      	movs	r3, r1
 800f6d8:	2000      	movs	r0, #0
 800f6da:	498c      	ldr	r1, [pc, #560]	; (800f90c <__ieee754_log+0x31c>)
 800f6dc:	f7f3 f848 	bl	8002770 <__aeabi_dsub>
 800f6e0:	0032      	movs	r2, r6
 800f6e2:	0004      	movs	r4, r0
 800f6e4:	000d      	movs	r5, r1
 800f6e6:	003b      	movs	r3, r7
 800f6e8:	0030      	movs	r0, r6
 800f6ea:	0039      	movs	r1, r7
 800f6ec:	f7f2 fdd4 	bl	8002298 <__aeabi_dmul>
 800f6f0:	000b      	movs	r3, r1
 800f6f2:	0002      	movs	r2, r0
 800f6f4:	0029      	movs	r1, r5
 800f6f6:	0020      	movs	r0, r4
 800f6f8:	f7f2 fdce 	bl	8002298 <__aeabi_dmul>
 800f6fc:	9b00      	ldr	r3, [sp, #0]
 800f6fe:	9002      	str	r0, [sp, #8]
 800f700:	9103      	str	r1, [sp, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d106      	bne.n	800f714 <__ieee754_log+0x124>
 800f706:	0002      	movs	r2, r0
 800f708:	000b      	movs	r3, r1
 800f70a:	0030      	movs	r0, r6
 800f70c:	0039      	movs	r1, r7
 800f70e:	f7f3 f82f 	bl	8002770 <__aeabi_dsub>
 800f712:	e77e      	b.n	800f612 <__ieee754_log+0x22>
 800f714:	9800      	ldr	r0, [sp, #0]
 800f716:	f7f3 fc11 	bl	8002f3c <__aeabi_i2d>
 800f71a:	4a76      	ldr	r2, [pc, #472]	; (800f8f4 <__ieee754_log+0x304>)
 800f71c:	4b76      	ldr	r3, [pc, #472]	; (800f8f8 <__ieee754_log+0x308>)
 800f71e:	0004      	movs	r4, r0
 800f720:	000d      	movs	r5, r1
 800f722:	f7f2 fdb9 	bl	8002298 <__aeabi_dmul>
 800f726:	4a75      	ldr	r2, [pc, #468]	; (800f8fc <__ieee754_log+0x30c>)
 800f728:	9000      	str	r0, [sp, #0]
 800f72a:	9101      	str	r1, [sp, #4]
 800f72c:	4b74      	ldr	r3, [pc, #464]	; (800f900 <__ieee754_log+0x310>)
 800f72e:	0020      	movs	r0, r4
 800f730:	0029      	movs	r1, r5
 800f732:	f7f2 fdb1 	bl	8002298 <__aeabi_dmul>
 800f736:	0002      	movs	r2, r0
 800f738:	000b      	movs	r3, r1
 800f73a:	9802      	ldr	r0, [sp, #8]
 800f73c:	9903      	ldr	r1, [sp, #12]
 800f73e:	f7f3 f817 	bl	8002770 <__aeabi_dsub>
 800f742:	0032      	movs	r2, r6
 800f744:	003b      	movs	r3, r7
 800f746:	f7f3 f813 	bl	8002770 <__aeabi_dsub>
 800f74a:	0002      	movs	r2, r0
 800f74c:	000b      	movs	r3, r1
 800f74e:	9800      	ldr	r0, [sp, #0]
 800f750:	9901      	ldr	r1, [sp, #4]
 800f752:	e7dc      	b.n	800f70e <__ieee754_log+0x11e>
 800f754:	2380      	movs	r3, #128	; 0x80
 800f756:	05db      	lsls	r3, r3, #23
 800f758:	f7f1 fe2e 	bl	80013b8 <__aeabi_dadd>
 800f75c:	0002      	movs	r2, r0
 800f75e:	000b      	movs	r3, r1
 800f760:	0030      	movs	r0, r6
 800f762:	0039      	movs	r1, r7
 800f764:	f7f2 f992 	bl	8001a8c <__aeabi_ddiv>
 800f768:	9004      	str	r0, [sp, #16]
 800f76a:	9105      	str	r1, [sp, #20]
 800f76c:	9800      	ldr	r0, [sp, #0]
 800f76e:	f7f3 fbe5 	bl	8002f3c <__aeabi_i2d>
 800f772:	9a04      	ldr	r2, [sp, #16]
 800f774:	9b05      	ldr	r3, [sp, #20]
 800f776:	9006      	str	r0, [sp, #24]
 800f778:	9107      	str	r1, [sp, #28]
 800f77a:	0010      	movs	r0, r2
 800f77c:	0019      	movs	r1, r3
 800f77e:	f7f2 fd8b 	bl	8002298 <__aeabi_dmul>
 800f782:	4a63      	ldr	r2, [pc, #396]	; (800f910 <__ieee754_log+0x320>)
 800f784:	9b02      	ldr	r3, [sp, #8]
 800f786:	4694      	mov	ip, r2
 800f788:	4463      	add	r3, ip
 800f78a:	0002      	movs	r2, r0
 800f78c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f78e:	000b      	movs	r3, r1
 800f790:	9008      	str	r0, [sp, #32]
 800f792:	9109      	str	r1, [sp, #36]	; 0x24
 800f794:	f7f2 fd80 	bl	8002298 <__aeabi_dmul>
 800f798:	0004      	movs	r4, r0
 800f79a:	000d      	movs	r5, r1
 800f79c:	4a5d      	ldr	r2, [pc, #372]	; (800f914 <__ieee754_log+0x324>)
 800f79e:	4b5e      	ldr	r3, [pc, #376]	; (800f918 <__ieee754_log+0x328>)
 800f7a0:	f7f2 fd7a 	bl	8002298 <__aeabi_dmul>
 800f7a4:	4a5d      	ldr	r2, [pc, #372]	; (800f91c <__ieee754_log+0x32c>)
 800f7a6:	4b5e      	ldr	r3, [pc, #376]	; (800f920 <__ieee754_log+0x330>)
 800f7a8:	f7f1 fe06 	bl	80013b8 <__aeabi_dadd>
 800f7ac:	0022      	movs	r2, r4
 800f7ae:	002b      	movs	r3, r5
 800f7b0:	f7f2 fd72 	bl	8002298 <__aeabi_dmul>
 800f7b4:	4a5b      	ldr	r2, [pc, #364]	; (800f924 <__ieee754_log+0x334>)
 800f7b6:	4b5c      	ldr	r3, [pc, #368]	; (800f928 <__ieee754_log+0x338>)
 800f7b8:	f7f1 fdfe 	bl	80013b8 <__aeabi_dadd>
 800f7bc:	0022      	movs	r2, r4
 800f7be:	002b      	movs	r3, r5
 800f7c0:	f7f2 fd6a 	bl	8002298 <__aeabi_dmul>
 800f7c4:	4a59      	ldr	r2, [pc, #356]	; (800f92c <__ieee754_log+0x33c>)
 800f7c6:	4b5a      	ldr	r3, [pc, #360]	; (800f930 <__ieee754_log+0x340>)
 800f7c8:	f7f1 fdf6 	bl	80013b8 <__aeabi_dadd>
 800f7cc:	9a08      	ldr	r2, [sp, #32]
 800f7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d0:	f7f2 fd62 	bl	8002298 <__aeabi_dmul>
 800f7d4:	4a57      	ldr	r2, [pc, #348]	; (800f934 <__ieee754_log+0x344>)
 800f7d6:	9008      	str	r0, [sp, #32]
 800f7d8:	9109      	str	r1, [sp, #36]	; 0x24
 800f7da:	4b57      	ldr	r3, [pc, #348]	; (800f938 <__ieee754_log+0x348>)
 800f7dc:	0020      	movs	r0, r4
 800f7de:	0029      	movs	r1, r5
 800f7e0:	f7f2 fd5a 	bl	8002298 <__aeabi_dmul>
 800f7e4:	4a55      	ldr	r2, [pc, #340]	; (800f93c <__ieee754_log+0x34c>)
 800f7e6:	4b56      	ldr	r3, [pc, #344]	; (800f940 <__ieee754_log+0x350>)
 800f7e8:	f7f1 fde6 	bl	80013b8 <__aeabi_dadd>
 800f7ec:	0022      	movs	r2, r4
 800f7ee:	002b      	movs	r3, r5
 800f7f0:	f7f2 fd52 	bl	8002298 <__aeabi_dmul>
 800f7f4:	4a53      	ldr	r2, [pc, #332]	; (800f944 <__ieee754_log+0x354>)
 800f7f6:	4b54      	ldr	r3, [pc, #336]	; (800f948 <__ieee754_log+0x358>)
 800f7f8:	f7f1 fdde 	bl	80013b8 <__aeabi_dadd>
 800f7fc:	0022      	movs	r2, r4
 800f7fe:	002b      	movs	r3, r5
 800f800:	f7f2 fd4a 	bl	8002298 <__aeabi_dmul>
 800f804:	0002      	movs	r2, r0
 800f806:	000b      	movs	r3, r1
 800f808:	9808      	ldr	r0, [sp, #32]
 800f80a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f80c:	f7f1 fdd4 	bl	80013b8 <__aeabi_dadd>
 800f810:	9a02      	ldr	r2, [sp, #8]
 800f812:	4b4e      	ldr	r3, [pc, #312]	; (800f94c <__ieee754_log+0x35c>)
 800f814:	0004      	movs	r4, r0
 800f816:	1a9b      	subs	r3, r3, r2
 800f818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f81a:	000d      	movs	r5, r1
 800f81c:	4313      	orrs	r3, r2
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dd34      	ble.n	800f88c <__ieee754_log+0x29c>
 800f822:	2200      	movs	r2, #0
 800f824:	4b39      	ldr	r3, [pc, #228]	; (800f90c <__ieee754_log+0x31c>)
 800f826:	0030      	movs	r0, r6
 800f828:	0039      	movs	r1, r7
 800f82a:	f7f2 fd35 	bl	8002298 <__aeabi_dmul>
 800f82e:	0032      	movs	r2, r6
 800f830:	003b      	movs	r3, r7
 800f832:	f7f2 fd31 	bl	8002298 <__aeabi_dmul>
 800f836:	0002      	movs	r2, r0
 800f838:	000b      	movs	r3, r1
 800f83a:	9002      	str	r0, [sp, #8]
 800f83c:	9103      	str	r1, [sp, #12]
 800f83e:	0020      	movs	r0, r4
 800f840:	0029      	movs	r1, r5
 800f842:	f7f1 fdb9 	bl	80013b8 <__aeabi_dadd>
 800f846:	9a04      	ldr	r2, [sp, #16]
 800f848:	9b05      	ldr	r3, [sp, #20]
 800f84a:	f7f2 fd25 	bl	8002298 <__aeabi_dmul>
 800f84e:	9b00      	ldr	r3, [sp, #0]
 800f850:	0004      	movs	r4, r0
 800f852:	000d      	movs	r5, r1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d106      	bne.n	800f866 <__ieee754_log+0x276>
 800f858:	0002      	movs	r2, r0
 800f85a:	000b      	movs	r3, r1
 800f85c:	9802      	ldr	r0, [sp, #8]
 800f85e:	9903      	ldr	r1, [sp, #12]
 800f860:	f7f2 ff86 	bl	8002770 <__aeabi_dsub>
 800f864:	e74f      	b.n	800f706 <__ieee754_log+0x116>
 800f866:	4a23      	ldr	r2, [pc, #140]	; (800f8f4 <__ieee754_log+0x304>)
 800f868:	4b23      	ldr	r3, [pc, #140]	; (800f8f8 <__ieee754_log+0x308>)
 800f86a:	9806      	ldr	r0, [sp, #24]
 800f86c:	9907      	ldr	r1, [sp, #28]
 800f86e:	f7f2 fd13 	bl	8002298 <__aeabi_dmul>
 800f872:	4a22      	ldr	r2, [pc, #136]	; (800f8fc <__ieee754_log+0x30c>)
 800f874:	9000      	str	r0, [sp, #0]
 800f876:	9101      	str	r1, [sp, #4]
 800f878:	9806      	ldr	r0, [sp, #24]
 800f87a:	9907      	ldr	r1, [sp, #28]
 800f87c:	4b20      	ldr	r3, [pc, #128]	; (800f900 <__ieee754_log+0x310>)
 800f87e:	f7f2 fd0b 	bl	8002298 <__aeabi_dmul>
 800f882:	0022      	movs	r2, r4
 800f884:	002b      	movs	r3, r5
 800f886:	f7f1 fd97 	bl	80013b8 <__aeabi_dadd>
 800f88a:	e754      	b.n	800f736 <__ieee754_log+0x146>
 800f88c:	0002      	movs	r2, r0
 800f88e:	000b      	movs	r3, r1
 800f890:	0030      	movs	r0, r6
 800f892:	0039      	movs	r1, r7
 800f894:	f7f2 ff6c 	bl	8002770 <__aeabi_dsub>
 800f898:	9a04      	ldr	r2, [sp, #16]
 800f89a:	9b05      	ldr	r3, [sp, #20]
 800f89c:	f7f2 fcfc 	bl	8002298 <__aeabi_dmul>
 800f8a0:	9b00      	ldr	r3, [sp, #0]
 800f8a2:	0004      	movs	r4, r0
 800f8a4:	000d      	movs	r5, r1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d102      	bne.n	800f8b0 <__ieee754_log+0x2c0>
 800f8aa:	0002      	movs	r2, r0
 800f8ac:	000b      	movs	r3, r1
 800f8ae:	e72c      	b.n	800f70a <__ieee754_log+0x11a>
 800f8b0:	4a10      	ldr	r2, [pc, #64]	; (800f8f4 <__ieee754_log+0x304>)
 800f8b2:	4b11      	ldr	r3, [pc, #68]	; (800f8f8 <__ieee754_log+0x308>)
 800f8b4:	9806      	ldr	r0, [sp, #24]
 800f8b6:	9907      	ldr	r1, [sp, #28]
 800f8b8:	f7f2 fcee 	bl	8002298 <__aeabi_dmul>
 800f8bc:	4a0f      	ldr	r2, [pc, #60]	; (800f8fc <__ieee754_log+0x30c>)
 800f8be:	9000      	str	r0, [sp, #0]
 800f8c0:	9101      	str	r1, [sp, #4]
 800f8c2:	9806      	ldr	r0, [sp, #24]
 800f8c4:	9907      	ldr	r1, [sp, #28]
 800f8c6:	4b0e      	ldr	r3, [pc, #56]	; (800f900 <__ieee754_log+0x310>)
 800f8c8:	f7f2 fce6 	bl	8002298 <__aeabi_dmul>
 800f8cc:	0002      	movs	r2, r0
 800f8ce:	000b      	movs	r3, r1
 800f8d0:	0020      	movs	r0, r4
 800f8d2:	0029      	movs	r1, r5
 800f8d4:	e733      	b.n	800f73e <__ieee754_log+0x14e>
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	2100      	movs	r1, #0
 800f8da:	e69a      	b.n	800f612 <__ieee754_log+0x22>
 800f8dc:	c3500000 	.word	0xc3500000
 800f8e0:	43500000 	.word	0x43500000
 800f8e4:	7fefffff 	.word	0x7fefffff
 800f8e8:	fffffc01 	.word	0xfffffc01
 800f8ec:	00095f64 	.word	0x00095f64
 800f8f0:	3ff00000 	.word	0x3ff00000
 800f8f4:	fee00000 	.word	0xfee00000
 800f8f8:	3fe62e42 	.word	0x3fe62e42
 800f8fc:	35793c76 	.word	0x35793c76
 800f900:	3dea39ef 	.word	0x3dea39ef
 800f904:	55555555 	.word	0x55555555
 800f908:	3fd55555 	.word	0x3fd55555
 800f90c:	3fe00000 	.word	0x3fe00000
 800f910:	fff9eb86 	.word	0xfff9eb86
 800f914:	df3e5244 	.word	0xdf3e5244
 800f918:	3fc2f112 	.word	0x3fc2f112
 800f91c:	96cb03de 	.word	0x96cb03de
 800f920:	3fc74664 	.word	0x3fc74664
 800f924:	94229359 	.word	0x94229359
 800f928:	3fd24924 	.word	0x3fd24924
 800f92c:	55555593 	.word	0x55555593
 800f930:	3fe55555 	.word	0x3fe55555
 800f934:	d078c69f 	.word	0xd078c69f
 800f938:	3fc39a09 	.word	0x3fc39a09
 800f93c:	1d8e78af 	.word	0x1d8e78af
 800f940:	3fcc71c5 	.word	0x3fcc71c5
 800f944:	9997fa04 	.word	0x9997fa04
 800f948:	3fd99999 	.word	0x3fd99999
 800f94c:	0006b851 	.word	0x0006b851

0800f950 <nan>:
 800f950:	2000      	movs	r0, #0
 800f952:	4901      	ldr	r1, [pc, #4]	; (800f958 <nan+0x8>)
 800f954:	4770      	bx	lr
 800f956:	46c0      	nop			; (mov r8, r8)
 800f958:	7ff80000 	.word	0x7ff80000

0800f95c <_init>:
 800f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95e:	46c0      	nop			; (mov r8, r8)
 800f960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f962:	bc08      	pop	{r3}
 800f964:	469e      	mov	lr, r3
 800f966:	4770      	bx	lr

0800f968 <_fini>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	46c0      	nop			; (mov r8, r8)
 800f96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96e:	bc08      	pop	{r3}
 800f970:	469e      	mov	lr, r3
 800f972:	4770      	bx	lr
 800f974:	0000      	movs	r0, r0
	...

0800f978 <__FLASH_Program_Fast_veneer>:
 800f978:	b401      	push	{r0}
 800f97a:	4802      	ldr	r0, [pc, #8]	; (800f984 <__FLASH_Program_Fast_veneer+0xc>)
 800f97c:	4684      	mov	ip, r0
 800f97e:	bc01      	pop	{r0}
 800f980:	4760      	bx	ip
 800f982:	bf00      	nop
 800f984:	20000079 	.word	0x20000079

Disassembly of section .data:

20000000 <uwTickPrio>:
20000000:	00000004                                ....

20000004 <uwTickFreq>:
20000004:	00000001                                ....

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <SystemCoreClock>:
2000000c:	00f42400                                .$..

20000010 <_impure_ptr>:
20000010:	20000014                                ... 

20000014 <impure_data>:
	...

20000074 <__fdlib_version>:
20000074:	000000ff                                ....

20000078 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000078:	b580      	push	{r7, lr}
2000007a:	b088      	sub	sp, #32
2000007c:	af00      	add	r7, sp, #0
2000007e:	6078      	str	r0, [r7, #4]
20000080:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000082:	231f      	movs	r3, #31
20000084:	18fb      	adds	r3, r7, r3
20000086:	2200      	movs	r2, #0
20000088:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000008e:	683b      	ldr	r3, [r7, #0]
20000090:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000092:	4b1a      	ldr	r3, [pc, #104]	; (200000fc <FLASH_Program_Fast+0x84>)
20000094:	695a      	ldr	r2, [r3, #20]
20000096:	4b19      	ldr	r3, [pc, #100]	; (200000fc <FLASH_Program_Fast+0x84>)
20000098:	2180      	movs	r1, #128	; 0x80
2000009a:	02c9      	lsls	r1, r1, #11
2000009c:	430a      	orrs	r2, r1
2000009e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000a0:	f3ef 8310 	mrs	r3, PRIMASK
200000a4:	60fb      	str	r3, [r7, #12]
  return(result);
200000a6:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000aa:	b672      	cpsid	i
}
200000ac:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ae:	e00f      	b.n	200000d0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000b0:	697a      	ldr	r2, [r7, #20]
200000b2:	69bb      	ldr	r3, [r7, #24]
200000b4:	6812      	ldr	r2, [r2, #0]
200000b6:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b8:	697b      	ldr	r3, [r7, #20]
200000ba:	3304      	adds	r3, #4
200000bc:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000be:	69bb      	ldr	r3, [r7, #24]
200000c0:	3304      	adds	r3, #4
200000c2:	61bb      	str	r3, [r7, #24]
    index++;
200000c4:	211f      	movs	r1, #31
200000c6:	187b      	adds	r3, r7, r1
200000c8:	781a      	ldrb	r2, [r3, #0]
200000ca:	187b      	adds	r3, r7, r1
200000cc:	3201      	adds	r2, #1
200000ce:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000d0:	231f      	movs	r3, #31
200000d2:	18fb      	adds	r3, r7, r3
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	2b3f      	cmp	r3, #63	; 0x3f
200000d8:	d9ea      	bls.n	200000b0 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000da:	46c0      	nop			; (mov r8, r8)
200000dc:	4b07      	ldr	r3, [pc, #28]	; (200000fc <FLASH_Program_Fast+0x84>)
200000de:	691a      	ldr	r2, [r3, #16]
200000e0:	2380      	movs	r3, #128	; 0x80
200000e2:	025b      	lsls	r3, r3, #9
200000e4:	4013      	ands	r3, r2
200000e6:	d1f9      	bne.n	200000dc <FLASH_Program_Fast+0x64>
200000e8:	693b      	ldr	r3, [r7, #16]
200000ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000ec:	68bb      	ldr	r3, [r7, #8]
200000ee:	f383 8810 	msr	PRIMASK, r3
}
200000f2:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f4:	46c0      	nop			; (mov r8, r8)
200000f6:	46bd      	mov	sp, r7
200000f8:	b008      	add	sp, #32
200000fa:	bd80      	pop	{r7, pc}
200000fc:	40022000 	.word	0x40022000
